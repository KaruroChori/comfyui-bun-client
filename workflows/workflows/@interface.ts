
//File automatically generated, please don't change it manually.

import {Node} from "comfyui-bun-client"

export function dyn(x: unknown){return x as '@dyn'}
type $dyn = '@dyn'

export type STRING = string;
export type INT<min = void, max = void> = number;
export type FLOAT<min = void, max = void> = number;
export type BOOLEAN = boolean;

type ANY = 'ANY';
type MODEL = 'MODEL'
type CONDITIONING = 'CONDITIONING'
type LATENT = 'LATENT'
type CLIP = 'CLIP'
type VAE = 'VAE'
type IMAGE = 'IMAGE'
type MASK = 'MASK'
type CLIP_VISION = 'CLIP_VISION'
type CLIP_VISION_OUTPUT = 'CLIP_VISION_OUTPUT'
type STYLE_MODEL = 'STYLE_MODEL'
type CONTROL_NET = 'CONTROL_NET'
type GLIGEN = 'GLIGEN'
type UPSCALE_MODEL = 'UPSCALE_MODEL'
type SAMPLER = 'SAMPLER'
type SIGMAS = 'SIGMAS'
type GUIDER = 'GUIDER'
type NOISE = 'NOISE'
type PHOTOMAKER = 'PHOTOMAKER'
type WEBCAM = 'WEBCAM'
type AUDIO = 'AUDIO'
type PIPELINE = 'PIPELINE'
type BLIP_MODEL = 'BLIP_MODEL'
type BUS = 'BUS'
type NUMBER = 'NUMBER'
type CLIPSEG_MODEL = 'CLIPSEG_MODEL'
type DICT = 'DICT'
type LIST = 'LIST'
type CROP_DATA = 'CROP_DATA'
type SEED = 'SEED'
type MIDAS_MODEL = 'MIDAS_MODEL'
type SAM_MODEL = 'SAM_MODEL'
type SAM_PARAMETERS = 'SAM_PARAMETERS'
type IMAGE_BOUNDS = 'IMAGE_BOUNDS'
type GROUNDING_DINO_MODEL = 'GROUNDING_DINO_MODEL'
type POSE_KEYPOINT = 'POSE_KEYPOINT'
type BBOX_DETECTOR = 'BBOX_DETECTOR'
type OPTICAL_FLOW = 'OPTICAL_FLOW'
type TRACKING = 'TRACKING'
type IPADAPTER = 'IPADAPTER'
type INSIGHTFACE = 'INSIGHTFACE'
type EMBEDS = 'EMBEDS'
type IPADAPTER_PARAMS = 'IPADAPTER_PARAMS'
type WEIGHTS_STRATEGY = 'WEIGHTS_STRATEGY'
type VHS_BatchManager = 'VHS_BatchManager'
type VHS_FILENAMES = 'VHS_FILENAMES'
type VHS_VIDEOINFO = 'VHS_VIDEOINFO'
type VHS_AUDIO = 'VHS_AUDIO'
type SCENE_VIDEO = 'SCENE_VIDEO'
type CROP_INFO = 'CROP_INFO'
type RGTHREE_CONTEXT = 'RGTHREE_CONTEXT'
type T5 = 'T5'
type FLOAT_LIST = 'FLOAT_LIST'
type STRING_LIST = 'STRING_LIST'
type INT_LIST = 'INT_LIST'
type GRID_ANNOTATION = 'GRID_ANNOTATION'
type CH_SETTINGS = 'CH_SETTINGS'
type PPF_SETTINGS = 'PPF_SETTINGS'
type SCRIPT = 'SCRIPT'
type SDXL_TUPLE = 'SDXL_TUPLE'
type LORA_STACK = 'LORA_STACK'
type CONTROL_NET_STACK = 'CONTROL_NET_STACK'
type DEPENDENCIES = 'DEPENDENCIES'
type XY = 'XY'
type LIVEPORTRAITPIPE = 'LIVEPORTRAITPIPE'
type CROPINFO = 'CROPINFO'
type RETARGETINGINFO = 'RETARGETINGINFO'
type LP_OUT = 'LP_OUT'
type LPCROPPER = 'LPCROPPER'
type INSTANTID = 'INSTANTID'
type FACEANALYSIS = 'FACEANALYSIS'
type FACE_EMBEDS = 'FACE_EMBEDS'
type ListString = 'ListString'
type CPipeAny = 'CPipeAny'
type JSON = 'JSON'
type METADATA_RAW = 'METADATA_RAW'
type TIMESTEP_KEYFRAME = 'TIMESTEP_KEYFRAME'
type CONTROL_NET_WEIGHTS = 'CONTROL_NET_WEIGHTS'
type LATENT_KEYFRAME = 'LATENT_KEYFRAME'
type ACNAUTOSIZE = 'ACNAUTOSIZE'
type CN_WEIGHTS_EXTRAS = 'CN_WEIGHTS_EXTRAS'
type SPARSE_METHOD = 'SPARSE_METHOD'
type PLUS_INPUT = 'PLUS_INPUT'
type MOTION_LORA = 'MOTION_LORA'
type ADEAUTOSIZE = 'ADEAUTOSIZE'
type NOISE_LAYERS = 'NOISE_LAYERS'
type ITERATION_OPTS = 'ITERATION_OPTS'
type CUSTOM_CFG = 'CUSTOM_CFG'
type SIGMA_SCHEDULE = 'SIGMA_SCHEDULE'
type IMAGE_INJECT = 'IMAGE_INJECT'
type SAMPLE_SETTINGS = 'SAMPLE_SETTINGS'
type AD_KEYFRAMES = 'AD_KEYFRAMES'
type MULTIVAL = 'MULTIVAL'
type CONTEXT_OPTIONS = 'CONTEXT_OPTIONS'
type VIEW_OPTS = 'VIEW_OPTS'
type ADEWARN = 'ADEWARN'
type CONTEXT_EXTRAS = 'CONTEXT_EXTRAS'
type CONTEXTREF_MODE = 'CONTEXTREF_MODE'
type CONTEXTREF_TUNE = 'CONTEXTREF_TUNE'
type CONTEXTREF_KEYFRAME = 'CONTEXTREF_KEYFRAME'
type NAIVEREUSE_KEYFRAME = 'NAIVEREUSE_KEYFRAME'
type LORA_HOOK = 'LORA_HOOK'
type LORA_HOOK_KEYFRAMES = 'LORA_HOOK_KEYFRAMES'
type TIMESTEPS_COND = 'TIMESTEPS_COND'
type PE_ADJUST = 'PE_ADJUST'
type WEIGHT_ADJUST = 'WEIGHT_ADJUST'
type AD_SETTINGS = 'AD_SETTINGS'
type CFG_EXTRAS = 'CFG_EXTRAS'
type IMAGE_INJECT_OPTIONS = 'IMAGE_INJECT_OPTIONS'
type M_MODELS = 'M_MODELS'
type MOTION_MODEL_ADE = 'MOTION_MODEL_ADE'
type CAMERACTRL_POSES = 'CAMERACTRL_POSES'
type PIA_INPUT = 'PIA_INPUT'
type GIF = 'GIF'
type SEGS = 'SEGS'
type DETAILER_HOOK = 'DETAILER_HOOK'
type SCHEDULER_FUNC = 'SCHEDULER_FUNC'
type BASIC_PIPE = 'BASIC_PIPE'
type SEGM_DETECTOR = 'SEGM_DETECTOR'
type DETAILER_PIPE = 'DETAILER_PIPE'
type PK_HOOK = 'PK_HOOK'
type UPSCALER = 'UPSCALER'
type KSAMPLER = 'KSAMPLER'
type UPSCALER_HOOK = 'UPSCALER_HOOK'
type SEGS_PREPROCESSOR = 'SEGS_PREPROCESSOR'
type IPADAPTER_PIPE = 'IPADAPTER_PIPE'
type SEGS_HEADER = 'SEGS_HEADER'
type SEG_ELT = 'SEG_ELT'
type SEG_ELT_crop_region = 'SEG_ELT_crop_region'
type SEG_ELT_bbox = 'SEG_ELT_bbox'
type SEG_ELT_control_net_wrapper = 'SEG_ELT_control_net_wrapper'
type KSAMPLER_ADVANCED = 'KSAMPLER_ADVANCED'
type REGIONAL_PROMPTS = 'REGIONAL_PROMPTS'
type TRANSFORMERS_CLASSIFIER = 'TRANSFORMERS_CLASSIFIER'
type INPAINT_PATCH = 'INPAINT_PATCH'
type INPAINT_MODEL = 'INPAINT_MODEL'

export const Workflow = (_ctx?: Map<number,Node>) => {
    const ctx = _ctx??new Map();
    const tmp = {
        
    /**
     * KSampler from sampling
     * @desc Uses the provided model, positive and negative conditioning to denoise the latent image.
    */
    "KSampler" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'seed'(value : INT)  { super.$$link(1, value) } 
//set 'steps'(value : INT)  { super.$$link(2, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(3, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(4, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn)  { super.$$link(5, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(6, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(7, value) } 
//set 'latent_image'(value : LATENT)  { super.$$link(8, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(9, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.seed
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.cfg default: 8 step: 0.1
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.latent_image
		 * @param opts.denoise default: 1 step: 0.01}
        */
        constructor(opts:{
            'model': MODEL,'seed'?: INT,'steps'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn,'positive': CONDITIONING,'negative': CONDITIONING,'latent_image': LATENT,'denoise'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("seed", opts['seed']??tmp["KSampler"].defaults['seed'])
super.$$link("steps", opts['steps']??tmp["KSampler"].defaults['steps'])
super.$$link("cfg", opts['cfg']??tmp["KSampler"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("latent_image", opts['latent_image'])
super.$$link("denoise", opts['denoise']??tmp["KSampler"].defaults['denoise'])
}

        static defaults = {
    'seed':  0,
'steps':  20,
'cfg':  8,
'denoise':  1
}
        protected override $$type(){
            return "KSampler"
        }
},

    /**
     * Load Checkpoint from loaders
     * @desc Loads a diffusion model checkpoint, diffusion models are used to denoise latents.
    */
    "CheckpointLoaderSimple" : class extends Node{
        //Setters
        //set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this.$uid.toString(), 1]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this.$uid.toString(), 2]  as unknown as VAE; }

        /**
          * Constructor
		 * @param opts.ckpt_name}
        */
        constructor(opts:{
            'ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn
        }){
            super(ctx);

            super.$$link("ckpt_name", opts['ckpt_name'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "CheckpointLoaderSimple"
        }
},

    /**
     * CLIP Text Encode (Prompt) from conditioning
     * @desc Encodes a text prompt using a CLIP model into an embedding that can be used to guide the diffusion model towards generating specific images.
    */
    "CLIPTextEncode" : class extends Node{
        //Setters
        //set 'text'(value : STRING)  { super.$$link(0, value) } 
//set 'clip'(value : CLIP)  { super.$$link(1, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.text
		 * @param opts.clip}
        */
        constructor(opts:{
            'text': STRING,'clip': CLIP
        }){
            super(ctx);

            super.$$link("text", opts['text'])
super.$$link("clip", opts['clip'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "CLIPTextEncode"
        }
},

    /**
     * CLIP Set Last Layer from conditioning
     * @desc 
    */
    "CLIPSetLastLayer" : class extends Node{
        //Setters
        //set 'clip'(value : CLIP)  { super.$$link(0, value) } 
//set 'stop_at_clip_layer'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'CLIP'() : CLIP { return [this.$uid.toString(), 0]  as unknown as CLIP; }

        /**
          * Constructor
		 * @param opts.clip
		 * @param opts.stop_at_clip_layer default: -1 max: -1 min: -24 step: 1}
        */
        constructor(opts:{
            'clip': CLIP,'stop_at_clip_layer'?: INT
        }){
            super(ctx);

            super.$$link("clip", opts['clip'])
super.$$link("stop_at_clip_layer", opts['stop_at_clip_layer']??tmp["CLIPSetLastLayer"].defaults['stop_at_clip_layer'])
}

        static defaults = {
    'stop_at_clip_layer':  -1
}
        protected override $$type(){
            return "CLIPSetLastLayer"
        }
},

    /**
     * VAE Decode from latent
     * @desc Decodes latent images back into pixel space images.
    */
    "VAEDecode" : class extends Node{
        //Setters
        //set 'samples'(value : LATENT)  { super.$$link(0, value) } 
//set 'vae'(value : VAE)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.samples
		 * @param opts.vae}
        */
        constructor(opts:{
            'samples': LATENT,'vae': VAE
        }){
            super(ctx);

            super.$$link("samples", opts['samples'])
super.$$link("vae", opts['vae'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "VAEDecode"
        }
},

    /**
     * VAE Encode from latent
     * @desc 
    */
    "VAEEncode" : class extends Node{
        //Setters
        //set 'pixels'(value : IMAGE)  { super.$$link(0, value) } 
//set 'vae'(value : VAE)  { super.$$link(1, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.pixels
		 * @param opts.vae}
        */
        constructor(opts:{
            'pixels': IMAGE,'vae': VAE
        }){
            super(ctx);

            super.$$link("pixels", opts['pixels'])
super.$$link("vae", opts['vae'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "VAEEncode"
        }
},

    /**
     * VAE Encode (for Inpainting) from latent/inpaint
     * @desc 
    */
    "VAEEncodeForInpaint" : class extends Node{
        //Setters
        //set 'pixels'(value : IMAGE)  { super.$$link(0, value) } 
//set 'vae'(value : VAE)  { super.$$link(1, value) } 
//set 'mask'(value : MASK)  { super.$$link(2, value) } 
//set 'grow_mask_by'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.pixels
		 * @param opts.vae
		 * @param opts.mask
		 * @param opts.grow_mask_by default: 6 step: 1}
        */
        constructor(opts:{
            'pixels': IMAGE,'vae': VAE,'mask': MASK,'grow_mask_by'?: INT
        }){
            super(ctx);

            super.$$link("pixels", opts['pixels'])
super.$$link("vae", opts['vae'])
super.$$link("mask", opts['mask'])
super.$$link("grow_mask_by", opts['grow_mask_by']??tmp["VAEEncodeForInpaint"].defaults['grow_mask_by'])
}

        static defaults = {
    'grow_mask_by':  6
}
        protected override $$type(){
            return "VAEEncodeForInpaint"
        }
},

    /**
     * Load VAE from loaders
     * @desc 
    */
    "VAELoader" : class extends Node{
        //Setters
        //set 'vae_name'(value : 'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'|'taesd'|'taesdxl'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'VAE'() : VAE { return [this.$uid.toString(), 0]  as unknown as VAE; }

        /**
          * Constructor
		 * @param opts.vae_name}
        */
        constructor(opts:{
            'vae_name': 'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'|'taesd'|'taesdxl'| $dyn
        }){
            super(ctx);

            super.$$link("vae_name", opts['vae_name'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "VAELoader"
        }
},

    /**
     * Empty Latent Image from latent
     * @desc Create a new batch of empty latent images to be denoised via sampling.
    */
    "EmptyLatentImage" : class extends Node{
        //Setters
        //set 'width'(value : INT)  { super.$$link(0, value) } 
//set 'height'(value : INT)  { super.$$link(1, value) } 
//set 'batch_size'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.width default: 512 max: 16384 min: 16 step: 8
		 * @param opts.height default: 512 max: 16384 min: 16 step: 8
		 * @param opts.batch_size default: 1 max: 4096 min: 1}
        */
        constructor(opts:{
            'width'?: INT,'height'?: INT,'batch_size'?: INT
        }){
            super(ctx);

            super.$$link("width", opts['width']??tmp["EmptyLatentImage"].defaults['width'])
super.$$link("height", opts['height']??tmp["EmptyLatentImage"].defaults['height'])
super.$$link("batch_size", opts['batch_size']??tmp["EmptyLatentImage"].defaults['batch_size'])
}

        static defaults = {
    'width':  512,
'height':  512,
'batch_size':  1
}
        protected override $$type(){
            return "EmptyLatentImage"
        }
},

    /**
     * Upscale Latent from latent
     * @desc 
    */
    "LatentUpscale" : class extends Node{
        //Setters
        //set 'samples'(value : LATENT)  { super.$$link(0, value) } 
//set 'upscale_method'(value : 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp'| $dyn)  { super.$$link(1, value) } 
//set 'width'(value : INT)  { super.$$link(2, value) } 
//set 'height'(value : INT)  { super.$$link(3, value) } 
//set 'crop'(value : 'disabled'|'center'| $dyn)  { super.$$link(4, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.samples
		 * @param opts.upscale_method
		 * @param opts.width default: 512 step: 8
		 * @param opts.height default: 512 step: 8
		 * @param opts.crop}
        */
        constructor(opts:{
            'samples': LATENT,'upscale_method': 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp'| $dyn,'width'?: INT,'height'?: INT,'crop': 'disabled'|'center'| $dyn
        }){
            super(ctx);

            super.$$link("samples", opts['samples'])
super.$$link("upscale_method", opts['upscale_method'])
super.$$link("width", opts['width']??tmp["LatentUpscale"].defaults['width'])
super.$$link("height", opts['height']??tmp["LatentUpscale"].defaults['height'])
super.$$link("crop", opts['crop'])
}

        static defaults = {
    'width':  512,
'height':  512
}
        protected override $$type(){
            return "LatentUpscale"
        }
},

    /**
     * Upscale Latent By from latent
     * @desc 
    */
    "LatentUpscaleBy" : class extends Node{
        //Setters
        //set 'samples'(value : LATENT)  { super.$$link(0, value) } 
//set 'upscale_method'(value : 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp'| $dyn)  { super.$$link(1, value) } 
//set 'scale_by'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.samples
		 * @param opts.upscale_method
		 * @param opts.scale_by default: 1.5 max: 8 min: 0.01 step: 0.01}
        */
        constructor(opts:{
            'samples': LATENT,'upscale_method': 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp'| $dyn,'scale_by'?: FLOAT
        }){
            super(ctx);

            super.$$link("samples", opts['samples'])
super.$$link("upscale_method", opts['upscale_method'])
super.$$link("scale_by", opts['scale_by']??tmp["LatentUpscaleBy"].defaults['scale_by'])
}

        static defaults = {
    'scale_by':  1.5
}
        protected override $$type(){
            return "LatentUpscaleBy"
        }
},

    /**
     * Latent From Batch from latent/batch
     * @desc 
    */
    "LatentFromBatch" : class extends Node{
        //Setters
        //set 'samples'(value : LATENT)  { super.$$link(0, value) } 
//set 'batch_index'(value : INT)  { super.$$link(1, value) } 
//set 'length'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.samples
		 * @param opts.batch_index
		 * @param opts.length default: 1 max: 64 min: 1}
        */
        constructor(opts:{
            'samples': LATENT,'batch_index'?: INT,'length'?: INT
        }){
            super(ctx);

            super.$$link("samples", opts['samples'])
super.$$link("batch_index", opts['batch_index']??tmp["LatentFromBatch"].defaults['batch_index'])
super.$$link("length", opts['length']??tmp["LatentFromBatch"].defaults['length'])
}

        static defaults = {
    'batch_index':  0,
'length':  1
}
        protected override $$type(){
            return "LatentFromBatch"
        }
},

    /**
     * Repeat Latent Batch from latent/batch
     * @desc 
    */
    "RepeatLatentBatch" : class extends Node{
        //Setters
        //set 'samples'(value : LATENT)  { super.$$link(0, value) } 
//set 'amount'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.samples
		 * @param opts.amount default: 1 max: 64 min: 1}
        */
        constructor(opts:{
            'samples': LATENT,'amount'?: INT
        }){
            super(ctx);

            super.$$link("samples", opts['samples'])
super.$$link("amount", opts['amount']??tmp["RepeatLatentBatch"].defaults['amount'])
}

        static defaults = {
    'amount':  1
}
        protected override $$type(){
            return "RepeatLatentBatch"
        }
},

    /**
     * Save Image from image
     * @desc Saves the input images to your ComfyUI output directory.
    */
    "SaveImage" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'filename_prefix'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.filename_prefix default: "ComfyUI"}
        */
        constructor(opts:{
            'images': IMAGE,'filename_prefix'?: STRING
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("filename_prefix", opts['filename_prefix']??tmp["SaveImage"].defaults['filename_prefix'])
}

        static defaults = {
    'filename_prefix':  "ComfyUI"
}
        protected override $$type(){
            return "SaveImage"
        }
},

    /**
     * Preview Image from image
     * @desc Saves the input images to your ComfyUI output directory.
    */
    "PreviewImage" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.images}
        */
        constructor(opts:{
            'images': IMAGE
        }){
            super(ctx);

            super.$$link("images", opts['images'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "PreviewImage"
        }
},

    /**
     * Load Image from image
     * @desc 
    */
    "LoadImage" : class extends Node{
        //Setters
        //set 'image'(value : '00010-2274211228.png'|'1.png'|'13368745_041_0591.jpg'|'2019-12-13-more-velm.jpg'|'37756119_043_92ea.jpg'|'56162430_104_c181.jpg'|'56162430_111_453c.jpg'|'61635388_057_c911.jpg'|'61635388_068_b3ca (1).jpg'|'61635388_068_b3ca.jpg'|'61635388_077_aa9e.jpg'|'89918606_004_7c7a.jpg'|'9377545.png'|'Ashley_Meh.webp'|'ComfyUI_00135_.png'|'ComfyUI_temp_fkoyu_00029_.png'|'ComfyUI_temp_khmtq_00005_.png'|'ComfyUI_temp_khmtq_00005_2.png'|'ComfyUI_temp_mpmkr_00234_.png'|'ComfyUI_temp_mpmkr_00258_.png'|'ComfyUI_temp_mpmkr_00296_.png'|'ComfyUI_temp_mpmkr_00347_.png'|'ComfyUI_temp_mpmkr_00497_.png'|'ComfyUI_temp_mpmkr_00540_.png'|'ComfyUI_temp_mpmkr_00542_.png'|'ComfyUI_temp_mpmkr_00550_.png'|'ComfyUI_temp_mpmkr_00733_.png'|'ComfyUI_temp_onszj_00008_.png'|'ComfyUI_temp_otlbq_00049_.png'|'ComfyUI_temp_pxygj_00023_.png'|'DSCF6491.JPG'|'DSCF8216.JPG'|'DSCF8334.JPG'|'DSCF9566.JPG'|'FB_IMG_1671397597411.jpg'|'IMGP4666.JPG'|'IMGP4670.JPG'|'IMG_1913.JPG'|'Julia.webp'|'Julia2.webp'|'Mom.webp'|'QSCF8096.JPG'|'Screenshot from 2022-04-19 11-38-41.png'|'a837af5519f074782ae0b9c32eee12a7.jpg'|'aaa'|'asset.png'|'example-a.png'|'example.png'|'image (1).png'|'maegcgmdajglmcle-small.jpeg'|'testqr.png'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'MASK'() : MASK { return [this.$uid.toString(), 1]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.image}
        */
        constructor(opts:{
            'image': '00010-2274211228.png'|'1.png'|'13368745_041_0591.jpg'|'2019-12-13-more-velm.jpg'|'37756119_043_92ea.jpg'|'56162430_104_c181.jpg'|'56162430_111_453c.jpg'|'61635388_057_c911.jpg'|'61635388_068_b3ca (1).jpg'|'61635388_068_b3ca.jpg'|'61635388_077_aa9e.jpg'|'89918606_004_7c7a.jpg'|'9377545.png'|'Ashley_Meh.webp'|'ComfyUI_00135_.png'|'ComfyUI_temp_fkoyu_00029_.png'|'ComfyUI_temp_khmtq_00005_.png'|'ComfyUI_temp_khmtq_00005_2.png'|'ComfyUI_temp_mpmkr_00234_.png'|'ComfyUI_temp_mpmkr_00258_.png'|'ComfyUI_temp_mpmkr_00296_.png'|'ComfyUI_temp_mpmkr_00347_.png'|'ComfyUI_temp_mpmkr_00497_.png'|'ComfyUI_temp_mpmkr_00540_.png'|'ComfyUI_temp_mpmkr_00542_.png'|'ComfyUI_temp_mpmkr_00550_.png'|'ComfyUI_temp_mpmkr_00733_.png'|'ComfyUI_temp_onszj_00008_.png'|'ComfyUI_temp_otlbq_00049_.png'|'ComfyUI_temp_pxygj_00023_.png'|'DSCF6491.JPG'|'DSCF8216.JPG'|'DSCF8334.JPG'|'DSCF9566.JPG'|'FB_IMG_1671397597411.jpg'|'IMGP4666.JPG'|'IMGP4670.JPG'|'IMG_1913.JPG'|'Julia.webp'|'Julia2.webp'|'Mom.webp'|'QSCF8096.JPG'|'Screenshot from 2022-04-19 11-38-41.png'|'a837af5519f074782ae0b9c32eee12a7.jpg'|'aaa'|'asset.png'|'example-a.png'|'example.png'|'image (1).png'|'maegcgmdajglmcle-small.jpeg'|'testqr.png'| $dyn
        }){
            super(ctx);

            super.$$link("image", opts['image'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "LoadImage"
        }
},

    /**
     * Load Image (as Mask) from mask
     * @desc 
    */
    "LoadImageMask" : class extends Node{
        //Setters
        //set 'image'(value : '00010-2274211228.png'|'1.png'|'13368745_041_0591.jpg'|'2019-12-13-more-velm.jpg'|'37756119_043_92ea.jpg'|'56162430_104_c181.jpg'|'56162430_111_453c.jpg'|'61635388_057_c911.jpg'|'61635388_068_b3ca (1).jpg'|'61635388_068_b3ca.jpg'|'61635388_077_aa9e.jpg'|'89918606_004_7c7a.jpg'|'9377545.png'|'Ashley_Meh.webp'|'ComfyUI_00135_.png'|'ComfyUI_temp_fkoyu_00029_.png'|'ComfyUI_temp_khmtq_00005_.png'|'ComfyUI_temp_khmtq_00005_2.png'|'ComfyUI_temp_mpmkr_00234_.png'|'ComfyUI_temp_mpmkr_00258_.png'|'ComfyUI_temp_mpmkr_00296_.png'|'ComfyUI_temp_mpmkr_00347_.png'|'ComfyUI_temp_mpmkr_00497_.png'|'ComfyUI_temp_mpmkr_00540_.png'|'ComfyUI_temp_mpmkr_00542_.png'|'ComfyUI_temp_mpmkr_00550_.png'|'ComfyUI_temp_mpmkr_00733_.png'|'ComfyUI_temp_onszj_00008_.png'|'ComfyUI_temp_otlbq_00049_.png'|'ComfyUI_temp_pxygj_00023_.png'|'DSCF6491.JPG'|'DSCF8216.JPG'|'DSCF8334.JPG'|'DSCF9566.JPG'|'FB_IMG_1671397597411.jpg'|'IMGP4666.JPG'|'IMGP4670.JPG'|'IMG_1913.JPG'|'Julia.webp'|'Julia2.webp'|'Mom.webp'|'QSCF8096.JPG'|'Screenshot from 2022-04-19 11-38-41.png'|'a837af5519f074782ae0b9c32eee12a7.jpg'|'aaa'|'asset.png'|'example-a.png'|'example.png'|'image (1).png'|'maegcgmdajglmcle-small.jpeg'|'testqr.png'| $dyn)  { super.$$link(0, value) } 
//set 'channel'(value : 'alpha'|'red'|'green'|'blue'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.channel}
        */
        constructor(opts:{
            'image': '00010-2274211228.png'|'1.png'|'13368745_041_0591.jpg'|'2019-12-13-more-velm.jpg'|'37756119_043_92ea.jpg'|'56162430_104_c181.jpg'|'56162430_111_453c.jpg'|'61635388_057_c911.jpg'|'61635388_068_b3ca (1).jpg'|'61635388_068_b3ca.jpg'|'61635388_077_aa9e.jpg'|'89918606_004_7c7a.jpg'|'9377545.png'|'Ashley_Meh.webp'|'ComfyUI_00135_.png'|'ComfyUI_temp_fkoyu_00029_.png'|'ComfyUI_temp_khmtq_00005_.png'|'ComfyUI_temp_khmtq_00005_2.png'|'ComfyUI_temp_mpmkr_00234_.png'|'ComfyUI_temp_mpmkr_00258_.png'|'ComfyUI_temp_mpmkr_00296_.png'|'ComfyUI_temp_mpmkr_00347_.png'|'ComfyUI_temp_mpmkr_00497_.png'|'ComfyUI_temp_mpmkr_00540_.png'|'ComfyUI_temp_mpmkr_00542_.png'|'ComfyUI_temp_mpmkr_00550_.png'|'ComfyUI_temp_mpmkr_00733_.png'|'ComfyUI_temp_onszj_00008_.png'|'ComfyUI_temp_otlbq_00049_.png'|'ComfyUI_temp_pxygj_00023_.png'|'DSCF6491.JPG'|'DSCF8216.JPG'|'DSCF8334.JPG'|'DSCF9566.JPG'|'FB_IMG_1671397597411.jpg'|'IMGP4666.JPG'|'IMGP4670.JPG'|'IMG_1913.JPG'|'Julia.webp'|'Julia2.webp'|'Mom.webp'|'QSCF8096.JPG'|'Screenshot from 2022-04-19 11-38-41.png'|'a837af5519f074782ae0b9c32eee12a7.jpg'|'aaa'|'asset.png'|'example-a.png'|'example.png'|'image (1).png'|'maegcgmdajglmcle-small.jpeg'|'testqr.png'| $dyn,'channel': 'alpha'|'red'|'green'|'blue'| $dyn
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("channel", opts['channel'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "LoadImageMask"
        }
},

    /**
     * Upscale Image from image/upscaling
     * @desc 
    */
    "ImageScale" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'upscale_method'(value : 'nearest-exact'|'bilinear'|'area'|'bicubic'|'lanczos'| $dyn)  { super.$$link(1, value) } 
//set 'width'(value : INT)  { super.$$link(2, value) } 
//set 'height'(value : INT)  { super.$$link(3, value) } 
//set 'crop'(value : 'disabled'|'center'| $dyn)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.upscale_method
		 * @param opts.width default: 512 step: 1
		 * @param opts.height default: 512 step: 1
		 * @param opts.crop}
        */
        constructor(opts:{
            'image': IMAGE,'upscale_method': 'nearest-exact'|'bilinear'|'area'|'bicubic'|'lanczos'| $dyn,'width'?: INT,'height'?: INT,'crop': 'disabled'|'center'| $dyn
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("upscale_method", opts['upscale_method'])
super.$$link("width", opts['width']??tmp["ImageScale"].defaults['width'])
super.$$link("height", opts['height']??tmp["ImageScale"].defaults['height'])
super.$$link("crop", opts['crop'])
}

        static defaults = {
    'width':  512,
'height':  512
}
        protected override $$type(){
            return "ImageScale"
        }
},

    /**
     * Upscale Image By from image/upscaling
     * @desc 
    */
    "ImageScaleBy" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'upscale_method'(value : 'nearest-exact'|'bilinear'|'area'|'bicubic'|'lanczos'| $dyn)  { super.$$link(1, value) } 
//set 'scale_by'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.upscale_method
		 * @param opts.scale_by default: 1 max: 8 min: 0.01 step: 0.01}
        */
        constructor(opts:{
            'image': IMAGE,'upscale_method': 'nearest-exact'|'bilinear'|'area'|'bicubic'|'lanczos'| $dyn,'scale_by'?: FLOAT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("upscale_method", opts['upscale_method'])
super.$$link("scale_by", opts['scale_by']??tmp["ImageScaleBy"].defaults['scale_by'])
}

        static defaults = {
    'scale_by':  1
}
        protected override $$type(){
            return "ImageScaleBy"
        }
},

    /**
     * Invert Image from image
     * @desc 
    */
    "ImageInvert" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image}
        */
        constructor(opts:{
            'image': IMAGE
        }){
            super(ctx);

            super.$$link("image", opts['image'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImageInvert"
        }
},

    /**
     * Batch Images from image
     * @desc 
    */
    "ImageBatch" : class extends Node{
        //Setters
        //set 'image1'(value : IMAGE)  { super.$$link(0, value) } 
//set 'image2'(value : IMAGE)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image1
		 * @param opts.image2}
        */
        constructor(opts:{
            'image1': IMAGE,'image2': IMAGE
        }){
            super(ctx);

            super.$$link("image1", opts['image1'])
super.$$link("image2", opts['image2'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImageBatch"
        }
},

    /**
     * Pad Image for Outpainting from image
     * @desc 
    */
    "ImagePadForOutpaint" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'left'(value : INT)  { super.$$link(1, value) } 
//set 'top'(value : INT)  { super.$$link(2, value) } 
//set 'right'(value : INT)  { super.$$link(3, value) } 
//set 'bottom'(value : INT)  { super.$$link(4, value) } 
//set 'feathering'(value : INT)  { super.$$link(5, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'MASK'() : MASK { return [this.$uid.toString(), 1]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.left step: 8
		 * @param opts.top step: 8
		 * @param opts.right step: 8
		 * @param opts.bottom step: 8
		 * @param opts.feathering default: 40 step: 1}
        */
        constructor(opts:{
            'image': IMAGE,'left'?: INT,'top'?: INT,'right'?: INT,'bottom'?: INT,'feathering'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("left", opts['left']??tmp["ImagePadForOutpaint"].defaults['left'])
super.$$link("top", opts['top']??tmp["ImagePadForOutpaint"].defaults['top'])
super.$$link("right", opts['right']??tmp["ImagePadForOutpaint"].defaults['right'])
super.$$link("bottom", opts['bottom']??tmp["ImagePadForOutpaint"].defaults['bottom'])
super.$$link("feathering", opts['feathering']??tmp["ImagePadForOutpaint"].defaults['feathering'])
}

        static defaults = {
    'left':  0,
'top':  0,
'right':  0,
'bottom':  0,
'feathering':  40
}
        protected override $$type(){
            return "ImagePadForOutpaint"
        }
},

    /**
     * EmptyImage from image
     * @desc 
    */
    "EmptyImage" : class extends Node{
        //Setters
        //set 'width'(value : INT)  { super.$$link(0, value) } 
//set 'height'(value : INT)  { super.$$link(1, value) } 
//set 'batch_size'(value : INT)  { super.$$link(2, value) } 
//set 'color'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.width default: 512 max: 16384 min: 1 step: 1
		 * @param opts.height default: 512 max: 16384 min: 1 step: 1
		 * @param opts.batch_size default: 1 max: 4096 min: 1
		 * @param opts.color step: 1}
        */
        constructor(opts:{
            'width'?: INT,'height'?: INT,'batch_size'?: INT,'color'?: INT
        }){
            super(ctx);

            super.$$link("width", opts['width']??tmp["EmptyImage"].defaults['width'])
super.$$link("height", opts['height']??tmp["EmptyImage"].defaults['height'])
super.$$link("batch_size", opts['batch_size']??tmp["EmptyImage"].defaults['batch_size'])
super.$$link("color", opts['color']??tmp["EmptyImage"].defaults['color'])
}

        static defaults = {
    'width':  512,
'height':  512,
'batch_size':  1,
'color':  0
}
        protected override $$type(){
            return "EmptyImage"
        }
},

    /**
     * ConditioningAverage from conditioning
     * @desc 
    */
    "ConditioningAverage" : class extends Node{
        //Setters
        //set 'conditioning_to'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'conditioning_from'(value : CONDITIONING)  { super.$$link(1, value) } 
//set 'conditioning_to_strength'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.conditioning_to
		 * @param opts.conditioning_from
		 * @param opts.conditioning_to_strength default: 1 step: 0.01}
        */
        constructor(opts:{
            'conditioning_to': CONDITIONING,'conditioning_from': CONDITIONING,'conditioning_to_strength'?: FLOAT
        }){
            super(ctx);

            super.$$link("conditioning_to", opts['conditioning_to'])
super.$$link("conditioning_from", opts['conditioning_from'])
super.$$link("conditioning_to_strength", opts['conditioning_to_strength']??tmp["ConditioningAverage"].defaults['conditioning_to_strength'])
}

        static defaults = {
    'conditioning_to_strength':  1
}
        protected override $$type(){
            return "ConditioningAverage"
        }
},

    /**
     * Conditioning (Combine) from conditioning
     * @desc 
    */
    "ConditioningCombine" : class extends Node{
        //Setters
        //set 'conditioning_1'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'conditioning_2'(value : CONDITIONING)  { super.$$link(1, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.conditioning_1
		 * @param opts.conditioning_2}
        */
        constructor(opts:{
            'conditioning_1': CONDITIONING,'conditioning_2': CONDITIONING
        }){
            super(ctx);

            super.$$link("conditioning_1", opts['conditioning_1'])
super.$$link("conditioning_2", opts['conditioning_2'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ConditioningCombine"
        }
},

    /**
     * Conditioning (Concat) from conditioning
     * @desc 
    */
    "ConditioningConcat" : class extends Node{
        //Setters
        //set 'conditioning_to'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'conditioning_from'(value : CONDITIONING)  { super.$$link(1, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.conditioning_to
		 * @param opts.conditioning_from}
        */
        constructor(opts:{
            'conditioning_to': CONDITIONING,'conditioning_from': CONDITIONING
        }){
            super(ctx);

            super.$$link("conditioning_to", opts['conditioning_to'])
super.$$link("conditioning_from", opts['conditioning_from'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ConditioningConcat"
        }
},

    /**
     * Conditioning (Set Area) from conditioning
     * @desc 
    */
    "ConditioningSetArea" : class extends Node{
        //Setters
        //set 'conditioning'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'width'(value : INT)  { super.$$link(1, value) } 
//set 'height'(value : INT)  { super.$$link(2, value) } 
//set 'x'(value : INT)  { super.$$link(3, value) } 
//set 'y'(value : INT)  { super.$$link(4, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(5, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.conditioning
		 * @param opts.width default: 64 max: 16384 min: 64 step: 8
		 * @param opts.height default: 64 max: 16384 min: 64 step: 8
		 * @param opts.x step: 8
		 * @param opts.y step: 8
		 * @param opts.strength default: 1 step: 0.01}
        */
        constructor(opts:{
            'conditioning': CONDITIONING,'width'?: INT,'height'?: INT,'x'?: INT,'y'?: INT,'strength'?: FLOAT
        }){
            super(ctx);

            super.$$link("conditioning", opts['conditioning'])
super.$$link("width", opts['width']??tmp["ConditioningSetArea"].defaults['width'])
super.$$link("height", opts['height']??tmp["ConditioningSetArea"].defaults['height'])
super.$$link("x", opts['x']??tmp["ConditioningSetArea"].defaults['x'])
super.$$link("y", opts['y']??tmp["ConditioningSetArea"].defaults['y'])
super.$$link("strength", opts['strength']??tmp["ConditioningSetArea"].defaults['strength'])
}

        static defaults = {
    'width':  64,
'height':  64,
'x':  0,
'y':  0,
'strength':  1
}
        protected override $$type(){
            return "ConditioningSetArea"
        }
},

    /**
     * Conditioning (Set Area with Percentage) from conditioning
     * @desc 
    */
    "ConditioningSetAreaPercentage" : class extends Node{
        //Setters
        //set 'conditioning'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'width'(value : FLOAT)  { super.$$link(1, value) } 
//set 'height'(value : FLOAT)  { super.$$link(2, value) } 
//set 'x'(value : FLOAT)  { super.$$link(3, value) } 
//set 'y'(value : FLOAT)  { super.$$link(4, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(5, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.conditioning
		 * @param opts.width default: 1 step: 0.01
		 * @param opts.height default: 1 step: 0.01
		 * @param opts.x step: 0.01
		 * @param opts.y step: 0.01
		 * @param opts.strength default: 1 step: 0.01}
        */
        constructor(opts:{
            'conditioning': CONDITIONING,'width'?: FLOAT,'height'?: FLOAT,'x'?: FLOAT,'y'?: FLOAT,'strength'?: FLOAT
        }){
            super(ctx);

            super.$$link("conditioning", opts['conditioning'])
super.$$link("width", opts['width']??tmp["ConditioningSetAreaPercentage"].defaults['width'])
super.$$link("height", opts['height']??tmp["ConditioningSetAreaPercentage"].defaults['height'])
super.$$link("x", opts['x']??tmp["ConditioningSetAreaPercentage"].defaults['x'])
super.$$link("y", opts['y']??tmp["ConditioningSetAreaPercentage"].defaults['y'])
super.$$link("strength", opts['strength']??tmp["ConditioningSetAreaPercentage"].defaults['strength'])
}

        static defaults = {
    'width':  1,
'height':  1,
'x':  0,
'y':  0,
'strength':  1
}
        protected override $$type(){
            return "ConditioningSetAreaPercentage"
        }
},

    /**
     * ConditioningSetAreaStrength from conditioning
     * @desc 
    */
    "ConditioningSetAreaStrength" : class extends Node{
        //Setters
        //set 'conditioning'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.conditioning
		 * @param opts.strength default: 1 step: 0.01}
        */
        constructor(opts:{
            'conditioning': CONDITIONING,'strength'?: FLOAT
        }){
            super(ctx);

            super.$$link("conditioning", opts['conditioning'])
super.$$link("strength", opts['strength']??tmp["ConditioningSetAreaStrength"].defaults['strength'])
}

        static defaults = {
    'strength':  1
}
        protected override $$type(){
            return "ConditioningSetAreaStrength"
        }
},

    /**
     * Conditioning (Set Mask) from conditioning
     * @desc 
    */
    "ConditioningSetMask" : class extends Node{
        //Setters
        //set 'conditioning'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'mask'(value : MASK)  { super.$$link(1, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(2, value) } 
//set 'set_cond_area'(value : 'default'|'mask bounds'| $dyn)  { super.$$link(3, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.conditioning
		 * @param opts.mask
		 * @param opts.strength default: 1 step: 0.01
		 * @param opts.set_cond_area}
        */
        constructor(opts:{
            'conditioning': CONDITIONING,'mask': MASK,'strength'?: FLOAT,'set_cond_area': 'default'|'mask bounds'| $dyn
        }){
            super(ctx);

            super.$$link("conditioning", opts['conditioning'])
super.$$link("mask", opts['mask'])
super.$$link("strength", opts['strength']??tmp["ConditioningSetMask"].defaults['strength'])
super.$$link("set_cond_area", opts['set_cond_area'])
}

        static defaults = {
    'strength':  1
}
        protected override $$type(){
            return "ConditioningSetMask"
        }
},

    /**
     * KSampler (Advanced) from sampling
     * @desc 
    */
    "KSamplerAdvanced" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'add_noise'(value : 'enable'|'disable'| $dyn)  { super.$$link(1, value) } 
//set 'noise_seed'(value : INT)  { super.$$link(2, value) } 
//set 'steps'(value : INT)  { super.$$link(3, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(4, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(5, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn)  { super.$$link(6, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(7, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(8, value) } 
//set 'latent_image'(value : LATENT)  { super.$$link(9, value) } 
//set 'start_at_step'(value : INT)  { super.$$link(10, value) } 
//set 'end_at_step'(value : INT)  { super.$$link(11, value) } 
//set 'return_with_leftover_noise'(value : 'disable'|'enable'| $dyn)  { super.$$link(12, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.add_noise
		 * @param opts.noise_seed
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.cfg default: 8 step: 0.1
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.latent_image
		 * @param opts.start_at_step
		 * @param opts.end_at_step default: 10000
		 * @param opts.return_with_leftover_noise}
        */
        constructor(opts:{
            'model': MODEL,'add_noise': 'enable'|'disable'| $dyn,'noise_seed'?: INT,'steps'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn,'positive': CONDITIONING,'negative': CONDITIONING,'latent_image': LATENT,'start_at_step'?: INT,'end_at_step'?: INT,'return_with_leftover_noise': 'disable'|'enable'| $dyn
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("add_noise", opts['add_noise'])
super.$$link("noise_seed", opts['noise_seed']??tmp["KSamplerAdvanced"].defaults['noise_seed'])
super.$$link("steps", opts['steps']??tmp["KSamplerAdvanced"].defaults['steps'])
super.$$link("cfg", opts['cfg']??tmp["KSamplerAdvanced"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("latent_image", opts['latent_image'])
super.$$link("start_at_step", opts['start_at_step']??tmp["KSamplerAdvanced"].defaults['start_at_step'])
super.$$link("end_at_step", opts['end_at_step']??tmp["KSamplerAdvanced"].defaults['end_at_step'])
super.$$link("return_with_leftover_noise", opts['return_with_leftover_noise'])
}

        static defaults = {
    'noise_seed':  0,
'steps':  20,
'cfg':  8,
'start_at_step':  0,
'end_at_step':  10000
}
        protected override $$type(){
            return "KSamplerAdvanced"
        }
},

    /**
     * Set Latent Noise Mask from latent/inpaint
     * @desc 
    */
    "SetLatentNoiseMask" : class extends Node{
        //Setters
        //set 'samples'(value : LATENT)  { super.$$link(0, value) } 
//set 'mask'(value : MASK)  { super.$$link(1, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.samples
		 * @param opts.mask}
        */
        constructor(opts:{
            'samples': LATENT,'mask': MASK
        }){
            super(ctx);

            super.$$link("samples", opts['samples'])
super.$$link("mask", opts['mask'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "SetLatentNoiseMask"
        }
},

    /**
     * Latent Composite from latent
     * @desc 
    */
    "LatentComposite" : class extends Node{
        //Setters
        //set 'samples_to'(value : LATENT)  { super.$$link(0, value) } 
//set 'samples_from'(value : LATENT)  { super.$$link(1, value) } 
//set 'x'(value : INT)  { super.$$link(2, value) } 
//set 'y'(value : INT)  { super.$$link(3, value) } 
//set 'feather'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.samples_to
		 * @param opts.samples_from
		 * @param opts.x step: 8
		 * @param opts.y step: 8
		 * @param opts.feather step: 8}
        */
        constructor(opts:{
            'samples_to': LATENT,'samples_from': LATENT,'x'?: INT,'y'?: INT,'feather'?: INT
        }){
            super(ctx);

            super.$$link("samples_to", opts['samples_to'])
super.$$link("samples_from", opts['samples_from'])
super.$$link("x", opts['x']??tmp["LatentComposite"].defaults['x'])
super.$$link("y", opts['y']??tmp["LatentComposite"].defaults['y'])
super.$$link("feather", opts['feather']??tmp["LatentComposite"].defaults['feather'])
}

        static defaults = {
    'x':  0,
'y':  0,
'feather':  0
}
        protected override $$type(){
            return "LatentComposite"
        }
},

    /**
     * Latent Blend from _for_testing
     * @desc 
    */
    "LatentBlend" : class extends Node{
        //Setters
        //set 'samples1'(value : LATENT)  { super.$$link(0, value) } 
//set 'samples2'(value : LATENT)  { super.$$link(1, value) } 
//set 'blend_factor'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.samples1
		 * @param opts.samples2
		 * @param opts.blend_factor default: 0.5 step: 0.01}
        */
        constructor(opts:{
            'samples1': LATENT,'samples2': LATENT,'blend_factor'?: FLOAT
        }){
            super(ctx);

            super.$$link("samples1", opts['samples1'])
super.$$link("samples2", opts['samples2'])
super.$$link("blend_factor", opts['blend_factor']??tmp["LatentBlend"].defaults['blend_factor'])
}

        static defaults = {
    'blend_factor':  0.5
}
        protected override $$type(){
            return "LatentBlend"
        }
},

    /**
     * Rotate Latent from latent/transform
     * @desc 
    */
    "LatentRotate" : class extends Node{
        //Setters
        //set 'samples'(value : LATENT)  { super.$$link(0, value) } 
//set 'rotation'(value : 'none'|'90 degrees'|'180 degrees'|'270 degrees'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.samples
		 * @param opts.rotation}
        */
        constructor(opts:{
            'samples': LATENT,'rotation': 'none'|'90 degrees'|'180 degrees'|'270 degrees'| $dyn
        }){
            super(ctx);

            super.$$link("samples", opts['samples'])
super.$$link("rotation", opts['rotation'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "LatentRotate"
        }
},

    /**
     * Flip Latent from latent/transform
     * @desc 
    */
    "LatentFlip" : class extends Node{
        //Setters
        //set 'samples'(value : LATENT)  { super.$$link(0, value) } 
//set 'flip_method'(value : 'x-axis: vertically'|'y-axis: horizontally'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.samples
		 * @param opts.flip_method}
        */
        constructor(opts:{
            'samples': LATENT,'flip_method': 'x-axis: vertically'|'y-axis: horizontally'| $dyn
        }){
            super(ctx);

            super.$$link("samples", opts['samples'])
super.$$link("flip_method", opts['flip_method'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "LatentFlip"
        }
},

    /**
     * Crop Latent from latent/transform
     * @desc 
    */
    "LatentCrop" : class extends Node{
        //Setters
        //set 'samples'(value : LATENT)  { super.$$link(0, value) } 
//set 'width'(value : INT)  { super.$$link(1, value) } 
//set 'height'(value : INT)  { super.$$link(2, value) } 
//set 'x'(value : INT)  { super.$$link(3, value) } 
//set 'y'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.samples
		 * @param opts.width default: 512 max: 16384 min: 64 step: 8
		 * @param opts.height default: 512 max: 16384 min: 64 step: 8
		 * @param opts.x step: 8
		 * @param opts.y step: 8}
        */
        constructor(opts:{
            'samples': LATENT,'width'?: INT,'height'?: INT,'x'?: INT,'y'?: INT
        }){
            super(ctx);

            super.$$link("samples", opts['samples'])
super.$$link("width", opts['width']??tmp["LatentCrop"].defaults['width'])
super.$$link("height", opts['height']??tmp["LatentCrop"].defaults['height'])
super.$$link("x", opts['x']??tmp["LatentCrop"].defaults['x'])
super.$$link("y", opts['y']??tmp["LatentCrop"].defaults['y'])
}

        static defaults = {
    'width':  512,
'height':  512,
'x':  0,
'y':  0
}
        protected override $$type(){
            return "LatentCrop"
        }
},

    /**
     * Load LoRA from loaders
     * @desc LoRAs are used to modify diffusion and CLIP models, altering the way in which latents are denoised such as applying styles. Multiple LoRA nodes can be linked together.
    */
    "LoraLoader" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'clip'(value : CLIP)  { super.$$link(1, value) } 
//set 'lora_name'(value : 'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(2, value) } 
//set 'strength_model'(value : FLOAT)  { super.$$link(3, value) } 
//set 'strength_clip'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this.$uid.toString(), 1]  as unknown as CLIP; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.clip
		 * @param opts.lora_name
		 * @param opts.strength_model default: 1 max: 100 min: -100 step: 0.01
		 * @param opts.strength_clip default: 1 max: 100 min: -100 step: 0.01}
        */
        constructor(opts:{
            'model': MODEL,'clip': CLIP,'lora_name': 'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'strength_model'?: FLOAT,'strength_clip'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("clip", opts['clip'])
super.$$link("lora_name", opts['lora_name'])
super.$$link("strength_model", opts['strength_model']??tmp["LoraLoader"].defaults['strength_model'])
super.$$link("strength_clip", opts['strength_clip']??tmp["LoraLoader"].defaults['strength_clip'])
}

        static defaults = {
    'strength_model':  1,
'strength_clip':  1
}
        protected override $$type(){
            return "LoraLoader"
        }
},

    /**
     * Load CLIP from advanced/loaders
     * @desc 
    */
    "CLIPLoader" : class extends Node{
        //Setters
        //set 'clip_name'(value : void)  { super.$$link(0, value) } 
//set 'type'(value : 'stable_diffusion'|'stable_cascade'|'sd3'|'stable_audio'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'CLIP'() : CLIP { return [this.$uid.toString(), 0]  as unknown as CLIP; }

        /**
          * Constructor
		 * @param opts.clip_name
		 * @param opts.type}
        */
        constructor(opts:{
            'clip_name': void,'type': 'stable_diffusion'|'stable_cascade'|'sd3'|'stable_audio'| $dyn
        }){
            super(ctx);

            super.$$link("clip_name", opts['clip_name'])
super.$$link("type", opts['type'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "CLIPLoader"
        }
},

    /**
     * Load Diffusion Model from advanced/loaders
     * @desc 
    */
    "UNETLoader" : class extends Node{
        //Setters
        //set 'unet_name'(value : void)  { super.$$link(0, value) } 
//set 'weight_dtype'(value : 'default'|'fp8_e4m3fn'|'fp8_e5m2'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.unet_name
		 * @param opts.weight_dtype}
        */
        constructor(opts:{
            'unet_name': void,'weight_dtype': 'default'|'fp8_e4m3fn'|'fp8_e5m2'| $dyn
        }){
            super(ctx);

            super.$$link("unet_name", opts['unet_name'])
super.$$link("weight_dtype", opts['weight_dtype'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "UNETLoader"
        }
},

    /**
     * DualCLIPLoader from advanced/loaders
     * @desc 
    */
    "DualCLIPLoader" : class extends Node{
        //Setters
        //set 'clip_name1'(value : void)  { super.$$link(0, value) } 
//set 'clip_name2'(value : void)  { super.$$link(1, value) } 
//set 'type'(value : 'sdxl'|'sd3'|'flux'| $dyn)  { super.$$link(2, value) } 

        //Getters
        get 'CLIP'() : CLIP { return [this.$uid.toString(), 0]  as unknown as CLIP; }

        /**
          * Constructor
		 * @param opts.clip_name1
		 * @param opts.clip_name2
		 * @param opts.type}
        */
        constructor(opts:{
            'clip_name1': void,'clip_name2': void,'type': 'sdxl'|'sd3'|'flux'| $dyn
        }){
            super(ctx);

            super.$$link("clip_name1", opts['clip_name1'])
super.$$link("clip_name2", opts['clip_name2'])
super.$$link("type", opts['type'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "DualCLIPLoader"
        }
},

    /**
     * CLIP Vision Encode from conditioning
     * @desc 
    */
    "CLIPVisionEncode" : class extends Node{
        //Setters
        //set 'clip_vision'(value : CLIP_VISION)  { super.$$link(0, value) } 
//set 'image'(value : IMAGE)  { super.$$link(1, value) } 

        //Getters
        get 'CLIP_VISION_OUTPUT'() : CLIP_VISION_OUTPUT { return [this.$uid.toString(), 0]  as unknown as CLIP_VISION_OUTPUT; }

        /**
          * Constructor
		 * @param opts.clip_vision
		 * @param opts.image}
        */
        constructor(opts:{
            'clip_vision': CLIP_VISION,'image': IMAGE
        }){
            super(ctx);

            super.$$link("clip_vision", opts['clip_vision'])
super.$$link("image", opts['image'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "CLIPVisionEncode"
        }
},

    /**
     * Apply Style Model from conditioning/style_model
     * @desc 
    */
    "StyleModelApply" : class extends Node{
        //Setters
        //set 'conditioning'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'style_model'(value : STYLE_MODEL)  { super.$$link(1, value) } 
//set 'clip_vision_output'(value : CLIP_VISION_OUTPUT)  { super.$$link(2, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.conditioning
		 * @param opts.style_model
		 * @param opts.clip_vision_output}
        */
        constructor(opts:{
            'conditioning': CONDITIONING,'style_model': STYLE_MODEL,'clip_vision_output': CLIP_VISION_OUTPUT
        }){
            super(ctx);

            super.$$link("conditioning", opts['conditioning'])
super.$$link("style_model", opts['style_model'])
super.$$link("clip_vision_output", opts['clip_vision_output'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "StyleModelApply"
        }
},

    /**
     * unCLIPConditioning from conditioning
     * @desc 
    */
    "unCLIPConditioning" : class extends Node{
        //Setters
        //set 'conditioning'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'clip_vision_output'(value : CLIP_VISION_OUTPUT)  { super.$$link(1, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(2, value) } 
//set 'noise_augmentation'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.conditioning
		 * @param opts.clip_vision_output
		 * @param opts.strength default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.noise_augmentation step: 0.01}
        */
        constructor(opts:{
            'conditioning': CONDITIONING,'clip_vision_output': CLIP_VISION_OUTPUT,'strength'?: FLOAT,'noise_augmentation'?: FLOAT
        }){
            super(ctx);

            super.$$link("conditioning", opts['conditioning'])
super.$$link("clip_vision_output", opts['clip_vision_output'])
super.$$link("strength", opts['strength']??tmp["unCLIPConditioning"].defaults['strength'])
super.$$link("noise_augmentation", opts['noise_augmentation']??tmp["unCLIPConditioning"].defaults['noise_augmentation'])
}

        static defaults = {
    'strength':  1,
'noise_augmentation':  0
}
        protected override $$type(){
            return "unCLIPConditioning"
        }
},

    /**
     * Apply ControlNet from conditioning/controlnet
     * @desc 
    */
    "ControlNetApply" : class extends Node{
        //Setters
        //set 'conditioning'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'control_net'(value : CONTROL_NET)  { super.$$link(1, value) } 
//set 'image'(value : IMAGE)  { super.$$link(2, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.conditioning
		 * @param opts.control_net
		 * @param opts.image
		 * @param opts.strength default: 1 step: 0.01}
        */
        constructor(opts:{
            'conditioning': CONDITIONING,'control_net': CONTROL_NET,'image': IMAGE,'strength'?: FLOAT
        }){
            super(ctx);

            super.$$link("conditioning", opts['conditioning'])
super.$$link("control_net", opts['control_net'])
super.$$link("image", opts['image'])
super.$$link("strength", opts['strength']??tmp["ControlNetApply"].defaults['strength'])
}

        static defaults = {
    'strength':  1
}
        protected override $$type(){
            return "ControlNetApply"
        }
},

    /**
     * Apply ControlNet (Advanced) from conditioning/controlnet
     * @desc 
    */
    "ControlNetApplyAdvanced" : class extends Node{
        //Setters
        //set 'positive'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(1, value) } 
//set 'control_net'(value : CONTROL_NET)  { super.$$link(2, value) } 
//set 'image'(value : IMAGE)  { super.$$link(3, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(4, value) } 
//set 'start_percent'(value : FLOAT)  { super.$$link(5, value) } 
//set 'end_percent'(value : FLOAT)  { super.$$link(6, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this.$uid.toString(), 1]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.control_net
		 * @param opts.image
		 * @param opts.strength default: 1 step: 0.01
		 * @param opts.start_percent step: 0.001
		 * @param opts.end_percent default: 1 step: 0.001}
        */
        constructor(opts:{
            'positive': CONDITIONING,'negative': CONDITIONING,'control_net': CONTROL_NET,'image': IMAGE,'strength'?: FLOAT,'start_percent'?: FLOAT,'end_percent'?: FLOAT
        }){
            super(ctx);

            super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("control_net", opts['control_net'])
super.$$link("image", opts['image'])
super.$$link("strength", opts['strength']??tmp["ControlNetApplyAdvanced"].defaults['strength'])
super.$$link("start_percent", opts['start_percent']??tmp["ControlNetApplyAdvanced"].defaults['start_percent'])
super.$$link("end_percent", opts['end_percent']??tmp["ControlNetApplyAdvanced"].defaults['end_percent'])
}

        static defaults = {
    'strength':  1,
'start_percent':  0,
'end_percent':  1
}
        protected override $$type(){
            return "ControlNetApplyAdvanced"
        }
},

    /**
     * Load ControlNet Model from loaders
     * @desc 
    */
    "ControlNetLoader" : class extends Node{
        //Setters
        //set 'control_net_name'(value : 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'CONTROL_NET'() : CONTROL_NET { return [this.$uid.toString(), 0]  as unknown as CONTROL_NET; }

        /**
          * Constructor
		 * @param opts.control_net_name}
        */
        constructor(opts:{
            'control_net_name': 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors'| $dyn
        }){
            super(ctx);

            super.$$link("control_net_name", opts['control_net_name'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ControlNetLoader"
        }
},

    /**
     * Load ControlNet Model (diff) from loaders
     * @desc 
    */
    "DiffControlNetLoader" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'control_net_name'(value : 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'CONTROL_NET'() : CONTROL_NET { return [this.$uid.toString(), 0]  as unknown as CONTROL_NET; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.control_net_name}
        */
        constructor(opts:{
            'model': MODEL,'control_net_name': 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors'| $dyn
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("control_net_name", opts['control_net_name'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "DiffControlNetLoader"
        }
},

    /**
     * Load Style Model from loaders
     * @desc 
    */
    "StyleModelLoader" : class extends Node{
        //Setters
        //set 'style_model_name'(value : void)  { super.$$link(0, value) } 

        //Getters
        get 'STYLE_MODEL'() : STYLE_MODEL { return [this.$uid.toString(), 0]  as unknown as STYLE_MODEL; }

        /**
          * Constructor
		 * @param opts.style_model_name}
        */
        constructor(opts:{
            'style_model_name': void
        }){
            super(ctx);

            super.$$link("style_model_name", opts['style_model_name'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "StyleModelLoader"
        }
},

    /**
     * Load CLIP Vision from loaders
     * @desc 
    */
    "CLIPVisionLoader" : class extends Node{
        //Setters
        //set 'clip_name'(value : 'SD1.5/pytorch_model.bin'|'SDXL/pytorch_model.bin'|'clip_vision_vit_h.safetensors'|'model_base_caption_capfilt_large.pth'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'CLIP_VISION'() : CLIP_VISION { return [this.$uid.toString(), 0]  as unknown as CLIP_VISION; }

        /**
          * Constructor
		 * @param opts.clip_name}
        */
        constructor(opts:{
            'clip_name': 'SD1.5/pytorch_model.bin'|'SDXL/pytorch_model.bin'|'clip_vision_vit_h.safetensors'|'model_base_caption_capfilt_large.pth'| $dyn
        }){
            super(ctx);

            super.$$link("clip_name", opts['clip_name'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "CLIPVisionLoader"
        }
},

    /**
     * VAE Decode (Tiled) from _for_testing
     * @desc 
    */
    "VAEDecodeTiled" : class extends Node{
        //Setters
        //set 'samples'(value : LATENT)  { super.$$link(0, value) } 
//set 'vae'(value : VAE)  { super.$$link(1, value) } 
//set 'tile_size'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.samples
		 * @param opts.vae
		 * @param opts.tile_size default: 512 max: 4096 min: 320 step: 64}
        */
        constructor(opts:{
            'samples': LATENT,'vae': VAE,'tile_size'?: INT
        }){
            super(ctx);

            super.$$link("samples", opts['samples'])
super.$$link("vae", opts['vae'])
super.$$link("tile_size", opts['tile_size']??tmp["VAEDecodeTiled"].defaults['tile_size'])
}

        static defaults = {
    'tile_size':  512
}
        protected override $$type(){
            return "VAEDecodeTiled"
        }
},

    /**
     * VAE Encode (Tiled) from _for_testing
     * @desc 
    */
    "VAEEncodeTiled" : class extends Node{
        //Setters
        //set 'pixels'(value : IMAGE)  { super.$$link(0, value) } 
//set 'vae'(value : VAE)  { super.$$link(1, value) } 
//set 'tile_size'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.pixels
		 * @param opts.vae
		 * @param opts.tile_size default: 512 max: 4096 min: 320 step: 64}
        */
        constructor(opts:{
            'pixels': IMAGE,'vae': VAE,'tile_size'?: INT
        }){
            super(ctx);

            super.$$link("pixels", opts['pixels'])
super.$$link("vae", opts['vae'])
super.$$link("tile_size", opts['tile_size']??tmp["VAEEncodeTiled"].defaults['tile_size'])
}

        static defaults = {
    'tile_size':  512
}
        protected override $$type(){
            return "VAEEncodeTiled"
        }
},

    /**
     * unCLIPCheckpointLoader from loaders
     * @desc 
    */
    "unCLIPCheckpointLoader" : class extends Node{
        //Setters
        //set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this.$uid.toString(), 1]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this.$uid.toString(), 2]  as unknown as VAE; }
get 'CLIP_VISION'() : CLIP_VISION { return [this.$uid.toString(), 3]  as unknown as CLIP_VISION; }

        /**
          * Constructor
		 * @param opts.ckpt_name}
        */
        constructor(opts:{
            'ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn
        }){
            super(ctx);

            super.$$link("ckpt_name", opts['ckpt_name'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "unCLIPCheckpointLoader"
        }
},

    /**
     * GLIGENLoader from loaders
     * @desc 
    */
    "GLIGENLoader" : class extends Node{
        //Setters
        //set 'gligen_name'(value : void)  { super.$$link(0, value) } 

        //Getters
        get 'GLIGEN'() : GLIGEN { return [this.$uid.toString(), 0]  as unknown as GLIGEN; }

        /**
          * Constructor
		 * @param opts.gligen_name}
        */
        constructor(opts:{
            'gligen_name': void
        }){
            super(ctx);

            super.$$link("gligen_name", opts['gligen_name'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "GLIGENLoader"
        }
},

    /**
     * GLIGENTextBoxApply from conditioning/gligen
     * @desc 
    */
    "GLIGENTextBoxApply" : class extends Node{
        //Setters
        //set 'conditioning_to'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'clip'(value : CLIP)  { super.$$link(1, value) } 
//set 'gligen_textbox_model'(value : GLIGEN)  { super.$$link(2, value) } 
//set 'text'(value : STRING)  { super.$$link(3, value) } 
//set 'width'(value : INT)  { super.$$link(4, value) } 
//set 'height'(value : INT)  { super.$$link(5, value) } 
//set 'x'(value : INT)  { super.$$link(6, value) } 
//set 'y'(value : INT)  { super.$$link(7, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.conditioning_to
		 * @param opts.clip
		 * @param opts.gligen_textbox_model
		 * @param opts.text
		 * @param opts.width default: 64 max: 16384 min: 8 step: 8
		 * @param opts.height default: 64 max: 16384 min: 8 step: 8
		 * @param opts.x step: 8
		 * @param opts.y step: 8}
        */
        constructor(opts:{
            'conditioning_to': CONDITIONING,'clip': CLIP,'gligen_textbox_model': GLIGEN,'text': STRING,'width'?: INT,'height'?: INT,'x'?: INT,'y'?: INT
        }){
            super(ctx);

            super.$$link("conditioning_to", opts['conditioning_to'])
super.$$link("clip", opts['clip'])
super.$$link("gligen_textbox_model", opts['gligen_textbox_model'])
super.$$link("text", opts['text'])
super.$$link("width", opts['width']??tmp["GLIGENTextBoxApply"].defaults['width'])
super.$$link("height", opts['height']??tmp["GLIGENTextBoxApply"].defaults['height'])
super.$$link("x", opts['x']??tmp["GLIGENTextBoxApply"].defaults['x'])
super.$$link("y", opts['y']??tmp["GLIGENTextBoxApply"].defaults['y'])
}

        static defaults = {
    'width':  64,
'height':  64,
'x':  0,
'y':  0
}
        protected override $$type(){
            return "GLIGENTextBoxApply"
        }
},

    /**
     * InpaintModelConditioning from conditioning/inpaint
     * @desc 
    */
    "InpaintModelConditioning" : class extends Node{
        //Setters
        //set 'positive'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(1, value) } 
//set 'vae'(value : VAE)  { super.$$link(2, value) } 
//set 'pixels'(value : IMAGE)  { super.$$link(3, value) } 
//set 'mask'(value : MASK)  { super.$$link(4, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this.$uid.toString(), 1]  as unknown as CONDITIONING; }
get 'latent'() : LATENT { return [this.$uid.toString(), 2]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.vae
		 * @param opts.pixels
		 * @param opts.mask}
        */
        constructor(opts:{
            'positive': CONDITIONING,'negative': CONDITIONING,'vae': VAE,'pixels': IMAGE,'mask': MASK
        }){
            super(ctx);

            super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("vae", opts['vae'])
super.$$link("pixels", opts['pixels'])
super.$$link("mask", opts['mask'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "InpaintModelConditioning"
        }
},

    /**
     * Load Checkpoint With Config (DEPRECATED) from advanced/loaders
     * @desc 
    */
    "CheckpointLoader" : class extends Node{
        //Setters
        //set 'config_name'(value : 'anything_v3.yaml'|'v1-inference.yaml'|'v1-inference_clip_skip_2.yaml'|'v1-inference_clip_skip_2_fp16.yaml'|'v1-inference_fp16.yaml'|'v1-inpainting-inference.yaml'|'v2-inference-v.yaml'|'v2-inference-v_fp32.yaml'|'v2-inference.yaml'|'v2-inference_fp32.yaml'|'v2-inpainting-inference.yaml'| $dyn)  { super.$$link(0, value) } 
//set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this.$uid.toString(), 1]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this.$uid.toString(), 2]  as unknown as VAE; }

        /**
          * Constructor
		 * @param opts.config_name
		 * @param opts.ckpt_name}
        */
        constructor(opts:{
            'config_name': 'anything_v3.yaml'|'v1-inference.yaml'|'v1-inference_clip_skip_2.yaml'|'v1-inference_clip_skip_2_fp16.yaml'|'v1-inference_fp16.yaml'|'v1-inpainting-inference.yaml'|'v2-inference-v.yaml'|'v2-inference-v_fp32.yaml'|'v2-inference.yaml'|'v2-inference_fp32.yaml'|'v2-inpainting-inference.yaml'| $dyn,'ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn
        }){
            super(ctx);

            super.$$link("config_name", opts['config_name'])
super.$$link("ckpt_name", opts['ckpt_name'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "CheckpointLoader"
        }
},

    /**
     * DiffusersLoader from advanced/loaders/deprecated
     * @desc 
    */
    "DiffusersLoader" : class extends Node{
        //Setters
        //set 'model_path'(value : void)  { super.$$link(0, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this.$uid.toString(), 1]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this.$uid.toString(), 2]  as unknown as VAE; }

        /**
          * Constructor
		 * @param opts.model_path}
        */
        constructor(opts:{
            'model_path': void
        }){
            super(ctx);

            super.$$link("model_path", opts['model_path'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "DiffusersLoader"
        }
},

    /**
     * LoadLatent from _for_testing
     * @desc 
    */
    "LoadLatent" : class extends Node{
        //Setters
        //set 'latent'(value : void)  { super.$$link(0, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.latent}
        */
        constructor(opts:{
            'latent': void
        }){
            super(ctx);

            super.$$link("latent", opts['latent'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "LoadLatent"
        }
},

    /**
     * SaveLatent from _for_testing
     * @desc 
    */
    "SaveLatent" : class extends Node{
        //Setters
        //set 'samples'(value : LATENT)  { super.$$link(0, value) } 
//set 'filename_prefix'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.samples
		 * @param opts.filename_prefix default: "latents/ComfyUI"}
        */
        constructor(opts:{
            'samples': LATENT,'filename_prefix'?: STRING
        }){
            super(ctx);

            super.$$link("samples", opts['samples'])
super.$$link("filename_prefix", opts['filename_prefix']??tmp["SaveLatent"].defaults['filename_prefix'])
}

        static defaults = {
    'filename_prefix':  "latents/ComfyUI"
}
        protected override $$type(){
            return "SaveLatent"
        }
},

    /**
     * ConditioningZeroOut from advanced/conditioning
     * @desc 
    */
    "ConditioningZeroOut" : class extends Node{
        //Setters
        //set 'conditioning'(value : CONDITIONING)  { super.$$link(0, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.conditioning}
        */
        constructor(opts:{
            'conditioning': CONDITIONING
        }){
            super(ctx);

            super.$$link("conditioning", opts['conditioning'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ConditioningZeroOut"
        }
},

    /**
     * ConditioningSetTimestepRange from advanced/conditioning
     * @desc 
    */
    "ConditioningSetTimestepRange" : class extends Node{
        //Setters
        //set 'conditioning'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'start'(value : FLOAT)  { super.$$link(1, value) } 
//set 'end'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.conditioning
		 * @param opts.start step: 0.001
		 * @param opts.end default: 1 step: 0.001}
        */
        constructor(opts:{
            'conditioning': CONDITIONING,'start'?: FLOAT,'end'?: FLOAT
        }){
            super(ctx);

            super.$$link("conditioning", opts['conditioning'])
super.$$link("start", opts['start']??tmp["ConditioningSetTimestepRange"].defaults['start'])
super.$$link("end", opts['end']??tmp["ConditioningSetTimestepRange"].defaults['end'])
}

        static defaults = {
    'start':  0,
'end':  1
}
        protected override $$type(){
            return "ConditioningSetTimestepRange"
        }
},

    /**
     * LoraLoaderModelOnly from loaders
     * @desc LoRAs are used to modify diffusion and CLIP models, altering the way in which latents are denoised such as applying styles. Multiple LoRA nodes can be linked together.
    */
    "LoraLoaderModelOnly" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'lora_name'(value : 'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(1, value) } 
//set 'strength_model'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.lora_name
		 * @param opts.strength_model default: 1 max: 100 min: -100 step: 0.01}
        */
        constructor(opts:{
            'model': MODEL,'lora_name': 'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'strength_model'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("lora_name", opts['lora_name'])
super.$$link("strength_model", opts['strength_model']??tmp["LoraLoaderModelOnly"].defaults['strength_model'])
}

        static defaults = {
    'strength_model':  1
}
        protected override $$type(){
            return "LoraLoaderModelOnly"
        }
},

    /**
     * LatentAdd from latent/advanced
     * @desc 
    */
    "LatentAdd" : class extends Node{
        //Setters
        //set 'samples1'(value : LATENT)  { super.$$link(0, value) } 
//set 'samples2'(value : LATENT)  { super.$$link(1, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.samples1
		 * @param opts.samples2}
        */
        constructor(opts:{
            'samples1': LATENT,'samples2': LATENT
        }){
            super(ctx);

            super.$$link("samples1", opts['samples1'])
super.$$link("samples2", opts['samples2'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "LatentAdd"
        }
},

    /**
     * LatentSubtract from latent/advanced
     * @desc 
    */
    "LatentSubtract" : class extends Node{
        //Setters
        //set 'samples1'(value : LATENT)  { super.$$link(0, value) } 
//set 'samples2'(value : LATENT)  { super.$$link(1, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.samples1
		 * @param opts.samples2}
        */
        constructor(opts:{
            'samples1': LATENT,'samples2': LATENT
        }){
            super(ctx);

            super.$$link("samples1", opts['samples1'])
super.$$link("samples2", opts['samples2'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "LatentSubtract"
        }
},

    /**
     * LatentMultiply from latent/advanced
     * @desc 
    */
    "LatentMultiply" : class extends Node{
        //Setters
        //set 'samples'(value : LATENT)  { super.$$link(0, value) } 
//set 'multiplier'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.samples
		 * @param opts.multiplier default: 1 max: 10 min: -10 step: 0.01}
        */
        constructor(opts:{
            'samples': LATENT,'multiplier'?: FLOAT
        }){
            super(ctx);

            super.$$link("samples", opts['samples'])
super.$$link("multiplier", opts['multiplier']??tmp["LatentMultiply"].defaults['multiplier'])
}

        static defaults = {
    'multiplier':  1
}
        protected override $$type(){
            return "LatentMultiply"
        }
},

    /**
     * LatentInterpolate from latent/advanced
     * @desc 
    */
    "LatentInterpolate" : class extends Node{
        //Setters
        //set 'samples1'(value : LATENT)  { super.$$link(0, value) } 
//set 'samples2'(value : LATENT)  { super.$$link(1, value) } 
//set 'ratio'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.samples1
		 * @param opts.samples2
		 * @param opts.ratio default: 1 step: 0.01}
        */
        constructor(opts:{
            'samples1': LATENT,'samples2': LATENT,'ratio'?: FLOAT
        }){
            super(ctx);

            super.$$link("samples1", opts['samples1'])
super.$$link("samples2", opts['samples2'])
super.$$link("ratio", opts['ratio']??tmp["LatentInterpolate"].defaults['ratio'])
}

        static defaults = {
    'ratio':  1
}
        protected override $$type(){
            return "LatentInterpolate"
        }
},

    /**
     * LatentBatch from latent/batch
     * @desc 
    */
    "LatentBatch" : class extends Node{
        //Setters
        //set 'samples1'(value : LATENT)  { super.$$link(0, value) } 
//set 'samples2'(value : LATENT)  { super.$$link(1, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.samples1
		 * @param opts.samples2}
        */
        constructor(opts:{
            'samples1': LATENT,'samples2': LATENT
        }){
            super(ctx);

            super.$$link("samples1", opts['samples1'])
super.$$link("samples2", opts['samples2'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "LatentBatch"
        }
},

    /**
     * LatentBatchSeedBehavior from latent/advanced
     * @desc 
    */
    "LatentBatchSeedBehavior" : class extends Node{
        //Setters
        //set 'samples'(value : LATENT)  { super.$$link(0, value) } 
//set 'seed_behavior'(value : 'random'|'fixed'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.samples
		 * @param opts.seed_behavior default: "fixed"}
        */
        constructor(opts:{
            'samples': LATENT,'seed_behavior'?: 'random'|'fixed'| $dyn
        }){
            super(ctx);

            super.$$link("samples", opts['samples'])
super.$$link("seed_behavior", opts['seed_behavior']??tmp["LatentBatchSeedBehavior"].defaults['seed_behavior'])
}

        static defaults = {
    'seed_behavior':  "fixed"
}
        protected override $$type(){
            return "LatentBatchSeedBehavior"
        }
},

    /**
     * HypernetworkLoader from loaders
     * @desc 
    */
    "HypernetworkLoader" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'hypernetwork_name'(value : void)  { super.$$link(1, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.hypernetwork_name
		 * @param opts.strength default: 1 max: 10 min: -10 step: 0.01}
        */
        constructor(opts:{
            'model': MODEL,'hypernetwork_name': void,'strength'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("hypernetwork_name", opts['hypernetwork_name'])
super.$$link("strength", opts['strength']??tmp["HypernetworkLoader"].defaults['strength'])
}

        static defaults = {
    'strength':  1
}
        protected override $$type(){
            return "HypernetworkLoader"
        }
},

    /**
     * Load Upscale Model from loaders
     * @desc 
    */
    "UpscaleModelLoader" : class extends Node{
        //Setters
        //set 'model_name'(value : '4x_NMKD-Superscale-SP_178000_G.pth'|'HAT_SRx4_ImageNet-pretrain.pth'|'Real_HAT_GAN_sharper.pth'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'UPSCALE_MODEL'() : UPSCALE_MODEL { return [this.$uid.toString(), 0]  as unknown as UPSCALE_MODEL; }

        /**
          * Constructor
		 * @param opts.model_name}
        */
        constructor(opts:{
            'model_name': '4x_NMKD-Superscale-SP_178000_G.pth'|'HAT_SRx4_ImageNet-pretrain.pth'|'Real_HAT_GAN_sharper.pth'| $dyn
        }){
            super(ctx);

            super.$$link("model_name", opts['model_name'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "UpscaleModelLoader"
        }
},

    /**
     * Upscale Image (using Model) from image/upscaling
     * @desc 
    */
    "ImageUpscaleWithModel" : class extends Node{
        //Setters
        //set 'upscale_model'(value : UPSCALE_MODEL)  { super.$$link(0, value) } 
//set 'image'(value : IMAGE)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.upscale_model
		 * @param opts.image}
        */
        constructor(opts:{
            'upscale_model': UPSCALE_MODEL,'image': IMAGE
        }){
            super(ctx);

            super.$$link("upscale_model", opts['upscale_model'])
super.$$link("image", opts['image'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImageUpscaleWithModel"
        }
},

    /**
     * ImageBlend from image/postprocessing
     * @desc 
    */
    "ImageBlend" : class extends Node{
        //Setters
        //set 'image1'(value : IMAGE)  { super.$$link(0, value) } 
//set 'image2'(value : IMAGE)  { super.$$link(1, value) } 
//set 'blend_factor'(value : FLOAT)  { super.$$link(2, value) } 
//set 'blend_mode'(value : 'normal'|'multiply'|'screen'|'overlay'|'soft_light'|'difference'| $dyn)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image1
		 * @param opts.image2
		 * @param opts.blend_factor default: 0.5 step: 0.01
		 * @param opts.blend_mode}
        */
        constructor(opts:{
            'image1': IMAGE,'image2': IMAGE,'blend_factor'?: FLOAT,'blend_mode': 'normal'|'multiply'|'screen'|'overlay'|'soft_light'|'difference'| $dyn
        }){
            super(ctx);

            super.$$link("image1", opts['image1'])
super.$$link("image2", opts['image2'])
super.$$link("blend_factor", opts['blend_factor']??tmp["ImageBlend"].defaults['blend_factor'])
super.$$link("blend_mode", opts['blend_mode'])
}

        static defaults = {
    'blend_factor':  0.5
}
        protected override $$type(){
            return "ImageBlend"
        }
},

    /**
     * ImageBlur from image/postprocessing
     * @desc 
    */
    "ImageBlur" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'blur_radius'(value : INT)  { super.$$link(1, value) } 
//set 'sigma'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.blur_radius default: 1 max: 31 min: 1 step: 1
		 * @param opts.sigma default: 1 max: 10 min: 0.1 step: 0.1}
        */
        constructor(opts:{
            'image': IMAGE,'blur_radius'?: INT,'sigma'?: FLOAT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("blur_radius", opts['blur_radius']??tmp["ImageBlur"].defaults['blur_radius'])
super.$$link("sigma", opts['sigma']??tmp["ImageBlur"].defaults['sigma'])
}

        static defaults = {
    'blur_radius':  1,
'sigma':  1
}
        protected override $$type(){
            return "ImageBlur"
        }
},

    /**
     * ImageQuantize from image/postprocessing
     * @desc 
    */
    "ImageQuantize" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'colors'(value : INT)  { super.$$link(1, value) } 
//set 'dither'(value : 'none'|'floyd-steinberg'|'bayer-2'|'bayer-4'|'bayer-8'|'bayer-16'| $dyn)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.colors default: 256 max: 256 min: 1 step: 1
		 * @param opts.dither}
        */
        constructor(opts:{
            'image': IMAGE,'colors'?: INT,'dither': 'none'|'floyd-steinberg'|'bayer-2'|'bayer-4'|'bayer-8'|'bayer-16'| $dyn
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("colors", opts['colors']??tmp["ImageQuantize"].defaults['colors'])
super.$$link("dither", opts['dither'])
}

        static defaults = {
    'colors':  256
}
        protected override $$type(){
            return "ImageQuantize"
        }
},

    /**
     * ImageSharpen from image/postprocessing
     * @desc 
    */
    "ImageSharpen" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'sharpen_radius'(value : INT)  { super.$$link(1, value) } 
//set 'sigma'(value : FLOAT)  { super.$$link(2, value) } 
//set 'alpha'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.sharpen_radius default: 1 max: 31 min: 1 step: 1
		 * @param opts.sigma default: 1 max: 10 min: 0.1 step: 0.01
		 * @param opts.alpha default: 1 step: 0.01}
        */
        constructor(opts:{
            'image': IMAGE,'sharpen_radius'?: INT,'sigma'?: FLOAT,'alpha'?: FLOAT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("sharpen_radius", opts['sharpen_radius']??tmp["ImageSharpen"].defaults['sharpen_radius'])
super.$$link("sigma", opts['sigma']??tmp["ImageSharpen"].defaults['sigma'])
super.$$link("alpha", opts['alpha']??tmp["ImageSharpen"].defaults['alpha'])
}

        static defaults = {
    'sharpen_radius':  1,
'sigma':  1,
'alpha':  1
}
        protected override $$type(){
            return "ImageSharpen"
        }
},

    /**
     * ImageScaleToTotalPixels from image/upscaling
     * @desc 
    */
    "ImageScaleToTotalPixels" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'upscale_method'(value : 'nearest-exact'|'bilinear'|'area'|'bicubic'|'lanczos'| $dyn)  { super.$$link(1, value) } 
//set 'megapixels'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.upscale_method
		 * @param opts.megapixels default: 1 max: 16 min: 0.01 step: 0.01}
        */
        constructor(opts:{
            'image': IMAGE,'upscale_method': 'nearest-exact'|'bilinear'|'area'|'bicubic'|'lanczos'| $dyn,'megapixels'?: FLOAT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("upscale_method", opts['upscale_method'])
super.$$link("megapixels", opts['megapixels']??tmp["ImageScaleToTotalPixels"].defaults['megapixels'])
}

        static defaults = {
    'megapixels':  1
}
        protected override $$type(){
            return "ImageScaleToTotalPixels"
        }
},

    /**
     * LatentCompositeMasked from latent
     * @desc 
    */
    "LatentCompositeMasked" : class extends Node{
        //Setters
        //set 'destination'(value : LATENT)  { super.$$link(0, value) } 
//set 'source'(value : LATENT)  { super.$$link(1, value) } 
//set 'x'(value : INT)  { super.$$link(2, value) } 
//set 'y'(value : INT)  { super.$$link(3, value) } 
//set 'resize_source'(value : BOOLEAN)  { super.$$link(4, value) } 
//set 'mask'(value : MASK)  { super.$$link(5, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.destination
		 * @param opts.source
		 * @param opts.x step: 8
		 * @param opts.y step: 8
		 * @param opts.resize_source
		 * @param opts.mask}
        */
        constructor(opts:{
            'destination': LATENT,'source': LATENT,'x'?: INT,'y'?: INT,'resize_source'?: BOOLEAN,'mask'?: MASK
        }){
            super(ctx);

            super.$$link("destination", opts['destination'])
super.$$link("source", opts['source'])
super.$$link("x", opts['x']??tmp["LatentCompositeMasked"].defaults['x'])
super.$$link("y", opts['y']??tmp["LatentCompositeMasked"].defaults['y'])
super.$$link("resize_source", opts['resize_source']??tmp["LatentCompositeMasked"].defaults['resize_source'])
super.$$link("mask", opts['mask'])
}

        static defaults = {
    'x':  0,
'y':  0,
'resize_source':  false
}
        protected override $$type(){
            return "LatentCompositeMasked"
        }
},

    /**
     * ImageCompositeMasked from image
     * @desc 
    */
    "ImageCompositeMasked" : class extends Node{
        //Setters
        //set 'destination'(value : IMAGE)  { super.$$link(0, value) } 
//set 'source'(value : IMAGE)  { super.$$link(1, value) } 
//set 'x'(value : INT)  { super.$$link(2, value) } 
//set 'y'(value : INT)  { super.$$link(3, value) } 
//set 'resize_source'(value : BOOLEAN)  { super.$$link(4, value) } 
//set 'mask'(value : MASK)  { super.$$link(5, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.destination
		 * @param opts.source
		 * @param opts.x step: 1
		 * @param opts.y step: 1
		 * @param opts.resize_source
		 * @param opts.mask}
        */
        constructor(opts:{
            'destination': IMAGE,'source': IMAGE,'x'?: INT,'y'?: INT,'resize_source'?: BOOLEAN,'mask'?: MASK
        }){
            super(ctx);

            super.$$link("destination", opts['destination'])
super.$$link("source", opts['source'])
super.$$link("x", opts['x']??tmp["ImageCompositeMasked"].defaults['x'])
super.$$link("y", opts['y']??tmp["ImageCompositeMasked"].defaults['y'])
super.$$link("resize_source", opts['resize_source']??tmp["ImageCompositeMasked"].defaults['resize_source'])
super.$$link("mask", opts['mask'])
}

        static defaults = {
    'x':  0,
'y':  0,
'resize_source':  false
}
        protected override $$type(){
            return "ImageCompositeMasked"
        }
},

    /**
     * Convert Mask to Image from mask
     * @desc 
    */
    "MaskToImage" : class extends Node{
        //Setters
        //set 'mask'(value : MASK)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.mask}
        */
        constructor(opts:{
            'mask': MASK
        }){
            super(ctx);

            super.$$link("mask", opts['mask'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "MaskToImage"
        }
},

    /**
     * Convert Image to Mask from mask
     * @desc 
    */
    "ImageToMask" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'channel'(value : 'red'|'green'|'blue'|'alpha'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.channel}
        */
        constructor(opts:{
            'image': IMAGE,'channel': 'red'|'green'|'blue'|'alpha'| $dyn
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("channel", opts['channel'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImageToMask"
        }
},

    /**
     * ImageColorToMask from mask
     * @desc 
    */
    "ImageColorToMask" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'color'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.color step: 1}
        */
        constructor(opts:{
            'image': IMAGE,'color'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("color", opts['color']??tmp["ImageColorToMask"].defaults['color'])
}

        static defaults = {
    'color':  0
}
        protected override $$type(){
            return "ImageColorToMask"
        }
},

    /**
     * SolidMask from mask
     * @desc 
    */
    "SolidMask" : class extends Node{
        //Setters
        //set 'value'(value : FLOAT)  { super.$$link(0, value) } 
//set 'width'(value : INT)  { super.$$link(1, value) } 
//set 'height'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.value default: 1 step: 0.01
		 * @param opts.width default: 512 max: 16384 min: 1 step: 1
		 * @param opts.height default: 512 max: 16384 min: 1 step: 1}
        */
        constructor(opts:{
            'value'?: FLOAT,'width'?: INT,'height'?: INT
        }){
            super(ctx);

            super.$$link("value", opts['value']??tmp["SolidMask"].defaults['value'])
super.$$link("width", opts['width']??tmp["SolidMask"].defaults['width'])
super.$$link("height", opts['height']??tmp["SolidMask"].defaults['height'])
}

        static defaults = {
    'value':  1,
'width':  512,
'height':  512
}
        protected override $$type(){
            return "SolidMask"
        }
},

    /**
     * InvertMask from mask
     * @desc 
    */
    "InvertMask" : class extends Node{
        //Setters
        //set 'mask'(value : MASK)  { super.$$link(0, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.mask}
        */
        constructor(opts:{
            'mask': MASK
        }){
            super(ctx);

            super.$$link("mask", opts['mask'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "InvertMask"
        }
},

    /**
     * CropMask from mask
     * @desc 
    */
    "CropMask" : class extends Node{
        //Setters
        //set 'mask'(value : MASK)  { super.$$link(0, value) } 
//set 'x'(value : INT)  { super.$$link(1, value) } 
//set 'y'(value : INT)  { super.$$link(2, value) } 
//set 'width'(value : INT)  { super.$$link(3, value) } 
//set 'height'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.mask
		 * @param opts.x step: 1
		 * @param opts.y step: 1
		 * @param opts.width default: 512 max: 16384 min: 1 step: 1
		 * @param opts.height default: 512 max: 16384 min: 1 step: 1}
        */
        constructor(opts:{
            'mask': MASK,'x'?: INT,'y'?: INT,'width'?: INT,'height'?: INT
        }){
            super(ctx);

            super.$$link("mask", opts['mask'])
super.$$link("x", opts['x']??tmp["CropMask"].defaults['x'])
super.$$link("y", opts['y']??tmp["CropMask"].defaults['y'])
super.$$link("width", opts['width']??tmp["CropMask"].defaults['width'])
super.$$link("height", opts['height']??tmp["CropMask"].defaults['height'])
}

        static defaults = {
    'x':  0,
'y':  0,
'width':  512,
'height':  512
}
        protected override $$type(){
            return "CropMask"
        }
},

    /**
     * MaskComposite from mask
     * @desc 
    */
    "MaskComposite" : class extends Node{
        //Setters
        //set 'destination'(value : MASK)  { super.$$link(0, value) } 
//set 'source'(value : MASK)  { super.$$link(1, value) } 
//set 'x'(value : INT)  { super.$$link(2, value) } 
//set 'y'(value : INT)  { super.$$link(3, value) } 
//set 'operation'(value : 'multiply'|'add'|'subtract'|'and'|'or'|'xor'| $dyn)  { super.$$link(4, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.destination
		 * @param opts.source
		 * @param opts.x step: 1
		 * @param opts.y step: 1
		 * @param opts.operation}
        */
        constructor(opts:{
            'destination': MASK,'source': MASK,'x'?: INT,'y'?: INT,'operation': 'multiply'|'add'|'subtract'|'and'|'or'|'xor'| $dyn
        }){
            super(ctx);

            super.$$link("destination", opts['destination'])
super.$$link("source", opts['source'])
super.$$link("x", opts['x']??tmp["MaskComposite"].defaults['x'])
super.$$link("y", opts['y']??tmp["MaskComposite"].defaults['y'])
super.$$link("operation", opts['operation'])
}

        static defaults = {
    'x':  0,
'y':  0
}
        protected override $$type(){
            return "MaskComposite"
        }
},

    /**
     * FeatherMask from mask
     * @desc 
    */
    "FeatherMask" : class extends Node{
        //Setters
        //set 'mask'(value : MASK)  { super.$$link(0, value) } 
//set 'left'(value : INT)  { super.$$link(1, value) } 
//set 'top'(value : INT)  { super.$$link(2, value) } 
//set 'right'(value : INT)  { super.$$link(3, value) } 
//set 'bottom'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.mask
		 * @param opts.left step: 1
		 * @param opts.top step: 1
		 * @param opts.right step: 1
		 * @param opts.bottom step: 1}
        */
        constructor(opts:{
            'mask': MASK,'left'?: INT,'top'?: INT,'right'?: INT,'bottom'?: INT
        }){
            super(ctx);

            super.$$link("mask", opts['mask'])
super.$$link("left", opts['left']??tmp["FeatherMask"].defaults['left'])
super.$$link("top", opts['top']??tmp["FeatherMask"].defaults['top'])
super.$$link("right", opts['right']??tmp["FeatherMask"].defaults['right'])
super.$$link("bottom", opts['bottom']??tmp["FeatherMask"].defaults['bottom'])
}

        static defaults = {
    'left':  0,
'top':  0,
'right':  0,
'bottom':  0
}
        protected override $$type(){
            return "FeatherMask"
        }
},

    /**
     * GrowMask from mask
     * @desc 
    */
    "GrowMask" : class extends Node{
        //Setters
        //set 'mask'(value : MASK)  { super.$$link(0, value) } 
//set 'expand'(value : INT)  { super.$$link(1, value) } 
//set 'tapered_corners'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.mask
		 * @param opts.expand max: 16384 min: -16384 step: 1
		 * @param opts.tapered_corners default: true}
        */
        constructor(opts:{
            'mask': MASK,'expand'?: INT,'tapered_corners'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("mask", opts['mask'])
super.$$link("expand", opts['expand']??tmp["GrowMask"].defaults['expand'])
super.$$link("tapered_corners", opts['tapered_corners']??tmp["GrowMask"].defaults['tapered_corners'])
}

        static defaults = {
    'expand':  0,
'tapered_corners':  true
}
        protected override $$type(){
            return "GrowMask"
        }
},

    /**
     * ThresholdMask from mask
     * @desc 
    */
    "ThresholdMask" : class extends Node{
        //Setters
        //set 'mask'(value : MASK)  { super.$$link(0, value) } 
//set 'value'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.mask
		 * @param opts.value default: 0.5 step: 0.01}
        */
        constructor(opts:{
            'mask': MASK,'value'?: FLOAT
        }){
            super(ctx);

            super.$$link("mask", opts['mask'])
super.$$link("value", opts['value']??tmp["ThresholdMask"].defaults['value'])
}

        static defaults = {
    'value':  0.5
}
        protected override $$type(){
            return "ThresholdMask"
        }
},

    /**
     * Porter-Duff Image Composite from mask/compositing
     * @desc 
    */
    "PorterDuffImageComposite" : class extends Node{
        //Setters
        //set 'source'(value : IMAGE)  { super.$$link(0, value) } 
//set 'source_alpha'(value : MASK)  { super.$$link(1, value) } 
//set 'destination'(value : IMAGE)  { super.$$link(2, value) } 
//set 'destination_alpha'(value : MASK)  { super.$$link(3, value) } 
//set 'mode'(value : 'ADD'|'CLEAR'|'DARKEN'|'DST'|'DST_ATOP'|'DST_IN'|'DST_OUT'|'DST_OVER'|'LIGHTEN'|'MULTIPLY'|'OVERLAY'|'SCREEN'|'SRC'|'SRC_ATOP'|'SRC_IN'|'SRC_OUT'|'SRC_OVER'|'XOR'| $dyn)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'MASK'() : MASK { return [this.$uid.toString(), 1]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.source
		 * @param opts.source_alpha
		 * @param opts.destination
		 * @param opts.destination_alpha
		 * @param opts.mode default: "DST"}
        */
        constructor(opts:{
            'source': IMAGE,'source_alpha': MASK,'destination': IMAGE,'destination_alpha': MASK,'mode'?: 'ADD'|'CLEAR'|'DARKEN'|'DST'|'DST_ATOP'|'DST_IN'|'DST_OUT'|'DST_OVER'|'LIGHTEN'|'MULTIPLY'|'OVERLAY'|'SCREEN'|'SRC'|'SRC_ATOP'|'SRC_IN'|'SRC_OUT'|'SRC_OVER'|'XOR'| $dyn
        }){
            super(ctx);

            super.$$link("source", opts['source'])
super.$$link("source_alpha", opts['source_alpha'])
super.$$link("destination", opts['destination'])
super.$$link("destination_alpha", opts['destination_alpha'])
super.$$link("mode", opts['mode']??tmp["PorterDuffImageComposite"].defaults['mode'])
}

        static defaults = {
    'mode':  "DST"
}
        protected override $$type(){
            return "PorterDuffImageComposite"
        }
},

    /**
     * Split Image with Alpha from mask/compositing
     * @desc 
    */
    "SplitImageWithAlpha" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'MASK'() : MASK { return [this.$uid.toString(), 1]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.image}
        */
        constructor(opts:{
            'image': IMAGE
        }){
            super(ctx);

            super.$$link("image", opts['image'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "SplitImageWithAlpha"
        }
},

    /**
     * Join Image with Alpha from mask/compositing
     * @desc 
    */
    "JoinImageWithAlpha" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'alpha'(value : MASK)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.alpha}
        */
        constructor(opts:{
            'image': IMAGE,'alpha': MASK
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("alpha", opts['alpha'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "JoinImageWithAlpha"
        }
},

    /**
     * Rebatch Latents from latent/batch
     * @desc 
    */
    "RebatchLatents" : class extends Node{
        //Setters
        //set 'latents'(value : LATENT)  { super.$$link(0, value) } 
//set 'batch_size'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.latents
		 * @param opts.batch_size default: 1 max: 4096 min: 1}
        */
        constructor(opts:{
            'latents': LATENT,'batch_size'?: INT
        }){
            super(ctx);

            super.$$link("latents", opts['latents'])
super.$$link("batch_size", opts['batch_size']??tmp["RebatchLatents"].defaults['batch_size'])
}

        static defaults = {
    'batch_size':  1
}
        protected override $$type(){
            return "RebatchLatents"
        }
},

    /**
     * Rebatch Images from image/batch
     * @desc 
    */
    "RebatchImages" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'batch_size'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.batch_size default: 1 max: 4096 min: 1}
        */
        constructor(opts:{
            'images': IMAGE,'batch_size'?: INT
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("batch_size", opts['batch_size']??tmp["RebatchImages"].defaults['batch_size'])
}

        static defaults = {
    'batch_size':  1
}
        protected override $$type(){
            return "RebatchImages"
        }
},

    /**
     * ModelMergeSimple from advanced/model_merging
     * @desc 
    */
    "ModelMergeSimple" : class extends Node{
        //Setters
        //set 'model1'(value : MODEL)  { super.$$link(0, value) } 
//set 'model2'(value : MODEL)  { super.$$link(1, value) } 
//set 'ratio'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model1
		 * @param opts.model2
		 * @param opts.ratio default: 1 step: 0.01}
        */
        constructor(opts:{
            'model1': MODEL,'model2': MODEL,'ratio'?: FLOAT
        }){
            super(ctx);

            super.$$link("model1", opts['model1'])
super.$$link("model2", opts['model2'])
super.$$link("ratio", opts['ratio']??tmp["ModelMergeSimple"].defaults['ratio'])
}

        static defaults = {
    'ratio':  1
}
        protected override $$type(){
            return "ModelMergeSimple"
        }
},

    /**
     * ModelMergeBlocks from advanced/model_merging
     * @desc 
    */
    "ModelMergeBlocks" : class extends Node{
        //Setters
        //set 'model1'(value : MODEL)  { super.$$link(0, value) } 
//set 'model2'(value : MODEL)  { super.$$link(1, value) } 
//set 'input'(value : FLOAT)  { super.$$link(2, value) } 
//set 'middle'(value : FLOAT)  { super.$$link(3, value) } 
//set 'out'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model1
		 * @param opts.model2
		 * @param opts.input default: 1 step: 0.01
		 * @param opts.middle default: 1 step: 0.01
		 * @param opts.out default: 1 step: 0.01}
        */
        constructor(opts:{
            'model1': MODEL,'model2': MODEL,'input'?: FLOAT,'middle'?: FLOAT,'out'?: FLOAT
        }){
            super(ctx);

            super.$$link("model1", opts['model1'])
super.$$link("model2", opts['model2'])
super.$$link("input", opts['input']??tmp["ModelMergeBlocks"].defaults['input'])
super.$$link("middle", opts['middle']??tmp["ModelMergeBlocks"].defaults['middle'])
super.$$link("out", opts['out']??tmp["ModelMergeBlocks"].defaults['out'])
}

        static defaults = {
    'input':  1,
'middle':  1,
'out':  1
}
        protected override $$type(){
            return "ModelMergeBlocks"
        }
},

    /**
     * ModelMergeSubtract from advanced/model_merging
     * @desc 
    */
    "ModelMergeSubtract" : class extends Node{
        //Setters
        //set 'model1'(value : MODEL)  { super.$$link(0, value) } 
//set 'model2'(value : MODEL)  { super.$$link(1, value) } 
//set 'multiplier'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model1
		 * @param opts.model2
		 * @param opts.multiplier default: 1 max: 10 min: -10 step: 0.01}
        */
        constructor(opts:{
            'model1': MODEL,'model2': MODEL,'multiplier'?: FLOAT
        }){
            super(ctx);

            super.$$link("model1", opts['model1'])
super.$$link("model2", opts['model2'])
super.$$link("multiplier", opts['multiplier']??tmp["ModelMergeSubtract"].defaults['multiplier'])
}

        static defaults = {
    'multiplier':  1
}
        protected override $$type(){
            return "ModelMergeSubtract"
        }
},

    /**
     * ModelMergeAdd from advanced/model_merging
     * @desc 
    */
    "ModelMergeAdd" : class extends Node{
        //Setters
        //set 'model1'(value : MODEL)  { super.$$link(0, value) } 
//set 'model2'(value : MODEL)  { super.$$link(1, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model1
		 * @param opts.model2}
        */
        constructor(opts:{
            'model1': MODEL,'model2': MODEL
        }){
            super(ctx);

            super.$$link("model1", opts['model1'])
super.$$link("model2", opts['model2'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ModelMergeAdd"
        }
},

    /**
     * CheckpointSave from advanced/model_merging
     * @desc 
    */
    "CheckpointSave" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'clip'(value : CLIP)  { super.$$link(1, value) } 
//set 'vae'(value : VAE)  { super.$$link(2, value) } 
//set 'filename_prefix'(value : STRING)  { super.$$link(3, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.clip
		 * @param opts.vae
		 * @param opts.filename_prefix default: "checkpoints/ComfyUI"}
        */
        constructor(opts:{
            'model': MODEL,'clip': CLIP,'vae': VAE,'filename_prefix'?: STRING
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("clip", opts['clip'])
super.$$link("vae", opts['vae'])
super.$$link("filename_prefix", opts['filename_prefix']??tmp["CheckpointSave"].defaults['filename_prefix'])
}

        static defaults = {
    'filename_prefix':  "checkpoints/ComfyUI"
}
        protected override $$type(){
            return "CheckpointSave"
        }
},

    /**
     * CLIPMergeSimple from advanced/model_merging
     * @desc 
    */
    "CLIPMergeSimple" : class extends Node{
        //Setters
        //set 'clip1'(value : CLIP)  { super.$$link(0, value) } 
//set 'clip2'(value : CLIP)  { super.$$link(1, value) } 
//set 'ratio'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'CLIP'() : CLIP { return [this.$uid.toString(), 0]  as unknown as CLIP; }

        /**
          * Constructor
		 * @param opts.clip1
		 * @param opts.clip2
		 * @param opts.ratio default: 1 step: 0.01}
        */
        constructor(opts:{
            'clip1': CLIP,'clip2': CLIP,'ratio'?: FLOAT
        }){
            super(ctx);

            super.$$link("clip1", opts['clip1'])
super.$$link("clip2", opts['clip2'])
super.$$link("ratio", opts['ratio']??tmp["CLIPMergeSimple"].defaults['ratio'])
}

        static defaults = {
    'ratio':  1
}
        protected override $$type(){
            return "CLIPMergeSimple"
        }
},

    /**
     * CLIPMergeSubtract from advanced/model_merging
     * @desc 
    */
    "CLIPMergeSubtract" : class extends Node{
        //Setters
        //set 'clip1'(value : CLIP)  { super.$$link(0, value) } 
//set 'clip2'(value : CLIP)  { super.$$link(1, value) } 
//set 'multiplier'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'CLIP'() : CLIP { return [this.$uid.toString(), 0]  as unknown as CLIP; }

        /**
          * Constructor
		 * @param opts.clip1
		 * @param opts.clip2
		 * @param opts.multiplier default: 1 max: 10 min: -10 step: 0.01}
        */
        constructor(opts:{
            'clip1': CLIP,'clip2': CLIP,'multiplier'?: FLOAT
        }){
            super(ctx);

            super.$$link("clip1", opts['clip1'])
super.$$link("clip2", opts['clip2'])
super.$$link("multiplier", opts['multiplier']??tmp["CLIPMergeSubtract"].defaults['multiplier'])
}

        static defaults = {
    'multiplier':  1
}
        protected override $$type(){
            return "CLIPMergeSubtract"
        }
},

    /**
     * CLIPMergeAdd from advanced/model_merging
     * @desc 
    */
    "CLIPMergeAdd" : class extends Node{
        //Setters
        //set 'clip1'(value : CLIP)  { super.$$link(0, value) } 
//set 'clip2'(value : CLIP)  { super.$$link(1, value) } 

        //Getters
        get 'CLIP'() : CLIP { return [this.$uid.toString(), 0]  as unknown as CLIP; }

        /**
          * Constructor
		 * @param opts.clip1
		 * @param opts.clip2}
        */
        constructor(opts:{
            'clip1': CLIP,'clip2': CLIP
        }){
            super(ctx);

            super.$$link("clip1", opts['clip1'])
super.$$link("clip2", opts['clip2'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "CLIPMergeAdd"
        }
},

    /**
     * CLIPSave from advanced/model_merging
     * @desc 
    */
    "CLIPSave" : class extends Node{
        //Setters
        //set 'clip'(value : CLIP)  { super.$$link(0, value) } 
//set 'filename_prefix'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.clip
		 * @param opts.filename_prefix default: "clip/ComfyUI"}
        */
        constructor(opts:{
            'clip': CLIP,'filename_prefix'?: STRING
        }){
            super(ctx);

            super.$$link("clip", opts['clip'])
super.$$link("filename_prefix", opts['filename_prefix']??tmp["CLIPSave"].defaults['filename_prefix'])
}

        static defaults = {
    'filename_prefix':  "clip/ComfyUI"
}
        protected override $$type(){
            return "CLIPSave"
        }
},

    /**
     * VAESave from advanced/model_merging
     * @desc 
    */
    "VAESave" : class extends Node{
        //Setters
        //set 'vae'(value : VAE)  { super.$$link(0, value) } 
//set 'filename_prefix'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.vae
		 * @param opts.filename_prefix default: "vae/ComfyUI_vae"}
        */
        constructor(opts:{
            'vae': VAE,'filename_prefix'?: STRING
        }){
            super(ctx);

            super.$$link("vae", opts['vae'])
super.$$link("filename_prefix", opts['filename_prefix']??tmp["VAESave"].defaults['filename_prefix'])
}

        static defaults = {
    'filename_prefix':  "vae/ComfyUI_vae"
}
        protected override $$type(){
            return "VAESave"
        }
},

    /**
     * TomePatchModel from _for_testing
     * @desc 
    */
    "TomePatchModel" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'ratio'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.ratio default: 0.3 step: 0.01}
        */
        constructor(opts:{
            'model': MODEL,'ratio'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("ratio", opts['ratio']??tmp["TomePatchModel"].defaults['ratio'])
}

        static defaults = {
    'ratio':  0.3
}
        protected override $$type(){
            return "TomePatchModel"
        }
},

    /**
     * CLIPTextEncodeSDXLRefiner from advanced/conditioning
     * @desc 
    */
    "CLIPTextEncodeSDXLRefiner" : class extends Node{
        //Setters
        //set 'ascore'(value : FLOAT)  { super.$$link(0, value) } 
//set 'width'(value : INT)  { super.$$link(1, value) } 
//set 'height'(value : INT)  { super.$$link(2, value) } 
//set 'text'(value : STRING)  { super.$$link(3, value) } 
//set 'clip'(value : CLIP)  { super.$$link(4, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.ascore default: 6 step: 0.01
		 * @param opts.width default: 1024
		 * @param opts.height default: 1024
		 * @param opts.text
		 * @param opts.clip}
        */
        constructor(opts:{
            'ascore'?: FLOAT,'width'?: INT,'height'?: INT,'text': STRING,'clip': CLIP
        }){
            super(ctx);

            super.$$link("ascore", opts['ascore']??tmp["CLIPTextEncodeSDXLRefiner"].defaults['ascore'])
super.$$link("width", opts['width']??tmp["CLIPTextEncodeSDXLRefiner"].defaults['width'])
super.$$link("height", opts['height']??tmp["CLIPTextEncodeSDXLRefiner"].defaults['height'])
super.$$link("text", opts['text'])
super.$$link("clip", opts['clip'])
}

        static defaults = {
    'ascore':  6,
'width':  1024,
'height':  1024
}
        protected override $$type(){
            return "CLIPTextEncodeSDXLRefiner"
        }
},

    /**
     * CLIPTextEncodeSDXL from advanced/conditioning
     * @desc 
    */
    "CLIPTextEncodeSDXL" : class extends Node{
        //Setters
        //set 'width'(value : INT)  { super.$$link(0, value) } 
//set 'height'(value : INT)  { super.$$link(1, value) } 
//set 'crop_w'(value : INT)  { super.$$link(2, value) } 
//set 'crop_h'(value : INT)  { super.$$link(3, value) } 
//set 'target_width'(value : INT)  { super.$$link(4, value) } 
//set 'target_height'(value : INT)  { super.$$link(5, value) } 
//set 'text_g'(value : STRING)  { super.$$link(6, value) } 
//set 'clip'(value : CLIP)  { super.$$link(7, value) } 
//set 'text_l'(value : STRING)  { super.$$link(8, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.width default: 1024
		 * @param opts.height default: 1024
		 * @param opts.crop_w
		 * @param opts.crop_h
		 * @param opts.target_width default: 1024
		 * @param opts.target_height default: 1024
		 * @param opts.text_g
		 * @param opts.clip
		 * @param opts.text_l}
        */
        constructor(opts:{
            'width'?: INT,'height'?: INT,'crop_w'?: INT,'crop_h'?: INT,'target_width'?: INT,'target_height'?: INT,'text_g': STRING,'clip': CLIP,'text_l': STRING
        }){
            super(ctx);

            super.$$link("width", opts['width']??tmp["CLIPTextEncodeSDXL"].defaults['width'])
super.$$link("height", opts['height']??tmp["CLIPTextEncodeSDXL"].defaults['height'])
super.$$link("crop_w", opts['crop_w']??tmp["CLIPTextEncodeSDXL"].defaults['crop_w'])
super.$$link("crop_h", opts['crop_h']??tmp["CLIPTextEncodeSDXL"].defaults['crop_h'])
super.$$link("target_width", opts['target_width']??tmp["CLIPTextEncodeSDXL"].defaults['target_width'])
super.$$link("target_height", opts['target_height']??tmp["CLIPTextEncodeSDXL"].defaults['target_height'])
super.$$link("text_g", opts['text_g'])
super.$$link("clip", opts['clip'])
super.$$link("text_l", opts['text_l'])
}

        static defaults = {
    'width':  1024,
'height':  1024,
'crop_w':  0,
'crop_h':  0,
'target_width':  1024,
'target_height':  1024
}
        protected override $$type(){
            return "CLIPTextEncodeSDXL"
        }
},

    /**
     * Canny from image/preprocessors
     * @desc 
    */
    "Canny" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'low_threshold'(value : FLOAT)  { super.$$link(1, value) } 
//set 'high_threshold'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.low_threshold default: 0.4 max: 0.99 min: 0.01 step: 0.01
		 * @param opts.high_threshold default: 0.8 max: 0.99 min: 0.01 step: 0.01}
        */
        constructor(opts:{
            'image': IMAGE,'low_threshold'?: FLOAT,'high_threshold'?: FLOAT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("low_threshold", opts['low_threshold']??tmp["Canny"].defaults['low_threshold'])
super.$$link("high_threshold", opts['high_threshold']??tmp["Canny"].defaults['high_threshold'])
}

        static defaults = {
    'low_threshold':  0.4,
'high_threshold':  0.8
}
        protected override $$type(){
            return "Canny"
        }
},

    /**
     * FreeU from model_patches/unet
     * @desc 
    */
    "FreeU" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'b1'(value : FLOAT)  { super.$$link(1, value) } 
//set 'b2'(value : FLOAT)  { super.$$link(2, value) } 
//set 's1'(value : FLOAT)  { super.$$link(3, value) } 
//set 's2'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.b1 default: 1.1 step: 0.01
		 * @param opts.b2 default: 1.2 step: 0.01
		 * @param opts.s1 default: 0.9 step: 0.01
		 * @param opts.s2 default: 0.2 step: 0.01}
        */
        constructor(opts:{
            'model': MODEL,'b1'?: FLOAT,'b2'?: FLOAT,'s1'?: FLOAT,'s2'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("b1", opts['b1']??tmp["FreeU"].defaults['b1'])
super.$$link("b2", opts['b2']??tmp["FreeU"].defaults['b2'])
super.$$link("s1", opts['s1']??tmp["FreeU"].defaults['s1'])
super.$$link("s2", opts['s2']??tmp["FreeU"].defaults['s2'])
}

        static defaults = {
    'b1':  1.1,
'b2':  1.2,
's1':  0.9,
's2':  0.2
}
        protected override $$type(){
            return "FreeU"
        }
},

    /**
     * FreeU_V2 from model_patches/unet
     * @desc 
    */
    "FreeU_V2" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'b1'(value : FLOAT)  { super.$$link(1, value) } 
//set 'b2'(value : FLOAT)  { super.$$link(2, value) } 
//set 's1'(value : FLOAT)  { super.$$link(3, value) } 
//set 's2'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.b1 default: 1.3 step: 0.01
		 * @param opts.b2 default: 1.4 step: 0.01
		 * @param opts.s1 default: 0.9 step: 0.01
		 * @param opts.s2 default: 0.2 step: 0.01}
        */
        constructor(opts:{
            'model': MODEL,'b1'?: FLOAT,'b2'?: FLOAT,'s1'?: FLOAT,'s2'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("b1", opts['b1']??tmp["FreeU_V2"].defaults['b1'])
super.$$link("b2", opts['b2']??tmp["FreeU_V2"].defaults['b2'])
super.$$link("s1", opts['s1']??tmp["FreeU_V2"].defaults['s1'])
super.$$link("s2", opts['s2']??tmp["FreeU_V2"].defaults['s2'])
}

        static defaults = {
    'b1':  1.3,
'b2':  1.4,
's1':  0.9,
's2':  0.2
}
        protected override $$type(){
            return "FreeU_V2"
        }
},

    /**
     * SamplerCustom from sampling/custom_sampling
     * @desc 
    */
    "SamplerCustom" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'add_noise'(value : BOOLEAN)  { super.$$link(1, value) } 
//set 'noise_seed'(value : INT)  { super.$$link(2, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(3, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(4, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(5, value) } 
//set 'sampler'(value : SAMPLER)  { super.$$link(6, value) } 
//set 'sigmas'(value : SIGMAS)  { super.$$link(7, value) } 
//set 'latent_image'(value : LATENT)  { super.$$link(8, value) } 

        //Getters
        get 'output'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }
get 'denoised_output'() : LATENT { return [this.$uid.toString(), 1]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.add_noise default: true
		 * @param opts.noise_seed
		 * @param opts.cfg default: 8 step: 0.1
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.sampler
		 * @param opts.sigmas
		 * @param opts.latent_image}
        */
        constructor(opts:{
            'model': MODEL,'add_noise'?: BOOLEAN,'noise_seed'?: INT,'cfg'?: FLOAT,'positive': CONDITIONING,'negative': CONDITIONING,'sampler': SAMPLER,'sigmas': SIGMAS,'latent_image': LATENT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("add_noise", opts['add_noise']??tmp["SamplerCustom"].defaults['add_noise'])
super.$$link("noise_seed", opts['noise_seed']??tmp["SamplerCustom"].defaults['noise_seed'])
super.$$link("cfg", opts['cfg']??tmp["SamplerCustom"].defaults['cfg'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("sampler", opts['sampler'])
super.$$link("sigmas", opts['sigmas'])
super.$$link("latent_image", opts['latent_image'])
}

        static defaults = {
    'add_noise':  true,
'noise_seed':  0,
'cfg':  8
}
        protected override $$type(){
            return "SamplerCustom"
        }
},

    /**
     * BasicScheduler from sampling/custom_sampling/schedulers
     * @desc 
    */
    "BasicScheduler" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn)  { super.$$link(1, value) } 
//set 'steps'(value : INT)  { super.$$link(2, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'SIGMAS'() : SIGMAS { return [this.$uid.toString(), 0]  as unknown as SIGMAS; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.scheduler
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.denoise default: 1 step: 0.01}
        */
        constructor(opts:{
            'model': MODEL,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn,'steps'?: INT,'denoise'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("steps", opts['steps']??tmp["BasicScheduler"].defaults['steps'])
super.$$link("denoise", opts['denoise']??tmp["BasicScheduler"].defaults['denoise'])
}

        static defaults = {
    'steps':  20,
'denoise':  1
}
        protected override $$type(){
            return "BasicScheduler"
        }
},

    /**
     * KarrasScheduler from sampling/custom_sampling/schedulers
     * @desc 
    */
    "KarrasScheduler" : class extends Node{
        //Setters
        //set 'steps'(value : INT)  { super.$$link(0, value) } 
//set 'sigma_max'(value : FLOAT)  { super.$$link(1, value) } 
//set 'sigma_min'(value : FLOAT)  { super.$$link(2, value) } 
//set 'rho'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'SIGMAS'() : SIGMAS { return [this.$uid.toString(), 0]  as unknown as SIGMAS; }

        /**
          * Constructor
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.sigma_max default: 14.614642 step: 0.01
		 * @param opts.sigma_min default: 0.0291675 step: 0.01
		 * @param opts.rho default: 7 step: 0.01}
        */
        constructor(opts:{
            'steps'?: INT,'sigma_max'?: FLOAT,'sigma_min'?: FLOAT,'rho'?: FLOAT
        }){
            super(ctx);

            super.$$link("steps", opts['steps']??tmp["KarrasScheduler"].defaults['steps'])
super.$$link("sigma_max", opts['sigma_max']??tmp["KarrasScheduler"].defaults['sigma_max'])
super.$$link("sigma_min", opts['sigma_min']??tmp["KarrasScheduler"].defaults['sigma_min'])
super.$$link("rho", opts['rho']??tmp["KarrasScheduler"].defaults['rho'])
}

        static defaults = {
    'steps':  20,
'sigma_max':  14.614642,
'sigma_min':  0.0291675,
'rho':  7
}
        protected override $$type(){
            return "KarrasScheduler"
        }
},

    /**
     * ExponentialScheduler from sampling/custom_sampling/schedulers
     * @desc 
    */
    "ExponentialScheduler" : class extends Node{
        //Setters
        //set 'steps'(value : INT)  { super.$$link(0, value) } 
//set 'sigma_max'(value : FLOAT)  { super.$$link(1, value) } 
//set 'sigma_min'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'SIGMAS'() : SIGMAS { return [this.$uid.toString(), 0]  as unknown as SIGMAS; }

        /**
          * Constructor
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.sigma_max default: 14.614642 step: 0.01
		 * @param opts.sigma_min default: 0.0291675 step: 0.01}
        */
        constructor(opts:{
            'steps'?: INT,'sigma_max'?: FLOAT,'sigma_min'?: FLOAT
        }){
            super(ctx);

            super.$$link("steps", opts['steps']??tmp["ExponentialScheduler"].defaults['steps'])
super.$$link("sigma_max", opts['sigma_max']??tmp["ExponentialScheduler"].defaults['sigma_max'])
super.$$link("sigma_min", opts['sigma_min']??tmp["ExponentialScheduler"].defaults['sigma_min'])
}

        static defaults = {
    'steps':  20,
'sigma_max':  14.614642,
'sigma_min':  0.0291675
}
        protected override $$type(){
            return "ExponentialScheduler"
        }
},

    /**
     * PolyexponentialScheduler from sampling/custom_sampling/schedulers
     * @desc 
    */
    "PolyexponentialScheduler" : class extends Node{
        //Setters
        //set 'steps'(value : INT)  { super.$$link(0, value) } 
//set 'sigma_max'(value : FLOAT)  { super.$$link(1, value) } 
//set 'sigma_min'(value : FLOAT)  { super.$$link(2, value) } 
//set 'rho'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'SIGMAS'() : SIGMAS { return [this.$uid.toString(), 0]  as unknown as SIGMAS; }

        /**
          * Constructor
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.sigma_max default: 14.614642 step: 0.01
		 * @param opts.sigma_min default: 0.0291675 step: 0.01
		 * @param opts.rho default: 1 step: 0.01}
        */
        constructor(opts:{
            'steps'?: INT,'sigma_max'?: FLOAT,'sigma_min'?: FLOAT,'rho'?: FLOAT
        }){
            super(ctx);

            super.$$link("steps", opts['steps']??tmp["PolyexponentialScheduler"].defaults['steps'])
super.$$link("sigma_max", opts['sigma_max']??tmp["PolyexponentialScheduler"].defaults['sigma_max'])
super.$$link("sigma_min", opts['sigma_min']??tmp["PolyexponentialScheduler"].defaults['sigma_min'])
super.$$link("rho", opts['rho']??tmp["PolyexponentialScheduler"].defaults['rho'])
}

        static defaults = {
    'steps':  20,
'sigma_max':  14.614642,
'sigma_min':  0.0291675,
'rho':  1
}
        protected override $$type(){
            return "PolyexponentialScheduler"
        }
},

    /**
     * VPScheduler from sampling/custom_sampling/schedulers
     * @desc 
    */
    "VPScheduler" : class extends Node{
        //Setters
        //set 'steps'(value : INT)  { super.$$link(0, value) } 
//set 'beta_d'(value : FLOAT)  { super.$$link(1, value) } 
//set 'beta_min'(value : FLOAT)  { super.$$link(2, value) } 
//set 'eps_s'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'SIGMAS'() : SIGMAS { return [this.$uid.toString(), 0]  as unknown as SIGMAS; }

        /**
          * Constructor
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.beta_d default: 19.9 step: 0.01
		 * @param opts.beta_min default: 0.1 step: 0.01
		 * @param opts.eps_s default: 0.001 step: 0.0001}
        */
        constructor(opts:{
            'steps'?: INT,'beta_d'?: FLOAT,'beta_min'?: FLOAT,'eps_s'?: FLOAT
        }){
            super(ctx);

            super.$$link("steps", opts['steps']??tmp["VPScheduler"].defaults['steps'])
super.$$link("beta_d", opts['beta_d']??tmp["VPScheduler"].defaults['beta_d'])
super.$$link("beta_min", opts['beta_min']??tmp["VPScheduler"].defaults['beta_min'])
super.$$link("eps_s", opts['eps_s']??tmp["VPScheduler"].defaults['eps_s'])
}

        static defaults = {
    'steps':  20,
'beta_d':  19.9,
'beta_min':  0.1,
'eps_s':  0.001
}
        protected override $$type(){
            return "VPScheduler"
        }
},

    /**
     * BetaSamplingScheduler from sampling/custom_sampling/schedulers
     * @desc 
    */
    "BetaSamplingScheduler" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'steps'(value : INT)  { super.$$link(1, value) } 
//set 'alpha'(value : FLOAT)  { super.$$link(2, value) } 
//set 'beta'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'SIGMAS'() : SIGMAS { return [this.$uid.toString(), 0]  as unknown as SIGMAS; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.alpha default: 0.6 step: 0.01
		 * @param opts.beta default: 0.6 step: 0.01}
        */
        constructor(opts:{
            'model': MODEL,'steps'?: INT,'alpha'?: FLOAT,'beta'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("steps", opts['steps']??tmp["BetaSamplingScheduler"].defaults['steps'])
super.$$link("alpha", opts['alpha']??tmp["BetaSamplingScheduler"].defaults['alpha'])
super.$$link("beta", opts['beta']??tmp["BetaSamplingScheduler"].defaults['beta'])
}

        static defaults = {
    'steps':  20,
'alpha':  0.6,
'beta':  0.6
}
        protected override $$type(){
            return "BetaSamplingScheduler"
        }
},

    /**
     * SDTurboScheduler from sampling/custom_sampling/schedulers
     * @desc 
    */
    "SDTurboScheduler" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'steps'(value : INT)  { super.$$link(1, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'SIGMAS'() : SIGMAS { return [this.$uid.toString(), 0]  as unknown as SIGMAS; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.steps default: 1 max: 10 min: 1
		 * @param opts.denoise default: 1 step: 0.01}
        */
        constructor(opts:{
            'model': MODEL,'steps'?: INT,'denoise'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("steps", opts['steps']??tmp["SDTurboScheduler"].defaults['steps'])
super.$$link("denoise", opts['denoise']??tmp["SDTurboScheduler"].defaults['denoise'])
}

        static defaults = {
    'steps':  1,
'denoise':  1
}
        protected override $$type(){
            return "SDTurboScheduler"
        }
},

    /**
     * KSamplerSelect from sampling/custom_sampling/samplers
     * @desc 
    */
    "KSamplerSelect" : class extends Node{
        //Setters
        //set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'SAMPLER'() : SAMPLER { return [this.$uid.toString(), 0]  as unknown as SAMPLER; }

        /**
          * Constructor
		 * @param opts.sampler_name}
        */
        constructor(opts:{
            'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn
        }){
            super(ctx);

            super.$$link("sampler_name", opts['sampler_name'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "KSamplerSelect"
        }
},

    /**
     * SamplerEulerAncestral from sampling/custom_sampling/samplers
     * @desc 
    */
    "SamplerEulerAncestral" : class extends Node{
        //Setters
        //set 'eta'(value : FLOAT)  { super.$$link(0, value) } 
//set 's_noise'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'SAMPLER'() : SAMPLER { return [this.$uid.toString(), 0]  as unknown as SAMPLER; }

        /**
          * Constructor
		 * @param opts.eta default: 1 step: 0.01
		 * @param opts.s_noise default: 1 step: 0.01}
        */
        constructor(opts:{
            'eta'?: FLOAT,'s_noise'?: FLOAT
        }){
            super(ctx);

            super.$$link("eta", opts['eta']??tmp["SamplerEulerAncestral"].defaults['eta'])
super.$$link("s_noise", opts['s_noise']??tmp["SamplerEulerAncestral"].defaults['s_noise'])
}

        static defaults = {
    'eta':  1,
's_noise':  1
}
        protected override $$type(){
            return "SamplerEulerAncestral"
        }
},

    /**
     * SamplerEulerAncestralCFG++ from sampling/custom_sampling/samplers
     * @desc 
    */
    "SamplerEulerAncestralCFGPP" : class extends Node{
        //Setters
        //set 'eta'(value : FLOAT)  { super.$$link(0, value) } 
//set 's_noise'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'SAMPLER'() : SAMPLER { return [this.$uid.toString(), 0]  as unknown as SAMPLER; }

        /**
          * Constructor
		 * @param opts.eta default: 1 step: 0.01
		 * @param opts.s_noise default: 1 step: 0.01}
        */
        constructor(opts:{
            'eta'?: FLOAT,'s_noise'?: FLOAT
        }){
            super(ctx);

            super.$$link("eta", opts['eta']??tmp["SamplerEulerAncestralCFGPP"].defaults['eta'])
super.$$link("s_noise", opts['s_noise']??tmp["SamplerEulerAncestralCFGPP"].defaults['s_noise'])
}

        static defaults = {
    'eta':  1,
's_noise':  1
}
        protected override $$type(){
            return "SamplerEulerAncestralCFGPP"
        }
},

    /**
     * SamplerLMS from sampling/custom_sampling/samplers
     * @desc 
    */
    "SamplerLMS" : class extends Node{
        //Setters
        //set 'order'(value : INT)  { super.$$link(0, value) } 

        //Getters
        get 'SAMPLER'() : SAMPLER { return [this.$uid.toString(), 0]  as unknown as SAMPLER; }

        /**
          * Constructor
		 * @param opts.order default: 4 max: 100 min: 1}
        */
        constructor(opts:{
            'order'?: INT
        }){
            super(ctx);

            super.$$link("order", opts['order']??tmp["SamplerLMS"].defaults['order'])
}

        static defaults = {
    'order':  4
}
        protected override $$type(){
            return "SamplerLMS"
        }
},

    /**
     * SamplerDPMPP_3M_SDE from sampling/custom_sampling/samplers
     * @desc 
    */
    "SamplerDPMPP_3M_SDE" : class extends Node{
        //Setters
        //set 'eta'(value : FLOAT)  { super.$$link(0, value) } 
//set 's_noise'(value : FLOAT)  { super.$$link(1, value) } 
//set 'noise_device'(value : 'gpu'|'cpu'| $dyn)  { super.$$link(2, value) } 

        //Getters
        get 'SAMPLER'() : SAMPLER { return [this.$uid.toString(), 0]  as unknown as SAMPLER; }

        /**
          * Constructor
		 * @param opts.eta default: 1 step: 0.01
		 * @param opts.s_noise default: 1 step: 0.01
		 * @param opts.noise_device}
        */
        constructor(opts:{
            'eta'?: FLOAT,'s_noise'?: FLOAT,'noise_device': 'gpu'|'cpu'| $dyn
        }){
            super(ctx);

            super.$$link("eta", opts['eta']??tmp["SamplerDPMPP_3M_SDE"].defaults['eta'])
super.$$link("s_noise", opts['s_noise']??tmp["SamplerDPMPP_3M_SDE"].defaults['s_noise'])
super.$$link("noise_device", opts['noise_device'])
}

        static defaults = {
    'eta':  1,
's_noise':  1
}
        protected override $$type(){
            return "SamplerDPMPP_3M_SDE"
        }
},

    /**
     * SamplerDPMPP_2M_SDE from sampling/custom_sampling/samplers
     * @desc 
    */
    "SamplerDPMPP_2M_SDE" : class extends Node{
        //Setters
        //set 'solver_type'(value : 'midpoint'|'heun'| $dyn)  { super.$$link(0, value) } 
//set 'eta'(value : FLOAT)  { super.$$link(1, value) } 
//set 's_noise'(value : FLOAT)  { super.$$link(2, value) } 
//set 'noise_device'(value : 'gpu'|'cpu'| $dyn)  { super.$$link(3, value) } 

        //Getters
        get 'SAMPLER'() : SAMPLER { return [this.$uid.toString(), 0]  as unknown as SAMPLER; }

        /**
          * Constructor
		 * @param opts.solver_type
		 * @param opts.eta default: 1 step: 0.01
		 * @param opts.s_noise default: 1 step: 0.01
		 * @param opts.noise_device}
        */
        constructor(opts:{
            'solver_type': 'midpoint'|'heun'| $dyn,'eta'?: FLOAT,'s_noise'?: FLOAT,'noise_device': 'gpu'|'cpu'| $dyn
        }){
            super(ctx);

            super.$$link("solver_type", opts['solver_type'])
super.$$link("eta", opts['eta']??tmp["SamplerDPMPP_2M_SDE"].defaults['eta'])
super.$$link("s_noise", opts['s_noise']??tmp["SamplerDPMPP_2M_SDE"].defaults['s_noise'])
super.$$link("noise_device", opts['noise_device'])
}

        static defaults = {
    'eta':  1,
's_noise':  1
}
        protected override $$type(){
            return "SamplerDPMPP_2M_SDE"
        }
},

    /**
     * SamplerDPMPP_SDE from sampling/custom_sampling/samplers
     * @desc 
    */
    "SamplerDPMPP_SDE" : class extends Node{
        //Setters
        //set 'eta'(value : FLOAT)  { super.$$link(0, value) } 
//set 's_noise'(value : FLOAT)  { super.$$link(1, value) } 
//set 'r'(value : FLOAT)  { super.$$link(2, value) } 
//set 'noise_device'(value : 'gpu'|'cpu'| $dyn)  { super.$$link(3, value) } 

        //Getters
        get 'SAMPLER'() : SAMPLER { return [this.$uid.toString(), 0]  as unknown as SAMPLER; }

        /**
          * Constructor
		 * @param opts.eta default: 1 step: 0.01
		 * @param opts.s_noise default: 1 step: 0.01
		 * @param opts.r default: 0.5 step: 0.01
		 * @param opts.noise_device}
        */
        constructor(opts:{
            'eta'?: FLOAT,'s_noise'?: FLOAT,'r'?: FLOAT,'noise_device': 'gpu'|'cpu'| $dyn
        }){
            super(ctx);

            super.$$link("eta", opts['eta']??tmp["SamplerDPMPP_SDE"].defaults['eta'])
super.$$link("s_noise", opts['s_noise']??tmp["SamplerDPMPP_SDE"].defaults['s_noise'])
super.$$link("r", opts['r']??tmp["SamplerDPMPP_SDE"].defaults['r'])
super.$$link("noise_device", opts['noise_device'])
}

        static defaults = {
    'eta':  1,
's_noise':  1,
'r':  0.5
}
        protected override $$type(){
            return "SamplerDPMPP_SDE"
        }
},

    /**
     * SamplerDPMPP_2S_Ancestral from sampling/custom_sampling/samplers
     * @desc 
    */
    "SamplerDPMPP_2S_Ancestral" : class extends Node{
        //Setters
        //set 'eta'(value : FLOAT)  { super.$$link(0, value) } 
//set 's_noise'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'SAMPLER'() : SAMPLER { return [this.$uid.toString(), 0]  as unknown as SAMPLER; }

        /**
          * Constructor
		 * @param opts.eta default: 1 step: 0.01
		 * @param opts.s_noise default: 1 step: 0.01}
        */
        constructor(opts:{
            'eta'?: FLOAT,'s_noise'?: FLOAT
        }){
            super(ctx);

            super.$$link("eta", opts['eta']??tmp["SamplerDPMPP_2S_Ancestral"].defaults['eta'])
super.$$link("s_noise", opts['s_noise']??tmp["SamplerDPMPP_2S_Ancestral"].defaults['s_noise'])
}

        static defaults = {
    'eta':  1,
's_noise':  1
}
        protected override $$type(){
            return "SamplerDPMPP_2S_Ancestral"
        }
},

    /**
     * SamplerDPMAdaptative from sampling/custom_sampling/samplers
     * @desc 
    */
    "SamplerDPMAdaptative" : class extends Node{
        //Setters
        //set 'order'(value : INT)  { super.$$link(0, value) } 
//set 'rtol'(value : FLOAT)  { super.$$link(1, value) } 
//set 'atol'(value : FLOAT)  { super.$$link(2, value) } 
//set 'h_init'(value : FLOAT)  { super.$$link(3, value) } 
//set 'pcoeff'(value : FLOAT)  { super.$$link(4, value) } 
//set 'icoeff'(value : FLOAT)  { super.$$link(5, value) } 
//set 'dcoeff'(value : FLOAT)  { super.$$link(6, value) } 
//set 'accept_safety'(value : FLOAT)  { super.$$link(7, value) } 
//set 'eta'(value : FLOAT)  { super.$$link(8, value) } 
//set 's_noise'(value : FLOAT)  { super.$$link(9, value) } 

        //Getters
        get 'SAMPLER'() : SAMPLER { return [this.$uid.toString(), 0]  as unknown as SAMPLER; }

        /**
          * Constructor
		 * @param opts.order default: 3 max: 3 min: 2
		 * @param opts.rtol default: 0.05 step: 0.01
		 * @param opts.atol default: 0.0078 step: 0.01
		 * @param opts.h_init default: 0.05 step: 0.01
		 * @param opts.pcoeff step: 0.01
		 * @param opts.icoeff default: 1 step: 0.01
		 * @param opts.dcoeff step: 0.01
		 * @param opts.accept_safety default: 0.81 step: 0.01
		 * @param opts.eta step: 0.01
		 * @param opts.s_noise default: 1 step: 0.01}
        */
        constructor(opts:{
            'order'?: INT,'rtol'?: FLOAT,'atol'?: FLOAT,'h_init'?: FLOAT,'pcoeff'?: FLOAT,'icoeff'?: FLOAT,'dcoeff'?: FLOAT,'accept_safety'?: FLOAT,'eta'?: FLOAT,'s_noise'?: FLOAT
        }){
            super(ctx);

            super.$$link("order", opts['order']??tmp["SamplerDPMAdaptative"].defaults['order'])
super.$$link("rtol", opts['rtol']??tmp["SamplerDPMAdaptative"].defaults['rtol'])
super.$$link("atol", opts['atol']??tmp["SamplerDPMAdaptative"].defaults['atol'])
super.$$link("h_init", opts['h_init']??tmp["SamplerDPMAdaptative"].defaults['h_init'])
super.$$link("pcoeff", opts['pcoeff']??tmp["SamplerDPMAdaptative"].defaults['pcoeff'])
super.$$link("icoeff", opts['icoeff']??tmp["SamplerDPMAdaptative"].defaults['icoeff'])
super.$$link("dcoeff", opts['dcoeff']??tmp["SamplerDPMAdaptative"].defaults['dcoeff'])
super.$$link("accept_safety", opts['accept_safety']??tmp["SamplerDPMAdaptative"].defaults['accept_safety'])
super.$$link("eta", opts['eta']??tmp["SamplerDPMAdaptative"].defaults['eta'])
super.$$link("s_noise", opts['s_noise']??tmp["SamplerDPMAdaptative"].defaults['s_noise'])
}

        static defaults = {
    'order':  3,
'rtol':  0.05,
'atol':  0.0078,
'h_init':  0.05,
'pcoeff':  0,
'icoeff':  1,
'dcoeff':  0,
'accept_safety':  0.81,
'eta':  0,
's_noise':  1
}
        protected override $$type(){
            return "SamplerDPMAdaptative"
        }
},

    /**
     * SplitSigmas from sampling/custom_sampling/sigmas
     * @desc 
    */
    "SplitSigmas" : class extends Node{
        //Setters
        //set 'sigmas'(value : SIGMAS)  { super.$$link(0, value) } 
//set 'step'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'high_sigmas'() : SIGMAS { return [this.$uid.toString(), 0]  as unknown as SIGMAS; }
get 'low_sigmas'() : SIGMAS { return [this.$uid.toString(), 1]  as unknown as SIGMAS; }

        /**
          * Constructor
		 * @param opts.sigmas
		 * @param opts.step}
        */
        constructor(opts:{
            'sigmas': SIGMAS,'step'?: INT
        }){
            super(ctx);

            super.$$link("sigmas", opts['sigmas'])
super.$$link("step", opts['step']??tmp["SplitSigmas"].defaults['step'])
}

        static defaults = {
    'step':  0
}
        protected override $$type(){
            return "SplitSigmas"
        }
},

    /**
     * SplitSigmasDenoise from sampling/custom_sampling/sigmas
     * @desc 
    */
    "SplitSigmasDenoise" : class extends Node{
        //Setters
        //set 'sigmas'(value : SIGMAS)  { super.$$link(0, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'high_sigmas'() : SIGMAS { return [this.$uid.toString(), 0]  as unknown as SIGMAS; }
get 'low_sigmas'() : SIGMAS { return [this.$uid.toString(), 1]  as unknown as SIGMAS; }

        /**
          * Constructor
		 * @param opts.sigmas
		 * @param opts.denoise default: 1 step: 0.01}
        */
        constructor(opts:{
            'sigmas': SIGMAS,'denoise'?: FLOAT
        }){
            super(ctx);

            super.$$link("sigmas", opts['sigmas'])
super.$$link("denoise", opts['denoise']??tmp["SplitSigmasDenoise"].defaults['denoise'])
}

        static defaults = {
    'denoise':  1
}
        protected override $$type(){
            return "SplitSigmasDenoise"
        }
},

    /**
     * FlipSigmas from sampling/custom_sampling/sigmas
     * @desc 
    */
    "FlipSigmas" : class extends Node{
        //Setters
        //set 'sigmas'(value : SIGMAS)  { super.$$link(0, value) } 

        //Getters
        get 'SIGMAS'() : SIGMAS { return [this.$uid.toString(), 0]  as unknown as SIGMAS; }

        /**
          * Constructor
		 * @param opts.sigmas}
        */
        constructor(opts:{
            'sigmas': SIGMAS
        }){
            super(ctx);

            super.$$link("sigmas", opts['sigmas'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "FlipSigmas"
        }
},

    /**
     * CFGGuider from sampling/custom_sampling/guiders
     * @desc 
    */
    "CFGGuider" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(1, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(2, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'GUIDER'() : GUIDER { return [this.$uid.toString(), 0]  as unknown as GUIDER; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.cfg default: 8 step: 0.1}
        */
        constructor(opts:{
            'model': MODEL,'positive': CONDITIONING,'negative': CONDITIONING,'cfg'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("cfg", opts['cfg']??tmp["CFGGuider"].defaults['cfg'])
}

        static defaults = {
    'cfg':  8
}
        protected override $$type(){
            return "CFGGuider"
        }
},

    /**
     * DualCFGGuider from sampling/custom_sampling/guiders
     * @desc 
    */
    "DualCFGGuider" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'cond1'(value : CONDITIONING)  { super.$$link(1, value) } 
//set 'cond2'(value : CONDITIONING)  { super.$$link(2, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(3, value) } 
//set 'cfg_conds'(value : FLOAT)  { super.$$link(4, value) } 
//set 'cfg_cond2_negative'(value : FLOAT)  { super.$$link(5, value) } 

        //Getters
        get 'GUIDER'() : GUIDER { return [this.$uid.toString(), 0]  as unknown as GUIDER; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.cond1
		 * @param opts.cond2
		 * @param opts.negative
		 * @param opts.cfg_conds default: 8 step: 0.1
		 * @param opts.cfg_cond2_negative default: 8 step: 0.1}
        */
        constructor(opts:{
            'model': MODEL,'cond1': CONDITIONING,'cond2': CONDITIONING,'negative': CONDITIONING,'cfg_conds'?: FLOAT,'cfg_cond2_negative'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("cond1", opts['cond1'])
super.$$link("cond2", opts['cond2'])
super.$$link("negative", opts['negative'])
super.$$link("cfg_conds", opts['cfg_conds']??tmp["DualCFGGuider"].defaults['cfg_conds'])
super.$$link("cfg_cond2_negative", opts['cfg_cond2_negative']??tmp["DualCFGGuider"].defaults['cfg_cond2_negative'])
}

        static defaults = {
    'cfg_conds':  8,
'cfg_cond2_negative':  8
}
        protected override $$type(){
            return "DualCFGGuider"
        }
},

    /**
     * BasicGuider from sampling/custom_sampling/guiders
     * @desc 
    */
    "BasicGuider" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'conditioning'(value : CONDITIONING)  { super.$$link(1, value) } 

        //Getters
        get 'GUIDER'() : GUIDER { return [this.$uid.toString(), 0]  as unknown as GUIDER; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.conditioning}
        */
        constructor(opts:{
            'model': MODEL,'conditioning': CONDITIONING
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("conditioning", opts['conditioning'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "BasicGuider"
        }
},

    /**
     * RandomNoise from sampling/custom_sampling/noise
     * @desc 
    */
    "RandomNoise" : class extends Node{
        //Setters
        //set 'noise_seed'(value : INT)  { super.$$link(0, value) } 

        //Getters
        get 'NOISE'() : NOISE { return [this.$uid.toString(), 0]  as unknown as NOISE; }

        /**
          * Constructor
		 * @param opts.noise_seed}
        */
        constructor(opts:{
            'noise_seed'?: INT
        }){
            super(ctx);

            super.$$link("noise_seed", opts['noise_seed']??tmp["RandomNoise"].defaults['noise_seed'])
}

        static defaults = {
    'noise_seed':  0
}
        protected override $$type(){
            return "RandomNoise"
        }
},

    /**
     * DisableNoise from sampling/custom_sampling/noise
     * @desc 
    */
    "DisableNoise" : class extends Node{
        //Setters
        

        //Getters
        get 'NOISE'() : NOISE { return [this.$uid.toString(), 0]  as unknown as NOISE; }

        /**
          * Constructor
}
        */
        constructor(opts:{
            
        }){
            super(ctx);

            
}

        static defaults = {
    
}
        protected override $$type(){
            return "DisableNoise"
        }
},

    /**
     * AddNoise from _for_testing/custom_sampling/noise
     * @desc 
    */
    "AddNoise" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'noise'(value : NOISE)  { super.$$link(1, value) } 
//set 'sigmas'(value : SIGMAS)  { super.$$link(2, value) } 
//set 'latent_image'(value : LATENT)  { super.$$link(3, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.noise
		 * @param opts.sigmas
		 * @param opts.latent_image}
        */
        constructor(opts:{
            'model': MODEL,'noise': NOISE,'sigmas': SIGMAS,'latent_image': LATENT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("noise", opts['noise'])
super.$$link("sigmas", opts['sigmas'])
super.$$link("latent_image", opts['latent_image'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "AddNoise"
        }
},

    /**
     * SamplerCustomAdvanced from sampling/custom_sampling
     * @desc 
    */
    "SamplerCustomAdvanced" : class extends Node{
        //Setters
        //set 'noise'(value : NOISE)  { super.$$link(0, value) } 
//set 'guider'(value : GUIDER)  { super.$$link(1, value) } 
//set 'sampler'(value : SAMPLER)  { super.$$link(2, value) } 
//set 'sigmas'(value : SIGMAS)  { super.$$link(3, value) } 
//set 'latent_image'(value : LATENT)  { super.$$link(4, value) } 

        //Getters
        get 'output'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }
get 'denoised_output'() : LATENT { return [this.$uid.toString(), 1]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.noise
		 * @param opts.guider
		 * @param opts.sampler
		 * @param opts.sigmas
		 * @param opts.latent_image}
        */
        constructor(opts:{
            'noise': NOISE,'guider': GUIDER,'sampler': SAMPLER,'sigmas': SIGMAS,'latent_image': LATENT
        }){
            super(ctx);

            super.$$link("noise", opts['noise'])
super.$$link("guider", opts['guider'])
super.$$link("sampler", opts['sampler'])
super.$$link("sigmas", opts['sigmas'])
super.$$link("latent_image", opts['latent_image'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "SamplerCustomAdvanced"
        }
},

    /**
     * HyperTile from model_patches/unet
     * @desc 
    */
    "HyperTile" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'tile_size'(value : INT)  { super.$$link(1, value) } 
//set 'swap_size'(value : INT)  { super.$$link(2, value) } 
//set 'max_depth'(value : INT)  { super.$$link(3, value) } 
//set 'scale_depth'(value : BOOLEAN)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.tile_size default: 256 max: 2048 min: 1
		 * @param opts.swap_size default: 2 max: 128 min: 1
		 * @param opts.max_depth
		 * @param opts.scale_depth}
        */
        constructor(opts:{
            'model': MODEL,'tile_size'?: INT,'swap_size'?: INT,'max_depth'?: INT,'scale_depth'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("tile_size", opts['tile_size']??tmp["HyperTile"].defaults['tile_size'])
super.$$link("swap_size", opts['swap_size']??tmp["HyperTile"].defaults['swap_size'])
super.$$link("max_depth", opts['max_depth']??tmp["HyperTile"].defaults['max_depth'])
super.$$link("scale_depth", opts['scale_depth']??tmp["HyperTile"].defaults['scale_depth'])
}

        static defaults = {
    'tile_size':  256,
'swap_size':  2,
'max_depth':  0,
'scale_depth':  false
}
        protected override $$type(){
            return "HyperTile"
        }
},

    /**
     * ModelSamplingDiscrete from advanced/model
     * @desc 
    */
    "ModelSamplingDiscrete" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'sampling'(value : 'eps'|'v_prediction'|'lcm'|'x0'| $dyn)  { super.$$link(1, value) } 
//set 'zsnr'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.sampling
		 * @param opts.zsnr}
        */
        constructor(opts:{
            'model': MODEL,'sampling': 'eps'|'v_prediction'|'lcm'|'x0'| $dyn,'zsnr'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("sampling", opts['sampling'])
super.$$link("zsnr", opts['zsnr']??tmp["ModelSamplingDiscrete"].defaults['zsnr'])
}

        static defaults = {
    'zsnr':  false
}
        protected override $$type(){
            return "ModelSamplingDiscrete"
        }
},

    /**
     * ModelSamplingContinuousEDM from advanced/model
     * @desc 
    */
    "ModelSamplingContinuousEDM" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'sampling'(value : 'v_prediction'|'edm_playground_v2.5'|'eps'| $dyn)  { super.$$link(1, value) } 
//set 'sigma_max'(value : FLOAT)  { super.$$link(2, value) } 
//set 'sigma_min'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.sampling
		 * @param opts.sigma_max default: 120 step: 0.001
		 * @param opts.sigma_min default: 0.002 step: 0.001}
        */
        constructor(opts:{
            'model': MODEL,'sampling': 'v_prediction'|'edm_playground_v2.5'|'eps'| $dyn,'sigma_max'?: FLOAT,'sigma_min'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("sampling", opts['sampling'])
super.$$link("sigma_max", opts['sigma_max']??tmp["ModelSamplingContinuousEDM"].defaults['sigma_max'])
super.$$link("sigma_min", opts['sigma_min']??tmp["ModelSamplingContinuousEDM"].defaults['sigma_min'])
}

        static defaults = {
    'sigma_max':  120,
'sigma_min':  0.002
}
        protected override $$type(){
            return "ModelSamplingContinuousEDM"
        }
},

    /**
     * ModelSamplingContinuousV from advanced/model
     * @desc 
    */
    "ModelSamplingContinuousV" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'sampling'(value : 'v_prediction'| $dyn)  { super.$$link(1, value) } 
//set 'sigma_max'(value : FLOAT)  { super.$$link(2, value) } 
//set 'sigma_min'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.sampling
		 * @param opts.sigma_max default: 500 step: 0.001
		 * @param opts.sigma_min default: 0.03 step: 0.001}
        */
        constructor(opts:{
            'model': MODEL,'sampling': 'v_prediction'| $dyn,'sigma_max'?: FLOAT,'sigma_min'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("sampling", opts['sampling'])
super.$$link("sigma_max", opts['sigma_max']??tmp["ModelSamplingContinuousV"].defaults['sigma_max'])
super.$$link("sigma_min", opts['sigma_min']??tmp["ModelSamplingContinuousV"].defaults['sigma_min'])
}

        static defaults = {
    'sigma_max':  500,
'sigma_min':  0.03
}
        protected override $$type(){
            return "ModelSamplingContinuousV"
        }
},

    /**
     * ModelSamplingStableCascade from advanced/model
     * @desc 
    */
    "ModelSamplingStableCascade" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'shift'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.shift default: 2 step: 0.01}
        */
        constructor(opts:{
            'model': MODEL,'shift'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("shift", opts['shift']??tmp["ModelSamplingStableCascade"].defaults['shift'])
}

        static defaults = {
    'shift':  2
}
        protected override $$type(){
            return "ModelSamplingStableCascade"
        }
},

    /**
     * ModelSamplingSD3 from advanced/model
     * @desc 
    */
    "ModelSamplingSD3" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'shift'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.shift default: 3 step: 0.01}
        */
        constructor(opts:{
            'model': MODEL,'shift'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("shift", opts['shift']??tmp["ModelSamplingSD3"].defaults['shift'])
}

        static defaults = {
    'shift':  3
}
        protected override $$type(){
            return "ModelSamplingSD3"
        }
},

    /**
     * ModelSamplingAuraFlow from advanced/model
     * @desc 
    */
    "ModelSamplingAuraFlow" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'shift'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.shift default: 1.73 step: 0.01}
        */
        constructor(opts:{
            'model': MODEL,'shift'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("shift", opts['shift']??tmp["ModelSamplingAuraFlow"].defaults['shift'])
}

        static defaults = {
    'shift':  1.73
}
        protected override $$type(){
            return "ModelSamplingAuraFlow"
        }
},

    /**
     * ModelSamplingFlux from advanced/model
     * @desc 
    */
    "ModelSamplingFlux" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'max_shift'(value : FLOAT)  { super.$$link(1, value) } 
//set 'base_shift'(value : FLOAT)  { super.$$link(2, value) } 
//set 'width'(value : INT)  { super.$$link(3, value) } 
//set 'height'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.max_shift default: 1.15 step: 0.01
		 * @param opts.base_shift default: 0.5 step: 0.01
		 * @param opts.width default: 1024 max: 16384 min: 16 step: 8
		 * @param opts.height default: 1024 max: 16384 min: 16 step: 8}
        */
        constructor(opts:{
            'model': MODEL,'max_shift'?: FLOAT,'base_shift'?: FLOAT,'width'?: INT,'height'?: INT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("max_shift", opts['max_shift']??tmp["ModelSamplingFlux"].defaults['max_shift'])
super.$$link("base_shift", opts['base_shift']??tmp["ModelSamplingFlux"].defaults['base_shift'])
super.$$link("width", opts['width']??tmp["ModelSamplingFlux"].defaults['width'])
super.$$link("height", opts['height']??tmp["ModelSamplingFlux"].defaults['height'])
}

        static defaults = {
    'max_shift':  1.15,
'base_shift':  0.5,
'width':  1024,
'height':  1024
}
        protected override $$type(){
            return "ModelSamplingFlux"
        }
},

    /**
     * RescaleCFG from advanced/model
     * @desc 
    */
    "RescaleCFG" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'multiplier'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.multiplier default: 0.7 step: 0.01}
        */
        constructor(opts:{
            'model': MODEL,'multiplier'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("multiplier", opts['multiplier']??tmp["RescaleCFG"].defaults['multiplier'])
}

        static defaults = {
    'multiplier':  0.7
}
        protected override $$type(){
            return "RescaleCFG"
        }
},

    /**
     * PatchModelAddDownscale (Kohya Deep Shrink) from _for_testing
     * @desc 
    */
    "PatchModelAddDownscale" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'block_number'(value : INT)  { super.$$link(1, value) } 
//set 'downscale_factor'(value : FLOAT)  { super.$$link(2, value) } 
//set 'start_percent'(value : FLOAT)  { super.$$link(3, value) } 
//set 'end_percent'(value : FLOAT)  { super.$$link(4, value) } 
//set 'downscale_after_skip'(value : BOOLEAN)  { super.$$link(5, value) } 
//set 'downscale_method'(value : 'bicubic'|'nearest-exact'|'bilinear'|'area'|'bislerp'| $dyn)  { super.$$link(6, value) } 
//set 'upscale_method'(value : 'bicubic'|'nearest-exact'|'bilinear'|'area'|'bislerp'| $dyn)  { super.$$link(7, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.block_number default: 3 max: 32 min: 1 step: 1
		 * @param opts.downscale_factor default: 2 max: 9 min: 0.1 step: 0.001
		 * @param opts.start_percent step: 0.001
		 * @param opts.end_percent default: 0.35 step: 0.001
		 * @param opts.downscale_after_skip default: true
		 * @param opts.downscale_method
		 * @param opts.upscale_method}
        */
        constructor(opts:{
            'model': MODEL,'block_number'?: INT,'downscale_factor'?: FLOAT,'start_percent'?: FLOAT,'end_percent'?: FLOAT,'downscale_after_skip'?: BOOLEAN,'downscale_method': 'bicubic'|'nearest-exact'|'bilinear'|'area'|'bislerp'| $dyn,'upscale_method': 'bicubic'|'nearest-exact'|'bilinear'|'area'|'bislerp'| $dyn
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("block_number", opts['block_number']??tmp["PatchModelAddDownscale"].defaults['block_number'])
super.$$link("downscale_factor", opts['downscale_factor']??tmp["PatchModelAddDownscale"].defaults['downscale_factor'])
super.$$link("start_percent", opts['start_percent']??tmp["PatchModelAddDownscale"].defaults['start_percent'])
super.$$link("end_percent", opts['end_percent']??tmp["PatchModelAddDownscale"].defaults['end_percent'])
super.$$link("downscale_after_skip", opts['downscale_after_skip']??tmp["PatchModelAddDownscale"].defaults['downscale_after_skip'])
super.$$link("downscale_method", opts['downscale_method'])
super.$$link("upscale_method", opts['upscale_method'])
}

        static defaults = {
    'block_number':  3,
'downscale_factor':  2,
'start_percent':  0,
'end_percent':  0.35,
'downscale_after_skip':  true
}
        protected override $$type(){
            return "PatchModelAddDownscale"
        }
},

    /**
     * ImageCrop from image/transform
     * @desc 
    */
    "ImageCrop" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'width'(value : INT)  { super.$$link(1, value) } 
//set 'height'(value : INT)  { super.$$link(2, value) } 
//set 'x'(value : INT)  { super.$$link(3, value) } 
//set 'y'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.width default: 512 max: 16384 min: 1 step: 1
		 * @param opts.height default: 512 max: 16384 min: 1 step: 1
		 * @param opts.x step: 1
		 * @param opts.y step: 1}
        */
        constructor(opts:{
            'image': IMAGE,'width'?: INT,'height'?: INT,'x'?: INT,'y'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("width", opts['width']??tmp["ImageCrop"].defaults['width'])
super.$$link("height", opts['height']??tmp["ImageCrop"].defaults['height'])
super.$$link("x", opts['x']??tmp["ImageCrop"].defaults['x'])
super.$$link("y", opts['y']??tmp["ImageCrop"].defaults['y'])
}

        static defaults = {
    'width':  512,
'height':  512,
'x':  0,
'y':  0
}
        protected override $$type(){
            return "ImageCrop"
        }
},

    /**
     * RepeatImageBatch from image/batch
     * @desc 
    */
    "RepeatImageBatch" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'amount'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.amount default: 1 max: 4096 min: 1}
        */
        constructor(opts:{
            'image': IMAGE,'amount'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("amount", opts['amount']??tmp["RepeatImageBatch"].defaults['amount'])
}

        static defaults = {
    'amount':  1
}
        protected override $$type(){
            return "RepeatImageBatch"
        }
},

    /**
     * ImageFromBatch from image/batch
     * @desc 
    */
    "ImageFromBatch" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'batch_index'(value : INT)  { super.$$link(1, value) } 
//set 'length'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.batch_index
		 * @param opts.length default: 1 max: 4096 min: 1}
        */
        constructor(opts:{
            'image': IMAGE,'batch_index'?: INT,'length'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("batch_index", opts['batch_index']??tmp["ImageFromBatch"].defaults['batch_index'])
super.$$link("length", opts['length']??tmp["ImageFromBatch"].defaults['length'])
}

        static defaults = {
    'batch_index':  0,
'length':  1
}
        protected override $$type(){
            return "ImageFromBatch"
        }
},

    /**
     * SaveAnimatedWEBP from image/animation
     * @desc 
    */
    "SaveAnimatedWEBP" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'filename_prefix'(value : STRING)  { super.$$link(1, value) } 
//set 'fps'(value : FLOAT)  { super.$$link(2, value) } 
//set 'lossless'(value : BOOLEAN)  { super.$$link(3, value) } 
//set 'quality'(value : INT)  { super.$$link(4, value) } 
//set 'method'(value : 'default'|'fastest'|'slowest'| $dyn)  { super.$$link(5, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.filename_prefix default: "ComfyUI"
		 * @param opts.fps default: 6 max: 1000 min: 0.01 step: 0.01
		 * @param opts.lossless default: true
		 * @param opts.quality default: 80
		 * @param opts.method}
        */
        constructor(opts:{
            'images': IMAGE,'filename_prefix'?: STRING,'fps'?: FLOAT,'lossless'?: BOOLEAN,'quality'?: INT,'method': 'default'|'fastest'|'slowest'| $dyn
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("filename_prefix", opts['filename_prefix']??tmp["SaveAnimatedWEBP"].defaults['filename_prefix'])
super.$$link("fps", opts['fps']??tmp["SaveAnimatedWEBP"].defaults['fps'])
super.$$link("lossless", opts['lossless']??tmp["SaveAnimatedWEBP"].defaults['lossless'])
super.$$link("quality", opts['quality']??tmp["SaveAnimatedWEBP"].defaults['quality'])
super.$$link("method", opts['method'])
}

        static defaults = {
    'filename_prefix':  "ComfyUI",
'fps':  6,
'lossless':  true,
'quality':  80
}
        protected override $$type(){
            return "SaveAnimatedWEBP"
        }
},

    /**
     * SaveAnimatedPNG from image/animation
     * @desc 
    */
    "SaveAnimatedPNG" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'filename_prefix'(value : STRING)  { super.$$link(1, value) } 
//set 'fps'(value : FLOAT)  { super.$$link(2, value) } 
//set 'compress_level'(value : INT)  { super.$$link(3, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.filename_prefix default: "ComfyUI"
		 * @param opts.fps default: 6 max: 1000 min: 0.01 step: 0.01
		 * @param opts.compress_level default: 4}
        */
        constructor(opts:{
            'images': IMAGE,'filename_prefix'?: STRING,'fps'?: FLOAT,'compress_level'?: INT
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("filename_prefix", opts['filename_prefix']??tmp["SaveAnimatedPNG"].defaults['filename_prefix'])
super.$$link("fps", opts['fps']??tmp["SaveAnimatedPNG"].defaults['fps'])
super.$$link("compress_level", opts['compress_level']??tmp["SaveAnimatedPNG"].defaults['compress_level'])
}

        static defaults = {
    'filename_prefix':  "ComfyUI",
'fps':  6,
'compress_level':  4
}
        protected override $$type(){
            return "SaveAnimatedPNG"
        }
},

    /**
     * Image Only Checkpoint Loader (img2vid model) from loaders/video_models
     * @desc 
    */
    "ImageOnlyCheckpointLoader" : class extends Node{
        //Setters
        //set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'CLIP_VISION'() : CLIP_VISION { return [this.$uid.toString(), 1]  as unknown as CLIP_VISION; }
get 'VAE'() : VAE { return [this.$uid.toString(), 2]  as unknown as VAE; }

        /**
          * Constructor
		 * @param opts.ckpt_name}
        */
        constructor(opts:{
            'ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn
        }){
            super(ctx);

            super.$$link("ckpt_name", opts['ckpt_name'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImageOnlyCheckpointLoader"
        }
},

    /**
     * SVD_img2vid_Conditioning from conditioning/video_models
     * @desc 
    */
    "SVD_img2vid_Conditioning" : class extends Node{
        //Setters
        //set 'clip_vision'(value : CLIP_VISION)  { super.$$link(0, value) } 
//set 'init_image'(value : IMAGE)  { super.$$link(1, value) } 
//set 'vae'(value : VAE)  { super.$$link(2, value) } 
//set 'width'(value : INT)  { super.$$link(3, value) } 
//set 'height'(value : INT)  { super.$$link(4, value) } 
//set 'video_frames'(value : INT)  { super.$$link(5, value) } 
//set 'motion_bucket_id'(value : INT)  { super.$$link(6, value) } 
//set 'fps'(value : INT)  { super.$$link(7, value) } 
//set 'augmentation_level'(value : FLOAT)  { super.$$link(8, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this.$uid.toString(), 1]  as unknown as CONDITIONING; }
get 'latent'() : LATENT { return [this.$uid.toString(), 2]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.clip_vision
		 * @param opts.init_image
		 * @param opts.vae
		 * @param opts.width default: 1024 max: 16384 min: 16 step: 8
		 * @param opts.height default: 576 max: 16384 min: 16 step: 8
		 * @param opts.video_frames default: 14 max: 4096 min: 1
		 * @param opts.motion_bucket_id default: 127 max: 1023 min: 1
		 * @param opts.fps default: 6 max: 1024 min: 1
		 * @param opts.augmentation_level step: 0.01}
        */
        constructor(opts:{
            'clip_vision': CLIP_VISION,'init_image': IMAGE,'vae': VAE,'width'?: INT,'height'?: INT,'video_frames'?: INT,'motion_bucket_id'?: INT,'fps'?: INT,'augmentation_level'?: FLOAT
        }){
            super(ctx);

            super.$$link("clip_vision", opts['clip_vision'])
super.$$link("init_image", opts['init_image'])
super.$$link("vae", opts['vae'])
super.$$link("width", opts['width']??tmp["SVD_img2vid_Conditioning"].defaults['width'])
super.$$link("height", opts['height']??tmp["SVD_img2vid_Conditioning"].defaults['height'])
super.$$link("video_frames", opts['video_frames']??tmp["SVD_img2vid_Conditioning"].defaults['video_frames'])
super.$$link("motion_bucket_id", opts['motion_bucket_id']??tmp["SVD_img2vid_Conditioning"].defaults['motion_bucket_id'])
super.$$link("fps", opts['fps']??tmp["SVD_img2vid_Conditioning"].defaults['fps'])
super.$$link("augmentation_level", opts['augmentation_level']??tmp["SVD_img2vid_Conditioning"].defaults['augmentation_level'])
}

        static defaults = {
    'width':  1024,
'height':  576,
'video_frames':  14,
'motion_bucket_id':  127,
'fps':  6,
'augmentation_level':  0
}
        protected override $$type(){
            return "SVD_img2vid_Conditioning"
        }
},

    /**
     * VideoLinearCFGGuidance from sampling/video_models
     * @desc 
    */
    "VideoLinearCFGGuidance" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'min_cfg'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.min_cfg default: 1 step: 0.5}
        */
        constructor(opts:{
            'model': MODEL,'min_cfg'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("min_cfg", opts['min_cfg']??tmp["VideoLinearCFGGuidance"].defaults['min_cfg'])
}

        static defaults = {
    'min_cfg':  1
}
        protected override $$type(){
            return "VideoLinearCFGGuidance"
        }
},

    /**
     * VideoTriangleCFGGuidance from sampling/video_models
     * @desc 
    */
    "VideoTriangleCFGGuidance" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'min_cfg'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.min_cfg default: 1 step: 0.5}
        */
        constructor(opts:{
            'model': MODEL,'min_cfg'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("min_cfg", opts['min_cfg']??tmp["VideoTriangleCFGGuidance"].defaults['min_cfg'])
}

        static defaults = {
    'min_cfg':  1
}
        protected override $$type(){
            return "VideoTriangleCFGGuidance"
        }
},

    /**
     * ImageOnlyCheckpointSave from _for_testing
     * @desc 
    */
    "ImageOnlyCheckpointSave" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'clip_vision'(value : CLIP_VISION)  { super.$$link(1, value) } 
//set 'vae'(value : VAE)  { super.$$link(2, value) } 
//set 'filename_prefix'(value : STRING)  { super.$$link(3, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.clip_vision
		 * @param opts.vae
		 * @param opts.filename_prefix default: "checkpoints/ComfyUI"}
        */
        constructor(opts:{
            'model': MODEL,'clip_vision': CLIP_VISION,'vae': VAE,'filename_prefix'?: STRING
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("clip_vision", opts['clip_vision'])
super.$$link("vae", opts['vae'])
super.$$link("filename_prefix", opts['filename_prefix']??tmp["ImageOnlyCheckpointSave"].defaults['filename_prefix'])
}

        static defaults = {
    'filename_prefix':  "checkpoints/ComfyUI"
}
        protected override $$type(){
            return "ImageOnlyCheckpointSave"
        }
},

    /**
     * Self-Attention Guidance from _for_testing
     * @desc 
    */
    "SelfAttentionGuidance" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'scale'(value : FLOAT)  { super.$$link(1, value) } 
//set 'blur_sigma'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.scale default: 0.5 max: 5 min: -2 step: 0.01
		 * @param opts.blur_sigma default: 2 step: 0.1}
        */
        constructor(opts:{
            'model': MODEL,'scale'?: FLOAT,'blur_sigma'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("scale", opts['scale']??tmp["SelfAttentionGuidance"].defaults['scale'])
super.$$link("blur_sigma", opts['blur_sigma']??tmp["SelfAttentionGuidance"].defaults['blur_sigma'])
}

        static defaults = {
    'scale':  0.5,
'blur_sigma':  2
}
        protected override $$type(){
            return "SelfAttentionGuidance"
        }
},

    /**
     * Perp-Neg (DEPRECATED by PerpNegGuider) from _for_testing
     * @desc 
    */
    "PerpNeg" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'empty_conditioning'(value : CONDITIONING)  { super.$$link(1, value) } 
//set 'neg_scale'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.empty_conditioning
		 * @param opts.neg_scale default: 1 step: 0.01}
        */
        constructor(opts:{
            'model': MODEL,'empty_conditioning': CONDITIONING,'neg_scale'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("empty_conditioning", opts['empty_conditioning'])
super.$$link("neg_scale", opts['neg_scale']??tmp["PerpNeg"].defaults['neg_scale'])
}

        static defaults = {
    'neg_scale':  1
}
        protected override $$type(){
            return "PerpNeg"
        }
},

    /**
     * PerpNegGuider from _for_testing
     * @desc 
    */
    "PerpNegGuider" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(1, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(2, value) } 
//set 'empty_conditioning'(value : CONDITIONING)  { super.$$link(3, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(4, value) } 
//set 'neg_scale'(value : FLOAT)  { super.$$link(5, value) } 

        //Getters
        get 'GUIDER'() : GUIDER { return [this.$uid.toString(), 0]  as unknown as GUIDER; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.empty_conditioning
		 * @param opts.cfg default: 8 step: 0.1
		 * @param opts.neg_scale default: 1 step: 0.01}
        */
        constructor(opts:{
            'model': MODEL,'positive': CONDITIONING,'negative': CONDITIONING,'empty_conditioning': CONDITIONING,'cfg'?: FLOAT,'neg_scale'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("empty_conditioning", opts['empty_conditioning'])
super.$$link("cfg", opts['cfg']??tmp["PerpNegGuider"].defaults['cfg'])
super.$$link("neg_scale", opts['neg_scale']??tmp["PerpNegGuider"].defaults['neg_scale'])
}

        static defaults = {
    'cfg':  8,
'neg_scale':  1
}
        protected override $$type(){
            return "PerpNegGuider"
        }
},

    /**
     * StableZero123_Conditioning from conditioning/3d_models
     * @desc 
    */
    "StableZero123_Conditioning" : class extends Node{
        //Setters
        //set 'clip_vision'(value : CLIP_VISION)  { super.$$link(0, value) } 
//set 'init_image'(value : IMAGE)  { super.$$link(1, value) } 
//set 'vae'(value : VAE)  { super.$$link(2, value) } 
//set 'width'(value : INT)  { super.$$link(3, value) } 
//set 'height'(value : INT)  { super.$$link(4, value) } 
//set 'batch_size'(value : INT)  { super.$$link(5, value) } 
//set 'elevation'(value : FLOAT)  { super.$$link(6, value) } 
//set 'azimuth'(value : FLOAT)  { super.$$link(7, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this.$uid.toString(), 1]  as unknown as CONDITIONING; }
get 'latent'() : LATENT { return [this.$uid.toString(), 2]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.clip_vision
		 * @param opts.init_image
		 * @param opts.vae
		 * @param opts.width default: 256 max: 16384 min: 16 step: 8
		 * @param opts.height default: 256 max: 16384 min: 16 step: 8
		 * @param opts.batch_size default: 1 max: 4096 min: 1
		 * @param opts.elevation max: 180 min: -180 step: 0.1
		 * @param opts.azimuth max: 180 min: -180 step: 0.1}
        */
        constructor(opts:{
            'clip_vision': CLIP_VISION,'init_image': IMAGE,'vae': VAE,'width'?: INT,'height'?: INT,'batch_size'?: INT,'elevation'?: FLOAT,'azimuth'?: FLOAT
        }){
            super(ctx);

            super.$$link("clip_vision", opts['clip_vision'])
super.$$link("init_image", opts['init_image'])
super.$$link("vae", opts['vae'])
super.$$link("width", opts['width']??tmp["StableZero123_Conditioning"].defaults['width'])
super.$$link("height", opts['height']??tmp["StableZero123_Conditioning"].defaults['height'])
super.$$link("batch_size", opts['batch_size']??tmp["StableZero123_Conditioning"].defaults['batch_size'])
super.$$link("elevation", opts['elevation']??tmp["StableZero123_Conditioning"].defaults['elevation'])
super.$$link("azimuth", opts['azimuth']??tmp["StableZero123_Conditioning"].defaults['azimuth'])
}

        static defaults = {
    'width':  256,
'height':  256,
'batch_size':  1,
'elevation':  0,
'azimuth':  0
}
        protected override $$type(){
            return "StableZero123_Conditioning"
        }
},

    /**
     * StableZero123_Conditioning_Batched from conditioning/3d_models
     * @desc 
    */
    "StableZero123_Conditioning_Batched" : class extends Node{
        //Setters
        //set 'clip_vision'(value : CLIP_VISION)  { super.$$link(0, value) } 
//set 'init_image'(value : IMAGE)  { super.$$link(1, value) } 
//set 'vae'(value : VAE)  { super.$$link(2, value) } 
//set 'width'(value : INT)  { super.$$link(3, value) } 
//set 'height'(value : INT)  { super.$$link(4, value) } 
//set 'batch_size'(value : INT)  { super.$$link(5, value) } 
//set 'elevation'(value : FLOAT)  { super.$$link(6, value) } 
//set 'azimuth'(value : FLOAT)  { super.$$link(7, value) } 
//set 'elevation_batch_increment'(value : FLOAT)  { super.$$link(8, value) } 
//set 'azimuth_batch_increment'(value : FLOAT)  { super.$$link(9, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this.$uid.toString(), 1]  as unknown as CONDITIONING; }
get 'latent'() : LATENT { return [this.$uid.toString(), 2]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.clip_vision
		 * @param opts.init_image
		 * @param opts.vae
		 * @param opts.width default: 256 max: 16384 min: 16 step: 8
		 * @param opts.height default: 256 max: 16384 min: 16 step: 8
		 * @param opts.batch_size default: 1 max: 4096 min: 1
		 * @param opts.elevation max: 180 min: -180 step: 0.1
		 * @param opts.azimuth max: 180 min: -180 step: 0.1
		 * @param opts.elevation_batch_increment max: 180 min: -180 step: 0.1
		 * @param opts.azimuth_batch_increment max: 180 min: -180 step: 0.1}
        */
        constructor(opts:{
            'clip_vision': CLIP_VISION,'init_image': IMAGE,'vae': VAE,'width'?: INT,'height'?: INT,'batch_size'?: INT,'elevation'?: FLOAT,'azimuth'?: FLOAT,'elevation_batch_increment'?: FLOAT,'azimuth_batch_increment'?: FLOAT
        }){
            super(ctx);

            super.$$link("clip_vision", opts['clip_vision'])
super.$$link("init_image", opts['init_image'])
super.$$link("vae", opts['vae'])
super.$$link("width", opts['width']??tmp["StableZero123_Conditioning_Batched"].defaults['width'])
super.$$link("height", opts['height']??tmp["StableZero123_Conditioning_Batched"].defaults['height'])
super.$$link("batch_size", opts['batch_size']??tmp["StableZero123_Conditioning_Batched"].defaults['batch_size'])
super.$$link("elevation", opts['elevation']??tmp["StableZero123_Conditioning_Batched"].defaults['elevation'])
super.$$link("azimuth", opts['azimuth']??tmp["StableZero123_Conditioning_Batched"].defaults['azimuth'])
super.$$link("elevation_batch_increment", opts['elevation_batch_increment']??tmp["StableZero123_Conditioning_Batched"].defaults['elevation_batch_increment'])
super.$$link("azimuth_batch_increment", opts['azimuth_batch_increment']??tmp["StableZero123_Conditioning_Batched"].defaults['azimuth_batch_increment'])
}

        static defaults = {
    'width':  256,
'height':  256,
'batch_size':  1,
'elevation':  0,
'azimuth':  0,
'elevation_batch_increment':  0,
'azimuth_batch_increment':  0
}
        protected override $$type(){
            return "StableZero123_Conditioning_Batched"
        }
},

    /**
     * SV3D_Conditioning from conditioning/3d_models
     * @desc 
    */
    "SV3D_Conditioning" : class extends Node{
        //Setters
        //set 'clip_vision'(value : CLIP_VISION)  { super.$$link(0, value) } 
//set 'init_image'(value : IMAGE)  { super.$$link(1, value) } 
//set 'vae'(value : VAE)  { super.$$link(2, value) } 
//set 'width'(value : INT)  { super.$$link(3, value) } 
//set 'height'(value : INT)  { super.$$link(4, value) } 
//set 'video_frames'(value : INT)  { super.$$link(5, value) } 
//set 'elevation'(value : FLOAT)  { super.$$link(6, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this.$uid.toString(), 1]  as unknown as CONDITIONING; }
get 'latent'() : LATENT { return [this.$uid.toString(), 2]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.clip_vision
		 * @param opts.init_image
		 * @param opts.vae
		 * @param opts.width default: 576 max: 16384 min: 16 step: 8
		 * @param opts.height default: 576 max: 16384 min: 16 step: 8
		 * @param opts.video_frames default: 21 max: 4096 min: 1
		 * @param opts.elevation max: 90 min: -90 step: 0.1}
        */
        constructor(opts:{
            'clip_vision': CLIP_VISION,'init_image': IMAGE,'vae': VAE,'width'?: INT,'height'?: INT,'video_frames'?: INT,'elevation'?: FLOAT
        }){
            super(ctx);

            super.$$link("clip_vision", opts['clip_vision'])
super.$$link("init_image", opts['init_image'])
super.$$link("vae", opts['vae'])
super.$$link("width", opts['width']??tmp["SV3D_Conditioning"].defaults['width'])
super.$$link("height", opts['height']??tmp["SV3D_Conditioning"].defaults['height'])
super.$$link("video_frames", opts['video_frames']??tmp["SV3D_Conditioning"].defaults['video_frames'])
super.$$link("elevation", opts['elevation']??tmp["SV3D_Conditioning"].defaults['elevation'])
}

        static defaults = {
    'width':  576,
'height':  576,
'video_frames':  21,
'elevation':  0
}
        protected override $$type(){
            return "SV3D_Conditioning"
        }
},

    /**
     * SD_4XUpscale_Conditioning from conditioning/upscale_diffusion
     * @desc 
    */
    "SD_4XUpscale_Conditioning" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(1, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(2, value) } 
//set 'scale_ratio'(value : FLOAT)  { super.$$link(3, value) } 
//set 'noise_augmentation'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this.$uid.toString(), 1]  as unknown as CONDITIONING; }
get 'latent'() : LATENT { return [this.$uid.toString(), 2]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.scale_ratio default: 4 step: 0.01
		 * @param opts.noise_augmentation step: 0.001}
        */
        constructor(opts:{
            'images': IMAGE,'positive': CONDITIONING,'negative': CONDITIONING,'scale_ratio'?: FLOAT,'noise_augmentation'?: FLOAT
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("scale_ratio", opts['scale_ratio']??tmp["SD_4XUpscale_Conditioning"].defaults['scale_ratio'])
super.$$link("noise_augmentation", opts['noise_augmentation']??tmp["SD_4XUpscale_Conditioning"].defaults['noise_augmentation'])
}

        static defaults = {
    'scale_ratio':  4,
'noise_augmentation':  0
}
        protected override $$type(){
            return "SD_4XUpscale_Conditioning"
        }
},

    /**
     * PhotoMakerLoader from _for_testing/photomaker
     * @desc 
    */
    "PhotoMakerLoader" : class extends Node{
        //Setters
        //set 'photomaker_model_name'(value : void)  { super.$$link(0, value) } 

        //Getters
        get 'PHOTOMAKER'() : PHOTOMAKER { return [this.$uid.toString(), 0]  as unknown as PHOTOMAKER; }

        /**
          * Constructor
		 * @param opts.photomaker_model_name}
        */
        constructor(opts:{
            'photomaker_model_name': void
        }){
            super(ctx);

            super.$$link("photomaker_model_name", opts['photomaker_model_name'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "PhotoMakerLoader"
        }
},

    /**
     * PhotoMakerEncode from _for_testing/photomaker
     * @desc 
    */
    "PhotoMakerEncode" : class extends Node{
        //Setters
        //set 'photomaker'(value : PHOTOMAKER)  { super.$$link(0, value) } 
//set 'image'(value : IMAGE)  { super.$$link(1, value) } 
//set 'clip'(value : CLIP)  { super.$$link(2, value) } 
//set 'text'(value : STRING)  { super.$$link(3, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.photomaker
		 * @param opts.image
		 * @param opts.clip
		 * @param opts.text default: "photograph of photomaker"}
        */
        constructor(opts:{
            'photomaker': PHOTOMAKER,'image': IMAGE,'clip': CLIP,'text'?: STRING
        }){
            super(ctx);

            super.$$link("photomaker", opts['photomaker'])
super.$$link("image", opts['image'])
super.$$link("clip", opts['clip'])
super.$$link("text", opts['text']??tmp["PhotoMakerEncode"].defaults['text'])
}

        static defaults = {
    'text':  "photograph of photomaker"
}
        protected override $$type(){
            return "PhotoMakerEncode"
        }
},

    /**
     * CLIPTextEncodeControlnet from _for_testing/conditioning
     * @desc 
    */
    "CLIPTextEncodeControlnet" : class extends Node{
        //Setters
        //set 'clip'(value : CLIP)  { super.$$link(0, value) } 
//set 'conditioning'(value : CONDITIONING)  { super.$$link(1, value) } 
//set 'text'(value : STRING)  { super.$$link(2, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.clip
		 * @param opts.conditioning
		 * @param opts.text}
        */
        constructor(opts:{
            'clip': CLIP,'conditioning': CONDITIONING,'text': STRING
        }){
            super(ctx);

            super.$$link("clip", opts['clip'])
super.$$link("conditioning", opts['conditioning'])
super.$$link("text", opts['text'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "CLIPTextEncodeControlnet"
        }
},

    /**
     * ImageMorphology from image/postprocessing
     * @desc 
    */
    "Morphology" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'operation'(value : 'erode'|'dilate'|'open'|'close'|'gradient'|'bottom_hat'|'top_hat'| $dyn)  { super.$$link(1, value) } 
//set 'kernel_size'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.operation
		 * @param opts.kernel_size default: 3 max: 999 min: 3 step: 1}
        */
        constructor(opts:{
            'image': IMAGE,'operation': 'erode'|'dilate'|'open'|'close'|'gradient'|'bottom_hat'|'top_hat'| $dyn,'kernel_size'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("operation", opts['operation'])
super.$$link("kernel_size", opts['kernel_size']??tmp["Morphology"].defaults['kernel_size'])
}

        static defaults = {
    'kernel_size':  3
}
        protected override $$type(){
            return "Morphology"
        }
},

    /**
     * StableCascade_EmptyLatentImage from latent/stable_cascade
     * @desc 
    */
    "StableCascade_EmptyLatentImage" : class extends Node{
        //Setters
        //set 'width'(value : INT)  { super.$$link(0, value) } 
//set 'height'(value : INT)  { super.$$link(1, value) } 
//set 'compression'(value : INT)  { super.$$link(2, value) } 
//set 'batch_size'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'stage_c'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }
get 'stage_b'() : LATENT { return [this.$uid.toString(), 1]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.width default: 1024 max: 16384 min: 256 step: 8
		 * @param opts.height default: 1024 max: 16384 min: 256 step: 8
		 * @param opts.compression default: 42 max: 128 min: 4 step: 1
		 * @param opts.batch_size default: 1 max: 4096 min: 1}
        */
        constructor(opts:{
            'width'?: INT,'height'?: INT,'compression'?: INT,'batch_size'?: INT
        }){
            super(ctx);

            super.$$link("width", opts['width']??tmp["StableCascade_EmptyLatentImage"].defaults['width'])
super.$$link("height", opts['height']??tmp["StableCascade_EmptyLatentImage"].defaults['height'])
super.$$link("compression", opts['compression']??tmp["StableCascade_EmptyLatentImage"].defaults['compression'])
super.$$link("batch_size", opts['batch_size']??tmp["StableCascade_EmptyLatentImage"].defaults['batch_size'])
}

        static defaults = {
    'width':  1024,
'height':  1024,
'compression':  42,
'batch_size':  1
}
        protected override $$type(){
            return "StableCascade_EmptyLatentImage"
        }
},

    /**
     * StableCascade_StageB_Conditioning from conditioning/stable_cascade
     * @desc 
    */
    "StableCascade_StageB_Conditioning" : class extends Node{
        //Setters
        //set 'conditioning'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'stage_c'(value : LATENT)  { super.$$link(1, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.conditioning
		 * @param opts.stage_c}
        */
        constructor(opts:{
            'conditioning': CONDITIONING,'stage_c': LATENT
        }){
            super(ctx);

            super.$$link("conditioning", opts['conditioning'])
super.$$link("stage_c", opts['stage_c'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "StableCascade_StageB_Conditioning"
        }
},

    /**
     * StableCascade_StageC_VAEEncode from latent/stable_cascade
     * @desc 
    */
    "StableCascade_StageC_VAEEncode" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'vae'(value : VAE)  { super.$$link(1, value) } 
//set 'compression'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'stage_c'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }
get 'stage_b'() : LATENT { return [this.$uid.toString(), 1]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.vae
		 * @param opts.compression default: 42 max: 128 min: 4 step: 1}
        */
        constructor(opts:{
            'image': IMAGE,'vae': VAE,'compression'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("vae", opts['vae'])
super.$$link("compression", opts['compression']??tmp["StableCascade_StageC_VAEEncode"].defaults['compression'])
}

        static defaults = {
    'compression':  42
}
        protected override $$type(){
            return "StableCascade_StageC_VAEEncode"
        }
},

    /**
     * StableCascade_SuperResolutionControlnet from _for_testing/stable_cascade
     * @desc 
    */
    "StableCascade_SuperResolutionControlnet" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'vae'(value : VAE)  { super.$$link(1, value) } 

        //Getters
        get 'controlnet_input'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'stage_c'() : LATENT { return [this.$uid.toString(), 1]  as unknown as LATENT; }
get 'stage_b'() : LATENT { return [this.$uid.toString(), 2]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.vae}
        */
        constructor(opts:{
            'image': IMAGE,'vae': VAE
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("vae", opts['vae'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "StableCascade_SuperResolutionControlnet"
        }
},

    /**
     * Differential Diffusion from _for_testing
     * @desc 
    */
    "DifferentialDiffusion" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model}
        */
        constructor(opts:{
            'model': MODEL
        }){
            super(ctx);

            super.$$link("model", opts['model'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "DifferentialDiffusion"
        }
},

    /**
     * InstructPixToPixConditioning from conditioning/instructpix2pix
     * @desc 
    */
    "InstructPixToPixConditioning" : class extends Node{
        //Setters
        //set 'positive'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(1, value) } 
//set 'vae'(value : VAE)  { super.$$link(2, value) } 
//set 'pixels'(value : IMAGE)  { super.$$link(3, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this.$uid.toString(), 1]  as unknown as CONDITIONING; }
get 'latent'() : LATENT { return [this.$uid.toString(), 2]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.vae
		 * @param opts.pixels}
        */
        constructor(opts:{
            'positive': CONDITIONING,'negative': CONDITIONING,'vae': VAE,'pixels': IMAGE
        }){
            super(ctx);

            super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("vae", opts['vae'])
super.$$link("pixels", opts['pixels'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "InstructPixToPixConditioning"
        }
},

    /**
     * ModelMergeSD1 from advanced/model_merging/model_specific
     * @desc 
    */
    "ModelMergeSD1" : class extends Node{
        //Setters
        //set 'model1'(value : MODEL)  { super.$$link(0, value) } 
//set 'model2'(value : MODEL)  { super.$$link(1, value) } 
//set 'time_embed.'(value : FLOAT)  { super.$$link(2, value) } 
//set 'label_emb.'(value : FLOAT)  { super.$$link(3, value) } 
//set 'input_blocks.0.'(value : FLOAT)  { super.$$link(4, value) } 
//set 'input_blocks.1.'(value : FLOAT)  { super.$$link(5, value) } 
//set 'input_blocks.2.'(value : FLOAT)  { super.$$link(6, value) } 
//set 'input_blocks.3.'(value : FLOAT)  { super.$$link(7, value) } 
//set 'input_blocks.4.'(value : FLOAT)  { super.$$link(8, value) } 
//set 'input_blocks.5.'(value : FLOAT)  { super.$$link(9, value) } 
//set 'input_blocks.6.'(value : FLOAT)  { super.$$link(10, value) } 
//set 'input_blocks.7.'(value : FLOAT)  { super.$$link(11, value) } 
//set 'input_blocks.8.'(value : FLOAT)  { super.$$link(12, value) } 
//set 'input_blocks.9.'(value : FLOAT)  { super.$$link(13, value) } 
//set 'input_blocks.10.'(value : FLOAT)  { super.$$link(14, value) } 
//set 'input_blocks.11.'(value : FLOAT)  { super.$$link(15, value) } 
//set 'middle_block.0.'(value : FLOAT)  { super.$$link(16, value) } 
//set 'middle_block.1.'(value : FLOAT)  { super.$$link(17, value) } 
//set 'middle_block.2.'(value : FLOAT)  { super.$$link(18, value) } 
//set 'output_blocks.0.'(value : FLOAT)  { super.$$link(19, value) } 
//set 'output_blocks.1.'(value : FLOAT)  { super.$$link(20, value) } 
//set 'output_blocks.2.'(value : FLOAT)  { super.$$link(21, value) } 
//set 'output_blocks.3.'(value : FLOAT)  { super.$$link(22, value) } 
//set 'output_blocks.4.'(value : FLOAT)  { super.$$link(23, value) } 
//set 'output_blocks.5.'(value : FLOAT)  { super.$$link(24, value) } 
//set 'output_blocks.6.'(value : FLOAT)  { super.$$link(25, value) } 
//set 'output_blocks.7.'(value : FLOAT)  { super.$$link(26, value) } 
//set 'output_blocks.8.'(value : FLOAT)  { super.$$link(27, value) } 
//set 'output_blocks.9.'(value : FLOAT)  { super.$$link(28, value) } 
//set 'output_blocks.10.'(value : FLOAT)  { super.$$link(29, value) } 
//set 'output_blocks.11.'(value : FLOAT)  { super.$$link(30, value) } 
//set 'out.'(value : FLOAT)  { super.$$link(31, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model1
		 * @param opts.model2
		 * @param opts.time_embed. default: 1 step: 0.01
		 * @param opts.label_emb. default: 1 step: 0.01
		 * @param opts.input_blocks.0. default: 1 step: 0.01
		 * @param opts.input_blocks.1. default: 1 step: 0.01
		 * @param opts.input_blocks.2. default: 1 step: 0.01
		 * @param opts.input_blocks.3. default: 1 step: 0.01
		 * @param opts.input_blocks.4. default: 1 step: 0.01
		 * @param opts.input_blocks.5. default: 1 step: 0.01
		 * @param opts.input_blocks.6. default: 1 step: 0.01
		 * @param opts.input_blocks.7. default: 1 step: 0.01
		 * @param opts.input_blocks.8. default: 1 step: 0.01
		 * @param opts.input_blocks.9. default: 1 step: 0.01
		 * @param opts.input_blocks.10. default: 1 step: 0.01
		 * @param opts.input_blocks.11. default: 1 step: 0.01
		 * @param opts.middle_block.0. default: 1 step: 0.01
		 * @param opts.middle_block.1. default: 1 step: 0.01
		 * @param opts.middle_block.2. default: 1 step: 0.01
		 * @param opts.output_blocks.0. default: 1 step: 0.01
		 * @param opts.output_blocks.1. default: 1 step: 0.01
		 * @param opts.output_blocks.2. default: 1 step: 0.01
		 * @param opts.output_blocks.3. default: 1 step: 0.01
		 * @param opts.output_blocks.4. default: 1 step: 0.01
		 * @param opts.output_blocks.5. default: 1 step: 0.01
		 * @param opts.output_blocks.6. default: 1 step: 0.01
		 * @param opts.output_blocks.7. default: 1 step: 0.01
		 * @param opts.output_blocks.8. default: 1 step: 0.01
		 * @param opts.output_blocks.9. default: 1 step: 0.01
		 * @param opts.output_blocks.10. default: 1 step: 0.01
		 * @param opts.output_blocks.11. default: 1 step: 0.01
		 * @param opts.out. default: 1 step: 0.01}
        */
        constructor(opts:{
            'model1': MODEL,'model2': MODEL,'time_embed.'?: FLOAT,'label_emb.'?: FLOAT,'input_blocks.0.'?: FLOAT,'input_blocks.1.'?: FLOAT,'input_blocks.2.'?: FLOAT,'input_blocks.3.'?: FLOAT,'input_blocks.4.'?: FLOAT,'input_blocks.5.'?: FLOAT,'input_blocks.6.'?: FLOAT,'input_blocks.7.'?: FLOAT,'input_blocks.8.'?: FLOAT,'input_blocks.9.'?: FLOAT,'input_blocks.10.'?: FLOAT,'input_blocks.11.'?: FLOAT,'middle_block.0.'?: FLOAT,'middle_block.1.'?: FLOAT,'middle_block.2.'?: FLOAT,'output_blocks.0.'?: FLOAT,'output_blocks.1.'?: FLOAT,'output_blocks.2.'?: FLOAT,'output_blocks.3.'?: FLOAT,'output_blocks.4.'?: FLOAT,'output_blocks.5.'?: FLOAT,'output_blocks.6.'?: FLOAT,'output_blocks.7.'?: FLOAT,'output_blocks.8.'?: FLOAT,'output_blocks.9.'?: FLOAT,'output_blocks.10.'?: FLOAT,'output_blocks.11.'?: FLOAT,'out.'?: FLOAT
        }){
            super(ctx);

            super.$$link("model1", opts['model1'])
super.$$link("model2", opts['model2'])
super.$$link("time_embed.", opts['time_embed.']??tmp["ModelMergeSD1"].defaults['time_embed.'])
super.$$link("label_emb.", opts['label_emb.']??tmp["ModelMergeSD1"].defaults['label_emb.'])
super.$$link("input_blocks.0.", opts['input_blocks.0.']??tmp["ModelMergeSD1"].defaults['input_blocks.0.'])
super.$$link("input_blocks.1.", opts['input_blocks.1.']??tmp["ModelMergeSD1"].defaults['input_blocks.1.'])
super.$$link("input_blocks.2.", opts['input_blocks.2.']??tmp["ModelMergeSD1"].defaults['input_blocks.2.'])
super.$$link("input_blocks.3.", opts['input_blocks.3.']??tmp["ModelMergeSD1"].defaults['input_blocks.3.'])
super.$$link("input_blocks.4.", opts['input_blocks.4.']??tmp["ModelMergeSD1"].defaults['input_blocks.4.'])
super.$$link("input_blocks.5.", opts['input_blocks.5.']??tmp["ModelMergeSD1"].defaults['input_blocks.5.'])
super.$$link("input_blocks.6.", opts['input_blocks.6.']??tmp["ModelMergeSD1"].defaults['input_blocks.6.'])
super.$$link("input_blocks.7.", opts['input_blocks.7.']??tmp["ModelMergeSD1"].defaults['input_blocks.7.'])
super.$$link("input_blocks.8.", opts['input_blocks.8.']??tmp["ModelMergeSD1"].defaults['input_blocks.8.'])
super.$$link("input_blocks.9.", opts['input_blocks.9.']??tmp["ModelMergeSD1"].defaults['input_blocks.9.'])
super.$$link("input_blocks.10.", opts['input_blocks.10.']??tmp["ModelMergeSD1"].defaults['input_blocks.10.'])
super.$$link("input_blocks.11.", opts['input_blocks.11.']??tmp["ModelMergeSD1"].defaults['input_blocks.11.'])
super.$$link("middle_block.0.", opts['middle_block.0.']??tmp["ModelMergeSD1"].defaults['middle_block.0.'])
super.$$link("middle_block.1.", opts['middle_block.1.']??tmp["ModelMergeSD1"].defaults['middle_block.1.'])
super.$$link("middle_block.2.", opts['middle_block.2.']??tmp["ModelMergeSD1"].defaults['middle_block.2.'])
super.$$link("output_blocks.0.", opts['output_blocks.0.']??tmp["ModelMergeSD1"].defaults['output_blocks.0.'])
super.$$link("output_blocks.1.", opts['output_blocks.1.']??tmp["ModelMergeSD1"].defaults['output_blocks.1.'])
super.$$link("output_blocks.2.", opts['output_blocks.2.']??tmp["ModelMergeSD1"].defaults['output_blocks.2.'])
super.$$link("output_blocks.3.", opts['output_blocks.3.']??tmp["ModelMergeSD1"].defaults['output_blocks.3.'])
super.$$link("output_blocks.4.", opts['output_blocks.4.']??tmp["ModelMergeSD1"].defaults['output_blocks.4.'])
super.$$link("output_blocks.5.", opts['output_blocks.5.']??tmp["ModelMergeSD1"].defaults['output_blocks.5.'])
super.$$link("output_blocks.6.", opts['output_blocks.6.']??tmp["ModelMergeSD1"].defaults['output_blocks.6.'])
super.$$link("output_blocks.7.", opts['output_blocks.7.']??tmp["ModelMergeSD1"].defaults['output_blocks.7.'])
super.$$link("output_blocks.8.", opts['output_blocks.8.']??tmp["ModelMergeSD1"].defaults['output_blocks.8.'])
super.$$link("output_blocks.9.", opts['output_blocks.9.']??tmp["ModelMergeSD1"].defaults['output_blocks.9.'])
super.$$link("output_blocks.10.", opts['output_blocks.10.']??tmp["ModelMergeSD1"].defaults['output_blocks.10.'])
super.$$link("output_blocks.11.", opts['output_blocks.11.']??tmp["ModelMergeSD1"].defaults['output_blocks.11.'])
super.$$link("out.", opts['out.']??tmp["ModelMergeSD1"].defaults['out.'])
}

        static defaults = {
    'time_embed.':  1,
'label_emb.':  1,
'input_blocks.0.':  1,
'input_blocks.1.':  1,
'input_blocks.2.':  1,
'input_blocks.3.':  1,
'input_blocks.4.':  1,
'input_blocks.5.':  1,
'input_blocks.6.':  1,
'input_blocks.7.':  1,
'input_blocks.8.':  1,
'input_blocks.9.':  1,
'input_blocks.10.':  1,
'input_blocks.11.':  1,
'middle_block.0.':  1,
'middle_block.1.':  1,
'middle_block.2.':  1,
'output_blocks.0.':  1,
'output_blocks.1.':  1,
'output_blocks.2.':  1,
'output_blocks.3.':  1,
'output_blocks.4.':  1,
'output_blocks.5.':  1,
'output_blocks.6.':  1,
'output_blocks.7.':  1,
'output_blocks.8.':  1,
'output_blocks.9.':  1,
'output_blocks.10.':  1,
'output_blocks.11.':  1,
'out.':  1
}
        protected override $$type(){
            return "ModelMergeSD1"
        }
},

    /**
     * ModelMergeSD2 from advanced/model_merging/model_specific
     * @desc 
    */
    "ModelMergeSD2" : class extends Node{
        //Setters
        //set 'model1'(value : MODEL)  { super.$$link(0, value) } 
//set 'model2'(value : MODEL)  { super.$$link(1, value) } 
//set 'time_embed.'(value : FLOAT)  { super.$$link(2, value) } 
//set 'label_emb.'(value : FLOAT)  { super.$$link(3, value) } 
//set 'input_blocks.0.'(value : FLOAT)  { super.$$link(4, value) } 
//set 'input_blocks.1.'(value : FLOAT)  { super.$$link(5, value) } 
//set 'input_blocks.2.'(value : FLOAT)  { super.$$link(6, value) } 
//set 'input_blocks.3.'(value : FLOAT)  { super.$$link(7, value) } 
//set 'input_blocks.4.'(value : FLOAT)  { super.$$link(8, value) } 
//set 'input_blocks.5.'(value : FLOAT)  { super.$$link(9, value) } 
//set 'input_blocks.6.'(value : FLOAT)  { super.$$link(10, value) } 
//set 'input_blocks.7.'(value : FLOAT)  { super.$$link(11, value) } 
//set 'input_blocks.8.'(value : FLOAT)  { super.$$link(12, value) } 
//set 'input_blocks.9.'(value : FLOAT)  { super.$$link(13, value) } 
//set 'input_blocks.10.'(value : FLOAT)  { super.$$link(14, value) } 
//set 'input_blocks.11.'(value : FLOAT)  { super.$$link(15, value) } 
//set 'middle_block.0.'(value : FLOAT)  { super.$$link(16, value) } 
//set 'middle_block.1.'(value : FLOAT)  { super.$$link(17, value) } 
//set 'middle_block.2.'(value : FLOAT)  { super.$$link(18, value) } 
//set 'output_blocks.0.'(value : FLOAT)  { super.$$link(19, value) } 
//set 'output_blocks.1.'(value : FLOAT)  { super.$$link(20, value) } 
//set 'output_blocks.2.'(value : FLOAT)  { super.$$link(21, value) } 
//set 'output_blocks.3.'(value : FLOAT)  { super.$$link(22, value) } 
//set 'output_blocks.4.'(value : FLOAT)  { super.$$link(23, value) } 
//set 'output_blocks.5.'(value : FLOAT)  { super.$$link(24, value) } 
//set 'output_blocks.6.'(value : FLOAT)  { super.$$link(25, value) } 
//set 'output_blocks.7.'(value : FLOAT)  { super.$$link(26, value) } 
//set 'output_blocks.8.'(value : FLOAT)  { super.$$link(27, value) } 
//set 'output_blocks.9.'(value : FLOAT)  { super.$$link(28, value) } 
//set 'output_blocks.10.'(value : FLOAT)  { super.$$link(29, value) } 
//set 'output_blocks.11.'(value : FLOAT)  { super.$$link(30, value) } 
//set 'out.'(value : FLOAT)  { super.$$link(31, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model1
		 * @param opts.model2
		 * @param opts.time_embed. default: 1 step: 0.01
		 * @param opts.label_emb. default: 1 step: 0.01
		 * @param opts.input_blocks.0. default: 1 step: 0.01
		 * @param opts.input_blocks.1. default: 1 step: 0.01
		 * @param opts.input_blocks.2. default: 1 step: 0.01
		 * @param opts.input_blocks.3. default: 1 step: 0.01
		 * @param opts.input_blocks.4. default: 1 step: 0.01
		 * @param opts.input_blocks.5. default: 1 step: 0.01
		 * @param opts.input_blocks.6. default: 1 step: 0.01
		 * @param opts.input_blocks.7. default: 1 step: 0.01
		 * @param opts.input_blocks.8. default: 1 step: 0.01
		 * @param opts.input_blocks.9. default: 1 step: 0.01
		 * @param opts.input_blocks.10. default: 1 step: 0.01
		 * @param opts.input_blocks.11. default: 1 step: 0.01
		 * @param opts.middle_block.0. default: 1 step: 0.01
		 * @param opts.middle_block.1. default: 1 step: 0.01
		 * @param opts.middle_block.2. default: 1 step: 0.01
		 * @param opts.output_blocks.0. default: 1 step: 0.01
		 * @param opts.output_blocks.1. default: 1 step: 0.01
		 * @param opts.output_blocks.2. default: 1 step: 0.01
		 * @param opts.output_blocks.3. default: 1 step: 0.01
		 * @param opts.output_blocks.4. default: 1 step: 0.01
		 * @param opts.output_blocks.5. default: 1 step: 0.01
		 * @param opts.output_blocks.6. default: 1 step: 0.01
		 * @param opts.output_blocks.7. default: 1 step: 0.01
		 * @param opts.output_blocks.8. default: 1 step: 0.01
		 * @param opts.output_blocks.9. default: 1 step: 0.01
		 * @param opts.output_blocks.10. default: 1 step: 0.01
		 * @param opts.output_blocks.11. default: 1 step: 0.01
		 * @param opts.out. default: 1 step: 0.01}
        */
        constructor(opts:{
            'model1': MODEL,'model2': MODEL,'time_embed.'?: FLOAT,'label_emb.'?: FLOAT,'input_blocks.0.'?: FLOAT,'input_blocks.1.'?: FLOAT,'input_blocks.2.'?: FLOAT,'input_blocks.3.'?: FLOAT,'input_blocks.4.'?: FLOAT,'input_blocks.5.'?: FLOAT,'input_blocks.6.'?: FLOAT,'input_blocks.7.'?: FLOAT,'input_blocks.8.'?: FLOAT,'input_blocks.9.'?: FLOAT,'input_blocks.10.'?: FLOAT,'input_blocks.11.'?: FLOAT,'middle_block.0.'?: FLOAT,'middle_block.1.'?: FLOAT,'middle_block.2.'?: FLOAT,'output_blocks.0.'?: FLOAT,'output_blocks.1.'?: FLOAT,'output_blocks.2.'?: FLOAT,'output_blocks.3.'?: FLOAT,'output_blocks.4.'?: FLOAT,'output_blocks.5.'?: FLOAT,'output_blocks.6.'?: FLOAT,'output_blocks.7.'?: FLOAT,'output_blocks.8.'?: FLOAT,'output_blocks.9.'?: FLOAT,'output_blocks.10.'?: FLOAT,'output_blocks.11.'?: FLOAT,'out.'?: FLOAT
        }){
            super(ctx);

            super.$$link("model1", opts['model1'])
super.$$link("model2", opts['model2'])
super.$$link("time_embed.", opts['time_embed.']??tmp["ModelMergeSD2"].defaults['time_embed.'])
super.$$link("label_emb.", opts['label_emb.']??tmp["ModelMergeSD2"].defaults['label_emb.'])
super.$$link("input_blocks.0.", opts['input_blocks.0.']??tmp["ModelMergeSD2"].defaults['input_blocks.0.'])
super.$$link("input_blocks.1.", opts['input_blocks.1.']??tmp["ModelMergeSD2"].defaults['input_blocks.1.'])
super.$$link("input_blocks.2.", opts['input_blocks.2.']??tmp["ModelMergeSD2"].defaults['input_blocks.2.'])
super.$$link("input_blocks.3.", opts['input_blocks.3.']??tmp["ModelMergeSD2"].defaults['input_blocks.3.'])
super.$$link("input_blocks.4.", opts['input_blocks.4.']??tmp["ModelMergeSD2"].defaults['input_blocks.4.'])
super.$$link("input_blocks.5.", opts['input_blocks.5.']??tmp["ModelMergeSD2"].defaults['input_blocks.5.'])
super.$$link("input_blocks.6.", opts['input_blocks.6.']??tmp["ModelMergeSD2"].defaults['input_blocks.6.'])
super.$$link("input_blocks.7.", opts['input_blocks.7.']??tmp["ModelMergeSD2"].defaults['input_blocks.7.'])
super.$$link("input_blocks.8.", opts['input_blocks.8.']??tmp["ModelMergeSD2"].defaults['input_blocks.8.'])
super.$$link("input_blocks.9.", opts['input_blocks.9.']??tmp["ModelMergeSD2"].defaults['input_blocks.9.'])
super.$$link("input_blocks.10.", opts['input_blocks.10.']??tmp["ModelMergeSD2"].defaults['input_blocks.10.'])
super.$$link("input_blocks.11.", opts['input_blocks.11.']??tmp["ModelMergeSD2"].defaults['input_blocks.11.'])
super.$$link("middle_block.0.", opts['middle_block.0.']??tmp["ModelMergeSD2"].defaults['middle_block.0.'])
super.$$link("middle_block.1.", opts['middle_block.1.']??tmp["ModelMergeSD2"].defaults['middle_block.1.'])
super.$$link("middle_block.2.", opts['middle_block.2.']??tmp["ModelMergeSD2"].defaults['middle_block.2.'])
super.$$link("output_blocks.0.", opts['output_blocks.0.']??tmp["ModelMergeSD2"].defaults['output_blocks.0.'])
super.$$link("output_blocks.1.", opts['output_blocks.1.']??tmp["ModelMergeSD2"].defaults['output_blocks.1.'])
super.$$link("output_blocks.2.", opts['output_blocks.2.']??tmp["ModelMergeSD2"].defaults['output_blocks.2.'])
super.$$link("output_blocks.3.", opts['output_blocks.3.']??tmp["ModelMergeSD2"].defaults['output_blocks.3.'])
super.$$link("output_blocks.4.", opts['output_blocks.4.']??tmp["ModelMergeSD2"].defaults['output_blocks.4.'])
super.$$link("output_blocks.5.", opts['output_blocks.5.']??tmp["ModelMergeSD2"].defaults['output_blocks.5.'])
super.$$link("output_blocks.6.", opts['output_blocks.6.']??tmp["ModelMergeSD2"].defaults['output_blocks.6.'])
super.$$link("output_blocks.7.", opts['output_blocks.7.']??tmp["ModelMergeSD2"].defaults['output_blocks.7.'])
super.$$link("output_blocks.8.", opts['output_blocks.8.']??tmp["ModelMergeSD2"].defaults['output_blocks.8.'])
super.$$link("output_blocks.9.", opts['output_blocks.9.']??tmp["ModelMergeSD2"].defaults['output_blocks.9.'])
super.$$link("output_blocks.10.", opts['output_blocks.10.']??tmp["ModelMergeSD2"].defaults['output_blocks.10.'])
super.$$link("output_blocks.11.", opts['output_blocks.11.']??tmp["ModelMergeSD2"].defaults['output_blocks.11.'])
super.$$link("out.", opts['out.']??tmp["ModelMergeSD2"].defaults['out.'])
}

        static defaults = {
    'time_embed.':  1,
'label_emb.':  1,
'input_blocks.0.':  1,
'input_blocks.1.':  1,
'input_blocks.2.':  1,
'input_blocks.3.':  1,
'input_blocks.4.':  1,
'input_blocks.5.':  1,
'input_blocks.6.':  1,
'input_blocks.7.':  1,
'input_blocks.8.':  1,
'input_blocks.9.':  1,
'input_blocks.10.':  1,
'input_blocks.11.':  1,
'middle_block.0.':  1,
'middle_block.1.':  1,
'middle_block.2.':  1,
'output_blocks.0.':  1,
'output_blocks.1.':  1,
'output_blocks.2.':  1,
'output_blocks.3.':  1,
'output_blocks.4.':  1,
'output_blocks.5.':  1,
'output_blocks.6.':  1,
'output_blocks.7.':  1,
'output_blocks.8.':  1,
'output_blocks.9.':  1,
'output_blocks.10.':  1,
'output_blocks.11.':  1,
'out.':  1
}
        protected override $$type(){
            return "ModelMergeSD2"
        }
},

    /**
     * ModelMergeSDXL from advanced/model_merging/model_specific
     * @desc 
    */
    "ModelMergeSDXL" : class extends Node{
        //Setters
        //set 'model1'(value : MODEL)  { super.$$link(0, value) } 
//set 'model2'(value : MODEL)  { super.$$link(1, value) } 
//set 'time_embed.'(value : FLOAT)  { super.$$link(2, value) } 
//set 'label_emb.'(value : FLOAT)  { super.$$link(3, value) } 
//set 'input_blocks.0'(value : FLOAT)  { super.$$link(4, value) } 
//set 'input_blocks.1'(value : FLOAT)  { super.$$link(5, value) } 
//set 'input_blocks.2'(value : FLOAT)  { super.$$link(6, value) } 
//set 'input_blocks.3'(value : FLOAT)  { super.$$link(7, value) } 
//set 'input_blocks.4'(value : FLOAT)  { super.$$link(8, value) } 
//set 'input_blocks.5'(value : FLOAT)  { super.$$link(9, value) } 
//set 'input_blocks.6'(value : FLOAT)  { super.$$link(10, value) } 
//set 'input_blocks.7'(value : FLOAT)  { super.$$link(11, value) } 
//set 'input_blocks.8'(value : FLOAT)  { super.$$link(12, value) } 
//set 'middle_block.0'(value : FLOAT)  { super.$$link(13, value) } 
//set 'middle_block.1'(value : FLOAT)  { super.$$link(14, value) } 
//set 'middle_block.2'(value : FLOAT)  { super.$$link(15, value) } 
//set 'output_blocks.0'(value : FLOAT)  { super.$$link(16, value) } 
//set 'output_blocks.1'(value : FLOAT)  { super.$$link(17, value) } 
//set 'output_blocks.2'(value : FLOAT)  { super.$$link(18, value) } 
//set 'output_blocks.3'(value : FLOAT)  { super.$$link(19, value) } 
//set 'output_blocks.4'(value : FLOAT)  { super.$$link(20, value) } 
//set 'output_blocks.5'(value : FLOAT)  { super.$$link(21, value) } 
//set 'output_blocks.6'(value : FLOAT)  { super.$$link(22, value) } 
//set 'output_blocks.7'(value : FLOAT)  { super.$$link(23, value) } 
//set 'output_blocks.8'(value : FLOAT)  { super.$$link(24, value) } 
//set 'out.'(value : FLOAT)  { super.$$link(25, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model1
		 * @param opts.model2
		 * @param opts.time_embed. default: 1 step: 0.01
		 * @param opts.label_emb. default: 1 step: 0.01
		 * @param opts.input_blocks.0 default: 1 step: 0.01
		 * @param opts.input_blocks.1 default: 1 step: 0.01
		 * @param opts.input_blocks.2 default: 1 step: 0.01
		 * @param opts.input_blocks.3 default: 1 step: 0.01
		 * @param opts.input_blocks.4 default: 1 step: 0.01
		 * @param opts.input_blocks.5 default: 1 step: 0.01
		 * @param opts.input_blocks.6 default: 1 step: 0.01
		 * @param opts.input_blocks.7 default: 1 step: 0.01
		 * @param opts.input_blocks.8 default: 1 step: 0.01
		 * @param opts.middle_block.0 default: 1 step: 0.01
		 * @param opts.middle_block.1 default: 1 step: 0.01
		 * @param opts.middle_block.2 default: 1 step: 0.01
		 * @param opts.output_blocks.0 default: 1 step: 0.01
		 * @param opts.output_blocks.1 default: 1 step: 0.01
		 * @param opts.output_blocks.2 default: 1 step: 0.01
		 * @param opts.output_blocks.3 default: 1 step: 0.01
		 * @param opts.output_blocks.4 default: 1 step: 0.01
		 * @param opts.output_blocks.5 default: 1 step: 0.01
		 * @param opts.output_blocks.6 default: 1 step: 0.01
		 * @param opts.output_blocks.7 default: 1 step: 0.01
		 * @param opts.output_blocks.8 default: 1 step: 0.01
		 * @param opts.out. default: 1 step: 0.01}
        */
        constructor(opts:{
            'model1': MODEL,'model2': MODEL,'time_embed.'?: FLOAT,'label_emb.'?: FLOAT,'input_blocks.0'?: FLOAT,'input_blocks.1'?: FLOAT,'input_blocks.2'?: FLOAT,'input_blocks.3'?: FLOAT,'input_blocks.4'?: FLOAT,'input_blocks.5'?: FLOAT,'input_blocks.6'?: FLOAT,'input_blocks.7'?: FLOAT,'input_blocks.8'?: FLOAT,'middle_block.0'?: FLOAT,'middle_block.1'?: FLOAT,'middle_block.2'?: FLOAT,'output_blocks.0'?: FLOAT,'output_blocks.1'?: FLOAT,'output_blocks.2'?: FLOAT,'output_blocks.3'?: FLOAT,'output_blocks.4'?: FLOAT,'output_blocks.5'?: FLOAT,'output_blocks.6'?: FLOAT,'output_blocks.7'?: FLOAT,'output_blocks.8'?: FLOAT,'out.'?: FLOAT
        }){
            super(ctx);

            super.$$link("model1", opts['model1'])
super.$$link("model2", opts['model2'])
super.$$link("time_embed.", opts['time_embed.']??tmp["ModelMergeSDXL"].defaults['time_embed.'])
super.$$link("label_emb.", opts['label_emb.']??tmp["ModelMergeSDXL"].defaults['label_emb.'])
super.$$link("input_blocks.0", opts['input_blocks.0']??tmp["ModelMergeSDXL"].defaults['input_blocks.0'])
super.$$link("input_blocks.1", opts['input_blocks.1']??tmp["ModelMergeSDXL"].defaults['input_blocks.1'])
super.$$link("input_blocks.2", opts['input_blocks.2']??tmp["ModelMergeSDXL"].defaults['input_blocks.2'])
super.$$link("input_blocks.3", opts['input_blocks.3']??tmp["ModelMergeSDXL"].defaults['input_blocks.3'])
super.$$link("input_blocks.4", opts['input_blocks.4']??tmp["ModelMergeSDXL"].defaults['input_blocks.4'])
super.$$link("input_blocks.5", opts['input_blocks.5']??tmp["ModelMergeSDXL"].defaults['input_blocks.5'])
super.$$link("input_blocks.6", opts['input_blocks.6']??tmp["ModelMergeSDXL"].defaults['input_blocks.6'])
super.$$link("input_blocks.7", opts['input_blocks.7']??tmp["ModelMergeSDXL"].defaults['input_blocks.7'])
super.$$link("input_blocks.8", opts['input_blocks.8']??tmp["ModelMergeSDXL"].defaults['input_blocks.8'])
super.$$link("middle_block.0", opts['middle_block.0']??tmp["ModelMergeSDXL"].defaults['middle_block.0'])
super.$$link("middle_block.1", opts['middle_block.1']??tmp["ModelMergeSDXL"].defaults['middle_block.1'])
super.$$link("middle_block.2", opts['middle_block.2']??tmp["ModelMergeSDXL"].defaults['middle_block.2'])
super.$$link("output_blocks.0", opts['output_blocks.0']??tmp["ModelMergeSDXL"].defaults['output_blocks.0'])
super.$$link("output_blocks.1", opts['output_blocks.1']??tmp["ModelMergeSDXL"].defaults['output_blocks.1'])
super.$$link("output_blocks.2", opts['output_blocks.2']??tmp["ModelMergeSDXL"].defaults['output_blocks.2'])
super.$$link("output_blocks.3", opts['output_blocks.3']??tmp["ModelMergeSDXL"].defaults['output_blocks.3'])
super.$$link("output_blocks.4", opts['output_blocks.4']??tmp["ModelMergeSDXL"].defaults['output_blocks.4'])
super.$$link("output_blocks.5", opts['output_blocks.5']??tmp["ModelMergeSDXL"].defaults['output_blocks.5'])
super.$$link("output_blocks.6", opts['output_blocks.6']??tmp["ModelMergeSDXL"].defaults['output_blocks.6'])
super.$$link("output_blocks.7", opts['output_blocks.7']??tmp["ModelMergeSDXL"].defaults['output_blocks.7'])
super.$$link("output_blocks.8", opts['output_blocks.8']??tmp["ModelMergeSDXL"].defaults['output_blocks.8'])
super.$$link("out.", opts['out.']??tmp["ModelMergeSDXL"].defaults['out.'])
}

        static defaults = {
    'time_embed.':  1,
'label_emb.':  1,
'input_blocks.0':  1,
'input_blocks.1':  1,
'input_blocks.2':  1,
'input_blocks.3':  1,
'input_blocks.4':  1,
'input_blocks.5':  1,
'input_blocks.6':  1,
'input_blocks.7':  1,
'input_blocks.8':  1,
'middle_block.0':  1,
'middle_block.1':  1,
'middle_block.2':  1,
'output_blocks.0':  1,
'output_blocks.1':  1,
'output_blocks.2':  1,
'output_blocks.3':  1,
'output_blocks.4':  1,
'output_blocks.5':  1,
'output_blocks.6':  1,
'output_blocks.7':  1,
'output_blocks.8':  1,
'out.':  1
}
        protected override $$type(){
            return "ModelMergeSDXL"
        }
},

    /**
     * ModelMergeSD3_2B from advanced/model_merging/model_specific
     * @desc 
    */
    "ModelMergeSD3_2B" : class extends Node{
        //Setters
        //set 'model1'(value : MODEL)  { super.$$link(0, value) } 
//set 'model2'(value : MODEL)  { super.$$link(1, value) } 
//set 'pos_embed.'(value : FLOAT)  { super.$$link(2, value) } 
//set 'x_embedder.'(value : FLOAT)  { super.$$link(3, value) } 
//set 'context_embedder.'(value : FLOAT)  { super.$$link(4, value) } 
//set 'y_embedder.'(value : FLOAT)  { super.$$link(5, value) } 
//set 't_embedder.'(value : FLOAT)  { super.$$link(6, value) } 
//set 'joint_blocks.0.'(value : FLOAT)  { super.$$link(7, value) } 
//set 'joint_blocks.1.'(value : FLOAT)  { super.$$link(8, value) } 
//set 'joint_blocks.2.'(value : FLOAT)  { super.$$link(9, value) } 
//set 'joint_blocks.3.'(value : FLOAT)  { super.$$link(10, value) } 
//set 'joint_blocks.4.'(value : FLOAT)  { super.$$link(11, value) } 
//set 'joint_blocks.5.'(value : FLOAT)  { super.$$link(12, value) } 
//set 'joint_blocks.6.'(value : FLOAT)  { super.$$link(13, value) } 
//set 'joint_blocks.7.'(value : FLOAT)  { super.$$link(14, value) } 
//set 'joint_blocks.8.'(value : FLOAT)  { super.$$link(15, value) } 
//set 'joint_blocks.9.'(value : FLOAT)  { super.$$link(16, value) } 
//set 'joint_blocks.10.'(value : FLOAT)  { super.$$link(17, value) } 
//set 'joint_blocks.11.'(value : FLOAT)  { super.$$link(18, value) } 
//set 'joint_blocks.12.'(value : FLOAT)  { super.$$link(19, value) } 
//set 'joint_blocks.13.'(value : FLOAT)  { super.$$link(20, value) } 
//set 'joint_blocks.14.'(value : FLOAT)  { super.$$link(21, value) } 
//set 'joint_blocks.15.'(value : FLOAT)  { super.$$link(22, value) } 
//set 'joint_blocks.16.'(value : FLOAT)  { super.$$link(23, value) } 
//set 'joint_blocks.17.'(value : FLOAT)  { super.$$link(24, value) } 
//set 'joint_blocks.18.'(value : FLOAT)  { super.$$link(25, value) } 
//set 'joint_blocks.19.'(value : FLOAT)  { super.$$link(26, value) } 
//set 'joint_blocks.20.'(value : FLOAT)  { super.$$link(27, value) } 
//set 'joint_blocks.21.'(value : FLOAT)  { super.$$link(28, value) } 
//set 'joint_blocks.22.'(value : FLOAT)  { super.$$link(29, value) } 
//set 'joint_blocks.23.'(value : FLOAT)  { super.$$link(30, value) } 
//set 'final_layer.'(value : FLOAT)  { super.$$link(31, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model1
		 * @param opts.model2
		 * @param opts.pos_embed. default: 1 step: 0.01
		 * @param opts.x_embedder. default: 1 step: 0.01
		 * @param opts.context_embedder. default: 1 step: 0.01
		 * @param opts.y_embedder. default: 1 step: 0.01
		 * @param opts.t_embedder. default: 1 step: 0.01
		 * @param opts.joint_blocks.0. default: 1 step: 0.01
		 * @param opts.joint_blocks.1. default: 1 step: 0.01
		 * @param opts.joint_blocks.2. default: 1 step: 0.01
		 * @param opts.joint_blocks.3. default: 1 step: 0.01
		 * @param opts.joint_blocks.4. default: 1 step: 0.01
		 * @param opts.joint_blocks.5. default: 1 step: 0.01
		 * @param opts.joint_blocks.6. default: 1 step: 0.01
		 * @param opts.joint_blocks.7. default: 1 step: 0.01
		 * @param opts.joint_blocks.8. default: 1 step: 0.01
		 * @param opts.joint_blocks.9. default: 1 step: 0.01
		 * @param opts.joint_blocks.10. default: 1 step: 0.01
		 * @param opts.joint_blocks.11. default: 1 step: 0.01
		 * @param opts.joint_blocks.12. default: 1 step: 0.01
		 * @param opts.joint_blocks.13. default: 1 step: 0.01
		 * @param opts.joint_blocks.14. default: 1 step: 0.01
		 * @param opts.joint_blocks.15. default: 1 step: 0.01
		 * @param opts.joint_blocks.16. default: 1 step: 0.01
		 * @param opts.joint_blocks.17. default: 1 step: 0.01
		 * @param opts.joint_blocks.18. default: 1 step: 0.01
		 * @param opts.joint_blocks.19. default: 1 step: 0.01
		 * @param opts.joint_blocks.20. default: 1 step: 0.01
		 * @param opts.joint_blocks.21. default: 1 step: 0.01
		 * @param opts.joint_blocks.22. default: 1 step: 0.01
		 * @param opts.joint_blocks.23. default: 1 step: 0.01
		 * @param opts.final_layer. default: 1 step: 0.01}
        */
        constructor(opts:{
            'model1': MODEL,'model2': MODEL,'pos_embed.'?: FLOAT,'x_embedder.'?: FLOAT,'context_embedder.'?: FLOAT,'y_embedder.'?: FLOAT,'t_embedder.'?: FLOAT,'joint_blocks.0.'?: FLOAT,'joint_blocks.1.'?: FLOAT,'joint_blocks.2.'?: FLOAT,'joint_blocks.3.'?: FLOAT,'joint_blocks.4.'?: FLOAT,'joint_blocks.5.'?: FLOAT,'joint_blocks.6.'?: FLOAT,'joint_blocks.7.'?: FLOAT,'joint_blocks.8.'?: FLOAT,'joint_blocks.9.'?: FLOAT,'joint_blocks.10.'?: FLOAT,'joint_blocks.11.'?: FLOAT,'joint_blocks.12.'?: FLOAT,'joint_blocks.13.'?: FLOAT,'joint_blocks.14.'?: FLOAT,'joint_blocks.15.'?: FLOAT,'joint_blocks.16.'?: FLOAT,'joint_blocks.17.'?: FLOAT,'joint_blocks.18.'?: FLOAT,'joint_blocks.19.'?: FLOAT,'joint_blocks.20.'?: FLOAT,'joint_blocks.21.'?: FLOAT,'joint_blocks.22.'?: FLOAT,'joint_blocks.23.'?: FLOAT,'final_layer.'?: FLOAT
        }){
            super(ctx);

            super.$$link("model1", opts['model1'])
super.$$link("model2", opts['model2'])
super.$$link("pos_embed.", opts['pos_embed.']??tmp["ModelMergeSD3_2B"].defaults['pos_embed.'])
super.$$link("x_embedder.", opts['x_embedder.']??tmp["ModelMergeSD3_2B"].defaults['x_embedder.'])
super.$$link("context_embedder.", opts['context_embedder.']??tmp["ModelMergeSD3_2B"].defaults['context_embedder.'])
super.$$link("y_embedder.", opts['y_embedder.']??tmp["ModelMergeSD3_2B"].defaults['y_embedder.'])
super.$$link("t_embedder.", opts['t_embedder.']??tmp["ModelMergeSD3_2B"].defaults['t_embedder.'])
super.$$link("joint_blocks.0.", opts['joint_blocks.0.']??tmp["ModelMergeSD3_2B"].defaults['joint_blocks.0.'])
super.$$link("joint_blocks.1.", opts['joint_blocks.1.']??tmp["ModelMergeSD3_2B"].defaults['joint_blocks.1.'])
super.$$link("joint_blocks.2.", opts['joint_blocks.2.']??tmp["ModelMergeSD3_2B"].defaults['joint_blocks.2.'])
super.$$link("joint_blocks.3.", opts['joint_blocks.3.']??tmp["ModelMergeSD3_2B"].defaults['joint_blocks.3.'])
super.$$link("joint_blocks.4.", opts['joint_blocks.4.']??tmp["ModelMergeSD3_2B"].defaults['joint_blocks.4.'])
super.$$link("joint_blocks.5.", opts['joint_blocks.5.']??tmp["ModelMergeSD3_2B"].defaults['joint_blocks.5.'])
super.$$link("joint_blocks.6.", opts['joint_blocks.6.']??tmp["ModelMergeSD3_2B"].defaults['joint_blocks.6.'])
super.$$link("joint_blocks.7.", opts['joint_blocks.7.']??tmp["ModelMergeSD3_2B"].defaults['joint_blocks.7.'])
super.$$link("joint_blocks.8.", opts['joint_blocks.8.']??tmp["ModelMergeSD3_2B"].defaults['joint_blocks.8.'])
super.$$link("joint_blocks.9.", opts['joint_blocks.9.']??tmp["ModelMergeSD3_2B"].defaults['joint_blocks.9.'])
super.$$link("joint_blocks.10.", opts['joint_blocks.10.']??tmp["ModelMergeSD3_2B"].defaults['joint_blocks.10.'])
super.$$link("joint_blocks.11.", opts['joint_blocks.11.']??tmp["ModelMergeSD3_2B"].defaults['joint_blocks.11.'])
super.$$link("joint_blocks.12.", opts['joint_blocks.12.']??tmp["ModelMergeSD3_2B"].defaults['joint_blocks.12.'])
super.$$link("joint_blocks.13.", opts['joint_blocks.13.']??tmp["ModelMergeSD3_2B"].defaults['joint_blocks.13.'])
super.$$link("joint_blocks.14.", opts['joint_blocks.14.']??tmp["ModelMergeSD3_2B"].defaults['joint_blocks.14.'])
super.$$link("joint_blocks.15.", opts['joint_blocks.15.']??tmp["ModelMergeSD3_2B"].defaults['joint_blocks.15.'])
super.$$link("joint_blocks.16.", opts['joint_blocks.16.']??tmp["ModelMergeSD3_2B"].defaults['joint_blocks.16.'])
super.$$link("joint_blocks.17.", opts['joint_blocks.17.']??tmp["ModelMergeSD3_2B"].defaults['joint_blocks.17.'])
super.$$link("joint_blocks.18.", opts['joint_blocks.18.']??tmp["ModelMergeSD3_2B"].defaults['joint_blocks.18.'])
super.$$link("joint_blocks.19.", opts['joint_blocks.19.']??tmp["ModelMergeSD3_2B"].defaults['joint_blocks.19.'])
super.$$link("joint_blocks.20.", opts['joint_blocks.20.']??tmp["ModelMergeSD3_2B"].defaults['joint_blocks.20.'])
super.$$link("joint_blocks.21.", opts['joint_blocks.21.']??tmp["ModelMergeSD3_2B"].defaults['joint_blocks.21.'])
super.$$link("joint_blocks.22.", opts['joint_blocks.22.']??tmp["ModelMergeSD3_2B"].defaults['joint_blocks.22.'])
super.$$link("joint_blocks.23.", opts['joint_blocks.23.']??tmp["ModelMergeSD3_2B"].defaults['joint_blocks.23.'])
super.$$link("final_layer.", opts['final_layer.']??tmp["ModelMergeSD3_2B"].defaults['final_layer.'])
}

        static defaults = {
    'pos_embed.':  1,
'x_embedder.':  1,
'context_embedder.':  1,
'y_embedder.':  1,
't_embedder.':  1,
'joint_blocks.0.':  1,
'joint_blocks.1.':  1,
'joint_blocks.2.':  1,
'joint_blocks.3.':  1,
'joint_blocks.4.':  1,
'joint_blocks.5.':  1,
'joint_blocks.6.':  1,
'joint_blocks.7.':  1,
'joint_blocks.8.':  1,
'joint_blocks.9.':  1,
'joint_blocks.10.':  1,
'joint_blocks.11.':  1,
'joint_blocks.12.':  1,
'joint_blocks.13.':  1,
'joint_blocks.14.':  1,
'joint_blocks.15.':  1,
'joint_blocks.16.':  1,
'joint_blocks.17.':  1,
'joint_blocks.18.':  1,
'joint_blocks.19.':  1,
'joint_blocks.20.':  1,
'joint_blocks.21.':  1,
'joint_blocks.22.':  1,
'joint_blocks.23.':  1,
'final_layer.':  1
}
        protected override $$type(){
            return "ModelMergeSD3_2B"
        }
},

    /**
     * ModelMergeFlux1 from advanced/model_merging/model_specific
     * @desc 
    */
    "ModelMergeFlux1" : class extends Node{
        //Setters
        //set 'model1'(value : MODEL)  { super.$$link(0, value) } 
//set 'model2'(value : MODEL)  { super.$$link(1, value) } 
//set 'img_in.'(value : FLOAT)  { super.$$link(2, value) } 
//set 'time_in.'(value : FLOAT)  { super.$$link(3, value) } 
//set 'guidance_in'(value : FLOAT)  { super.$$link(4, value) } 
//set 'vector_in.'(value : FLOAT)  { super.$$link(5, value) } 
//set 'txt_in.'(value : FLOAT)  { super.$$link(6, value) } 
//set 'double_blocks.0.'(value : FLOAT)  { super.$$link(7, value) } 
//set 'double_blocks.1.'(value : FLOAT)  { super.$$link(8, value) } 
//set 'double_blocks.2.'(value : FLOAT)  { super.$$link(9, value) } 
//set 'double_blocks.3.'(value : FLOAT)  { super.$$link(10, value) } 
//set 'double_blocks.4.'(value : FLOAT)  { super.$$link(11, value) } 
//set 'double_blocks.5.'(value : FLOAT)  { super.$$link(12, value) } 
//set 'double_blocks.6.'(value : FLOAT)  { super.$$link(13, value) } 
//set 'double_blocks.7.'(value : FLOAT)  { super.$$link(14, value) } 
//set 'double_blocks.8.'(value : FLOAT)  { super.$$link(15, value) } 
//set 'double_blocks.9.'(value : FLOAT)  { super.$$link(16, value) } 
//set 'double_blocks.10.'(value : FLOAT)  { super.$$link(17, value) } 
//set 'double_blocks.11.'(value : FLOAT)  { super.$$link(18, value) } 
//set 'double_blocks.12.'(value : FLOAT)  { super.$$link(19, value) } 
//set 'double_blocks.13.'(value : FLOAT)  { super.$$link(20, value) } 
//set 'double_blocks.14.'(value : FLOAT)  { super.$$link(21, value) } 
//set 'double_blocks.15.'(value : FLOAT)  { super.$$link(22, value) } 
//set 'double_blocks.16.'(value : FLOAT)  { super.$$link(23, value) } 
//set 'double_blocks.17.'(value : FLOAT)  { super.$$link(24, value) } 
//set 'double_blocks.18.'(value : FLOAT)  { super.$$link(25, value) } 
//set 'single_blocks.0.'(value : FLOAT)  { super.$$link(26, value) } 
//set 'single_blocks.1.'(value : FLOAT)  { super.$$link(27, value) } 
//set 'single_blocks.2.'(value : FLOAT)  { super.$$link(28, value) } 
//set 'single_blocks.3.'(value : FLOAT)  { super.$$link(29, value) } 
//set 'single_blocks.4.'(value : FLOAT)  { super.$$link(30, value) } 
//set 'single_blocks.5.'(value : FLOAT)  { super.$$link(31, value) } 
//set 'single_blocks.6.'(value : FLOAT)  { super.$$link(32, value) } 
//set 'single_blocks.7.'(value : FLOAT)  { super.$$link(33, value) } 
//set 'single_blocks.8.'(value : FLOAT)  { super.$$link(34, value) } 
//set 'single_blocks.9.'(value : FLOAT)  { super.$$link(35, value) } 
//set 'single_blocks.10.'(value : FLOAT)  { super.$$link(36, value) } 
//set 'single_blocks.11.'(value : FLOAT)  { super.$$link(37, value) } 
//set 'single_blocks.12.'(value : FLOAT)  { super.$$link(38, value) } 
//set 'single_blocks.13.'(value : FLOAT)  { super.$$link(39, value) } 
//set 'single_blocks.14.'(value : FLOAT)  { super.$$link(40, value) } 
//set 'single_blocks.15.'(value : FLOAT)  { super.$$link(41, value) } 
//set 'single_blocks.16.'(value : FLOAT)  { super.$$link(42, value) } 
//set 'single_blocks.17.'(value : FLOAT)  { super.$$link(43, value) } 
//set 'single_blocks.18.'(value : FLOAT)  { super.$$link(44, value) } 
//set 'single_blocks.19.'(value : FLOAT)  { super.$$link(45, value) } 
//set 'single_blocks.20.'(value : FLOAT)  { super.$$link(46, value) } 
//set 'single_blocks.21.'(value : FLOAT)  { super.$$link(47, value) } 
//set 'single_blocks.22.'(value : FLOAT)  { super.$$link(48, value) } 
//set 'single_blocks.23.'(value : FLOAT)  { super.$$link(49, value) } 
//set 'single_blocks.24.'(value : FLOAT)  { super.$$link(50, value) } 
//set 'single_blocks.25.'(value : FLOAT)  { super.$$link(51, value) } 
//set 'single_blocks.26.'(value : FLOAT)  { super.$$link(52, value) } 
//set 'single_blocks.27.'(value : FLOAT)  { super.$$link(53, value) } 
//set 'single_blocks.28.'(value : FLOAT)  { super.$$link(54, value) } 
//set 'single_blocks.29.'(value : FLOAT)  { super.$$link(55, value) } 
//set 'single_blocks.30.'(value : FLOAT)  { super.$$link(56, value) } 
//set 'single_blocks.31.'(value : FLOAT)  { super.$$link(57, value) } 
//set 'single_blocks.32.'(value : FLOAT)  { super.$$link(58, value) } 
//set 'single_blocks.33.'(value : FLOAT)  { super.$$link(59, value) } 
//set 'single_blocks.34.'(value : FLOAT)  { super.$$link(60, value) } 
//set 'single_blocks.35.'(value : FLOAT)  { super.$$link(61, value) } 
//set 'single_blocks.36.'(value : FLOAT)  { super.$$link(62, value) } 
//set 'single_blocks.37.'(value : FLOAT)  { super.$$link(63, value) } 
//set 'final_layer.'(value : FLOAT)  { super.$$link(64, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model1
		 * @param opts.model2
		 * @param opts.img_in. default: 1 step: 0.01
		 * @param opts.time_in. default: 1 step: 0.01
		 * @param opts.guidance_in default: 1 step: 0.01
		 * @param opts.vector_in. default: 1 step: 0.01
		 * @param opts.txt_in. default: 1 step: 0.01
		 * @param opts.double_blocks.0. default: 1 step: 0.01
		 * @param opts.double_blocks.1. default: 1 step: 0.01
		 * @param opts.double_blocks.2. default: 1 step: 0.01
		 * @param opts.double_blocks.3. default: 1 step: 0.01
		 * @param opts.double_blocks.4. default: 1 step: 0.01
		 * @param opts.double_blocks.5. default: 1 step: 0.01
		 * @param opts.double_blocks.6. default: 1 step: 0.01
		 * @param opts.double_blocks.7. default: 1 step: 0.01
		 * @param opts.double_blocks.8. default: 1 step: 0.01
		 * @param opts.double_blocks.9. default: 1 step: 0.01
		 * @param opts.double_blocks.10. default: 1 step: 0.01
		 * @param opts.double_blocks.11. default: 1 step: 0.01
		 * @param opts.double_blocks.12. default: 1 step: 0.01
		 * @param opts.double_blocks.13. default: 1 step: 0.01
		 * @param opts.double_blocks.14. default: 1 step: 0.01
		 * @param opts.double_blocks.15. default: 1 step: 0.01
		 * @param opts.double_blocks.16. default: 1 step: 0.01
		 * @param opts.double_blocks.17. default: 1 step: 0.01
		 * @param opts.double_blocks.18. default: 1 step: 0.01
		 * @param opts.single_blocks.0. default: 1 step: 0.01
		 * @param opts.single_blocks.1. default: 1 step: 0.01
		 * @param opts.single_blocks.2. default: 1 step: 0.01
		 * @param opts.single_blocks.3. default: 1 step: 0.01
		 * @param opts.single_blocks.4. default: 1 step: 0.01
		 * @param opts.single_blocks.5. default: 1 step: 0.01
		 * @param opts.single_blocks.6. default: 1 step: 0.01
		 * @param opts.single_blocks.7. default: 1 step: 0.01
		 * @param opts.single_blocks.8. default: 1 step: 0.01
		 * @param opts.single_blocks.9. default: 1 step: 0.01
		 * @param opts.single_blocks.10. default: 1 step: 0.01
		 * @param opts.single_blocks.11. default: 1 step: 0.01
		 * @param opts.single_blocks.12. default: 1 step: 0.01
		 * @param opts.single_blocks.13. default: 1 step: 0.01
		 * @param opts.single_blocks.14. default: 1 step: 0.01
		 * @param opts.single_blocks.15. default: 1 step: 0.01
		 * @param opts.single_blocks.16. default: 1 step: 0.01
		 * @param opts.single_blocks.17. default: 1 step: 0.01
		 * @param opts.single_blocks.18. default: 1 step: 0.01
		 * @param opts.single_blocks.19. default: 1 step: 0.01
		 * @param opts.single_blocks.20. default: 1 step: 0.01
		 * @param opts.single_blocks.21. default: 1 step: 0.01
		 * @param opts.single_blocks.22. default: 1 step: 0.01
		 * @param opts.single_blocks.23. default: 1 step: 0.01
		 * @param opts.single_blocks.24. default: 1 step: 0.01
		 * @param opts.single_blocks.25. default: 1 step: 0.01
		 * @param opts.single_blocks.26. default: 1 step: 0.01
		 * @param opts.single_blocks.27. default: 1 step: 0.01
		 * @param opts.single_blocks.28. default: 1 step: 0.01
		 * @param opts.single_blocks.29. default: 1 step: 0.01
		 * @param opts.single_blocks.30. default: 1 step: 0.01
		 * @param opts.single_blocks.31. default: 1 step: 0.01
		 * @param opts.single_blocks.32. default: 1 step: 0.01
		 * @param opts.single_blocks.33. default: 1 step: 0.01
		 * @param opts.single_blocks.34. default: 1 step: 0.01
		 * @param opts.single_blocks.35. default: 1 step: 0.01
		 * @param opts.single_blocks.36. default: 1 step: 0.01
		 * @param opts.single_blocks.37. default: 1 step: 0.01
		 * @param opts.final_layer. default: 1 step: 0.01}
        */
        constructor(opts:{
            'model1': MODEL,'model2': MODEL,'img_in.'?: FLOAT,'time_in.'?: FLOAT,'guidance_in'?: FLOAT,'vector_in.'?: FLOAT,'txt_in.'?: FLOAT,'double_blocks.0.'?: FLOAT,'double_blocks.1.'?: FLOAT,'double_blocks.2.'?: FLOAT,'double_blocks.3.'?: FLOAT,'double_blocks.4.'?: FLOAT,'double_blocks.5.'?: FLOAT,'double_blocks.6.'?: FLOAT,'double_blocks.7.'?: FLOAT,'double_blocks.8.'?: FLOAT,'double_blocks.9.'?: FLOAT,'double_blocks.10.'?: FLOAT,'double_blocks.11.'?: FLOAT,'double_blocks.12.'?: FLOAT,'double_blocks.13.'?: FLOAT,'double_blocks.14.'?: FLOAT,'double_blocks.15.'?: FLOAT,'double_blocks.16.'?: FLOAT,'double_blocks.17.'?: FLOAT,'double_blocks.18.'?: FLOAT,'single_blocks.0.'?: FLOAT,'single_blocks.1.'?: FLOAT,'single_blocks.2.'?: FLOAT,'single_blocks.3.'?: FLOAT,'single_blocks.4.'?: FLOAT,'single_blocks.5.'?: FLOAT,'single_blocks.6.'?: FLOAT,'single_blocks.7.'?: FLOAT,'single_blocks.8.'?: FLOAT,'single_blocks.9.'?: FLOAT,'single_blocks.10.'?: FLOAT,'single_blocks.11.'?: FLOAT,'single_blocks.12.'?: FLOAT,'single_blocks.13.'?: FLOAT,'single_blocks.14.'?: FLOAT,'single_blocks.15.'?: FLOAT,'single_blocks.16.'?: FLOAT,'single_blocks.17.'?: FLOAT,'single_blocks.18.'?: FLOAT,'single_blocks.19.'?: FLOAT,'single_blocks.20.'?: FLOAT,'single_blocks.21.'?: FLOAT,'single_blocks.22.'?: FLOAT,'single_blocks.23.'?: FLOAT,'single_blocks.24.'?: FLOAT,'single_blocks.25.'?: FLOAT,'single_blocks.26.'?: FLOAT,'single_blocks.27.'?: FLOAT,'single_blocks.28.'?: FLOAT,'single_blocks.29.'?: FLOAT,'single_blocks.30.'?: FLOAT,'single_blocks.31.'?: FLOAT,'single_blocks.32.'?: FLOAT,'single_blocks.33.'?: FLOAT,'single_blocks.34.'?: FLOAT,'single_blocks.35.'?: FLOAT,'single_blocks.36.'?: FLOAT,'single_blocks.37.'?: FLOAT,'final_layer.'?: FLOAT
        }){
            super(ctx);

            super.$$link("model1", opts['model1'])
super.$$link("model2", opts['model2'])
super.$$link("img_in.", opts['img_in.']??tmp["ModelMergeFlux1"].defaults['img_in.'])
super.$$link("time_in.", opts['time_in.']??tmp["ModelMergeFlux1"].defaults['time_in.'])
super.$$link("guidance_in", opts['guidance_in']??tmp["ModelMergeFlux1"].defaults['guidance_in'])
super.$$link("vector_in.", opts['vector_in.']??tmp["ModelMergeFlux1"].defaults['vector_in.'])
super.$$link("txt_in.", opts['txt_in.']??tmp["ModelMergeFlux1"].defaults['txt_in.'])
super.$$link("double_blocks.0.", opts['double_blocks.0.']??tmp["ModelMergeFlux1"].defaults['double_blocks.0.'])
super.$$link("double_blocks.1.", opts['double_blocks.1.']??tmp["ModelMergeFlux1"].defaults['double_blocks.1.'])
super.$$link("double_blocks.2.", opts['double_blocks.2.']??tmp["ModelMergeFlux1"].defaults['double_blocks.2.'])
super.$$link("double_blocks.3.", opts['double_blocks.3.']??tmp["ModelMergeFlux1"].defaults['double_blocks.3.'])
super.$$link("double_blocks.4.", opts['double_blocks.4.']??tmp["ModelMergeFlux1"].defaults['double_blocks.4.'])
super.$$link("double_blocks.5.", opts['double_blocks.5.']??tmp["ModelMergeFlux1"].defaults['double_blocks.5.'])
super.$$link("double_blocks.6.", opts['double_blocks.6.']??tmp["ModelMergeFlux1"].defaults['double_blocks.6.'])
super.$$link("double_blocks.7.", opts['double_blocks.7.']??tmp["ModelMergeFlux1"].defaults['double_blocks.7.'])
super.$$link("double_blocks.8.", opts['double_blocks.8.']??tmp["ModelMergeFlux1"].defaults['double_blocks.8.'])
super.$$link("double_blocks.9.", opts['double_blocks.9.']??tmp["ModelMergeFlux1"].defaults['double_blocks.9.'])
super.$$link("double_blocks.10.", opts['double_blocks.10.']??tmp["ModelMergeFlux1"].defaults['double_blocks.10.'])
super.$$link("double_blocks.11.", opts['double_blocks.11.']??tmp["ModelMergeFlux1"].defaults['double_blocks.11.'])
super.$$link("double_blocks.12.", opts['double_blocks.12.']??tmp["ModelMergeFlux1"].defaults['double_blocks.12.'])
super.$$link("double_blocks.13.", opts['double_blocks.13.']??tmp["ModelMergeFlux1"].defaults['double_blocks.13.'])
super.$$link("double_blocks.14.", opts['double_blocks.14.']??tmp["ModelMergeFlux1"].defaults['double_blocks.14.'])
super.$$link("double_blocks.15.", opts['double_blocks.15.']??tmp["ModelMergeFlux1"].defaults['double_blocks.15.'])
super.$$link("double_blocks.16.", opts['double_blocks.16.']??tmp["ModelMergeFlux1"].defaults['double_blocks.16.'])
super.$$link("double_blocks.17.", opts['double_blocks.17.']??tmp["ModelMergeFlux1"].defaults['double_blocks.17.'])
super.$$link("double_blocks.18.", opts['double_blocks.18.']??tmp["ModelMergeFlux1"].defaults['double_blocks.18.'])
super.$$link("single_blocks.0.", opts['single_blocks.0.']??tmp["ModelMergeFlux1"].defaults['single_blocks.0.'])
super.$$link("single_blocks.1.", opts['single_blocks.1.']??tmp["ModelMergeFlux1"].defaults['single_blocks.1.'])
super.$$link("single_blocks.2.", opts['single_blocks.2.']??tmp["ModelMergeFlux1"].defaults['single_blocks.2.'])
super.$$link("single_blocks.3.", opts['single_blocks.3.']??tmp["ModelMergeFlux1"].defaults['single_blocks.3.'])
super.$$link("single_blocks.4.", opts['single_blocks.4.']??tmp["ModelMergeFlux1"].defaults['single_blocks.4.'])
super.$$link("single_blocks.5.", opts['single_blocks.5.']??tmp["ModelMergeFlux1"].defaults['single_blocks.5.'])
super.$$link("single_blocks.6.", opts['single_blocks.6.']??tmp["ModelMergeFlux1"].defaults['single_blocks.6.'])
super.$$link("single_blocks.7.", opts['single_blocks.7.']??tmp["ModelMergeFlux1"].defaults['single_blocks.7.'])
super.$$link("single_blocks.8.", opts['single_blocks.8.']??tmp["ModelMergeFlux1"].defaults['single_blocks.8.'])
super.$$link("single_blocks.9.", opts['single_blocks.9.']??tmp["ModelMergeFlux1"].defaults['single_blocks.9.'])
super.$$link("single_blocks.10.", opts['single_blocks.10.']??tmp["ModelMergeFlux1"].defaults['single_blocks.10.'])
super.$$link("single_blocks.11.", opts['single_blocks.11.']??tmp["ModelMergeFlux1"].defaults['single_blocks.11.'])
super.$$link("single_blocks.12.", opts['single_blocks.12.']??tmp["ModelMergeFlux1"].defaults['single_blocks.12.'])
super.$$link("single_blocks.13.", opts['single_blocks.13.']??tmp["ModelMergeFlux1"].defaults['single_blocks.13.'])
super.$$link("single_blocks.14.", opts['single_blocks.14.']??tmp["ModelMergeFlux1"].defaults['single_blocks.14.'])
super.$$link("single_blocks.15.", opts['single_blocks.15.']??tmp["ModelMergeFlux1"].defaults['single_blocks.15.'])
super.$$link("single_blocks.16.", opts['single_blocks.16.']??tmp["ModelMergeFlux1"].defaults['single_blocks.16.'])
super.$$link("single_blocks.17.", opts['single_blocks.17.']??tmp["ModelMergeFlux1"].defaults['single_blocks.17.'])
super.$$link("single_blocks.18.", opts['single_blocks.18.']??tmp["ModelMergeFlux1"].defaults['single_blocks.18.'])
super.$$link("single_blocks.19.", opts['single_blocks.19.']??tmp["ModelMergeFlux1"].defaults['single_blocks.19.'])
super.$$link("single_blocks.20.", opts['single_blocks.20.']??tmp["ModelMergeFlux1"].defaults['single_blocks.20.'])
super.$$link("single_blocks.21.", opts['single_blocks.21.']??tmp["ModelMergeFlux1"].defaults['single_blocks.21.'])
super.$$link("single_blocks.22.", opts['single_blocks.22.']??tmp["ModelMergeFlux1"].defaults['single_blocks.22.'])
super.$$link("single_blocks.23.", opts['single_blocks.23.']??tmp["ModelMergeFlux1"].defaults['single_blocks.23.'])
super.$$link("single_blocks.24.", opts['single_blocks.24.']??tmp["ModelMergeFlux1"].defaults['single_blocks.24.'])
super.$$link("single_blocks.25.", opts['single_blocks.25.']??tmp["ModelMergeFlux1"].defaults['single_blocks.25.'])
super.$$link("single_blocks.26.", opts['single_blocks.26.']??tmp["ModelMergeFlux1"].defaults['single_blocks.26.'])
super.$$link("single_blocks.27.", opts['single_blocks.27.']??tmp["ModelMergeFlux1"].defaults['single_blocks.27.'])
super.$$link("single_blocks.28.", opts['single_blocks.28.']??tmp["ModelMergeFlux1"].defaults['single_blocks.28.'])
super.$$link("single_blocks.29.", opts['single_blocks.29.']??tmp["ModelMergeFlux1"].defaults['single_blocks.29.'])
super.$$link("single_blocks.30.", opts['single_blocks.30.']??tmp["ModelMergeFlux1"].defaults['single_blocks.30.'])
super.$$link("single_blocks.31.", opts['single_blocks.31.']??tmp["ModelMergeFlux1"].defaults['single_blocks.31.'])
super.$$link("single_blocks.32.", opts['single_blocks.32.']??tmp["ModelMergeFlux1"].defaults['single_blocks.32.'])
super.$$link("single_blocks.33.", opts['single_blocks.33.']??tmp["ModelMergeFlux1"].defaults['single_blocks.33.'])
super.$$link("single_blocks.34.", opts['single_blocks.34.']??tmp["ModelMergeFlux1"].defaults['single_blocks.34.'])
super.$$link("single_blocks.35.", opts['single_blocks.35.']??tmp["ModelMergeFlux1"].defaults['single_blocks.35.'])
super.$$link("single_blocks.36.", opts['single_blocks.36.']??tmp["ModelMergeFlux1"].defaults['single_blocks.36.'])
super.$$link("single_blocks.37.", opts['single_blocks.37.']??tmp["ModelMergeFlux1"].defaults['single_blocks.37.'])
super.$$link("final_layer.", opts['final_layer.']??tmp["ModelMergeFlux1"].defaults['final_layer.'])
}

        static defaults = {
    'img_in.':  1,
'time_in.':  1,
'guidance_in':  1,
'vector_in.':  1,
'txt_in.':  1,
'double_blocks.0.':  1,
'double_blocks.1.':  1,
'double_blocks.2.':  1,
'double_blocks.3.':  1,
'double_blocks.4.':  1,
'double_blocks.5.':  1,
'double_blocks.6.':  1,
'double_blocks.7.':  1,
'double_blocks.8.':  1,
'double_blocks.9.':  1,
'double_blocks.10.':  1,
'double_blocks.11.':  1,
'double_blocks.12.':  1,
'double_blocks.13.':  1,
'double_blocks.14.':  1,
'double_blocks.15.':  1,
'double_blocks.16.':  1,
'double_blocks.17.':  1,
'double_blocks.18.':  1,
'single_blocks.0.':  1,
'single_blocks.1.':  1,
'single_blocks.2.':  1,
'single_blocks.3.':  1,
'single_blocks.4.':  1,
'single_blocks.5.':  1,
'single_blocks.6.':  1,
'single_blocks.7.':  1,
'single_blocks.8.':  1,
'single_blocks.9.':  1,
'single_blocks.10.':  1,
'single_blocks.11.':  1,
'single_blocks.12.':  1,
'single_blocks.13.':  1,
'single_blocks.14.':  1,
'single_blocks.15.':  1,
'single_blocks.16.':  1,
'single_blocks.17.':  1,
'single_blocks.18.':  1,
'single_blocks.19.':  1,
'single_blocks.20.':  1,
'single_blocks.21.':  1,
'single_blocks.22.':  1,
'single_blocks.23.':  1,
'single_blocks.24.':  1,
'single_blocks.25.':  1,
'single_blocks.26.':  1,
'single_blocks.27.':  1,
'single_blocks.28.':  1,
'single_blocks.29.':  1,
'single_blocks.30.':  1,
'single_blocks.31.':  1,
'single_blocks.32.':  1,
'single_blocks.33.':  1,
'single_blocks.34.':  1,
'single_blocks.35.':  1,
'single_blocks.36.':  1,
'single_blocks.37.':  1,
'final_layer.':  1
}
        protected override $$type(){
            return "ModelMergeFlux1"
        }
},

    /**
     * PerturbedAttentionGuidance from model_patches/unet
     * @desc 
    */
    "PerturbedAttentionGuidance" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'scale'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.scale default: 3 step: 0.01}
        */
        constructor(opts:{
            'model': MODEL,'scale'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("scale", opts['scale']??tmp["PerturbedAttentionGuidance"].defaults['scale'])
}

        static defaults = {
    'scale':  3
}
        protected override $$type(){
            return "PerturbedAttentionGuidance"
        }
},

    /**
     * AlignYourStepsScheduler from sampling/custom_sampling/schedulers
     * @desc 
    */
    "AlignYourStepsScheduler" : class extends Node{
        //Setters
        //set 'model_type'(value : 'SD1'|'SDXL'|'SVD'| $dyn)  { super.$$link(0, value) } 
//set 'steps'(value : INT)  { super.$$link(1, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'SIGMAS'() : SIGMAS { return [this.$uid.toString(), 0]  as unknown as SIGMAS; }

        /**
          * Constructor
		 * @param opts.model_type
		 * @param opts.steps default: 10 max: 10000 min: 10
		 * @param opts.denoise default: 1 step: 0.01}
        */
        constructor(opts:{
            'model_type': 'SD1'|'SDXL'|'SVD'| $dyn,'steps'?: INT,'denoise'?: FLOAT
        }){
            super(ctx);

            super.$$link("model_type", opts['model_type'])
super.$$link("steps", opts['steps']??tmp["AlignYourStepsScheduler"].defaults['steps'])
super.$$link("denoise", opts['denoise']??tmp["AlignYourStepsScheduler"].defaults['denoise'])
}

        static defaults = {
    'steps':  10,
'denoise':  1
}
        protected override $$type(){
            return "AlignYourStepsScheduler"
        }
},

    /**
     * UNetSelfAttentionMultiply from _for_testing/attention_experiments
     * @desc 
    */
    "UNetSelfAttentionMultiply" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'q'(value : FLOAT)  { super.$$link(1, value) } 
//set 'k'(value : FLOAT)  { super.$$link(2, value) } 
//set 'v'(value : FLOAT)  { super.$$link(3, value) } 
//set 'out'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.q default: 1 step: 0.01
		 * @param opts.k default: 1 step: 0.01
		 * @param opts.v default: 1 step: 0.01
		 * @param opts.out default: 1 step: 0.01}
        */
        constructor(opts:{
            'model': MODEL,'q'?: FLOAT,'k'?: FLOAT,'v'?: FLOAT,'out'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("q", opts['q']??tmp["UNetSelfAttentionMultiply"].defaults['q'])
super.$$link("k", opts['k']??tmp["UNetSelfAttentionMultiply"].defaults['k'])
super.$$link("v", opts['v']??tmp["UNetSelfAttentionMultiply"].defaults['v'])
super.$$link("out", opts['out']??tmp["UNetSelfAttentionMultiply"].defaults['out'])
}

        static defaults = {
    'q':  1,
'k':  1,
'v':  1,
'out':  1
}
        protected override $$type(){
            return "UNetSelfAttentionMultiply"
        }
},

    /**
     * UNetCrossAttentionMultiply from _for_testing/attention_experiments
     * @desc 
    */
    "UNetCrossAttentionMultiply" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'q'(value : FLOAT)  { super.$$link(1, value) } 
//set 'k'(value : FLOAT)  { super.$$link(2, value) } 
//set 'v'(value : FLOAT)  { super.$$link(3, value) } 
//set 'out'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.q default: 1 step: 0.01
		 * @param opts.k default: 1 step: 0.01
		 * @param opts.v default: 1 step: 0.01
		 * @param opts.out default: 1 step: 0.01}
        */
        constructor(opts:{
            'model': MODEL,'q'?: FLOAT,'k'?: FLOAT,'v'?: FLOAT,'out'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("q", opts['q']??tmp["UNetCrossAttentionMultiply"].defaults['q'])
super.$$link("k", opts['k']??tmp["UNetCrossAttentionMultiply"].defaults['k'])
super.$$link("v", opts['v']??tmp["UNetCrossAttentionMultiply"].defaults['v'])
super.$$link("out", opts['out']??tmp["UNetCrossAttentionMultiply"].defaults['out'])
}

        static defaults = {
    'q':  1,
'k':  1,
'v':  1,
'out':  1
}
        protected override $$type(){
            return "UNetCrossAttentionMultiply"
        }
},

    /**
     * CLIPAttentionMultiply from _for_testing/attention_experiments
     * @desc 
    */
    "CLIPAttentionMultiply" : class extends Node{
        //Setters
        //set 'clip'(value : CLIP)  { super.$$link(0, value) } 
//set 'q'(value : FLOAT)  { super.$$link(1, value) } 
//set 'k'(value : FLOAT)  { super.$$link(2, value) } 
//set 'v'(value : FLOAT)  { super.$$link(3, value) } 
//set 'out'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'CLIP'() : CLIP { return [this.$uid.toString(), 0]  as unknown as CLIP; }

        /**
          * Constructor
		 * @param opts.clip
		 * @param opts.q default: 1 step: 0.01
		 * @param opts.k default: 1 step: 0.01
		 * @param opts.v default: 1 step: 0.01
		 * @param opts.out default: 1 step: 0.01}
        */
        constructor(opts:{
            'clip': CLIP,'q'?: FLOAT,'k'?: FLOAT,'v'?: FLOAT,'out'?: FLOAT
        }){
            super(ctx);

            super.$$link("clip", opts['clip'])
super.$$link("q", opts['q']??tmp["CLIPAttentionMultiply"].defaults['q'])
super.$$link("k", opts['k']??tmp["CLIPAttentionMultiply"].defaults['k'])
super.$$link("v", opts['v']??tmp["CLIPAttentionMultiply"].defaults['v'])
super.$$link("out", opts['out']??tmp["CLIPAttentionMultiply"].defaults['out'])
}

        static defaults = {
    'q':  1,
'k':  1,
'v':  1,
'out':  1
}
        protected override $$type(){
            return "CLIPAttentionMultiply"
        }
},

    /**
     * UNetTemporalAttentionMultiply from _for_testing/attention_experiments
     * @desc 
    */
    "UNetTemporalAttentionMultiply" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'self_structural'(value : FLOAT)  { super.$$link(1, value) } 
//set 'self_temporal'(value : FLOAT)  { super.$$link(2, value) } 
//set 'cross_structural'(value : FLOAT)  { super.$$link(3, value) } 
//set 'cross_temporal'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.self_structural default: 1 step: 0.01
		 * @param opts.self_temporal default: 1 step: 0.01
		 * @param opts.cross_structural default: 1 step: 0.01
		 * @param opts.cross_temporal default: 1 step: 0.01}
        */
        constructor(opts:{
            'model': MODEL,'self_structural'?: FLOAT,'self_temporal'?: FLOAT,'cross_structural'?: FLOAT,'cross_temporal'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("self_structural", opts['self_structural']??tmp["UNetTemporalAttentionMultiply"].defaults['self_structural'])
super.$$link("self_temporal", opts['self_temporal']??tmp["UNetTemporalAttentionMultiply"].defaults['self_temporal'])
super.$$link("cross_structural", opts['cross_structural']??tmp["UNetTemporalAttentionMultiply"].defaults['cross_structural'])
super.$$link("cross_temporal", opts['cross_temporal']??tmp["UNetTemporalAttentionMultiply"].defaults['cross_temporal'])
}

        static defaults = {
    'self_structural':  1,
'self_temporal':  1,
'cross_structural':  1,
'cross_temporal':  1
}
        protected override $$type(){
            return "UNetTemporalAttentionMultiply"
        }
},

    /**
     * SamplerLCMUpscale from sampling/custom_sampling/samplers
     * @desc 
    */
    "SamplerLCMUpscale" : class extends Node{
        //Setters
        //set 'scale_ratio'(value : FLOAT)  { super.$$link(0, value) } 
//set 'scale_steps'(value : INT)  { super.$$link(1, value) } 
//set 'upscale_method'(value : 'bislerp'|'nearest-exact'|'bilinear'|'area'|'bicubic'| $dyn)  { super.$$link(2, value) } 

        //Getters
        get 'SAMPLER'() : SAMPLER { return [this.$uid.toString(), 0]  as unknown as SAMPLER; }

        /**
          * Constructor
		 * @param opts.scale_ratio default: 1 max: 20 min: 0.1 step: 0.01
		 * @param opts.scale_steps default: -1 max: 1000 min: -1 step: 1
		 * @param opts.upscale_method}
        */
        constructor(opts:{
            'scale_ratio'?: FLOAT,'scale_steps'?: INT,'upscale_method': 'bislerp'|'nearest-exact'|'bilinear'|'area'|'bicubic'| $dyn
        }){
            super(ctx);

            super.$$link("scale_ratio", opts['scale_ratio']??tmp["SamplerLCMUpscale"].defaults['scale_ratio'])
super.$$link("scale_steps", opts['scale_steps']??tmp["SamplerLCMUpscale"].defaults['scale_steps'])
super.$$link("upscale_method", opts['upscale_method'])
}

        static defaults = {
    'scale_ratio':  1,
'scale_steps':  -1
}
        protected override $$type(){
            return "SamplerLCMUpscale"
        }
},

    /**
     * SamplerEulerCFG++ from _for_testing
     * @desc 
    */
    "SamplerEulerCFGpp" : class extends Node{
        //Setters
        //set 'version'(value : 'regular'|'alternative'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'SAMPLER'() : SAMPLER { return [this.$uid.toString(), 0]  as unknown as SAMPLER; }

        /**
          * Constructor
		 * @param opts.version}
        */
        constructor(opts:{
            'version': 'regular'|'alternative'| $dyn
        }){
            super(ctx);

            super.$$link("version", opts['version'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "SamplerEulerCFGpp"
        }
},

    /**
     * Webcam Capture from image
     * @desc 
    */
    "WebcamCapture" : class extends Node{
        //Setters
        //set 'image'(value : WEBCAM)  { super.$$link(0, value) } 
//set 'width'(value : INT)  { super.$$link(1, value) } 
//set 'height'(value : INT)  { super.$$link(2, value) } 
//set 'capture_on_queue'(value : BOOLEAN)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.width step: 1
		 * @param opts.height step: 1
		 * @param opts.capture_on_queue default: true}
        */
        constructor(opts:{
            'image': WEBCAM,'width'?: INT,'height'?: INT,'capture_on_queue'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("width", opts['width']??tmp["WebcamCapture"].defaults['width'])
super.$$link("height", opts['height']??tmp["WebcamCapture"].defaults['height'])
super.$$link("capture_on_queue", opts['capture_on_queue']??tmp["WebcamCapture"].defaults['capture_on_queue'])
}

        static defaults = {
    'width':  0,
'height':  0,
'capture_on_queue':  true
}
        protected override $$type(){
            return "WebcamCapture"
        }
},

    /**
     * EmptyLatentAudio from latent/audio
     * @desc 
    */
    "EmptyLatentAudio" : class extends Node{
        //Setters
        //set 'seconds'(value : FLOAT)  { super.$$link(0, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.seconds default: 47.6 max: 1000 min: 1 step: 0.1}
        */
        constructor(opts:{
            'seconds'?: FLOAT
        }){
            super(ctx);

            super.$$link("seconds", opts['seconds']??tmp["EmptyLatentAudio"].defaults['seconds'])
}

        static defaults = {
    'seconds':  47.6
}
        protected override $$type(){
            return "EmptyLatentAudio"
        }
},

    /**
     * VAEEncodeAudio from latent/audio
     * @desc 
    */
    "VAEEncodeAudio" : class extends Node{
        //Setters
        //set 'audio'(value : AUDIO)  { super.$$link(0, value) } 
//set 'vae'(value : VAE)  { super.$$link(1, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.audio
		 * @param opts.vae}
        */
        constructor(opts:{
            'audio': AUDIO,'vae': VAE
        }){
            super(ctx);

            super.$$link("audio", opts['audio'])
super.$$link("vae", opts['vae'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "VAEEncodeAudio"
        }
},

    /**
     * VAEDecodeAudio from latent/audio
     * @desc 
    */
    "VAEDecodeAudio" : class extends Node{
        //Setters
        //set 'samples'(value : LATENT)  { super.$$link(0, value) } 
//set 'vae'(value : VAE)  { super.$$link(1, value) } 

        //Getters
        get 'AUDIO'() : AUDIO { return [this.$uid.toString(), 0]  as unknown as AUDIO; }

        /**
          * Constructor
		 * @param opts.samples
		 * @param opts.vae}
        */
        constructor(opts:{
            'samples': LATENT,'vae': VAE
        }){
            super(ctx);

            super.$$link("samples", opts['samples'])
super.$$link("vae", opts['vae'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "VAEDecodeAudio"
        }
},

    /**
     * SaveAudio from audio
     * @desc 
    */
    "SaveAudio" : class extends Node{
        //Setters
        //set 'audio'(value : AUDIO)  { super.$$link(0, value) } 
//set 'filename_prefix'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.audio
		 * @param opts.filename_prefix default: "audio/ComfyUI"}
        */
        constructor(opts:{
            'audio': AUDIO,'filename_prefix'?: STRING
        }){
            super(ctx);

            super.$$link("audio", opts['audio'])
super.$$link("filename_prefix", opts['filename_prefix']??tmp["SaveAudio"].defaults['filename_prefix'])
}

        static defaults = {
    'filename_prefix':  "audio/ComfyUI"
}
        protected override $$type(){
            return "SaveAudio"
        }
},

    /**
     * LoadAudio from audio
     * @desc 
    */
    "LoadAudio" : class extends Node{
        //Setters
        //set 'audio'(value : void)  { super.$$link(0, value) } 

        //Getters
        get 'AUDIO'() : AUDIO { return [this.$uid.toString(), 0]  as unknown as AUDIO; }

        /**
          * Constructor
		 * @param opts.audio}
        */
        constructor(opts:{
            'audio': void
        }){
            super(ctx);

            super.$$link("audio", opts['audio'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "LoadAudio"
        }
},

    /**
     * PreviewAudio from audio
     * @desc 
    */
    "PreviewAudio" : class extends Node{
        //Setters
        //set 'audio'(value : AUDIO)  { super.$$link(0, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.audio}
        */
        constructor(opts:{
            'audio': AUDIO
        }){
            super(ctx);

            super.$$link("audio", opts['audio'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "PreviewAudio"
        }
},

    /**
     * TripleCLIPLoader from advanced/loaders
     * @desc 
    */
    "TripleCLIPLoader" : class extends Node{
        //Setters
        //set 'clip_name1'(value : void)  { super.$$link(0, value) } 
//set 'clip_name2'(value : void)  { super.$$link(1, value) } 
//set 'clip_name3'(value : void)  { super.$$link(2, value) } 

        //Getters
        get 'CLIP'() : CLIP { return [this.$uid.toString(), 0]  as unknown as CLIP; }

        /**
          * Constructor
		 * @param opts.clip_name1
		 * @param opts.clip_name2
		 * @param opts.clip_name3}
        */
        constructor(opts:{
            'clip_name1': void,'clip_name2': void,'clip_name3': void
        }){
            super(ctx);

            super.$$link("clip_name1", opts['clip_name1'])
super.$$link("clip_name2", opts['clip_name2'])
super.$$link("clip_name3", opts['clip_name3'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "TripleCLIPLoader"
        }
},

    /**
     * EmptySD3LatentImage from latent/sd3
     * @desc 
    */
    "EmptySD3LatentImage" : class extends Node{
        //Setters
        //set 'width'(value : INT)  { super.$$link(0, value) } 
//set 'height'(value : INT)  { super.$$link(1, value) } 
//set 'batch_size'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.width default: 1024 max: 16384 min: 16 step: 16
		 * @param opts.height default: 1024 max: 16384 min: 16 step: 16
		 * @param opts.batch_size default: 1 max: 4096 min: 1}
        */
        constructor(opts:{
            'width'?: INT,'height'?: INT,'batch_size'?: INT
        }){
            super(ctx);

            super.$$link("width", opts['width']??tmp["EmptySD3LatentImage"].defaults['width'])
super.$$link("height", opts['height']??tmp["EmptySD3LatentImage"].defaults['height'])
super.$$link("batch_size", opts['batch_size']??tmp["EmptySD3LatentImage"].defaults['batch_size'])
}

        static defaults = {
    'width':  1024,
'height':  1024,
'batch_size':  1
}
        protected override $$type(){
            return "EmptySD3LatentImage"
        }
},

    /**
     * CLIPTextEncodeSD3 from advanced/conditioning
     * @desc 
    */
    "CLIPTextEncodeSD3" : class extends Node{
        //Setters
        //set 'clip'(value : CLIP)  { super.$$link(0, value) } 
//set 'clip_l'(value : STRING)  { super.$$link(1, value) } 
//set 'clip_g'(value : STRING)  { super.$$link(2, value) } 
//set 't5xxl'(value : STRING)  { super.$$link(3, value) } 
//set 'empty_padding'(value : 'none'|'empty_prompt'| $dyn)  { super.$$link(4, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.clip
		 * @param opts.clip_l
		 * @param opts.clip_g
		 * @param opts.t5xxl
		 * @param opts.empty_padding}
        */
        constructor(opts:{
            'clip': CLIP,'clip_l': STRING,'clip_g': STRING,'t5xxl': STRING,'empty_padding': 'none'|'empty_prompt'| $dyn
        }){
            super(ctx);

            super.$$link("clip", opts['clip'])
super.$$link("clip_l", opts['clip_l'])
super.$$link("clip_g", opts['clip_g'])
super.$$link("t5xxl", opts['t5xxl'])
super.$$link("empty_padding", opts['empty_padding'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "CLIPTextEncodeSD3"
        }
},

    /**
     * ControlNetApply SD3 and HunyuanDiT from conditioning/controlnet
     * @desc 
    */
    "ControlNetApplySD3" : class extends Node{
        //Setters
        //set 'positive'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(1, value) } 
//set 'control_net'(value : CONTROL_NET)  { super.$$link(2, value) } 
//set 'vae'(value : VAE)  { super.$$link(3, value) } 
//set 'image'(value : IMAGE)  { super.$$link(4, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(5, value) } 
//set 'start_percent'(value : FLOAT)  { super.$$link(6, value) } 
//set 'end_percent'(value : FLOAT)  { super.$$link(7, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this.$uid.toString(), 1]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.control_net
		 * @param opts.vae
		 * @param opts.image
		 * @param opts.strength default: 1 step: 0.01
		 * @param opts.start_percent step: 0.001
		 * @param opts.end_percent default: 1 step: 0.001}
        */
        constructor(opts:{
            'positive': CONDITIONING,'negative': CONDITIONING,'control_net': CONTROL_NET,'vae': VAE,'image': IMAGE,'strength'?: FLOAT,'start_percent'?: FLOAT,'end_percent'?: FLOAT
        }){
            super(ctx);

            super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("control_net", opts['control_net'])
super.$$link("vae", opts['vae'])
super.$$link("image", opts['image'])
super.$$link("strength", opts['strength']??tmp["ControlNetApplySD3"].defaults['strength'])
super.$$link("start_percent", opts['start_percent']??tmp["ControlNetApplySD3"].defaults['start_percent'])
super.$$link("end_percent", opts['end_percent']??tmp["ControlNetApplySD3"].defaults['end_percent'])
}

        static defaults = {
    'strength':  1,
'start_percent':  0,
'end_percent':  1
}
        protected override $$type(){
            return "ControlNetApplySD3"
        }
},

    /**
     * GITSScheduler from sampling/custom_sampling/schedulers
     * @desc 
    */
    "GITSScheduler" : class extends Node{
        //Setters
        //set 'coeff'(value : FLOAT)  { super.$$link(0, value) } 
//set 'steps'(value : INT)  { super.$$link(1, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'SIGMAS'() : SIGMAS { return [this.$uid.toString(), 0]  as unknown as SIGMAS; }

        /**
          * Constructor
		 * @param opts.coeff default: 1.2 max: 1.5 min: 0.8 step: 0.05
		 * @param opts.steps default: 10 max: 1000 min: 2
		 * @param opts.denoise default: 1 step: 0.01}
        */
        constructor(opts:{
            'coeff'?: FLOAT,'steps'?: INT,'denoise'?: FLOAT
        }){
            super(ctx);

            super.$$link("coeff", opts['coeff']??tmp["GITSScheduler"].defaults['coeff'])
super.$$link("steps", opts['steps']??tmp["GITSScheduler"].defaults['steps'])
super.$$link("denoise", opts['denoise']??tmp["GITSScheduler"].defaults['denoise'])
}

        static defaults = {
    'coeff':  1.2,
'steps':  10,
'denoise':  1
}
        protected override $$type(){
            return "GITSScheduler"
        }
},

    /**
     * SetUnionControlNetType from conditioning/controlnet
     * @desc 
    */
    "SetUnionControlNetType" : class extends Node{
        //Setters
        //set 'control_net'(value : CONTROL_NET)  { super.$$link(0, value) } 
//set 'type'(value : 'auto'|'openpose'|'depth'|'hed/pidi/scribble/ted'|'canny/lineart/anime_lineart/mlsd'|'normal'|'segment'|'tile'|'repaint'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'CONTROL_NET'() : CONTROL_NET { return [this.$uid.toString(), 0]  as unknown as CONTROL_NET; }

        /**
          * Constructor
		 * @param opts.control_net
		 * @param opts.type}
        */
        constructor(opts:{
            'control_net': CONTROL_NET,'type': 'auto'|'openpose'|'depth'|'hed/pidi/scribble/ted'|'canny/lineart/anime_lineart/mlsd'|'normal'|'segment'|'tile'|'repaint'| $dyn
        }){
            super(ctx);

            super.$$link("control_net", opts['control_net'])
super.$$link("type", opts['type'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "SetUnionControlNetType"
        }
},

    /**
     * CLIPTextEncodeHunyuanDiT from advanced/conditioning
     * @desc 
    */
    "CLIPTextEncodeHunyuanDiT" : class extends Node{
        //Setters
        //set 'clip'(value : CLIP)  { super.$$link(0, value) } 
//set 'bert'(value : STRING)  { super.$$link(1, value) } 
//set 'mt5xl'(value : STRING)  { super.$$link(2, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.clip
		 * @param opts.bert
		 * @param opts.mt5xl}
        */
        constructor(opts:{
            'clip': CLIP,'bert': STRING,'mt5xl': STRING
        }){
            super(ctx);

            super.$$link("clip", opts['clip'])
super.$$link("bert", opts['bert'])
super.$$link("mt5xl", opts['mt5xl'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "CLIPTextEncodeHunyuanDiT"
        }
},

    /**
     * CLIPTextEncodeFlux from advanced/conditioning/flux
     * @desc 
    */
    "CLIPTextEncodeFlux" : class extends Node{
        //Setters
        //set 'clip'(value : CLIP)  { super.$$link(0, value) } 
//set 'clip_l'(value : STRING)  { super.$$link(1, value) } 
//set 't5xxl'(value : STRING)  { super.$$link(2, value) } 
//set 'guidance'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.clip
		 * @param opts.clip_l
		 * @param opts.t5xxl
		 * @param opts.guidance default: 3.5 step: 0.1}
        */
        constructor(opts:{
            'clip': CLIP,'clip_l': STRING,'t5xxl': STRING,'guidance'?: FLOAT
        }){
            super(ctx);

            super.$$link("clip", opts['clip'])
super.$$link("clip_l", opts['clip_l'])
super.$$link("t5xxl", opts['t5xxl'])
super.$$link("guidance", opts['guidance']??tmp["CLIPTextEncodeFlux"].defaults['guidance'])
}

        static defaults = {
    'guidance':  3.5
}
        protected override $$type(){
            return "CLIPTextEncodeFlux"
        }
},

    /**
     * FluxGuidance from advanced/conditioning/flux
     * @desc 
    */
    "FluxGuidance" : class extends Node{
        //Setters
        //set 'conditioning'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'guidance'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.conditioning
		 * @param opts.guidance default: 3.5 step: 0.1}
        */
        constructor(opts:{
            'conditioning': CONDITIONING,'guidance'?: FLOAT
        }){
            super(ctx);

            super.$$link("conditioning", opts['conditioning'])
super.$$link("guidance", opts['guidance']??tmp["FluxGuidance"].defaults['guidance'])
}

        static defaults = {
    'guidance':  3.5
}
        protected override $$type(){
            return "FluxGuidance"
        }
},

    /**
     * Load IDM-VTON Pipeline from ComfyUI-IDM-VTON
     * @desc 
    */
    "PipelineLoader" : class extends Node{
        //Setters
        //set 'weight_dtype'(value : 'float32'|'float16'|'bfloat16'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'PIPELINE'() : PIPELINE { return [this.$uid.toString(), 0]  as unknown as PIPELINE; }

        /**
          * Constructor
		 * @param opts.weight_dtype}
        */
        constructor(opts:{
            'weight_dtype': 'float32'|'float16'|'bfloat16'| $dyn
        }){
            super(ctx);

            super.$$link("weight_dtype", opts['weight_dtype'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "PipelineLoader"
        }
},

    /**
     * Run IDM-VTON Inference from ComfyUI-IDM-VTON
     * @desc 
    */
    "IDM-VTON" : class extends Node{
        //Setters
        //set 'pipeline'(value : PIPELINE)  { super.$$link(0, value) } 
//set 'human_img'(value : IMAGE)  { super.$$link(1, value) } 
//set 'pose_img'(value : IMAGE)  { super.$$link(2, value) } 
//set 'mask_img'(value : IMAGE)  { super.$$link(3, value) } 
//set 'garment_img'(value : IMAGE)  { super.$$link(4, value) } 
//set 'garment_description'(value : STRING)  { super.$$link(5, value) } 
//set 'negative_prompt'(value : STRING)  { super.$$link(6, value) } 
//set 'width'(value : INT)  { super.$$link(7, value) } 
//set 'height'(value : INT)  { super.$$link(8, value) } 
//set 'num_inference_steps'(value : INT)  { super.$$link(9, value) } 
//set 'guidance_scale'(value : FLOAT)  { super.$$link(10, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(11, value) } 
//set 'seed'(value : INT)  { super.$$link(12, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'MASK'() : MASK { return [this.$uid.toString(), 1]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.pipeline
		 * @param opts.human_img
		 * @param opts.pose_img
		 * @param opts.mask_img
		 * @param opts.garment_img
		 * @param opts.garment_description
		 * @param opts.negative_prompt
		 * @param opts.width default: 768
		 * @param opts.height default: 1024
		 * @param opts.num_inference_steps default: 30
		 * @param opts.guidance_scale default: 2
		 * @param opts.strength default: 1
		 * @param opts.seed default: 42}
        */
        constructor(opts:{
            'pipeline': PIPELINE,'human_img': IMAGE,'pose_img': IMAGE,'mask_img': IMAGE,'garment_img': IMAGE,'garment_description': STRING,'negative_prompt': STRING,'width'?: INT,'height'?: INT,'num_inference_steps'?: INT,'guidance_scale'?: FLOAT,'strength'?: FLOAT,'seed'?: INT
        }){
            super(ctx);

            super.$$link("pipeline", opts['pipeline'])
super.$$link("human_img", opts['human_img'])
super.$$link("pose_img", opts['pose_img'])
super.$$link("mask_img", opts['mask_img'])
super.$$link("garment_img", opts['garment_img'])
super.$$link("garment_description", opts['garment_description'])
super.$$link("negative_prompt", opts['negative_prompt'])
super.$$link("width", opts['width']??tmp["IDM-VTON"].defaults['width'])
super.$$link("height", opts['height']??tmp["IDM-VTON"].defaults['height'])
super.$$link("num_inference_steps", opts['num_inference_steps']??tmp["IDM-VTON"].defaults['num_inference_steps'])
super.$$link("guidance_scale", opts['guidance_scale']??tmp["IDM-VTON"].defaults['guidance_scale'])
super.$$link("strength", opts['strength']??tmp["IDM-VTON"].defaults['strength'])
super.$$link("seed", opts['seed']??tmp["IDM-VTON"].defaults['seed'])
}

        static defaults = {
    'width':  768,
'height':  1024,
'num_inference_steps':  30,
'guidance_scale':  2,
'strength':  1,
'seed':  42
}
        protected override $$type(){
            return "IDM-VTON"
        }
},

    /**
     * BLIP Model Loader from WAS Suite/Loaders
     * @desc 
    */
    "BLIP Model Loader" : class extends Node{
        //Setters
        //set 'blip_model'(value : STRING)  { super.$$link(0, value) } 
//set 'vqa_model_id'(value : STRING)  { super.$$link(1, value) } 
//set 'device'(value : 'cuda'|'cpu'| $dyn)  { super.$$link(2, value) } 

        //Getters
        get 'BLIP_MODEL'() : BLIP_MODEL { return [this.$uid.toString(), 0]  as unknown as BLIP_MODEL; }

        /**
          * Constructor
		 * @param opts.blip_model default: "Salesforce/blip-image-captioning-base"
		 * @param opts.vqa_model_id default: "Salesforce/blip-vqa-base"
		 * @param opts.device}
        */
        constructor(opts:{
            'blip_model'?: STRING,'vqa_model_id'?: STRING,'device': 'cuda'|'cpu'| $dyn
        }){
            super(ctx);

            super.$$link("blip_model", opts['blip_model']??tmp["BLIP Model Loader"].defaults['blip_model'])
super.$$link("vqa_model_id", opts['vqa_model_id']??tmp["BLIP Model Loader"].defaults['vqa_model_id'])
super.$$link("device", opts['device'])
}

        static defaults = {
    'blip_model':  "Salesforce/blip-image-captioning-base",
'vqa_model_id':  "Salesforce/blip-vqa-base"
}
        protected override $$type(){
            return "BLIP Model Loader"
        }
},

    /**
     * Blend Latents from WAS Suite/Latent
     * @desc 
    */
    "Blend Latents" : class extends Node{
        //Setters
        //set 'latent_a'(value : LATENT)  { super.$$link(0, value) } 
//set 'latent_b'(value : LATENT)  { super.$$link(1, value) } 
//set 'operation'(value : 'add'|'multiply'|'divide'|'subtract'|'overlay'|'hard_light'|'soft_light'|'screen'|'linear_dodge'|'difference'|'exclusion'|'random'| $dyn)  { super.$$link(2, value) } 
//set 'blend'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.latent_a
		 * @param opts.latent_b
		 * @param opts.operation
		 * @param opts.blend default: 0.5 max: 1 min: 0.01 step: 0.01}
        */
        constructor(opts:{
            'latent_a': LATENT,'latent_b': LATENT,'operation': 'add'|'multiply'|'divide'|'subtract'|'overlay'|'hard_light'|'soft_light'|'screen'|'linear_dodge'|'difference'|'exclusion'|'random'| $dyn,'blend'?: FLOAT
        }){
            super(ctx);

            super.$$link("latent_a", opts['latent_a'])
super.$$link("latent_b", opts['latent_b'])
super.$$link("operation", opts['operation'])
super.$$link("blend", opts['blend']??tmp["Blend Latents"].defaults['blend'])
}

        static defaults = {
    'blend':  0.5
}
        protected override $$type(){
            return "Blend Latents"
        }
},

    /**
     * Bus Node from WAS Suite/Utilities
     * @desc 
    */
    "Bus Node" : class extends Node{
        //Setters
        //set 'bus'(value : BUS)  { super.$$link(0, value) } 
//set 'model'(value : MODEL)  { super.$$link(1, value) } 
//set 'clip'(value : CLIP)  { super.$$link(2, value) } 
//set 'vae'(value : VAE)  { super.$$link(3, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(4, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(5, value) } 

        //Getters
        get 'bus'() : BUS { return [this.$uid.toString(), 0]  as unknown as BUS; }
get 'model'() : MODEL { return [this.$uid.toString(), 1]  as unknown as MODEL; }
get 'clip'() : CLIP { return [this.$uid.toString(), 2]  as unknown as CLIP; }
get 'vae'() : VAE { return [this.$uid.toString(), 3]  as unknown as VAE; }
get 'positive'() : CONDITIONING { return [this.$uid.toString(), 4]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this.$uid.toString(), 5]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.bus
		 * @param opts.model
		 * @param opts.clip
		 * @param opts.vae
		 * @param opts.positive
		 * @param opts.negative}
        */
        constructor(opts:{
            'bus'?: BUS,'model'?: MODEL,'clip'?: CLIP,'vae'?: VAE,'positive'?: CONDITIONING,'negative'?: CONDITIONING
        }){
            super(ctx);

            super.$$link("bus", opts['bus'])
super.$$link("model", opts['model'])
super.$$link("clip", opts['clip'])
super.$$link("vae", opts['vae'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Bus Node"
        }
},

    /**
     * Cache Node from WAS Suite/IO
     * @desc 
    */
    "Cache Node" : class extends Node{
        //Setters
        //set 'latent_suffix'(value : STRING)  { super.$$link(0, value) } 
//set 'image_suffix'(value : STRING)  { super.$$link(1, value) } 
//set 'conditioning_suffix'(value : STRING)  { super.$$link(2, value) } 
//set 'output_path'(value : STRING)  { super.$$link(3, value) } 
//set 'latent'(value : LATENT)  { super.$$link(4, value) } 
//set 'image'(value : IMAGE)  { super.$$link(5, value) } 
//set 'conditioning'(value : CONDITIONING)  { super.$$link(6, value) } 

        //Getters
        get 'latent_filename'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }
get 'image_filename'() : STRING { return [this.$uid.toString(), 1]  as unknown as STRING; }
get 'conditioning_filename'() : STRING { return [this.$uid.toString(), 2]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.latent_suffix default: "20735888_cache"
		 * @param opts.image_suffix default: "12715800_cache"
		 * @param opts.conditioning_suffix default: "87462280_cache"
		 * @param opts.output_path default: "/archive/shared/comfyui-krita/ComfyUI/custom_nodes/was-node-suite-comfyui/cache"
		 * @param opts.latent
		 * @param opts.image
		 * @param opts.conditioning}
        */
        constructor(opts:{
            'latent_suffix'?: STRING,'image_suffix'?: STRING,'conditioning_suffix'?: STRING,'output_path'?: STRING,'latent'?: LATENT,'image'?: IMAGE,'conditioning'?: CONDITIONING
        }){
            super(ctx);

            super.$$link("latent_suffix", opts['latent_suffix']??tmp["Cache Node"].defaults['latent_suffix'])
super.$$link("image_suffix", opts['image_suffix']??tmp["Cache Node"].defaults['image_suffix'])
super.$$link("conditioning_suffix", opts['conditioning_suffix']??tmp["Cache Node"].defaults['conditioning_suffix'])
super.$$link("output_path", opts['output_path']??tmp["Cache Node"].defaults['output_path'])
super.$$link("latent", opts['latent'])
super.$$link("image", opts['image'])
super.$$link("conditioning", opts['conditioning'])
}

        static defaults = {
    'latent_suffix':  "20735888_cache",
'image_suffix':  "12715800_cache",
'conditioning_suffix':  "87462280_cache",
'output_path':  "/archive/shared/comfyui-krita/ComfyUI/custom_nodes/was-node-suite-comfyui/cache"
}
        protected override $$type(){
            return "Cache Node"
        }
},

    /**
     * Checkpoint Loader from WAS Suite/Loaders/Advanced
     * @desc 
    */
    "Checkpoint Loader" : class extends Node{
        //Setters
        //set 'config_name'(value : 'anything_v3.yaml'|'v1-inference.yaml'|'v1-inference_clip_skip_2.yaml'|'v1-inference_clip_skip_2_fp16.yaml'|'v1-inference_fp16.yaml'|'v1-inpainting-inference.yaml'|'v2-inference-v.yaml'|'v2-inference-v_fp32.yaml'|'v2-inference.yaml'|'v2-inference_fp32.yaml'|'v2-inpainting-inference.yaml'| $dyn)  { super.$$link(0, value) } 
//set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this.$uid.toString(), 1]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this.$uid.toString(), 2]  as unknown as VAE; }
get 'NAME_STRING'() : STRING { return [this.$uid.toString(), 3]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.config_name
		 * @param opts.ckpt_name}
        */
        constructor(opts:{
            'config_name': 'anything_v3.yaml'|'v1-inference.yaml'|'v1-inference_clip_skip_2.yaml'|'v1-inference_clip_skip_2_fp16.yaml'|'v1-inference_fp16.yaml'|'v1-inpainting-inference.yaml'|'v2-inference-v.yaml'|'v2-inference-v_fp32.yaml'|'v2-inference.yaml'|'v2-inference_fp32.yaml'|'v2-inpainting-inference.yaml'| $dyn,'ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn
        }){
            super(ctx);

            super.$$link("config_name", opts['config_name'])
super.$$link("ckpt_name", opts['ckpt_name'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Checkpoint Loader"
        }
},

    /**
     * Checkpoint Loader (Simple) from WAS Suite/Loaders
     * @desc 
    */
    "Checkpoint Loader (Simple)" : class extends Node{
        //Setters
        //set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this.$uid.toString(), 1]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this.$uid.toString(), 2]  as unknown as VAE; }
get 'NAME_STRING'() : STRING { return [this.$uid.toString(), 3]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.ckpt_name}
        */
        constructor(opts:{
            'ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn
        }){
            super(ctx);

            super.$$link("ckpt_name", opts['ckpt_name'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Checkpoint Loader (Simple)"
        }
},

    /**
     * CLIPTextEncode (NSP) from WAS Suite/Conditioning
     * @desc 
    */
    "CLIPTextEncode (NSP)" : class extends Node{
        //Setters
        //set 'mode'(value : 'Noodle Soup Prompts'|'Wildcards'| $dyn)  { super.$$link(0, value) } 
//set 'noodle_key'(value : STRING)  { super.$$link(1, value) } 
//set 'seed'(value : INT)  { super.$$link(2, value) } 
//set 'text'(value : STRING)  { super.$$link(3, value) } 
//set 'clip'(value : CLIP)  { super.$$link(4, value) } 

        //Getters
        get 'conditioning'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }
get 'parsed_text'() : STRING { return [this.$uid.toString(), 1]  as unknown as STRING; }
get 'raw_text'() : STRING { return [this.$uid.toString(), 2]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.mode
		 * @param opts.noodle_key default: "__"
		 * @param opts.seed
		 * @param opts.text
		 * @param opts.clip}
        */
        constructor(opts:{
            'mode': 'Noodle Soup Prompts'|'Wildcards'| $dyn,'noodle_key'?: STRING,'seed'?: INT,'text': STRING,'clip': CLIP
        }){
            super(ctx);

            super.$$link("mode", opts['mode'])
super.$$link("noodle_key", opts['noodle_key']??tmp["CLIPTextEncode (NSP)"].defaults['noodle_key'])
super.$$link("seed", opts['seed']??tmp["CLIPTextEncode (NSP)"].defaults['seed'])
super.$$link("text", opts['text'])
super.$$link("clip", opts['clip'])
}

        static defaults = {
    'noodle_key':  "__",
'seed':  0
}
        protected override $$type(){
            return "CLIPTextEncode (NSP)"
        }
},

    /**
     * CLIP Input Switch from WAS Suite/Logic
     * @desc 
    */
    "CLIP Input Switch" : class extends Node{
        //Setters
        //set 'clip_a'(value : CLIP)  { super.$$link(0, value) } 
//set 'clip_b'(value : CLIP)  { super.$$link(1, value) } 
//set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'CLIP'() : CLIP { return [this.$uid.toString(), 0]  as unknown as CLIP; }

        /**
          * Constructor
		 * @param opts.clip_a
		 * @param opts.clip_b
		 * @param opts.boolean}
        */
        constructor(opts:{
            'clip_a': CLIP,'clip_b': CLIP,'boolean': BOOLEAN
        }){
            super(ctx);

            super.$$link("clip_a", opts['clip_a'])
super.$$link("clip_b", opts['clip_b'])
super.$$link("boolean", opts['boolean'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "CLIP Input Switch"
        }
},

    /**
     * CLIP Vision Input Switch from WAS Suite/Logic
     * @desc 
    */
    "CLIP Vision Input Switch" : class extends Node{
        //Setters
        //set 'clip_vision_a'(value : CLIP_VISION)  { super.$$link(0, value) } 
//set 'clip_vision_b'(value : CLIP_VISION)  { super.$$link(1, value) } 
//set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'CLIP_VISION'() : CLIP_VISION { return [this.$uid.toString(), 0]  as unknown as CLIP_VISION; }

        /**
          * Constructor
		 * @param opts.clip_vision_a
		 * @param opts.clip_vision_b
		 * @param opts.boolean}
        */
        constructor(opts:{
            'clip_vision_a': CLIP_VISION,'clip_vision_b': CLIP_VISION,'boolean': BOOLEAN
        }){
            super(ctx);

            super.$$link("clip_vision_a", opts['clip_vision_a'])
super.$$link("clip_vision_b", opts['clip_vision_b'])
super.$$link("boolean", opts['boolean'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "CLIP Vision Input Switch"
        }
},

    /**
     * Conditioning Input Switch from WAS Suite/Logic
     * @desc 
    */
    "Conditioning Input Switch" : class extends Node{
        //Setters
        //set 'conditioning_a'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'conditioning_b'(value : CONDITIONING)  { super.$$link(1, value) } 
//set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.conditioning_a
		 * @param opts.conditioning_b
		 * @param opts.boolean}
        */
        constructor(opts:{
            'conditioning_a': CONDITIONING,'conditioning_b': CONDITIONING,'boolean': BOOLEAN
        }){
            super(ctx);

            super.$$link("conditioning_a", opts['conditioning_a'])
super.$$link("conditioning_b", opts['conditioning_b'])
super.$$link("boolean", opts['boolean'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Conditioning Input Switch"
        }
},

    /**
     * Constant Number from WAS Suite/Number
     * @desc 
    */
    "Constant Number" : class extends Node{
        //Setters
        //set 'number_type'(value : 'integer'|'float'|'bool'| $dyn)  { super.$$link(0, value) } 
//set 'number'(value : FLOAT)  { super.$$link(1, value) } 
//set 'number_as_text'(value : STRING)  { super.$$link(2, value) } 

        //Getters
        get 'NUMBER'() : NUMBER { return [this.$uid.toString(), 0]  as unknown as NUMBER; }
get 'FLOAT'() : FLOAT { return [this.$uid.toString(), 1]  as unknown as FLOAT; }
get 'INT'() : INT { return [this.$uid.toString(), 2]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.number_type
		 * @param opts.number max: 18446744073709552000 min: -18446744073709552000 step: 0.01
		 * @param opts.number_as_text}
        */
        constructor(opts:{
            'number_type': 'integer'|'float'|'bool'| $dyn,'number'?: FLOAT,'number_as_text'?: STRING
        }){
            super(ctx);

            super.$$link("number_type", opts['number_type'])
super.$$link("number", opts['number']??tmp["Constant Number"].defaults['number'])
super.$$link("number_as_text", opts['number_as_text'])
}

        static defaults = {
    'number':  0
}
        protected override $$type(){
            return "Constant Number"
        }
},

    /**
     * Create Grid Image from WAS Suite/Image/Process
     * @desc 
    */
    "Create Grid Image" : class extends Node{
        //Setters
        //set 'images_path'(value : STRING)  { super.$$link(0, value) } 
//set 'pattern_glob'(value : STRING)  { super.$$link(1, value) } 
//set 'include_subfolders'(value : 'false'|'true'| $dyn)  { super.$$link(2, value) } 
//set 'border_width'(value : INT)  { super.$$link(3, value) } 
//set 'number_of_columns'(value : INT)  { super.$$link(4, value) } 
//set 'max_cell_size'(value : INT)  { super.$$link(5, value) } 
//set 'border_red'(value : INT)  { super.$$link(6, value) } 
//set 'border_green'(value : INT)  { super.$$link(7, value) } 
//set 'border_blue'(value : INT)  { super.$$link(8, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.images_path default: "./ComfyUI/input/"
		 * @param opts.pattern_glob default: "*"
		 * @param opts.include_subfolders
		 * @param opts.border_width default: 3 step: 1
		 * @param opts.number_of_columns default: 6 max: 24 min: 1 step: 1
		 * @param opts.max_cell_size default: 256 max: 1280 min: 32 step: 1
		 * @param opts.border_red step: 1
		 * @param opts.border_green step: 1
		 * @param opts.border_blue step: 1}
        */
        constructor(opts:{
            'images_path'?: STRING,'pattern_glob'?: STRING,'include_subfolders': 'false'|'true'| $dyn,'border_width'?: INT,'number_of_columns'?: INT,'max_cell_size'?: INT,'border_red'?: INT,'border_green'?: INT,'border_blue'?: INT
        }){
            super(ctx);

            super.$$link("images_path", opts['images_path']??tmp["Create Grid Image"].defaults['images_path'])
super.$$link("pattern_glob", opts['pattern_glob']??tmp["Create Grid Image"].defaults['pattern_glob'])
super.$$link("include_subfolders", opts['include_subfolders'])
super.$$link("border_width", opts['border_width']??tmp["Create Grid Image"].defaults['border_width'])
super.$$link("number_of_columns", opts['number_of_columns']??tmp["Create Grid Image"].defaults['number_of_columns'])
super.$$link("max_cell_size", opts['max_cell_size']??tmp["Create Grid Image"].defaults['max_cell_size'])
super.$$link("border_red", opts['border_red']??tmp["Create Grid Image"].defaults['border_red'])
super.$$link("border_green", opts['border_green']??tmp["Create Grid Image"].defaults['border_green'])
super.$$link("border_blue", opts['border_blue']??tmp["Create Grid Image"].defaults['border_blue'])
}

        static defaults = {
    'images_path':  "./ComfyUI/input/",
'pattern_glob':  "*",
'border_width':  3,
'number_of_columns':  6,
'max_cell_size':  256,
'border_red':  0,
'border_green':  0,
'border_blue':  0
}
        protected override $$type(){
            return "Create Grid Image"
        }
},

    /**
     * Create Grid Image from Batch from WAS Suite/Image/Process
     * @desc 
    */
    "Create Grid Image from Batch" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'border_width'(value : INT)  { super.$$link(1, value) } 
//set 'number_of_columns'(value : INT)  { super.$$link(2, value) } 
//set 'max_cell_size'(value : INT)  { super.$$link(3, value) } 
//set 'border_red'(value : INT)  { super.$$link(4, value) } 
//set 'border_green'(value : INT)  { super.$$link(5, value) } 
//set 'border_blue'(value : INT)  { super.$$link(6, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.border_width default: 3 step: 1
		 * @param opts.number_of_columns default: 6 max: 24 min: 1 step: 1
		 * @param opts.max_cell_size default: 256 max: 2048 min: 32 step: 1
		 * @param opts.border_red step: 1
		 * @param opts.border_green step: 1
		 * @param opts.border_blue step: 1}
        */
        constructor(opts:{
            'images': IMAGE,'border_width'?: INT,'number_of_columns'?: INT,'max_cell_size'?: INT,'border_red'?: INT,'border_green'?: INT,'border_blue'?: INT
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("border_width", opts['border_width']??tmp["Create Grid Image from Batch"].defaults['border_width'])
super.$$link("number_of_columns", opts['number_of_columns']??tmp["Create Grid Image from Batch"].defaults['number_of_columns'])
super.$$link("max_cell_size", opts['max_cell_size']??tmp["Create Grid Image from Batch"].defaults['max_cell_size'])
super.$$link("border_red", opts['border_red']??tmp["Create Grid Image from Batch"].defaults['border_red'])
super.$$link("border_green", opts['border_green']??tmp["Create Grid Image from Batch"].defaults['border_green'])
super.$$link("border_blue", opts['border_blue']??tmp["Create Grid Image from Batch"].defaults['border_blue'])
}

        static defaults = {
    'border_width':  3,
'number_of_columns':  6,
'max_cell_size':  256,
'border_red':  0,
'border_green':  0,
'border_blue':  0
}
        protected override $$type(){
            return "Create Grid Image from Batch"
        }
},

    /**
     * Create Morph Image from WAS Suite/Animation
     * @desc 
    */
    "Create Morph Image" : class extends Node{
        //Setters
        //set 'image_a'(value : IMAGE)  { super.$$link(0, value) } 
//set 'image_b'(value : IMAGE)  { super.$$link(1, value) } 
//set 'transition_frames'(value : INT)  { super.$$link(2, value) } 
//set 'still_image_delay_ms'(value : FLOAT)  { super.$$link(3, value) } 
//set 'duration_ms'(value : FLOAT)  { super.$$link(4, value) } 
//set 'loops'(value : INT)  { super.$$link(5, value) } 
//set 'max_size'(value : INT)  { super.$$link(6, value) } 
//set 'output_path'(value : STRING)  { super.$$link(7, value) } 
//set 'filename'(value : STRING)  { super.$$link(8, value) } 
//set 'filetype'(value : 'GIF'|'APNG'| $dyn)  { super.$$link(9, value) } 

        //Getters
        get 'image_a_pass'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'image_b_pass'() : IMAGE { return [this.$uid.toString(), 1]  as unknown as IMAGE; }
get 'filepath_text'() : STRING { return [this.$uid.toString(), 2]  as unknown as STRING; }
get 'filename_text'() : STRING { return [this.$uid.toString(), 3]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.image_a
		 * @param opts.image_b
		 * @param opts.transition_frames default: 30 max: 60 min: 2 step: 1
		 * @param opts.still_image_delay_ms default: 2500 max: 60000 min: 0.1 step: 0.1
		 * @param opts.duration_ms default: 0.1 max: 60000 min: 0.1 step: 0.1
		 * @param opts.loops step: 1
		 * @param opts.max_size default: 512 max: 1280 min: 128 step: 1
		 * @param opts.output_path default: "./ComfyUI/output"
		 * @param opts.filename default: "morph"
		 * @param opts.filetype}
        */
        constructor(opts:{
            'image_a': IMAGE,'image_b': IMAGE,'transition_frames'?: INT,'still_image_delay_ms'?: FLOAT,'duration_ms'?: FLOAT,'loops'?: INT,'max_size'?: INT,'output_path'?: STRING,'filename'?: STRING,'filetype': 'GIF'|'APNG'| $dyn
        }){
            super(ctx);

            super.$$link("image_a", opts['image_a'])
super.$$link("image_b", opts['image_b'])
super.$$link("transition_frames", opts['transition_frames']??tmp["Create Morph Image"].defaults['transition_frames'])
super.$$link("still_image_delay_ms", opts['still_image_delay_ms']??tmp["Create Morph Image"].defaults['still_image_delay_ms'])
super.$$link("duration_ms", opts['duration_ms']??tmp["Create Morph Image"].defaults['duration_ms'])
super.$$link("loops", opts['loops']??tmp["Create Morph Image"].defaults['loops'])
super.$$link("max_size", opts['max_size']??tmp["Create Morph Image"].defaults['max_size'])
super.$$link("output_path", opts['output_path']??tmp["Create Morph Image"].defaults['output_path'])
super.$$link("filename", opts['filename']??tmp["Create Morph Image"].defaults['filename'])
super.$$link("filetype", opts['filetype'])
}

        static defaults = {
    'transition_frames':  30,
'still_image_delay_ms':  2500,
'duration_ms':  0.1,
'loops':  0,
'max_size':  512,
'output_path':  "./ComfyUI/output",
'filename':  "morph"
}
        protected override $$type(){
            return "Create Morph Image"
        }
},

    /**
     * Create Morph Image from Path from WAS Suite/Animation
     * @desc 
    */
    "Create Morph Image from Path" : class extends Node{
        //Setters
        //set 'transition_frames'(value : INT)  { super.$$link(0, value) } 
//set 'still_image_delay_ms'(value : FLOAT)  { super.$$link(1, value) } 
//set 'duration_ms'(value : FLOAT)  { super.$$link(2, value) } 
//set 'loops'(value : INT)  { super.$$link(3, value) } 
//set 'max_size'(value : INT)  { super.$$link(4, value) } 
//set 'input_path'(value : STRING)  { super.$$link(5, value) } 
//set 'input_pattern'(value : STRING)  { super.$$link(6, value) } 
//set 'output_path'(value : STRING)  { super.$$link(7, value) } 
//set 'filename'(value : STRING)  { super.$$link(8, value) } 
//set 'filetype'(value : 'GIF'|'APNG'| $dyn)  { super.$$link(9, value) } 

        //Getters
        get 'filepath_text'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }
get 'filename_text'() : STRING { return [this.$uid.toString(), 1]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.transition_frames default: 30 max: 60 min: 2 step: 1
		 * @param opts.still_image_delay_ms default: 2500 max: 60000 min: 0.1 step: 0.1
		 * @param opts.duration_ms default: 0.1 max: 60000 min: 0.1 step: 0.1
		 * @param opts.loops step: 1
		 * @param opts.max_size default: 512 max: 1280 min: 128 step: 1
		 * @param opts.input_path default: "./ComfyUI"
		 * @param opts.input_pattern default: "*"
		 * @param opts.output_path default: "./ComfyUI/output"
		 * @param opts.filename default: "morph"
		 * @param opts.filetype}
        */
        constructor(opts:{
            'transition_frames'?: INT,'still_image_delay_ms'?: FLOAT,'duration_ms'?: FLOAT,'loops'?: INT,'max_size'?: INT,'input_path'?: STRING,'input_pattern'?: STRING,'output_path'?: STRING,'filename'?: STRING,'filetype': 'GIF'|'APNG'| $dyn
        }){
            super(ctx);

            super.$$link("transition_frames", opts['transition_frames']??tmp["Create Morph Image from Path"].defaults['transition_frames'])
super.$$link("still_image_delay_ms", opts['still_image_delay_ms']??tmp["Create Morph Image from Path"].defaults['still_image_delay_ms'])
super.$$link("duration_ms", opts['duration_ms']??tmp["Create Morph Image from Path"].defaults['duration_ms'])
super.$$link("loops", opts['loops']??tmp["Create Morph Image from Path"].defaults['loops'])
super.$$link("max_size", opts['max_size']??tmp["Create Morph Image from Path"].defaults['max_size'])
super.$$link("input_path", opts['input_path']??tmp["Create Morph Image from Path"].defaults['input_path'])
super.$$link("input_pattern", opts['input_pattern']??tmp["Create Morph Image from Path"].defaults['input_pattern'])
super.$$link("output_path", opts['output_path']??tmp["Create Morph Image from Path"].defaults['output_path'])
super.$$link("filename", opts['filename']??tmp["Create Morph Image from Path"].defaults['filename'])
super.$$link("filetype", opts['filetype'])
}

        static defaults = {
    'transition_frames':  30,
'still_image_delay_ms':  2500,
'duration_ms':  0.1,
'loops':  0,
'max_size':  512,
'input_path':  "./ComfyUI",
'input_pattern':  "*",
'output_path':  "./ComfyUI/output",
'filename':  "morph"
}
        protected override $$type(){
            return "Create Morph Image from Path"
        }
},

    /**
     * Create Video from Path from WAS Suite/Animation
     * @desc 
    */
    "Create Video from Path" : class extends Node{
        //Setters
        //set 'transition_frames'(value : INT)  { super.$$link(0, value) } 
//set 'image_delay_sec'(value : FLOAT)  { super.$$link(1, value) } 
//set 'fps'(value : INT)  { super.$$link(2, value) } 
//set 'max_size'(value : INT)  { super.$$link(3, value) } 
//set 'input_path'(value : STRING)  { super.$$link(4, value) } 
//set 'output_path'(value : STRING)  { super.$$link(5, value) } 
//set 'filename'(value : STRING)  { super.$$link(6, value) } 
//set 'codec'(value : 'AVC1'|'FFV1'|'H264'|'MP4V'| $dyn)  { super.$$link(7, value) } 

        //Getters
        get 'filepath_text'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }
get 'filename_text'() : STRING { return [this.$uid.toString(), 1]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.transition_frames default: 30 step: 1
		 * @param opts.image_delay_sec default: 2.5 max: 60000 min: 0.01 step: 0.01
		 * @param opts.fps default: 30 max: 60 min: 1 step: 1
		 * @param opts.max_size default: 512 max: 1920 min: 128 step: 1
		 * @param opts.input_path default: "./ComfyUI/input"
		 * @param opts.output_path default: "./ComfyUI/output"
		 * @param opts.filename default: "comfy_video"
		 * @param opts.codec}
        */
        constructor(opts:{
            'transition_frames'?: INT,'image_delay_sec'?: FLOAT,'fps'?: INT,'max_size'?: INT,'input_path'?: STRING,'output_path'?: STRING,'filename'?: STRING,'codec': 'AVC1'|'FFV1'|'H264'|'MP4V'| $dyn
        }){
            super(ctx);

            super.$$link("transition_frames", opts['transition_frames']??tmp["Create Video from Path"].defaults['transition_frames'])
super.$$link("image_delay_sec", opts['image_delay_sec']??tmp["Create Video from Path"].defaults['image_delay_sec'])
super.$$link("fps", opts['fps']??tmp["Create Video from Path"].defaults['fps'])
super.$$link("max_size", opts['max_size']??tmp["Create Video from Path"].defaults['max_size'])
super.$$link("input_path", opts['input_path']??tmp["Create Video from Path"].defaults['input_path'])
super.$$link("output_path", opts['output_path']??tmp["Create Video from Path"].defaults['output_path'])
super.$$link("filename", opts['filename']??tmp["Create Video from Path"].defaults['filename'])
super.$$link("codec", opts['codec'])
}

        static defaults = {
    'transition_frames':  30,
'image_delay_sec':  2.5,
'fps':  30,
'max_size':  512,
'input_path':  "./ComfyUI/input",
'output_path':  "./ComfyUI/output",
'filename':  "comfy_video"
}
        protected override $$type(){
            return "Create Video from Path"
        }
},

    /**
     * CLIPSeg Masking from WAS Suite/Image/Masking
     * @desc 
    */
    "CLIPSeg Masking" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'text'(value : STRING)  { super.$$link(1, value) } 
//set 'clipseg_model'(value : CLIPSEG_MODEL)  { super.$$link(2, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }
get 'MASK_IMAGE'() : IMAGE { return [this.$uid.toString(), 1]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.text
		 * @param opts.clipseg_model}
        */
        constructor(opts:{
            'image': IMAGE,'text'?: STRING,'clipseg_model'?: CLIPSEG_MODEL
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("text", opts['text']??tmp["CLIPSeg Masking"].defaults['text'])
super.$$link("clipseg_model", opts['clipseg_model'])
}

        static defaults = {
    'text':  ""
}
        protected override $$type(){
            return "CLIPSeg Masking"
        }
},

    /**
     * CLIPSeg Model Loader from WAS Suite/Loaders
     * @desc 
    */
    "CLIPSeg Model Loader" : class extends Node{
        //Setters
        //set 'model'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'clipseg_model'() : CLIPSEG_MODEL { return [this.$uid.toString(), 0]  as unknown as CLIPSEG_MODEL; }

        /**
          * Constructor
		 * @param opts.model default: "CIDAS/clipseg-rd64-refined"}
        */
        constructor(opts:{
            'model'?: STRING
        }){
            super(ctx);

            super.$$link("model", opts['model']??tmp["CLIPSeg Model Loader"].defaults['model'])
}

        static defaults = {
    'model':  "CIDAS/clipseg-rd64-refined"
}
        protected override $$type(){
            return "CLIPSeg Model Loader"
        }
},

    /**
     * CLIPSeg Batch Masking from WAS Suite/Image/Masking
     * @desc 
    */
    "CLIPSeg Batch Masking" : class extends Node{
        //Setters
        //set 'image_a'(value : IMAGE)  { super.$$link(0, value) } 
//set 'image_b'(value : IMAGE)  { super.$$link(1, value) } 
//set 'text_a'(value : STRING)  { super.$$link(2, value) } 
//set 'text_b'(value : STRING)  { super.$$link(3, value) } 
//set 'image_c'(value : IMAGE)  { super.$$link(4, value) } 
//set 'image_d'(value : IMAGE)  { super.$$link(5, value) } 
//set 'image_e'(value : IMAGE)  { super.$$link(6, value) } 
//set 'image_f'(value : IMAGE)  { super.$$link(7, value) } 
//set 'text_c'(value : STRING)  { super.$$link(8, value) } 
//set 'text_d'(value : STRING)  { super.$$link(9, value) } 
//set 'text_e'(value : STRING)  { super.$$link(10, value) } 
//set 'text_f'(value : STRING)  { super.$$link(11, value) } 

        //Getters
        get 'IMAGES_BATCH'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'MASKS_BATCH'() : MASK { return [this.$uid.toString(), 1]  as unknown as MASK; }
get 'MASK_IMAGES_BATCH'() : IMAGE { return [this.$uid.toString(), 2]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image_a
		 * @param opts.image_b
		 * @param opts.text_a
		 * @param opts.text_b
		 * @param opts.image_c
		 * @param opts.image_d
		 * @param opts.image_e
		 * @param opts.image_f
		 * @param opts.text_c
		 * @param opts.text_d
		 * @param opts.text_e
		 * @param opts.text_f}
        */
        constructor(opts:{
            'image_a': IMAGE,'image_b': IMAGE,'text_a'?: STRING,'text_b'?: STRING,'image_c'?: IMAGE,'image_d'?: IMAGE,'image_e'?: IMAGE,'image_f'?: IMAGE,'text_c'?: STRING,'text_d'?: STRING,'text_e'?: STRING,'text_f'?: STRING
        }){
            super(ctx);

            super.$$link("image_a", opts['image_a'])
super.$$link("image_b", opts['image_b'])
super.$$link("text_a", opts['text_a']??tmp["CLIPSeg Batch Masking"].defaults['text_a'])
super.$$link("text_b", opts['text_b']??tmp["CLIPSeg Batch Masking"].defaults['text_b'])
super.$$link("image_c", opts['image_c'])
super.$$link("image_d", opts['image_d'])
super.$$link("image_e", opts['image_e'])
super.$$link("image_f", opts['image_f'])
super.$$link("text_c", opts['text_c']??tmp["CLIPSeg Batch Masking"].defaults['text_c'])
super.$$link("text_d", opts['text_d']??tmp["CLIPSeg Batch Masking"].defaults['text_d'])
super.$$link("text_e", opts['text_e']??tmp["CLIPSeg Batch Masking"].defaults['text_e'])
super.$$link("text_f", opts['text_f']??tmp["CLIPSeg Batch Masking"].defaults['text_f'])
}

        static defaults = {
    'text_a':  "",
'text_b':  "",
'text_c':  "",
'text_d':  "",
'text_e':  "",
'text_f':  ""
}
        protected override $$type(){
            return "CLIPSeg Batch Masking"
        }
},

    /**
     * Convert Masks to Images from WAS Suite/Image/Masking
     * @desc 
    */
    "Convert Masks to Images" : class extends Node{
        //Setters
        //set 'masks'(value : MASK)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGES'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.masks}
        */
        constructor(opts:{
            'masks': MASK
        }){
            super(ctx);

            super.$$link("masks", opts['masks'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Convert Masks to Images"
        }
},

    /**
     * Control Net Model Input Switch from WAS Suite/Logic
     * @desc 
    */
    "Control Net Model Input Switch" : class extends Node{
        //Setters
        //set 'control_net_a'(value : CONTROL_NET)  { super.$$link(0, value) } 
//set 'control_net_b'(value : CONTROL_NET)  { super.$$link(1, value) } 
//set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'CONTROL_NET'() : CONTROL_NET { return [this.$uid.toString(), 0]  as unknown as CONTROL_NET; }

        /**
          * Constructor
		 * @param opts.control_net_a
		 * @param opts.control_net_b
		 * @param opts.boolean}
        */
        constructor(opts:{
            'control_net_a': CONTROL_NET,'control_net_b': CONTROL_NET,'boolean': BOOLEAN
        }){
            super(ctx);

            super.$$link("control_net_a", opts['control_net_a'])
super.$$link("control_net_b", opts['control_net_b'])
super.$$link("boolean", opts['boolean'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Control Net Model Input Switch"
        }
},

    /**
     * Debug Number to Console from WAS Suite/Debug
     * @desc 
    */
    "Debug Number to Console" : class extends Node{
        //Setters
        //set 'number'(value : NUMBER)  { super.$$link(0, value) } 
//set 'label'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'NUMBER'() : NUMBER { return [this.$uid.toString(), 0]  as unknown as NUMBER; }

        /**
          * Constructor
		 * @param opts.number
		 * @param opts.label default: "Debug to Console"}
        */
        constructor(opts:{
            'number': NUMBER,'label'?: STRING
        }){
            super(ctx);

            super.$$link("number", opts['number'])
super.$$link("label", opts['label']??tmp["Debug Number to Console"].defaults['label'])
}

        static defaults = {
    'label':  "Debug to Console"
}
        protected override $$type(){
            return "Debug Number to Console"
        }
},

    /**
     * Dictionary to Console from WAS Suite/Debug
     * @desc 
    */
    "Dictionary to Console" : class extends Node{
        //Setters
        //set 'dictionary'(value : DICT)  { super.$$link(0, value) } 
//set 'label'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'DICT'() : DICT { return [this.$uid.toString(), 0]  as unknown as DICT; }

        /**
          * Constructor
		 * @param opts.dictionary
		 * @param opts.label default: "Dictionary Output"}
        */
        constructor(opts:{
            'dictionary': DICT,'label'?: STRING
        }){
            super(ctx);

            super.$$link("dictionary", opts['dictionary'])
super.$$link("label", opts['label']??tmp["Dictionary to Console"].defaults['label'])
}

        static defaults = {
    'label':  "Dictionary Output"
}
        protected override $$type(){
            return "Dictionary to Console"
        }
},

    /**
     * Diffusers Model Loader from WAS Suite/Loaders/Advanced
     * @desc 
    */
    "Diffusers Model Loader" : class extends Node{
        //Setters
        //set 'model_path'(value : void)  { super.$$link(0, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this.$uid.toString(), 1]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this.$uid.toString(), 2]  as unknown as VAE; }
get 'NAME_STRING'() : STRING { return [this.$uid.toString(), 3]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.model_path}
        */
        constructor(opts:{
            'model_path': void
        }){
            super(ctx);

            super.$$link("model_path", opts['model_path'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Diffusers Model Loader"
        }
},

    /**
     * Diffusers Hub Model Down-Loader from WAS Suite/Loaders/Advanced
     * @desc 
    */
    "Diffusers Hub Model Down-Loader" : class extends Node{
        //Setters
        //set 'repo_id'(value : STRING)  { super.$$link(0, value) } 
//set 'revision'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this.$uid.toString(), 1]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this.$uid.toString(), 2]  as unknown as VAE; }
get 'NAME_STRING'() : STRING { return [this.$uid.toString(), 3]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.repo_id
		 * @param opts.revision default: "None"}
        */
        constructor(opts:{
            'repo_id': STRING,'revision'?: STRING
        }){
            super(ctx);

            super.$$link("repo_id", opts['repo_id'])
super.$$link("revision", opts['revision']??tmp["Diffusers Hub Model Down-Loader"].defaults['revision'])
}

        static defaults = {
    'revision':  "None"
}
        protected override $$type(){
            return "Diffusers Hub Model Down-Loader"
        }
},

    /**
     * Export API from WAS Suite/Debug
     * @desc 
    */
    "Export API" : class extends Node{
        //Setters
        //set 'save_prompt_api'(value : 'true'|'true'| $dyn)  { super.$$link(0, value) } 
//set 'output_path'(value : STRING)  { super.$$link(1, value) } 
//set 'filename_prefix'(value : STRING)  { super.$$link(2, value) } 
//set 'filename_delimiter'(value : STRING)  { super.$$link(3, value) } 
//set 'filename_number_padding'(value : INT)  { super.$$link(4, value) } 
//set 'parse_text_tokens'(value : BOOLEAN)  { super.$$link(5, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.save_prompt_api
		 * @param opts.output_path default: "./ComfyUI/output/"
		 * @param opts.filename_prefix default: "ComfyUI_Prompt"
		 * @param opts.filename_delimiter default: "_"
		 * @param opts.filename_number_padding default: 4 max: 9 min: 2 step: 1
		 * @param opts.parse_text_tokens}
        */
        constructor(opts:{
            'save_prompt_api': 'true'|'true'| $dyn,'output_path'?: STRING,'filename_prefix'?: STRING,'filename_delimiter'?: STRING,'filename_number_padding'?: INT,'parse_text_tokens'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("save_prompt_api", opts['save_prompt_api'])
super.$$link("output_path", opts['output_path']??tmp["Export API"].defaults['output_path'])
super.$$link("filename_prefix", opts['filename_prefix']??tmp["Export API"].defaults['filename_prefix'])
super.$$link("filename_delimiter", opts['filename_delimiter']??tmp["Export API"].defaults['filename_delimiter'])
super.$$link("filename_number_padding", opts['filename_number_padding']??tmp["Export API"].defaults['filename_number_padding'])
super.$$link("parse_text_tokens", opts['parse_text_tokens']??tmp["Export API"].defaults['parse_text_tokens'])
}

        static defaults = {
    'output_path':  "./ComfyUI/output/",
'filename_prefix':  "ComfyUI_Prompt",
'filename_delimiter':  "_",
'filename_number_padding':  4,
'parse_text_tokens':  false
}
        protected override $$type(){
            return "Export API"
        }
},

    /**
     * Latent Input Switch from WAS Suite/Logic
     * @desc 
    */
    "Latent Input Switch" : class extends Node{
        //Setters
        //set 'latent_a'(value : LATENT)  { super.$$link(0, value) } 
//set 'latent_b'(value : LATENT)  { super.$$link(1, value) } 
//set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.latent_a
		 * @param opts.latent_b
		 * @param opts.boolean}
        */
        constructor(opts:{
            'latent_a': LATENT,'latent_b': LATENT,'boolean': BOOLEAN
        }){
            super(ctx);

            super.$$link("latent_a", opts['latent_a'])
super.$$link("latent_b", opts['latent_b'])
super.$$link("boolean", opts['boolean'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Latent Input Switch"
        }
},

    /**
     * Load Cache from WAS Suite/IO
     * @desc 
    */
    "Load Cache" : class extends Node{
        //Setters
        //set 'latent_path'(value : STRING)  { super.$$link(0, value) } 
//set 'image_path'(value : STRING)  { super.$$link(1, value) } 
//set 'conditioning_path'(value : STRING)  { super.$$link(2, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }
get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 1]  as unknown as IMAGE; }
get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 2]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.latent_path
		 * @param opts.image_path
		 * @param opts.conditioning_path}
        */
        constructor(opts:{
            'latent_path'?: STRING,'image_path'?: STRING,'conditioning_path'?: STRING
        }){
            super(ctx);

            super.$$link("latent_path", opts['latent_path']??tmp["Load Cache"].defaults['latent_path'])
super.$$link("image_path", opts['image_path']??tmp["Load Cache"].defaults['image_path'])
super.$$link("conditioning_path", opts['conditioning_path']??tmp["Load Cache"].defaults['conditioning_path'])
}

        static defaults = {
    'latent_path':  "",
'image_path':  "",
'conditioning_path':  ""
}
        protected override $$type(){
            return "Load Cache"
        }
},

    /**
     * Logic Boolean from WAS Suite/Logic
     * @desc 
    */
    "Logic Boolean" : class extends Node{
        //Setters
        //set 'boolean'(value : FLOAT)  { super.$$link(0, value) } 

        //Getters
        get 'BOOLEAN'() : BOOLEAN { return [this.$uid.toString(), 0]  as unknown as BOOLEAN; }
get 'NUMBER'() : NUMBER { return [this.$uid.toString(), 1]  as unknown as NUMBER; }
get 'INT'() : INT { return [this.$uid.toString(), 2]  as unknown as INT; }
get 'FLOAT'() : FLOAT { return [this.$uid.toString(), 3]  as unknown as FLOAT; }

        /**
          * Constructor
		 * @param opts.boolean default: 1 step: 0.01}
        */
        constructor(opts:{
            'boolean'?: FLOAT
        }){
            super(ctx);

            super.$$link("boolean", opts['boolean']??tmp["Logic Boolean"].defaults['boolean'])
}

        static defaults = {
    'boolean':  1
}
        protected override $$type(){
            return "Logic Boolean"
        }
},

    /**
     * Logic Boolean Primitive from WAS Suite/Logic
     * @desc 
    */
    "Logic Boolean Primitive" : class extends Node{
        //Setters
        //set 'boolean'(value : BOOLEAN)  { super.$$link(0, value) } 

        //Getters
        get 'BOOLEAN'() : BOOLEAN { return [this.$uid.toString(), 0]  as unknown as BOOLEAN; }

        /**
          * Constructor
		 * @param opts.boolean}
        */
        constructor(opts:{
            'boolean'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("boolean", opts['boolean']??tmp["Logic Boolean Primitive"].defaults['boolean'])
}

        static defaults = {
    'boolean':  false
}
        protected override $$type(){
            return "Logic Boolean Primitive"
        }
},

    /**
     * Logic Comparison OR from WAS Suite/Logic
     * @desc 
    */
    "Logic Comparison OR" : class extends Node{
        //Setters
        //set 'boolean_a'(value : BOOLEAN)  { super.$$link(0, value) } 
//set 'boolean_b'(value : BOOLEAN)  { super.$$link(1, value) } 

        //Getters
        get 'BOOLEAN'() : BOOLEAN { return [this.$uid.toString(), 0]  as unknown as BOOLEAN; }

        /**
          * Constructor
		 * @param opts.boolean_a
		 * @param opts.boolean_b}
        */
        constructor(opts:{
            'boolean_a'?: BOOLEAN,'boolean_b'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("boolean_a", opts['boolean_a']??tmp["Logic Comparison OR"].defaults['boolean_a'])
super.$$link("boolean_b", opts['boolean_b']??tmp["Logic Comparison OR"].defaults['boolean_b'])
}

        static defaults = {
    'boolean_a':  false,
'boolean_b':  false
}
        protected override $$type(){
            return "Logic Comparison OR"
        }
},

    /**
     * Logic Comparison AND from WAS Suite/Logic
     * @desc 
    */
    "Logic Comparison AND" : class extends Node{
        //Setters
        //set 'boolean_a'(value : BOOLEAN)  { super.$$link(0, value) } 
//set 'boolean_b'(value : BOOLEAN)  { super.$$link(1, value) } 

        //Getters
        get 'BOOLEAN'() : BOOLEAN { return [this.$uid.toString(), 0]  as unknown as BOOLEAN; }

        /**
          * Constructor
		 * @param opts.boolean_a
		 * @param opts.boolean_b}
        */
        constructor(opts:{
            'boolean_a'?: BOOLEAN,'boolean_b'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("boolean_a", opts['boolean_a']??tmp["Logic Comparison AND"].defaults['boolean_a'])
super.$$link("boolean_b", opts['boolean_b']??tmp["Logic Comparison AND"].defaults['boolean_b'])
}

        static defaults = {
    'boolean_a':  false,
'boolean_b':  false
}
        protected override $$type(){
            return "Logic Comparison AND"
        }
},

    /**
     * Logic Comparison XOR from WAS Suite/Logic
     * @desc 
    */
    "Logic Comparison XOR" : class extends Node{
        //Setters
        //set 'boolean_a'(value : BOOLEAN)  { super.$$link(0, value) } 
//set 'boolean_b'(value : BOOLEAN)  { super.$$link(1, value) } 

        //Getters
        get 'BOOLEAN'() : BOOLEAN { return [this.$uid.toString(), 0]  as unknown as BOOLEAN; }

        /**
          * Constructor
		 * @param opts.boolean_a
		 * @param opts.boolean_b}
        */
        constructor(opts:{
            'boolean_a'?: BOOLEAN,'boolean_b'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("boolean_a", opts['boolean_a']??tmp["Logic Comparison XOR"].defaults['boolean_a'])
super.$$link("boolean_b", opts['boolean_b']??tmp["Logic Comparison XOR"].defaults['boolean_b'])
}

        static defaults = {
    'boolean_a':  false,
'boolean_b':  false
}
        protected override $$type(){
            return "Logic Comparison XOR"
        }
},

    /**
     * Logic NOT from WAS Suite/Logic
     * @desc 
    */
    "Logic NOT" : class extends Node{
        //Setters
        //set 'boolean'(value : BOOLEAN)  { super.$$link(0, value) } 

        //Getters
        get 'BOOLEAN'() : BOOLEAN { return [this.$uid.toString(), 0]  as unknown as BOOLEAN; }

        /**
          * Constructor
		 * @param opts.boolean}
        */
        constructor(opts:{
            'boolean'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("boolean", opts['boolean']??tmp["Logic NOT"].defaults['boolean'])
}

        static defaults = {
    'boolean':  false
}
        protected override $$type(){
            return "Logic NOT"
        }
},

    /**
     * Lora Loader from WAS Suite/Loaders
     * @desc 
    */
    "Lora Loader" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'clip'(value : CLIP)  { super.$$link(1, value) } 
//set 'lora_name'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(2, value) } 
//set 'strength_model'(value : FLOAT)  { super.$$link(3, value) } 
//set 'strength_clip'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this.$uid.toString(), 1]  as unknown as CLIP; }
get 'NAME_STRING'() : STRING { return [this.$uid.toString(), 2]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.clip
		 * @param opts.lora_name
		 * @param opts.strength_model default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.strength_clip default: 1 max: 10 min: -10 step: 0.01}
        */
        constructor(opts:{
            'model': MODEL,'clip': CLIP,'lora_name': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'strength_model'?: FLOAT,'strength_clip'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("clip", opts['clip'])
super.$$link("lora_name", opts['lora_name'])
super.$$link("strength_model", opts['strength_model']??tmp["Lora Loader"].defaults['strength_model'])
super.$$link("strength_clip", opts['strength_clip']??tmp["Lora Loader"].defaults['strength_clip'])
}

        static defaults = {
    'strength_model':  1,
'strength_clip':  1
}
        protected override $$type(){
            return "Lora Loader"
        }
},

    /**
     * Hex to HSL from WAS Suite/Utilities
     * @desc 
    */
    "Hex to HSL" : class extends Node{
        //Setters
        //set 'hex_color'(value : STRING)  { super.$$link(0, value) } 
//set 'include_alpha'(value : BOOLEAN)  { super.$$link(1, value) } 

        //Getters
        get 'hue'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }
get 'saturation'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }
get 'lightness'() : INT { return [this.$uid.toString(), 2]  as unknown as INT; }
get 'alpha'() : FLOAT { return [this.$uid.toString(), 3]  as unknown as FLOAT; }
get 'hsl'() : STRING { return [this.$uid.toString(), 4]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.hex_color default: "#FF0000"
		 * @param opts.include_alpha}
        */
        constructor(opts:{
            'hex_color'?: STRING,'include_alpha'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("hex_color", opts['hex_color']??tmp["Hex to HSL"].defaults['hex_color'])
super.$$link("include_alpha", opts['include_alpha']??tmp["Hex to HSL"].defaults['include_alpha'])
}

        static defaults = {
    'hex_color':  "#FF0000",
'include_alpha':  false
}
        protected override $$type(){
            return "Hex to HSL"
        }
},

    /**
     * HSL to Hex from WAS Suite/Utilities
     * @desc 
    */
    "HSL to Hex" : class extends Node{
        //Setters
        //set 'hsl_color'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'hex_color'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.hsl_color default: "hsl(0, 100%, 50%)"}
        */
        constructor(opts:{
            'hsl_color'?: STRING
        }){
            super(ctx);

            super.$$link("hsl_color", opts['hsl_color']??tmp["HSL to Hex"].defaults['hsl_color'])
}

        static defaults = {
    'hsl_color':  "hsl(0, 100%, 50%)"
}
        protected override $$type(){
            return "HSL to Hex"
        }
},

    /**
     * Image SSAO (Ambient Occlusion) from WAS Suite/Image/Filter
     * @desc 
    */
    "Image SSAO (Ambient Occlusion)" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'depth_images'(value : IMAGE)  { super.$$link(1, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(2, value) } 
//set 'radius'(value : FLOAT)  { super.$$link(3, value) } 
//set 'ao_blur'(value : FLOAT)  { super.$$link(4, value) } 
//set 'specular_threshold'(value : INT)  { super.$$link(5, value) } 
//set 'enable_specular_masking'(value : 'True'|'False'| $dyn)  { super.$$link(6, value) } 
//set 'tile_size'(value : INT)  { super.$$link(7, value) } 

        //Getters
        get 'composited_images'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'ssao_images'() : IMAGE { return [this.$uid.toString(), 1]  as unknown as IMAGE; }
get 'specular_mask_images'() : IMAGE { return [this.$uid.toString(), 2]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.depth_images
		 * @param opts.strength default: 1 step: 0.01
		 * @param opts.radius default: 30 max: 1024 min: 0.01 step: 0.01
		 * @param opts.ao_blur default: 2.5 max: 1024 min: 0.01 step: 0.01
		 * @param opts.specular_threshold default: 25 step: 1
		 * @param opts.enable_specular_masking
		 * @param opts.tile_size default: 1 max: 512 min: 1 step: 1}
        */
        constructor(opts:{
            'images': IMAGE,'depth_images': IMAGE,'strength'?: FLOAT,'radius'?: FLOAT,'ao_blur'?: FLOAT,'specular_threshold'?: INT,'enable_specular_masking': 'True'|'False'| $dyn,'tile_size'?: INT
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("depth_images", opts['depth_images'])
super.$$link("strength", opts['strength']??tmp["Image SSAO (Ambient Occlusion)"].defaults['strength'])
super.$$link("radius", opts['radius']??tmp["Image SSAO (Ambient Occlusion)"].defaults['radius'])
super.$$link("ao_blur", opts['ao_blur']??tmp["Image SSAO (Ambient Occlusion)"].defaults['ao_blur'])
super.$$link("specular_threshold", opts['specular_threshold']??tmp["Image SSAO (Ambient Occlusion)"].defaults['specular_threshold'])
super.$$link("enable_specular_masking", opts['enable_specular_masking'])
super.$$link("tile_size", opts['tile_size']??tmp["Image SSAO (Ambient Occlusion)"].defaults['tile_size'])
}

        static defaults = {
    'strength':  1,
'radius':  30,
'ao_blur':  2.5,
'specular_threshold':  25,
'tile_size':  1
}
        protected override $$type(){
            return "Image SSAO (Ambient Occlusion)"
        }
},

    /**
     * Image SSDO (Direct Occlusion) from WAS Suite/Image/Filter
     * @desc 
    */
    "Image SSDO (Direct Occlusion)" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'depth_images'(value : IMAGE)  { super.$$link(1, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(2, value) } 
//set 'radius'(value : FLOAT)  { super.$$link(3, value) } 
//set 'specular_threshold'(value : INT)  { super.$$link(4, value) } 
//set 'colored_occlusion'(value : 'True'|'False'| $dyn)  { super.$$link(5, value) } 

        //Getters
        get 'composited_images'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'ssdo_images'() : IMAGE { return [this.$uid.toString(), 1]  as unknown as IMAGE; }
get 'ssdo_image_masks'() : IMAGE { return [this.$uid.toString(), 2]  as unknown as IMAGE; }
get 'light_source_image_masks'() : IMAGE { return [this.$uid.toString(), 3]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.depth_images
		 * @param opts.strength default: 1 step: 0.01
		 * @param opts.radius default: 30 max: 1024 min: 0.01 step: 0.01
		 * @param opts.specular_threshold default: 128 step: 1
		 * @param opts.colored_occlusion}
        */
        constructor(opts:{
            'images': IMAGE,'depth_images': IMAGE,'strength'?: FLOAT,'radius'?: FLOAT,'specular_threshold'?: INT,'colored_occlusion': 'True'|'False'| $dyn
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("depth_images", opts['depth_images'])
super.$$link("strength", opts['strength']??tmp["Image SSDO (Direct Occlusion)"].defaults['strength'])
super.$$link("radius", opts['radius']??tmp["Image SSDO (Direct Occlusion)"].defaults['radius'])
super.$$link("specular_threshold", opts['specular_threshold']??tmp["Image SSDO (Direct Occlusion)"].defaults['specular_threshold'])
super.$$link("colored_occlusion", opts['colored_occlusion'])
}

        static defaults = {
    'strength':  1,
'radius':  30,
'specular_threshold':  128
}
        protected override $$type(){
            return "Image SSDO (Direct Occlusion)"
        }
},

    /**
     * Image Analyze from WAS Suite/Image/Analyze
     * @desc 
    */
    "Image Analyze" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'mode'(value : 'Black White Levels'|'RGB Levels'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.mode}
        */
        constructor(opts:{
            'image': IMAGE,'mode': 'Black White Levels'|'RGB Levels'| $dyn
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("mode", opts['mode'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Image Analyze"
        }
},

    /**
     * Image Aspect Ratio from WAS Suite/Logic
     * @desc 
    */
    "Image Aspect Ratio" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'width'(value : NUMBER)  { super.$$link(1, value) } 
//set 'height'(value : NUMBER)  { super.$$link(2, value) } 

        //Getters
        get 'aspect_number'() : NUMBER { return [this.$uid.toString(), 0]  as unknown as NUMBER; }
get 'aspect_float'() : FLOAT { return [this.$uid.toString(), 1]  as unknown as FLOAT; }
get 'is_landscape_bool'() : NUMBER { return [this.$uid.toString(), 2]  as unknown as NUMBER; }
get 'aspect_ratio_common'() : STRING { return [this.$uid.toString(), 3]  as unknown as STRING; }
get 'aspect_type'() : STRING { return [this.$uid.toString(), 4]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.width
		 * @param opts.height}
        */
        constructor(opts:{
            'image'?: IMAGE,'width'?: NUMBER,'height'?: NUMBER
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("width", opts['width'])
super.$$link("height", opts['height'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Image Aspect Ratio"
        }
},

    /**
     * Image Batch from WAS Suite/Image
     * @desc 
    */
    "Image Batch" : class extends Node{
        //Setters
        //set 'images_a'(value : IMAGE)  { super.$$link(0, value) } 
//set 'images_b'(value : IMAGE)  { super.$$link(1, value) } 
//set 'images_c'(value : IMAGE)  { super.$$link(2, value) } 
//set 'images_d'(value : IMAGE)  { super.$$link(3, value) } 

        //Getters
        get 'image'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.images_a
		 * @param opts.images_b
		 * @param opts.images_c
		 * @param opts.images_d}
        */
        constructor(opts:{
            'images_a'?: IMAGE,'images_b'?: IMAGE,'images_c'?: IMAGE,'images_d'?: IMAGE
        }){
            super(ctx);

            super.$$link("images_a", opts['images_a'])
super.$$link("images_b", opts['images_b'])
super.$$link("images_c", opts['images_c'])
super.$$link("images_d", opts['images_d'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Image Batch"
        }
},

    /**
     * Image Blank from WAS Suite/Image
     * @desc 
    */
    "Image Blank" : class extends Node{
        //Setters
        //set 'width'(value : INT)  { super.$$link(0, value) } 
//set 'height'(value : INT)  { super.$$link(1, value) } 
//set 'red'(value : INT)  { super.$$link(2, value) } 
//set 'green'(value : INT)  { super.$$link(3, value) } 
//set 'blue'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.width default: 512 max: 4096 min: 8 step: 1
		 * @param opts.height default: 512 max: 4096 min: 8 step: 1
		 * @param opts.red default: 255 step: 1
		 * @param opts.green default: 255 step: 1
		 * @param opts.blue default: 255 step: 1}
        */
        constructor(opts:{
            'width'?: INT,'height'?: INT,'red'?: INT,'green'?: INT,'blue'?: INT
        }){
            super(ctx);

            super.$$link("width", opts['width']??tmp["Image Blank"].defaults['width'])
super.$$link("height", opts['height']??tmp["Image Blank"].defaults['height'])
super.$$link("red", opts['red']??tmp["Image Blank"].defaults['red'])
super.$$link("green", opts['green']??tmp["Image Blank"].defaults['green'])
super.$$link("blue", opts['blue']??tmp["Image Blank"].defaults['blue'])
}

        static defaults = {
    'width':  512,
'height':  512,
'red':  255,
'green':  255,
'blue':  255
}
        protected override $$type(){
            return "Image Blank"
        }
},

    /**
     * Image Blend by Mask from WAS Suite/Image
     * @desc 
    */
    "Image Blend by Mask" : class extends Node{
        //Setters
        //set 'image_a'(value : IMAGE)  { super.$$link(0, value) } 
//set 'image_b'(value : IMAGE)  { super.$$link(1, value) } 
//set 'mask'(value : IMAGE)  { super.$$link(2, value) } 
//set 'blend_percentage'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image_a
		 * @param opts.image_b
		 * @param opts.mask
		 * @param opts.blend_percentage default: 0.5 step: 0.01}
        */
        constructor(opts:{
            'image_a': IMAGE,'image_b': IMAGE,'mask': IMAGE,'blend_percentage'?: FLOAT
        }){
            super(ctx);

            super.$$link("image_a", opts['image_a'])
super.$$link("image_b", opts['image_b'])
super.$$link("mask", opts['mask'])
super.$$link("blend_percentage", opts['blend_percentage']??tmp["Image Blend by Mask"].defaults['blend_percentage'])
}

        static defaults = {
    'blend_percentage':  0.5
}
        protected override $$type(){
            return "Image Blend by Mask"
        }
},

    /**
     * Image Blend from WAS Suite/Image
     * @desc 
    */
    "Image Blend" : class extends Node{
        //Setters
        //set 'image_a'(value : IMAGE)  { super.$$link(0, value) } 
//set 'image_b'(value : IMAGE)  { super.$$link(1, value) } 
//set 'blend_percentage'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'image'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image_a
		 * @param opts.image_b
		 * @param opts.blend_percentage default: 0.5 step: 0.01}
        */
        constructor(opts:{
            'image_a': IMAGE,'image_b': IMAGE,'blend_percentage'?: FLOAT
        }){
            super(ctx);

            super.$$link("image_a", opts['image_a'])
super.$$link("image_b", opts['image_b'])
super.$$link("blend_percentage", opts['blend_percentage']??tmp["Image Blend"].defaults['blend_percentage'])
}

        static defaults = {
    'blend_percentage':  0.5
}
        protected override $$type(){
            return "Image Blend"
        }
},

    /**
     * Image Blending Mode from WAS Suite/Image
     * @desc 
    */
    "Image Blending Mode" : class extends Node{
        //Setters
        //set 'image_a'(value : IMAGE)  { super.$$link(0, value) } 
//set 'image_b'(value : IMAGE)  { super.$$link(1, value) } 
//set 'mode'(value : 'add'|'color'|'color_burn'|'color_dodge'|'darken'|'difference'|'exclusion'|'hard_light'|'hue'|'lighten'|'multiply'|'overlay'|'screen'|'soft_light'| $dyn)  { super.$$link(2, value) } 
//set 'blend_percentage'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'image'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image_a
		 * @param opts.image_b
		 * @param opts.mode
		 * @param opts.blend_percentage default: 1 step: 0.01}
        */
        constructor(opts:{
            'image_a': IMAGE,'image_b': IMAGE,'mode': 'add'|'color'|'color_burn'|'color_dodge'|'darken'|'difference'|'exclusion'|'hard_light'|'hue'|'lighten'|'multiply'|'overlay'|'screen'|'soft_light'| $dyn,'blend_percentage'?: FLOAT
        }){
            super(ctx);

            super.$$link("image_a", opts['image_a'])
super.$$link("image_b", opts['image_b'])
super.$$link("mode", opts['mode'])
super.$$link("blend_percentage", opts['blend_percentage']??tmp["Image Blending Mode"].defaults['blend_percentage'])
}

        static defaults = {
    'blend_percentage':  1
}
        protected override $$type(){
            return "Image Blending Mode"
        }
},

    /**
     * Image Bloom Filter from WAS Suite/Image/Filter
     * @desc 
    */
    "Image Bloom Filter" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'radius'(value : FLOAT)  { super.$$link(1, value) } 
//set 'intensity'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.radius default: 10 step: 0.1
		 * @param opts.intensity default: 1 step: 0.1}
        */
        constructor(opts:{
            'image': IMAGE,'radius'?: FLOAT,'intensity'?: FLOAT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("radius", opts['radius']??tmp["Image Bloom Filter"].defaults['radius'])
super.$$link("intensity", opts['intensity']??tmp["Image Bloom Filter"].defaults['intensity'])
}

        static defaults = {
    'radius':  10,
'intensity':  1
}
        protected override $$type(){
            return "Image Bloom Filter"
        }
},

    /**
     * Image Canny Filter from WAS Suite/Image/Filter
     * @desc 
    */
    "Image Canny Filter" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'enable_threshold'(value : 'false'|'true'| $dyn)  { super.$$link(1, value) } 
//set 'threshold_low'(value : FLOAT)  { super.$$link(2, value) } 
//set 'threshold_high'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'images'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.enable_threshold
		 * @param opts.threshold_low step: 0.01
		 * @param opts.threshold_high default: 1 step: 0.01}
        */
        constructor(opts:{
            'images': IMAGE,'enable_threshold': 'false'|'true'| $dyn,'threshold_low'?: FLOAT,'threshold_high'?: FLOAT
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("enable_threshold", opts['enable_threshold'])
super.$$link("threshold_low", opts['threshold_low']??tmp["Image Canny Filter"].defaults['threshold_low'])
super.$$link("threshold_high", opts['threshold_high']??tmp["Image Canny Filter"].defaults['threshold_high'])
}

        static defaults = {
    'threshold_low':  0,
'threshold_high':  1
}
        protected override $$type(){
            return "Image Canny Filter"
        }
},

    /**
     * Image Chromatic Aberration from WAS Suite/Image/Filter
     * @desc 
    */
    "Image Chromatic Aberration" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'red_offset'(value : INT)  { super.$$link(1, value) } 
//set 'green_offset'(value : INT)  { super.$$link(2, value) } 
//set 'blue_offset'(value : INT)  { super.$$link(3, value) } 
//set 'intensity'(value : FLOAT)  { super.$$link(4, value) } 
//set 'fade_radius'(value : INT)  { super.$$link(5, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.red_offset default: 2 max: 255 min: -255 step: 1
		 * @param opts.green_offset default: -1 max: 255 min: -255 step: 1
		 * @param opts.blue_offset default: 1 max: 255 min: -255 step: 1
		 * @param opts.intensity default: 0.5 step: 0.01
		 * @param opts.fade_radius default: 12 step: 1}
        */
        constructor(opts:{
            'image': IMAGE,'red_offset'?: INT,'green_offset'?: INT,'blue_offset'?: INT,'intensity'?: FLOAT,'fade_radius'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("red_offset", opts['red_offset']??tmp["Image Chromatic Aberration"].defaults['red_offset'])
super.$$link("green_offset", opts['green_offset']??tmp["Image Chromatic Aberration"].defaults['green_offset'])
super.$$link("blue_offset", opts['blue_offset']??tmp["Image Chromatic Aberration"].defaults['blue_offset'])
super.$$link("intensity", opts['intensity']??tmp["Image Chromatic Aberration"].defaults['intensity'])
super.$$link("fade_radius", opts['fade_radius']??tmp["Image Chromatic Aberration"].defaults['fade_radius'])
}

        static defaults = {
    'red_offset':  2,
'green_offset':  -1,
'blue_offset':  1,
'intensity':  0.5,
'fade_radius':  12
}
        protected override $$type(){
            return "Image Chromatic Aberration"
        }
},

    /**
     * Image Color Palette from WAS Suite/Image/Analyze
     * @desc 
    */
    "Image Color Palette" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'colors'(value : INT)  { super.$$link(1, value) } 
//set 'mode'(value : 'Chart'|'back_to_back'| $dyn)  { super.$$link(2, value) } 

        //Getters
        get 'image'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'color_palettes'() : LIST { return [this.$uid.toString(), 1]  as unknown as LIST; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.colors default: 16 max: 256 min: 8 step: 1
		 * @param opts.mode}
        */
        constructor(opts:{
            'image': IMAGE,'colors'?: INT,'mode': 'Chart'|'back_to_back'| $dyn
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("colors", opts['colors']??tmp["Image Color Palette"].defaults['colors'])
super.$$link("mode", opts['mode'])
}

        static defaults = {
    'colors':  16
}
        protected override $$type(){
            return "Image Color Palette"
        }
},

    /**
     * Image Crop Face from WAS Suite/Image/Process
     * @desc 
    */
    "Image Crop Face" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'crop_padding_factor'(value : FLOAT)  { super.$$link(1, value) } 
//set 'cascade_xml'(value : 'lbpcascade_animeface.xml'|'haarcascade_frontalface_default.xml'|'haarcascade_frontalface_alt.xml'|'haarcascade_frontalface_alt2.xml'|'haarcascade_frontalface_alt_tree.xml'|'haarcascade_profileface.xml'|'haarcascade_upperbody.xml'|'haarcascade_eye.xml'| $dyn)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'CROP_DATA'() : CROP_DATA { return [this.$uid.toString(), 1]  as unknown as CROP_DATA; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.crop_padding_factor default: 0.25 step: 0.01
		 * @param opts.cascade_xml}
        */
        constructor(opts:{
            'image': IMAGE,'crop_padding_factor'?: FLOAT,'cascade_xml': 'lbpcascade_animeface.xml'|'haarcascade_frontalface_default.xml'|'haarcascade_frontalface_alt.xml'|'haarcascade_frontalface_alt2.xml'|'haarcascade_frontalface_alt_tree.xml'|'haarcascade_profileface.xml'|'haarcascade_upperbody.xml'|'haarcascade_eye.xml'| $dyn
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("crop_padding_factor", opts['crop_padding_factor']??tmp["Image Crop Face"].defaults['crop_padding_factor'])
super.$$link("cascade_xml", opts['cascade_xml'])
}

        static defaults = {
    'crop_padding_factor':  0.25
}
        protected override $$type(){
            return "Image Crop Face"
        }
},

    /**
     * Image Crop Location from WAS Suite/Image/Process
     * @desc 
    */
    "Image Crop Location" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'top'(value : INT)  { super.$$link(1, value) } 
//set 'left'(value : INT)  { super.$$link(2, value) } 
//set 'right'(value : INT)  { super.$$link(3, value) } 
//set 'bottom'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'CROP_DATA'() : CROP_DATA { return [this.$uid.toString(), 1]  as unknown as CROP_DATA; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.top step: 1
		 * @param opts.left step: 1
		 * @param opts.right default: 256 step: 1
		 * @param opts.bottom default: 256 step: 1}
        */
        constructor(opts:{
            'image': IMAGE,'top'?: INT,'left'?: INT,'right'?: INT,'bottom'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("top", opts['top']??tmp["Image Crop Location"].defaults['top'])
super.$$link("left", opts['left']??tmp["Image Crop Location"].defaults['left'])
super.$$link("right", opts['right']??tmp["Image Crop Location"].defaults['right'])
super.$$link("bottom", opts['bottom']??tmp["Image Crop Location"].defaults['bottom'])
}

        static defaults = {
    'top':  0,
'left':  0,
'right':  256,
'bottom':  256
}
        protected override $$type(){
            return "Image Crop Location"
        }
},

    /**
     * Image Crop Square Location from WAS Suite/Image/Process
     * @desc 
    */
    "Image Crop Square Location" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'x'(value : INT)  { super.$$link(1, value) } 
//set 'y'(value : INT)  { super.$$link(2, value) } 
//set 'size'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'CROP_DATA'() : CROP_DATA { return [this.$uid.toString(), 1]  as unknown as CROP_DATA; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.x step: 1
		 * @param opts.y step: 1
		 * @param opts.size default: 256 max: 4096 min: 5 step: 1}
        */
        constructor(opts:{
            'image': IMAGE,'x'?: INT,'y'?: INT,'size'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("x", opts['x']??tmp["Image Crop Square Location"].defaults['x'])
super.$$link("y", opts['y']??tmp["Image Crop Square Location"].defaults['y'])
super.$$link("size", opts['size']??tmp["Image Crop Square Location"].defaults['size'])
}

        static defaults = {
    'x':  0,
'y':  0,
'size':  256
}
        protected override $$type(){
            return "Image Crop Square Location"
        }
},

    /**
     * Image Displacement Warp from WAS Suite/Image/Transform
     * @desc 
    */
    "Image Displacement Warp" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'displacement_maps'(value : IMAGE)  { super.$$link(1, value) } 
//set 'amplitude'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'images'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.displacement_maps
		 * @param opts.amplitude default: 25 max: 4096 min: -4096 step: 0.1}
        */
        constructor(opts:{
            'images': IMAGE,'displacement_maps': IMAGE,'amplitude'?: FLOAT
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("displacement_maps", opts['displacement_maps'])
super.$$link("amplitude", opts['amplitude']??tmp["Image Displacement Warp"].defaults['amplitude'])
}

        static defaults = {
    'amplitude':  25
}
        protected override $$type(){
            return "Image Displacement Warp"
        }
},

    /**
     * Image Lucy Sharpen from WAS Suite/Image/Filter
     * @desc 
    */
    "Image Lucy Sharpen" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'iterations'(value : INT)  { super.$$link(1, value) } 
//set 'kernel_size'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.iterations default: 2 max: 12 min: 1 step: 1
		 * @param opts.kernel_size default: 3 max: 16 min: 1 step: 1}
        */
        constructor(opts:{
            'images': IMAGE,'iterations'?: INT,'kernel_size'?: INT
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("iterations", opts['iterations']??tmp["Image Lucy Sharpen"].defaults['iterations'])
super.$$link("kernel_size", opts['kernel_size']??tmp["Image Lucy Sharpen"].defaults['kernel_size'])
}

        static defaults = {
    'iterations':  2,
'kernel_size':  3
}
        protected override $$type(){
            return "Image Lucy Sharpen"
        }
},

    /**
     * Image Paste Face from WAS Suite/Image/Process
     * @desc 
    */
    "Image Paste Face" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'crop_image'(value : IMAGE)  { super.$$link(1, value) } 
//set 'crop_data'(value : CROP_DATA)  { super.$$link(2, value) } 
//set 'crop_blending'(value : FLOAT)  { super.$$link(3, value) } 
//set 'crop_sharpening'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'MASK_IMAGE'() : IMAGE { return [this.$uid.toString(), 1]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.crop_image
		 * @param opts.crop_data
		 * @param opts.crop_blending default: 0.25 step: 0.01
		 * @param opts.crop_sharpening step: 1}
        */
        constructor(opts:{
            'image': IMAGE,'crop_image': IMAGE,'crop_data': CROP_DATA,'crop_blending'?: FLOAT,'crop_sharpening'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("crop_image", opts['crop_image'])
super.$$link("crop_data", opts['crop_data'])
super.$$link("crop_blending", opts['crop_blending']??tmp["Image Paste Face"].defaults['crop_blending'])
super.$$link("crop_sharpening", opts['crop_sharpening']??tmp["Image Paste Face"].defaults['crop_sharpening'])
}

        static defaults = {
    'crop_blending':  0.25,
'crop_sharpening':  0
}
        protected override $$type(){
            return "Image Paste Face"
        }
},

    /**
     * Image Paste Crop from WAS Suite/Image/Process
     * @desc 
    */
    "Image Paste Crop" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'crop_image'(value : IMAGE)  { super.$$link(1, value) } 
//set 'crop_data'(value : CROP_DATA)  { super.$$link(2, value) } 
//set 'crop_blending'(value : FLOAT)  { super.$$link(3, value) } 
//set 'crop_sharpening'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.crop_image
		 * @param opts.crop_data
		 * @param opts.crop_blending default: 0.25 step: 0.01
		 * @param opts.crop_sharpening step: 1}
        */
        constructor(opts:{
            'image': IMAGE,'crop_image': IMAGE,'crop_data': CROP_DATA,'crop_blending'?: FLOAT,'crop_sharpening'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("crop_image", opts['crop_image'])
super.$$link("crop_data", opts['crop_data'])
super.$$link("crop_blending", opts['crop_blending']??tmp["Image Paste Crop"].defaults['crop_blending'])
super.$$link("crop_sharpening", opts['crop_sharpening']??tmp["Image Paste Crop"].defaults['crop_sharpening'])
}

        static defaults = {
    'crop_blending':  0.25,
'crop_sharpening':  0
}
        protected override $$type(){
            return "Image Paste Crop"
        }
},

    /**
     * Image Paste Crop by Location from WAS Suite/Image/Process
     * @desc 
    */
    "Image Paste Crop by Location" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'crop_image'(value : IMAGE)  { super.$$link(1, value) } 
//set 'top'(value : INT)  { super.$$link(2, value) } 
//set 'left'(value : INT)  { super.$$link(3, value) } 
//set 'right'(value : INT)  { super.$$link(4, value) } 
//set 'bottom'(value : INT)  { super.$$link(5, value) } 
//set 'crop_blending'(value : FLOAT)  { super.$$link(6, value) } 
//set 'crop_sharpening'(value : INT)  { super.$$link(7, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.crop_image
		 * @param opts.top step: 1
		 * @param opts.left step: 1
		 * @param opts.right default: 256 step: 1
		 * @param opts.bottom default: 256 step: 1
		 * @param opts.crop_blending default: 0.25 step: 0.01
		 * @param opts.crop_sharpening step: 1}
        */
        constructor(opts:{
            'image': IMAGE,'crop_image': IMAGE,'top'?: INT,'left'?: INT,'right'?: INT,'bottom'?: INT,'crop_blending'?: FLOAT,'crop_sharpening'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("crop_image", opts['crop_image'])
super.$$link("top", opts['top']??tmp["Image Paste Crop by Location"].defaults['top'])
super.$$link("left", opts['left']??tmp["Image Paste Crop by Location"].defaults['left'])
super.$$link("right", opts['right']??tmp["Image Paste Crop by Location"].defaults['right'])
super.$$link("bottom", opts['bottom']??tmp["Image Paste Crop by Location"].defaults['bottom'])
super.$$link("crop_blending", opts['crop_blending']??tmp["Image Paste Crop by Location"].defaults['crop_blending'])
super.$$link("crop_sharpening", opts['crop_sharpening']??tmp["Image Paste Crop by Location"].defaults['crop_sharpening'])
}

        static defaults = {
    'top':  0,
'left':  0,
'right':  256,
'bottom':  256,
'crop_blending':  0.25,
'crop_sharpening':  0
}
        protected override $$type(){
            return "Image Paste Crop by Location"
        }
},

    /**
     * Image Pixelate from WAS Suite/Image/Process
     * @desc 
    */
    "Image Pixelate" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'pixelation_size'(value : FLOAT)  { super.$$link(1, value) } 
//set 'num_colors'(value : FLOAT)  { super.$$link(2, value) } 
//set 'init_mode'(value : 'k-means++'|'random'|'none'| $dyn)  { super.$$link(3, value) } 
//set 'max_iterations'(value : FLOAT)  { super.$$link(4, value) } 
//set 'dither'(value : 'False'|'True'| $dyn)  { super.$$link(5, value) } 
//set 'dither_mode'(value : 'FloydSteinberg'|'Ordered'| $dyn)  { super.$$link(6, value) } 
//set 'color_palettes'(value : LIST)  { super.$$link(7, value) } 
//set 'color_palette_mode'(value : 'Brightness'|'BrightnessAndTonal'|'Linear'|'Tonal'| $dyn)  { super.$$link(8, value) } 
//set 'reverse_palette'(value : 'False'|'True'| $dyn)  { super.$$link(9, value) } 

        //Getters
        get 'images'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.pixelation_size default: 164 max: 480 min: 16 step: 1
		 * @param opts.num_colors default: 16 max: 256 min: 2 step: 1
		 * @param opts.init_mode
		 * @param opts.max_iterations default: 100 max: 256 min: 1 step: 1
		 * @param opts.dither
		 * @param opts.dither_mode
		 * @param opts.color_palettes
		 * @param opts.color_palette_mode
		 * @param opts.reverse_palette}
        */
        constructor(opts:{
            'images': IMAGE,'pixelation_size'?: FLOAT,'num_colors'?: FLOAT,'init_mode': 'k-means++'|'random'|'none'| $dyn,'max_iterations'?: FLOAT,'dither': 'False'|'True'| $dyn,'dither_mode': 'FloydSteinberg'|'Ordered'| $dyn,'color_palettes'?: LIST,'color_palette_mode'?: 'Brightness'|'BrightnessAndTonal'|'Linear'|'Tonal'| $dyn,'reverse_palette'?: 'False'|'True'| $dyn
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("pixelation_size", opts['pixelation_size']??tmp["Image Pixelate"].defaults['pixelation_size'])
super.$$link("num_colors", opts['num_colors']??tmp["Image Pixelate"].defaults['num_colors'])
super.$$link("init_mode", opts['init_mode'])
super.$$link("max_iterations", opts['max_iterations']??tmp["Image Pixelate"].defaults['max_iterations'])
super.$$link("dither", opts['dither'])
super.$$link("dither_mode", opts['dither_mode'])
super.$$link("color_palettes", opts['color_palettes'])
super.$$link("color_palette_mode", opts['color_palette_mode'])
super.$$link("reverse_palette", opts['reverse_palette'])
}

        static defaults = {
    'pixelation_size':  164,
'num_colors':  16,
'max_iterations':  100
}
        protected override $$type(){
            return "Image Pixelate"
        }
},

    /**
     * Image Power Noise from WAS Suite/Image/Generate/Noise
     * @desc 
    */
    "Image Power Noise" : class extends Node{
        //Setters
        //set 'width'(value : INT)  { super.$$link(0, value) } 
//set 'height'(value : INT)  { super.$$link(1, value) } 
//set 'frequency'(value : FLOAT)  { super.$$link(2, value) } 
//set 'attenuation'(value : FLOAT)  { super.$$link(3, value) } 
//set 'noise_type'(value : 'grey'|'white'|'pink'|'blue'|'green'|'mix'| $dyn)  { super.$$link(4, value) } 
//set 'seed'(value : INT)  { super.$$link(5, value) } 

        //Getters
        get 'image'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.width default: 512 max: 4096 min: 64 step: 1
		 * @param opts.height default: 512 max: 4096 min: 64 step: 1
		 * @param opts.frequency default: 0.5 step: 0.01
		 * @param opts.attenuation default: 0.5 step: 0.01
		 * @param opts.noise_type
		 * @param opts.seed}
        */
        constructor(opts:{
            'width'?: INT,'height'?: INT,'frequency'?: FLOAT,'attenuation'?: FLOAT,'noise_type': 'grey'|'white'|'pink'|'blue'|'green'|'mix'| $dyn,'seed'?: INT
        }){
            super(ctx);

            super.$$link("width", opts['width']??tmp["Image Power Noise"].defaults['width'])
super.$$link("height", opts['height']??tmp["Image Power Noise"].defaults['height'])
super.$$link("frequency", opts['frequency']??tmp["Image Power Noise"].defaults['frequency'])
super.$$link("attenuation", opts['attenuation']??tmp["Image Power Noise"].defaults['attenuation'])
super.$$link("noise_type", opts['noise_type'])
super.$$link("seed", opts['seed']??tmp["Image Power Noise"].defaults['seed'])
}

        static defaults = {
    'width':  512,
'height':  512,
'frequency':  0.5,
'attenuation':  0.5,
'seed':  0
}
        protected override $$type(){
            return "Image Power Noise"
        }
},

    /**
     * Image Dragan Photography Filter from WAS Suite/Image/Filter
     * @desc 
    */
    "Image Dragan Photography Filter" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'saturation'(value : FLOAT)  { super.$$link(1, value) } 
//set 'contrast'(value : FLOAT)  { super.$$link(2, value) } 
//set 'brightness'(value : FLOAT)  { super.$$link(3, value) } 
//set 'sharpness'(value : FLOAT)  { super.$$link(4, value) } 
//set 'highpass_radius'(value : FLOAT)  { super.$$link(5, value) } 
//set 'highpass_samples'(value : INT)  { super.$$link(6, value) } 
//set 'highpass_strength'(value : FLOAT)  { super.$$link(7, value) } 
//set 'colorize'(value : 'true'|'false'| $dyn)  { super.$$link(8, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.saturation default: 1 step: 0.01
		 * @param opts.contrast default: 1 step: 0.01
		 * @param opts.brightness default: 1 step: 0.01
		 * @param opts.sharpness default: 1 step: 0.01
		 * @param opts.highpass_radius default: 6 step: 0.01
		 * @param opts.highpass_samples default: 1 step: 1
		 * @param opts.highpass_strength default: 1 step: 0.01
		 * @param opts.colorize}
        */
        constructor(opts:{
            'image': IMAGE,'saturation'?: FLOAT,'contrast'?: FLOAT,'brightness'?: FLOAT,'sharpness'?: FLOAT,'highpass_radius'?: FLOAT,'highpass_samples'?: INT,'highpass_strength'?: FLOAT,'colorize': 'true'|'false'| $dyn
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("saturation", opts['saturation']??tmp["Image Dragan Photography Filter"].defaults['saturation'])
super.$$link("contrast", opts['contrast']??tmp["Image Dragan Photography Filter"].defaults['contrast'])
super.$$link("brightness", opts['brightness']??tmp["Image Dragan Photography Filter"].defaults['brightness'])
super.$$link("sharpness", opts['sharpness']??tmp["Image Dragan Photography Filter"].defaults['sharpness'])
super.$$link("highpass_radius", opts['highpass_radius']??tmp["Image Dragan Photography Filter"].defaults['highpass_radius'])
super.$$link("highpass_samples", opts['highpass_samples']??tmp["Image Dragan Photography Filter"].defaults['highpass_samples'])
super.$$link("highpass_strength", opts['highpass_strength']??tmp["Image Dragan Photography Filter"].defaults['highpass_strength'])
super.$$link("colorize", opts['colorize'])
}

        static defaults = {
    'saturation':  1,
'contrast':  1,
'brightness':  1,
'sharpness':  1,
'highpass_radius':  6,
'highpass_samples':  1,
'highpass_strength':  1
}
        protected override $$type(){
            return "Image Dragan Photography Filter"
        }
},

    /**
     * Image Edge Detection Filter from WAS Suite/Image/Filter
     * @desc 
    */
    "Image Edge Detection Filter" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'mode'(value : 'normal'|'laplacian'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.mode}
        */
        constructor(opts:{
            'image': IMAGE,'mode': 'normal'|'laplacian'| $dyn
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("mode", opts['mode'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Image Edge Detection Filter"
        }
},

    /**
     * Image Film Grain from WAS Suite/Image/Filter
     * @desc 
    */
    "Image Film Grain" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'density'(value : FLOAT)  { super.$$link(1, value) } 
//set 'intensity'(value : FLOAT)  { super.$$link(2, value) } 
//set 'highlights'(value : FLOAT)  { super.$$link(3, value) } 
//set 'supersample_factor'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.density default: 1 max: 1 min: 0.01 step: 0.01
		 * @param opts.intensity default: 1 max: 1 min: 0.01 step: 0.01
		 * @param opts.highlights default: 1 max: 255 min: 0.01 step: 0.01
		 * @param opts.supersample_factor default: 4 max: 8 min: 1 step: 1}
        */
        constructor(opts:{
            'image': IMAGE,'density'?: FLOAT,'intensity'?: FLOAT,'highlights'?: FLOAT,'supersample_factor'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("density", opts['density']??tmp["Image Film Grain"].defaults['density'])
super.$$link("intensity", opts['intensity']??tmp["Image Film Grain"].defaults['intensity'])
super.$$link("highlights", opts['highlights']??tmp["Image Film Grain"].defaults['highlights'])
super.$$link("supersample_factor", opts['supersample_factor']??tmp["Image Film Grain"].defaults['supersample_factor'])
}

        static defaults = {
    'density':  1,
'intensity':  1,
'highlights':  1,
'supersample_factor':  4
}
        protected override $$type(){
            return "Image Film Grain"
        }
},

    /**
     * Image Filter Adjustments from WAS Suite/Image/Filter
     * @desc 
    */
    "Image Filter Adjustments" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'brightness'(value : FLOAT)  { super.$$link(1, value) } 
//set 'contrast'(value : FLOAT)  { super.$$link(2, value) } 
//set 'saturation'(value : FLOAT)  { super.$$link(3, value) } 
//set 'sharpness'(value : FLOAT)  { super.$$link(4, value) } 
//set 'blur'(value : INT)  { super.$$link(5, value) } 
//set 'gaussian_blur'(value : FLOAT)  { super.$$link(6, value) } 
//set 'edge_enhance'(value : FLOAT)  { super.$$link(7, value) } 
//set 'detail_enhance'(value : 'false'|'true'| $dyn)  { super.$$link(8, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.brightness max: 1 min: -1 step: 0.01
		 * @param opts.contrast default: 1 max: 2 min: -1 step: 0.01
		 * @param opts.saturation default: 1 step: 0.01
		 * @param opts.sharpness default: 1 max: 5 min: -5 step: 0.01
		 * @param opts.blur step: 1
		 * @param opts.gaussian_blur step: 0.1
		 * @param opts.edge_enhance step: 0.01
		 * @param opts.detail_enhance}
        */
        constructor(opts:{
            'image': IMAGE,'brightness'?: FLOAT,'contrast'?: FLOAT,'saturation'?: FLOAT,'sharpness'?: FLOAT,'blur'?: INT,'gaussian_blur'?: FLOAT,'edge_enhance'?: FLOAT,'detail_enhance': 'false'|'true'| $dyn
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("brightness", opts['brightness']??tmp["Image Filter Adjustments"].defaults['brightness'])
super.$$link("contrast", opts['contrast']??tmp["Image Filter Adjustments"].defaults['contrast'])
super.$$link("saturation", opts['saturation']??tmp["Image Filter Adjustments"].defaults['saturation'])
super.$$link("sharpness", opts['sharpness']??tmp["Image Filter Adjustments"].defaults['sharpness'])
super.$$link("blur", opts['blur']??tmp["Image Filter Adjustments"].defaults['blur'])
super.$$link("gaussian_blur", opts['gaussian_blur']??tmp["Image Filter Adjustments"].defaults['gaussian_blur'])
super.$$link("edge_enhance", opts['edge_enhance']??tmp["Image Filter Adjustments"].defaults['edge_enhance'])
super.$$link("detail_enhance", opts['detail_enhance'])
}

        static defaults = {
    'brightness':  0,
'contrast':  1,
'saturation':  1,
'sharpness':  1,
'blur':  0,
'gaussian_blur':  0,
'edge_enhance':  0
}
        protected override $$type(){
            return "Image Filter Adjustments"
        }
},

    /**
     * Image Flip from WAS Suite/Image/Transform
     * @desc 
    */
    "Image Flip" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'mode'(value : 'horizontal'|'vertical'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'images'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.mode}
        */
        constructor(opts:{
            'images': IMAGE,'mode': 'horizontal'|'vertical'| $dyn
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("mode", opts['mode'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Image Flip"
        }
},

    /**
     * Image Gradient Map from WAS Suite/Image/Filter
     * @desc 
    */
    "Image Gradient Map" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'gradient_image'(value : IMAGE)  { super.$$link(1, value) } 
//set 'flip_left_right'(value : 'false'|'true'| $dyn)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.gradient_image
		 * @param opts.flip_left_right}
        */
        constructor(opts:{
            'image': IMAGE,'gradient_image': IMAGE,'flip_left_right': 'false'|'true'| $dyn
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("gradient_image", opts['gradient_image'])
super.$$link("flip_left_right", opts['flip_left_right'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Image Gradient Map"
        }
},

    /**
     * Image Generate Gradient from WAS Suite/Image/Generate
     * @desc 
    */
    "Image Generate Gradient" : class extends Node{
        //Setters
        //set 'width'(value : INT)  { super.$$link(0, value) } 
//set 'height'(value : INT)  { super.$$link(1, value) } 
//set 'direction'(value : 'horizontal'|'vertical'| $dyn)  { super.$$link(2, value) } 
//set 'tolerance'(value : INT)  { super.$$link(3, value) } 
//set 'gradient_stops'(value : STRING)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.width default: 512 max: 4096 min: 64 step: 1
		 * @param opts.height default: 512 max: 4096 min: 64 step: 1
		 * @param opts.direction
		 * @param opts.tolerance step: 1
		 * @param opts.gradient_stops default: "0:255,0,0\n25:255,255,255\n50:0,255,0\n75:0,0,255"}
        */
        constructor(opts:{
            'width'?: INT,'height'?: INT,'direction': 'horizontal'|'vertical'| $dyn,'tolerance'?: INT,'gradient_stops'?: STRING
        }){
            super(ctx);

            super.$$link("width", opts['width']??tmp["Image Generate Gradient"].defaults['width'])
super.$$link("height", opts['height']??tmp["Image Generate Gradient"].defaults['height'])
super.$$link("direction", opts['direction'])
super.$$link("tolerance", opts['tolerance']??tmp["Image Generate Gradient"].defaults['tolerance'])
super.$$link("gradient_stops", opts['gradient_stops']??tmp["Image Generate Gradient"].defaults['gradient_stops'])
}

        static defaults = {
    'width':  512,
'height':  512,
'tolerance':  0,
'gradient_stops':  "0:255,0,0\n25:255,255,255\n50:0,255,0\n75:0,0,255"
}
        protected override $$type(){
            return "Image Generate Gradient"
        }
},

    /**
     * Image High Pass Filter from WAS Suite/Image/Filter
     * @desc 
    */
    "Image High Pass Filter" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'radius'(value : INT)  { super.$$link(1, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(2, value) } 
//set 'color_output'(value : 'true'|'false'| $dyn)  { super.$$link(3, value) } 
//set 'neutral_background'(value : 'true'|'false'| $dyn)  { super.$$link(4, value) } 

        //Getters
        get 'images'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.radius default: 10 max: 500 min: 1 step: 1
		 * @param opts.strength default: 1.5 step: 0.1
		 * @param opts.color_output
		 * @param opts.neutral_background}
        */
        constructor(opts:{
            'images': IMAGE,'radius'?: INT,'strength'?: FLOAT,'color_output': 'true'|'false'| $dyn,'neutral_background': 'true'|'false'| $dyn
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("radius", opts['radius']??tmp["Image High Pass Filter"].defaults['radius'])
super.$$link("strength", opts['strength']??tmp["Image High Pass Filter"].defaults['strength'])
super.$$link("color_output", opts['color_output'])
super.$$link("neutral_background", opts['neutral_background'])
}

        static defaults = {
    'radius':  10,
'strength':  1.5
}
        protected override $$type(){
            return "Image High Pass Filter"
        }
},

    /**
     * Image History Loader from WAS Suite/History
     * @desc 
    */
    "Image History Loader" : class extends Node{
        //Setters
        //set 'image'(value : '.../storage/b2782d56-1283-4732-b09e-b0c55b421b35.jpg'|'.../storage/b363d4e7-255e-459d-bd14-21bfe2f51e35.jpg'|'.../storage/b3c51914-db6f-4735-8360-4b867d6728b1.jpg'|'.../storage/b49b91fd-f0dc-43c6-b044-7c6f5e799e5c.jpg'|'.../storage/b6786edc-2229-474b-9dc0-e3b68ae54621.jpg'|'.../storage/bb0768ce-6b41-49b0-851a-b165692ffa81.jpg'|'.../storage/bc658379-36f6-41ee-b362-f6837e12cca8.jpg'|'.../storage/c26fc9a7-87d6-461f-96fd-68eead9611c9.jpg'|'.../storage/c5a01e68-1470-49f1-8ff7-6b6fd20c0afd.jpg'|'.../storage/c70a4a09-1f98-4a5a-b0df-b5a209aea292.jpg'|'.../storage/c738d471-1844-4863-b08d-68f52bbffe6f.jpg'|'.../storage/ca7b24c7-5cab-4934-9a7b-27f197389226.jpg'|'.../storage/ca836011-9842-45d9-a3d0-63b197c56a0d.jpg'|'.../storage/caf4dfec-fa8e-40c9-ae8b-b9cf64a780e2.jpg'|'.../storage/ccf0e68e-320c-4e40-9396-fd7a0666e784.jpg'|'.../storage/d21a9996-4789-479a-90ce-b6b609e567fe.jpg'|'.../storage/d26d1f2e-ef65-4ff5-9e01-e64b0af0b00f.jpg'|'.../storage/d2993a7f-54e7-4cf6-95c5-6bf28c5d5cb5.jpg'|'.../storage/d62c42dc-d490-4543-9a3c-6784bb0366b3.jpg'|'.../storage/dc35bf00-aa30-4985-bf02-b1b2e12c9ae0.jpg'|'.../storage/dd539edc-adb7-4ddb-af5b-d73f5a417e72.jpg'|'.../storage/de371dab-78a4-414e-80b8-37b209bc9fa4.jpg'|'.../storage/e0056b4e-d6f0-4686-b593-05ef94756032.jpg'|'.../storage/e3e85ce1-2eab-43e5-9116-1ec9f3734e63.jpg'|'.../storage/e4255131-2941-4ebb-9fad-58bf9cc40187.jpg'|'.../storage/e4ef7304-53cf-47b2-881b-f0e9876629a4.jpg'|'.../storage/ec1ec175-3c82-4a7f-a5c2-7578ff5581b5.jpg'|'.../storage/ec7fff3e-295e-4001-9427-1624f7f39b1b.jpg'|'.../storage/ed094d89-98c6-44ce-bada-5c93c9c2b41e.jpg'|'.../storage/ee8051ab-673d-43af-a881-5833ad5ed47a.jpg'|'.../storage/f0f9521e-2594-485d-8ebc-e9005de71205.jpg'|'.../storage/f321e2c5-88fe-439e-ae61-413732ea9ed2.jpg'|'.../storage/f499583a-55fb-4070-a2e0-131db53cb968.jpg'|'.../storage/f55968d4-8093-43e8-b7d5-f03881bcb76d.jpg'|'.../storage/f69a8f63-c135-4241-bf1e-1508b192044c.jpg'|'.../storage/fab9c0a3-aff7-4648-93ad-a56088ca0593.jpg'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'image'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'filename_text'() : STRING { return [this.$uid.toString(), 1]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.image}
        */
        constructor(opts:{
            'image': '.../storage/b2782d56-1283-4732-b09e-b0c55b421b35.jpg'|'.../storage/b363d4e7-255e-459d-bd14-21bfe2f51e35.jpg'|'.../storage/b3c51914-db6f-4735-8360-4b867d6728b1.jpg'|'.../storage/b49b91fd-f0dc-43c6-b044-7c6f5e799e5c.jpg'|'.../storage/b6786edc-2229-474b-9dc0-e3b68ae54621.jpg'|'.../storage/bb0768ce-6b41-49b0-851a-b165692ffa81.jpg'|'.../storage/bc658379-36f6-41ee-b362-f6837e12cca8.jpg'|'.../storage/c26fc9a7-87d6-461f-96fd-68eead9611c9.jpg'|'.../storage/c5a01e68-1470-49f1-8ff7-6b6fd20c0afd.jpg'|'.../storage/c70a4a09-1f98-4a5a-b0df-b5a209aea292.jpg'|'.../storage/c738d471-1844-4863-b08d-68f52bbffe6f.jpg'|'.../storage/ca7b24c7-5cab-4934-9a7b-27f197389226.jpg'|'.../storage/ca836011-9842-45d9-a3d0-63b197c56a0d.jpg'|'.../storage/caf4dfec-fa8e-40c9-ae8b-b9cf64a780e2.jpg'|'.../storage/ccf0e68e-320c-4e40-9396-fd7a0666e784.jpg'|'.../storage/d21a9996-4789-479a-90ce-b6b609e567fe.jpg'|'.../storage/d26d1f2e-ef65-4ff5-9e01-e64b0af0b00f.jpg'|'.../storage/d2993a7f-54e7-4cf6-95c5-6bf28c5d5cb5.jpg'|'.../storage/d62c42dc-d490-4543-9a3c-6784bb0366b3.jpg'|'.../storage/dc35bf00-aa30-4985-bf02-b1b2e12c9ae0.jpg'|'.../storage/dd539edc-adb7-4ddb-af5b-d73f5a417e72.jpg'|'.../storage/de371dab-78a4-414e-80b8-37b209bc9fa4.jpg'|'.../storage/e0056b4e-d6f0-4686-b593-05ef94756032.jpg'|'.../storage/e3e85ce1-2eab-43e5-9116-1ec9f3734e63.jpg'|'.../storage/e4255131-2941-4ebb-9fad-58bf9cc40187.jpg'|'.../storage/e4ef7304-53cf-47b2-881b-f0e9876629a4.jpg'|'.../storage/ec1ec175-3c82-4a7f-a5c2-7578ff5581b5.jpg'|'.../storage/ec7fff3e-295e-4001-9427-1624f7f39b1b.jpg'|'.../storage/ed094d89-98c6-44ce-bada-5c93c9c2b41e.jpg'|'.../storage/ee8051ab-673d-43af-a881-5833ad5ed47a.jpg'|'.../storage/f0f9521e-2594-485d-8ebc-e9005de71205.jpg'|'.../storage/f321e2c5-88fe-439e-ae61-413732ea9ed2.jpg'|'.../storage/f499583a-55fb-4070-a2e0-131db53cb968.jpg'|'.../storage/f55968d4-8093-43e8-b7d5-f03881bcb76d.jpg'|'.../storage/f69a8f63-c135-4241-bf1e-1508b192044c.jpg'|'.../storage/fab9c0a3-aff7-4648-93ad-a56088ca0593.jpg'| $dyn
        }){
            super(ctx);

            super.$$link("image", opts['image'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Image History Loader"
        }
},

    /**
     * Image Input Switch from WAS Suite/Logic
     * @desc 
    */
    "Image Input Switch" : class extends Node{
        //Setters
        //set 'image_a'(value : IMAGE)  { super.$$link(0, value) } 
//set 'image_b'(value : IMAGE)  { super.$$link(1, value) } 
//set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image_a
		 * @param opts.image_b
		 * @param opts.boolean}
        */
        constructor(opts:{
            'image_a': IMAGE,'image_b': IMAGE,'boolean': BOOLEAN
        }){
            super(ctx);

            super.$$link("image_a", opts['image_a'])
super.$$link("image_b", opts['image_b'])
super.$$link("boolean", opts['boolean'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Image Input Switch"
        }
},

    /**
     * Image Levels Adjustment from WAS Suite/Image/Adjustment
     * @desc 
    */
    "Image Levels Adjustment" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'black_level'(value : FLOAT)  { super.$$link(1, value) } 
//set 'mid_level'(value : FLOAT)  { super.$$link(2, value) } 
//set 'white_level'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.black_level step: 0.1
		 * @param opts.mid_level default: 127.5 step: 0.1
		 * @param opts.white_level default: 255 step: 0.1}
        */
        constructor(opts:{
            'image': IMAGE,'black_level'?: FLOAT,'mid_level'?: FLOAT,'white_level'?: FLOAT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("black_level", opts['black_level']??tmp["Image Levels Adjustment"].defaults['black_level'])
super.$$link("mid_level", opts['mid_level']??tmp["Image Levels Adjustment"].defaults['mid_level'])
super.$$link("white_level", opts['white_level']??tmp["Image Levels Adjustment"].defaults['white_level'])
}

        static defaults = {
    'black_level':  0,
'mid_level':  127.5,
'white_level':  255
}
        protected override $$type(){
            return "Image Levels Adjustment"
        }
},

    /**
     * Image Load from WAS Suite/IO
     * @desc 
    */
    "Image Load" : class extends Node{
        //Setters
        //set 'image_path'(value : STRING)  { super.$$link(0, value) } 
//set 'RGBA'(value : 'false'|'true'| $dyn)  { super.$$link(1, value) } 
//set 'filename_text_extension'(value : 'true'|'false'| $dyn)  { super.$$link(2, value) } 

        //Getters
        get 'image'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'mask'() : MASK { return [this.$uid.toString(), 1]  as unknown as MASK; }
get 'filename_text'() : STRING { return [this.$uid.toString(), 2]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.image_path default: "./ComfyUI/input/example.png"
		 * @param opts.RGBA
		 * @param opts.filename_text_extension}
        */
        constructor(opts:{
            'image_path'?: STRING,'RGBA': 'false'|'true'| $dyn,'filename_text_extension'?: 'true'|'false'| $dyn
        }){
            super(ctx);

            super.$$link("image_path", opts['image_path']??tmp["Image Load"].defaults['image_path'])
super.$$link("RGBA", opts['RGBA'])
super.$$link("filename_text_extension", opts['filename_text_extension'])
}

        static defaults = {
    'image_path':  "./ComfyUI/input/example.png"
}
        protected override $$type(){
            return "Image Load"
        }
},

    /**
     * Image Median Filter from WAS Suite/Image/Filter
     * @desc 
    */
    "Image Median Filter" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'diameter'(value : INT)  { super.$$link(1, value) } 
//set 'sigma_color'(value : FLOAT)  { super.$$link(2, value) } 
//set 'sigma_space'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.diameter default: 2 max: 255 min: 0.1 step: 1
		 * @param opts.sigma_color default: 10 max: 255 min: -255 step: 0.1
		 * @param opts.sigma_space default: 10 max: 255 min: -255 step: 0.1}
        */
        constructor(opts:{
            'image': IMAGE,'diameter'?: INT,'sigma_color'?: FLOAT,'sigma_space'?: FLOAT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("diameter", opts['diameter']??tmp["Image Median Filter"].defaults['diameter'])
super.$$link("sigma_color", opts['sigma_color']??tmp["Image Median Filter"].defaults['sigma_color'])
super.$$link("sigma_space", opts['sigma_space']??tmp["Image Median Filter"].defaults['sigma_space'])
}

        static defaults = {
    'diameter':  2,
'sigma_color':  10,
'sigma_space':  10
}
        protected override $$type(){
            return "Image Median Filter"
        }
},

    /**
     * Image Mix RGB Channels from WAS Suite/Image/Process
     * @desc 
    */
    "Image Mix RGB Channels" : class extends Node{
        //Setters
        //set 'red_channel'(value : IMAGE)  { super.$$link(0, value) } 
//set 'green_channel'(value : IMAGE)  { super.$$link(1, value) } 
//set 'blue_channel'(value : IMAGE)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.red_channel
		 * @param opts.green_channel
		 * @param opts.blue_channel}
        */
        constructor(opts:{
            'red_channel': IMAGE,'green_channel': IMAGE,'blue_channel': IMAGE
        }){
            super(ctx);

            super.$$link("red_channel", opts['red_channel'])
super.$$link("green_channel", opts['green_channel'])
super.$$link("blue_channel", opts['blue_channel'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Image Mix RGB Channels"
        }
},

    /**
     * Image Monitor Effects Filter from WAS Suite/Image/Filter
     * @desc 
    */
    "Image Monitor Effects Filter" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'mode'(value : 'Digital Distortion'|'Signal Distortion'|'TV Distortion'| $dyn)  { super.$$link(1, value) } 
//set 'amplitude'(value : INT)  { super.$$link(2, value) } 
//set 'offset'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'image'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.mode
		 * @param opts.amplitude default: 5 max: 255 min: 1 step: 1
		 * @param opts.offset default: 10 max: 255 min: 1 step: 1}
        */
        constructor(opts:{
            'image': IMAGE,'mode': 'Digital Distortion'|'Signal Distortion'|'TV Distortion'| $dyn,'amplitude'?: INT,'offset'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("mode", opts['mode'])
super.$$link("amplitude", opts['amplitude']??tmp["Image Monitor Effects Filter"].defaults['amplitude'])
super.$$link("offset", opts['offset']??tmp["Image Monitor Effects Filter"].defaults['offset'])
}

        static defaults = {
    'amplitude':  5,
'offset':  10
}
        protected override $$type(){
            return "Image Monitor Effects Filter"
        }
},

    /**
     * Image Nova Filter from WAS Suite/Image/Filter
     * @desc 
    */
    "Image Nova Filter" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'amplitude'(value : FLOAT)  { super.$$link(1, value) } 
//set 'frequency'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.amplitude default: 0.1 step: 0.001
		 * @param opts.frequency default: 3.14 step: 0.001}
        */
        constructor(opts:{
            'image': IMAGE,'amplitude'?: FLOAT,'frequency'?: FLOAT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("amplitude", opts['amplitude']??tmp["Image Nova Filter"].defaults['amplitude'])
super.$$link("frequency", opts['frequency']??tmp["Image Nova Filter"].defaults['frequency'])
}

        static defaults = {
    'amplitude':  0.1,
'frequency':  3.14
}
        protected override $$type(){
            return "Image Nova Filter"
        }
},

    /**
     * Image Padding from WAS Suite/Image/Transform
     * @desc 
    */
    "Image Padding" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'feathering'(value : INT)  { super.$$link(1, value) } 
//set 'feather_second_pass'(value : 'true'|'false'| $dyn)  { super.$$link(2, value) } 
//set 'left_padding'(value : INT)  { super.$$link(3, value) } 
//set 'right_padding'(value : INT)  { super.$$link(4, value) } 
//set 'top_padding'(value : INT)  { super.$$link(5, value) } 
//set 'bottom_padding'(value : INT)  { super.$$link(6, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.feathering default: 120 step: 1
		 * @param opts.feather_second_pass
		 * @param opts.left_padding default: 512 max: 48000 min: 8 step: 1
		 * @param opts.right_padding default: 512 max: 48000 min: 8 step: 1
		 * @param opts.top_padding default: 512 max: 48000 min: 8 step: 1
		 * @param opts.bottom_padding default: 512 max: 48000 min: 8 step: 1}
        */
        constructor(opts:{
            'image': IMAGE,'feathering'?: INT,'feather_second_pass': 'true'|'false'| $dyn,'left_padding'?: INT,'right_padding'?: INT,'top_padding'?: INT,'bottom_padding'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("feathering", opts['feathering']??tmp["Image Padding"].defaults['feathering'])
super.$$link("feather_second_pass", opts['feather_second_pass'])
super.$$link("left_padding", opts['left_padding']??tmp["Image Padding"].defaults['left_padding'])
super.$$link("right_padding", opts['right_padding']??tmp["Image Padding"].defaults['right_padding'])
super.$$link("top_padding", opts['top_padding']??tmp["Image Padding"].defaults['top_padding'])
super.$$link("bottom_padding", opts['bottom_padding']??tmp["Image Padding"].defaults['bottom_padding'])
}

        static defaults = {
    'feathering':  120,
'left_padding':  512,
'right_padding':  512,
'top_padding':  512,
'bottom_padding':  512
}
        protected override $$type(){
            return "Image Padding"
        }
},

    /**
     * Image Perlin Noise from WAS Suite/Image/Generate/Noise
     * @desc 
    */
    "Image Perlin Noise" : class extends Node{
        //Setters
        //set 'width'(value : INT)  { super.$$link(0, value) } 
//set 'height'(value : INT)  { super.$$link(1, value) } 
//set 'scale'(value : INT)  { super.$$link(2, value) } 
//set 'octaves'(value : INT)  { super.$$link(3, value) } 
//set 'persistence'(value : FLOAT)  { super.$$link(4, value) } 
//set 'seed'(value : INT)  { super.$$link(5, value) } 

        //Getters
        get 'image'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.width default: 512 max: 2048 min: 64 step: 1
		 * @param opts.height default: 512 max: 2048 min: 64 step: 1
		 * @param opts.scale default: 100 max: 2048 min: 2 step: 1
		 * @param opts.octaves default: 4 step: 1
		 * @param opts.persistence default: 0.5 max: 100 min: 0.01 step: 0.01
		 * @param opts.seed}
        */
        constructor(opts:{
            'width'?: INT,'height'?: INT,'scale'?: INT,'octaves'?: INT,'persistence'?: FLOAT,'seed'?: INT
        }){
            super(ctx);

            super.$$link("width", opts['width']??tmp["Image Perlin Noise"].defaults['width'])
super.$$link("height", opts['height']??tmp["Image Perlin Noise"].defaults['height'])
super.$$link("scale", opts['scale']??tmp["Image Perlin Noise"].defaults['scale'])
super.$$link("octaves", opts['octaves']??tmp["Image Perlin Noise"].defaults['octaves'])
super.$$link("persistence", opts['persistence']??tmp["Image Perlin Noise"].defaults['persistence'])
super.$$link("seed", opts['seed']??tmp["Image Perlin Noise"].defaults['seed'])
}

        static defaults = {
    'width':  512,
'height':  512,
'scale':  100,
'octaves':  4,
'persistence':  0.5,
'seed':  0
}
        protected override $$type(){
            return "Image Perlin Noise"
        }
},

    /**
     * Image Rembg (Remove Background) from WAS Suite/Image/AI
     * @desc 
    */
    "Image Rembg (Remove Background)" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'transparency'(value : BOOLEAN)  { super.$$link(1, value) } 
//set 'model'(value : 'u2net'|'u2netp'|'u2net_human_seg'|'silueta'|'isnet-general-use'|'isnet-anime'| $dyn)  { super.$$link(2, value) } 
//set 'post_processing'(value : BOOLEAN)  { super.$$link(3, value) } 
//set 'only_mask'(value : BOOLEAN)  { super.$$link(4, value) } 
//set 'alpha_matting'(value : BOOLEAN)  { super.$$link(5, value) } 
//set 'alpha_matting_foreground_threshold'(value : INT)  { super.$$link(6, value) } 
//set 'alpha_matting_background_threshold'(value : INT)  { super.$$link(7, value) } 
//set 'alpha_matting_erode_size'(value : INT)  { super.$$link(8, value) } 
//set 'background_color'(value : 'none'|'black'|'white'|'magenta'|'chroma green'|'chroma blue'| $dyn)  { super.$$link(9, value) } 

        //Getters
        get 'images'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.transparency default: true
		 * @param opts.model
		 * @param opts.post_processing
		 * @param opts.only_mask
		 * @param opts.alpha_matting
		 * @param opts.alpha_matting_foreground_threshold default: 240
		 * @param opts.alpha_matting_background_threshold default: 10
		 * @param opts.alpha_matting_erode_size default: 10
		 * @param opts.background_color}
        */
        constructor(opts:{
            'images': IMAGE,'transparency'?: BOOLEAN,'model': 'u2net'|'u2netp'|'u2net_human_seg'|'silueta'|'isnet-general-use'|'isnet-anime'| $dyn,'post_processing'?: BOOLEAN,'only_mask'?: BOOLEAN,'alpha_matting'?: BOOLEAN,'alpha_matting_foreground_threshold'?: INT,'alpha_matting_background_threshold'?: INT,'alpha_matting_erode_size'?: INT,'background_color': 'none'|'black'|'white'|'magenta'|'chroma green'|'chroma blue'| $dyn
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("transparency", opts['transparency']??tmp["Image Rembg (Remove Background)"].defaults['transparency'])
super.$$link("model", opts['model'])
super.$$link("post_processing", opts['post_processing']??tmp["Image Rembg (Remove Background)"].defaults['post_processing'])
super.$$link("only_mask", opts['only_mask']??tmp["Image Rembg (Remove Background)"].defaults['only_mask'])
super.$$link("alpha_matting", opts['alpha_matting']??tmp["Image Rembg (Remove Background)"].defaults['alpha_matting'])
super.$$link("alpha_matting_foreground_threshold", opts['alpha_matting_foreground_threshold']??tmp["Image Rembg (Remove Background)"].defaults['alpha_matting_foreground_threshold'])
super.$$link("alpha_matting_background_threshold", opts['alpha_matting_background_threshold']??tmp["Image Rembg (Remove Background)"].defaults['alpha_matting_background_threshold'])
super.$$link("alpha_matting_erode_size", opts['alpha_matting_erode_size']??tmp["Image Rembg (Remove Background)"].defaults['alpha_matting_erode_size'])
super.$$link("background_color", opts['background_color'])
}

        static defaults = {
    'transparency':  true,
'post_processing':  false,
'only_mask':  false,
'alpha_matting':  false,
'alpha_matting_foreground_threshold':  240,
'alpha_matting_background_threshold':  10,
'alpha_matting_erode_size':  10
}
        protected override $$type(){
            return "Image Rembg (Remove Background)"
        }
},

    /**
     * Image Perlin Power Fractal from WAS Suite/Image/Generate/Noise
     * @desc 
    */
    "Image Perlin Power Fractal" : class extends Node{
        //Setters
        //set 'width'(value : INT)  { super.$$link(0, value) } 
//set 'height'(value : INT)  { super.$$link(1, value) } 
//set 'scale'(value : INT)  { super.$$link(2, value) } 
//set 'octaves'(value : INT)  { super.$$link(3, value) } 
//set 'persistence'(value : FLOAT)  { super.$$link(4, value) } 
//set 'lacunarity'(value : FLOAT)  { super.$$link(5, value) } 
//set 'exponent'(value : FLOAT)  { super.$$link(6, value) } 
//set 'seed'(value : INT)  { super.$$link(7, value) } 

        //Getters
        get 'image'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.width default: 512 max: 8192 min: 64 step: 1
		 * @param opts.height default: 512 max: 8192 min: 64 step: 1
		 * @param opts.scale default: 100 max: 2048 min: 2 step: 1
		 * @param opts.octaves default: 4 step: 1
		 * @param opts.persistence default: 0.5 max: 100 min: 0.01 step: 0.01
		 * @param opts.lacunarity default: 2 max: 100 min: 0.01 step: 0.01
		 * @param opts.exponent default: 2 max: 100 min: 0.01 step: 0.01
		 * @param opts.seed}
        */
        constructor(opts:{
            'width'?: INT,'height'?: INT,'scale'?: INT,'octaves'?: INT,'persistence'?: FLOAT,'lacunarity'?: FLOAT,'exponent'?: FLOAT,'seed'?: INT
        }){
            super(ctx);

            super.$$link("width", opts['width']??tmp["Image Perlin Power Fractal"].defaults['width'])
super.$$link("height", opts['height']??tmp["Image Perlin Power Fractal"].defaults['height'])
super.$$link("scale", opts['scale']??tmp["Image Perlin Power Fractal"].defaults['scale'])
super.$$link("octaves", opts['octaves']??tmp["Image Perlin Power Fractal"].defaults['octaves'])
super.$$link("persistence", opts['persistence']??tmp["Image Perlin Power Fractal"].defaults['persistence'])
super.$$link("lacunarity", opts['lacunarity']??tmp["Image Perlin Power Fractal"].defaults['lacunarity'])
super.$$link("exponent", opts['exponent']??tmp["Image Perlin Power Fractal"].defaults['exponent'])
super.$$link("seed", opts['seed']??tmp["Image Perlin Power Fractal"].defaults['seed'])
}

        static defaults = {
    'width':  512,
'height':  512,
'scale':  100,
'octaves':  4,
'persistence':  0.5,
'lacunarity':  2,
'exponent':  2,
'seed':  0
}
        protected override $$type(){
            return "Image Perlin Power Fractal"
        }
},

    /**
     * Image Remove Background (Alpha) from WAS Suite/Image/Process
     * @desc 
    */
    "Image Remove Background (Alpha)" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'mode'(value : 'background'|'foreground'| $dyn)  { super.$$link(1, value) } 
//set 'threshold'(value : INT)  { super.$$link(2, value) } 
//set 'threshold_tolerance'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'images'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.mode
		 * @param opts.threshold default: 127 step: 1
		 * @param opts.threshold_tolerance default: 2 max: 24 min: 1 step: 1}
        */
        constructor(opts:{
            'images': IMAGE,'mode': 'background'|'foreground'| $dyn,'threshold'?: INT,'threshold_tolerance'?: INT
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("mode", opts['mode'])
super.$$link("threshold", opts['threshold']??tmp["Image Remove Background (Alpha)"].defaults['threshold'])
super.$$link("threshold_tolerance", opts['threshold_tolerance']??tmp["Image Remove Background (Alpha)"].defaults['threshold_tolerance'])
}

        static defaults = {
    'threshold':  127,
'threshold_tolerance':  2
}
        protected override $$type(){
            return "Image Remove Background (Alpha)"
        }
},

    /**
     * Image Remove Color from WAS Suite/Image/Process
     * @desc 
    */
    "Image Remove Color" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'target_red'(value : INT)  { super.$$link(1, value) } 
//set 'target_green'(value : INT)  { super.$$link(2, value) } 
//set 'target_blue'(value : INT)  { super.$$link(3, value) } 
//set 'replace_red'(value : INT)  { super.$$link(4, value) } 
//set 'replace_green'(value : INT)  { super.$$link(5, value) } 
//set 'replace_blue'(value : INT)  { super.$$link(6, value) } 
//set 'clip_threshold'(value : INT)  { super.$$link(7, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.target_red default: 255 step: 1
		 * @param opts.target_green default: 255 step: 1
		 * @param opts.target_blue default: 255 step: 1
		 * @param opts.replace_red default: 255 step: 1
		 * @param opts.replace_green default: 255 step: 1
		 * @param opts.replace_blue default: 255 step: 1
		 * @param opts.clip_threshold default: 10 step: 1}
        */
        constructor(opts:{
            'image': IMAGE,'target_red'?: INT,'target_green'?: INT,'target_blue'?: INT,'replace_red'?: INT,'replace_green'?: INT,'replace_blue'?: INT,'clip_threshold'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("target_red", opts['target_red']??tmp["Image Remove Color"].defaults['target_red'])
super.$$link("target_green", opts['target_green']??tmp["Image Remove Color"].defaults['target_green'])
super.$$link("target_blue", opts['target_blue']??tmp["Image Remove Color"].defaults['target_blue'])
super.$$link("replace_red", opts['replace_red']??tmp["Image Remove Color"].defaults['replace_red'])
super.$$link("replace_green", opts['replace_green']??tmp["Image Remove Color"].defaults['replace_green'])
super.$$link("replace_blue", opts['replace_blue']??tmp["Image Remove Color"].defaults['replace_blue'])
super.$$link("clip_threshold", opts['clip_threshold']??tmp["Image Remove Color"].defaults['clip_threshold'])
}

        static defaults = {
    'target_red':  255,
'target_green':  255,
'target_blue':  255,
'replace_red':  255,
'replace_green':  255,
'replace_blue':  255,
'clip_threshold':  10
}
        protected override $$type(){
            return "Image Remove Color"
        }
},

    /**
     * Image Resize from WAS Suite/Image/Transform
     * @desc 
    */
    "Image Resize" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'mode'(value : 'rescale'|'resize'| $dyn)  { super.$$link(1, value) } 
//set 'supersample'(value : 'true'|'false'| $dyn)  { super.$$link(2, value) } 
//set 'resampling'(value : 'lanczos'|'nearest'|'bilinear'|'bicubic'| $dyn)  { super.$$link(3, value) } 
//set 'rescale_factor'(value : FLOAT)  { super.$$link(4, value) } 
//set 'resize_width'(value : INT)  { super.$$link(5, value) } 
//set 'resize_height'(value : INT)  { super.$$link(6, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.mode
		 * @param opts.supersample
		 * @param opts.resampling
		 * @param opts.rescale_factor default: 2 max: 16 min: 0.01 step: 0.01
		 * @param opts.resize_width default: 1024 max: 48000 min: 1 step: 1
		 * @param opts.resize_height default: 1536 max: 48000 min: 1 step: 1}
        */
        constructor(opts:{
            'image': IMAGE,'mode': 'rescale'|'resize'| $dyn,'supersample': 'true'|'false'| $dyn,'resampling': 'lanczos'|'nearest'|'bilinear'|'bicubic'| $dyn,'rescale_factor'?: FLOAT,'resize_width'?: INT,'resize_height'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("mode", opts['mode'])
super.$$link("supersample", opts['supersample'])
super.$$link("resampling", opts['resampling'])
super.$$link("rescale_factor", opts['rescale_factor']??tmp["Image Resize"].defaults['rescale_factor'])
super.$$link("resize_width", opts['resize_width']??tmp["Image Resize"].defaults['resize_width'])
super.$$link("resize_height", opts['resize_height']??tmp["Image Resize"].defaults['resize_height'])
}

        static defaults = {
    'rescale_factor':  2,
'resize_width':  1024,
'resize_height':  1536
}
        protected override $$type(){
            return "Image Resize"
        }
},

    /**
     * Image Rotate from WAS Suite/Image/Transform
     * @desc 
    */
    "Image Rotate" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'mode'(value : 'transpose'|'internal'| $dyn)  { super.$$link(1, value) } 
//set 'rotation'(value : INT)  { super.$$link(2, value) } 
//set 'sampler'(value : 'nearest'|'bilinear'|'bicubic'| $dyn)  { super.$$link(3, value) } 

        //Getters
        get 'images'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.mode
		 * @param opts.rotation step: 90
		 * @param opts.sampler}
        */
        constructor(opts:{
            'images': IMAGE,'mode': 'transpose'|'internal'| $dyn,'rotation'?: INT,'sampler': 'nearest'|'bilinear'|'bicubic'| $dyn
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("mode", opts['mode'])
super.$$link("rotation", opts['rotation']??tmp["Image Rotate"].defaults['rotation'])
super.$$link("sampler", opts['sampler'])
}

        static defaults = {
    'rotation':  0
}
        protected override $$type(){
            return "Image Rotate"
        }
},

    /**
     * Image Rotate Hue from WAS Suite/Image/Adjustment
     * @desc 
    */
    "Image Rotate Hue" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'hue_shift'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.hue_shift step: 0.001}
        */
        constructor(opts:{
            'image': IMAGE,'hue_shift'?: FLOAT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("hue_shift", opts['hue_shift']??tmp["Image Rotate Hue"].defaults['hue_shift'])
}

        static defaults = {
    'hue_shift':  0
}
        protected override $$type(){
            return "Image Rotate Hue"
        }
},

    /**
     * Image Send HTTP from WAS Suite/IO
     * @desc 
    */
    "Image Send HTTP" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'url'(value : STRING)  { super.$$link(1, value) } 
//set 'method_type'(value : 'post'|'put'|'patch'| $dyn)  { super.$$link(2, value) } 
//set 'request_field_name'(value : STRING)  { super.$$link(3, value) } 
//set 'additional_request_headers'(value : DICT)  { super.$$link(4, value) } 

        //Getters
        get 'status_code'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }
get 'result_text'() : STRING { return [this.$uid.toString(), 1]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.url default: "example.com"
		 * @param opts.method_type default: "post"
		 * @param opts.request_field_name default: "image"
		 * @param opts.additional_request_headers}
        */
        constructor(opts:{
            'images': IMAGE,'url'?: STRING,'method_type'?: 'post'|'put'|'patch'| $dyn,'request_field_name'?: STRING,'additional_request_headers'?: DICT
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("url", opts['url']??tmp["Image Send HTTP"].defaults['url'])
super.$$link("method_type", opts['method_type']??tmp["Image Send HTTP"].defaults['method_type'])
super.$$link("request_field_name", opts['request_field_name']??tmp["Image Send HTTP"].defaults['request_field_name'])
super.$$link("additional_request_headers", opts['additional_request_headers'])
}

        static defaults = {
    'url':  "example.com",
'method_type':  "post",
'request_field_name':  "image"
}
        protected override $$type(){
            return "Image Send HTTP"
        }
},

    /**
     * Image Save from WAS Suite/IO
     * @desc 
    */
    "Image Save" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'output_path'(value : STRING)  { super.$$link(1, value) } 
//set 'filename_prefix'(value : STRING)  { super.$$link(2, value) } 
//set 'filename_delimiter'(value : STRING)  { super.$$link(3, value) } 
//set 'filename_number_padding'(value : INT)  { super.$$link(4, value) } 
//set 'filename_number_start'(value : 'false'|'true'| $dyn)  { super.$$link(5, value) } 
//set 'extension'(value : 'png'|'jpg'|'jpeg'|'gif'|'tiff'|'webp'|'bmp'| $dyn)  { super.$$link(6, value) } 
//set 'dpi'(value : INT)  { super.$$link(7, value) } 
//set 'quality'(value : INT)  { super.$$link(8, value) } 
//set 'optimize_image'(value : 'true'|'false'| $dyn)  { super.$$link(9, value) } 
//set 'lossless_webp'(value : 'false'|'true'| $dyn)  { super.$$link(10, value) } 
//set 'overwrite_mode'(value : 'false'|'prefix_as_filename'| $dyn)  { super.$$link(11, value) } 
//set 'show_history'(value : 'false'|'true'| $dyn)  { super.$$link(12, value) } 
//set 'show_history_by_prefix'(value : 'true'|'false'| $dyn)  { super.$$link(13, value) } 
//set 'embed_workflow'(value : 'true'|'false'| $dyn)  { super.$$link(14, value) } 
//set 'show_previews'(value : 'true'|'false'| $dyn)  { super.$$link(15, value) } 

        //Getters
        get 'images'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'files'() : STRING { return [this.$uid.toString(), 1]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.output_path default: "[time(%Y-%m-%d)]"
		 * @param opts.filename_prefix default: "ComfyUI"
		 * @param opts.filename_delimiter default: "_"
		 * @param opts.filename_number_padding default: 4 max: 9 min: 1 step: 1
		 * @param opts.filename_number_start
		 * @param opts.extension
		 * @param opts.dpi default: 300 max: 2400 min: 1 step: 1
		 * @param opts.quality default: 100 max: 100 min: 1 step: 1
		 * @param opts.optimize_image
		 * @param opts.lossless_webp
		 * @param opts.overwrite_mode
		 * @param opts.show_history
		 * @param opts.show_history_by_prefix
		 * @param opts.embed_workflow
		 * @param opts.show_previews}
        */
        constructor(opts:{
            'images': IMAGE,'output_path'?: STRING,'filename_prefix'?: STRING,'filename_delimiter'?: STRING,'filename_number_padding'?: INT,'filename_number_start': 'false'|'true'| $dyn,'extension': 'png'|'jpg'|'jpeg'|'gif'|'tiff'|'webp'|'bmp'| $dyn,'dpi'?: INT,'quality'?: INT,'optimize_image': 'true'|'false'| $dyn,'lossless_webp': 'false'|'true'| $dyn,'overwrite_mode': 'false'|'prefix_as_filename'| $dyn,'show_history': 'false'|'true'| $dyn,'show_history_by_prefix': 'true'|'false'| $dyn,'embed_workflow': 'true'|'false'| $dyn,'show_previews': 'true'|'false'| $dyn
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("output_path", opts['output_path']??tmp["Image Save"].defaults['output_path'])
super.$$link("filename_prefix", opts['filename_prefix']??tmp["Image Save"].defaults['filename_prefix'])
super.$$link("filename_delimiter", opts['filename_delimiter']??tmp["Image Save"].defaults['filename_delimiter'])
super.$$link("filename_number_padding", opts['filename_number_padding']??tmp["Image Save"].defaults['filename_number_padding'])
super.$$link("filename_number_start", opts['filename_number_start'])
super.$$link("extension", opts['extension'])
super.$$link("dpi", opts['dpi']??tmp["Image Save"].defaults['dpi'])
super.$$link("quality", opts['quality']??tmp["Image Save"].defaults['quality'])
super.$$link("optimize_image", opts['optimize_image'])
super.$$link("lossless_webp", opts['lossless_webp'])
super.$$link("overwrite_mode", opts['overwrite_mode'])
super.$$link("show_history", opts['show_history'])
super.$$link("show_history_by_prefix", opts['show_history_by_prefix'])
super.$$link("embed_workflow", opts['embed_workflow'])
super.$$link("show_previews", opts['show_previews'])
}

        static defaults = {
    'output_path':  "[time(%Y-%m-%d)]",
'filename_prefix':  "ComfyUI",
'filename_delimiter':  "_",
'filename_number_padding':  4,
'dpi':  300,
'quality':  100
}
        protected override $$type(){
            return "Image Save"
        }
},

    /**
     * Image Seamless Texture from WAS Suite/Image/Process
     * @desc 
    */
    "Image Seamless Texture" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'blending'(value : FLOAT)  { super.$$link(1, value) } 
//set 'tiled'(value : 'true'|'false'| $dyn)  { super.$$link(2, value) } 
//set 'tiles'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'images'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.blending default: 0.4 step: 0.01
		 * @param opts.tiled
		 * @param opts.tiles default: 2 max: 6 min: 2 step: 2}
        */
        constructor(opts:{
            'images': IMAGE,'blending'?: FLOAT,'tiled': 'true'|'false'| $dyn,'tiles'?: INT
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("blending", opts['blending']??tmp["Image Seamless Texture"].defaults['blending'])
super.$$link("tiled", opts['tiled'])
super.$$link("tiles", opts['tiles']??tmp["Image Seamless Texture"].defaults['tiles'])
}

        static defaults = {
    'blending':  0.4,
'tiles':  2
}
        protected override $$type(){
            return "Image Seamless Texture"
        }
},

    /**
     * Image Select Channel from WAS Suite/Image/Process
     * @desc 
    */
    "Image Select Channel" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'channel'(value : 'red'|'green'|'blue'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.channel}
        */
        constructor(opts:{
            'image': IMAGE,'channel': 'red'|'green'|'blue'| $dyn
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("channel", opts['channel'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Image Select Channel"
        }
},

    /**
     * Image Select Color from WAS Suite/Image/Process
     * @desc 
    */
    "Image Select Color" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'red'(value : INT)  { super.$$link(1, value) } 
//set 'green'(value : INT)  { super.$$link(2, value) } 
//set 'blue'(value : INT)  { super.$$link(3, value) } 
//set 'variance'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.red default: 255 step: 0.1
		 * @param opts.green default: 255 step: 0.1
		 * @param opts.blue default: 255 step: 0.1
		 * @param opts.variance default: 10 step: 1}
        */
        constructor(opts:{
            'image': IMAGE,'red'?: INT,'green'?: INT,'blue'?: INT,'variance'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("red", opts['red']??tmp["Image Select Color"].defaults['red'])
super.$$link("green", opts['green']??tmp["Image Select Color"].defaults['green'])
super.$$link("blue", opts['blue']??tmp["Image Select Color"].defaults['blue'])
super.$$link("variance", opts['variance']??tmp["Image Select Color"].defaults['variance'])
}

        static defaults = {
    'red':  255,
'green':  255,
'blue':  255,
'variance':  10
}
        protected override $$type(){
            return "Image Select Color"
        }
},

    /**
     * Image Shadows and Highlights from WAS Suite/Image/Adjustment
     * @desc 
    */
    "Image Shadows and Highlights" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'shadow_threshold'(value : FLOAT)  { super.$$link(1, value) } 
//set 'shadow_factor'(value : FLOAT)  { super.$$link(2, value) } 
//set 'shadow_smoothing'(value : FLOAT)  { super.$$link(3, value) } 
//set 'highlight_threshold'(value : FLOAT)  { super.$$link(4, value) } 
//set 'highlight_factor'(value : FLOAT)  { super.$$link(5, value) } 
//set 'highlight_smoothing'(value : FLOAT)  { super.$$link(6, value) } 
//set 'simplify_isolation'(value : FLOAT)  { super.$$link(7, value) } 

        //Getters
        get 'image'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'shadow_map'() : IMAGE { return [this.$uid.toString(), 1]  as unknown as IMAGE; }
get 'highlight_map'() : IMAGE { return [this.$uid.toString(), 2]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.shadow_threshold default: 75 step: 0.1
		 * @param opts.shadow_factor default: 1.5 max: 12 min: -12 step: 0.1
		 * @param opts.shadow_smoothing default: 0.25 max: 255 min: -255 step: 0.1
		 * @param opts.highlight_threshold default: 175 step: 0.1
		 * @param opts.highlight_factor default: 0.5 max: 12 min: -12 step: 0.1
		 * @param opts.highlight_smoothing default: 0.25 max: 255 min: -255 step: 0.1
		 * @param opts.simplify_isolation max: 255 min: -255 step: 0.1}
        */
        constructor(opts:{
            'image': IMAGE,'shadow_threshold'?: FLOAT,'shadow_factor'?: FLOAT,'shadow_smoothing'?: FLOAT,'highlight_threshold'?: FLOAT,'highlight_factor'?: FLOAT,'highlight_smoothing'?: FLOAT,'simplify_isolation'?: FLOAT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("shadow_threshold", opts['shadow_threshold']??tmp["Image Shadows and Highlights"].defaults['shadow_threshold'])
super.$$link("shadow_factor", opts['shadow_factor']??tmp["Image Shadows and Highlights"].defaults['shadow_factor'])
super.$$link("shadow_smoothing", opts['shadow_smoothing']??tmp["Image Shadows and Highlights"].defaults['shadow_smoothing'])
super.$$link("highlight_threshold", opts['highlight_threshold']??tmp["Image Shadows and Highlights"].defaults['highlight_threshold'])
super.$$link("highlight_factor", opts['highlight_factor']??tmp["Image Shadows and Highlights"].defaults['highlight_factor'])
super.$$link("highlight_smoothing", opts['highlight_smoothing']??tmp["Image Shadows and Highlights"].defaults['highlight_smoothing'])
super.$$link("simplify_isolation", opts['simplify_isolation']??tmp["Image Shadows and Highlights"].defaults['simplify_isolation'])
}

        static defaults = {
    'shadow_threshold':  75,
'shadow_factor':  1.5,
'shadow_smoothing':  0.25,
'highlight_threshold':  175,
'highlight_factor':  0.5,
'highlight_smoothing':  0.25,
'simplify_isolation':  0
}
        protected override $$type(){
            return "Image Shadows and Highlights"
        }
},

    /**
     * Image Size to Number from WAS Suite/Number/Operations
     * @desc 
    */
    "Image Size to Number" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        get 'width_num'() : NUMBER { return [this.$uid.toString(), 0]  as unknown as NUMBER; }
get 'height_num'() : NUMBER { return [this.$uid.toString(), 1]  as unknown as NUMBER; }
get 'width_float'() : FLOAT { return [this.$uid.toString(), 2]  as unknown as FLOAT; }
get 'height_float'() : FLOAT { return [this.$uid.toString(), 3]  as unknown as FLOAT; }
get 'width_int'() : INT { return [this.$uid.toString(), 4]  as unknown as INT; }
get 'height_int'() : INT { return [this.$uid.toString(), 5]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.image}
        */
        constructor(opts:{
            'image': IMAGE
        }){
            super(ctx);

            super.$$link("image", opts['image'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Image Size to Number"
        }
},

    /**
     * Image Stitch from WAS Suite/Image/Transform
     * @desc 
    */
    "Image Stitch" : class extends Node{
        //Setters
        //set 'image_a'(value : IMAGE)  { super.$$link(0, value) } 
//set 'image_b'(value : IMAGE)  { super.$$link(1, value) } 
//set 'stitch'(value : 'top'|'left'|'bottom'|'right'| $dyn)  { super.$$link(2, value) } 
//set 'feathering'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image_a
		 * @param opts.image_b
		 * @param opts.stitch
		 * @param opts.feathering default: 50 step: 1}
        */
        constructor(opts:{
            'image_a': IMAGE,'image_b': IMAGE,'stitch': 'top'|'left'|'bottom'|'right'| $dyn,'feathering'?: INT
        }){
            super(ctx);

            super.$$link("image_a", opts['image_a'])
super.$$link("image_b", opts['image_b'])
super.$$link("stitch", opts['stitch'])
super.$$link("feathering", opts['feathering']??tmp["Image Stitch"].defaults['feathering'])
}

        static defaults = {
    'feathering':  50
}
        protected override $$type(){
            return "Image Stitch"
        }
},

    /**
     * Image Style Filter from WAS Suite/Image/Filter
     * @desc 
    */
    "Image Style Filter" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'style'(value : '1977'|'aden'|'brannan'|'brooklyn'|'clarendon'|'earlybird'|'fairy tale'|'gingham'|'hudson'|'inkwell'|'kelvin'|'lark'|'lofi'|'maven'|'mayfair'|'moon'|'nashville'|'perpetua'|'reyes'|'rise'|'slumber'|'stinson'|'toaster'|'valencia'|'walden'|'willow'|'xpro2'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.style}
        */
        constructor(opts:{
            'image': IMAGE,'style': '1977'|'aden'|'brannan'|'brooklyn'|'clarendon'|'earlybird'|'fairy tale'|'gingham'|'hudson'|'inkwell'|'kelvin'|'lark'|'lofi'|'maven'|'mayfair'|'moon'|'nashville'|'perpetua'|'reyes'|'rise'|'slumber'|'stinson'|'toaster'|'valencia'|'walden'|'willow'|'xpro2'| $dyn
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("style", opts['style'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Image Style Filter"
        }
},

    /**
     * Image Threshold from WAS Suite/Image/Process
     * @desc 
    */
    "Image Threshold" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'threshold'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.threshold default: 0.5 step: 0.01}
        */
        constructor(opts:{
            'image': IMAGE,'threshold'?: FLOAT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("threshold", opts['threshold']??tmp["Image Threshold"].defaults['threshold'])
}

        static defaults = {
    'threshold':  0.5
}
        protected override $$type(){
            return "Image Threshold"
        }
},

    /**
     * Image Tiled from WAS Suite/Image/Process
     * @desc 
    */
    "Image Tiled" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'num_tiles'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGES'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.num_tiles default: 4 max: 64 min: 2 step: 1}
        */
        constructor(opts:{
            'image': IMAGE,'num_tiles'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("num_tiles", opts['num_tiles']??tmp["Image Tiled"].defaults['num_tiles'])
}

        static defaults = {
    'num_tiles':  4
}
        protected override $$type(){
            return "Image Tiled"
        }
},

    /**
     * Image Transpose from WAS Suite/Image/Transform
     * @desc 
    */
    "Image Transpose" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'image_overlay'(value : IMAGE)  { super.$$link(1, value) } 
//set 'width'(value : INT)  { super.$$link(2, value) } 
//set 'height'(value : INT)  { super.$$link(3, value) } 
//set 'X'(value : INT)  { super.$$link(4, value) } 
//set 'Y'(value : INT)  { super.$$link(5, value) } 
//set 'rotation'(value : INT)  { super.$$link(6, value) } 
//set 'feathering'(value : INT)  { super.$$link(7, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.image_overlay
		 * @param opts.width default: 512 max: 48000 min: -48000 step: 1
		 * @param opts.height default: 512 max: 48000 min: -48000 step: 1
		 * @param opts.X max: 48000 min: -48000 step: 1
		 * @param opts.Y max: 48000 min: -48000 step: 1
		 * @param opts.rotation max: 360 min: -360 step: 1
		 * @param opts.feathering step: 1}
        */
        constructor(opts:{
            'image': IMAGE,'image_overlay': IMAGE,'width'?: INT,'height'?: INT,'X'?: INT,'Y'?: INT,'rotation'?: INT,'feathering'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("image_overlay", opts['image_overlay'])
super.$$link("width", opts['width']??tmp["Image Transpose"].defaults['width'])
super.$$link("height", opts['height']??tmp["Image Transpose"].defaults['height'])
super.$$link("X", opts['X']??tmp["Image Transpose"].defaults['X'])
super.$$link("Y", opts['Y']??tmp["Image Transpose"].defaults['Y'])
super.$$link("rotation", opts['rotation']??tmp["Image Transpose"].defaults['rotation'])
super.$$link("feathering", opts['feathering']??tmp["Image Transpose"].defaults['feathering'])
}

        static defaults = {
    'width':  512,
'height':  512,
'X':  0,
'Y':  0,
'rotation':  0,
'feathering':  0
}
        protected override $$type(){
            return "Image Transpose"
        }
},

    /**
     * Image fDOF Filter from WAS Suite/Image/Filter
     * @desc 
    */
    "Image fDOF Filter" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'depth'(value : IMAGE)  { super.$$link(1, value) } 
//set 'mode'(value : 'mock'|'gaussian'|'box'| $dyn)  { super.$$link(2, value) } 
//set 'radius'(value : INT)  { super.$$link(3, value) } 
//set 'samples'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.depth
		 * @param opts.mode
		 * @param opts.radius default: 8 max: 128 min: 1 step: 1
		 * @param opts.samples default: 1 max: 3 min: 1 step: 1}
        */
        constructor(opts:{
            'image': IMAGE,'depth': IMAGE,'mode': 'mock'|'gaussian'|'box'| $dyn,'radius'?: INT,'samples'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("depth", opts['depth'])
super.$$link("mode", opts['mode'])
super.$$link("radius", opts['radius']??tmp["Image fDOF Filter"].defaults['radius'])
super.$$link("samples", opts['samples']??tmp["Image fDOF Filter"].defaults['samples'])
}

        static defaults = {
    'radius':  8,
'samples':  1
}
        protected override $$type(){
            return "Image fDOF Filter"
        }
},

    /**
     * Image to Latent Mask from WAS Suite/Image/Masking
     * @desc 
    */
    "Image to Latent Mask" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'channel'(value : 'alpha'|'red'|'green'|'blue'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.channel}
        */
        constructor(opts:{
            'images': IMAGE,'channel': 'alpha'|'red'|'green'|'blue'| $dyn
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("channel", opts['channel'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Image to Latent Mask"
        }
},

    /**
     * Image to Noise from WAS Suite/Image/Generate/Noise
     * @desc 
    */
    "Image to Noise" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'num_colors'(value : INT)  { super.$$link(1, value) } 
//set 'black_mix'(value : INT)  { super.$$link(2, value) } 
//set 'gaussian_mix'(value : FLOAT)  { super.$$link(3, value) } 
//set 'brightness'(value : FLOAT)  { super.$$link(4, value) } 
//set 'output_mode'(value : 'batch'|'list'| $dyn)  { super.$$link(5, value) } 
//set 'seed'(value : INT)  { super.$$link(6, value) } 

        //Getters
        get 'image'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.num_colors default: 16 max: 256 min: 2 step: 2
		 * @param opts.black_mix step: 1
		 * @param opts.gaussian_mix step: 0.1
		 * @param opts.brightness default: 1 step: 0.01
		 * @param opts.output_mode
		 * @param opts.seed}
        */
        constructor(opts:{
            'images': IMAGE,'num_colors'?: INT,'black_mix'?: INT,'gaussian_mix'?: FLOAT,'brightness'?: FLOAT,'output_mode': 'batch'|'list'| $dyn,'seed'?: INT
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("num_colors", opts['num_colors']??tmp["Image to Noise"].defaults['num_colors'])
super.$$link("black_mix", opts['black_mix']??tmp["Image to Noise"].defaults['black_mix'])
super.$$link("gaussian_mix", opts['gaussian_mix']??tmp["Image to Noise"].defaults['gaussian_mix'])
super.$$link("brightness", opts['brightness']??tmp["Image to Noise"].defaults['brightness'])
super.$$link("output_mode", opts['output_mode'])
super.$$link("seed", opts['seed']??tmp["Image to Noise"].defaults['seed'])
}

        static defaults = {
    'num_colors':  16,
'black_mix':  0,
'gaussian_mix':  0,
'brightness':  1,
'seed':  0
}
        protected override $$type(){
            return "Image to Noise"
        }
},

    /**
     * Image to Seed from WAS Suite/Image/Analyze
     * @desc 
    */
    "Image to Seed" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        get 'INT'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.images}
        */
        constructor(opts:{
            'images': IMAGE
        }){
            super(ctx);

            super.$$link("images", opts['images'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Image to Seed"
        }
},

    /**
     * Images to RGB from WAS Suite/Image
     * @desc 
    */
    "Images to RGB" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.images}
        */
        constructor(opts:{
            'images': IMAGE
        }){
            super(ctx);

            super.$$link("images", opts['images'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Images to RGB"
        }
},

    /**
     * Images to Linear from WAS Suite/Image
     * @desc 
    */
    "Images to Linear" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.images}
        */
        constructor(opts:{
            'images': IMAGE
        }){
            super(ctx);

            super.$$link("images", opts['images'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Images to Linear"
        }
},

    /**
     * Integer place counter from WAS Suite/Integer
     * @desc 
    */
    "Integer place counter" : class extends Node{
        //Setters
        //set 'int_input'(value : INT)  { super.$$link(0, value) } 

        //Getters
        get 'INT_PLACES'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.int_input step: 1}
        */
        constructor(opts:{
            'int_input'?: INT
        }){
            super(ctx);

            super.$$link("int_input", opts['int_input']??tmp["Integer place counter"].defaults['int_input'])
}

        static defaults = {
    'int_input':  0
}
        protected override $$type(){
            return "Integer place counter"
        }
},

    /**
     * Image Voronoi Noise Filter from WAS Suite/Image/Generate/Noise
     * @desc 
    */
    "Image Voronoi Noise Filter" : class extends Node{
        //Setters
        //set 'width'(value : INT)  { super.$$link(0, value) } 
//set 'height'(value : INT)  { super.$$link(1, value) } 
//set 'density'(value : INT)  { super.$$link(2, value) } 
//set 'modulator'(value : INT)  { super.$$link(3, value) } 
//set 'seed'(value : INT)  { super.$$link(4, value) } 
//set 'flat'(value : 'False'|'True'| $dyn)  { super.$$link(5, value) } 
//set 'RGB_output'(value : 'True'|'False'| $dyn)  { super.$$link(6, value) } 

        //Getters
        get 'image'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.width default: 512 max: 4096 min: 64 step: 1
		 * @param opts.height default: 512 max: 4096 min: 64 step: 1
		 * @param opts.density default: 50 max: 256 min: 10 step: 2
		 * @param opts.modulator step: 1
		 * @param opts.seed
		 * @param opts.flat
		 * @param opts.RGB_output}
        */
        constructor(opts:{
            'width'?: INT,'height'?: INT,'density'?: INT,'modulator'?: INT,'seed'?: INT,'flat'?: 'False'|'True'| $dyn,'RGB_output'?: 'True'|'False'| $dyn
        }){
            super(ctx);

            super.$$link("width", opts['width']??tmp["Image Voronoi Noise Filter"].defaults['width'])
super.$$link("height", opts['height']??tmp["Image Voronoi Noise Filter"].defaults['height'])
super.$$link("density", opts['density']??tmp["Image Voronoi Noise Filter"].defaults['density'])
super.$$link("modulator", opts['modulator']??tmp["Image Voronoi Noise Filter"].defaults['modulator'])
super.$$link("seed", opts['seed']??tmp["Image Voronoi Noise Filter"].defaults['seed'])
super.$$link("flat", opts['flat'])
super.$$link("RGB_output", opts['RGB_output'])
}

        static defaults = {
    'width':  512,
'height':  512,
'density':  50,
'modulator':  0,
'seed':  0
}
        protected override $$type(){
            return "Image Voronoi Noise Filter"
        }
},

    /**
     * KSampler (WAS) from WAS Suite/Sampling
     * @desc 
    */
    "KSampler (WAS)" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'seed'(value : SEED)  { super.$$link(1, value) } 
//set 'steps'(value : INT)  { super.$$link(2, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(3, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(4, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn)  { super.$$link(5, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(6, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(7, value) } 
//set 'latent_image'(value : LATENT)  { super.$$link(8, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(9, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.seed
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.cfg default: 8
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.latent_image
		 * @param opts.denoise default: 1 step: 0.01}
        */
        constructor(opts:{
            'model': MODEL,'seed': SEED,'steps'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn,'positive': CONDITIONING,'negative': CONDITIONING,'latent_image': LATENT,'denoise'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("seed", opts['seed'])
super.$$link("steps", opts['steps']??tmp["KSampler (WAS)"].defaults['steps'])
super.$$link("cfg", opts['cfg']??tmp["KSampler (WAS)"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("latent_image", opts['latent_image'])
super.$$link("denoise", opts['denoise']??tmp["KSampler (WAS)"].defaults['denoise'])
}

        static defaults = {
    'steps':  20,
'cfg':  8,
'denoise':  1
}
        protected override $$type(){
            return "KSampler (WAS)"
        }
},

    /**
     * KSampler Cycle from WAS Suite/Sampling
     * @desc 
    */
    "KSampler Cycle" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'seed'(value : INT)  { super.$$link(1, value) } 
//set 'steps'(value : INT)  { super.$$link(2, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(3, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(4, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn)  { super.$$link(5, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(6, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(7, value) } 
//set 'latent_image'(value : LATENT)  { super.$$link(8, value) } 
//set 'tiled_vae'(value : 'disable'|'enable'| $dyn)  { super.$$link(9, value) } 
//set 'latent_upscale'(value : 'disable'|'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp'| $dyn)  { super.$$link(10, value) } 
//set 'upscale_factor'(value : FLOAT)  { super.$$link(11, value) } 
//set 'upscale_cycles'(value : INT)  { super.$$link(12, value) } 
//set 'starting_denoise'(value : FLOAT)  { super.$$link(13, value) } 
//set 'cycle_denoise'(value : FLOAT)  { super.$$link(14, value) } 
//set 'scale_denoise'(value : 'enable'|'disable'| $dyn)  { super.$$link(15, value) } 
//set 'scale_sampling'(value : 'bilinear'|'bicubic'|'nearest'|'lanczos'| $dyn)  { super.$$link(16, value) } 
//set 'vae'(value : VAE)  { super.$$link(17, value) } 
//set 'secondary_model'(value : MODEL)  { super.$$link(18, value) } 
//set 'secondary_start_cycle'(value : INT)  { super.$$link(19, value) } 
//set 'upscale_model'(value : UPSCALE_MODEL)  { super.$$link(20, value) } 
//set 'processor_model'(value : UPSCALE_MODEL)  { super.$$link(21, value) } 
//set 'pos_additive'(value : CONDITIONING)  { super.$$link(22, value) } 
//set 'neg_additive'(value : CONDITIONING)  { super.$$link(23, value) } 
//set 'pos_add_mode'(value : 'increment'|'decrement'| $dyn)  { super.$$link(24, value) } 
//set 'pos_add_strength'(value : FLOAT)  { super.$$link(25, value) } 
//set 'pos_add_strength_scaling'(value : 'enable'|'disable'| $dyn)  { super.$$link(26, value) } 
//set 'pos_add_strength_cutoff'(value : FLOAT)  { super.$$link(27, value) } 
//set 'neg_add_mode'(value : 'increment'|'decrement'| $dyn)  { super.$$link(28, value) } 
//set 'neg_add_strength'(value : FLOAT)  { super.$$link(29, value) } 
//set 'neg_add_strength_scaling'(value : 'enable'|'disable'| $dyn)  { super.$$link(30, value) } 
//set 'neg_add_strength_cutoff'(value : FLOAT)  { super.$$link(31, value) } 
//set 'sharpen_strength'(value : FLOAT)  { super.$$link(32, value) } 
//set 'sharpen_radius'(value : INT)  { super.$$link(33, value) } 
//set 'steps_scaling'(value : 'enable'|'disable'| $dyn)  { super.$$link(34, value) } 
//set 'steps_control'(value : 'decrement'|'increment'| $dyn)  { super.$$link(35, value) } 
//set 'steps_scaling_value'(value : INT)  { super.$$link(36, value) } 
//set 'steps_cutoff'(value : INT)  { super.$$link(37, value) } 
//set 'denoise_cutoff'(value : FLOAT)  { super.$$link(38, value) } 

        //Getters
        get 'latent(s)'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.seed
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.cfg default: 8
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.latent_image
		 * @param opts.tiled_vae
		 * @param opts.latent_upscale
		 * @param opts.upscale_factor default: 2 max: 8 min: 0.1 step: 0.1
		 * @param opts.upscale_cycles default: 2 max: 12 min: 2 step: 1
		 * @param opts.starting_denoise default: 1 step: 0.01
		 * @param opts.cycle_denoise default: 0.5 step: 0.01
		 * @param opts.scale_denoise
		 * @param opts.scale_sampling
		 * @param opts.vae
		 * @param opts.secondary_model
		 * @param opts.secondary_start_cycle default: 2 max: 16 min: 2 step: 1
		 * @param opts.upscale_model
		 * @param opts.processor_model
		 * @param opts.pos_additive
		 * @param opts.neg_additive
		 * @param opts.pos_add_mode
		 * @param opts.pos_add_strength default: 0.25 max: 1 min: 0.01 step: 0.01
		 * @param opts.pos_add_strength_scaling
		 * @param opts.pos_add_strength_cutoff default: 2 max: 10 min: 0.01 step: 0.01
		 * @param opts.neg_add_mode
		 * @param opts.neg_add_strength default: 0.25 max: 1 min: 0.01 step: 0.01
		 * @param opts.neg_add_strength_scaling
		 * @param opts.neg_add_strength_cutoff default: 2 max: 10 min: 0.01 step: 0.01
		 * @param opts.sharpen_strength step: 0.01
		 * @param opts.sharpen_radius default: 2 max: 12 min: 1 step: 1
		 * @param opts.steps_scaling
		 * @param opts.steps_control
		 * @param opts.steps_scaling_value default: 10 max: 20 min: 1 step: 1
		 * @param opts.steps_cutoff default: 20 max: 1000 min: 4 step: 1
		 * @param opts.denoise_cutoff default: 0.25 max: 1 min: 0.01 step: 0.01}
        */
        constructor(opts:{
            'model': MODEL,'seed'?: INT,'steps'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn,'positive': CONDITIONING,'negative': CONDITIONING,'latent_image': LATENT,'tiled_vae': 'disable'|'enable'| $dyn,'latent_upscale': 'disable'|'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp'| $dyn,'upscale_factor'?: FLOAT,'upscale_cycles'?: INT,'starting_denoise'?: FLOAT,'cycle_denoise'?: FLOAT,'scale_denoise': 'enable'|'disable'| $dyn,'scale_sampling': 'bilinear'|'bicubic'|'nearest'|'lanczos'| $dyn,'vae': VAE,'secondary_model'?: MODEL,'secondary_start_cycle'?: INT,'upscale_model'?: UPSCALE_MODEL,'processor_model'?: UPSCALE_MODEL,'pos_additive'?: CONDITIONING,'neg_additive'?: CONDITIONING,'pos_add_mode'?: 'increment'|'decrement'| $dyn,'pos_add_strength'?: FLOAT,'pos_add_strength_scaling'?: 'enable'|'disable'| $dyn,'pos_add_strength_cutoff'?: FLOAT,'neg_add_mode'?: 'increment'|'decrement'| $dyn,'neg_add_strength'?: FLOAT,'neg_add_strength_scaling'?: 'enable'|'disable'| $dyn,'neg_add_strength_cutoff'?: FLOAT,'sharpen_strength'?: FLOAT,'sharpen_radius'?: INT,'steps_scaling'?: 'enable'|'disable'| $dyn,'steps_control'?: 'decrement'|'increment'| $dyn,'steps_scaling_value'?: INT,'steps_cutoff'?: INT,'denoise_cutoff'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("seed", opts['seed']??tmp["KSampler Cycle"].defaults['seed'])
super.$$link("steps", opts['steps']??tmp["KSampler Cycle"].defaults['steps'])
super.$$link("cfg", opts['cfg']??tmp["KSampler Cycle"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("latent_image", opts['latent_image'])
super.$$link("tiled_vae", opts['tiled_vae'])
super.$$link("latent_upscale", opts['latent_upscale'])
super.$$link("upscale_factor", opts['upscale_factor']??tmp["KSampler Cycle"].defaults['upscale_factor'])
super.$$link("upscale_cycles", opts['upscale_cycles']??tmp["KSampler Cycle"].defaults['upscale_cycles'])
super.$$link("starting_denoise", opts['starting_denoise']??tmp["KSampler Cycle"].defaults['starting_denoise'])
super.$$link("cycle_denoise", opts['cycle_denoise']??tmp["KSampler Cycle"].defaults['cycle_denoise'])
super.$$link("scale_denoise", opts['scale_denoise'])
super.$$link("scale_sampling", opts['scale_sampling'])
super.$$link("vae", opts['vae'])
super.$$link("secondary_model", opts['secondary_model'])
super.$$link("secondary_start_cycle", opts['secondary_start_cycle']??tmp["KSampler Cycle"].defaults['secondary_start_cycle'])
super.$$link("upscale_model", opts['upscale_model'])
super.$$link("processor_model", opts['processor_model'])
super.$$link("pos_additive", opts['pos_additive'])
super.$$link("neg_additive", opts['neg_additive'])
super.$$link("pos_add_mode", opts['pos_add_mode'])
super.$$link("pos_add_strength", opts['pos_add_strength']??tmp["KSampler Cycle"].defaults['pos_add_strength'])
super.$$link("pos_add_strength_scaling", opts['pos_add_strength_scaling'])
super.$$link("pos_add_strength_cutoff", opts['pos_add_strength_cutoff']??tmp["KSampler Cycle"].defaults['pos_add_strength_cutoff'])
super.$$link("neg_add_mode", opts['neg_add_mode'])
super.$$link("neg_add_strength", opts['neg_add_strength']??tmp["KSampler Cycle"].defaults['neg_add_strength'])
super.$$link("neg_add_strength_scaling", opts['neg_add_strength_scaling'])
super.$$link("neg_add_strength_cutoff", opts['neg_add_strength_cutoff']??tmp["KSampler Cycle"].defaults['neg_add_strength_cutoff'])
super.$$link("sharpen_strength", opts['sharpen_strength']??tmp["KSampler Cycle"].defaults['sharpen_strength'])
super.$$link("sharpen_radius", opts['sharpen_radius']??tmp["KSampler Cycle"].defaults['sharpen_radius'])
super.$$link("steps_scaling", opts['steps_scaling'])
super.$$link("steps_control", opts['steps_control'])
super.$$link("steps_scaling_value", opts['steps_scaling_value']??tmp["KSampler Cycle"].defaults['steps_scaling_value'])
super.$$link("steps_cutoff", opts['steps_cutoff']??tmp["KSampler Cycle"].defaults['steps_cutoff'])
super.$$link("denoise_cutoff", opts['denoise_cutoff']??tmp["KSampler Cycle"].defaults['denoise_cutoff'])
}

        static defaults = {
    'seed':  0,
'steps':  20,
'cfg':  8,
'upscale_factor':  2,
'upscale_cycles':  2,
'starting_denoise':  1,
'cycle_denoise':  0.5,
'secondary_start_cycle':  2,
'pos_add_strength':  0.25,
'pos_add_strength_cutoff':  2,
'neg_add_strength':  0.25,
'neg_add_strength_cutoff':  2,
'sharpen_strength':  0,
'sharpen_radius':  2,
'steps_scaling_value':  10,
'steps_cutoff':  20,
'denoise_cutoff':  0.25
}
        protected override $$type(){
            return "KSampler Cycle"
        }
},

    /**
     * Latent Batch from WAS Suite/Latent
     * @desc 
    */
    "Latent Batch" : class extends Node{
        //Setters
        //set 'latent_a'(value : LATENT)  { super.$$link(0, value) } 
//set 'latent_b'(value : LATENT)  { super.$$link(1, value) } 
//set 'latent_c'(value : LATENT)  { super.$$link(2, value) } 
//set 'latent_d'(value : LATENT)  { super.$$link(3, value) } 

        //Getters
        get 'latent'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.latent_a
		 * @param opts.latent_b
		 * @param opts.latent_c
		 * @param opts.latent_d}
        */
        constructor(opts:{
            'latent_a'?: LATENT,'latent_b'?: LATENT,'latent_c'?: LATENT,'latent_d'?: LATENT
        }){
            super(ctx);

            super.$$link("latent_a", opts['latent_a'])
super.$$link("latent_b", opts['latent_b'])
super.$$link("latent_c", opts['latent_c'])
super.$$link("latent_d", opts['latent_d'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Latent Batch"
        }
},

    /**
     * Latent Noise Injection from WAS Suite/Latent/Generate
     * @desc 
    */
    "Latent Noise Injection" : class extends Node{
        //Setters
        //set 'samples'(value : LATENT)  { super.$$link(0, value) } 
//set 'noise_std'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.samples
		 * @param opts.noise_std default: 0.1 step: 0.01}
        */
        constructor(opts:{
            'samples': LATENT,'noise_std'?: FLOAT
        }){
            super(ctx);

            super.$$link("samples", opts['samples'])
super.$$link("noise_std", opts['noise_std']??tmp["Latent Noise Injection"].defaults['noise_std'])
}

        static defaults = {
    'noise_std':  0.1
}
        protected override $$type(){
            return "Latent Noise Injection"
        }
},

    /**
     * Latent Size to Number from WAS Suite/Number/Operations
     * @desc 
    */
    "Latent Size to Number" : class extends Node{
        //Setters
        //set 'samples'(value : LATENT)  { super.$$link(0, value) } 

        //Getters
        get 'tensor_w_num'() : NUMBER { return [this.$uid.toString(), 0]  as unknown as NUMBER; }
get 'tensor_h_num'() : NUMBER { return [this.$uid.toString(), 1]  as unknown as NUMBER; }
get 'undefined'() : INT { return [this.$uid.toString(), 2]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.samples}
        */
        constructor(opts:{
            'samples': LATENT
        }){
            super(ctx);

            super.$$link("samples", opts['samples'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Latent Size to Number"
        }
},

    /**
     * Latent Upscale by Factor (WAS) from WAS Suite/Latent/Transform
     * @desc 
    */
    "Latent Upscale by Factor (WAS)" : class extends Node{
        //Setters
        //set 'samples'(value : LATENT)  { super.$$link(0, value) } 
//set 'mode'(value : 'area'|'bicubic'|'bilinear'|'nearest'| $dyn)  { super.$$link(1, value) } 
//set 'factor'(value : FLOAT)  { super.$$link(2, value) } 
//set 'align'(value : 'true'|'false'| $dyn)  { super.$$link(3, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.samples
		 * @param opts.mode
		 * @param opts.factor default: 2 max: 8 min: 0.1 step: 0.01
		 * @param opts.align}
        */
        constructor(opts:{
            'samples': LATENT,'mode': 'area'|'bicubic'|'bilinear'|'nearest'| $dyn,'factor'?: FLOAT,'align': 'true'|'false'| $dyn
        }){
            super(ctx);

            super.$$link("samples", opts['samples'])
super.$$link("mode", opts['mode'])
super.$$link("factor", opts['factor']??tmp["Latent Upscale by Factor (WAS)"].defaults['factor'])
super.$$link("align", opts['align'])
}

        static defaults = {
    'factor':  2
}
        protected override $$type(){
            return "Latent Upscale by Factor (WAS)"
        }
},

    /**
     * Load Image Batch from WAS Suite/IO
     * @desc 
    */
    "Load Image Batch" : class extends Node{
        //Setters
        //set 'mode'(value : 'single_image'|'incremental_image'|'random'| $dyn)  { super.$$link(0, value) } 
//set 'index'(value : INT)  { super.$$link(1, value) } 
//set 'label'(value : STRING)  { super.$$link(2, value) } 
//set 'path'(value : STRING)  { super.$$link(3, value) } 
//set 'pattern'(value : STRING)  { super.$$link(4, value) } 
//set 'allow_RGBA_output'(value : 'false'|'true'| $dyn)  { super.$$link(5, value) } 
//set 'filename_text_extension'(value : 'true'|'false'| $dyn)  { super.$$link(6, value) } 

        //Getters
        get 'image'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'filename_text'() : STRING { return [this.$uid.toString(), 1]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.mode
		 * @param opts.index step: 1
		 * @param opts.label default: "Batch 001"
		 * @param opts.path
		 * @param opts.pattern default: "*"
		 * @param opts.allow_RGBA_output
		 * @param opts.filename_text_extension}
        */
        constructor(opts:{
            'mode': 'single_image'|'incremental_image'|'random'| $dyn,'index'?: INT,'label'?: STRING,'path'?: STRING,'pattern'?: STRING,'allow_RGBA_output': 'false'|'true'| $dyn,'filename_text_extension'?: 'true'|'false'| $dyn
        }){
            super(ctx);

            super.$$link("mode", opts['mode'])
super.$$link("index", opts['index']??tmp["Load Image Batch"].defaults['index'])
super.$$link("label", opts['label']??tmp["Load Image Batch"].defaults['label'])
super.$$link("path", opts['path']??tmp["Load Image Batch"].defaults['path'])
super.$$link("pattern", opts['pattern']??tmp["Load Image Batch"].defaults['pattern'])
super.$$link("allow_RGBA_output", opts['allow_RGBA_output'])
super.$$link("filename_text_extension", opts['filename_text_extension'])
}

        static defaults = {
    'index':  0,
'label':  "Batch 001",
'path':  "",
'pattern':  "*"
}
        protected override $$type(){
            return "Load Image Batch"
        }
},

    /**
     * Load Text File from WAS Suite/IO
     * @desc 
    */
    "Load Text File" : class extends Node{
        //Setters
        //set 'file_path'(value : STRING)  { super.$$link(0, value) } 
//set 'dictionary_name'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }
get 'DICT'() : DICT { return [this.$uid.toString(), 1]  as unknown as DICT; }

        /**
          * Constructor
		 * @param opts.file_path
		 * @param opts.dictionary_name default: "[filename]"}
        */
        constructor(opts:{
            'file_path'?: STRING,'dictionary_name'?: STRING
        }){
            super(ctx);

            super.$$link("file_path", opts['file_path']??tmp["Load Text File"].defaults['file_path'])
super.$$link("dictionary_name", opts['dictionary_name']??tmp["Load Text File"].defaults['dictionary_name'])
}

        static defaults = {
    'file_path':  "",
'dictionary_name':  "[filename]"
}
        protected override $$type(){
            return "Load Text File"
        }
},

    /**
     * Load Lora from WAS Suite/Loaders
     * @desc 
    */
    "Load Lora" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'clip'(value : CLIP)  { super.$$link(1, value) } 
//set 'lora_name'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(2, value) } 
//set 'strength_model'(value : FLOAT)  { super.$$link(3, value) } 
//set 'strength_clip'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this.$uid.toString(), 1]  as unknown as CLIP; }
get 'NAME_STRING'() : STRING { return [this.$uid.toString(), 2]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.clip
		 * @param opts.lora_name
		 * @param opts.strength_model default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.strength_clip default: 1 max: 10 min: -10 step: 0.01}
        */
        constructor(opts:{
            'model': MODEL,'clip': CLIP,'lora_name': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'strength_model'?: FLOAT,'strength_clip'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("clip", opts['clip'])
super.$$link("lora_name", opts['lora_name'])
super.$$link("strength_model", opts['strength_model']??tmp["Load Lora"].defaults['strength_model'])
super.$$link("strength_clip", opts['strength_clip']??tmp["Load Lora"].defaults['strength_clip'])
}

        static defaults = {
    'strength_model':  1,
'strength_clip':  1
}
        protected override $$type(){
            return "Load Lora"
        }
},

    /**
     * Lora Input Switch from WAS Suite/Logic
     * @desc 
    */
    "Lora Input Switch" : class extends Node{
        //Setters
        //set 'model_a'(value : MODEL)  { super.$$link(0, value) } 
//set 'clip_a'(value : CLIP)  { super.$$link(1, value) } 
//set 'model_b'(value : MODEL)  { super.$$link(2, value) } 
//set 'clip_b'(value : CLIP)  { super.$$link(3, value) } 
//set 'boolean'(value : BOOLEAN)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this.$uid.toString(), 1]  as unknown as CLIP; }

        /**
          * Constructor
		 * @param opts.model_a
		 * @param opts.clip_a
		 * @param opts.model_b
		 * @param opts.clip_b
		 * @param opts.boolean}
        */
        constructor(opts:{
            'model_a': MODEL,'clip_a': CLIP,'model_b': MODEL,'clip_b': CLIP,'boolean': BOOLEAN
        }){
            super(ctx);

            super.$$link("model_a", opts['model_a'])
super.$$link("clip_a", opts['clip_a'])
super.$$link("model_b", opts['model_b'])
super.$$link("clip_b", opts['clip_b'])
super.$$link("boolean", opts['boolean'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Lora Input Switch"
        }
},

    /**
     * Masks Add from WAS Suite/Image/Masking
     * @desc 
    */
    "Masks Add" : class extends Node{
        //Setters
        //set 'masks_a'(value : MASK)  { super.$$link(0, value) } 
//set 'masks_b'(value : MASK)  { super.$$link(1, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.masks_a
		 * @param opts.masks_b}
        */
        constructor(opts:{
            'masks_a': MASK,'masks_b': MASK
        }){
            super(ctx);

            super.$$link("masks_a", opts['masks_a'])
super.$$link("masks_b", opts['masks_b'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Masks Add"
        }
},

    /**
     * Masks Subtract from WAS Suite/Image/Masking
     * @desc 
    */
    "Masks Subtract" : class extends Node{
        //Setters
        //set 'masks_a'(value : MASK)  { super.$$link(0, value) } 
//set 'masks_b'(value : MASK)  { super.$$link(1, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.masks_a
		 * @param opts.masks_b}
        */
        constructor(opts:{
            'masks_a': MASK,'masks_b': MASK
        }){
            super(ctx);

            super.$$link("masks_a", opts['masks_a'])
super.$$link("masks_b", opts['masks_b'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Masks Subtract"
        }
},

    /**
     * Mask Arbitrary Region from WAS Suite/Image/Masking
     * @desc 
    */
    "Mask Arbitrary Region" : class extends Node{
        //Setters
        //set 'masks'(value : MASK)  { super.$$link(0, value) } 
//set 'size'(value : INT)  { super.$$link(1, value) } 
//set 'threshold'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.masks
		 * @param opts.size default: 256 max: 4096 min: 1 step: 1
		 * @param opts.threshold default: 128 step: 1}
        */
        constructor(opts:{
            'masks': MASK,'size'?: INT,'threshold'?: INT
        }){
            super(ctx);

            super.$$link("masks", opts['masks'])
super.$$link("size", opts['size']??tmp["Mask Arbitrary Region"].defaults['size'])
super.$$link("threshold", opts['threshold']??tmp["Mask Arbitrary Region"].defaults['threshold'])
}

        static defaults = {
    'size':  256,
'threshold':  128
}
        protected override $$type(){
            return "Mask Arbitrary Region"
        }
},

    /**
     * Mask Batch to Mask from WAS Suite/Image/Masking
     * @desc 
    */
    "Mask Batch to Mask" : class extends Node{
        //Setters
        //set 'masks'(value : MASK)  { super.$$link(0, value) } 
//set 'batch_number'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.masks
		 * @param opts.batch_number step: 1}
        */
        constructor(opts:{
            'masks': MASK,'batch_number'?: INT
        }){
            super(ctx);

            super.$$link("masks", opts['masks'])
super.$$link("batch_number", opts['batch_number']??tmp["Mask Batch to Mask"].defaults['batch_number'])
}

        static defaults = {
    'batch_number':  0
}
        protected override $$type(){
            return "Mask Batch to Mask"
        }
},

    /**
     * Mask Batch from WAS Suite/Image/Masking
     * @desc 
    */
    "Mask Batch" : class extends Node{
        //Setters
        //set 'masks_a'(value : MASK)  { super.$$link(0, value) } 
//set 'masks_b'(value : MASK)  { super.$$link(1, value) } 
//set 'masks_c'(value : MASK)  { super.$$link(2, value) } 
//set 'masks_d'(value : MASK)  { super.$$link(3, value) } 

        //Getters
        get 'masks'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.masks_a
		 * @param opts.masks_b
		 * @param opts.masks_c
		 * @param opts.masks_d}
        */
        constructor(opts:{
            'masks_a'?: MASK,'masks_b'?: MASK,'masks_c'?: MASK,'masks_d'?: MASK
        }){
            super(ctx);

            super.$$link("masks_a", opts['masks_a'])
super.$$link("masks_b", opts['masks_b'])
super.$$link("masks_c", opts['masks_c'])
super.$$link("masks_d", opts['masks_d'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Mask Batch"
        }
},

    /**
     * Mask Ceiling Region from WAS Suite/Image/Masking
     * @desc 
    */
    "Mask Ceiling Region" : class extends Node{
        //Setters
        //set 'masks'(value : MASK)  { super.$$link(0, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.masks}
        */
        constructor(opts:{
            'masks': MASK
        }){
            super(ctx);

            super.$$link("masks", opts['masks'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Mask Ceiling Region"
        }
},

    /**
     * Mask Crop Dominant Region from WAS Suite/Image/Masking
     * @desc 
    */
    "Mask Crop Dominant Region" : class extends Node{
        //Setters
        //set 'masks'(value : MASK)  { super.$$link(0, value) } 
//set 'padding'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.masks
		 * @param opts.padding default: 24 step: 1}
        */
        constructor(opts:{
            'masks': MASK,'padding'?: INT
        }){
            super(ctx);

            super.$$link("masks", opts['masks'])
super.$$link("padding", opts['padding']??tmp["Mask Crop Dominant Region"].defaults['padding'])
}

        static defaults = {
    'padding':  24
}
        protected override $$type(){
            return "Mask Crop Dominant Region"
        }
},

    /**
     * Mask Crop Minority Region from WAS Suite/Image/Masking
     * @desc 
    */
    "Mask Crop Minority Region" : class extends Node{
        //Setters
        //set 'masks'(value : MASK)  { super.$$link(0, value) } 
//set 'padding'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.masks
		 * @param opts.padding default: 24 step: 1}
        */
        constructor(opts:{
            'masks': MASK,'padding'?: INT
        }){
            super(ctx);

            super.$$link("masks", opts['masks'])
super.$$link("padding", opts['padding']??tmp["Mask Crop Minority Region"].defaults['padding'])
}

        static defaults = {
    'padding':  24
}
        protected override $$type(){
            return "Mask Crop Minority Region"
        }
},

    /**
     * Mask Crop Region from WAS Suite/Image/Masking
     * @desc 
    */
    "Mask Crop Region" : class extends Node{
        //Setters
        //set 'mask'(value : MASK)  { super.$$link(0, value) } 
//set 'padding'(value : INT)  { super.$$link(1, value) } 
//set 'region_type'(value : 'dominant'|'minority'| $dyn)  { super.$$link(2, value) } 

        //Getters
        get 'cropped_mask'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }
get 'crop_data'() : CROP_DATA { return [this.$uid.toString(), 1]  as unknown as CROP_DATA; }
get 'top_int'() : INT { return [this.$uid.toString(), 2]  as unknown as INT; }
get 'left_int'() : INT { return [this.$uid.toString(), 3]  as unknown as INT; }
get 'right_int'() : INT { return [this.$uid.toString(), 4]  as unknown as INT; }
get 'bottom_int'() : INT { return [this.$uid.toString(), 5]  as unknown as INT; }
get 'width_int'() : INT { return [this.$uid.toString(), 6]  as unknown as INT; }
get 'height_int'() : INT { return [this.$uid.toString(), 7]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.mask
		 * @param opts.padding default: 24 step: 1
		 * @param opts.region_type}
        */
        constructor(opts:{
            'mask': MASK,'padding'?: INT,'region_type': 'dominant'|'minority'| $dyn
        }){
            super(ctx);

            super.$$link("mask", opts['mask'])
super.$$link("padding", opts['padding']??tmp["Mask Crop Region"].defaults['padding'])
super.$$link("region_type", opts['region_type'])
}

        static defaults = {
    'padding':  24
}
        protected override $$type(){
            return "Mask Crop Region"
        }
},

    /**
     * Mask Paste Region from WAS Suite/Image/Masking
     * @desc 
    */
    "Mask Paste Region" : class extends Node{
        //Setters
        //set 'mask'(value : MASK)  { super.$$link(0, value) } 
//set 'crop_mask'(value : MASK)  { super.$$link(1, value) } 
//set 'crop_data'(value : CROP_DATA)  { super.$$link(2, value) } 
//set 'crop_blending'(value : FLOAT)  { super.$$link(3, value) } 
//set 'crop_sharpening'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.mask
		 * @param opts.crop_mask
		 * @param opts.crop_data
		 * @param opts.crop_blending default: 0.25 step: 0.01
		 * @param opts.crop_sharpening step: 1}
        */
        constructor(opts:{
            'mask': MASK,'crop_mask': MASK,'crop_data': CROP_DATA,'crop_blending'?: FLOAT,'crop_sharpening'?: INT
        }){
            super(ctx);

            super.$$link("mask", opts['mask'])
super.$$link("crop_mask", opts['crop_mask'])
super.$$link("crop_data", opts['crop_data'])
super.$$link("crop_blending", opts['crop_blending']??tmp["Mask Paste Region"].defaults['crop_blending'])
super.$$link("crop_sharpening", opts['crop_sharpening']??tmp["Mask Paste Region"].defaults['crop_sharpening'])
}

        static defaults = {
    'crop_blending':  0.25,
'crop_sharpening':  0
}
        protected override $$type(){
            return "Mask Paste Region"
        }
},

    /**
     * Mask Dilate Region from WAS Suite/Image/Masking
     * @desc 
    */
    "Mask Dilate Region" : class extends Node{
        //Setters
        //set 'masks'(value : MASK)  { super.$$link(0, value) } 
//set 'iterations'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.masks
		 * @param opts.iterations default: 5 max: 64 min: 1 step: 1}
        */
        constructor(opts:{
            'masks': MASK,'iterations'?: INT
        }){
            super(ctx);

            super.$$link("masks", opts['masks'])
super.$$link("iterations", opts['iterations']??tmp["Mask Dilate Region"].defaults['iterations'])
}

        static defaults = {
    'iterations':  5
}
        protected override $$type(){
            return "Mask Dilate Region"
        }
},

    /**
     * Mask Dominant Region from WAS Suite/Image/Masking
     * @desc 
    */
    "Mask Dominant Region" : class extends Node{
        //Setters
        //set 'masks'(value : MASK)  { super.$$link(0, value) } 
//set 'threshold'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.masks
		 * @param opts.threshold default: 128 step: 1}
        */
        constructor(opts:{
            'masks': MASK,'threshold'?: INT
        }){
            super(ctx);

            super.$$link("masks", opts['masks'])
super.$$link("threshold", opts['threshold']??tmp["Mask Dominant Region"].defaults['threshold'])
}

        static defaults = {
    'threshold':  128
}
        protected override $$type(){
            return "Mask Dominant Region"
        }
},

    /**
     * Mask Erode Region from WAS Suite/Image/Masking
     * @desc 
    */
    "Mask Erode Region" : class extends Node{
        //Setters
        //set 'masks'(value : MASK)  { super.$$link(0, value) } 
//set 'iterations'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.masks
		 * @param opts.iterations default: 5 max: 64 min: 1 step: 1}
        */
        constructor(opts:{
            'masks': MASK,'iterations'?: INT
        }){
            super(ctx);

            super.$$link("masks", opts['masks'])
super.$$link("iterations", opts['iterations']??tmp["Mask Erode Region"].defaults['iterations'])
}

        static defaults = {
    'iterations':  5
}
        protected override $$type(){
            return "Mask Erode Region"
        }
},

    /**
     * Mask Fill Holes from WAS Suite/Image/Masking
     * @desc 
    */
    "Mask Fill Holes" : class extends Node{
        //Setters
        //set 'masks'(value : MASK)  { super.$$link(0, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.masks}
        */
        constructor(opts:{
            'masks': MASK
        }){
            super(ctx);

            super.$$link("masks", opts['masks'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Mask Fill Holes"
        }
},

    /**
     * Mask Floor Region from WAS Suite/Image/Masking
     * @desc 
    */
    "Mask Floor Region" : class extends Node{
        //Setters
        //set 'masks'(value : MASK)  { super.$$link(0, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.masks}
        */
        constructor(opts:{
            'masks': MASK
        }){
            super(ctx);

            super.$$link("masks", opts['masks'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Mask Floor Region"
        }
},

    /**
     * Mask Gaussian Region from WAS Suite/Image/Masking
     * @desc 
    */
    "Mask Gaussian Region" : class extends Node{
        //Setters
        //set 'masks'(value : MASK)  { super.$$link(0, value) } 
//set 'radius'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.masks
		 * @param opts.radius default: 5 step: 0.1}
        */
        constructor(opts:{
            'masks': MASK,'radius'?: FLOAT
        }){
            super(ctx);

            super.$$link("masks", opts['masks'])
super.$$link("radius", opts['radius']??tmp["Mask Gaussian Region"].defaults['radius'])
}

        static defaults = {
    'radius':  5
}
        protected override $$type(){
            return "Mask Gaussian Region"
        }
},

    /**
     * Mask Invert from WAS Suite/Image/Masking
     * @desc 
    */
    "Mask Invert" : class extends Node{
        //Setters
        //set 'masks'(value : MASK)  { super.$$link(0, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.masks}
        */
        constructor(opts:{
            'masks': MASK
        }){
            super(ctx);

            super.$$link("masks", opts['masks'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Mask Invert"
        }
},

    /**
     * Mask Minority Region from WAS Suite/Image/Masking
     * @desc 
    */
    "Mask Minority Region" : class extends Node{
        //Setters
        //set 'masks'(value : MASK)  { super.$$link(0, value) } 
//set 'threshold'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.masks
		 * @param opts.threshold default: 128 step: 1}
        */
        constructor(opts:{
            'masks': MASK,'threshold'?: INT
        }){
            super(ctx);

            super.$$link("masks", opts['masks'])
super.$$link("threshold", opts['threshold']??tmp["Mask Minority Region"].defaults['threshold'])
}

        static defaults = {
    'threshold':  128
}
        protected override $$type(){
            return "Mask Minority Region"
        }
},

    /**
     * Mask Smooth Region from WAS Suite/Image/Masking
     * @desc 
    */
    "Mask Smooth Region" : class extends Node{
        //Setters
        //set 'masks'(value : MASK)  { super.$$link(0, value) } 
//set 'sigma'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.masks
		 * @param opts.sigma default: 5 step: 0.1}
        */
        constructor(opts:{
            'masks': MASK,'sigma'?: FLOAT
        }){
            super(ctx);

            super.$$link("masks", opts['masks'])
super.$$link("sigma", opts['sigma']??tmp["Mask Smooth Region"].defaults['sigma'])
}

        static defaults = {
    'sigma':  5
}
        protected override $$type(){
            return "Mask Smooth Region"
        }
},

    /**
     * Mask Threshold Region from WAS Suite/Image/Masking
     * @desc 
    */
    "Mask Threshold Region" : class extends Node{
        //Setters
        //set 'masks'(value : MASK)  { super.$$link(0, value) } 
//set 'black_threshold'(value : INT)  { super.$$link(1, value) } 
//set 'white_threshold'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.masks
		 * @param opts.black_threshold default: 75 step: 1
		 * @param opts.white_threshold default: 175 step: 1}
        */
        constructor(opts:{
            'masks': MASK,'black_threshold'?: INT,'white_threshold'?: INT
        }){
            super(ctx);

            super.$$link("masks", opts['masks'])
super.$$link("black_threshold", opts['black_threshold']??tmp["Mask Threshold Region"].defaults['black_threshold'])
super.$$link("white_threshold", opts['white_threshold']??tmp["Mask Threshold Region"].defaults['white_threshold'])
}

        static defaults = {
    'black_threshold':  75,
'white_threshold':  175
}
        protected override $$type(){
            return "Mask Threshold Region"
        }
},

    /**
     * Masks Combine Regions from WAS Suite/Image/Masking
     * @desc 
    */
    "Masks Combine Regions" : class extends Node{
        //Setters
        //set 'mask_a'(value : MASK)  { super.$$link(0, value) } 
//set 'mask_b'(value : MASK)  { super.$$link(1, value) } 
//set 'mask_c'(value : MASK)  { super.$$link(2, value) } 
//set 'mask_d'(value : MASK)  { super.$$link(3, value) } 
//set 'mask_e'(value : MASK)  { super.$$link(4, value) } 
//set 'mask_f'(value : MASK)  { super.$$link(5, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.mask_a
		 * @param opts.mask_b
		 * @param opts.mask_c
		 * @param opts.mask_d
		 * @param opts.mask_e
		 * @param opts.mask_f}
        */
        constructor(opts:{
            'mask_a': MASK,'mask_b': MASK,'mask_c'?: MASK,'mask_d'?: MASK,'mask_e'?: MASK,'mask_f'?: MASK
        }){
            super(ctx);

            super.$$link("mask_a", opts['mask_a'])
super.$$link("mask_b", opts['mask_b'])
super.$$link("mask_c", opts['mask_c'])
super.$$link("mask_d", opts['mask_d'])
super.$$link("mask_e", opts['mask_e'])
super.$$link("mask_f", opts['mask_f'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Masks Combine Regions"
        }
},

    /**
     * Masks Combine Batch from WAS Suite/Image/Masking
     * @desc 
    */
    "Masks Combine Batch" : class extends Node{
        //Setters
        //set 'masks'(value : MASK)  { super.$$link(0, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.masks}
        */
        constructor(opts:{
            'masks': MASK
        }){
            super(ctx);

            super.$$link("masks", opts['masks'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Masks Combine Batch"
        }
},

    /**
     * MiDaS Model Loader from WAS Suite/Loaders
     * @desc 
    */
    "MiDaS Model Loader" : class extends Node{
        //Setters
        //set 'midas_model'(value : 'DPT_Large'|'DPT_Hybrid'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'midas_model'() : MIDAS_MODEL { return [this.$uid.toString(), 0]  as unknown as MIDAS_MODEL; }

        /**
          * Constructor
		 * @param opts.midas_model}
        */
        constructor(opts:{
            'midas_model': 'DPT_Large'|'DPT_Hybrid'| $dyn
        }){
            super(ctx);

            super.$$link("midas_model", opts['midas_model'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "MiDaS Model Loader"
        }
},

    /**
     * MiDaS Depth Approximation from WAS Suite/Image/AI
     * @desc 
    */
    "MiDaS Depth Approximation" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'use_cpu'(value : 'false'|'true'| $dyn)  { super.$$link(1, value) } 
//set 'midas_type'(value : 'DPT_Large'|'DPT_Hybrid'| $dyn)  { super.$$link(2, value) } 
//set 'invert_depth'(value : 'false'|'true'| $dyn)  { super.$$link(3, value) } 
//set 'midas_model'(value : MIDAS_MODEL)  { super.$$link(4, value) } 

        //Getters
        get 'images'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.use_cpu
		 * @param opts.midas_type
		 * @param opts.invert_depth
		 * @param opts.midas_model}
        */
        constructor(opts:{
            'image': IMAGE,'use_cpu': 'false'|'true'| $dyn,'midas_type': 'DPT_Large'|'DPT_Hybrid'| $dyn,'invert_depth': 'false'|'true'| $dyn,'midas_model'?: MIDAS_MODEL
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("use_cpu", opts['use_cpu'])
super.$$link("midas_type", opts['midas_type'])
super.$$link("invert_depth", opts['invert_depth'])
super.$$link("midas_model", opts['midas_model'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "MiDaS Depth Approximation"
        }
},

    /**
     * MiDaS Mask Image from WAS Suite/Image/AI
     * @desc 
    */
    "MiDaS Mask Image" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'use_cpu'(value : 'false'|'true'| $dyn)  { super.$$link(1, value) } 
//set 'midas_model'(value : 'DPT_Large'|'DPT_Hybrid'|'DPT_Small'| $dyn)  { super.$$link(2, value) } 
//set 'remove'(value : 'background'|'foregroud'| $dyn)  { super.$$link(3, value) } 
//set 'threshold'(value : 'false'|'true'| $dyn)  { super.$$link(4, value) } 
//set 'threshold_low'(value : FLOAT)  { super.$$link(5, value) } 
//set 'threshold_mid'(value : FLOAT)  { super.$$link(6, value) } 
//set 'threshold_high'(value : FLOAT)  { super.$$link(7, value) } 
//set 'smoothing'(value : FLOAT)  { super.$$link(8, value) } 
//set 'background_red'(value : INT)  { super.$$link(9, value) } 
//set 'background_green'(value : INT)  { super.$$link(10, value) } 
//set 'background_blue'(value : INT)  { super.$$link(11, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.use_cpu
		 * @param opts.midas_model
		 * @param opts.remove
		 * @param opts.threshold
		 * @param opts.threshold_low default: 10 step: 1
		 * @param opts.threshold_mid default: 200 step: 1
		 * @param opts.threshold_high default: 210 step: 1
		 * @param opts.smoothing default: 0.25 step: 0.01
		 * @param opts.background_red step: 1
		 * @param opts.background_green step: 1
		 * @param opts.background_blue step: 1}
        */
        constructor(opts:{
            'image': IMAGE,'use_cpu': 'false'|'true'| $dyn,'midas_model': 'DPT_Large'|'DPT_Hybrid'|'DPT_Small'| $dyn,'remove': 'background'|'foregroud'| $dyn,'threshold': 'false'|'true'| $dyn,'threshold_low'?: FLOAT,'threshold_mid'?: FLOAT,'threshold_high'?: FLOAT,'smoothing'?: FLOAT,'background_red'?: INT,'background_green'?: INT,'background_blue'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("use_cpu", opts['use_cpu'])
super.$$link("midas_model", opts['midas_model'])
super.$$link("remove", opts['remove'])
super.$$link("threshold", opts['threshold'])
super.$$link("threshold_low", opts['threshold_low']??tmp["MiDaS Mask Image"].defaults['threshold_low'])
super.$$link("threshold_mid", opts['threshold_mid']??tmp["MiDaS Mask Image"].defaults['threshold_mid'])
super.$$link("threshold_high", opts['threshold_high']??tmp["MiDaS Mask Image"].defaults['threshold_high'])
super.$$link("smoothing", opts['smoothing']??tmp["MiDaS Mask Image"].defaults['smoothing'])
super.$$link("background_red", opts['background_red']??tmp["MiDaS Mask Image"].defaults['background_red'])
super.$$link("background_green", opts['background_green']??tmp["MiDaS Mask Image"].defaults['background_green'])
super.$$link("background_blue", opts['background_blue']??tmp["MiDaS Mask Image"].defaults['background_blue'])
}

        static defaults = {
    'threshold_low':  10,
'threshold_mid':  200,
'threshold_high':  210,
'smoothing':  0.25,
'background_red':  0,
'background_green':  0,
'background_blue':  0
}
        protected override $$type(){
            return "MiDaS Mask Image"
        }
},

    /**
     * Model Input Switch from WAS Suite/Logic
     * @desc 
    */
    "Model Input Switch" : class extends Node{
        //Setters
        //set 'model_a'(value : MODEL)  { super.$$link(0, value) } 
//set 'model_b'(value : MODEL)  { super.$$link(1, value) } 
//set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model_a
		 * @param opts.model_b
		 * @param opts.boolean}
        */
        constructor(opts:{
            'model_a': MODEL,'model_b': MODEL,'boolean': BOOLEAN
        }){
            super(ctx);

            super.$$link("model_a", opts['model_a'])
super.$$link("model_b", opts['model_b'])
super.$$link("boolean", opts['boolean'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Model Input Switch"
        }
},

    /**
     * Number Counter from WAS Suite/Number
     * @desc 
    */
    "Number Counter" : class extends Node{
        //Setters
        //set 'number_type'(value : 'integer'|'float'| $dyn)  { super.$$link(0, value) } 
//set 'mode'(value : 'increment'|'decrement'|'increment_to_stop'|'decrement_to_stop'| $dyn)  { super.$$link(1, value) } 
//set 'start'(value : FLOAT)  { super.$$link(2, value) } 
//set 'stop'(value : FLOAT)  { super.$$link(3, value) } 
//set 'step'(value : FLOAT)  { super.$$link(4, value) } 
//set 'reset_bool'(value : NUMBER)  { super.$$link(5, value) } 

        //Getters
        get 'number'() : NUMBER { return [this.$uid.toString(), 0]  as unknown as NUMBER; }
get 'float'() : FLOAT { return [this.$uid.toString(), 1]  as unknown as FLOAT; }
get 'int'() : INT { return [this.$uid.toString(), 2]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.number_type
		 * @param opts.mode
		 * @param opts.start max: 18446744073709552000 min: -18446744073709552000 step: 0.01
		 * @param opts.stop max: 18446744073709552000 min: -18446744073709552000 step: 0.01
		 * @param opts.step default: 1 step: 0.01
		 * @param opts.reset_bool}
        */
        constructor(opts:{
            'number_type': 'integer'|'float'| $dyn,'mode': 'increment'|'decrement'|'increment_to_stop'|'decrement_to_stop'| $dyn,'start'?: FLOAT,'stop'?: FLOAT,'step'?: FLOAT,'reset_bool'?: NUMBER
        }){
            super(ctx);

            super.$$link("number_type", opts['number_type'])
super.$$link("mode", opts['mode'])
super.$$link("start", opts['start']??tmp["Number Counter"].defaults['start'])
super.$$link("stop", opts['stop']??tmp["Number Counter"].defaults['stop'])
super.$$link("step", opts['step']??tmp["Number Counter"].defaults['step'])
super.$$link("reset_bool", opts['reset_bool'])
}

        static defaults = {
    'start':  0,
'stop':  0,
'step':  1
}
        protected override $$type(){
            return "Number Counter"
        }
},

    /**
     * Number Operation from WAS Suite/Number/Operations
     * @desc 
    */
    "Number Operation" : class extends Node{
        //Setters
        //set 'number_a'(value : NUMBER)  { super.$$link(0, value) } 
//set 'number_b'(value : NUMBER)  { super.$$link(1, value) } 
//set 'operation'(value : 'addition'|'subtraction'|'division'|'floor division'|'multiplication'|'exponentiation'|'modulus'|'greater-than'|'greater-than or equals'|'less-than'|'less-than or equals'|'equals'|'does not equal'| $dyn)  { super.$$link(2, value) } 

        //Getters
        get 'NUMBER'() : NUMBER { return [this.$uid.toString(), 0]  as unknown as NUMBER; }
get 'FLOAT'() : FLOAT { return [this.$uid.toString(), 1]  as unknown as FLOAT; }
get 'INT'() : INT { return [this.$uid.toString(), 2]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.number_a
		 * @param opts.number_b
		 * @param opts.operation}
        */
        constructor(opts:{
            'number_a': NUMBER,'number_b': NUMBER,'operation': 'addition'|'subtraction'|'division'|'floor division'|'multiplication'|'exponentiation'|'modulus'|'greater-than'|'greater-than or equals'|'less-than'|'less-than or equals'|'equals'|'does not equal'| $dyn
        }){
            super(ctx);

            super.$$link("number_a", opts['number_a'])
super.$$link("number_b", opts['number_b'])
super.$$link("operation", opts['operation'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Number Operation"
        }
},

    /**
     * Number to Float from WAS Suite/Number/Operations
     * @desc 
    */
    "Number to Float" : class extends Node{
        //Setters
        //set 'number'(value : NUMBER)  { super.$$link(0, value) } 

        //Getters
        get 'FLOAT'() : FLOAT { return [this.$uid.toString(), 0]  as unknown as FLOAT; }

        /**
          * Constructor
		 * @param opts.number}
        */
        constructor(opts:{
            'number': NUMBER
        }){
            super(ctx);

            super.$$link("number", opts['number'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Number to Float"
        }
},

    /**
     * Number Input Switch from WAS Suite/Logic
     * @desc 
    */
    "Number Input Switch" : class extends Node{
        //Setters
        //set 'number_a'(value : NUMBER)  { super.$$link(0, value) } 
//set 'number_b'(value : NUMBER)  { super.$$link(1, value) } 
//set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'NUMBER'() : NUMBER { return [this.$uid.toString(), 0]  as unknown as NUMBER; }
get 'FLOAT'() : FLOAT { return [this.$uid.toString(), 1]  as unknown as FLOAT; }
get 'INT'() : INT { return [this.$uid.toString(), 2]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.number_a
		 * @param opts.number_b
		 * @param opts.boolean}
        */
        constructor(opts:{
            'number_a': NUMBER,'number_b': NUMBER,'boolean': BOOLEAN
        }){
            super(ctx);

            super.$$link("number_a", opts['number_a'])
super.$$link("number_b", opts['number_b'])
super.$$link("boolean", opts['boolean'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Number Input Switch"
        }
},

    /**
     * Number Input Condition from WAS Suite/Logic
     * @desc 
    */
    "Number Input Condition" : class extends Node{
        //Setters
        //set 'number_a'(value : NUMBER)  { super.$$link(0, value) } 
//set 'number_b'(value : NUMBER)  { super.$$link(1, value) } 
//set 'return_boolean'(value : 'false'|'true'| $dyn)  { super.$$link(2, value) } 
//set 'comparison'(value : 'and'|'or'|'greater-than'|'greater-than or equals'|'less-than'|'less-than or equals'|'equals'|'does not equal'|'divisible by'|'if A odd'|'if A even'|'if A prime'|'factor of'| $dyn)  { super.$$link(3, value) } 

        //Getters
        get 'NUMBER'() : NUMBER { return [this.$uid.toString(), 0]  as unknown as NUMBER; }
get 'FLOAT'() : FLOAT { return [this.$uid.toString(), 1]  as unknown as FLOAT; }
get 'INT'() : INT { return [this.$uid.toString(), 2]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.number_a
		 * @param opts.number_b
		 * @param opts.return_boolean
		 * @param opts.comparison}
        */
        constructor(opts:{
            'number_a': NUMBER,'number_b': NUMBER,'return_boolean': 'false'|'true'| $dyn,'comparison': 'and'|'or'|'greater-than'|'greater-than or equals'|'less-than'|'less-than or equals'|'equals'|'does not equal'|'divisible by'|'if A odd'|'if A even'|'if A prime'|'factor of'| $dyn
        }){
            super(ctx);

            super.$$link("number_a", opts['number_a'])
super.$$link("number_b", opts['number_b'])
super.$$link("return_boolean", opts['return_boolean'])
super.$$link("comparison", opts['comparison'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Number Input Condition"
        }
},

    /**
     * Number Multiple Of from WAS Suite/Number/Functions
     * @desc 
    */
    "Number Multiple Of" : class extends Node{
        //Setters
        //set 'number'(value : NUMBER)  { super.$$link(0, value) } 
//set 'multiple'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'NUMBER'() : NUMBER { return [this.$uid.toString(), 0]  as unknown as NUMBER; }
get 'FLOAT'() : FLOAT { return [this.$uid.toString(), 1]  as unknown as FLOAT; }
get 'INT'() : INT { return [this.$uid.toString(), 2]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.number
		 * @param opts.multiple default: 8 max: 18446744073709552000 min: -18446744073709552000}
        */
        constructor(opts:{
            'number': NUMBER,'multiple'?: INT
        }){
            super(ctx);

            super.$$link("number", opts['number'])
super.$$link("multiple", opts['multiple']??tmp["Number Multiple Of"].defaults['multiple'])
}

        static defaults = {
    'multiple':  8
}
        protected override $$type(){
            return "Number Multiple Of"
        }
},

    /**
     * Number PI from WAS Suite/Number
     * @desc 
    */
    "Number PI" : class extends Node{
        //Setters
        

        //Getters
        get 'NUMBER'() : NUMBER { return [this.$uid.toString(), 0]  as unknown as NUMBER; }
get 'FLOAT'() : FLOAT { return [this.$uid.toString(), 1]  as unknown as FLOAT; }

        /**
          * Constructor
}
        */
        constructor(opts:{
            
        }){
            super(ctx);

            
}

        static defaults = {
    
}
        protected override $$type(){
            return "Number PI"
        }
},

    /**
     * Number to Int from WAS Suite/Number/Operations
     * @desc 
    */
    "Number to Int" : class extends Node{
        //Setters
        //set 'number'(value : NUMBER)  { super.$$link(0, value) } 

        //Getters
        get 'INT'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.number}
        */
        constructor(opts:{
            'number': NUMBER
        }){
            super(ctx);

            super.$$link("number", opts['number'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Number to Int"
        }
},

    /**
     * Number to Seed from WAS Suite/Number/Operations
     * @desc 
    */
    "Number to Seed" : class extends Node{
        //Setters
        //set 'number'(value : NUMBER)  { super.$$link(0, value) } 

        //Getters
        get 'SEED'() : SEED { return [this.$uid.toString(), 0]  as unknown as SEED; }

        /**
          * Constructor
		 * @param opts.number}
        */
        constructor(opts:{
            'number': NUMBER
        }){
            super(ctx);

            super.$$link("number", opts['number'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Number to Seed"
        }
},

    /**
     * Number to String from WAS Suite/Number/Operations
     * @desc 
    */
    "Number to String" : class extends Node{
        //Setters
        //set 'number'(value : NUMBER)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.number}
        */
        constructor(opts:{
            'number': NUMBER
        }){
            super(ctx);

            super.$$link("number", opts['number'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Number to String"
        }
},

    /**
     * Number to Text from WAS Suite/Number/Operations
     * @desc 
    */
    "Number to Text" : class extends Node{
        //Setters
        //set 'number'(value : NUMBER)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.number}
        */
        constructor(opts:{
            'number': NUMBER
        }){
            super(ctx);

            super.$$link("number", opts['number'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Number to Text"
        }
},

    /**
     * Boolean To Text from WAS Suite/Logic
     * @desc 
    */
    "Boolean To Text" : class extends Node{
        //Setters
        //set 'boolean'(value : BOOLEAN)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.boolean}
        */
        constructor(opts:{
            'boolean'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("boolean", opts['boolean']??tmp["Boolean To Text"].defaults['boolean'])
}

        static defaults = {
    'boolean':  false
}
        protected override $$type(){
            return "Boolean To Text"
        }
},

    /**
     * Prompt Styles Selector from WAS Suite/Text
     * @desc 
    */
    "Prompt Styles Selector" : class extends Node{
        //Setters
        //set 'style'(value : 'None'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'positive_string'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }
get 'negative_string'() : STRING { return [this.$uid.toString(), 1]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.style}
        */
        constructor(opts:{
            'style': 'None'| $dyn
        }){
            super(ctx);

            super.$$link("style", opts['style'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Prompt Styles Selector"
        }
},

    /**
     * Prompt Multiple Styles Selector from WAS Suite/Text
     * @desc 
    */
    "Prompt Multiple Styles Selector" : class extends Node{
        //Setters
        //set 'style1'(value : 'None'| $dyn)  { super.$$link(0, value) } 
//set 'style2'(value : 'None'| $dyn)  { super.$$link(1, value) } 
//set 'style3'(value : 'None'| $dyn)  { super.$$link(2, value) } 
//set 'style4'(value : 'None'| $dyn)  { super.$$link(3, value) } 

        //Getters
        get 'positive_string'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }
get 'negative_string'() : STRING { return [this.$uid.toString(), 1]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.style1
		 * @param opts.style2
		 * @param opts.style3
		 * @param opts.style4}
        */
        constructor(opts:{
            'style1': 'None'| $dyn,'style2': 'None'| $dyn,'style3': 'None'| $dyn,'style4': 'None'| $dyn
        }){
            super(ctx);

            super.$$link("style1", opts['style1'])
super.$$link("style2", opts['style2'])
super.$$link("style3", opts['style3'])
super.$$link("style4", opts['style4'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Prompt Multiple Styles Selector"
        }
},

    /**
     * Random Number from WAS Suite/Number
     * @desc 
    */
    "Random Number" : class extends Node{
        //Setters
        //set 'number_type'(value : 'integer'|'float'|'bool'| $dyn)  { super.$$link(0, value) } 
//set 'minimum'(value : FLOAT)  { super.$$link(1, value) } 
//set 'maximum'(value : FLOAT)  { super.$$link(2, value) } 
//set 'seed'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'NUMBER'() : NUMBER { return [this.$uid.toString(), 0]  as unknown as NUMBER; }
get 'FLOAT'() : FLOAT { return [this.$uid.toString(), 1]  as unknown as FLOAT; }
get 'INT'() : INT { return [this.$uid.toString(), 2]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.number_type
		 * @param opts.minimum max: 18446744073709552000 min: -18446744073709552000
		 * @param opts.maximum max: 18446744073709552000 min: -18446744073709552000
		 * @param opts.seed}
        */
        constructor(opts:{
            'number_type': 'integer'|'float'|'bool'| $dyn,'minimum'?: FLOAT,'maximum'?: FLOAT,'seed'?: INT
        }){
            super(ctx);

            super.$$link("number_type", opts['number_type'])
super.$$link("minimum", opts['minimum']??tmp["Random Number"].defaults['minimum'])
super.$$link("maximum", opts['maximum']??tmp["Random Number"].defaults['maximum'])
super.$$link("seed", opts['seed']??tmp["Random Number"].defaults['seed'])
}

        static defaults = {
    'minimum':  0,
'maximum':  0,
'seed':  0
}
        protected override $$type(){
            return "Random Number"
        }
},

    /**
     * Save Text File from WAS Suite/IO
     * @desc 
    */
    "Save Text File" : class extends Node{
        //Setters
        //set 'text'(value : STRING)  { super.$$link(0, value) } 
//set 'path'(value : STRING)  { super.$$link(1, value) } 
//set 'filename_prefix'(value : STRING)  { super.$$link(2, value) } 
//set 'filename_delimiter'(value : STRING)  { super.$$link(3, value) } 
//set 'filename_number_padding'(value : INT)  { super.$$link(4, value) } 
//set 'file_extension'(value : STRING)  { super.$$link(5, value) } 
//set 'encoding'(value : STRING)  { super.$$link(6, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.text
		 * @param opts.path default: "./ComfyUI/output/[time(%Y-%m-%d)]"
		 * @param opts.filename_prefix default: "ComfyUI"
		 * @param opts.filename_delimiter default: "_"
		 * @param opts.filename_number_padding default: 4 step: 1
		 * @param opts.file_extension default: ".txt"
		 * @param opts.encoding default: "utf-8"}
        */
        constructor(opts:{
            'text': STRING,'path'?: STRING,'filename_prefix'?: STRING,'filename_delimiter'?: STRING,'filename_number_padding'?: INT,'file_extension'?: STRING,'encoding'?: STRING
        }){
            super(ctx);

            super.$$link("text", opts['text'])
super.$$link("path", opts['path']??tmp["Save Text File"].defaults['path'])
super.$$link("filename_prefix", opts['filename_prefix']??tmp["Save Text File"].defaults['filename_prefix'])
super.$$link("filename_delimiter", opts['filename_delimiter']??tmp["Save Text File"].defaults['filename_delimiter'])
super.$$link("filename_number_padding", opts['filename_number_padding']??tmp["Save Text File"].defaults['filename_number_padding'])
super.$$link("file_extension", opts['file_extension']??tmp["Save Text File"].defaults['file_extension'])
super.$$link("encoding", opts['encoding']??tmp["Save Text File"].defaults['encoding'])
}

        static defaults = {
    'path':  "./ComfyUI/output/[time(%Y-%m-%d)]",
'filename_prefix':  "ComfyUI",
'filename_delimiter':  "_",
'filename_number_padding':  4,
'file_extension':  ".txt",
'encoding':  "utf-8"
}
        protected override $$type(){
            return "Save Text File"
        }
},

    /**
     * Seed from WAS Suite/Number
     * @desc 
    */
    "Seed" : class extends Node{
        //Setters
        //set 'seed'(value : INT)  { super.$$link(0, value) } 

        //Getters
        get 'seed'() : SEED { return [this.$uid.toString(), 0]  as unknown as SEED; }
get 'number'() : NUMBER { return [this.$uid.toString(), 1]  as unknown as NUMBER; }
get 'float'() : FLOAT { return [this.$uid.toString(), 2]  as unknown as FLOAT; }
get 'int'() : INT { return [this.$uid.toString(), 3]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.seed}
        */
        constructor(opts:{
            'seed'?: INT
        }){
            super(ctx);

            super.$$link("seed", opts['seed']??tmp["Seed"].defaults['seed'])
}

        static defaults = {
    'seed':  0
}
        protected override $$type(){
            return "Seed"
        }
},

    /**
     * Tensor Batch to Image from WAS Suite/Latent/Transform
     * @desc 
    */
    "Tensor Batch to Image" : class extends Node{
        //Setters
        //set 'images_batch'(value : IMAGE)  { super.$$link(0, value) } 
//set 'batch_image_number'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.images_batch
		 * @param opts.batch_image_number step: 1}
        */
        constructor(opts:{
            'images_batch': IMAGE,'batch_image_number'?: INT
        }){
            super(ctx);

            super.$$link("images_batch", opts['images_batch'])
super.$$link("batch_image_number", opts['batch_image_number']??tmp["Tensor Batch to Image"].defaults['batch_image_number'])
}

        static defaults = {
    'batch_image_number':  0
}
        protected override $$type(){
            return "Tensor Batch to Image"
        }
},

    /**
     * BLIP Analyze Image from WAS Suite/Text/AI
     * @desc 
    */
    "BLIP Analyze Image" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'mode'(value : 'caption'|'interrogate'| $dyn)  { super.$$link(1, value) } 
//set 'question'(value : STRING)  { super.$$link(2, value) } 
//set 'blip_model'(value : BLIP_MODEL)  { super.$$link(3, value) } 
//set 'min_length'(value : INT)  { super.$$link(4, value) } 
//set 'max_length'(value : INT)  { super.$$link(5, value) } 
//set 'num_beams'(value : INT)  { super.$$link(6, value) } 
//set 'no_repeat_ngram_size'(value : INT)  { super.$$link(7, value) } 
//set 'early_stopping'(value : BOOLEAN)  { super.$$link(8, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.mode
		 * @param opts.question default: "What does the background consist of?"
		 * @param opts.blip_model
		 * @param opts.min_length default: 24 max: 1024 min: 1
		 * @param opts.max_length default: 64 max: 1024 min: 2
		 * @param opts.num_beams default: 5 max: 12 min: 1
		 * @param opts.no_repeat_ngram_size default: 3 max: 12 min: 1
		 * @param opts.early_stopping}
        */
        constructor(opts:{
            'images': IMAGE,'mode': 'caption'|'interrogate'| $dyn,'question'?: STRING,'blip_model': BLIP_MODEL,'min_length'?: INT,'max_length'?: INT,'num_beams'?: INT,'no_repeat_ngram_size'?: INT,'early_stopping'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("mode", opts['mode'])
super.$$link("question", opts['question']??tmp["BLIP Analyze Image"].defaults['question'])
super.$$link("blip_model", opts['blip_model'])
super.$$link("min_length", opts['min_length']??tmp["BLIP Analyze Image"].defaults['min_length'])
super.$$link("max_length", opts['max_length']??tmp["BLIP Analyze Image"].defaults['max_length'])
super.$$link("num_beams", opts['num_beams']??tmp["BLIP Analyze Image"].defaults['num_beams'])
super.$$link("no_repeat_ngram_size", opts['no_repeat_ngram_size']??tmp["BLIP Analyze Image"].defaults['no_repeat_ngram_size'])
super.$$link("early_stopping", opts['early_stopping']??tmp["BLIP Analyze Image"].defaults['early_stopping'])
}

        static defaults = {
    'question':  "What does the background consist of?",
'min_length':  24,
'max_length':  64,
'num_beams':  5,
'no_repeat_ngram_size':  3,
'early_stopping':  false
}
        protected override $$type(){
            return "BLIP Analyze Image"
        }
},

    /**
     * SAM Model Loader from WAS Suite/Image/Masking
     * @desc 
    */
    "SAM Model Loader" : class extends Node{
        //Setters
        //set 'model_size'(value : 'ViT-H'|'ViT-L'|'ViT-B'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'SAM_MODEL'() : SAM_MODEL { return [this.$uid.toString(), 0]  as unknown as SAM_MODEL; }

        /**
          * Constructor
		 * @param opts.model_size}
        */
        constructor(opts:{
            'model_size': 'ViT-H'|'ViT-L'|'ViT-B'| $dyn
        }){
            super(ctx);

            super.$$link("model_size", opts['model_size'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "SAM Model Loader"
        }
},

    /**
     * SAM Parameters from WAS Suite/Image/Masking
     * @desc 
    */
    "SAM Parameters" : class extends Node{
        //Setters
        //set 'points'(value : STRING)  { super.$$link(0, value) } 
//set 'labels'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'SAM_PARAMETERS'() : SAM_PARAMETERS { return [this.$uid.toString(), 0]  as unknown as SAM_PARAMETERS; }

        /**
          * Constructor
		 * @param opts.points default: "[128, 128]; [0, 0]"
		 * @param opts.labels default: "[1, 0]"}
        */
        constructor(opts:{
            'points'?: STRING,'labels'?: STRING
        }){
            super(ctx);

            super.$$link("points", opts['points']??tmp["SAM Parameters"].defaults['points'])
super.$$link("labels", opts['labels']??tmp["SAM Parameters"].defaults['labels'])
}

        static defaults = {
    'points':  "[128, 128]; [0, 0]",
'labels':  "[1, 0]"
}
        protected override $$type(){
            return "SAM Parameters"
        }
},

    /**
     * SAM Parameters Combine from WAS Suite/Image/Masking
     * @desc 
    */
    "SAM Parameters Combine" : class extends Node{
        //Setters
        //set 'sam_parameters_a'(value : SAM_PARAMETERS)  { super.$$link(0, value) } 
//set 'sam_parameters_b'(value : SAM_PARAMETERS)  { super.$$link(1, value) } 

        //Getters
        get 'SAM_PARAMETERS'() : SAM_PARAMETERS { return [this.$uid.toString(), 0]  as unknown as SAM_PARAMETERS; }

        /**
          * Constructor
		 * @param opts.sam_parameters_a
		 * @param opts.sam_parameters_b}
        */
        constructor(opts:{
            'sam_parameters_a': SAM_PARAMETERS,'sam_parameters_b': SAM_PARAMETERS
        }){
            super(ctx);

            super.$$link("sam_parameters_a", opts['sam_parameters_a'])
super.$$link("sam_parameters_b", opts['sam_parameters_b'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "SAM Parameters Combine"
        }
},

    /**
     * SAM Image Mask from WAS Suite/Image/Masking
     * @desc 
    */
    "SAM Image Mask" : class extends Node{
        //Setters
        //set 'sam_model'(value : SAM_MODEL)  { super.$$link(0, value) } 
//set 'sam_parameters'(value : SAM_PARAMETERS)  { super.$$link(1, value) } 
//set 'image'(value : IMAGE)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'MASK'() : MASK { return [this.$uid.toString(), 1]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.sam_model
		 * @param opts.sam_parameters
		 * @param opts.image}
        */
        constructor(opts:{
            'sam_model': SAM_MODEL,'sam_parameters': SAM_PARAMETERS,'image': IMAGE
        }){
            super(ctx);

            super.$$link("sam_model", opts['sam_model'])
super.$$link("sam_parameters", opts['sam_parameters'])
super.$$link("image", opts['image'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "SAM Image Mask"
        }
},

    /**
     * Samples Passthrough (Stat System) from WAS Suite/Debug
     * @desc 
    */
    "Samples Passthrough (Stat System)" : class extends Node{
        //Setters
        //set 'samples'(value : LATENT)  { super.$$link(0, value) } 

        //Getters
        get 'samples'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.samples}
        */
        constructor(opts:{
            'samples': LATENT
        }){
            super(ctx);

            super.$$link("samples", opts['samples'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Samples Passthrough (Stat System)"
        }
},

    /**
     * String to Text from WAS Suite/Text/Operations
     * @desc 
    */
    "String to Text" : class extends Node{
        //Setters
        //set 'string'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.string}
        */
        constructor(opts:{
            'string': STRING
        }){
            super(ctx);

            super.$$link("string", opts['string'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "String to Text"
        }
},

    /**
     * Image Bounds from WAS Suite/Image/Bound
     * @desc 
    */
    "Image Bounds" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE_BOUNDS'() : IMAGE_BOUNDS { return [this.$uid.toString(), 0]  as unknown as IMAGE_BOUNDS; }

        /**
          * Constructor
		 * @param opts.image}
        */
        constructor(opts:{
            'image': IMAGE
        }){
            super(ctx);

            super.$$link("image", opts['image'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Image Bounds"
        }
},

    /**
     * Inset Image Bounds from WAS Suite/Image/Bound
     * @desc 
    */
    "Inset Image Bounds" : class extends Node{
        //Setters
        //set 'image_bounds'(value : IMAGE_BOUNDS)  { super.$$link(0, value) } 
//set 'inset_left'(value : INT)  { super.$$link(1, value) } 
//set 'inset_right'(value : INT)  { super.$$link(2, value) } 
//set 'inset_top'(value : INT)  { super.$$link(3, value) } 
//set 'inset_bottom'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE_BOUNDS'() : IMAGE_BOUNDS { return [this.$uid.toString(), 0]  as unknown as IMAGE_BOUNDS; }

        /**
          * Constructor
		 * @param opts.image_bounds
		 * @param opts.inset_left default: 64
		 * @param opts.inset_right default: 64
		 * @param opts.inset_top default: 64
		 * @param opts.inset_bottom default: 64}
        */
        constructor(opts:{
            'image_bounds': IMAGE_BOUNDS,'inset_left'?: INT,'inset_right'?: INT,'inset_top'?: INT,'inset_bottom'?: INT
        }){
            super(ctx);

            super.$$link("image_bounds", opts['image_bounds'])
super.$$link("inset_left", opts['inset_left']??tmp["Inset Image Bounds"].defaults['inset_left'])
super.$$link("inset_right", opts['inset_right']??tmp["Inset Image Bounds"].defaults['inset_right'])
super.$$link("inset_top", opts['inset_top']??tmp["Inset Image Bounds"].defaults['inset_top'])
super.$$link("inset_bottom", opts['inset_bottom']??tmp["Inset Image Bounds"].defaults['inset_bottom'])
}

        static defaults = {
    'inset_left':  64,
'inset_right':  64,
'inset_top':  64,
'inset_bottom':  64
}
        protected override $$type(){
            return "Inset Image Bounds"
        }
},

    /**
     * Bounded Image Blend from WAS Suite/Image/Bound
     * @desc 
    */
    "Bounded Image Blend" : class extends Node{
        //Setters
        //set 'target'(value : IMAGE)  { super.$$link(0, value) } 
//set 'target_bounds'(value : IMAGE_BOUNDS)  { super.$$link(1, value) } 
//set 'source'(value : IMAGE)  { super.$$link(2, value) } 
//set 'blend_factor'(value : FLOAT)  { super.$$link(3, value) } 
//set 'feathering'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.target
		 * @param opts.target_bounds
		 * @param opts.source
		 * @param opts.blend_factor default: 1
		 * @param opts.feathering default: 16}
        */
        constructor(opts:{
            'target': IMAGE,'target_bounds': IMAGE_BOUNDS,'source': IMAGE,'blend_factor'?: FLOAT,'feathering'?: INT
        }){
            super(ctx);

            super.$$link("target", opts['target'])
super.$$link("target_bounds", opts['target_bounds'])
super.$$link("source", opts['source'])
super.$$link("blend_factor", opts['blend_factor']??tmp["Bounded Image Blend"].defaults['blend_factor'])
super.$$link("feathering", opts['feathering']??tmp["Bounded Image Blend"].defaults['feathering'])
}

        static defaults = {
    'blend_factor':  1,
'feathering':  16
}
        protected override $$type(){
            return "Bounded Image Blend"
        }
},

    /**
     * Bounded Image Blend with Mask from WAS Suite/Image/Bound
     * @desc 
    */
    "Bounded Image Blend with Mask" : class extends Node{
        //Setters
        //set 'target'(value : IMAGE)  { super.$$link(0, value) } 
//set 'target_mask'(value : MASK)  { super.$$link(1, value) } 
//set 'target_bounds'(value : IMAGE_BOUNDS)  { super.$$link(2, value) } 
//set 'source'(value : IMAGE)  { super.$$link(3, value) } 
//set 'blend_factor'(value : FLOAT)  { super.$$link(4, value) } 
//set 'feathering'(value : INT)  { super.$$link(5, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.target
		 * @param opts.target_mask
		 * @param opts.target_bounds
		 * @param opts.source
		 * @param opts.blend_factor default: 1
		 * @param opts.feathering default: 16}
        */
        constructor(opts:{
            'target': IMAGE,'target_mask': MASK,'target_bounds': IMAGE_BOUNDS,'source': IMAGE,'blend_factor'?: FLOAT,'feathering'?: INT
        }){
            super(ctx);

            super.$$link("target", opts['target'])
super.$$link("target_mask", opts['target_mask'])
super.$$link("target_bounds", opts['target_bounds'])
super.$$link("source", opts['source'])
super.$$link("blend_factor", opts['blend_factor']??tmp["Bounded Image Blend with Mask"].defaults['blend_factor'])
super.$$link("feathering", opts['feathering']??tmp["Bounded Image Blend with Mask"].defaults['feathering'])
}

        static defaults = {
    'blend_factor':  1,
'feathering':  16
}
        protected override $$type(){
            return "Bounded Image Blend with Mask"
        }
},

    /**
     * Bounded Image Crop from WAS Suite/Image/Bound
     * @desc 
    */
    "Bounded Image Crop" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'image_bounds'(value : IMAGE_BOUNDS)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.image_bounds}
        */
        constructor(opts:{
            'image': IMAGE,'image_bounds': IMAGE_BOUNDS
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("image_bounds", opts['image_bounds'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Bounded Image Crop"
        }
},

    /**
     * Bounded Image Crop with Mask from WAS Suite/Image/Bound
     * @desc 
    */
    "Bounded Image Crop with Mask" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'mask'(value : MASK)  { super.$$link(1, value) } 
//set 'padding_left'(value : INT)  { super.$$link(2, value) } 
//set 'padding_right'(value : INT)  { super.$$link(3, value) } 
//set 'padding_top'(value : INT)  { super.$$link(4, value) } 
//set 'padding_bottom'(value : INT)  { super.$$link(5, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'IMAGE_BOUNDS'() : IMAGE_BOUNDS { return [this.$uid.toString(), 1]  as unknown as IMAGE_BOUNDS; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.mask
		 * @param opts.padding_left default: 64
		 * @param opts.padding_right default: 64
		 * @param opts.padding_top default: 64
		 * @param opts.padding_bottom default: 64}
        */
        constructor(opts:{
            'image': IMAGE,'mask': MASK,'padding_left'?: INT,'padding_right'?: INT,'padding_top'?: INT,'padding_bottom'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("mask", opts['mask'])
super.$$link("padding_left", opts['padding_left']??tmp["Bounded Image Crop with Mask"].defaults['padding_left'])
super.$$link("padding_right", opts['padding_right']??tmp["Bounded Image Crop with Mask"].defaults['padding_right'])
super.$$link("padding_top", opts['padding_top']??tmp["Bounded Image Crop with Mask"].defaults['padding_top'])
super.$$link("padding_bottom", opts['padding_bottom']??tmp["Bounded Image Crop with Mask"].defaults['padding_bottom'])
}

        static defaults = {
    'padding_left':  64,
'padding_right':  64,
'padding_top':  64,
'padding_bottom':  64
}
        protected override $$type(){
            return "Bounded Image Crop with Mask"
        }
},

    /**
     * Image Bounds to Console from WAS Suite/Debug
     * @desc 
    */
    "Image Bounds to Console" : class extends Node{
        //Setters
        //set 'image_bounds'(value : IMAGE_BOUNDS)  { super.$$link(0, value) } 
//set 'label'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE_BOUNDS'() : IMAGE_BOUNDS { return [this.$uid.toString(), 0]  as unknown as IMAGE_BOUNDS; }

        /**
          * Constructor
		 * @param opts.image_bounds
		 * @param opts.label default: "Debug to Console"}
        */
        constructor(opts:{
            'image_bounds': IMAGE_BOUNDS,'label'?: STRING
        }){
            super(ctx);

            super.$$link("image_bounds", opts['image_bounds'])
super.$$link("label", opts['label']??tmp["Image Bounds to Console"].defaults['label'])
}

        static defaults = {
    'label':  "Debug to Console"
}
        protected override $$type(){
            return "Image Bounds to Console"
        }
},

    /**
     * Text Dictionary Update from WAS Suite/Text
     * @desc 
    */
    "Text Dictionary Update" : class extends Node{
        //Setters
        //set 'dictionary_a'(value : DICT)  { super.$$link(0, value) } 
//set 'dictionary_b'(value : DICT)  { super.$$link(1, value) } 
//set 'dictionary_c'(value : DICT)  { super.$$link(2, value) } 
//set 'dictionary_d'(value : DICT)  { super.$$link(3, value) } 

        //Getters
        get 'DICT'() : DICT { return [this.$uid.toString(), 0]  as unknown as DICT; }

        /**
          * Constructor
		 * @param opts.dictionary_a
		 * @param opts.dictionary_b
		 * @param opts.dictionary_c
		 * @param opts.dictionary_d}
        */
        constructor(opts:{
            'dictionary_a': DICT,'dictionary_b': DICT,'dictionary_c'?: DICT,'dictionary_d'?: DICT
        }){
            super(ctx);

            super.$$link("dictionary_a", opts['dictionary_a'])
super.$$link("dictionary_b", opts['dictionary_b'])
super.$$link("dictionary_c", opts['dictionary_c'])
super.$$link("dictionary_d", opts['dictionary_d'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Text Dictionary Update"
        }
},

    /**
     * Text Dictionary Get from WAS Suite/Text
     * @desc 
    */
    "Text Dictionary Get" : class extends Node{
        //Setters
        //set 'dictionary'(value : DICT)  { super.$$link(0, value) } 
//set 'key'(value : STRING)  { super.$$link(1, value) } 
//set 'default_value'(value : STRING)  { super.$$link(2, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.dictionary
		 * @param opts.key
		 * @param opts.default_value}
        */
        constructor(opts:{
            'dictionary': DICT,'key'?: STRING,'default_value'?: STRING
        }){
            super(ctx);

            super.$$link("dictionary", opts['dictionary'])
super.$$link("key", opts['key']??tmp["Text Dictionary Get"].defaults['key'])
super.$$link("default_value", opts['default_value']??tmp["Text Dictionary Get"].defaults['default_value'])
}

        static defaults = {
    'key':  "",
'default_value':  ""
}
        protected override $$type(){
            return "Text Dictionary Get"
        }
},

    /**
     * Text Dictionary Convert from WAS Suite/Text
     * @desc 
    */
    "Text Dictionary Convert" : class extends Node{
        //Setters
        //set 'dictionary_text'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'DICT'() : DICT { return [this.$uid.toString(), 0]  as unknown as DICT; }

        /**
          * Constructor
		 * @param opts.dictionary_text}
        */
        constructor(opts:{
            'dictionary_text': STRING
        }){
            super(ctx);

            super.$$link("dictionary_text", opts['dictionary_text'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Text Dictionary Convert"
        }
},

    /**
     * Text Dictionary New from WAS Suite/Text
     * @desc 
    */
    "Text Dictionary New" : class extends Node{
        //Setters
        //set 'key_1'(value : STRING)  { super.$$link(0, value) } 
//set 'value_1'(value : STRING)  { super.$$link(1, value) } 
//set 'key_2'(value : STRING)  { super.$$link(2, value) } 
//set 'value_2'(value : STRING)  { super.$$link(3, value) } 
//set 'key_3'(value : STRING)  { super.$$link(4, value) } 
//set 'value_3'(value : STRING)  { super.$$link(5, value) } 
//set 'key_4'(value : STRING)  { super.$$link(6, value) } 
//set 'value_4'(value : STRING)  { super.$$link(7, value) } 
//set 'key_5'(value : STRING)  { super.$$link(8, value) } 
//set 'value_5'(value : STRING)  { super.$$link(9, value) } 

        //Getters
        get 'DICT'() : DICT { return [this.$uid.toString(), 0]  as unknown as DICT; }

        /**
          * Constructor
		 * @param opts.key_1
		 * @param opts.value_1
		 * @param opts.key_2
		 * @param opts.value_2
		 * @param opts.key_3
		 * @param opts.value_3
		 * @param opts.key_4
		 * @param opts.value_4
		 * @param opts.key_5
		 * @param opts.value_5}
        */
        constructor(opts:{
            'key_1'?: STRING,'value_1'?: STRING,'key_2'?: STRING,'value_2'?: STRING,'key_3'?: STRING,'value_3'?: STRING,'key_4'?: STRING,'value_4'?: STRING,'key_5'?: STRING,'value_5'?: STRING
        }){
            super(ctx);

            super.$$link("key_1", opts['key_1']??tmp["Text Dictionary New"].defaults['key_1'])
super.$$link("value_1", opts['value_1']??tmp["Text Dictionary New"].defaults['value_1'])
super.$$link("key_2", opts['key_2']??tmp["Text Dictionary New"].defaults['key_2'])
super.$$link("value_2", opts['value_2']??tmp["Text Dictionary New"].defaults['value_2'])
super.$$link("key_3", opts['key_3']??tmp["Text Dictionary New"].defaults['key_3'])
super.$$link("value_3", opts['value_3']??tmp["Text Dictionary New"].defaults['value_3'])
super.$$link("key_4", opts['key_4']??tmp["Text Dictionary New"].defaults['key_4'])
super.$$link("value_4", opts['value_4']??tmp["Text Dictionary New"].defaults['value_4'])
super.$$link("key_5", opts['key_5']??tmp["Text Dictionary New"].defaults['key_5'])
super.$$link("value_5", opts['value_5']??tmp["Text Dictionary New"].defaults['value_5'])
}

        static defaults = {
    'key_1':  "",
'value_1':  "",
'key_2':  "",
'value_2':  "",
'key_3':  "",
'value_3':  "",
'key_4':  "",
'value_4':  "",
'key_5':  "",
'value_5':  ""
}
        protected override $$type(){
            return "Text Dictionary New"
        }
},

    /**
     * Text Dictionary Keys from WAS Suite/Text
     * @desc 
    */
    "Text Dictionary Keys" : class extends Node{
        //Setters
        //set 'dictionary'(value : DICT)  { super.$$link(0, value) } 

        //Getters
        get 'LIST'() : LIST { return [this.$uid.toString(), 0]  as unknown as LIST; }

        /**
          * Constructor
		 * @param opts.dictionary}
        */
        constructor(opts:{
            'dictionary': DICT
        }){
            super(ctx);

            super.$$link("dictionary", opts['dictionary'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Text Dictionary Keys"
        }
},

    /**
     * Text Dictionary To Text from WAS Suite/Text
     * @desc 
    */
    "Text Dictionary To Text" : class extends Node{
        //Setters
        //set 'dictionary'(value : DICT)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.dictionary}
        */
        constructor(opts:{
            'dictionary': DICT
        }){
            super(ctx);

            super.$$link("dictionary", opts['dictionary'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Text Dictionary To Text"
        }
},

    /**
     * Text Add Tokens from WAS Suite/Text/Tokens
     * @desc 
    */
    "Text Add Tokens" : class extends Node{
        //Setters
        //set 'tokens'(value : STRING)  { super.$$link(0, value) } 
//set 'print_current_tokens'(value : 'false'|'true'| $dyn)  { super.$$link(1, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.tokens default: "[hello]: world"
		 * @param opts.print_current_tokens}
        */
        constructor(opts:{
            'tokens'?: STRING,'print_current_tokens': 'false'|'true'| $dyn
        }){
            super(ctx);

            super.$$link("tokens", opts['tokens']??tmp["Text Add Tokens"].defaults['tokens'])
super.$$link("print_current_tokens", opts['print_current_tokens'])
}

        static defaults = {
    'tokens':  "[hello]: world"
}
        protected override $$type(){
            return "Text Add Tokens"
        }
},

    /**
     * Text Add Token by Input from WAS Suite/Text/Tokens
     * @desc 
    */
    "Text Add Token by Input" : class extends Node{
        //Setters
        //set 'token_name'(value : STRING)  { super.$$link(0, value) } 
//set 'token_value'(value : STRING)  { super.$$link(1, value) } 
//set 'print_current_tokens'(value : 'false'|'true'| $dyn)  { super.$$link(2, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.token_name
		 * @param opts.token_value
		 * @param opts.print_current_tokens}
        */
        constructor(opts:{
            'token_name': STRING,'token_value': STRING,'print_current_tokens': 'false'|'true'| $dyn
        }){
            super(ctx);

            super.$$link("token_name", opts['token_name'])
super.$$link("token_value", opts['token_value'])
super.$$link("print_current_tokens", opts['print_current_tokens'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Text Add Token by Input"
        }
},

    /**
     * Text Compare from WAS Suite/Text/Search
     * @desc 
    */
    "Text Compare" : class extends Node{
        //Setters
        //set 'text_a'(value : STRING)  { super.$$link(0, value) } 
//set 'text_b'(value : STRING)  { super.$$link(1, value) } 
//set 'mode'(value : 'similarity'|'difference'| $dyn)  { super.$$link(2, value) } 
//set 'tolerance'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'TEXT_A_PASS'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }
get 'TEXT_B_PASS'() : STRING { return [this.$uid.toString(), 1]  as unknown as STRING; }
get 'BOOLEAN'() : BOOLEAN { return [this.$uid.toString(), 2]  as unknown as BOOLEAN; }
get 'SCORE_NUMBER'() : NUMBER { return [this.$uid.toString(), 3]  as unknown as NUMBER; }
get 'COMPARISON_TEXT'() : STRING { return [this.$uid.toString(), 4]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.text_a
		 * @param opts.text_b
		 * @param opts.mode
		 * @param opts.tolerance step: 0.01}
        */
        constructor(opts:{
            'text_a': STRING,'text_b': STRING,'mode': 'similarity'|'difference'| $dyn,'tolerance'?: FLOAT
        }){
            super(ctx);

            super.$$link("text_a", opts['text_a'])
super.$$link("text_b", opts['text_b'])
super.$$link("mode", opts['mode'])
super.$$link("tolerance", opts['tolerance']??tmp["Text Compare"].defaults['tolerance'])
}

        static defaults = {
    'tolerance':  0
}
        protected override $$type(){
            return "Text Compare"
        }
},

    /**
     * Text Concatenate from WAS Suite/Text
     * @desc 
    */
    "Text Concatenate" : class extends Node{
        //Setters
        //set 'delimiter'(value : STRING)  { super.$$link(0, value) } 
//set 'clean_whitespace'(value : 'true'|'false'| $dyn)  { super.$$link(1, value) } 
//set 'text_a'(value : STRING)  { super.$$link(2, value) } 
//set 'text_b'(value : STRING)  { super.$$link(3, value) } 
//set 'text_c'(value : STRING)  { super.$$link(4, value) } 
//set 'text_d'(value : STRING)  { super.$$link(5, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.delimiter default: ", "
		 * @param opts.clean_whitespace
		 * @param opts.text_a
		 * @param opts.text_b
		 * @param opts.text_c
		 * @param opts.text_d}
        */
        constructor(opts:{
            'delimiter'?: STRING,'clean_whitespace': 'true'|'false'| $dyn,'text_a'?: STRING,'text_b'?: STRING,'text_c'?: STRING,'text_d'?: STRING
        }){
            super(ctx);

            super.$$link("delimiter", opts['delimiter']??tmp["Text Concatenate"].defaults['delimiter'])
super.$$link("clean_whitespace", opts['clean_whitespace'])
super.$$link("text_a", opts['text_a'])
super.$$link("text_b", opts['text_b'])
super.$$link("text_c", opts['text_c'])
super.$$link("text_d", opts['text_d'])
}

        static defaults = {
    'delimiter':  ", "
}
        protected override $$type(){
            return "Text Concatenate"
        }
},

    /**
     * Text File History Loader from WAS Suite/History
     * @desc 
    */
    "Text File History Loader" : class extends Node{
        //Setters
        //set 'file'(value : '.../2024-01-14/ComfyUI_0001.txt'| $dyn)  { super.$$link(0, value) } 
//set 'dictionary_name'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }
get 'DICT'() : DICT { return [this.$uid.toString(), 1]  as unknown as DICT; }

        /**
          * Constructor
		 * @param opts.file
		 * @param opts.dictionary_name default: "[filename]"}
        */
        constructor(opts:{
            'file': '.../2024-01-14/ComfyUI_0001.txt'| $dyn,'dictionary_name'?: STRING
        }){
            super(ctx);

            super.$$link("file", opts['file'])
super.$$link("dictionary_name", opts['dictionary_name']??tmp["Text File History Loader"].defaults['dictionary_name'])
}

        static defaults = {
    'dictionary_name':  "[filename]"
}
        protected override $$type(){
            return "Text File History Loader"
        }
},

    /**
     * Text Find and Replace by Dictionary from WAS Suite/Text/Search
     * @desc 
    */
    "Text Find and Replace by Dictionary" : class extends Node{
        //Setters
        //set 'text'(value : STRING)  { super.$$link(0, value) } 
//set 'dictionary'(value : DICT)  { super.$$link(1, value) } 
//set 'replacement_key'(value : STRING)  { super.$$link(2, value) } 
//set 'seed'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.text
		 * @param opts.dictionary
		 * @param opts.replacement_key default: "__"
		 * @param opts.seed}
        */
        constructor(opts:{
            'text': STRING,'dictionary': DICT,'replacement_key'?: STRING,'seed'?: INT
        }){
            super(ctx);

            super.$$link("text", opts['text'])
super.$$link("dictionary", opts['dictionary'])
super.$$link("replacement_key", opts['replacement_key']??tmp["Text Find and Replace by Dictionary"].defaults['replacement_key'])
super.$$link("seed", opts['seed']??tmp["Text Find and Replace by Dictionary"].defaults['seed'])
}

        static defaults = {
    'replacement_key':  "__",
'seed':  0
}
        protected override $$type(){
            return "Text Find and Replace by Dictionary"
        }
},

    /**
     * Text Find and Replace Input from WAS Suite/Text/Search
     * @desc 
    */
    "Text Find and Replace Input" : class extends Node{
        //Setters
        //set 'text'(value : STRING)  { super.$$link(0, value) } 
//set 'find'(value : STRING)  { super.$$link(1, value) } 
//set 'replace'(value : STRING)  { super.$$link(2, value) } 

        //Getters
        get 'result_text'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }
get 'replacement_count_number'() : NUMBER { return [this.$uid.toString(), 1]  as unknown as NUMBER; }
get 'replacement_count_float'() : FLOAT { return [this.$uid.toString(), 2]  as unknown as FLOAT; }
get 'replacement_count_int'() : INT { return [this.$uid.toString(), 3]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.text
		 * @param opts.find
		 * @param opts.replace}
        */
        constructor(opts:{
            'text': STRING,'find': STRING,'replace': STRING
        }){
            super(ctx);

            super.$$link("text", opts['text'])
super.$$link("find", opts['find'])
super.$$link("replace", opts['replace'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Text Find and Replace Input"
        }
},

    /**
     * Text Find and Replace from WAS Suite/Text/Search
     * @desc 
    */
    "Text Find and Replace" : class extends Node{
        //Setters
        //set 'text'(value : STRING)  { super.$$link(0, value) } 
//set 'find'(value : STRING)  { super.$$link(1, value) } 
//set 'replace'(value : STRING)  { super.$$link(2, value) } 

        //Getters
        get 'result_text'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }
get 'replacement_count_number'() : NUMBER { return [this.$uid.toString(), 1]  as unknown as NUMBER; }
get 'replacement_count_float'() : FLOAT { return [this.$uid.toString(), 2]  as unknown as FLOAT; }
get 'replacement_count_int'() : INT { return [this.$uid.toString(), 3]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.text
		 * @param opts.find
		 * @param opts.replace}
        */
        constructor(opts:{
            'text': STRING,'find'?: STRING,'replace'?: STRING
        }){
            super(ctx);

            super.$$link("text", opts['text'])
super.$$link("find", opts['find']??tmp["Text Find and Replace"].defaults['find'])
super.$$link("replace", opts['replace']??tmp["Text Find and Replace"].defaults['replace'])
}

        static defaults = {
    'find':  "",
'replace':  ""
}
        protected override $$type(){
            return "Text Find and Replace"
        }
},

    /**
     * Text Find from WAS Suite/Text/Search
     * @desc 
    */
    "Text Find" : class extends Node{
        //Setters
        //set 'text'(value : STRING)  { super.$$link(0, value) } 
//set 'substring'(value : STRING)  { super.$$link(1, value) } 
//set 'pattern'(value : STRING)  { super.$$link(2, value) } 

        //Getters
        get 'found'() : BOOLEAN { return [this.$uid.toString(), 0]  as unknown as BOOLEAN; }

        /**
          * Constructor
		 * @param opts.text
		 * @param opts.substring
		 * @param opts.pattern}
        */
        constructor(opts:{
            'text': STRING,'substring'?: STRING,'pattern'?: STRING
        }){
            super(ctx);

            super.$$link("text", opts['text'])
super.$$link("substring", opts['substring']??tmp["Text Find"].defaults['substring'])
super.$$link("pattern", opts['pattern']??tmp["Text Find"].defaults['pattern'])
}

        static defaults = {
    'substring':  "",
'pattern':  ""
}
        protected override $$type(){
            return "Text Find"
        }
},

    /**
     * Text Input Switch from WAS Suite/Logic
     * @desc 
    */
    "Text Input Switch" : class extends Node{
        //Setters
        //set 'text_a'(value : STRING)  { super.$$link(0, value) } 
//set 'text_b'(value : STRING)  { super.$$link(1, value) } 
//set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.text_a
		 * @param opts.text_b
		 * @param opts.boolean}
        */
        constructor(opts:{
            'text_a': STRING,'text_b': STRING,'boolean': BOOLEAN
        }){
            super(ctx);

            super.$$link("text_a", opts['text_a'])
super.$$link("text_b", opts['text_b'])
super.$$link("boolean", opts['boolean'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Text Input Switch"
        }
},

    /**
     * Text List from WAS Suite/Text
     * @desc 
    */
    "Text List" : class extends Node{
        //Setters
        //set 'text_a'(value : STRING)  { super.$$link(0, value) } 
//set 'text_b'(value : STRING)  { super.$$link(1, value) } 
//set 'text_c'(value : STRING)  { super.$$link(2, value) } 
//set 'text_d'(value : STRING)  { super.$$link(3, value) } 
//set 'text_e'(value : STRING)  { super.$$link(4, value) } 
//set 'text_f'(value : STRING)  { super.$$link(5, value) } 
//set 'text_g'(value : STRING)  { super.$$link(6, value) } 

        //Getters
        get 'LIST'() : LIST { return [this.$uid.toString(), 0]  as unknown as LIST; }

        /**
          * Constructor
		 * @param opts.text_a
		 * @param opts.text_b
		 * @param opts.text_c
		 * @param opts.text_d
		 * @param opts.text_e
		 * @param opts.text_f
		 * @param opts.text_g}
        */
        constructor(opts:{
            'text_a'?: STRING,'text_b'?: STRING,'text_c'?: STRING,'text_d'?: STRING,'text_e'?: STRING,'text_f'?: STRING,'text_g'?: STRING
        }){
            super(ctx);

            super.$$link("text_a", opts['text_a'])
super.$$link("text_b", opts['text_b'])
super.$$link("text_c", opts['text_c'])
super.$$link("text_d", opts['text_d'])
super.$$link("text_e", opts['text_e'])
super.$$link("text_f", opts['text_f'])
super.$$link("text_g", opts['text_g'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Text List"
        }
},

    /**
     * Text List Concatenate from WAS Suite/Text
     * @desc 
    */
    "Text List Concatenate" : class extends Node{
        //Setters
        //set 'list_a'(value : LIST)  { super.$$link(0, value) } 
//set 'list_b'(value : LIST)  { super.$$link(1, value) } 
//set 'list_c'(value : LIST)  { super.$$link(2, value) } 
//set 'list_d'(value : LIST)  { super.$$link(3, value) } 

        //Getters
        get 'LIST'() : LIST { return [this.$uid.toString(), 0]  as unknown as LIST; }

        /**
          * Constructor
		 * @param opts.list_a
		 * @param opts.list_b
		 * @param opts.list_c
		 * @param opts.list_d}
        */
        constructor(opts:{
            'list_a'?: LIST,'list_b'?: LIST,'list_c'?: LIST,'list_d'?: LIST
        }){
            super(ctx);

            super.$$link("list_a", opts['list_a'])
super.$$link("list_b", opts['list_b'])
super.$$link("list_c", opts['list_c'])
super.$$link("list_d", opts['list_d'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Text List Concatenate"
        }
},

    /**
     * Text List to Text from WAS Suite/Text
     * @desc 
    */
    "Text List to Text" : class extends Node{
        //Setters
        //set 'delimiter'(value : STRING)  { super.$$link(0, value) } 
//set 'text_list'(value : LIST)  { super.$$link(1, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.delimiter default: ", "
		 * @param opts.text_list}
        */
        constructor(opts:{
            'delimiter'?: STRING,'text_list': LIST
        }){
            super(ctx);

            super.$$link("delimiter", opts['delimiter']??tmp["Text List to Text"].defaults['delimiter'])
super.$$link("text_list", opts['text_list'])
}

        static defaults = {
    'delimiter':  ", "
}
        protected override $$type(){
            return "Text List to Text"
        }
},

    /**
     * Text Load Line From File from WAS Suite/Text
     * @desc 
    */
    "Text Load Line From File" : class extends Node{
        //Setters
        //set 'file_path'(value : STRING)  { super.$$link(0, value) } 
//set 'dictionary_name'(value : STRING)  { super.$$link(1, value) } 
//set 'label'(value : STRING)  { super.$$link(2, value) } 
//set 'mode'(value : 'automatic'|'index'| $dyn)  { super.$$link(3, value) } 
//set 'index'(value : INT)  { super.$$link(4, value) } 
//set 'multiline_text'(value : STRING)  { super.$$link(5, value) } 

        //Getters
        get 'line_text'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }
get 'dictionary'() : DICT { return [this.$uid.toString(), 1]  as unknown as DICT; }

        /**
          * Constructor
		 * @param opts.file_path
		 * @param opts.dictionary_name default: "[filename]"
		 * @param opts.label default: "TextBatch"
		 * @param opts.mode
		 * @param opts.index step: 1
		 * @param opts.multiline_text}
        */
        constructor(opts:{
            'file_path'?: STRING,'dictionary_name'?: STRING,'label'?: STRING,'mode': 'automatic'|'index'| $dyn,'index'?: INT,'multiline_text'?: STRING
        }){
            super(ctx);

            super.$$link("file_path", opts['file_path']??tmp["Text Load Line From File"].defaults['file_path'])
super.$$link("dictionary_name", opts['dictionary_name']??tmp["Text Load Line From File"].defaults['dictionary_name'])
super.$$link("label", opts['label']??tmp["Text Load Line From File"].defaults['label'])
super.$$link("mode", opts['mode'])
super.$$link("index", opts['index']??tmp["Text Load Line From File"].defaults['index'])
super.$$link("multiline_text", opts['multiline_text'])
}

        static defaults = {
    'file_path':  "",
'dictionary_name':  "[filename]",
'label':  "TextBatch",
'index':  0
}
        protected override $$type(){
            return "Text Load Line From File"
        }
},

    /**
     * Text Multiline from WAS Suite/Text
     * @desc 
    */
    "Text Multiline" : class extends Node{
        //Setters
        //set 'text'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.text}
        */
        constructor(opts:{
            'text'?: STRING
        }){
            super(ctx);

            super.$$link("text", opts['text']??tmp["Text Multiline"].defaults['text'])
}

        static defaults = {
    'text':  ""
}
        protected override $$type(){
            return "Text Multiline"
        }
},

    /**
     * Text Multiline (Code Compatible) from WAS Suite/Text
     * @desc 
    */
    "Text Multiline (Code Compatible)" : class extends Node{
        //Setters
        //set 'text'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.text}
        */
        constructor(opts:{
            'text'?: STRING
        }){
            super(ctx);

            super.$$link("text", opts['text']??tmp["Text Multiline (Code Compatible)"].defaults['text'])
}

        static defaults = {
    'text':  ""
}
        protected override $$type(){
            return "Text Multiline (Code Compatible)"
        }
},

    /**
     * Text Parse A1111 Embeddings from WAS Suite/Text/Parse
     * @desc 
    */
    "Text Parse A1111 Embeddings" : class extends Node{
        //Setters
        //set 'text'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.text}
        */
        constructor(opts:{
            'text': STRING
        }){
            super(ctx);

            super.$$link("text", opts['text'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Text Parse A1111 Embeddings"
        }
},

    /**
     * Text Parse Noodle Soup Prompts from WAS Suite/Text/Parse
     * @desc 
    */
    "Text Parse Noodle Soup Prompts" : class extends Node{
        //Setters
        //set 'mode'(value : 'Noodle Soup Prompts'|'Wildcards'| $dyn)  { super.$$link(0, value) } 
//set 'noodle_key'(value : STRING)  { super.$$link(1, value) } 
//set 'seed'(value : INT)  { super.$$link(2, value) } 
//set 'text'(value : STRING)  { super.$$link(3, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.mode
		 * @param opts.noodle_key default: "__"
		 * @param opts.seed
		 * @param opts.text}
        */
        constructor(opts:{
            'mode': 'Noodle Soup Prompts'|'Wildcards'| $dyn,'noodle_key'?: STRING,'seed'?: INT,'text': STRING
        }){
            super(ctx);

            super.$$link("mode", opts['mode'])
super.$$link("noodle_key", opts['noodle_key']??tmp["Text Parse Noodle Soup Prompts"].defaults['noodle_key'])
super.$$link("seed", opts['seed']??tmp["Text Parse Noodle Soup Prompts"].defaults['seed'])
super.$$link("text", opts['text'])
}

        static defaults = {
    'noodle_key':  "__",
'seed':  0
}
        protected override $$type(){
            return "Text Parse Noodle Soup Prompts"
        }
},

    /**
     * Text Parse Tokens from WAS Suite/Text/Tokens
     * @desc 
    */
    "Text Parse Tokens" : class extends Node{
        //Setters
        //set 'text'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.text}
        */
        constructor(opts:{
            'text': STRING
        }){
            super(ctx);

            super.$$link("text", opts['text'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Text Parse Tokens"
        }
},

    /**
     * Text Random Line from WAS Suite/Text
     * @desc 
    */
    "Text Random Line" : class extends Node{
        //Setters
        //set 'text'(value : STRING)  { super.$$link(0, value) } 
//set 'seed'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.text
		 * @param opts.seed}
        */
        constructor(opts:{
            'text': STRING,'seed'?: INT
        }){
            super(ctx);

            super.$$link("text", opts['text'])
super.$$link("seed", opts['seed']??tmp["Text Random Line"].defaults['seed'])
}

        static defaults = {
    'seed':  0
}
        protected override $$type(){
            return "Text Random Line"
        }
},

    /**
     * Text Random Prompt from WAS Suite/Text
     * @desc 
    */
    "Text Random Prompt" : class extends Node{
        //Setters
        //set 'search_seed'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.search_seed}
        */
        constructor(opts:{
            'search_seed': STRING
        }){
            super(ctx);

            super.$$link("search_seed", opts['search_seed'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Text Random Prompt"
        }
},

    /**
     * Text String from WAS Suite/Text
     * @desc 
    */
    "Text String" : class extends Node{
        //Setters
        //set 'text'(value : STRING)  { super.$$link(0, value) } 
//set 'text_b'(value : STRING)  { super.$$link(1, value) } 
//set 'text_c'(value : STRING)  { super.$$link(2, value) } 
//set 'text_d'(value : STRING)  { super.$$link(3, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.text
		 * @param opts.text_b
		 * @param opts.text_c
		 * @param opts.text_d}
        */
        constructor(opts:{
            'text'?: STRING,'text_b'?: STRING,'text_c'?: STRING,'text_d'?: STRING
        }){
            super(ctx);

            super.$$link("text", opts['text']??tmp["Text String"].defaults['text'])
super.$$link("text_b", opts['text_b']??tmp["Text String"].defaults['text_b'])
super.$$link("text_c", opts['text_c']??tmp["Text String"].defaults['text_c'])
super.$$link("text_d", opts['text_d']??tmp["Text String"].defaults['text_d'])
}

        static defaults = {
    'text':  "",
'text_b':  "",
'text_c':  "",
'text_d':  ""
}
        protected override $$type(){
            return "Text String"
        }
},

    /**
     * Text Contains from WAS Suite/Logic
     * @desc 
    */
    "Text Contains" : class extends Node{
        //Setters
        //set 'text'(value : STRING)  { super.$$link(0, value) } 
//set 'sub_text'(value : STRING)  { super.$$link(1, value) } 
//set 'case_insensitive'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'BOOLEAN'() : BOOLEAN { return [this.$uid.toString(), 0]  as unknown as BOOLEAN; }

        /**
          * Constructor
		 * @param opts.text
		 * @param opts.sub_text
		 * @param opts.case_insensitive default: true}
        */
        constructor(opts:{
            'text'?: STRING,'sub_text'?: STRING,'case_insensitive'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("text", opts['text']??tmp["Text Contains"].defaults['text'])
super.$$link("sub_text", opts['sub_text']??tmp["Text Contains"].defaults['sub_text'])
super.$$link("case_insensitive", opts['case_insensitive']??tmp["Text Contains"].defaults['case_insensitive'])
}

        static defaults = {
    'text':  "",
'sub_text':  "",
'case_insensitive':  true
}
        protected override $$type(){
            return "Text Contains"
        }
},

    /**
     * Text Shuffle from WAS Suite/Text/Operations
     * @desc 
    */
    "Text Shuffle" : class extends Node{
        //Setters
        //set 'text'(value : STRING)  { super.$$link(0, value) } 
//set 'separator'(value : STRING)  { super.$$link(1, value) } 
//set 'seed'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.text
		 * @param opts.separator default: ","
		 * @param opts.seed}
        */
        constructor(opts:{
            'text': STRING,'separator'?: STRING,'seed'?: INT
        }){
            super(ctx);

            super.$$link("text", opts['text'])
super.$$link("separator", opts['separator']??tmp["Text Shuffle"].defaults['separator'])
super.$$link("seed", opts['seed']??tmp["Text Shuffle"].defaults['seed'])
}

        static defaults = {
    'separator':  ",",
'seed':  0
}
        protected override $$type(){
            return "Text Shuffle"
        }
},

    /**
     * Text Sort from WAS Suite/Text/Operations
     * @desc 
    */
    "Text Sort" : class extends Node{
        //Setters
        //set 'text'(value : STRING)  { super.$$link(0, value) } 
//set 'separator'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.text
		 * @param opts.separator default: ", "}
        */
        constructor(opts:{
            'text': STRING,'separator'?: STRING
        }){
            super(ctx);

            super.$$link("text", opts['text'])
super.$$link("separator", opts['separator']??tmp["Text Sort"].defaults['separator'])
}

        static defaults = {
    'separator':  ", "
}
        protected override $$type(){
            return "Text Sort"
        }
},

    /**
     * Text to Conditioning from WAS Suite/Text/Operations
     * @desc 
    */
    "Text to Conditioning" : class extends Node{
        //Setters
        //set 'clip'(value : CLIP)  { super.$$link(0, value) } 
//set 'text'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.clip
		 * @param opts.text}
        */
        constructor(opts:{
            'clip': CLIP,'text': STRING
        }){
            super(ctx);

            super.$$link("clip", opts['clip'])
super.$$link("text", opts['text'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Text to Conditioning"
        }
},

    /**
     * Text to Console from WAS Suite/Debug
     * @desc 
    */
    "Text to Console" : class extends Node{
        //Setters
        //set 'text'(value : STRING)  { super.$$link(0, value) } 
//set 'label'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.text
		 * @param opts.label default: "Text Output"}
        */
        constructor(opts:{
            'text': STRING,'label'?: STRING
        }){
            super(ctx);

            super.$$link("text", opts['text'])
super.$$link("label", opts['label']??tmp["Text to Console"].defaults['label'])
}

        static defaults = {
    'label':  "Text Output"
}
        protected override $$type(){
            return "Text to Console"
        }
},

    /**
     * Text to Number from WAS Suite/Text/Operations
     * @desc 
    */
    "Text to Number" : class extends Node{
        //Setters
        //set 'text'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'NUMBER'() : NUMBER { return [this.$uid.toString(), 0]  as unknown as NUMBER; }

        /**
          * Constructor
		 * @param opts.text}
        */
        constructor(opts:{
            'text': STRING
        }){
            super(ctx);

            super.$$link("text", opts['text'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Text to Number"
        }
},

    /**
     * Text to String from WAS Suite/Text/Operations
     * @desc 
    */
    "Text to String" : class extends Node{
        //Setters
        //set 'text'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.text}
        */
        constructor(opts:{
            'text': STRING
        }){
            super(ctx);

            super.$$link("text", opts['text'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Text to String"
        }
},

    /**
     * Text String Truncate from WAS Suite/Text/Operations
     * @desc 
    */
    "Text String Truncate" : class extends Node{
        //Setters
        //set 'text'(value : STRING)  { super.$$link(0, value) } 
//set 'truncate_by'(value : 'characters'|'words'| $dyn)  { super.$$link(1, value) } 
//set 'truncate_from'(value : 'end'|'beginning'| $dyn)  { super.$$link(2, value) } 
//set 'truncate_to'(value : INT)  { super.$$link(3, value) } 
//set 'text_b'(value : STRING)  { super.$$link(4, value) } 
//set 'text_c'(value : STRING)  { super.$$link(5, value) } 
//set 'text_d'(value : STRING)  { super.$$link(6, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.text
		 * @param opts.truncate_by
		 * @param opts.truncate_from
		 * @param opts.truncate_to default: 10 max: 99999999 min: -99999999 step: 1
		 * @param opts.text_b
		 * @param opts.text_c
		 * @param opts.text_d}
        */
        constructor(opts:{
            'text': STRING,'truncate_by': 'characters'|'words'| $dyn,'truncate_from': 'end'|'beginning'| $dyn,'truncate_to'?: INT,'text_b'?: STRING,'text_c'?: STRING,'text_d'?: STRING
        }){
            super(ctx);

            super.$$link("text", opts['text'])
super.$$link("truncate_by", opts['truncate_by'])
super.$$link("truncate_from", opts['truncate_from'])
super.$$link("truncate_to", opts['truncate_to']??tmp["Text String Truncate"].defaults['truncate_to'])
super.$$link("text_b", opts['text_b'])
super.$$link("text_c", opts['text_c'])
super.$$link("text_d", opts['text_d'])
}

        static defaults = {
    'truncate_to':  10
}
        protected override $$type(){
            return "Text String Truncate"
        }
},

    /**
     * True Random.org Number Generator from WAS Suite/Number
     * @desc 
    */
    "True Random.org Number Generator" : class extends Node{
        //Setters
        //set 'api_key'(value : STRING)  { super.$$link(0, value) } 
//set 'minimum'(value : FLOAT)  { super.$$link(1, value) } 
//set 'maximum'(value : FLOAT)  { super.$$link(2, value) } 
//set 'mode'(value : 'random'|'fixed'| $dyn)  { super.$$link(3, value) } 

        //Getters
        get 'NUMBER'() : NUMBER { return [this.$uid.toString(), 0]  as unknown as NUMBER; }
get 'FLOAT'() : FLOAT { return [this.$uid.toString(), 1]  as unknown as FLOAT; }
get 'INT'() : INT { return [this.$uid.toString(), 2]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.api_key default: "00000000-0000-0000-0000-000000000000"
		 * @param opts.minimum max: 18446744073709552000 min: -18446744073709552000
		 * @param opts.maximum default: 10000000 max: 18446744073709552000 min: -18446744073709552000
		 * @param opts.mode}
        */
        constructor(opts:{
            'api_key'?: STRING,'minimum'?: FLOAT,'maximum'?: FLOAT,'mode': 'random'|'fixed'| $dyn
        }){
            super(ctx);

            super.$$link("api_key", opts['api_key']??tmp["True Random.org Number Generator"].defaults['api_key'])
super.$$link("minimum", opts['minimum']??tmp["True Random.org Number Generator"].defaults['minimum'])
super.$$link("maximum", opts['maximum']??tmp["True Random.org Number Generator"].defaults['maximum'])
super.$$link("mode", opts['mode'])
}

        static defaults = {
    'api_key':  "00000000-0000-0000-0000-000000000000",
'minimum':  0,
'maximum':  10000000
}
        protected override $$type(){
            return "True Random.org Number Generator"
        }
},

    /**
     * unCLIP Checkpoint Loader from WAS Suite/Loaders
     * @desc 
    */
    "unCLIP Checkpoint Loader" : class extends Node{
        //Setters
        //set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this.$uid.toString(), 1]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this.$uid.toString(), 2]  as unknown as VAE; }
get 'CLIP_VISION'() : CLIP_VISION { return [this.$uid.toString(), 3]  as unknown as CLIP_VISION; }
get 'NAME_STRING'() : STRING { return [this.$uid.toString(), 4]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.ckpt_name}
        */
        constructor(opts:{
            'ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn
        }){
            super(ctx);

            super.$$link("ckpt_name", opts['ckpt_name'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "unCLIP Checkpoint Loader"
        }
},

    /**
     * Upscale Model Loader from WAS Suite/Loaders
     * @desc 
    */
    "Upscale Model Loader" : class extends Node{
        //Setters
        //set 'model_name'(value : '4x_NMKD-Superscale-SP_178000_G.pth'|'HAT_SRx4_ImageNet-pretrain.pth'|'Real_HAT_GAN_sharper.pth'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'UPSCALE_MODEL'() : UPSCALE_MODEL { return [this.$uid.toString(), 0]  as unknown as UPSCALE_MODEL; }
get 'MODEL_NAME_TEXT'() : STRING { return [this.$uid.toString(), 1]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.model_name}
        */
        constructor(opts:{
            'model_name': '4x_NMKD-Superscale-SP_178000_G.pth'|'HAT_SRx4_ImageNet-pretrain.pth'|'Real_HAT_GAN_sharper.pth'| $dyn
        }){
            super(ctx);

            super.$$link("model_name", opts['model_name'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Upscale Model Loader"
        }
},

    /**
     * Upscale Model Switch from WAS Suite/Logic
     * @desc 
    */
    "Upscale Model Switch" : class extends Node{
        //Setters
        //set 'upscale_model_a'(value : UPSCALE_MODEL)  { super.$$link(0, value) } 
//set 'upscale_model_b'(value : UPSCALE_MODEL)  { super.$$link(1, value) } 
//set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'UPSCALE_MODEL'() : UPSCALE_MODEL { return [this.$uid.toString(), 0]  as unknown as UPSCALE_MODEL; }

        /**
          * Constructor
		 * @param opts.upscale_model_a
		 * @param opts.upscale_model_b
		 * @param opts.boolean}
        */
        constructor(opts:{
            'upscale_model_a': UPSCALE_MODEL,'upscale_model_b': UPSCALE_MODEL,'boolean': BOOLEAN
        }){
            super(ctx);

            super.$$link("upscale_model_a", opts['upscale_model_a'])
super.$$link("upscale_model_b", opts['upscale_model_b'])
super.$$link("boolean", opts['boolean'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Upscale Model Switch"
        }
},

    /**
     * Write to GIF from WAS Suite/Animation/Writer
     * @desc 
    */
    "Write to GIF" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'transition_frames'(value : INT)  { super.$$link(1, value) } 
//set 'image_delay_ms'(value : FLOAT)  { super.$$link(2, value) } 
//set 'duration_ms'(value : FLOAT)  { super.$$link(3, value) } 
//set 'loops'(value : INT)  { super.$$link(4, value) } 
//set 'max_size'(value : INT)  { super.$$link(5, value) } 
//set 'output_path'(value : STRING)  { super.$$link(6, value) } 
//set 'filename'(value : STRING)  { super.$$link(7, value) } 

        //Getters
        get 'image_pass'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'filepath_text'() : STRING { return [this.$uid.toString(), 1]  as unknown as STRING; }
get 'filename_text'() : STRING { return [this.$uid.toString(), 2]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.transition_frames default: 30 max: 60 min: 2 step: 1
		 * @param opts.image_delay_ms default: 2500 max: 60000 min: 0.1 step: 0.1
		 * @param opts.duration_ms default: 0.1 max: 60000 min: 0.1 step: 0.1
		 * @param opts.loops step: 1
		 * @param opts.max_size default: 512 max: 1280 min: 128 step: 1
		 * @param opts.output_path default: "/archive/shared/comfyui-krita/ComfyUI/output"
		 * @param opts.filename default: "morph_writer"}
        */
        constructor(opts:{
            'image': IMAGE,'transition_frames'?: INT,'image_delay_ms'?: FLOAT,'duration_ms'?: FLOAT,'loops'?: INT,'max_size'?: INT,'output_path'?: STRING,'filename'?: STRING
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("transition_frames", opts['transition_frames']??tmp["Write to GIF"].defaults['transition_frames'])
super.$$link("image_delay_ms", opts['image_delay_ms']??tmp["Write to GIF"].defaults['image_delay_ms'])
super.$$link("duration_ms", opts['duration_ms']??tmp["Write to GIF"].defaults['duration_ms'])
super.$$link("loops", opts['loops']??tmp["Write to GIF"].defaults['loops'])
super.$$link("max_size", opts['max_size']??tmp["Write to GIF"].defaults['max_size'])
super.$$link("output_path", opts['output_path']??tmp["Write to GIF"].defaults['output_path'])
super.$$link("filename", opts['filename']??tmp["Write to GIF"].defaults['filename'])
}

        static defaults = {
    'transition_frames':  30,
'image_delay_ms':  2500,
'duration_ms':  0.1,
'loops':  0,
'max_size':  512,
'output_path':  "/archive/shared/comfyui-krita/ComfyUI/output",
'filename':  "morph_writer"
}
        protected override $$type(){
            return "Write to GIF"
        }
},

    /**
     * Write to Video from WAS Suite/Animation/Writer
     * @desc 
    */
    "Write to Video" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'transition_frames'(value : INT)  { super.$$link(1, value) } 
//set 'image_delay_sec'(value : FLOAT)  { super.$$link(2, value) } 
//set 'fps'(value : INT)  { super.$$link(3, value) } 
//set 'max_size'(value : INT)  { super.$$link(4, value) } 
//set 'output_path'(value : STRING)  { super.$$link(5, value) } 
//set 'filename'(value : STRING)  { super.$$link(6, value) } 
//set 'codec'(value : 'AVC1'|'FFV1'|'H264'|'MP4V'| $dyn)  { super.$$link(7, value) } 

        //Getters
        get 'IMAGE_PASS'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'filepath_text'() : STRING { return [this.$uid.toString(), 1]  as unknown as STRING; }
get 'filename_text'() : STRING { return [this.$uid.toString(), 2]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.transition_frames default: 30 step: 1
		 * @param opts.image_delay_sec default: 2.5 max: 60000 min: 0.1 step: 0.1
		 * @param opts.fps default: 30 max: 60 min: 1 step: 1
		 * @param opts.max_size default: 512 max: 1920 min: 128 step: 1
		 * @param opts.output_path default: "./ComfyUI/output"
		 * @param opts.filename default: "comfy_writer"
		 * @param opts.codec}
        */
        constructor(opts:{
            'image': IMAGE,'transition_frames'?: INT,'image_delay_sec'?: FLOAT,'fps'?: INT,'max_size'?: INT,'output_path'?: STRING,'filename'?: STRING,'codec': 'AVC1'|'FFV1'|'H264'|'MP4V'| $dyn
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("transition_frames", opts['transition_frames']??tmp["Write to Video"].defaults['transition_frames'])
super.$$link("image_delay_sec", opts['image_delay_sec']??tmp["Write to Video"].defaults['image_delay_sec'])
super.$$link("fps", opts['fps']??tmp["Write to Video"].defaults['fps'])
super.$$link("max_size", opts['max_size']??tmp["Write to Video"].defaults['max_size'])
super.$$link("output_path", opts['output_path']??tmp["Write to Video"].defaults['output_path'])
super.$$link("filename", opts['filename']??tmp["Write to Video"].defaults['filename'])
super.$$link("codec", opts['codec'])
}

        static defaults = {
    'transition_frames':  30,
'image_delay_sec':  2.5,
'fps':  30,
'max_size':  512,
'output_path':  "./ComfyUI/output",
'filename':  "comfy_writer"
}
        protected override $$type(){
            return "Write to Video"
        }
},

    /**
     * VAE Input Switch from WAS Suite/Logic
     * @desc 
    */
    "VAE Input Switch" : class extends Node{
        //Setters
        //set 'vae_a'(value : VAE)  { super.$$link(0, value) } 
//set 'vae_b'(value : VAE)  { super.$$link(1, value) } 
//set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'VAE'() : VAE { return [this.$uid.toString(), 0]  as unknown as VAE; }

        /**
          * Constructor
		 * @param opts.vae_a
		 * @param opts.vae_b
		 * @param opts.boolean}
        */
        constructor(opts:{
            'vae_a': VAE,'vae_b': VAE,'boolean': BOOLEAN
        }){
            super(ctx);

            super.$$link("vae_a", opts['vae_a'])
super.$$link("vae_b", opts['vae_b'])
super.$$link("boolean", opts['boolean'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "VAE Input Switch"
        }
},

    /**
     * Video Dump Frames from WAS Suite/Animation
     * @desc 
    */
    "Video Dump Frames" : class extends Node{
        //Setters
        //set 'video_path'(value : STRING)  { super.$$link(0, value) } 
//set 'output_path'(value : STRING)  { super.$$link(1, value) } 
//set 'prefix'(value : STRING)  { super.$$link(2, value) } 
//set 'filenumber_digits'(value : INT)  { super.$$link(3, value) } 
//set 'extension'(value : 'png'|'jpg'|'gif'|'tiff'| $dyn)  { super.$$link(4, value) } 

        //Getters
        get 'output_path'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }
get 'processed_count'() : NUMBER { return [this.$uid.toString(), 1]  as unknown as NUMBER; }

        /**
          * Constructor
		 * @param opts.video_path default: "./ComfyUI/input/MyVideo.mp4"
		 * @param opts.output_path default: "./ComfyUI/input/MyVideo"
		 * @param opts.prefix default: "frame_"
		 * @param opts.filenumber_digits default: 4 max: 8 min: -1 step: 1
		 * @param opts.extension}
        */
        constructor(opts:{
            'video_path'?: STRING,'output_path'?: STRING,'prefix'?: STRING,'filenumber_digits'?: INT,'extension': 'png'|'jpg'|'gif'|'tiff'| $dyn
        }){
            super(ctx);

            super.$$link("video_path", opts['video_path']??tmp["Video Dump Frames"].defaults['video_path'])
super.$$link("output_path", opts['output_path']??tmp["Video Dump Frames"].defaults['output_path'])
super.$$link("prefix", opts['prefix']??tmp["Video Dump Frames"].defaults['prefix'])
super.$$link("filenumber_digits", opts['filenumber_digits']??tmp["Video Dump Frames"].defaults['filenumber_digits'])
super.$$link("extension", opts['extension'])
}

        static defaults = {
    'video_path':  "./ComfyUI/input/MyVideo.mp4",
'output_path':  "./ComfyUI/input/MyVideo",
'prefix':  "frame_",
'filenumber_digits':  4
}
        protected override $$type(){
            return "Video Dump Frames"
        }
},

    /**
     * CLIPSEG2 from image/transformation
     * @desc 
    */
    "CLIPSEG2" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'text'(value : STRING)  { super.$$link(1, value) } 
//set 'use_cuda'(value : BOOLEAN)  { super.$$link(2, value) } 
//set 'clipseg_model'(value : CLIPSEG_MODEL)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.text
		 * @param opts.use_cuda
		 * @param opts.clipseg_model}
        */
        constructor(opts:{
            'image': IMAGE,'text'?: STRING,'use_cuda'?: BOOLEAN,'clipseg_model'?: CLIPSEG_MODEL
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("text", opts['text']??tmp["CLIPSEG2"].defaults['text'])
super.$$link("use_cuda", opts['use_cuda']??tmp["CLIPSEG2"].defaults['use_cuda'])
super.$$link("clipseg_model", opts['clipseg_model'])
}

        static defaults = {
    'text':  "",
'use_cuda':  false
}
        protected override $$type(){
            return "CLIPSEG2"
        }
},

    /**
     * Load Image (Base64) from _external_tooling
     * @desc 
    */
    "ETN_LoadImageBase64" : class extends Node{
        //Setters
        //set 'image'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'MASK'() : MASK { return [this.$uid.toString(), 1]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.image}
        */
        constructor(opts:{
            'image': STRING
        }){
            super(ctx);

            super.$$link("image", opts['image'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ETN_LoadImageBase64"
        }
},

    /**
     * Load Mask (Base64) from _external_tooling
     * @desc 
    */
    "ETN_LoadMaskBase64" : class extends Node{
        //Setters
        //set 'mask'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.mask}
        */
        constructor(opts:{
            'mask': STRING
        }){
            super(ctx);

            super.$$link("mask", opts['mask'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ETN_LoadMaskBase64"
        }
},

    /**
     * Send Image (WebSocket) from _external_tooling
     * @desc 
    */
    "ETN_SendImageWebSocket" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.images}
        */
        constructor(opts:{
            'images': IMAGE
        }){
            super(ctx);

            super.$$link("images", opts['images'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ETN_SendImageWebSocket"
        }
},

    /**
     * Crop Image from _external_tooling
     * @desc 
    */
    "ETN_CropImage" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'x'(value : INT)  { super.$$link(1, value) } 
//set 'y'(value : INT)  { super.$$link(2, value) } 
//set 'width'(value : INT)  { super.$$link(3, value) } 
//set 'height'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.x step: 1
		 * @param opts.y step: 1
		 * @param opts.width default: 512 max: 8192 min: 1 step: 1
		 * @param opts.height default: 512 max: 8192 min: 1 step: 1}
        */
        constructor(opts:{
            'image': IMAGE,'x'?: INT,'y'?: INT,'width'?: INT,'height'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("x", opts['x']??tmp["ETN_CropImage"].defaults['x'])
super.$$link("y", opts['y']??tmp["ETN_CropImage"].defaults['y'])
super.$$link("width", opts['width']??tmp["ETN_CropImage"].defaults['width'])
super.$$link("height", opts['height']??tmp["ETN_CropImage"].defaults['height'])
}

        static defaults = {
    'x':  0,
'y':  0,
'width':  512,
'height':  512
}
        protected override $$type(){
            return "ETN_CropImage"
        }
},

    /**
     * Apply Mask to Image from _external_tooling
     * @desc 
    */
    "ETN_ApplyMaskToImage" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'mask'(value : MASK)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.mask}
        */
        constructor(opts:{
            'image': IMAGE,'mask': MASK
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("mask", opts['mask'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ETN_ApplyMaskToImage"
        }
},

    /**
     * NNLatentUpscale from latent
     * @desc 
    */
    "NNLatentUpscale" : class extends Node{
        //Setters
        //set 'latent'(value : LATENT)  { super.$$link(0, value) } 
//set 'version'(value : 'SDXL'|'SD 1.x'| $dyn)  { super.$$link(1, value) } 
//set 'upscale'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.latent
		 * @param opts.version
		 * @param opts.upscale default: 1.5 max: 2 min: 1 step: 0.01}
        */
        constructor(opts:{
            'latent': LATENT,'version': 'SDXL'|'SD 1.x'| $dyn,'upscale'?: FLOAT
        }){
            super(ctx);

            super.$$link("latent", opts['latent'])
super.$$link("version", opts['version'])
super.$$link("upscale", opts['upscale']??tmp["NNLatentUpscale"].defaults['upscale'])
}

        static defaults = {
    'upscale':  1.5
}
        protected override $$type(){
            return "NNLatentUpscale"
        }
},

    /**
     * SAMModelLoader (segment anything) from segment_anything
     * @desc 
    */
    "SAMModelLoader (segment anything)" : class extends Node{
        //Setters
        //set 'model_name'(value : 'sam_vit_h (2.56GB)'|'sam_vit_l (1.25GB)'|'sam_vit_b (375MB)'|'sam_hq_vit_h (2.57GB)'|'sam_hq_vit_l (1.25GB)'|'sam_hq_vit_b (379MB)'|'mobile_sam(39MB)'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'SAM_MODEL'() : SAM_MODEL { return [this.$uid.toString(), 0]  as unknown as SAM_MODEL; }

        /**
          * Constructor
		 * @param opts.model_name}
        */
        constructor(opts:{
            'model_name': 'sam_vit_h (2.56GB)'|'sam_vit_l (1.25GB)'|'sam_vit_b (375MB)'|'sam_hq_vit_h (2.57GB)'|'sam_hq_vit_l (1.25GB)'|'sam_hq_vit_b (379MB)'|'mobile_sam(39MB)'| $dyn
        }){
            super(ctx);

            super.$$link("model_name", opts['model_name'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "SAMModelLoader (segment anything)"
        }
},

    /**
     * GroundingDinoModelLoader (segment anything) from segment_anything
     * @desc 
    */
    "GroundingDinoModelLoader (segment anything)" : class extends Node{
        //Setters
        //set 'model_name'(value : 'GroundingDINO_SwinT_OGC (694MB)'|'GroundingDINO_SwinB (938MB)'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'GROUNDING_DINO_MODEL'() : GROUNDING_DINO_MODEL { return [this.$uid.toString(), 0]  as unknown as GROUNDING_DINO_MODEL; }

        /**
          * Constructor
		 * @param opts.model_name}
        */
        constructor(opts:{
            'model_name': 'GroundingDINO_SwinT_OGC (694MB)'|'GroundingDINO_SwinB (938MB)'| $dyn
        }){
            super(ctx);

            super.$$link("model_name", opts['model_name'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "GroundingDinoModelLoader (segment anything)"
        }
},

    /**
     * GroundingDinoSAMSegment (segment anything) from segment_anything
     * @desc 
    */
    "GroundingDinoSAMSegment (segment anything)" : class extends Node{
        //Setters
        //set 'sam_model'(value : SAM_MODEL)  { super.$$link(0, value) } 
//set 'grounding_dino_model'(value : GROUNDING_DINO_MODEL)  { super.$$link(1, value) } 
//set 'image'(value : IMAGE)  { super.$$link(2, value) } 
//set 'prompt'(value : STRING)  { super.$$link(3, value) } 
//set 'threshold'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'MASK'() : MASK { return [this.$uid.toString(), 1]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.sam_model
		 * @param opts.grounding_dino_model
		 * @param opts.image
		 * @param opts.prompt
		 * @param opts.threshold default: 0.3 step: 0.01}
        */
        constructor(opts:{
            'sam_model': SAM_MODEL,'grounding_dino_model': GROUNDING_DINO_MODEL,'image': IMAGE,'prompt': STRING,'threshold'?: FLOAT
        }){
            super(ctx);

            super.$$link("sam_model", opts['sam_model'])
super.$$link("grounding_dino_model", opts['grounding_dino_model'])
super.$$link("image", opts['image'])
super.$$link("prompt", opts['prompt'])
super.$$link("threshold", opts['threshold']??tmp["GroundingDinoSAMSegment (segment anything)"].defaults['threshold'])
}

        static defaults = {
    'threshold':  0.3
}
        protected override $$type(){
            return "GroundingDinoSAMSegment (segment anything)"
        }
},

    /**
     * InvertMask (segment anything) from segment_anything
     * @desc 
    */
    "InvertMask (segment anything)" : class extends Node{
        //Setters
        //set 'mask'(value : MASK)  { super.$$link(0, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.mask}
        */
        constructor(opts:{
            'mask': MASK
        }){
            super(ctx);

            super.$$link("mask", opts['mask'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "InvertMask (segment anything)"
        }
},

    /**
     * IsMaskEmpty from segment_anything
     * @desc 
    */
    "IsMaskEmpty" : class extends Node{
        //Setters
        //set 'mask'(value : MASK)  { super.$$link(0, value) } 

        //Getters
        get 'boolean_number'() : NUMBER { return [this.$uid.toString(), 0]  as unknown as NUMBER; }

        /**
          * Constructor
		 * @param opts.mask}
        */
        constructor(opts:{
            'mask': MASK
        }){
            super(ctx);

            super.$$link("mask", opts['mask'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "IsMaskEmpty"
        }
},

    /**
     * LDSR Upscale (all-in-one) from Flowty LDSR
     * @desc 
    */
    "LDSRUpscaler" : class extends Node{
        //Setters
        //set 'model'(value : '4x_NMKD-Superscale-SP_178000_G.pth'|'HAT_SRx4_ImageNet-pretrain.pth'|'Real_HAT_GAN_sharper.pth'| $dyn)  { super.$$link(0, value) } 
//set 'images'(value : IMAGE)  { super.$$link(1, value) } 
//set 'steps'(value : '25'|'50'|'100'|'250'|'500'|'1000'| $dyn)  { super.$$link(2, value) } 
//set 'pre_downscale'(value : 'None'|'1/2'|'1/4'| $dyn)  { super.$$link(3, value) } 
//set 'post_downscale'(value : 'None'|'Original Size'|'1/2'|'1/4'| $dyn)  { super.$$link(4, value) } 
//set 'downsample_method'(value : 'Nearest'|'Lanczos'| $dyn)  { super.$$link(5, value) } 

        //Getters
        get 'images'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.model default: "last.ckpt"
		 * @param opts.images
		 * @param opts.steps default: "100"
		 * @param opts.pre_downscale default: "None"
		 * @param opts.post_downscale default: "None"
		 * @param opts.downsample_method default: "Lanczos"}
        */
        constructor(opts:{
            'model'?: '4x_NMKD-Superscale-SP_178000_G.pth'|'HAT_SRx4_ImageNet-pretrain.pth'|'Real_HAT_GAN_sharper.pth'| $dyn,'images': IMAGE,'steps'?: '25'|'50'|'100'|'250'|'500'|'1000'| $dyn,'pre_downscale'?: 'None'|'1/2'|'1/4'| $dyn,'post_downscale'?: 'None'|'Original Size'|'1/2'|'1/4'| $dyn,'downsample_method'?: 'Nearest'|'Lanczos'| $dyn
        }){
            super(ctx);

            super.$$link("model", opts['model']??tmp["LDSRUpscaler"].defaults['model'])
super.$$link("images", opts['images'])
super.$$link("steps", opts['steps']??tmp["LDSRUpscaler"].defaults['steps'])
super.$$link("pre_downscale", opts['pre_downscale']??tmp["LDSRUpscaler"].defaults['pre_downscale'])
super.$$link("post_downscale", opts['post_downscale']??tmp["LDSRUpscaler"].defaults['post_downscale'])
super.$$link("downsample_method", opts['downsample_method']??tmp["LDSRUpscaler"].defaults['downsample_method'])
}

        static defaults = {
    'model':  "last.ckpt",
'steps':  "100",
'pre_downscale':  "None",
'post_downscale':  "None",
'downsample_method':  "Lanczos"
}
        protected override $$type(){
            return "LDSRUpscaler"
        }
},

    /**
     * Load LDSR Model from Flowty LDSR
     * @desc 
    */
    "LDSRModelLoader" : class extends Node{
        //Setters
        //set 'model'(value : '4x_NMKD-Superscale-SP_178000_G.pth'|'HAT_SRx4_ImageNet-pretrain.pth'|'Real_HAT_GAN_sharper.pth'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'UPSCALE_MODEL'() : UPSCALE_MODEL { return [this.$uid.toString(), 0]  as unknown as UPSCALE_MODEL; }

        /**
          * Constructor
		 * @param opts.model default: "last.ckpt"}
        */
        constructor(opts:{
            'model'?: '4x_NMKD-Superscale-SP_178000_G.pth'|'HAT_SRx4_ImageNet-pretrain.pth'|'Real_HAT_GAN_sharper.pth'| $dyn
        }){
            super(ctx);

            super.$$link("model", opts['model']??tmp["LDSRModelLoader"].defaults['model'])
}

        static defaults = {
    'model':  "last.ckpt"
}
        protected override $$type(){
            return "LDSRModelLoader"
        }
},

    /**
     * LDSR Upscale from Flowty LDSR
     * @desc 
    */
    "LDSRUpscale" : class extends Node{
        //Setters
        //set 'upscale_model'(value : UPSCALE_MODEL)  { super.$$link(0, value) } 
//set 'images'(value : IMAGE)  { super.$$link(1, value) } 
//set 'steps'(value : '25'|'50'|'100'|'250'|'500'|'1000'| $dyn)  { super.$$link(2, value) } 
//set 'pre_downscale'(value : 'None'|'1/2'|'1/4'| $dyn)  { super.$$link(3, value) } 
//set 'post_downscale'(value : 'None'|'Original Size'|'1/2'|'1/4'| $dyn)  { super.$$link(4, value) } 
//set 'downsample_method'(value : 'Nearest'|'Lanczos'| $dyn)  { super.$$link(5, value) } 

        //Getters
        get 'images'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.upscale_model
		 * @param opts.images
		 * @param opts.steps default: "100"
		 * @param opts.pre_downscale default: "None"
		 * @param opts.post_downscale default: "None"
		 * @param opts.downsample_method default: "Lanczos"}
        */
        constructor(opts:{
            'upscale_model': UPSCALE_MODEL,'images': IMAGE,'steps'?: '25'|'50'|'100'|'250'|'500'|'1000'| $dyn,'pre_downscale'?: 'None'|'1/2'|'1/4'| $dyn,'post_downscale'?: 'None'|'Original Size'|'1/2'|'1/4'| $dyn,'downsample_method'?: 'Nearest'|'Lanczos'| $dyn
        }){
            super(ctx);

            super.$$link("upscale_model", opts['upscale_model'])
super.$$link("images", opts['images'])
super.$$link("steps", opts['steps']??tmp["LDSRUpscale"].defaults['steps'])
super.$$link("pre_downscale", opts['pre_downscale']??tmp["LDSRUpscale"].defaults['pre_downscale'])
super.$$link("post_downscale", opts['post_downscale']??tmp["LDSRUpscale"].defaults['post_downscale'])
super.$$link("downsample_method", opts['downsample_method']??tmp["LDSRUpscale"].defaults['downsample_method'])
}

        static defaults = {
    'steps':  "100",
'pre_downscale':  "None",
'post_downscale':  "None",
'downsample_method':  "Lanczos"
}
        protected override $$type(){
            return "LDSRUpscale"
        }
},

    /**
     * Inpaint Preprocessor from ControlNet Preprocessors/others
     * @desc 
    */
    "InpaintPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'mask'(value : MASK)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.mask}
        */
        constructor(opts:{
            'image': IMAGE,'mask': MASK
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("mask", opts['mask'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "InpaintPreprocessor"
        }
},

    /**
     * Tile from ControlNet Preprocessors/tile
     * @desc 
    */
    "TilePreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'pyrUp_iters'(value : INT)  { super.$$link(1, value) } 
//set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.pyrUp_iters default: 3 max: 10 min: 1 step: 1
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'pyrUp_iters'?: INT,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("pyrUp_iters", opts['pyrUp_iters']??tmp["TilePreprocessor"].defaults['pyrUp_iters'])
super.$$link("resolution", opts['resolution']??tmp["TilePreprocessor"].defaults['resolution'])
}

        static defaults = {
    'pyrUp_iters':  3,
'resolution':  512
}
        protected override $$type(){
            return "TilePreprocessor"
        }
},

    /**
     * TTPlanet Tile GuidedFilter from ControlNet Preprocessors/tile
     * @desc 
    */
    "TTPlanet_TileGF_Preprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'scale_factor'(value : FLOAT)  { super.$$link(1, value) } 
//set 'blur_strength'(value : FLOAT)  { super.$$link(2, value) } 
//set 'radius'(value : INT)  { super.$$link(3, value) } 
//set 'eps'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.scale_factor default: 1 max: 8 min: 1 step: 0.05
		 * @param opts.blur_strength default: 2 max: 10 min: 1 step: 0.1
		 * @param opts.radius default: 7 max: 20 min: 1 step: 1
		 * @param opts.eps default: 0.01 max: 0.1 min: 0.001 step: 0.001}
        */
        constructor(opts:{
            'image': IMAGE,'scale_factor'?: FLOAT,'blur_strength'?: FLOAT,'radius'?: INT,'eps'?: FLOAT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("scale_factor", opts['scale_factor']??tmp["TTPlanet_TileGF_Preprocessor"].defaults['scale_factor'])
super.$$link("blur_strength", opts['blur_strength']??tmp["TTPlanet_TileGF_Preprocessor"].defaults['blur_strength'])
super.$$link("radius", opts['radius']??tmp["TTPlanet_TileGF_Preprocessor"].defaults['radius'])
super.$$link("eps", opts['eps']??tmp["TTPlanet_TileGF_Preprocessor"].defaults['eps'])
}

        static defaults = {
    'scale_factor':  1,
'blur_strength':  2,
'radius':  7,
'eps':  0.01
}
        protected override $$type(){
            return "TTPlanet_TileGF_Preprocessor"
        }
},

    /**
     * TTPlanet Tile Simple from ControlNet Preprocessors/tile
     * @desc 
    */
    "TTPlanet_TileSimple_Preprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'scale_factor'(value : FLOAT)  { super.$$link(1, value) } 
//set 'blur_strength'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.scale_factor default: 1 max: 8 min: 1 step: 0.05
		 * @param opts.blur_strength default: 2 max: 10 min: 1 step: 0.1}
        */
        constructor(opts:{
            'image': IMAGE,'scale_factor'?: FLOAT,'blur_strength'?: FLOAT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("scale_factor", opts['scale_factor']??tmp["TTPlanet_TileSimple_Preprocessor"].defaults['scale_factor'])
super.$$link("blur_strength", opts['blur_strength']??tmp["TTPlanet_TileSimple_Preprocessor"].defaults['blur_strength'])
}

        static defaults = {
    'scale_factor':  1,
'blur_strength':  2
}
        protected override $$type(){
            return "TTPlanet_TileSimple_Preprocessor"
        }
},

    /**
     * BAE Normal Map from ControlNet Preprocessors/Normal and Depth Estimators
     * @desc 
    */
    "BAE-NormalMapPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'resolution'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("resolution", opts['resolution']??tmp["BAE-NormalMapPreprocessor"].defaults['resolution'])
}

        static defaults = {
    'resolution':  512
}
        protected override $$type(){
            return "BAE-NormalMapPreprocessor"
        }
},

    /**
     * DensePose Estimator from ControlNet Preprocessors/Faces and Poses Estimators
     * @desc 
    */
    "DensePosePreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'model'(value : 'densepose_r50_fpn_dl.torchscript'|'densepose_r101_fpn_dl.torchscript'| $dyn)  { super.$$link(1, value) } 
//set 'cmap'(value : 'Viridis (MagicAnimate)'|'Parula (CivitAI)'| $dyn)  { super.$$link(2, value) } 
//set 'resolution'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.model default: "densepose_r50_fpn_dl.torchscript"
		 * @param opts.cmap default: "Viridis (MagicAnimate)"
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'model'?: 'densepose_r50_fpn_dl.torchscript'|'densepose_r101_fpn_dl.torchscript'| $dyn,'cmap'?: 'Viridis (MagicAnimate)'|'Parula (CivitAI)'| $dyn,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("model", opts['model']??tmp["DensePosePreprocessor"].defaults['model'])
super.$$link("cmap", opts['cmap']??tmp["DensePosePreprocessor"].defaults['cmap'])
super.$$link("resolution", opts['resolution']??tmp["DensePosePreprocessor"].defaults['resolution'])
}

        static defaults = {
    'model':  "densepose_r50_fpn_dl.torchscript",
'cmap':  "Viridis (MagicAnimate)",
'resolution':  512
}
        protected override $$type(){
            return "DensePosePreprocessor"
        }
},

    /**
     * PiDiNet Soft-Edge Lines from ControlNet Preprocessors/Line Extractors
     * @desc 
    */
    "PiDiNetPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'safe'(value : 'enable'|'disable'| $dyn)  { super.$$link(1, value) } 
//set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.safe default: "enable"
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'safe'?: 'enable'|'disable'| $dyn,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("safe", opts['safe']??tmp["PiDiNetPreprocessor"].defaults['safe'])
super.$$link("resolution", opts['resolution']??tmp["PiDiNetPreprocessor"].defaults['resolution'])
}

        static defaults = {
    'safe':  "enable",
'resolution':  512
}
        protected override $$type(){
            return "PiDiNetPreprocessor"
        }
},

    /**
     * Scribble Lines from ControlNet Preprocessors/Line Extractors
     * @desc 
    */
    "ScribblePreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'resolution'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("resolution", opts['resolution']??tmp["ScribblePreprocessor"].defaults['resolution'])
}

        static defaults = {
    'resolution':  512
}
        protected override $$type(){
            return "ScribblePreprocessor"
        }
},

    /**
     * Scribble XDoG Lines from ControlNet Preprocessors/Line Extractors
     * @desc 
    */
    "Scribble_XDoG_Preprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'threshold'(value : INT)  { super.$$link(1, value) } 
//set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.threshold default: 32 max: 64 min: 1 step: 1
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'threshold'?: INT,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("threshold", opts['threshold']??tmp["Scribble_XDoG_Preprocessor"].defaults['threshold'])
super.$$link("resolution", opts['resolution']??tmp["Scribble_XDoG_Preprocessor"].defaults['resolution'])
}

        static defaults = {
    'threshold':  32,
'resolution':  512
}
        protected override $$type(){
            return "Scribble_XDoG_Preprocessor"
        }
},

    /**
     * Scribble PiDiNet Lines from ControlNet Preprocessors/Line Extractors
     * @desc 
    */
    "Scribble_PiDiNet_Preprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'safe'(value : 'enable'|'disable'| $dyn)  { super.$$link(1, value) } 
//set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.safe default: "enable"
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'safe'?: 'enable'|'disable'| $dyn,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("safe", opts['safe']??tmp["Scribble_PiDiNet_Preprocessor"].defaults['safe'])
super.$$link("resolution", opts['resolution']??tmp["Scribble_PiDiNet_Preprocessor"].defaults['resolution'])
}

        static defaults = {
    'safe':  "enable",
'resolution':  512
}
        protected override $$type(){
            return "Scribble_PiDiNet_Preprocessor"
        }
},

    /**
     * SAM Segmentor from ControlNet Preprocessors/others
     * @desc 
    */
    "SAMPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'resolution'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("resolution", opts['resolution']??tmp["SAMPreprocessor"].defaults['resolution'])
}

        static defaults = {
    'resolution':  512
}
        protected override $$type(){
            return "SAMPreprocessor"
        }
},

    /**
     * Standard Lineart from ControlNet Preprocessors/Line Extractors
     * @desc 
    */
    "LineartStandardPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'guassian_sigma'(value : FLOAT)  { super.$$link(1, value) } 
//set 'intensity_threshold'(value : INT)  { super.$$link(2, value) } 
//set 'resolution'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.guassian_sigma default: 6
		 * @param opts.intensity_threshold default: 8
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'guassian_sigma'?: FLOAT,'intensity_threshold'?: INT,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("guassian_sigma", opts['guassian_sigma']??tmp["LineartStandardPreprocessor"].defaults['guassian_sigma'])
super.$$link("intensity_threshold", opts['intensity_threshold']??tmp["LineartStandardPreprocessor"].defaults['intensity_threshold'])
super.$$link("resolution", opts['resolution']??tmp["LineartStandardPreprocessor"].defaults['resolution'])
}

        static defaults = {
    'guassian_sigma':  6,
'intensity_threshold':  8,
'resolution':  512
}
        protected override $$type(){
            return "LineartStandardPreprocessor"
        }
},

    /**
     * DSINE Normal Map from ControlNet Preprocessors/Normal and Depth Estimators
     * @desc 
    */
    "DSINE-NormalMapPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'fov'(value : FLOAT)  { super.$$link(1, value) } 
//set 'iterations'(value : INT)  { super.$$link(2, value) } 
//set 'resolution'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.fov default: 60 step: 0.05
		 * @param opts.iterations default: 5 max: 20 min: 1 step: 1
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'fov'?: FLOAT,'iterations'?: INT,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("fov", opts['fov']??tmp["DSINE-NormalMapPreprocessor"].defaults['fov'])
super.$$link("iterations", opts['iterations']??tmp["DSINE-NormalMapPreprocessor"].defaults['iterations'])
super.$$link("resolution", opts['resolution']??tmp["DSINE-NormalMapPreprocessor"].defaults['resolution'])
}

        static defaults = {
    'fov':  60,
'iterations':  5,
'resolution':  512
}
        protected override $$type(){
            return "DSINE-NormalMapPreprocessor"
        }
},

    /**
     * TEEDPreprocessor from ControlNet Preprocessors/Line Extractors
     * @desc 
    */
    "TEEDPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'safe_steps'(value : INT)  { super.$$link(1, value) } 
//set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.safe_steps default: 2
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'safe_steps'?: INT,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("safe_steps", opts['safe_steps']??tmp["TEEDPreprocessor"].defaults['safe_steps'])
super.$$link("resolution", opts['resolution']??tmp["TEEDPreprocessor"].defaults['resolution'])
}

        static defaults = {
    'safe_steps':  2,
'resolution':  512
}
        protected override $$type(){
            return "TEEDPreprocessor"
        }
},

    /**
     * M-LSD Lines from ControlNet Preprocessors/Line Extractors
     * @desc 
    */
    "M-LSDPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'score_threshold'(value : FLOAT)  { super.$$link(1, value) } 
//set 'dist_threshold'(value : FLOAT)  { super.$$link(2, value) } 
//set 'resolution'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.score_threshold default: 0.1 max: 2 min: 0.01 step: 0.01
		 * @param opts.dist_threshold default: 0.1 max: 20 min: 0.01 step: 0.01
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'score_threshold'?: FLOAT,'dist_threshold'?: FLOAT,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("score_threshold", opts['score_threshold']??tmp["M-LSDPreprocessor"].defaults['score_threshold'])
super.$$link("dist_threshold", opts['dist_threshold']??tmp["M-LSDPreprocessor"].defaults['dist_threshold'])
super.$$link("resolution", opts['resolution']??tmp["M-LSDPreprocessor"].defaults['resolution'])
}

        static defaults = {
    'score_threshold':  0.1,
'dist_threshold':  0.1,
'resolution':  512
}
        protected override $$type(){
            return "M-LSDPreprocessor"
        }
},

    /**
     * AnyLine Lineart from ControlNet Preprocessors/Line Extractors
     * @desc 
    */
    "AnyLineArtPreprocessor_aux" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'merge_with_lineart'(value : 'lineart_standard'|'lineart_realisitic'|'lineart_anime'|'manga_line'| $dyn)  { super.$$link(1, value) } 
//set 'resolution'(value : INT)  { super.$$link(2, value) } 
//set 'lineart_lower_bound'(value : FLOAT)  { super.$$link(3, value) } 
//set 'lineart_upper_bound'(value : FLOAT)  { super.$$link(4, value) } 
//set 'object_min_size'(value : INT)  { super.$$link(5, value) } 
//set 'object_connectivity'(value : INT)  { super.$$link(6, value) } 

        //Getters
        get 'image'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.merge_with_lineart default: "lineart_standard"
		 * @param opts.resolution default: 1280 max: 16384 min: 512 step: 8
		 * @param opts.lineart_lower_bound step: 0.01
		 * @param opts.lineart_upper_bound default: 1 step: 0.01
		 * @param opts.object_min_size default: 36 max: 16384 min: 1
		 * @param opts.object_connectivity default: 1 max: 16384 min: 1}
        */
        constructor(opts:{
            'image': IMAGE,'merge_with_lineart'?: 'lineart_standard'|'lineart_realisitic'|'lineart_anime'|'manga_line'| $dyn,'resolution'?: INT,'lineart_lower_bound'?: FLOAT,'lineart_upper_bound'?: FLOAT,'object_min_size'?: INT,'object_connectivity'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("merge_with_lineart", opts['merge_with_lineart']??tmp["AnyLineArtPreprocessor_aux"].defaults['merge_with_lineart'])
super.$$link("resolution", opts['resolution']??tmp["AnyLineArtPreprocessor_aux"].defaults['resolution'])
super.$$link("lineart_lower_bound", opts['lineart_lower_bound']??tmp["AnyLineArtPreprocessor_aux"].defaults['lineart_lower_bound'])
super.$$link("lineart_upper_bound", opts['lineart_upper_bound']??tmp["AnyLineArtPreprocessor_aux"].defaults['lineart_upper_bound'])
super.$$link("object_min_size", opts['object_min_size']??tmp["AnyLineArtPreprocessor_aux"].defaults['object_min_size'])
super.$$link("object_connectivity", opts['object_connectivity']??tmp["AnyLineArtPreprocessor_aux"].defaults['object_connectivity'])
}

        static defaults = {
    'merge_with_lineart':  "lineart_standard",
'resolution':  1280,
'lineart_lower_bound':  0,
'lineart_upper_bound':  1,
'object_min_size':  36,
'object_connectivity':  1
}
        protected override $$type(){
            return "AnyLineArtPreprocessor_aux"
        }
},

    /**
     * Zoe Depth Map from ControlNet Preprocessors/Normal and Depth Estimators
     * @desc 
    */
    "Zoe-DepthMapPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'resolution'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("resolution", opts['resolution']??tmp["Zoe-DepthMapPreprocessor"].defaults['resolution'])
}

        static defaults = {
    'resolution':  512
}
        protected override $$type(){
            return "Zoe-DepthMapPreprocessor"
        }
},

    /**
     * Metric3D Depth Map from ControlNet Preprocessors/Normal and Depth Estimators
     * @desc 
    */
    "Metric3D-DepthMapPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'backbone'(value : 'vit-small'|'vit-large'|'vit-giant2'| $dyn)  { super.$$link(1, value) } 
//set 'fx'(value : INT)  { super.$$link(2, value) } 
//set 'fy'(value : INT)  { super.$$link(3, value) } 
//set 'resolution'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.backbone default: "vit-small"
		 * @param opts.fx default: 1000 max: 16384 min: 1
		 * @param opts.fy default: 1000 max: 16384 min: 1
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'backbone'?: 'vit-small'|'vit-large'|'vit-giant2'| $dyn,'fx'?: INT,'fy'?: INT,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("backbone", opts['backbone']??tmp["Metric3D-DepthMapPreprocessor"].defaults['backbone'])
super.$$link("fx", opts['fx']??tmp["Metric3D-DepthMapPreprocessor"].defaults['fx'])
super.$$link("fy", opts['fy']??tmp["Metric3D-DepthMapPreprocessor"].defaults['fy'])
super.$$link("resolution", opts['resolution']??tmp["Metric3D-DepthMapPreprocessor"].defaults['resolution'])
}

        static defaults = {
    'backbone':  "vit-small",
'fx':  1000,
'fy':  1000,
'resolution':  512
}
        protected override $$type(){
            return "Metric3D-DepthMapPreprocessor"
        }
},

    /**
     * Metric3D Normal Map from ControlNet Preprocessors/Normal and Depth Estimators
     * @desc 
    */
    "Metric3D-NormalMapPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'backbone'(value : 'vit-small'|'vit-large'|'vit-giant2'| $dyn)  { super.$$link(1, value) } 
//set 'fx'(value : INT)  { super.$$link(2, value) } 
//set 'fy'(value : INT)  { super.$$link(3, value) } 
//set 'resolution'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.backbone default: "vit-small"
		 * @param opts.fx default: 1000 max: 16384 min: 1
		 * @param opts.fy default: 1000 max: 16384 min: 1
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'backbone'?: 'vit-small'|'vit-large'|'vit-giant2'| $dyn,'fx'?: INT,'fy'?: INT,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("backbone", opts['backbone']??tmp["Metric3D-NormalMapPreprocessor"].defaults['backbone'])
super.$$link("fx", opts['fx']??tmp["Metric3D-NormalMapPreprocessor"].defaults['fx'])
super.$$link("fy", opts['fy']??tmp["Metric3D-NormalMapPreprocessor"].defaults['fy'])
super.$$link("resolution", opts['resolution']??tmp["Metric3D-NormalMapPreprocessor"].defaults['resolution'])
}

        static defaults = {
    'backbone':  "vit-small",
'fx':  1000,
'fy':  1000,
'resolution':  512
}
        protected override $$type(){
            return "Metric3D-NormalMapPreprocessor"
        }
},

    /**
     * DWPose Estimator from ControlNet Preprocessors/Faces and Poses Estimators
     * @desc 
    */
    "DWPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'detect_hand'(value : 'enable'|'disable'| $dyn)  { super.$$link(1, value) } 
//set 'detect_body'(value : 'enable'|'disable'| $dyn)  { super.$$link(2, value) } 
//set 'detect_face'(value : 'enable'|'disable'| $dyn)  { super.$$link(3, value) } 
//set 'resolution'(value : INT)  { super.$$link(4, value) } 
//set 'bbox_detector'(value : 'yolox_l.torchscript.pt'|'yolox_l.onnx'|'yolo_nas_l_fp16.onnx'|'yolo_nas_m_fp16.onnx'|'yolo_nas_s_fp16.onnx'| $dyn)  { super.$$link(5, value) } 
//set 'pose_estimator'(value : 'dw-ll_ucoco_384_bs5.torchscript.pt'|'dw-ll_ucoco_384.onnx'|'dw-ll_ucoco.onnx'| $dyn)  { super.$$link(6, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'POSE_KEYPOINT'() : POSE_KEYPOINT { return [this.$uid.toString(), 1]  as unknown as POSE_KEYPOINT; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.detect_hand default: "enable"
		 * @param opts.detect_body default: "enable"
		 * @param opts.detect_face default: "enable"
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64
		 * @param opts.bbox_detector default: "yolox_l.onnx"
		 * @param opts.pose_estimator default: "dw-ll_ucoco_384_bs5.torchscript.pt"}
        */
        constructor(opts:{
            'image': IMAGE,'detect_hand'?: 'enable'|'disable'| $dyn,'detect_body'?: 'enable'|'disable'| $dyn,'detect_face'?: 'enable'|'disable'| $dyn,'resolution'?: INT,'bbox_detector'?: 'yolox_l.torchscript.pt'|'yolox_l.onnx'|'yolo_nas_l_fp16.onnx'|'yolo_nas_m_fp16.onnx'|'yolo_nas_s_fp16.onnx'| $dyn,'pose_estimator'?: 'dw-ll_ucoco_384_bs5.torchscript.pt'|'dw-ll_ucoco_384.onnx'|'dw-ll_ucoco.onnx'| $dyn
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("detect_hand", opts['detect_hand']??tmp["DWPreprocessor"].defaults['detect_hand'])
super.$$link("detect_body", opts['detect_body']??tmp["DWPreprocessor"].defaults['detect_body'])
super.$$link("detect_face", opts['detect_face']??tmp["DWPreprocessor"].defaults['detect_face'])
super.$$link("resolution", opts['resolution']??tmp["DWPreprocessor"].defaults['resolution'])
super.$$link("bbox_detector", opts['bbox_detector']??tmp["DWPreprocessor"].defaults['bbox_detector'])
super.$$link("pose_estimator", opts['pose_estimator']??tmp["DWPreprocessor"].defaults['pose_estimator'])
}

        static defaults = {
    'detect_hand':  "enable",
'detect_body':  "enable",
'detect_face':  "enable",
'resolution':  512,
'bbox_detector':  "yolox_l.onnx",
'pose_estimator':  "dw-ll_ucoco_384_bs5.torchscript.pt"
}
        protected override $$type(){
            return "DWPreprocessor"
        }
},

    /**
     * AnimalPose Estimator (AP10K) from ControlNet Preprocessors/Faces and Poses Estimators
     * @desc 
    */
    "AnimalPosePreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'bbox_detector'(value : 'yolox_l.torchscript.pt'|'yolox_l.onnx'|'yolo_nas_l_fp16.onnx'|'yolo_nas_m_fp16.onnx'|'yolo_nas_s_fp16.onnx'| $dyn)  { super.$$link(1, value) } 
//set 'pose_estimator'(value : 'rtmpose-m_ap10k_256_bs5.torchscript.pt'|'rtmpose-m_ap10k_256.onnx'| $dyn)  { super.$$link(2, value) } 
//set 'resolution'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'POSE_KEYPOINT'() : POSE_KEYPOINT { return [this.$uid.toString(), 1]  as unknown as POSE_KEYPOINT; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.bbox_detector default: "yolox_l.torchscript.pt"
		 * @param opts.pose_estimator default: "rtmpose-m_ap10k_256_bs5.torchscript.pt"
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'bbox_detector'?: 'yolox_l.torchscript.pt'|'yolox_l.onnx'|'yolo_nas_l_fp16.onnx'|'yolo_nas_m_fp16.onnx'|'yolo_nas_s_fp16.onnx'| $dyn,'pose_estimator'?: 'rtmpose-m_ap10k_256_bs5.torchscript.pt'|'rtmpose-m_ap10k_256.onnx'| $dyn,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("bbox_detector", opts['bbox_detector']??tmp["AnimalPosePreprocessor"].defaults['bbox_detector'])
super.$$link("pose_estimator", opts['pose_estimator']??tmp["AnimalPosePreprocessor"].defaults['pose_estimator'])
super.$$link("resolution", opts['resolution']??tmp["AnimalPosePreprocessor"].defaults['resolution'])
}

        static defaults = {
    'bbox_detector':  "yolox_l.torchscript.pt",
'pose_estimator':  "rtmpose-m_ap10k_256_bs5.torchscript.pt",
'resolution':  512
}
        protected override $$type(){
            return "AnimalPosePreprocessor"
        }
},

    /**
     * HED Soft-Edge Lines from ControlNet Preprocessors/Line Extractors
     * @desc 
    */
    "HEDPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'safe'(value : 'enable'|'disable'| $dyn)  { super.$$link(1, value) } 
//set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.safe default: "enable"
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'safe'?: 'enable'|'disable'| $dyn,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("safe", opts['safe']??tmp["HEDPreprocessor"].defaults['safe'])
super.$$link("resolution", opts['resolution']??tmp["HEDPreprocessor"].defaults['resolution'])
}

        static defaults = {
    'safe':  "enable",
'resolution':  512
}
        protected override $$type(){
            return "HEDPreprocessor"
        }
},

    /**
     * Fake Scribble Lines (aka scribble_hed) from ControlNet Preprocessors/Line Extractors
     * @desc 
    */
    "FakeScribblePreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'safe'(value : 'enable'|'disable'| $dyn)  { super.$$link(1, value) } 
//set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.safe default: "enable"
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'safe'?: 'enable'|'disable'| $dyn,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("safe", opts['safe']??tmp["FakeScribblePreprocessor"].defaults['safe'])
super.$$link("resolution", opts['resolution']??tmp["FakeScribblePreprocessor"].defaults['resolution'])
}

        static defaults = {
    'safe':  "enable",
'resolution':  512
}
        protected override $$type(){
            return "FakeScribblePreprocessor"
        }
},

    /**
     * Color Pallete from ControlNet Preprocessors/T2IAdapter-only
     * @desc 
    */
    "ColorPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'resolution'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("resolution", opts['resolution']??tmp["ColorPreprocessor"].defaults['resolution'])
}

        static defaults = {
    'resolution':  512
}
        protected override $$type(){
            return "ColorPreprocessor"
        }
},

    /**
     * MeshGraphormer Hand Refiner from ControlNet Preprocessors/Normal and Depth Estimators
     * @desc 
    */
    "MeshGraphormer-DepthMapPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'mask_bbox_padding'(value : INT)  { super.$$link(1, value) } 
//set 'resolution'(value : INT)  { super.$$link(2, value) } 
//set 'mask_type'(value : 'based_on_depth'|'tight_bboxes'|'original'| $dyn)  { super.$$link(3, value) } 
//set 'mask_expand'(value : INT)  { super.$$link(4, value) } 
//set 'rand_seed'(value : INT)  { super.$$link(5, value) } 
//set 'detect_thr'(value : FLOAT)  { super.$$link(6, value) } 
//set 'presence_thr'(value : FLOAT)  { super.$$link(7, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'INPAINTING_MASK'() : MASK { return [this.$uid.toString(), 1]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.mask_bbox_padding default: 30
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64
		 * @param opts.mask_type default: "based_on_depth"
		 * @param opts.mask_expand default: 5 max: 16384 min: -16384 step: 1
		 * @param opts.rand_seed default: 88
		 * @param opts.detect_thr default: 0.6 step: 0.01
		 * @param opts.presence_thr default: 0.6 step: 0.01}
        */
        constructor(opts:{
            'image': IMAGE,'mask_bbox_padding'?: INT,'resolution'?: INT,'mask_type'?: 'based_on_depth'|'tight_bboxes'|'original'| $dyn,'mask_expand'?: INT,'rand_seed'?: INT,'detect_thr'?: FLOAT,'presence_thr'?: FLOAT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("mask_bbox_padding", opts['mask_bbox_padding']??tmp["MeshGraphormer-DepthMapPreprocessor"].defaults['mask_bbox_padding'])
super.$$link("resolution", opts['resolution']??tmp["MeshGraphormer-DepthMapPreprocessor"].defaults['resolution'])
super.$$link("mask_type", opts['mask_type']??tmp["MeshGraphormer-DepthMapPreprocessor"].defaults['mask_type'])
super.$$link("mask_expand", opts['mask_expand']??tmp["MeshGraphormer-DepthMapPreprocessor"].defaults['mask_expand'])
super.$$link("rand_seed", opts['rand_seed']??tmp["MeshGraphormer-DepthMapPreprocessor"].defaults['rand_seed'])
super.$$link("detect_thr", opts['detect_thr']??tmp["MeshGraphormer-DepthMapPreprocessor"].defaults['detect_thr'])
super.$$link("presence_thr", opts['presence_thr']??tmp["MeshGraphormer-DepthMapPreprocessor"].defaults['presence_thr'])
}

        static defaults = {
    'mask_bbox_padding':  30,
'resolution':  512,
'mask_type':  "based_on_depth",
'mask_expand':  5,
'rand_seed':  88,
'detect_thr':  0.6,
'presence_thr':  0.6
}
        protected override $$type(){
            return "MeshGraphormer-DepthMapPreprocessor"
        }
},

    /**
     * MeshGraphormer Hand Refiner With External Detector from ControlNet Preprocessors/Normal and Depth Estimators
     * @desc 
    */
    "MeshGraphormer+ImpactDetector-DepthMapPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'bbox_detector'(value : BBOX_DETECTOR)  { super.$$link(1, value) } 
//set 'bbox_threshold'(value : FLOAT)  { super.$$link(2, value) } 
//set 'bbox_dilation'(value : INT)  { super.$$link(3, value) } 
//set 'bbox_crop_factor'(value : FLOAT)  { super.$$link(4, value) } 
//set 'drop_size'(value : INT)  { super.$$link(5, value) } 
//set 'mask_bbox_padding'(value : INT)  { super.$$link(6, value) } 
//set 'mask_type'(value : 'based_on_depth'|'tight_bboxes'|'original'| $dyn)  { super.$$link(7, value) } 
//set 'mask_expand'(value : INT)  { super.$$link(8, value) } 
//set 'rand_seed'(value : INT)  { super.$$link(9, value) } 
//set 'resolution'(value : INT)  { super.$$link(10, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'INPAINTING_MASK'() : MASK { return [this.$uid.toString(), 1]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.bbox_detector
		 * @param opts.bbox_threshold default: 0.5 step: 0.01
		 * @param opts.bbox_dilation default: 10 max: 512 min: -512 step: 1
		 * @param opts.bbox_crop_factor default: 3 max: 10 min: 1 step: 0.1
		 * @param opts.drop_size default: 10 max: 16384 min: 1 step: 1
		 * @param opts.mask_bbox_padding default: 30
		 * @param opts.mask_type default: "based_on_depth"
		 * @param opts.mask_expand default: 5 max: 16384 min: -16384 step: 1
		 * @param opts.rand_seed default: 88
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'bbox_detector': BBOX_DETECTOR,'bbox_threshold'?: FLOAT,'bbox_dilation'?: INT,'bbox_crop_factor'?: FLOAT,'drop_size'?: INT,'mask_bbox_padding'?: INT,'mask_type'?: 'based_on_depth'|'tight_bboxes'|'original'| $dyn,'mask_expand'?: INT,'rand_seed'?: INT,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("bbox_detector", opts['bbox_detector'])
super.$$link("bbox_threshold", opts['bbox_threshold']??tmp["MeshGraphormer+ImpactDetector-DepthMapPreprocessor"].defaults['bbox_threshold'])
super.$$link("bbox_dilation", opts['bbox_dilation']??tmp["MeshGraphormer+ImpactDetector-DepthMapPreprocessor"].defaults['bbox_dilation'])
super.$$link("bbox_crop_factor", opts['bbox_crop_factor']??tmp["MeshGraphormer+ImpactDetector-DepthMapPreprocessor"].defaults['bbox_crop_factor'])
super.$$link("drop_size", opts['drop_size']??tmp["MeshGraphormer+ImpactDetector-DepthMapPreprocessor"].defaults['drop_size'])
super.$$link("mask_bbox_padding", opts['mask_bbox_padding']??tmp["MeshGraphormer+ImpactDetector-DepthMapPreprocessor"].defaults['mask_bbox_padding'])
super.$$link("mask_type", opts['mask_type']??tmp["MeshGraphormer+ImpactDetector-DepthMapPreprocessor"].defaults['mask_type'])
super.$$link("mask_expand", opts['mask_expand']??tmp["MeshGraphormer+ImpactDetector-DepthMapPreprocessor"].defaults['mask_expand'])
super.$$link("rand_seed", opts['rand_seed']??tmp["MeshGraphormer+ImpactDetector-DepthMapPreprocessor"].defaults['rand_seed'])
super.$$link("resolution", opts['resolution']??tmp["MeshGraphormer+ImpactDetector-DepthMapPreprocessor"].defaults['resolution'])
}

        static defaults = {
    'bbox_threshold':  0.5,
'bbox_dilation':  10,
'bbox_crop_factor':  3,
'drop_size':  10,
'mask_bbox_padding':  30,
'mask_type':  "based_on_depth",
'mask_expand':  5,
'rand_seed':  88,
'resolution':  512
}
        protected override $$type(){
            return "MeshGraphormer+ImpactDetector-DepthMapPreprocessor"
        }
},

    /**
     * Image Luminance from ControlNet Preprocessors/Recolor
     * @desc 
    */
    "ImageLuminanceDetector" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'gamma_correction'(value : FLOAT)  { super.$$link(1, value) } 
//set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.gamma_correction default: 1 max: 2 min: 0.1 step: 0.001
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'gamma_correction'?: FLOAT,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("gamma_correction", opts['gamma_correction']??tmp["ImageLuminanceDetector"].defaults['gamma_correction'])
super.$$link("resolution", opts['resolution']??tmp["ImageLuminanceDetector"].defaults['resolution'])
}

        static defaults = {
    'gamma_correction':  1,
'resolution':  512
}
        protected override $$type(){
            return "ImageLuminanceDetector"
        }
},

    /**
     * Image Intensity from ControlNet Preprocessors/Recolor
     * @desc 
    */
    "ImageIntensityDetector" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'gamma_correction'(value : FLOAT)  { super.$$link(1, value) } 
//set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.gamma_correction default: 1 max: 2 min: 0.1 step: 0.001
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'gamma_correction'?: FLOAT,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("gamma_correction", opts['gamma_correction']??tmp["ImageIntensityDetector"].defaults['gamma_correction'])
super.$$link("resolution", opts['resolution']??tmp["ImageIntensityDetector"].defaults['resolution'])
}

        static defaults = {
    'gamma_correction':  1,
'resolution':  512
}
        protected override $$type(){
            return "ImageIntensityDetector"
        }
},

    /**
     * Realistic Lineart from ControlNet Preprocessors/Line Extractors
     * @desc 
    */
    "LineArtPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'coarse'(value : 'disable'|'enable'| $dyn)  { super.$$link(1, value) } 
//set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.coarse default: "disable"
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'coarse'?: 'disable'|'enable'| $dyn,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("coarse", opts['coarse']??tmp["LineArtPreprocessor"].defaults['coarse'])
super.$$link("resolution", opts['resolution']??tmp["LineArtPreprocessor"].defaults['resolution'])
}

        static defaults = {
    'coarse':  "disable",
'resolution':  512
}
        protected override $$type(){
            return "LineArtPreprocessor"
        }
},

    /**
     * MediaPipe Face Mesh from ControlNet Preprocessors/Faces and Poses Estimators
     * @desc 
    */
    "MediaPipe-FaceMeshPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'max_faces'(value : INT)  { super.$$link(1, value) } 
//set 'min_confidence'(value : FLOAT)  { super.$$link(2, value) } 
//set 'resolution'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.max_faces default: 10 max: 50 min: 1 step: 1
		 * @param opts.min_confidence default: 0.5 max: 1 min: 0.01 step: 0.01
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'max_faces'?: INT,'min_confidence'?: FLOAT,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("max_faces", opts['max_faces']??tmp["MediaPipe-FaceMeshPreprocessor"].defaults['max_faces'])
super.$$link("min_confidence", opts['min_confidence']??tmp["MediaPipe-FaceMeshPreprocessor"].defaults['min_confidence'])
super.$$link("resolution", opts['resolution']??tmp["MediaPipe-FaceMeshPreprocessor"].defaults['resolution'])
}

        static defaults = {
    'max_faces':  10,
'min_confidence':  0.5,
'resolution':  512
}
        protected override $$type(){
            return "MediaPipe-FaceMeshPreprocessor"
        }
},

    /**
     * Binary Lines from ControlNet Preprocessors/Line Extractors
     * @desc 
    */
    "BinaryPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'bin_threshold'(value : INT)  { super.$$link(1, value) } 
//set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.bin_threshold default: 100 step: 1
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'bin_threshold'?: INT,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("bin_threshold", opts['bin_threshold']??tmp["BinaryPreprocessor"].defaults['bin_threshold'])
super.$$link("resolution", opts['resolution']??tmp["BinaryPreprocessor"].defaults['resolution'])
}

        static defaults = {
    'bin_threshold':  100,
'resolution':  512
}
        protected override $$type(){
            return "BinaryPreprocessor"
        }
},

    /**
     * OneFormer COCO Segmentor from ControlNet Preprocessors/Semantic Segmentation
     * @desc 
    */
    "OneFormer-COCO-SemSegPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'resolution'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("resolution", opts['resolution']??tmp["OneFormer-COCO-SemSegPreprocessor"].defaults['resolution'])
}

        static defaults = {
    'resolution':  512
}
        protected override $$type(){
            return "OneFormer-COCO-SemSegPreprocessor"
        }
},

    /**
     * OneFormer ADE20K Segmentor from ControlNet Preprocessors/Semantic Segmentation
     * @desc 
    */
    "OneFormer-ADE20K-SemSegPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'resolution'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("resolution", opts['resolution']??tmp["OneFormer-ADE20K-SemSegPreprocessor"].defaults['resolution'])
}

        static defaults = {
    'resolution':  512
}
        protected override $$type(){
            return "OneFormer-ADE20K-SemSegPreprocessor"
        }
},

    /**
     * Unimatch Optical Flow from ControlNet Preprocessors/Optical Flow
     * @desc 
    */
    "Unimatch_OptFlowPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'ckpt_name'(value : 'gmflow-scale1-mixdata.pth'|'gmflow-scale2-mixdata.pth'|'gmflow-scale2-regrefine6-mixdata.pth'| $dyn)  { super.$$link(1, value) } 
//set 'backward_flow'(value : BOOLEAN)  { super.$$link(2, value) } 
//set 'bidirectional_flow'(value : BOOLEAN)  { super.$$link(3, value) } 

        //Getters
        get 'OPTICAL_FLOW'() : OPTICAL_FLOW { return [this.$uid.toString(), 0]  as unknown as OPTICAL_FLOW; }
get 'PREVIEW_IMAGE'() : IMAGE { return [this.$uid.toString(), 1]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.ckpt_name default: "gmflow-scale2-regrefine6-mixdata.pth"
		 * @param opts.backward_flow
		 * @param opts.bidirectional_flow}
        */
        constructor(opts:{
            'image': IMAGE,'ckpt_name'?: 'gmflow-scale1-mixdata.pth'|'gmflow-scale2-mixdata.pth'|'gmflow-scale2-regrefine6-mixdata.pth'| $dyn,'backward_flow'?: BOOLEAN,'bidirectional_flow'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("ckpt_name", opts['ckpt_name']??tmp["Unimatch_OptFlowPreprocessor"].defaults['ckpt_name'])
super.$$link("backward_flow", opts['backward_flow']??tmp["Unimatch_OptFlowPreprocessor"].defaults['backward_flow'])
super.$$link("bidirectional_flow", opts['bidirectional_flow']??tmp["Unimatch_OptFlowPreprocessor"].defaults['bidirectional_flow'])
}

        static defaults = {
    'ckpt_name':  "gmflow-scale2-regrefine6-mixdata.pth",
'backward_flow':  false,
'bidirectional_flow':  false
}
        protected override $$type(){
            return "Unimatch_OptFlowPreprocessor"
        }
},

    /**
     * Mask Optical Flow (DragNUWA) from ControlNet Preprocessors/Optical Flow
     * @desc 
    */
    "MaskOptFlow" : class extends Node{
        //Setters
        //set 'optical_flow'(value : OPTICAL_FLOW)  { super.$$link(0, value) } 
//set 'mask'(value : MASK)  { super.$$link(1, value) } 

        //Getters
        get 'OPTICAL_FLOW'() : OPTICAL_FLOW { return [this.$uid.toString(), 0]  as unknown as OPTICAL_FLOW; }
get 'PREVIEW_IMAGE'() : IMAGE { return [this.$uid.toString(), 1]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.optical_flow
		 * @param opts.mask}
        */
        constructor(opts:{
            'optical_flow': OPTICAL_FLOW,'mask': MASK
        }){
            super(ctx);

            super.$$link("optical_flow", opts['optical_flow'])
super.$$link("mask", opts['mask'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "MaskOptFlow"
        }
},

    /**
     * Anime Face Segmentor from ControlNet Preprocessors/Semantic Segmentation
     * @desc 
    */
    "AnimeFace_SemSegPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'remove_background_using_abg'(value : BOOLEAN)  { super.$$link(1, value) } 
//set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'ABG_CHARACTER_MASK (MASK)'() : MASK { return [this.$uid.toString(), 1]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.remove_background_using_abg default: true
		 * @param opts.resolution default: 512 max: 512 min: 512 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'remove_background_using_abg'?: BOOLEAN,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("remove_background_using_abg", opts['remove_background_using_abg']??tmp["AnimeFace_SemSegPreprocessor"].defaults['remove_background_using_abg'])
super.$$link("resolution", opts['resolution']??tmp["AnimeFace_SemSegPreprocessor"].defaults['resolution'])
}

        static defaults = {
    'remove_background_using_abg':  true,
'resolution':  512
}
        protected override $$type(){
            return "AnimeFace_SemSegPreprocessor"
        }
},

    /**
     * Save Pose Keypoints from ControlNet Preprocessors/Pose Keypoint Postprocess
     * @desc 
    */
    "SavePoseKpsAsJsonFile" : class extends Node{
        //Setters
        //set 'pose_kps'(value : POSE_KEYPOINT)  { super.$$link(0, value) } 
//set 'filename_prefix'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.pose_kps
		 * @param opts.filename_prefix default: "PoseKeypoint"}
        */
        constructor(opts:{
            'pose_kps': POSE_KEYPOINT,'filename_prefix'?: STRING
        }){
            super(ctx);

            super.$$link("pose_kps", opts['pose_kps'])
super.$$link("filename_prefix", opts['filename_prefix']??tmp["SavePoseKpsAsJsonFile"].defaults['filename_prefix'])
}

        static defaults = {
    'filename_prefix':  "PoseKeypoint"
}
        protected override $$type(){
            return "SavePoseKpsAsJsonFile"
        }
},

    /**
     * Colorize Facial Parts from PoseKPS from ControlNet Preprocessors/Pose Keypoint Postprocess
     * @desc 
    */
    "FacialPartColoringFromPoseKps" : class extends Node{
        //Setters
        //set 'pose_kps'(value : POSE_KEYPOINT)  { super.$$link(0, value) } 
//set 'mode'(value : 'point'|'polygon'| $dyn)  { super.$$link(1, value) } 
//set 'skin'(value : STRING)  { super.$$link(2, value) } 
//set 'left_eye'(value : STRING)  { super.$$link(3, value) } 
//set 'right_eye'(value : STRING)  { super.$$link(4, value) } 
//set 'nose'(value : STRING)  { super.$$link(5, value) } 
//set 'upper_lip'(value : STRING)  { super.$$link(6, value) } 
//set 'inner_mouth'(value : STRING)  { super.$$link(7, value) } 
//set 'lower_lip'(value : STRING)  { super.$$link(8, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.pose_kps
		 * @param opts.mode default: "polygon"
		 * @param opts.skin default: "rgb(0, 153, 255)"
		 * @param opts.left_eye default: "rgb(0, 204, 153)"
		 * @param opts.right_eye default: "rgb(255, 153, 0)"
		 * @param opts.nose default: "rgb(255, 102, 255)"
		 * @param opts.upper_lip default: "rgb(102, 0, 51)"
		 * @param opts.inner_mouth default: "rgb(255, 204, 255)"
		 * @param opts.lower_lip default: "rgb(255, 0, 102)"}
        */
        constructor(opts:{
            'pose_kps': POSE_KEYPOINT,'mode'?: 'point'|'polygon'| $dyn,'skin'?: STRING,'left_eye'?: STRING,'right_eye'?: STRING,'nose'?: STRING,'upper_lip'?: STRING,'inner_mouth'?: STRING,'lower_lip'?: STRING
        }){
            super(ctx);

            super.$$link("pose_kps", opts['pose_kps'])
super.$$link("mode", opts['mode']??tmp["FacialPartColoringFromPoseKps"].defaults['mode'])
super.$$link("skin", opts['skin']??tmp["FacialPartColoringFromPoseKps"].defaults['skin'])
super.$$link("left_eye", opts['left_eye']??tmp["FacialPartColoringFromPoseKps"].defaults['left_eye'])
super.$$link("right_eye", opts['right_eye']??tmp["FacialPartColoringFromPoseKps"].defaults['right_eye'])
super.$$link("nose", opts['nose']??tmp["FacialPartColoringFromPoseKps"].defaults['nose'])
super.$$link("upper_lip", opts['upper_lip']??tmp["FacialPartColoringFromPoseKps"].defaults['upper_lip'])
super.$$link("inner_mouth", opts['inner_mouth']??tmp["FacialPartColoringFromPoseKps"].defaults['inner_mouth'])
super.$$link("lower_lip", opts['lower_lip']??tmp["FacialPartColoringFromPoseKps"].defaults['lower_lip'])
}

        static defaults = {
    'mode':  "polygon",
'skin':  "rgb(0, 153, 255)",
'left_eye':  "rgb(0, 204, 153)",
'right_eye':  "rgb(255, 153, 0)",
'nose':  "rgb(255, 102, 255)",
'upper_lip':  "rgb(102, 0, 51)",
'inner_mouth':  "rgb(255, 204, 255)",
'lower_lip':  "rgb(255, 0, 102)"
}
        protected override $$type(){
            return "FacialPartColoringFromPoseKps"
        }
},

    /**
     * Upper Body Tracking From PoseKps (InstanceDiffusion) from ControlNet Preprocessors/Pose Keypoint Postprocess
     * @desc 
    */
    "UpperBodyTrackingFromPoseKps" : class extends Node{
        //Setters
        //set 'pose_kps'(value : POSE_KEYPOINT)  { super.$$link(0, value) } 
//set 'id_include'(value : STRING)  { super.$$link(1, value) } 
//set 'Head_width_height'(value : STRING)  { super.$$link(2, value) } 
//set 'Neck_width_height'(value : STRING)  { super.$$link(3, value) } 
//set 'Shoulder_width_height'(value : STRING)  { super.$$link(4, value) } 
//set 'Torso_width_height'(value : STRING)  { super.$$link(5, value) } 
//set 'RArm_width_height'(value : STRING)  { super.$$link(6, value) } 
//set 'RForearm_width_height'(value : STRING)  { super.$$link(7, value) } 
//set 'LArm_width_height'(value : STRING)  { super.$$link(8, value) } 
//set 'LForearm_width_height'(value : STRING)  { super.$$link(9, value) } 

        //Getters
        get 'tracking'() : TRACKING { return [this.$uid.toString(), 0]  as unknown as TRACKING; }
get 'prompt'() : STRING { return [this.$uid.toString(), 1]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.pose_kps
		 * @param opts.id_include
		 * @param opts.Head_width_height default: "256, 256"
		 * @param opts.Neck_width_height default: "100, 100"
		 * @param opts.Shoulder_width_height
		 * @param opts.Torso_width_height default: "350, 450"
		 * @param opts.RArm_width_height default: "128, 256"
		 * @param opts.RForearm_width_height default: "128, 256"
		 * @param opts.LArm_width_height default: "128, 256"
		 * @param opts.LForearm_width_height default: "128, 256"}
        */
        constructor(opts:{
            'pose_kps': POSE_KEYPOINT,'id_include'?: STRING,'Head_width_height'?: STRING,'Neck_width_height'?: STRING,'Shoulder_width_height'?: STRING,'Torso_width_height'?: STRING,'RArm_width_height'?: STRING,'RForearm_width_height'?: STRING,'LArm_width_height'?: STRING,'LForearm_width_height'?: STRING
        }){
            super(ctx);

            super.$$link("pose_kps", opts['pose_kps'])
super.$$link("id_include", opts['id_include']??tmp["UpperBodyTrackingFromPoseKps"].defaults['id_include'])
super.$$link("Head_width_height", opts['Head_width_height']??tmp["UpperBodyTrackingFromPoseKps"].defaults['Head_width_height'])
super.$$link("Neck_width_height", opts['Neck_width_height']??tmp["UpperBodyTrackingFromPoseKps"].defaults['Neck_width_height'])
super.$$link("Shoulder_width_height", opts['Shoulder_width_height']??tmp["UpperBodyTrackingFromPoseKps"].defaults['Shoulder_width_height'])
super.$$link("Torso_width_height", opts['Torso_width_height']??tmp["UpperBodyTrackingFromPoseKps"].defaults['Torso_width_height'])
super.$$link("RArm_width_height", opts['RArm_width_height']??tmp["UpperBodyTrackingFromPoseKps"].defaults['RArm_width_height'])
super.$$link("RForearm_width_height", opts['RForearm_width_height']??tmp["UpperBodyTrackingFromPoseKps"].defaults['RForearm_width_height'])
super.$$link("LArm_width_height", opts['LArm_width_height']??tmp["UpperBodyTrackingFromPoseKps"].defaults['LArm_width_height'])
super.$$link("LForearm_width_height", opts['LForearm_width_height']??tmp["UpperBodyTrackingFromPoseKps"].defaults['LForearm_width_height'])
}

        static defaults = {
    'id_include':  "",
'Head_width_height':  "256, 256",
'Neck_width_height':  "100, 100",
'Shoulder_width_height':  "",
'Torso_width_height':  "350, 450",
'RArm_width_height':  "128, 256",
'RForearm_width_height':  "128, 256",
'LArm_width_height':  "128, 256",
'LForearm_width_height':  "128, 256"
}
        protected override $$type(){
            return "UpperBodyTrackingFromPoseKps"
        }
},

    /**
     * Render Pose JSON (Human) from ControlNet Preprocessors/Pose Keypoint Postprocess
     * @desc 
    */
    "RenderPeopleKps" : class extends Node{
        //Setters
        //set 'kps'(value : POSE_KEYPOINT)  { super.$$link(0, value) } 
//set 'render_body'(value : BOOLEAN)  { super.$$link(1, value) } 
//set 'render_hand'(value : BOOLEAN)  { super.$$link(2, value) } 
//set 'render_face'(value : BOOLEAN)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.kps
		 * @param opts.render_body default: true
		 * @param opts.render_hand default: true
		 * @param opts.render_face default: true}
        */
        constructor(opts:{
            'kps': POSE_KEYPOINT,'render_body'?: BOOLEAN,'render_hand'?: BOOLEAN,'render_face'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("kps", opts['kps'])
super.$$link("render_body", opts['render_body']??tmp["RenderPeopleKps"].defaults['render_body'])
super.$$link("render_hand", opts['render_hand']??tmp["RenderPeopleKps"].defaults['render_hand'])
super.$$link("render_face", opts['render_face']??tmp["RenderPeopleKps"].defaults['render_face'])
}

        static defaults = {
    'render_body':  true,
'render_hand':  true,
'render_face':  true
}
        protected override $$type(){
            return "RenderPeopleKps"
        }
},

    /**
     * Render Pose JSON (Animal) from ControlNet Preprocessors/Pose Keypoint Postprocess
     * @desc 
    */
    "RenderAnimalKps" : class extends Node{
        //Setters
        //set 'kps'(value : POSE_KEYPOINT)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.kps}
        */
        constructor(opts:{
            'kps': POSE_KEYPOINT
        }){
            super(ctx);

            super.$$link("kps", opts['kps'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "RenderAnimalKps"
        }
},

    /**
     * Content Shuffle from ControlNet Preprocessors/T2IAdapter-only
     * @desc 
    */
    "ShufflePreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'resolution'(value : INT)  { super.$$link(1, value) } 
//set 'seed'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64
		 * @param opts.seed}
        */
        constructor(opts:{
            'image': IMAGE,'resolution'?: INT,'seed'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("resolution", opts['resolution']??tmp["ShufflePreprocessor"].defaults['resolution'])
super.$$link("seed", opts['seed']??tmp["ShufflePreprocessor"].defaults['seed'])
}

        static defaults = {
    'resolution':  512,
'seed':  0
}
        protected override $$type(){
            return "ShufflePreprocessor"
        }
},

    /**
     * Canny Edge from ControlNet Preprocessors/Line Extractors
     * @desc 
    */
    "CannyEdgePreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'low_threshold'(value : INT)  { super.$$link(1, value) } 
//set 'high_threshold'(value : INT)  { super.$$link(2, value) } 
//set 'resolution'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.low_threshold default: 100 step: 1
		 * @param opts.high_threshold default: 200 step: 1
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'low_threshold'?: INT,'high_threshold'?: INT,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("low_threshold", opts['low_threshold']??tmp["CannyEdgePreprocessor"].defaults['low_threshold'])
super.$$link("high_threshold", opts['high_threshold']??tmp["CannyEdgePreprocessor"].defaults['high_threshold'])
super.$$link("resolution", opts['resolution']??tmp["CannyEdgePreprocessor"].defaults['resolution'])
}

        static defaults = {
    'low_threshold':  100,
'high_threshold':  200,
'resolution':  512
}
        protected override $$type(){
            return "CannyEdgePreprocessor"
        }
},

    /**
     * OpenPose Pose from ControlNet Preprocessors/Faces and Poses Estimators
     * @desc 
    */
    "OpenposePreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'detect_hand'(value : 'enable'|'disable'| $dyn)  { super.$$link(1, value) } 
//set 'detect_body'(value : 'enable'|'disable'| $dyn)  { super.$$link(2, value) } 
//set 'detect_face'(value : 'enable'|'disable'| $dyn)  { super.$$link(3, value) } 
//set 'resolution'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'POSE_KEYPOINT'() : POSE_KEYPOINT { return [this.$uid.toString(), 1]  as unknown as POSE_KEYPOINT; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.detect_hand default: "enable"
		 * @param opts.detect_body default: "enable"
		 * @param opts.detect_face default: "enable"
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'detect_hand'?: 'enable'|'disable'| $dyn,'detect_body'?: 'enable'|'disable'| $dyn,'detect_face'?: 'enable'|'disable'| $dyn,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("detect_hand", opts['detect_hand']??tmp["OpenposePreprocessor"].defaults['detect_hand'])
super.$$link("detect_body", opts['detect_body']??tmp["OpenposePreprocessor"].defaults['detect_body'])
super.$$link("detect_face", opts['detect_face']??tmp["OpenposePreprocessor"].defaults['detect_face'])
super.$$link("resolution", opts['resolution']??tmp["OpenposePreprocessor"].defaults['resolution'])
}

        static defaults = {
    'detect_hand':  "enable",
'detect_body':  "enable",
'detect_face':  "enable",
'resolution':  512
}
        protected override $$type(){
            return "OpenposePreprocessor"
        }
},

    /**
     * Depth Anything from ControlNet Preprocessors/Normal and Depth Estimators
     * @desc 
    */
    "DepthAnythingPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'ckpt_name'(value : 'depth_anything_vitl14.pth'|'depth_anything_vitb14.pth'|'depth_anything_vits14.pth'| $dyn)  { super.$$link(1, value) } 
//set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.ckpt_name default: "depth_anything_vitl14.pth"
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'ckpt_name'?: 'depth_anything_vitl14.pth'|'depth_anything_vitb14.pth'|'depth_anything_vits14.pth'| $dyn,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("ckpt_name", opts['ckpt_name']??tmp["DepthAnythingPreprocessor"].defaults['ckpt_name'])
super.$$link("resolution", opts['resolution']??tmp["DepthAnythingPreprocessor"].defaults['resolution'])
}

        static defaults = {
    'ckpt_name':  "depth_anything_vitl14.pth",
'resolution':  512
}
        protected override $$type(){
            return "DepthAnythingPreprocessor"
        }
},

    /**
     * Zoe Depth Anything from ControlNet Preprocessors/Normal and Depth Estimators
     * @desc 
    */
    "Zoe_DepthAnythingPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'environment'(value : 'indoor'|'outdoor'| $dyn)  { super.$$link(1, value) } 
//set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.environment default: "indoor"
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'environment'?: 'indoor'|'outdoor'| $dyn,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("environment", opts['environment']??tmp["Zoe_DepthAnythingPreprocessor"].defaults['environment'])
super.$$link("resolution", opts['resolution']??tmp["Zoe_DepthAnythingPreprocessor"].defaults['resolution'])
}

        static defaults = {
    'environment':  "indoor",
'resolution':  512
}
        protected override $$type(){
            return "Zoe_DepthAnythingPreprocessor"
        }
},

    /**
     * Depth Anything V2 - Relative from ControlNet Preprocessors/Normal and Depth Estimators
     * @desc 
    */
    "DepthAnythingV2Preprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'ckpt_name'(value : 'depth_anything_v2_vitg.pth'|'depth_anything_v2_vitl.pth'|'depth_anything_v2_vitb.pth'|'depth_anything_v2_vits.pth'| $dyn)  { super.$$link(1, value) } 
//set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.ckpt_name default: "depth_anything_v2_vitl.pth"
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'ckpt_name'?: 'depth_anything_v2_vitg.pth'|'depth_anything_v2_vitl.pth'|'depth_anything_v2_vitb.pth'|'depth_anything_v2_vits.pth'| $dyn,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("ckpt_name", opts['ckpt_name']??tmp["DepthAnythingV2Preprocessor"].defaults['ckpt_name'])
super.$$link("resolution", opts['resolution']??tmp["DepthAnythingV2Preprocessor"].defaults['resolution'])
}

        static defaults = {
    'ckpt_name':  "depth_anything_v2_vitl.pth",
'resolution':  512
}
        protected override $$type(){
            return "DepthAnythingV2Preprocessor"
        }
},

    /**
     * Diffusion Edge (batch size ↑ => speed ↑, VRAM ↑) from ControlNet Preprocessors/Line Extractors
     * @desc 
    */
    "DiffusionEdge_Preprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'environment'(value : 'indoor'|'urban'|'natrual'| $dyn)  { super.$$link(1, value) } 
//set 'patch_batch_size'(value : INT)  { super.$$link(2, value) } 
//set 'resolution'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.environment default: "indoor"
		 * @param opts.patch_batch_size default: 4 max: 16 min: 1
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'environment'?: 'indoor'|'urban'|'natrual'| $dyn,'patch_batch_size'?: INT,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("environment", opts['environment']??tmp["DiffusionEdge_Preprocessor"].defaults['environment'])
super.$$link("patch_batch_size", opts['patch_batch_size']??tmp["DiffusionEdge_Preprocessor"].defaults['patch_batch_size'])
super.$$link("resolution", opts['resolution']??tmp["DiffusionEdge_Preprocessor"].defaults['resolution'])
}

        static defaults = {
    'environment':  "indoor",
'patch_batch_size':  4,
'resolution':  512
}
        protected override $$type(){
            return "DiffusionEdge_Preprocessor"
        }
},

    /**
     * UniFormer Segmentor from ControlNet Preprocessors/Semantic Segmentation
     * @desc 
    */
    "UniFormer-SemSegPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'resolution'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("resolution", opts['resolution']??tmp["UniFormer-SemSegPreprocessor"].defaults['resolution'])
}

        static defaults = {
    'resolution':  512
}
        protected override $$type(){
            return "UniFormer-SemSegPreprocessor"
        }
},

    /**
     * Semantic Segmentor (legacy, alias for UniFormer) from ControlNet Preprocessors/Semantic Segmentation
     * @desc 
    */
    "SemSegPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'resolution'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("resolution", opts['resolution']??tmp["SemSegPreprocessor"].defaults['resolution'])
}

        static defaults = {
    'resolution':  512
}
        protected override $$type(){
            return "SemSegPreprocessor"
        }
},

    /**
     * LeReS Depth Map (enable boost for leres++) from ControlNet Preprocessors/Normal and Depth Estimators
     * @desc 
    */
    "LeReS-DepthMapPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'rm_nearest'(value : FLOAT)  { super.$$link(1, value) } 
//set 'rm_background'(value : FLOAT)  { super.$$link(2, value) } 
//set 'boost'(value : 'enable'|'disable'| $dyn)  { super.$$link(3, value) } 
//set 'resolution'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.rm_nearest step: 0.1
		 * @param opts.rm_background step: 0.1
		 * @param opts.boost default: "disable"
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'rm_nearest'?: FLOAT,'rm_background'?: FLOAT,'boost'?: 'enable'|'disable'| $dyn,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("rm_nearest", opts['rm_nearest']??tmp["LeReS-DepthMapPreprocessor"].defaults['rm_nearest'])
super.$$link("rm_background", opts['rm_background']??tmp["LeReS-DepthMapPreprocessor"].defaults['rm_background'])
super.$$link("boost", opts['boost']??tmp["LeReS-DepthMapPreprocessor"].defaults['boost'])
super.$$link("resolution", opts['resolution']??tmp["LeReS-DepthMapPreprocessor"].defaults['resolution'])
}

        static defaults = {
    'rm_nearest':  0,
'rm_background':  0,
'boost':  "disable",
'resolution':  512
}
        protected override $$type(){
            return "LeReS-DepthMapPreprocessor"
        }
},

    /**
     * Manga Lineart (aka lineart_anime_denoise) from ControlNet Preprocessors/Line Extractors
     * @desc 
    */
    "Manga2Anime_LineArt_Preprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'resolution'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("resolution", opts['resolution']??tmp["Manga2Anime_LineArt_Preprocessor"].defaults['resolution'])
}

        static defaults = {
    'resolution':  512
}
        protected override $$type(){
            return "Manga2Anime_LineArt_Preprocessor"
        }
},

    /**
     * MiDaS Normal Map from ControlNet Preprocessors/Normal and Depth Estimators
     * @desc 
    */
    "MiDaS-NormalMapPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'a'(value : FLOAT)  { super.$$link(1, value) } 
//set 'bg_threshold'(value : FLOAT)  { super.$$link(2, value) } 
//set 'resolution'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.a default: 6.283185307179586 step: 0.05
		 * @param opts.bg_threshold default: 0.1 step: 0.05
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'a'?: FLOAT,'bg_threshold'?: FLOAT,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("a", opts['a']??tmp["MiDaS-NormalMapPreprocessor"].defaults['a'])
super.$$link("bg_threshold", opts['bg_threshold']??tmp["MiDaS-NormalMapPreprocessor"].defaults['bg_threshold'])
super.$$link("resolution", opts['resolution']??tmp["MiDaS-NormalMapPreprocessor"].defaults['resolution'])
}

        static defaults = {
    'a':  6.283185307179586,
'bg_threshold':  0.1,
'resolution':  512
}
        protected override $$type(){
            return "MiDaS-NormalMapPreprocessor"
        }
},

    /**
     * MiDaS Depth Map from ControlNet Preprocessors/Normal and Depth Estimators
     * @desc 
    */
    "MiDaS-DepthMapPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'a'(value : FLOAT)  { super.$$link(1, value) } 
//set 'bg_threshold'(value : FLOAT)  { super.$$link(2, value) } 
//set 'resolution'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.a default: 6.283185307179586 step: 0.05
		 * @param opts.bg_threshold default: 0.1 step: 0.05
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'a'?: FLOAT,'bg_threshold'?: FLOAT,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("a", opts['a']??tmp["MiDaS-DepthMapPreprocessor"].defaults['a'])
super.$$link("bg_threshold", opts['bg_threshold']??tmp["MiDaS-DepthMapPreprocessor"].defaults['bg_threshold'])
super.$$link("resolution", opts['resolution']??tmp["MiDaS-DepthMapPreprocessor"].defaults['resolution'])
}

        static defaults = {
    'a':  6.283185307179586,
'bg_threshold':  0.1,
'resolution':  512
}
        protected override $$type(){
            return "MiDaS-DepthMapPreprocessor"
        }
},

    /**
     * Anime Lineart from ControlNet Preprocessors/Line Extractors
     * @desc 
    */
    "AnimeLineArtPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'resolution'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("resolution", opts['resolution']??tmp["AnimeLineArtPreprocessor"].defaults['resolution'])
}

        static defaults = {
    'resolution':  512
}
        protected override $$type(){
            return "AnimeLineArtPreprocessor"
        }
},

    /**
     * AIO Aux Preprocessor from ControlNet Preprocessors
     * @desc 
    */
    "AIO_Preprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'preprocessor'(value : 'none'|'TilePreprocessor'|'TTPlanet_TileGF_Preprocessor'|'TTPlanet_TileSimple_Preprocessor'|'BAE-NormalMapPreprocessor'|'DensePosePreprocessor'|'PiDiNetPreprocessor'|'ScribblePreprocessor'|'Scribble_XDoG_Preprocessor'|'Scribble_PiDiNet_Preprocessor'|'SAMPreprocessor'|'LineartStandardPreprocessor'|'DSINE-NormalMapPreprocessor'|'TEEDPreprocessor'|'M-LSDPreprocessor'|'AnyLineArtPreprocessor_aux'|'Zoe-DepthMapPreprocessor'|'Metric3D-DepthMapPreprocessor'|'Metric3D-NormalMapPreprocessor'|'DWPreprocessor'|'AnimalPosePreprocessor'|'HEDPreprocessor'|'FakeScribblePreprocessor'|'ColorPreprocessor'|'MeshGraphormer-DepthMapPreprocessor'|'MeshGraphormer+ImpactDetector-DepthMapPreprocessor'|'ImageLuminanceDetector'|'ImageIntensityDetector'|'LineArtPreprocessor'|'MediaPipe-FaceMeshPreprocessor'|'BinaryPreprocessor'|'OneFormer-COCO-SemSegPreprocessor'|'OneFormer-ADE20K-SemSegPreprocessor'|'Unimatch_OptFlowPreprocessor'|'MaskOptFlow'|'AnimeFace_SemSegPreprocessor'|'SavePoseKpsAsJsonFile'|'FacialPartColoringFromPoseKps'|'UpperBodyTrackingFromPoseKps'|'RenderPeopleKps'|'RenderAnimalKps'|'ShufflePreprocessor'|'CannyEdgePreprocessor'|'OpenposePreprocessor'|'DepthAnythingPreprocessor'|'Zoe_DepthAnythingPreprocessor'|'DepthAnythingV2Preprocessor'|'DiffusionEdge_Preprocessor'|'UniFormer-SemSegPreprocessor'|'SemSegPreprocessor'|'LeReS-DepthMapPreprocessor'|'Manga2Anime_LineArt_Preprocessor'|'MiDaS-NormalMapPreprocessor'|'MiDaS-DepthMapPreprocessor'|'AnimeLineArtPreprocessor'| $dyn)  { super.$$link(1, value) } 
//set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.preprocessor default: "none"
		 * @param opts.resolution default: 512 max: 16384 min: 64 step: 64}
        */
        constructor(opts:{
            'image': IMAGE,'preprocessor'?: 'none'|'TilePreprocessor'|'TTPlanet_TileGF_Preprocessor'|'TTPlanet_TileSimple_Preprocessor'|'BAE-NormalMapPreprocessor'|'DensePosePreprocessor'|'PiDiNetPreprocessor'|'ScribblePreprocessor'|'Scribble_XDoG_Preprocessor'|'Scribble_PiDiNet_Preprocessor'|'SAMPreprocessor'|'LineartStandardPreprocessor'|'DSINE-NormalMapPreprocessor'|'TEEDPreprocessor'|'M-LSDPreprocessor'|'AnyLineArtPreprocessor_aux'|'Zoe-DepthMapPreprocessor'|'Metric3D-DepthMapPreprocessor'|'Metric3D-NormalMapPreprocessor'|'DWPreprocessor'|'AnimalPosePreprocessor'|'HEDPreprocessor'|'FakeScribblePreprocessor'|'ColorPreprocessor'|'MeshGraphormer-DepthMapPreprocessor'|'MeshGraphormer+ImpactDetector-DepthMapPreprocessor'|'ImageLuminanceDetector'|'ImageIntensityDetector'|'LineArtPreprocessor'|'MediaPipe-FaceMeshPreprocessor'|'BinaryPreprocessor'|'OneFormer-COCO-SemSegPreprocessor'|'OneFormer-ADE20K-SemSegPreprocessor'|'Unimatch_OptFlowPreprocessor'|'MaskOptFlow'|'AnimeFace_SemSegPreprocessor'|'SavePoseKpsAsJsonFile'|'FacialPartColoringFromPoseKps'|'UpperBodyTrackingFromPoseKps'|'RenderPeopleKps'|'RenderAnimalKps'|'ShufflePreprocessor'|'CannyEdgePreprocessor'|'OpenposePreprocessor'|'DepthAnythingPreprocessor'|'Zoe_DepthAnythingPreprocessor'|'DepthAnythingV2Preprocessor'|'DiffusionEdge_Preprocessor'|'UniFormer-SemSegPreprocessor'|'SemSegPreprocessor'|'LeReS-DepthMapPreprocessor'|'Manga2Anime_LineArt_Preprocessor'|'MiDaS-NormalMapPreprocessor'|'MiDaS-DepthMapPreprocessor'|'AnimeLineArtPreprocessor'| $dyn,'resolution'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("preprocessor", opts['preprocessor']??tmp["AIO_Preprocessor"].defaults['preprocessor'])
super.$$link("resolution", opts['resolution']??tmp["AIO_Preprocessor"].defaults['resolution'])
}

        static defaults = {
    'preprocessor':  "none",
'resolution':  512
}
        protected override $$type(){
            return "AIO_Preprocessor"
        }
},

    /**
     * Preprocessor Selector from ControlNet Preprocessors
     * @desc 
    */
    "ControlNetPreprocessorSelector" : class extends Node{
        //Setters
        //set 'preprocessor'(value : 'none'|'TilePreprocessor'|'TTPlanet_TileGF_Preprocessor'|'TTPlanet_TileSimple_Preprocessor'|'BAE-NormalMapPreprocessor'|'DensePosePreprocessor'|'PiDiNetPreprocessor'|'ScribblePreprocessor'|'Scribble_XDoG_Preprocessor'|'Scribble_PiDiNet_Preprocessor'|'SAMPreprocessor'|'LineartStandardPreprocessor'|'DSINE-NormalMapPreprocessor'|'TEEDPreprocessor'|'M-LSDPreprocessor'|'AnyLineArtPreprocessor_aux'|'Zoe-DepthMapPreprocessor'|'Metric3D-DepthMapPreprocessor'|'Metric3D-NormalMapPreprocessor'|'DWPreprocessor'|'AnimalPosePreprocessor'|'HEDPreprocessor'|'FakeScribblePreprocessor'|'ColorPreprocessor'|'MeshGraphormer-DepthMapPreprocessor'|'MeshGraphormer+ImpactDetector-DepthMapPreprocessor'|'ImageLuminanceDetector'|'ImageIntensityDetector'|'LineArtPreprocessor'|'MediaPipe-FaceMeshPreprocessor'|'BinaryPreprocessor'|'OneFormer-COCO-SemSegPreprocessor'|'OneFormer-ADE20K-SemSegPreprocessor'|'Unimatch_OptFlowPreprocessor'|'MaskOptFlow'|'AnimeFace_SemSegPreprocessor'|'SavePoseKpsAsJsonFile'|'FacialPartColoringFromPoseKps'|'UpperBodyTrackingFromPoseKps'|'RenderPeopleKps'|'RenderAnimalKps'|'ShufflePreprocessor'|'CannyEdgePreprocessor'|'OpenposePreprocessor'|'DepthAnythingPreprocessor'|'Zoe_DepthAnythingPreprocessor'|'DepthAnythingV2Preprocessor'|'DiffusionEdge_Preprocessor'|'UniFormer-SemSegPreprocessor'|'SemSegPreprocessor'|'LeReS-DepthMapPreprocessor'|'Manga2Anime_LineArt_Preprocessor'|'MiDaS-NormalMapPreprocessor'|'MiDaS-DepthMapPreprocessor'|'AnimeLineArtPreprocessor'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'preprocessor'() : 'none'|'TilePreprocessor'|'TTPlanet_TileGF_Preprocessor'|'TTPlanet_TileSimple_Preprocessor'|'BAE-NormalMapPreprocessor'|'DensePosePreprocessor'|'PiDiNetPreprocessor'|'ScribblePreprocessor'|'Scribble_XDoG_Preprocessor'|'Scribble_PiDiNet_Preprocessor'|'SAMPreprocessor'|'LineartStandardPreprocessor'|'DSINE-NormalMapPreprocessor'|'TEEDPreprocessor'|'M-LSDPreprocessor'|'AnyLineArtPreprocessor_aux'|'Zoe-DepthMapPreprocessor'|'Metric3D-DepthMapPreprocessor'|'Metric3D-NormalMapPreprocessor'|'DWPreprocessor'|'AnimalPosePreprocessor'|'HEDPreprocessor'|'FakeScribblePreprocessor'|'ColorPreprocessor'|'MeshGraphormer-DepthMapPreprocessor'|'MeshGraphormer+ImpactDetector-DepthMapPreprocessor'|'ImageLuminanceDetector'|'ImageIntensityDetector'|'LineArtPreprocessor'|'MediaPipe-FaceMeshPreprocessor'|'BinaryPreprocessor'|'OneFormer-COCO-SemSegPreprocessor'|'OneFormer-ADE20K-SemSegPreprocessor'|'Unimatch_OptFlowPreprocessor'|'MaskOptFlow'|'AnimeFace_SemSegPreprocessor'|'SavePoseKpsAsJsonFile'|'FacialPartColoringFromPoseKps'|'UpperBodyTrackingFromPoseKps'|'RenderPeopleKps'|'RenderAnimalKps'|'ShufflePreprocessor'|'CannyEdgePreprocessor'|'OpenposePreprocessor'|'DepthAnythingPreprocessor'|'Zoe_DepthAnythingPreprocessor'|'DepthAnythingV2Preprocessor'|'DiffusionEdge_Preprocessor'|'UniFormer-SemSegPreprocessor'|'SemSegPreprocessor'|'LeReS-DepthMapPreprocessor'|'Manga2Anime_LineArt_Preprocessor'|'MiDaS-NormalMapPreprocessor'|'MiDaS-DepthMapPreprocessor'|'AnimeLineArtPreprocessor'| $dyn { return [this.$uid.toString(), 0]  as unknown as 'none'|'TilePreprocessor'|'TTPlanet_TileGF_Preprocessor'|'TTPlanet_TileSimple_Preprocessor'|'BAE-NormalMapPreprocessor'|'DensePosePreprocessor'|'PiDiNetPreprocessor'|'ScribblePreprocessor'|'Scribble_XDoG_Preprocessor'|'Scribble_PiDiNet_Preprocessor'|'SAMPreprocessor'|'LineartStandardPreprocessor'|'DSINE-NormalMapPreprocessor'|'TEEDPreprocessor'|'M-LSDPreprocessor'|'AnyLineArtPreprocessor_aux'|'Zoe-DepthMapPreprocessor'|'Metric3D-DepthMapPreprocessor'|'Metric3D-NormalMapPreprocessor'|'DWPreprocessor'|'AnimalPosePreprocessor'|'HEDPreprocessor'|'FakeScribblePreprocessor'|'ColorPreprocessor'|'MeshGraphormer-DepthMapPreprocessor'|'MeshGraphormer+ImpactDetector-DepthMapPreprocessor'|'ImageLuminanceDetector'|'ImageIntensityDetector'|'LineArtPreprocessor'|'MediaPipe-FaceMeshPreprocessor'|'BinaryPreprocessor'|'OneFormer-COCO-SemSegPreprocessor'|'OneFormer-ADE20K-SemSegPreprocessor'|'Unimatch_OptFlowPreprocessor'|'MaskOptFlow'|'AnimeFace_SemSegPreprocessor'|'SavePoseKpsAsJsonFile'|'FacialPartColoringFromPoseKps'|'UpperBodyTrackingFromPoseKps'|'RenderPeopleKps'|'RenderAnimalKps'|'ShufflePreprocessor'|'CannyEdgePreprocessor'|'OpenposePreprocessor'|'DepthAnythingPreprocessor'|'Zoe_DepthAnythingPreprocessor'|'DepthAnythingV2Preprocessor'|'DiffusionEdge_Preprocessor'|'UniFormer-SemSegPreprocessor'|'SemSegPreprocessor'|'LeReS-DepthMapPreprocessor'|'Manga2Anime_LineArt_Preprocessor'|'MiDaS-NormalMapPreprocessor'|'MiDaS-DepthMapPreprocessor'|'AnimeLineArtPreprocessor'| $dyn; }

        /**
          * Constructor
		 * @param opts.preprocessor}
        */
        constructor(opts:{
            'preprocessor': 'none'|'TilePreprocessor'|'TTPlanet_TileGF_Preprocessor'|'TTPlanet_TileSimple_Preprocessor'|'BAE-NormalMapPreprocessor'|'DensePosePreprocessor'|'PiDiNetPreprocessor'|'ScribblePreprocessor'|'Scribble_XDoG_Preprocessor'|'Scribble_PiDiNet_Preprocessor'|'SAMPreprocessor'|'LineartStandardPreprocessor'|'DSINE-NormalMapPreprocessor'|'TEEDPreprocessor'|'M-LSDPreprocessor'|'AnyLineArtPreprocessor_aux'|'Zoe-DepthMapPreprocessor'|'Metric3D-DepthMapPreprocessor'|'Metric3D-NormalMapPreprocessor'|'DWPreprocessor'|'AnimalPosePreprocessor'|'HEDPreprocessor'|'FakeScribblePreprocessor'|'ColorPreprocessor'|'MeshGraphormer-DepthMapPreprocessor'|'MeshGraphormer+ImpactDetector-DepthMapPreprocessor'|'ImageLuminanceDetector'|'ImageIntensityDetector'|'LineArtPreprocessor'|'MediaPipe-FaceMeshPreprocessor'|'BinaryPreprocessor'|'OneFormer-COCO-SemSegPreprocessor'|'OneFormer-ADE20K-SemSegPreprocessor'|'Unimatch_OptFlowPreprocessor'|'MaskOptFlow'|'AnimeFace_SemSegPreprocessor'|'SavePoseKpsAsJsonFile'|'FacialPartColoringFromPoseKps'|'UpperBodyTrackingFromPoseKps'|'RenderPeopleKps'|'RenderAnimalKps'|'ShufflePreprocessor'|'CannyEdgePreprocessor'|'OpenposePreprocessor'|'DepthAnythingPreprocessor'|'Zoe_DepthAnythingPreprocessor'|'DepthAnythingV2Preprocessor'|'DiffusionEdge_Preprocessor'|'UniFormer-SemSegPreprocessor'|'SemSegPreprocessor'|'LeReS-DepthMapPreprocessor'|'Manga2Anime_LineArt_Preprocessor'|'MiDaS-NormalMapPreprocessor'|'MiDaS-DepthMapPreprocessor'|'AnimeLineArtPreprocessor'| $dyn
        }){
            super(ctx);

            super.$$link("preprocessor", opts['preprocessor'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ControlNetPreprocessorSelector"
        }
},

    /**
     * Pixel Perfect Resolution from ControlNet Preprocessors
     * @desc 
    */
    "PixelPerfectResolution" : class extends Node{
        //Setters
        //set 'original_image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'image_gen_width'(value : INT)  { super.$$link(1, value) } 
//set 'image_gen_height'(value : INT)  { super.$$link(2, value) } 
//set 'resize_mode'(value : 'Just Resize'|'Crop and Resize'|'Resize and Fill'| $dyn)  { super.$$link(3, value) } 

        //Getters
        get 'RESOLUTION (INT)'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.original_image
		 * @param opts.image_gen_width default: 512 max: 8192 min: 64 step: 8
		 * @param opts.image_gen_height default: 512 max: 8192 min: 64 step: 8
		 * @param opts.resize_mode default: "Just Resize"}
        */
        constructor(opts:{
            'original_image': IMAGE,'image_gen_width'?: INT,'image_gen_height'?: INT,'resize_mode'?: 'Just Resize'|'Crop and Resize'|'Resize and Fill'| $dyn
        }){
            super(ctx);

            super.$$link("original_image", opts['original_image'])
super.$$link("image_gen_width", opts['image_gen_width']??tmp["PixelPerfectResolution"].defaults['image_gen_width'])
super.$$link("image_gen_height", opts['image_gen_height']??tmp["PixelPerfectResolution"].defaults['image_gen_height'])
super.$$link("resize_mode", opts['resize_mode']??tmp["PixelPerfectResolution"].defaults['resize_mode'])
}

        static defaults = {
    'image_gen_width':  512,
'image_gen_height':  512,
'resize_mode':  "Just Resize"
}
        protected override $$type(){
            return "PixelPerfectResolution"
        }
},

    /**
     * Generation Resolution From Image from ControlNet Preprocessors
     * @desc 
    */
    "ImageGenResolutionFromImage" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE_GEN_WIDTH (INT)'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }
get 'IMAGE_GEN_HEIGHT (INT)'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.image}
        */
        constructor(opts:{
            'image': IMAGE
        }){
            super(ctx);

            super.$$link("image", opts['image'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImageGenResolutionFromImage"
        }
},

    /**
     * Generation Resolution From Latent from ControlNet Preprocessors
     * @desc 
    */
    "ImageGenResolutionFromLatent" : class extends Node{
        //Setters
        //set 'latent'(value : LATENT)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE_GEN_WIDTH (INT)'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }
get 'IMAGE_GEN_HEIGHT (INT)'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.latent}
        */
        constructor(opts:{
            'latent': LATENT
        }){
            super(ctx);

            super.$$link("latent", opts['latent'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImageGenResolutionFromLatent"
        }
},

    /**
     * Enchance And Resize Hint Images from ControlNet Preprocessors
     * @desc 
    */
    "HintImageEnchance" : class extends Node{
        //Setters
        //set 'hint_image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'image_gen_width'(value : INT)  { super.$$link(1, value) } 
//set 'image_gen_height'(value : INT)  { super.$$link(2, value) } 
//set 'resize_mode'(value : 'Just Resize'|'Crop and Resize'|'Resize and Fill'| $dyn)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.hint_image
		 * @param opts.image_gen_width default: 512 max: 8192 min: 64 step: 8
		 * @param opts.image_gen_height default: 512 max: 8192 min: 64 step: 8
		 * @param opts.resize_mode default: "Just Resize"}
        */
        constructor(opts:{
            'hint_image': IMAGE,'image_gen_width'?: INT,'image_gen_height'?: INT,'resize_mode'?: 'Just Resize'|'Crop and Resize'|'Resize and Fill'| $dyn
        }){
            super(ctx);

            super.$$link("hint_image", opts['hint_image'])
super.$$link("image_gen_width", opts['image_gen_width']??tmp["HintImageEnchance"].defaults['image_gen_width'])
super.$$link("image_gen_height", opts['image_gen_height']??tmp["HintImageEnchance"].defaults['image_gen_height'])
super.$$link("resize_mode", opts['resize_mode']??tmp["HintImageEnchance"].defaults['resize_mode'])
}

        static defaults = {
    'image_gen_width':  512,
'image_gen_height':  512,
'resize_mode':  "Just Resize"
}
        protected override $$type(){
            return "HintImageEnchance"
        }
},

    /**
     * Apply SAL-VTON from Clothing - SAL-VTON
     * @desc 
    */
    "SALVTON_Apply" : class extends Node{
        //Setters
        //set 'garment'(value : IMAGE)  { super.$$link(0, value) } 
//set 'person'(value : IMAGE)  { super.$$link(1, value) } 
//set 'garment_mask'(value : IMAGE)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.garment
		 * @param opts.person
		 * @param opts.garment_mask}
        */
        constructor(opts:{
            'garment': IMAGE,'person': IMAGE,'garment_mask': IMAGE
        }){
            super(ctx);

            super.$$link("garment", opts['garment'])
super.$$link("person", opts['person'])
super.$$link("garment_mask", opts['garment_mask'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "SALVTON_Apply"
        }
},

    /**
     * Random Image From Directory from Clothing - SAL-VTON
     * @desc 
    */
    "SV_random" : class extends Node{
        //Setters
        //set 'folder_path'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'MASK'() : MASK { return [this.$uid.toString(), 1]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.folder_path default: "./input"}
        */
        constructor(opts:{
            'folder_path'?: STRING
        }){
            super(ctx);

            super.$$link("folder_path", opts['folder_path']??tmp["SV_random"].defaults['folder_path'])
}

        static defaults = {
    'folder_path':  "./input"
}
        protected override $$type(){
            return "SV_random"
        }
},

    /**
     * IPAdapter from ipadapter
     * @desc 
    */
    "IPAdapter" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
//set 'image'(value : IMAGE)  { super.$$link(2, value) } 
//set 'weight'(value : FLOAT)  { super.$$link(3, value) } 
//set 'start_at'(value : FLOAT)  { super.$$link(4, value) } 
//set 'end_at'(value : FLOAT)  { super.$$link(5, value) } 
//set 'weight_type'(value : 'standard'|'prompt is more important'|'style transfer'| $dyn)  { super.$$link(6, value) } 
//set 'attn_mask'(value : MASK)  { super.$$link(7, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.ipadapter
		 * @param opts.image
		 * @param opts.weight default: 1 max: 3 min: -1 step: 0.05
		 * @param opts.start_at step: 0.001
		 * @param opts.end_at default: 1 step: 0.001
		 * @param opts.weight_type
		 * @param opts.attn_mask}
        */
        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'image': IMAGE,'weight'?: FLOAT,'start_at'?: FLOAT,'end_at'?: FLOAT,'weight_type': 'standard'|'prompt is more important'|'style transfer'| $dyn,'attn_mask'?: MASK
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("ipadapter", opts['ipadapter'])
super.$$link("image", opts['image'])
super.$$link("weight", opts['weight']??tmp["IPAdapter"].defaults['weight'])
super.$$link("start_at", opts['start_at']??tmp["IPAdapter"].defaults['start_at'])
super.$$link("end_at", opts['end_at']??tmp["IPAdapter"].defaults['end_at'])
super.$$link("weight_type", opts['weight_type'])
super.$$link("attn_mask", opts['attn_mask'])
}

        static defaults = {
    'weight':  1,
'start_at':  0,
'end_at':  1
}
        protected override $$type(){
            return "IPAdapter"
        }
},

    /**
     * IPAdapter Advanced from ipadapter
     * @desc 
    */
    "IPAdapterAdvanced" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
//set 'image'(value : IMAGE)  { super.$$link(2, value) } 
//set 'weight'(value : FLOAT)  { super.$$link(3, value) } 
//set 'weight_type'(value : 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise'| $dyn)  { super.$$link(4, value) } 
//set 'combine_embeds'(value : 'concat'|'add'|'subtract'|'average'|'norm average'| $dyn)  { super.$$link(5, value) } 
//set 'start_at'(value : FLOAT)  { super.$$link(6, value) } 
//set 'end_at'(value : FLOAT)  { super.$$link(7, value) } 
//set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn)  { super.$$link(8, value) } 
//set 'image_negative'(value : IMAGE)  { super.$$link(9, value) } 
//set 'attn_mask'(value : MASK)  { super.$$link(10, value) } 
//set 'clip_vision'(value : CLIP_VISION)  { super.$$link(11, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.ipadapter
		 * @param opts.image
		 * @param opts.weight default: 1 max: 5 min: -1 step: 0.05
		 * @param opts.weight_type
		 * @param opts.combine_embeds
		 * @param opts.start_at step: 0.001
		 * @param opts.end_at default: 1 step: 0.001
		 * @param opts.embeds_scaling
		 * @param opts.image_negative
		 * @param opts.attn_mask
		 * @param opts.clip_vision}
        */
        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'image': IMAGE,'weight'?: FLOAT,'weight_type': 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise'| $dyn,'combine_embeds': 'concat'|'add'|'subtract'|'average'|'norm average'| $dyn,'start_at'?: FLOAT,'end_at'?: FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn,'image_negative'?: IMAGE,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("ipadapter", opts['ipadapter'])
super.$$link("image", opts['image'])
super.$$link("weight", opts['weight']??tmp["IPAdapterAdvanced"].defaults['weight'])
super.$$link("weight_type", opts['weight_type'])
super.$$link("combine_embeds", opts['combine_embeds'])
super.$$link("start_at", opts['start_at']??tmp["IPAdapterAdvanced"].defaults['start_at'])
super.$$link("end_at", opts['end_at']??tmp["IPAdapterAdvanced"].defaults['end_at'])
super.$$link("embeds_scaling", opts['embeds_scaling'])
super.$$link("image_negative", opts['image_negative'])
super.$$link("attn_mask", opts['attn_mask'])
super.$$link("clip_vision", opts['clip_vision'])
}

        static defaults = {
    'weight':  1,
'start_at':  0,
'end_at':  1
}
        protected override $$type(){
            return "IPAdapterAdvanced"
        }
},

    /**
     * IPAdapter Batch (Adv.) from ipadapter
     * @desc 
    */
    "IPAdapterBatch" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
//set 'image'(value : IMAGE)  { super.$$link(2, value) } 
//set 'weight'(value : FLOAT)  { super.$$link(3, value) } 
//set 'weight_type'(value : 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise'| $dyn)  { super.$$link(4, value) } 
//set 'start_at'(value : FLOAT)  { super.$$link(5, value) } 
//set 'end_at'(value : FLOAT)  { super.$$link(6, value) } 
//set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn)  { super.$$link(7, value) } 
//set 'encode_batch_size'(value : INT)  { super.$$link(8, value) } 
//set 'image_negative'(value : IMAGE)  { super.$$link(9, value) } 
//set 'attn_mask'(value : MASK)  { super.$$link(10, value) } 
//set 'clip_vision'(value : CLIP_VISION)  { super.$$link(11, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.ipadapter
		 * @param opts.image
		 * @param opts.weight default: 1 max: 5 min: -1 step: 0.05
		 * @param opts.weight_type
		 * @param opts.start_at step: 0.001
		 * @param opts.end_at default: 1 step: 0.001
		 * @param opts.embeds_scaling
		 * @param opts.encode_batch_size
		 * @param opts.image_negative
		 * @param opts.attn_mask
		 * @param opts.clip_vision}
        */
        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'image': IMAGE,'weight'?: FLOAT,'weight_type': 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise'| $dyn,'start_at'?: FLOAT,'end_at'?: FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn,'encode_batch_size'?: INT,'image_negative'?: IMAGE,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("ipadapter", opts['ipadapter'])
super.$$link("image", opts['image'])
super.$$link("weight", opts['weight']??tmp["IPAdapterBatch"].defaults['weight'])
super.$$link("weight_type", opts['weight_type'])
super.$$link("start_at", opts['start_at']??tmp["IPAdapterBatch"].defaults['start_at'])
super.$$link("end_at", opts['end_at']??tmp["IPAdapterBatch"].defaults['end_at'])
super.$$link("embeds_scaling", opts['embeds_scaling'])
super.$$link("encode_batch_size", opts['encode_batch_size']??tmp["IPAdapterBatch"].defaults['encode_batch_size'])
super.$$link("image_negative", opts['image_negative'])
super.$$link("attn_mask", opts['attn_mask'])
super.$$link("clip_vision", opts['clip_vision'])
}

        static defaults = {
    'weight':  1,
'start_at':  0,
'end_at':  1,
'encode_batch_size':  0
}
        protected override $$type(){
            return "IPAdapterBatch"
        }
},

    /**
     * IPAdapter FaceID from ipadapter/faceid
     * @desc 
    */
    "IPAdapterFaceID" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
//set 'image'(value : IMAGE)  { super.$$link(2, value) } 
//set 'weight'(value : FLOAT)  { super.$$link(3, value) } 
//set 'weight_faceidv2'(value : FLOAT)  { super.$$link(4, value) } 
//set 'weight_type'(value : 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise'| $dyn)  { super.$$link(5, value) } 
//set 'combine_embeds'(value : 'concat'|'add'|'subtract'|'average'|'norm average'| $dyn)  { super.$$link(6, value) } 
//set 'start_at'(value : FLOAT)  { super.$$link(7, value) } 
//set 'end_at'(value : FLOAT)  { super.$$link(8, value) } 
//set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn)  { super.$$link(9, value) } 
//set 'image_negative'(value : IMAGE)  { super.$$link(10, value) } 
//set 'attn_mask'(value : MASK)  { super.$$link(11, value) } 
//set 'clip_vision'(value : CLIP_VISION)  { super.$$link(12, value) } 
//set 'insightface'(value : INSIGHTFACE)  { super.$$link(13, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'face_image'() : IMAGE { return [this.$uid.toString(), 1]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.ipadapter
		 * @param opts.image
		 * @param opts.weight default: 1 max: 3 min: -1 step: 0.05
		 * @param opts.weight_faceidv2 default: 1 max: 5 min: -1 step: 0.05
		 * @param opts.weight_type
		 * @param opts.combine_embeds
		 * @param opts.start_at step: 0.001
		 * @param opts.end_at default: 1 step: 0.001
		 * @param opts.embeds_scaling
		 * @param opts.image_negative
		 * @param opts.attn_mask
		 * @param opts.clip_vision
		 * @param opts.insightface}
        */
        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'image': IMAGE,'weight'?: FLOAT,'weight_faceidv2'?: FLOAT,'weight_type': 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise'| $dyn,'combine_embeds': 'concat'|'add'|'subtract'|'average'|'norm average'| $dyn,'start_at'?: FLOAT,'end_at'?: FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn,'image_negative'?: IMAGE,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION,'insightface'?: INSIGHTFACE
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("ipadapter", opts['ipadapter'])
super.$$link("image", opts['image'])
super.$$link("weight", opts['weight']??tmp["IPAdapterFaceID"].defaults['weight'])
super.$$link("weight_faceidv2", opts['weight_faceidv2']??tmp["IPAdapterFaceID"].defaults['weight_faceidv2'])
super.$$link("weight_type", opts['weight_type'])
super.$$link("combine_embeds", opts['combine_embeds'])
super.$$link("start_at", opts['start_at']??tmp["IPAdapterFaceID"].defaults['start_at'])
super.$$link("end_at", opts['end_at']??tmp["IPAdapterFaceID"].defaults['end_at'])
super.$$link("embeds_scaling", opts['embeds_scaling'])
super.$$link("image_negative", opts['image_negative'])
super.$$link("attn_mask", opts['attn_mask'])
super.$$link("clip_vision", opts['clip_vision'])
super.$$link("insightface", opts['insightface'])
}

        static defaults = {
    'weight':  1,
'weight_faceidv2':  1,
'start_at':  0,
'end_at':  1
}
        protected override $$type(){
            return "IPAdapterFaceID"
        }
},

    /**
     * IPAdapter FaceID Kolors from ipadapter/faceid
     * @desc 
    */
    "IPAdapterFaceIDKolors" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
//set 'image'(value : IMAGE)  { super.$$link(2, value) } 
//set 'weight'(value : FLOAT)  { super.$$link(3, value) } 
//set 'weight_faceidv2'(value : FLOAT)  { super.$$link(4, value) } 
//set 'weight_kolors'(value : FLOAT)  { super.$$link(5, value) } 
//set 'weight_type'(value : 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise'| $dyn)  { super.$$link(6, value) } 
//set 'combine_embeds'(value : 'concat'|'add'|'subtract'|'average'|'norm average'| $dyn)  { super.$$link(7, value) } 
//set 'start_at'(value : FLOAT)  { super.$$link(8, value) } 
//set 'end_at'(value : FLOAT)  { super.$$link(9, value) } 
//set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn)  { super.$$link(10, value) } 
//set 'image_negative'(value : IMAGE)  { super.$$link(11, value) } 
//set 'attn_mask'(value : MASK)  { super.$$link(12, value) } 
//set 'clip_vision'(value : CLIP_VISION)  { super.$$link(13, value) } 
//set 'insightface'(value : INSIGHTFACE)  { super.$$link(14, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'face_image'() : IMAGE { return [this.$uid.toString(), 1]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.ipadapter
		 * @param opts.image
		 * @param opts.weight default: 1 max: 3 min: -1 step: 0.05
		 * @param opts.weight_faceidv2 default: 1 max: 5 min: -1 step: 0.05
		 * @param opts.weight_kolors default: 1 max: 5 min: -1 step: 0.05
		 * @param opts.weight_type
		 * @param opts.combine_embeds
		 * @param opts.start_at step: 0.001
		 * @param opts.end_at default: 1 step: 0.001
		 * @param opts.embeds_scaling
		 * @param opts.image_negative
		 * @param opts.attn_mask
		 * @param opts.clip_vision
		 * @param opts.insightface}
        */
        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'image': IMAGE,'weight'?: FLOAT,'weight_faceidv2'?: FLOAT,'weight_kolors'?: FLOAT,'weight_type': 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise'| $dyn,'combine_embeds': 'concat'|'add'|'subtract'|'average'|'norm average'| $dyn,'start_at'?: FLOAT,'end_at'?: FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn,'image_negative'?: IMAGE,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION,'insightface'?: INSIGHTFACE
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("ipadapter", opts['ipadapter'])
super.$$link("image", opts['image'])
super.$$link("weight", opts['weight']??tmp["IPAdapterFaceIDKolors"].defaults['weight'])
super.$$link("weight_faceidv2", opts['weight_faceidv2']??tmp["IPAdapterFaceIDKolors"].defaults['weight_faceidv2'])
super.$$link("weight_kolors", opts['weight_kolors']??tmp["IPAdapterFaceIDKolors"].defaults['weight_kolors'])
super.$$link("weight_type", opts['weight_type'])
super.$$link("combine_embeds", opts['combine_embeds'])
super.$$link("start_at", opts['start_at']??tmp["IPAdapterFaceIDKolors"].defaults['start_at'])
super.$$link("end_at", opts['end_at']??tmp["IPAdapterFaceIDKolors"].defaults['end_at'])
super.$$link("embeds_scaling", opts['embeds_scaling'])
super.$$link("image_negative", opts['image_negative'])
super.$$link("attn_mask", opts['attn_mask'])
super.$$link("clip_vision", opts['clip_vision'])
super.$$link("insightface", opts['insightface'])
}

        static defaults = {
    'weight':  1,
'weight_faceidv2':  1,
'weight_kolors':  1,
'start_at':  0,
'end_at':  1
}
        protected override $$type(){
            return "IPAdapterFaceIDKolors"
        }
},

    /**
     * IPAdapter FaceID Batch from ipadapter/faceid
     * @desc 
    */
    "IPAAdapterFaceIDBatch" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
//set 'image'(value : IMAGE)  { super.$$link(2, value) } 
//set 'weight'(value : FLOAT)  { super.$$link(3, value) } 
//set 'weight_faceidv2'(value : FLOAT)  { super.$$link(4, value) } 
//set 'weight_type'(value : 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise'| $dyn)  { super.$$link(5, value) } 
//set 'combine_embeds'(value : 'concat'|'add'|'subtract'|'average'|'norm average'| $dyn)  { super.$$link(6, value) } 
//set 'start_at'(value : FLOAT)  { super.$$link(7, value) } 
//set 'end_at'(value : FLOAT)  { super.$$link(8, value) } 
//set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn)  { super.$$link(9, value) } 
//set 'image_negative'(value : IMAGE)  { super.$$link(10, value) } 
//set 'attn_mask'(value : MASK)  { super.$$link(11, value) } 
//set 'clip_vision'(value : CLIP_VISION)  { super.$$link(12, value) } 
//set 'insightface'(value : INSIGHTFACE)  { super.$$link(13, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'face_image'() : IMAGE { return [this.$uid.toString(), 1]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.ipadapter
		 * @param opts.image
		 * @param opts.weight default: 1 max: 3 min: -1 step: 0.05
		 * @param opts.weight_faceidv2 default: 1 max: 5 min: -1 step: 0.05
		 * @param opts.weight_type
		 * @param opts.combine_embeds
		 * @param opts.start_at step: 0.001
		 * @param opts.end_at default: 1 step: 0.001
		 * @param opts.embeds_scaling
		 * @param opts.image_negative
		 * @param opts.attn_mask
		 * @param opts.clip_vision
		 * @param opts.insightface}
        */
        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'image': IMAGE,'weight'?: FLOAT,'weight_faceidv2'?: FLOAT,'weight_type': 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise'| $dyn,'combine_embeds': 'concat'|'add'|'subtract'|'average'|'norm average'| $dyn,'start_at'?: FLOAT,'end_at'?: FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn,'image_negative'?: IMAGE,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION,'insightface'?: INSIGHTFACE
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("ipadapter", opts['ipadapter'])
super.$$link("image", opts['image'])
super.$$link("weight", opts['weight']??tmp["IPAAdapterFaceIDBatch"].defaults['weight'])
super.$$link("weight_faceidv2", opts['weight_faceidv2']??tmp["IPAAdapterFaceIDBatch"].defaults['weight_faceidv2'])
super.$$link("weight_type", opts['weight_type'])
super.$$link("combine_embeds", opts['combine_embeds'])
super.$$link("start_at", opts['start_at']??tmp["IPAAdapterFaceIDBatch"].defaults['start_at'])
super.$$link("end_at", opts['end_at']??tmp["IPAAdapterFaceIDBatch"].defaults['end_at'])
super.$$link("embeds_scaling", opts['embeds_scaling'])
super.$$link("image_negative", opts['image_negative'])
super.$$link("attn_mask", opts['attn_mask'])
super.$$link("clip_vision", opts['clip_vision'])
super.$$link("insightface", opts['insightface'])
}

        static defaults = {
    'weight':  1,
'weight_faceidv2':  1,
'start_at':  0,
'end_at':  1
}
        protected override $$type(){
            return "IPAAdapterFaceIDBatch"
        }
},

    /**
     * IPAdapter Tiled from ipadapter/tiled
     * @desc 
    */
    "IPAdapterTiled" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
//set 'image'(value : IMAGE)  { super.$$link(2, value) } 
//set 'weight'(value : FLOAT)  { super.$$link(3, value) } 
//set 'weight_type'(value : 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise'| $dyn)  { super.$$link(4, value) } 
//set 'combine_embeds'(value : 'concat'|'add'|'subtract'|'average'|'norm average'| $dyn)  { super.$$link(5, value) } 
//set 'start_at'(value : FLOAT)  { super.$$link(6, value) } 
//set 'end_at'(value : FLOAT)  { super.$$link(7, value) } 
//set 'sharpening'(value : FLOAT)  { super.$$link(8, value) } 
//set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn)  { super.$$link(9, value) } 
//set 'image_negative'(value : IMAGE)  { super.$$link(10, value) } 
//set 'attn_mask'(value : MASK)  { super.$$link(11, value) } 
//set 'clip_vision'(value : CLIP_VISION)  { super.$$link(12, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'tiles'() : IMAGE { return [this.$uid.toString(), 1]  as unknown as IMAGE; }
get 'masks'() : MASK { return [this.$uid.toString(), 2]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.ipadapter
		 * @param opts.image
		 * @param opts.weight default: 1 max: 3 min: -1 step: 0.05
		 * @param opts.weight_type
		 * @param opts.combine_embeds
		 * @param opts.start_at step: 0.001
		 * @param opts.end_at default: 1 step: 0.001
		 * @param opts.sharpening step: 0.05
		 * @param opts.embeds_scaling
		 * @param opts.image_negative
		 * @param opts.attn_mask
		 * @param opts.clip_vision}
        */
        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'image': IMAGE,'weight'?: FLOAT,'weight_type': 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise'| $dyn,'combine_embeds': 'concat'|'add'|'subtract'|'average'|'norm average'| $dyn,'start_at'?: FLOAT,'end_at'?: FLOAT,'sharpening'?: FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn,'image_negative'?: IMAGE,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("ipadapter", opts['ipadapter'])
super.$$link("image", opts['image'])
super.$$link("weight", opts['weight']??tmp["IPAdapterTiled"].defaults['weight'])
super.$$link("weight_type", opts['weight_type'])
super.$$link("combine_embeds", opts['combine_embeds'])
super.$$link("start_at", opts['start_at']??tmp["IPAdapterTiled"].defaults['start_at'])
super.$$link("end_at", opts['end_at']??tmp["IPAdapterTiled"].defaults['end_at'])
super.$$link("sharpening", opts['sharpening']??tmp["IPAdapterTiled"].defaults['sharpening'])
super.$$link("embeds_scaling", opts['embeds_scaling'])
super.$$link("image_negative", opts['image_negative'])
super.$$link("attn_mask", opts['attn_mask'])
super.$$link("clip_vision", opts['clip_vision'])
}

        static defaults = {
    'weight':  1,
'start_at':  0,
'end_at':  1,
'sharpening':  0
}
        protected override $$type(){
            return "IPAdapterTiled"
        }
},

    /**
     * IPAdapter Tiled Batch from ipadapter/tiled
     * @desc 
    */
    "IPAdapterTiledBatch" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
//set 'image'(value : IMAGE)  { super.$$link(2, value) } 
//set 'weight'(value : FLOAT)  { super.$$link(3, value) } 
//set 'weight_type'(value : 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise'| $dyn)  { super.$$link(4, value) } 
//set 'start_at'(value : FLOAT)  { super.$$link(5, value) } 
//set 'end_at'(value : FLOAT)  { super.$$link(6, value) } 
//set 'sharpening'(value : FLOAT)  { super.$$link(7, value) } 
//set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn)  { super.$$link(8, value) } 
//set 'encode_batch_size'(value : INT)  { super.$$link(9, value) } 
//set 'image_negative'(value : IMAGE)  { super.$$link(10, value) } 
//set 'attn_mask'(value : MASK)  { super.$$link(11, value) } 
//set 'clip_vision'(value : CLIP_VISION)  { super.$$link(12, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'tiles'() : IMAGE { return [this.$uid.toString(), 1]  as unknown as IMAGE; }
get 'masks'() : MASK { return [this.$uid.toString(), 2]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.ipadapter
		 * @param opts.image
		 * @param opts.weight default: 1 max: 3 min: -1 step: 0.05
		 * @param opts.weight_type
		 * @param opts.start_at step: 0.001
		 * @param opts.end_at default: 1 step: 0.001
		 * @param opts.sharpening step: 0.05
		 * @param opts.embeds_scaling
		 * @param opts.encode_batch_size
		 * @param opts.image_negative
		 * @param opts.attn_mask
		 * @param opts.clip_vision}
        */
        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'image': IMAGE,'weight'?: FLOAT,'weight_type': 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise'| $dyn,'start_at'?: FLOAT,'end_at'?: FLOAT,'sharpening'?: FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn,'encode_batch_size'?: INT,'image_negative'?: IMAGE,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("ipadapter", opts['ipadapter'])
super.$$link("image", opts['image'])
super.$$link("weight", opts['weight']??tmp["IPAdapterTiledBatch"].defaults['weight'])
super.$$link("weight_type", opts['weight_type'])
super.$$link("start_at", opts['start_at']??tmp["IPAdapterTiledBatch"].defaults['start_at'])
super.$$link("end_at", opts['end_at']??tmp["IPAdapterTiledBatch"].defaults['end_at'])
super.$$link("sharpening", opts['sharpening']??tmp["IPAdapterTiledBatch"].defaults['sharpening'])
super.$$link("embeds_scaling", opts['embeds_scaling'])
super.$$link("encode_batch_size", opts['encode_batch_size']??tmp["IPAdapterTiledBatch"].defaults['encode_batch_size'])
super.$$link("image_negative", opts['image_negative'])
super.$$link("attn_mask", opts['attn_mask'])
super.$$link("clip_vision", opts['clip_vision'])
}

        static defaults = {
    'weight':  1,
'start_at':  0,
'end_at':  1,
'sharpening':  0,
'encode_batch_size':  0
}
        protected override $$type(){
            return "IPAdapterTiledBatch"
        }
},

    /**
     * IPAdapter Embeds from ipadapter/embeds
     * @desc 
    */
    "IPAdapterEmbeds" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
//set 'pos_embed'(value : EMBEDS)  { super.$$link(2, value) } 
//set 'weight'(value : FLOAT)  { super.$$link(3, value) } 
//set 'weight_type'(value : 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise'| $dyn)  { super.$$link(4, value) } 
//set 'start_at'(value : FLOAT)  { super.$$link(5, value) } 
//set 'end_at'(value : FLOAT)  { super.$$link(6, value) } 
//set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn)  { super.$$link(7, value) } 
//set 'neg_embed'(value : EMBEDS)  { super.$$link(8, value) } 
//set 'attn_mask'(value : MASK)  { super.$$link(9, value) } 
//set 'clip_vision'(value : CLIP_VISION)  { super.$$link(10, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.ipadapter
		 * @param opts.pos_embed
		 * @param opts.weight default: 1 max: 3 min: -1 step: 0.05
		 * @param opts.weight_type
		 * @param opts.start_at step: 0.001
		 * @param opts.end_at default: 1 step: 0.001
		 * @param opts.embeds_scaling
		 * @param opts.neg_embed
		 * @param opts.attn_mask
		 * @param opts.clip_vision}
        */
        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'pos_embed': EMBEDS,'weight'?: FLOAT,'weight_type': 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise'| $dyn,'start_at'?: FLOAT,'end_at'?: FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn,'neg_embed'?: EMBEDS,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("ipadapter", opts['ipadapter'])
super.$$link("pos_embed", opts['pos_embed'])
super.$$link("weight", opts['weight']??tmp["IPAdapterEmbeds"].defaults['weight'])
super.$$link("weight_type", opts['weight_type'])
super.$$link("start_at", opts['start_at']??tmp["IPAdapterEmbeds"].defaults['start_at'])
super.$$link("end_at", opts['end_at']??tmp["IPAdapterEmbeds"].defaults['end_at'])
super.$$link("embeds_scaling", opts['embeds_scaling'])
super.$$link("neg_embed", opts['neg_embed'])
super.$$link("attn_mask", opts['attn_mask'])
super.$$link("clip_vision", opts['clip_vision'])
}

        static defaults = {
    'weight':  1,
'start_at':  0,
'end_at':  1
}
        protected override $$type(){
            return "IPAdapterEmbeds"
        }
},

    /**
     * IPAdapter Embeds Batch from ipadapter/embeds
     * @desc 
    */
    "IPAdapterEmbedsBatch" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
//set 'pos_embed'(value : EMBEDS)  { super.$$link(2, value) } 
//set 'weight'(value : FLOAT)  { super.$$link(3, value) } 
//set 'weight_type'(value : 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise'| $dyn)  { super.$$link(4, value) } 
//set 'start_at'(value : FLOAT)  { super.$$link(5, value) } 
//set 'end_at'(value : FLOAT)  { super.$$link(6, value) } 
//set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn)  { super.$$link(7, value) } 
//set 'neg_embed'(value : EMBEDS)  { super.$$link(8, value) } 
//set 'attn_mask'(value : MASK)  { super.$$link(9, value) } 
//set 'clip_vision'(value : CLIP_VISION)  { super.$$link(10, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.ipadapter
		 * @param opts.pos_embed
		 * @param opts.weight default: 1 max: 3 min: -1 step: 0.05
		 * @param opts.weight_type
		 * @param opts.start_at step: 0.001
		 * @param opts.end_at default: 1 step: 0.001
		 * @param opts.embeds_scaling
		 * @param opts.neg_embed
		 * @param opts.attn_mask
		 * @param opts.clip_vision}
        */
        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'pos_embed': EMBEDS,'weight'?: FLOAT,'weight_type': 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise'| $dyn,'start_at'?: FLOAT,'end_at'?: FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn,'neg_embed'?: EMBEDS,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("ipadapter", opts['ipadapter'])
super.$$link("pos_embed", opts['pos_embed'])
super.$$link("weight", opts['weight']??tmp["IPAdapterEmbedsBatch"].defaults['weight'])
super.$$link("weight_type", opts['weight_type'])
super.$$link("start_at", opts['start_at']??tmp["IPAdapterEmbedsBatch"].defaults['start_at'])
super.$$link("end_at", opts['end_at']??tmp["IPAdapterEmbedsBatch"].defaults['end_at'])
super.$$link("embeds_scaling", opts['embeds_scaling'])
super.$$link("neg_embed", opts['neg_embed'])
super.$$link("attn_mask", opts['attn_mask'])
super.$$link("clip_vision", opts['clip_vision'])
}

        static defaults = {
    'weight':  1,
'start_at':  0,
'end_at':  1
}
        protected override $$type(){
            return "IPAdapterEmbedsBatch"
        }
},

    /**
     * IPAdapter Style & Composition SDXL from ipadapter/style_composition
     * @desc 
    */
    "IPAdapterStyleComposition" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
//set 'image_style'(value : IMAGE)  { super.$$link(2, value) } 
//set 'image_composition'(value : IMAGE)  { super.$$link(3, value) } 
//set 'weight_style'(value : FLOAT)  { super.$$link(4, value) } 
//set 'weight_composition'(value : FLOAT)  { super.$$link(5, value) } 
//set 'expand_style'(value : BOOLEAN)  { super.$$link(6, value) } 
//set 'combine_embeds'(value : 'concat'|'add'|'subtract'|'average'|'norm average'| $dyn)  { super.$$link(7, value) } 
//set 'start_at'(value : FLOAT)  { super.$$link(8, value) } 
//set 'end_at'(value : FLOAT)  { super.$$link(9, value) } 
//set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn)  { super.$$link(10, value) } 
//set 'image_negative'(value : IMAGE)  { super.$$link(11, value) } 
//set 'attn_mask'(value : MASK)  { super.$$link(12, value) } 
//set 'clip_vision'(value : CLIP_VISION)  { super.$$link(13, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.ipadapter
		 * @param opts.image_style
		 * @param opts.image_composition
		 * @param opts.weight_style default: 1 max: 5 min: -1 step: 0.05
		 * @param opts.weight_composition default: 1 max: 5 min: -1 step: 0.05
		 * @param opts.expand_style
		 * @param opts.combine_embeds default: "average"
		 * @param opts.start_at step: 0.001
		 * @param opts.end_at default: 1 step: 0.001
		 * @param opts.embeds_scaling
		 * @param opts.image_negative
		 * @param opts.attn_mask
		 * @param opts.clip_vision}
        */
        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'image_style': IMAGE,'image_composition': IMAGE,'weight_style'?: FLOAT,'weight_composition'?: FLOAT,'expand_style'?: BOOLEAN,'combine_embeds'?: 'concat'|'add'|'subtract'|'average'|'norm average'| $dyn,'start_at'?: FLOAT,'end_at'?: FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn,'image_negative'?: IMAGE,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("ipadapter", opts['ipadapter'])
super.$$link("image_style", opts['image_style'])
super.$$link("image_composition", opts['image_composition'])
super.$$link("weight_style", opts['weight_style']??tmp["IPAdapterStyleComposition"].defaults['weight_style'])
super.$$link("weight_composition", opts['weight_composition']??tmp["IPAdapterStyleComposition"].defaults['weight_composition'])
super.$$link("expand_style", opts['expand_style']??tmp["IPAdapterStyleComposition"].defaults['expand_style'])
super.$$link("combine_embeds", opts['combine_embeds']??tmp["IPAdapterStyleComposition"].defaults['combine_embeds'])
super.$$link("start_at", opts['start_at']??tmp["IPAdapterStyleComposition"].defaults['start_at'])
super.$$link("end_at", opts['end_at']??tmp["IPAdapterStyleComposition"].defaults['end_at'])
super.$$link("embeds_scaling", opts['embeds_scaling'])
super.$$link("image_negative", opts['image_negative'])
super.$$link("attn_mask", opts['attn_mask'])
super.$$link("clip_vision", opts['clip_vision'])
}

        static defaults = {
    'weight_style':  1,
'weight_composition':  1,
'expand_style':  false,
'combine_embeds':  "average",
'start_at':  0,
'end_at':  1
}
        protected override $$type(){
            return "IPAdapterStyleComposition"
        }
},

    /**
     * IPAdapter Style & Composition Batch SDXL from ipadapter/style_composition
     * @desc 
    */
    "IPAdapterStyleCompositionBatch" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
//set 'image_style'(value : IMAGE)  { super.$$link(2, value) } 
//set 'image_composition'(value : IMAGE)  { super.$$link(3, value) } 
//set 'weight_style'(value : FLOAT)  { super.$$link(4, value) } 
//set 'weight_composition'(value : FLOAT)  { super.$$link(5, value) } 
//set 'expand_style'(value : BOOLEAN)  { super.$$link(6, value) } 
//set 'start_at'(value : FLOAT)  { super.$$link(7, value) } 
//set 'end_at'(value : FLOAT)  { super.$$link(8, value) } 
//set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn)  { super.$$link(9, value) } 
//set 'image_negative'(value : IMAGE)  { super.$$link(10, value) } 
//set 'attn_mask'(value : MASK)  { super.$$link(11, value) } 
//set 'clip_vision'(value : CLIP_VISION)  { super.$$link(12, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.ipadapter
		 * @param opts.image_style
		 * @param opts.image_composition
		 * @param opts.weight_style default: 1 max: 5 min: -1 step: 0.05
		 * @param opts.weight_composition default: 1 max: 5 min: -1 step: 0.05
		 * @param opts.expand_style
		 * @param opts.start_at step: 0.001
		 * @param opts.end_at default: 1 step: 0.001
		 * @param opts.embeds_scaling
		 * @param opts.image_negative
		 * @param opts.attn_mask
		 * @param opts.clip_vision}
        */
        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'image_style': IMAGE,'image_composition': IMAGE,'weight_style'?: FLOAT,'weight_composition'?: FLOAT,'expand_style'?: BOOLEAN,'start_at'?: FLOAT,'end_at'?: FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn,'image_negative'?: IMAGE,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("ipadapter", opts['ipadapter'])
super.$$link("image_style", opts['image_style'])
super.$$link("image_composition", opts['image_composition'])
super.$$link("weight_style", opts['weight_style']??tmp["IPAdapterStyleCompositionBatch"].defaults['weight_style'])
super.$$link("weight_composition", opts['weight_composition']??tmp["IPAdapterStyleCompositionBatch"].defaults['weight_composition'])
super.$$link("expand_style", opts['expand_style']??tmp["IPAdapterStyleCompositionBatch"].defaults['expand_style'])
super.$$link("start_at", opts['start_at']??tmp["IPAdapterStyleCompositionBatch"].defaults['start_at'])
super.$$link("end_at", opts['end_at']??tmp["IPAdapterStyleCompositionBatch"].defaults['end_at'])
super.$$link("embeds_scaling", opts['embeds_scaling'])
super.$$link("image_negative", opts['image_negative'])
super.$$link("attn_mask", opts['attn_mask'])
super.$$link("clip_vision", opts['clip_vision'])
}

        static defaults = {
    'weight_style':  1,
'weight_composition':  1,
'expand_style':  false,
'start_at':  0,
'end_at':  1
}
        protected override $$type(){
            return "IPAdapterStyleCompositionBatch"
        }
},

    /**
     * IPAdapter Mad Scientist from ipadapter/dev
     * @desc 
    */
    "IPAdapterMS" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
//set 'image'(value : IMAGE)  { super.$$link(2, value) } 
//set 'weight'(value : FLOAT)  { super.$$link(3, value) } 
//set 'weight_faceidv2'(value : FLOAT)  { super.$$link(4, value) } 
//set 'weight_type'(value : 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise'| $dyn)  { super.$$link(5, value) } 
//set 'combine_embeds'(value : 'concat'|'add'|'subtract'|'average'|'norm average'| $dyn)  { super.$$link(6, value) } 
//set 'start_at'(value : FLOAT)  { super.$$link(7, value) } 
//set 'end_at'(value : FLOAT)  { super.$$link(8, value) } 
//set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn)  { super.$$link(9, value) } 
//set 'layer_weights'(value : STRING)  { super.$$link(10, value) } 
//set 'image_negative'(value : IMAGE)  { super.$$link(11, value) } 
//set 'attn_mask'(value : MASK)  { super.$$link(12, value) } 
//set 'clip_vision'(value : CLIP_VISION)  { super.$$link(13, value) } 
//set 'insightface'(value : INSIGHTFACE)  { super.$$link(14, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.ipadapter
		 * @param opts.image
		 * @param opts.weight default: 1 max: 5 min: -1 step: 0.05
		 * @param opts.weight_faceidv2 default: 1 max: 5 min: -1 step: 0.05
		 * @param opts.weight_type
		 * @param opts.combine_embeds
		 * @param opts.start_at step: 0.001
		 * @param opts.end_at default: 1 step: 0.001
		 * @param opts.embeds_scaling
		 * @param opts.layer_weights
		 * @param opts.image_negative
		 * @param opts.attn_mask
		 * @param opts.clip_vision
		 * @param opts.insightface}
        */
        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'image': IMAGE,'weight'?: FLOAT,'weight_faceidv2'?: FLOAT,'weight_type': 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise'| $dyn,'combine_embeds': 'concat'|'add'|'subtract'|'average'|'norm average'| $dyn,'start_at'?: FLOAT,'end_at'?: FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn,'layer_weights'?: STRING,'image_negative'?: IMAGE,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION,'insightface'?: INSIGHTFACE
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("ipadapter", opts['ipadapter'])
super.$$link("image", opts['image'])
super.$$link("weight", opts['weight']??tmp["IPAdapterMS"].defaults['weight'])
super.$$link("weight_faceidv2", opts['weight_faceidv2']??tmp["IPAdapterMS"].defaults['weight_faceidv2'])
super.$$link("weight_type", opts['weight_type'])
super.$$link("combine_embeds", opts['combine_embeds'])
super.$$link("start_at", opts['start_at']??tmp["IPAdapterMS"].defaults['start_at'])
super.$$link("end_at", opts['end_at']??tmp["IPAdapterMS"].defaults['end_at'])
super.$$link("embeds_scaling", opts['embeds_scaling'])
super.$$link("layer_weights", opts['layer_weights']??tmp["IPAdapterMS"].defaults['layer_weights'])
super.$$link("image_negative", opts['image_negative'])
super.$$link("attn_mask", opts['attn_mask'])
super.$$link("clip_vision", opts['clip_vision'])
super.$$link("insightface", opts['insightface'])
}

        static defaults = {
    'weight':  1,
'weight_faceidv2':  1,
'start_at':  0,
'end_at':  1,
'layer_weights':  ""
}
        protected override $$type(){
            return "IPAdapterMS"
        }
},

    /**
     * IPAdapter ClipVision Enhancer from ipadapter/dev
     * @desc 
    */
    "IPAdapterClipVisionEnhancer" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
//set 'image'(value : IMAGE)  { super.$$link(2, value) } 
//set 'weight'(value : FLOAT)  { super.$$link(3, value) } 
//set 'weight_type'(value : 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise'| $dyn)  { super.$$link(4, value) } 
//set 'combine_embeds'(value : 'concat'|'add'|'subtract'|'average'|'norm average'| $dyn)  { super.$$link(5, value) } 
//set 'start_at'(value : FLOAT)  { super.$$link(6, value) } 
//set 'end_at'(value : FLOAT)  { super.$$link(7, value) } 
//set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn)  { super.$$link(8, value) } 
//set 'enhance_tiles'(value : INT)  { super.$$link(9, value) } 
//set 'enhance_ratio'(value : FLOAT)  { super.$$link(10, value) } 
//set 'image_negative'(value : IMAGE)  { super.$$link(11, value) } 
//set 'attn_mask'(value : MASK)  { super.$$link(12, value) } 
//set 'clip_vision'(value : CLIP_VISION)  { super.$$link(13, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.ipadapter
		 * @param opts.image
		 * @param opts.weight default: 1 max: 5 min: -1 step: 0.05
		 * @param opts.weight_type
		 * @param opts.combine_embeds
		 * @param opts.start_at step: 0.001
		 * @param opts.end_at default: 1 step: 0.001
		 * @param opts.embeds_scaling
		 * @param opts.enhance_tiles default: 2 max: 16 min: 1
		 * @param opts.enhance_ratio default: 1 step: 0.05
		 * @param opts.image_negative
		 * @param opts.attn_mask
		 * @param opts.clip_vision}
        */
        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'image': IMAGE,'weight'?: FLOAT,'weight_type': 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise'| $dyn,'combine_embeds': 'concat'|'add'|'subtract'|'average'|'norm average'| $dyn,'start_at'?: FLOAT,'end_at'?: FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn,'enhance_tiles'?: INT,'enhance_ratio'?: FLOAT,'image_negative'?: IMAGE,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("ipadapter", opts['ipadapter'])
super.$$link("image", opts['image'])
super.$$link("weight", opts['weight']??tmp["IPAdapterClipVisionEnhancer"].defaults['weight'])
super.$$link("weight_type", opts['weight_type'])
super.$$link("combine_embeds", opts['combine_embeds'])
super.$$link("start_at", opts['start_at']??tmp["IPAdapterClipVisionEnhancer"].defaults['start_at'])
super.$$link("end_at", opts['end_at']??tmp["IPAdapterClipVisionEnhancer"].defaults['end_at'])
super.$$link("embeds_scaling", opts['embeds_scaling'])
super.$$link("enhance_tiles", opts['enhance_tiles']??tmp["IPAdapterClipVisionEnhancer"].defaults['enhance_tiles'])
super.$$link("enhance_ratio", opts['enhance_ratio']??tmp["IPAdapterClipVisionEnhancer"].defaults['enhance_ratio'])
super.$$link("image_negative", opts['image_negative'])
super.$$link("attn_mask", opts['attn_mask'])
super.$$link("clip_vision", opts['clip_vision'])
}

        static defaults = {
    'weight':  1,
'start_at':  0,
'end_at':  1,
'enhance_tiles':  2,
'enhance_ratio':  1
}
        protected override $$type(){
            return "IPAdapterClipVisionEnhancer"
        }
},

    /**
     * IPAdapter ClipVision Enhancer Batch from ipadapter/dev
     * @desc 
    */
    "IPAdapterClipVisionEnhancerBatch" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
//set 'image'(value : IMAGE)  { super.$$link(2, value) } 
//set 'weight'(value : FLOAT)  { super.$$link(3, value) } 
//set 'weight_type'(value : 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise'| $dyn)  { super.$$link(4, value) } 
//set 'start_at'(value : FLOAT)  { super.$$link(5, value) } 
//set 'end_at'(value : FLOAT)  { super.$$link(6, value) } 
//set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn)  { super.$$link(7, value) } 
//set 'enhance_tiles'(value : INT)  { super.$$link(8, value) } 
//set 'enhance_ratio'(value : FLOAT)  { super.$$link(9, value) } 
//set 'encode_batch_size'(value : INT)  { super.$$link(10, value) } 
//set 'image_negative'(value : IMAGE)  { super.$$link(11, value) } 
//set 'attn_mask'(value : MASK)  { super.$$link(12, value) } 
//set 'clip_vision'(value : CLIP_VISION)  { super.$$link(13, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.ipadapter
		 * @param opts.image
		 * @param opts.weight default: 1 max: 5 min: -1 step: 0.05
		 * @param opts.weight_type
		 * @param opts.start_at step: 0.001
		 * @param opts.end_at default: 1 step: 0.001
		 * @param opts.embeds_scaling
		 * @param opts.enhance_tiles default: 2 max: 16 min: 1
		 * @param opts.enhance_ratio default: 0.5 step: 0.05
		 * @param opts.encode_batch_size
		 * @param opts.image_negative
		 * @param opts.attn_mask
		 * @param opts.clip_vision}
        */
        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'image': IMAGE,'weight'?: FLOAT,'weight_type': 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise'| $dyn,'start_at'?: FLOAT,'end_at'?: FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn,'enhance_tiles'?: INT,'enhance_ratio'?: FLOAT,'encode_batch_size'?: INT,'image_negative'?: IMAGE,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("ipadapter", opts['ipadapter'])
super.$$link("image", opts['image'])
super.$$link("weight", opts['weight']??tmp["IPAdapterClipVisionEnhancerBatch"].defaults['weight'])
super.$$link("weight_type", opts['weight_type'])
super.$$link("start_at", opts['start_at']??tmp["IPAdapterClipVisionEnhancerBatch"].defaults['start_at'])
super.$$link("end_at", opts['end_at']??tmp["IPAdapterClipVisionEnhancerBatch"].defaults['end_at'])
super.$$link("embeds_scaling", opts['embeds_scaling'])
super.$$link("enhance_tiles", opts['enhance_tiles']??tmp["IPAdapterClipVisionEnhancerBatch"].defaults['enhance_tiles'])
super.$$link("enhance_ratio", opts['enhance_ratio']??tmp["IPAdapterClipVisionEnhancerBatch"].defaults['enhance_ratio'])
super.$$link("encode_batch_size", opts['encode_batch_size']??tmp["IPAdapterClipVisionEnhancerBatch"].defaults['encode_batch_size'])
super.$$link("image_negative", opts['image_negative'])
super.$$link("attn_mask", opts['attn_mask'])
super.$$link("clip_vision", opts['clip_vision'])
}

        static defaults = {
    'weight':  1,
'start_at':  0,
'end_at':  1,
'enhance_tiles':  2,
'enhance_ratio':  0.5,
'encode_batch_size':  0
}
        protected override $$type(){
            return "IPAdapterClipVisionEnhancerBatch"
        }
},

    /**
     * IPAdapter from Params from ipadapter/params
     * @desc 
    */
    "IPAdapterFromParams" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
//set 'ipadapter_params'(value : IPADAPTER_PARAMS)  { super.$$link(2, value) } 
//set 'combine_embeds'(value : 'concat'|'add'|'subtract'|'average'|'norm average'| $dyn)  { super.$$link(3, value) } 
//set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn)  { super.$$link(4, value) } 
//set 'image_negative'(value : IMAGE)  { super.$$link(5, value) } 
//set 'clip_vision'(value : CLIP_VISION)  { super.$$link(6, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.ipadapter
		 * @param opts.ipadapter_params
		 * @param opts.combine_embeds
		 * @param opts.embeds_scaling
		 * @param opts.image_negative
		 * @param opts.clip_vision}
        */
        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'ipadapter_params': IPADAPTER_PARAMS,'combine_embeds': 'concat'|'add'|'subtract'|'average'|'norm average'| $dyn,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn,'image_negative'?: IMAGE,'clip_vision'?: CLIP_VISION
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("ipadapter", opts['ipadapter'])
super.$$link("ipadapter_params", opts['ipadapter_params'])
super.$$link("combine_embeds", opts['combine_embeds'])
super.$$link("embeds_scaling", opts['embeds_scaling'])
super.$$link("image_negative", opts['image_negative'])
super.$$link("clip_vision", opts['clip_vision'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "IPAdapterFromParams"
        }
},

    /**
     * IPAdapter Precise Style Transfer from ipadapter
     * @desc 
    */
    "IPAdapterPreciseStyleTransfer" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
//set 'image'(value : IMAGE)  { super.$$link(2, value) } 
//set 'weight'(value : FLOAT)  { super.$$link(3, value) } 
//set 'style_boost'(value : FLOAT)  { super.$$link(4, value) } 
//set 'combine_embeds'(value : 'concat'|'add'|'subtract'|'average'|'norm average'| $dyn)  { super.$$link(5, value) } 
//set 'start_at'(value : FLOAT)  { super.$$link(6, value) } 
//set 'end_at'(value : FLOAT)  { super.$$link(7, value) } 
//set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn)  { super.$$link(8, value) } 
//set 'image_negative'(value : IMAGE)  { super.$$link(9, value) } 
//set 'attn_mask'(value : MASK)  { super.$$link(10, value) } 
//set 'clip_vision'(value : CLIP_VISION)  { super.$$link(11, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.ipadapter
		 * @param opts.image
		 * @param opts.weight default: 1 max: 5 min: -1 step: 0.05
		 * @param opts.style_boost default: 1 max: 5 min: -5 step: 0.05
		 * @param opts.combine_embeds
		 * @param opts.start_at step: 0.001
		 * @param opts.end_at default: 1 step: 0.001
		 * @param opts.embeds_scaling
		 * @param opts.image_negative
		 * @param opts.attn_mask
		 * @param opts.clip_vision}
        */
        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'image': IMAGE,'weight'?: FLOAT,'style_boost'?: FLOAT,'combine_embeds': 'concat'|'add'|'subtract'|'average'|'norm average'| $dyn,'start_at'?: FLOAT,'end_at'?: FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn,'image_negative'?: IMAGE,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("ipadapter", opts['ipadapter'])
super.$$link("image", opts['image'])
super.$$link("weight", opts['weight']??tmp["IPAdapterPreciseStyleTransfer"].defaults['weight'])
super.$$link("style_boost", opts['style_boost']??tmp["IPAdapterPreciseStyleTransfer"].defaults['style_boost'])
super.$$link("combine_embeds", opts['combine_embeds'])
super.$$link("start_at", opts['start_at']??tmp["IPAdapterPreciseStyleTransfer"].defaults['start_at'])
super.$$link("end_at", opts['end_at']??tmp["IPAdapterPreciseStyleTransfer"].defaults['end_at'])
super.$$link("embeds_scaling", opts['embeds_scaling'])
super.$$link("image_negative", opts['image_negative'])
super.$$link("attn_mask", opts['attn_mask'])
super.$$link("clip_vision", opts['clip_vision'])
}

        static defaults = {
    'weight':  1,
'style_boost':  1,
'start_at':  0,
'end_at':  1
}
        protected override $$type(){
            return "IPAdapterPreciseStyleTransfer"
        }
},

    /**
     * IPAdapter Precise Style Transfer Batch from ipadapter
     * @desc 
    */
    "IPAdapterPreciseStyleTransferBatch" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
//set 'image'(value : IMAGE)  { super.$$link(2, value) } 
//set 'weight'(value : FLOAT)  { super.$$link(3, value) } 
//set 'style_boost'(value : FLOAT)  { super.$$link(4, value) } 
//set 'combine_embeds'(value : 'concat'|'add'|'subtract'|'average'|'norm average'| $dyn)  { super.$$link(5, value) } 
//set 'start_at'(value : FLOAT)  { super.$$link(6, value) } 
//set 'end_at'(value : FLOAT)  { super.$$link(7, value) } 
//set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn)  { super.$$link(8, value) } 
//set 'image_negative'(value : IMAGE)  { super.$$link(9, value) } 
//set 'attn_mask'(value : MASK)  { super.$$link(10, value) } 
//set 'clip_vision'(value : CLIP_VISION)  { super.$$link(11, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.ipadapter
		 * @param opts.image
		 * @param opts.weight default: 1 max: 5 min: -1 step: 0.05
		 * @param opts.style_boost default: 1 max: 5 min: -5 step: 0.05
		 * @param opts.combine_embeds
		 * @param opts.start_at step: 0.001
		 * @param opts.end_at default: 1 step: 0.001
		 * @param opts.embeds_scaling
		 * @param opts.image_negative
		 * @param opts.attn_mask
		 * @param opts.clip_vision}
        */
        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'image': IMAGE,'weight'?: FLOAT,'style_boost'?: FLOAT,'combine_embeds': 'concat'|'add'|'subtract'|'average'|'norm average'| $dyn,'start_at'?: FLOAT,'end_at'?: FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn,'image_negative'?: IMAGE,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("ipadapter", opts['ipadapter'])
super.$$link("image", opts['image'])
super.$$link("weight", opts['weight']??tmp["IPAdapterPreciseStyleTransferBatch"].defaults['weight'])
super.$$link("style_boost", opts['style_boost']??tmp["IPAdapterPreciseStyleTransferBatch"].defaults['style_boost'])
super.$$link("combine_embeds", opts['combine_embeds'])
super.$$link("start_at", opts['start_at']??tmp["IPAdapterPreciseStyleTransferBatch"].defaults['start_at'])
super.$$link("end_at", opts['end_at']??tmp["IPAdapterPreciseStyleTransferBatch"].defaults['end_at'])
super.$$link("embeds_scaling", opts['embeds_scaling'])
super.$$link("image_negative", opts['image_negative'])
super.$$link("attn_mask", opts['attn_mask'])
super.$$link("clip_vision", opts['clip_vision'])
}

        static defaults = {
    'weight':  1,
'style_boost':  1,
'start_at':  0,
'end_at':  1
}
        protected override $$type(){
            return "IPAdapterPreciseStyleTransferBatch"
        }
},

    /**
     * IPAdapter Precise Composition from ipadapter
     * @desc 
    */
    "IPAdapterPreciseComposition" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
//set 'image'(value : IMAGE)  { super.$$link(2, value) } 
//set 'weight'(value : FLOAT)  { super.$$link(3, value) } 
//set 'composition_boost'(value : FLOAT)  { super.$$link(4, value) } 
//set 'combine_embeds'(value : 'concat'|'add'|'subtract'|'average'|'norm average'| $dyn)  { super.$$link(5, value) } 
//set 'start_at'(value : FLOAT)  { super.$$link(6, value) } 
//set 'end_at'(value : FLOAT)  { super.$$link(7, value) } 
//set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn)  { super.$$link(8, value) } 
//set 'image_negative'(value : IMAGE)  { super.$$link(9, value) } 
//set 'attn_mask'(value : MASK)  { super.$$link(10, value) } 
//set 'clip_vision'(value : CLIP_VISION)  { super.$$link(11, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.ipadapter
		 * @param opts.image
		 * @param opts.weight default: 1 max: 5 min: -1 step: 0.05
		 * @param opts.composition_boost max: 5 min: -5 step: 0.05
		 * @param opts.combine_embeds
		 * @param opts.start_at step: 0.001
		 * @param opts.end_at default: 1 step: 0.001
		 * @param opts.embeds_scaling
		 * @param opts.image_negative
		 * @param opts.attn_mask
		 * @param opts.clip_vision}
        */
        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'image': IMAGE,'weight'?: FLOAT,'composition_boost'?: FLOAT,'combine_embeds': 'concat'|'add'|'subtract'|'average'|'norm average'| $dyn,'start_at'?: FLOAT,'end_at'?: FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn,'image_negative'?: IMAGE,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("ipadapter", opts['ipadapter'])
super.$$link("image", opts['image'])
super.$$link("weight", opts['weight']??tmp["IPAdapterPreciseComposition"].defaults['weight'])
super.$$link("composition_boost", opts['composition_boost']??tmp["IPAdapterPreciseComposition"].defaults['composition_boost'])
super.$$link("combine_embeds", opts['combine_embeds'])
super.$$link("start_at", opts['start_at']??tmp["IPAdapterPreciseComposition"].defaults['start_at'])
super.$$link("end_at", opts['end_at']??tmp["IPAdapterPreciseComposition"].defaults['end_at'])
super.$$link("embeds_scaling", opts['embeds_scaling'])
super.$$link("image_negative", opts['image_negative'])
super.$$link("attn_mask", opts['attn_mask'])
super.$$link("clip_vision", opts['clip_vision'])
}

        static defaults = {
    'weight':  1,
'composition_boost':  0,
'start_at':  0,
'end_at':  1
}
        protected override $$type(){
            return "IPAdapterPreciseComposition"
        }
},

    /**
     * IPAdapter Precise Composition Batch from ipadapter
     * @desc 
    */
    "IPAdapterPreciseCompositionBatch" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
//set 'image'(value : IMAGE)  { super.$$link(2, value) } 
//set 'weight'(value : FLOAT)  { super.$$link(3, value) } 
//set 'composition_boost'(value : FLOAT)  { super.$$link(4, value) } 
//set 'combine_embeds'(value : 'concat'|'add'|'subtract'|'average'|'norm average'| $dyn)  { super.$$link(5, value) } 
//set 'start_at'(value : FLOAT)  { super.$$link(6, value) } 
//set 'end_at'(value : FLOAT)  { super.$$link(7, value) } 
//set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn)  { super.$$link(8, value) } 
//set 'image_negative'(value : IMAGE)  { super.$$link(9, value) } 
//set 'attn_mask'(value : MASK)  { super.$$link(10, value) } 
//set 'clip_vision'(value : CLIP_VISION)  { super.$$link(11, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.ipadapter
		 * @param opts.image
		 * @param opts.weight default: 1 max: 5 min: -1 step: 0.05
		 * @param opts.composition_boost max: 5 min: -5 step: 0.05
		 * @param opts.combine_embeds
		 * @param opts.start_at step: 0.001
		 * @param opts.end_at default: 1 step: 0.001
		 * @param opts.embeds_scaling
		 * @param opts.image_negative
		 * @param opts.attn_mask
		 * @param opts.clip_vision}
        */
        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'image': IMAGE,'weight'?: FLOAT,'composition_boost'?: FLOAT,'combine_embeds': 'concat'|'add'|'subtract'|'average'|'norm average'| $dyn,'start_at'?: FLOAT,'end_at'?: FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty'| $dyn,'image_negative'?: IMAGE,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("ipadapter", opts['ipadapter'])
super.$$link("image", opts['image'])
super.$$link("weight", opts['weight']??tmp["IPAdapterPreciseCompositionBatch"].defaults['weight'])
super.$$link("composition_boost", opts['composition_boost']??tmp["IPAdapterPreciseCompositionBatch"].defaults['composition_boost'])
super.$$link("combine_embeds", opts['combine_embeds'])
super.$$link("start_at", opts['start_at']??tmp["IPAdapterPreciseCompositionBatch"].defaults['start_at'])
super.$$link("end_at", opts['end_at']??tmp["IPAdapterPreciseCompositionBatch"].defaults['end_at'])
super.$$link("embeds_scaling", opts['embeds_scaling'])
super.$$link("image_negative", opts['image_negative'])
super.$$link("attn_mask", opts['attn_mask'])
super.$$link("clip_vision", opts['clip_vision'])
}

        static defaults = {
    'weight':  1,
'composition_boost':  0,
'start_at':  0,
'end_at':  1
}
        protected override $$type(){
            return "IPAdapterPreciseCompositionBatch"
        }
},

    /**
     * IPAdapter Unified Loader from ipadapter
     * @desc 
    */
    "IPAdapterUnifiedLoader" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'preset'(value : 'LIGHT - SD1.5 only (low strength)'|'STANDARD (medium strength)'|'VIT-G (medium strength)'|'PLUS (high strength)'|'PLUS FACE (portraits)'|'FULL FACE - SD1.5 only (portraits stronger)'| $dyn)  { super.$$link(1, value) } 
//set 'ipadapter'(value : IPADAPTER)  { super.$$link(2, value) } 

        //Getters
        get 'model'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'ipadapter'() : IPADAPTER { return [this.$uid.toString(), 1]  as unknown as IPADAPTER; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.preset
		 * @param opts.ipadapter}
        */
        constructor(opts:{
            'model': MODEL,'preset': 'LIGHT - SD1.5 only (low strength)'|'STANDARD (medium strength)'|'VIT-G (medium strength)'|'PLUS (high strength)'|'PLUS FACE (portraits)'|'FULL FACE - SD1.5 only (portraits stronger)'| $dyn,'ipadapter'?: IPADAPTER
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("preset", opts['preset'])
super.$$link("ipadapter", opts['ipadapter'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "IPAdapterUnifiedLoader"
        }
},

    /**
     * IPAdapter Unified Loader FaceID from ipadapter/faceid
     * @desc 
    */
    "IPAdapterUnifiedLoaderFaceID" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'preset'(value : 'FACEID'|'FACEID PLUS - SD1.5 only'|'FACEID PLUS V2'|'FACEID PORTRAIT (style transfer)'|'FACEID PORTRAIT UNNORM - SDXL only (strong)'| $dyn)  { super.$$link(1, value) } 
//set 'lora_strength'(value : FLOAT)  { super.$$link(2, value) } 
//set 'provider'(value : 'CPU'|'CUDA'|'ROCM'|'DirectML'|'OpenVINO'|'CoreML'| $dyn)  { super.$$link(3, value) } 
//set 'ipadapter'(value : IPADAPTER)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'ipadapter'() : IPADAPTER { return [this.$uid.toString(), 1]  as unknown as IPADAPTER; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.preset
		 * @param opts.lora_strength default: 0.6 step: 0.01
		 * @param opts.provider
		 * @param opts.ipadapter}
        */
        constructor(opts:{
            'model': MODEL,'preset': 'FACEID'|'FACEID PLUS - SD1.5 only'|'FACEID PLUS V2'|'FACEID PORTRAIT (style transfer)'|'FACEID PORTRAIT UNNORM - SDXL only (strong)'| $dyn,'lora_strength'?: FLOAT,'provider': 'CPU'|'CUDA'|'ROCM'|'DirectML'|'OpenVINO'|'CoreML'| $dyn,'ipadapter'?: IPADAPTER
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("preset", opts['preset'])
super.$$link("lora_strength", opts['lora_strength']??tmp["IPAdapterUnifiedLoaderFaceID"].defaults['lora_strength'])
super.$$link("provider", opts['provider'])
super.$$link("ipadapter", opts['ipadapter'])
}

        static defaults = {
    'lora_strength':  0.6
}
        protected override $$type(){
            return "IPAdapterUnifiedLoaderFaceID"
        }
},

    /**
     * IPAdapter Model Loader from ipadapter/loaders
     * @desc 
    */
    "IPAdapterModelLoader" : class extends Node{
        //Setters
        //set 'ipadapter_file'(value : 'ip-adapter-faceid-plus_sd15.bin'|'ip-adapter-faceid-plusv2_sd15.bin'|'ip-adapter-faceid-portrait_sd15.bin'|'ip-adapter-faceid_sd15.bin'|'ip-adapter-faceid_sdxl.bin'|'ip-adapter-full-face_sd15.safetensors'|'ip-adapter-plus-face_sd15.safetensors'|'ip-adapter-plus_sd15.safetensors'|'ip-adapter_sd15.safetensors'|'ip-adapter_sd15_light_v11.bin'|'ip-adapter_sdxl.safetensors'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'IPADAPTER'() : IPADAPTER { return [this.$uid.toString(), 0]  as unknown as IPADAPTER; }

        /**
          * Constructor
		 * @param opts.ipadapter_file}
        */
        constructor(opts:{
            'ipadapter_file': 'ip-adapter-faceid-plus_sd15.bin'|'ip-adapter-faceid-plusv2_sd15.bin'|'ip-adapter-faceid-portrait_sd15.bin'|'ip-adapter-faceid_sd15.bin'|'ip-adapter-faceid_sdxl.bin'|'ip-adapter-full-face_sd15.safetensors'|'ip-adapter-plus-face_sd15.safetensors'|'ip-adapter-plus_sd15.safetensors'|'ip-adapter_sd15.safetensors'|'ip-adapter_sd15_light_v11.bin'|'ip-adapter_sdxl.safetensors'| $dyn
        }){
            super(ctx);

            super.$$link("ipadapter_file", opts['ipadapter_file'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "IPAdapterModelLoader"
        }
},

    /**
     * IPAdapter InsightFace Loader from ipadapter/loaders
     * @desc 
    */
    "IPAdapterInsightFaceLoader" : class extends Node{
        //Setters
        //set 'provider'(value : 'CPU'|'CUDA'|'ROCM'| $dyn)  { super.$$link(0, value) } 
//set 'model_name'(value : 'buffalo_l'|'antelopev2'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'INSIGHTFACE'() : INSIGHTFACE { return [this.$uid.toString(), 0]  as unknown as INSIGHTFACE; }

        /**
          * Constructor
		 * @param opts.provider
		 * @param opts.model_name}
        */
        constructor(opts:{
            'provider': 'CPU'|'CUDA'|'ROCM'| $dyn,'model_name': 'buffalo_l'|'antelopev2'| $dyn
        }){
            super(ctx);

            super.$$link("provider", opts['provider'])
super.$$link("model_name", opts['model_name'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "IPAdapterInsightFaceLoader"
        }
},

    /**
     * IPAdapter Unified Loader Community from ipadapter/loaders
     * @desc 
    */
    "IPAdapterUnifiedLoaderCommunity" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'preset'(value : 'Composition'|'Kolors'| $dyn)  { super.$$link(1, value) } 
//set 'ipadapter'(value : IPADAPTER)  { super.$$link(2, value) } 

        //Getters
        get 'model'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'ipadapter'() : IPADAPTER { return [this.$uid.toString(), 1]  as unknown as IPADAPTER; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.preset
		 * @param opts.ipadapter}
        */
        constructor(opts:{
            'model': MODEL,'preset': 'Composition'|'Kolors'| $dyn,'ipadapter'?: IPADAPTER
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("preset", opts['preset'])
super.$$link("ipadapter", opts['ipadapter'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "IPAdapterUnifiedLoaderCommunity"
        }
},

    /**
     * IPAdapter Encoder from ipadapter/embeds
     * @desc 
    */
    "IPAdapterEncoder" : class extends Node{
        //Setters
        //set 'ipadapter'(value : IPADAPTER)  { super.$$link(0, value) } 
//set 'image'(value : IMAGE)  { super.$$link(1, value) } 
//set 'weight'(value : FLOAT)  { super.$$link(2, value) } 
//set 'mask'(value : MASK)  { super.$$link(3, value) } 
//set 'clip_vision'(value : CLIP_VISION)  { super.$$link(4, value) } 

        //Getters
        get 'pos_embed'() : EMBEDS { return [this.$uid.toString(), 0]  as unknown as EMBEDS; }
get 'neg_embed'() : EMBEDS { return [this.$uid.toString(), 1]  as unknown as EMBEDS; }

        /**
          * Constructor
		 * @param opts.ipadapter
		 * @param opts.image
		 * @param opts.weight default: 1 max: 3 min: -1 step: 0.01
		 * @param opts.mask
		 * @param opts.clip_vision}
        */
        constructor(opts:{
            'ipadapter': IPADAPTER,'image': IMAGE,'weight'?: FLOAT,'mask'?: MASK,'clip_vision'?: CLIP_VISION
        }){
            super(ctx);

            super.$$link("ipadapter", opts['ipadapter'])
super.$$link("image", opts['image'])
super.$$link("weight", opts['weight']??tmp["IPAdapterEncoder"].defaults['weight'])
super.$$link("mask", opts['mask'])
super.$$link("clip_vision", opts['clip_vision'])
}

        static defaults = {
    'weight':  1
}
        protected override $$type(){
            return "IPAdapterEncoder"
        }
},

    /**
     * IPAdapter Combine Embeds from ipadapter/embeds
     * @desc 
    */
    "IPAdapterCombineEmbeds" : class extends Node{
        //Setters
        //set 'embed1'(value : EMBEDS)  { super.$$link(0, value) } 
//set 'method'(value : 'concat'|'add'|'subtract'|'average'|'norm average'|'max'|'min'| $dyn)  { super.$$link(1, value) } 
//set 'embed2'(value : EMBEDS)  { super.$$link(2, value) } 
//set 'embed3'(value : EMBEDS)  { super.$$link(3, value) } 
//set 'embed4'(value : EMBEDS)  { super.$$link(4, value) } 
//set 'embed5'(value : EMBEDS)  { super.$$link(5, value) } 

        //Getters
        get 'EMBEDS'() : EMBEDS { return [this.$uid.toString(), 0]  as unknown as EMBEDS; }

        /**
          * Constructor
		 * @param opts.embed1
		 * @param opts.method
		 * @param opts.embed2
		 * @param opts.embed3
		 * @param opts.embed4
		 * @param opts.embed5}
        */
        constructor(opts:{
            'embed1': EMBEDS,'method': 'concat'|'add'|'subtract'|'average'|'norm average'|'max'|'min'| $dyn,'embed2'?: EMBEDS,'embed3'?: EMBEDS,'embed4'?: EMBEDS,'embed5'?: EMBEDS
        }){
            super(ctx);

            super.$$link("embed1", opts['embed1'])
super.$$link("method", opts['method'])
super.$$link("embed2", opts['embed2'])
super.$$link("embed3", opts['embed3'])
super.$$link("embed4", opts['embed4'])
super.$$link("embed5", opts['embed5'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "IPAdapterCombineEmbeds"
        }
},

    /**
     * IPAdapter Noise from ipadapter/utils
     * @desc 
    */
    "IPAdapterNoise" : class extends Node{
        //Setters
        //set 'type'(value : 'fade'|'dissolve'|'gaussian'|'shuffle'| $dyn)  { super.$$link(0, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(1, value) } 
//set 'blur'(value : INT)  { super.$$link(2, value) } 
//set 'image_optional'(value : IMAGE)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.type
		 * @param opts.strength default: 1 step: 0.05
		 * @param opts.blur step: 1
		 * @param opts.image_optional}
        */
        constructor(opts:{
            'type': 'fade'|'dissolve'|'gaussian'|'shuffle'| $dyn,'strength'?: FLOAT,'blur'?: INT,'image_optional'?: IMAGE
        }){
            super(ctx);

            super.$$link("type", opts['type'])
super.$$link("strength", opts['strength']??tmp["IPAdapterNoise"].defaults['strength'])
super.$$link("blur", opts['blur']??tmp["IPAdapterNoise"].defaults['blur'])
super.$$link("image_optional", opts['image_optional'])
}

        static defaults = {
    'strength':  1,
'blur':  0
}
        protected override $$type(){
            return "IPAdapterNoise"
        }
},

    /**
     * Prep Image For ClipVision from ipadapter/utils
     * @desc 
    */
    "PrepImageForClipVision" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'interpolation'(value : 'LANCZOS'|'BICUBIC'|'HAMMING'|'BILINEAR'|'BOX'|'NEAREST'| $dyn)  { super.$$link(1, value) } 
//set 'crop_position'(value : 'top'|'bottom'|'left'|'right'|'center'|'pad'| $dyn)  { super.$$link(2, value) } 
//set 'sharpening'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.interpolation
		 * @param opts.crop_position
		 * @param opts.sharpening step: 0.05}
        */
        constructor(opts:{
            'image': IMAGE,'interpolation': 'LANCZOS'|'BICUBIC'|'HAMMING'|'BILINEAR'|'BOX'|'NEAREST'| $dyn,'crop_position': 'top'|'bottom'|'left'|'right'|'center'|'pad'| $dyn,'sharpening'?: FLOAT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("interpolation", opts['interpolation'])
super.$$link("crop_position", opts['crop_position'])
super.$$link("sharpening", opts['sharpening']??tmp["PrepImageForClipVision"].defaults['sharpening'])
}

        static defaults = {
    'sharpening':  0
}
        protected override $$type(){
            return "PrepImageForClipVision"
        }
},

    /**
     * IPAdapter Save Embeds from ipadapter/embeds
     * @desc 
    */
    "IPAdapterSaveEmbeds" : class extends Node{
        //Setters
        //set 'embeds'(value : EMBEDS)  { super.$$link(0, value) } 
//set 'filename_prefix'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.embeds
		 * @param opts.filename_prefix default: "IP_embeds"}
        */
        constructor(opts:{
            'embeds': EMBEDS,'filename_prefix'?: STRING
        }){
            super(ctx);

            super.$$link("embeds", opts['embeds'])
super.$$link("filename_prefix", opts['filename_prefix']??tmp["IPAdapterSaveEmbeds"].defaults['filename_prefix'])
}

        static defaults = {
    'filename_prefix':  "IP_embeds"
}
        protected override $$type(){
            return "IPAdapterSaveEmbeds"
        }
},

    /**
     * IPAdapter Load Embeds from ipadapter/embeds
     * @desc 
    */
    "IPAdapterLoadEmbeds" : class extends Node{
        //Setters
        //set 'embeds'(value : void)  { super.$$link(0, value) } 

        //Getters
        get 'EMBEDS'() : EMBEDS { return [this.$uid.toString(), 0]  as unknown as EMBEDS; }

        /**
          * Constructor
		 * @param opts.embeds}
        */
        constructor(opts:{
            'embeds': void
        }){
            super(ctx);

            super.$$link("embeds", opts['embeds'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "IPAdapterLoadEmbeds"
        }
},

    /**
     * IPAdapter Weights from ipadapter/weights
     * @desc 
    */
    "IPAdapterWeights" : class extends Node{
        //Setters
        //set 'weights'(value : STRING)  { super.$$link(0, value) } 
//set 'timing'(value : 'custom'|'linear'|'ease_in_out'|'ease_in'|'ease_out'|'random'| $dyn)  { super.$$link(1, value) } 
//set 'frames'(value : INT)  { super.$$link(2, value) } 
//set 'start_frame'(value : INT)  { super.$$link(3, value) } 
//set 'end_frame'(value : INT)  { super.$$link(4, value) } 
//set 'add_starting_frames'(value : INT)  { super.$$link(5, value) } 
//set 'add_ending_frames'(value : INT)  { super.$$link(6, value) } 
//set 'method'(value : 'full batch'|'shift batches'|'alternate batches'| $dyn)  { super.$$link(7, value) } 
//set 'image'(value : IMAGE)  { super.$$link(8, value) } 

        //Getters
        get 'weights'() : FLOAT { return [this.$uid.toString(), 0]  as unknown as FLOAT; }
get 'weights_invert'() : FLOAT { return [this.$uid.toString(), 1]  as unknown as FLOAT; }
get 'total_frames'() : INT { return [this.$uid.toString(), 2]  as unknown as INT; }
get 'image_1'() : IMAGE { return [this.$uid.toString(), 3]  as unknown as IMAGE; }
get 'image_2'() : IMAGE { return [this.$uid.toString(), 4]  as unknown as IMAGE; }
get 'weights_strategy'() : WEIGHTS_STRATEGY { return [this.$uid.toString(), 5]  as unknown as WEIGHTS_STRATEGY; }

        /**
          * Constructor
		 * @param opts.weights default: "1.0, 0.0"
		 * @param opts.timing default: "linear"
		 * @param opts.frames step: 1
		 * @param opts.start_frame step: 1
		 * @param opts.end_frame default: 9999 step: 1
		 * @param opts.add_starting_frames step: 1
		 * @param opts.add_ending_frames step: 1
		 * @param opts.method default: "full batch"
		 * @param opts.image}
        */
        constructor(opts:{
            'weights'?: STRING,'timing'?: 'custom'|'linear'|'ease_in_out'|'ease_in'|'ease_out'|'random'| $dyn,'frames'?: INT,'start_frame'?: INT,'end_frame'?: INT,'add_starting_frames'?: INT,'add_ending_frames'?: INT,'method'?: 'full batch'|'shift batches'|'alternate batches'| $dyn,'image'?: IMAGE
        }){
            super(ctx);

            super.$$link("weights", opts['weights']??tmp["IPAdapterWeights"].defaults['weights'])
super.$$link("timing", opts['timing']??tmp["IPAdapterWeights"].defaults['timing'])
super.$$link("frames", opts['frames']??tmp["IPAdapterWeights"].defaults['frames'])
super.$$link("start_frame", opts['start_frame']??tmp["IPAdapterWeights"].defaults['start_frame'])
super.$$link("end_frame", opts['end_frame']??tmp["IPAdapterWeights"].defaults['end_frame'])
super.$$link("add_starting_frames", opts['add_starting_frames']??tmp["IPAdapterWeights"].defaults['add_starting_frames'])
super.$$link("add_ending_frames", opts['add_ending_frames']??tmp["IPAdapterWeights"].defaults['add_ending_frames'])
super.$$link("method", opts['method']??tmp["IPAdapterWeights"].defaults['method'])
super.$$link("image", opts['image'])
}

        static defaults = {
    'weights':  "1.0, 0.0",
'timing':  "linear",
'frames':  0,
'start_frame':  0,
'end_frame':  9999,
'add_starting_frames':  0,
'add_ending_frames':  0,
'method':  "full batch"
}
        protected override $$type(){
            return "IPAdapterWeights"
        }
},

    /**
     * IPAdapter Combine Weights from ipadapter/utils
     * @desc 
    */
    "IPAdapterCombineWeights" : class extends Node{
        //Setters
        //set 'weights_1'(value : FLOAT)  { super.$$link(0, value) } 
//set 'weights_2'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'weights'() : FLOAT { return [this.$uid.toString(), 0]  as unknown as FLOAT; }
get 'count'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.weights_1 step: 0.05
		 * @param opts.weights_2 step: 0.05}
        */
        constructor(opts:{
            'weights_1'?: FLOAT,'weights_2'?: FLOAT
        }){
            super(ctx);

            super.$$link("weights_1", opts['weights_1']??tmp["IPAdapterCombineWeights"].defaults['weights_1'])
super.$$link("weights_2", opts['weights_2']??tmp["IPAdapterCombineWeights"].defaults['weights_2'])
}

        static defaults = {
    'weights_1':  0,
'weights_2':  0
}
        protected override $$type(){
            return "IPAdapterCombineWeights"
        }
},

    /**
     * IPAdapter Weights From Strategy from ipadapter/weights
     * @desc 
    */
    "IPAdapterWeightsFromStrategy" : class extends Node{
        //Setters
        //set 'weights_strategy'(value : WEIGHTS_STRATEGY)  { super.$$link(0, value) } 
//set 'image'(value : IMAGE)  { super.$$link(1, value) } 

        //Getters
        get 'weights'() : FLOAT { return [this.$uid.toString(), 0]  as unknown as FLOAT; }
get 'weights_invert'() : FLOAT { return [this.$uid.toString(), 1]  as unknown as FLOAT; }
get 'total_frames'() : INT { return [this.$uid.toString(), 2]  as unknown as INT; }
get 'image_1'() : IMAGE { return [this.$uid.toString(), 3]  as unknown as IMAGE; }
get 'image_2'() : IMAGE { return [this.$uid.toString(), 4]  as unknown as IMAGE; }
get 'weights_strategy'() : WEIGHTS_STRATEGY { return [this.$uid.toString(), 5]  as unknown as WEIGHTS_STRATEGY; }

        /**
          * Constructor
		 * @param opts.weights_strategy
		 * @param opts.image}
        */
        constructor(opts:{
            'weights_strategy': WEIGHTS_STRATEGY,'image'?: IMAGE
        }){
            super(ctx);

            super.$$link("weights_strategy", opts['weights_strategy'])
super.$$link("image", opts['image'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "IPAdapterWeightsFromStrategy"
        }
},

    /**
     * Prompt Schedule From Weights Strategy from ipadapter/weights
     * @desc 
    */
    "IPAdapterPromptScheduleFromWeightsStrategy" : class extends Node{
        //Setters
        //set 'weights_strategy'(value : WEIGHTS_STRATEGY)  { super.$$link(0, value) } 
//set 'prompt'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'prompt_schedule'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.weights_strategy
		 * @param opts.prompt}
        */
        constructor(opts:{
            'weights_strategy': WEIGHTS_STRATEGY,'prompt'?: STRING
        }){
            super(ctx);

            super.$$link("weights_strategy", opts['weights_strategy'])
super.$$link("prompt", opts['prompt']??tmp["IPAdapterPromptScheduleFromWeightsStrategy"].defaults['prompt'])
}

        static defaults = {
    'prompt':  ""
}
        protected override $$type(){
            return "IPAdapterPromptScheduleFromWeightsStrategy"
        }
},

    /**
     * IPAdapter Regional Conditioning from ipadapter/params
     * @desc 
    */
    "IPAdapterRegionalConditioning" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'image_weight'(value : FLOAT)  { super.$$link(1, value) } 
//set 'prompt_weight'(value : FLOAT)  { super.$$link(2, value) } 
//set 'weight_type'(value : 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise'| $dyn)  { super.$$link(3, value) } 
//set 'start_at'(value : FLOAT)  { super.$$link(4, value) } 
//set 'end_at'(value : FLOAT)  { super.$$link(5, value) } 
//set 'mask'(value : MASK)  { super.$$link(6, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(7, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(8, value) } 

        //Getters
        get 'IPADAPTER_PARAMS'() : IPADAPTER_PARAMS { return [this.$uid.toString(), 0]  as unknown as IPADAPTER_PARAMS; }
get 'POSITIVE'() : CONDITIONING { return [this.$uid.toString(), 1]  as unknown as CONDITIONING; }
get 'NEGATIVE'() : CONDITIONING { return [this.$uid.toString(), 2]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.image_weight default: 1 max: 3 min: -1 step: 0.05
		 * @param opts.prompt_weight default: 1 step: 0.05
		 * @param opts.weight_type
		 * @param opts.start_at step: 0.001
		 * @param opts.end_at default: 1 step: 0.001
		 * @param opts.mask
		 * @param opts.positive
		 * @param opts.negative}
        */
        constructor(opts:{
            'image': IMAGE,'image_weight'?: FLOAT,'prompt_weight'?: FLOAT,'weight_type': 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise'| $dyn,'start_at'?: FLOAT,'end_at'?: FLOAT,'mask'?: MASK,'positive'?: CONDITIONING,'negative'?: CONDITIONING
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("image_weight", opts['image_weight']??tmp["IPAdapterRegionalConditioning"].defaults['image_weight'])
super.$$link("prompt_weight", opts['prompt_weight']??tmp["IPAdapterRegionalConditioning"].defaults['prompt_weight'])
super.$$link("weight_type", opts['weight_type'])
super.$$link("start_at", opts['start_at']??tmp["IPAdapterRegionalConditioning"].defaults['start_at'])
super.$$link("end_at", opts['end_at']??tmp["IPAdapterRegionalConditioning"].defaults['end_at'])
super.$$link("mask", opts['mask'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
}

        static defaults = {
    'image_weight':  1,
'prompt_weight':  1,
'start_at':  0,
'end_at':  1
}
        protected override $$type(){
            return "IPAdapterRegionalConditioning"
        }
},

    /**
     * IPAdapter Combine Params from ipadapter/params
     * @desc 
    */
    "IPAdapterCombineParams" : class extends Node{
        //Setters
        //set 'params_1'(value : IPADAPTER_PARAMS)  { super.$$link(0, value) } 
//set 'params_2'(value : IPADAPTER_PARAMS)  { super.$$link(1, value) } 
//set 'params_3'(value : IPADAPTER_PARAMS)  { super.$$link(2, value) } 
//set 'params_4'(value : IPADAPTER_PARAMS)  { super.$$link(3, value) } 
//set 'params_5'(value : IPADAPTER_PARAMS)  { super.$$link(4, value) } 

        //Getters
        get 'IPADAPTER_PARAMS'() : IPADAPTER_PARAMS { return [this.$uid.toString(), 0]  as unknown as IPADAPTER_PARAMS; }

        /**
          * Constructor
		 * @param opts.params_1
		 * @param opts.params_2
		 * @param opts.params_3
		 * @param opts.params_4
		 * @param opts.params_5}
        */
        constructor(opts:{
            'params_1': IPADAPTER_PARAMS,'params_2': IPADAPTER_PARAMS,'params_3'?: IPADAPTER_PARAMS,'params_4'?: IPADAPTER_PARAMS,'params_5'?: IPADAPTER_PARAMS
        }){
            super(ctx);

            super.$$link("params_1", opts['params_1'])
super.$$link("params_2", opts['params_2'])
super.$$link("params_3", opts['params_3'])
super.$$link("params_4", opts['params_4'])
super.$$link("params_5", opts['params_5'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "IPAdapterCombineParams"
        }
},

    /**
     * Video Combine 🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢
     * @desc <div>Video Combine</div><div><div id=VHS_shortdesc style="font-size: .8em">Combine an image sequence into a video</div></div><div><div vhs_title=Inputs style="display: flex; font-size: 0.8em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em; width: 1.5em">[-]</div><div style="width: 100%">Inputs: <div vhs_title=images style="display: flex; font-size: 0.8em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em; width: 1.5em">[-]</div><div style="width: 100%">images: The images to be turned into a video</div></div><div vhs_title=audio style="display: flex; font-size: 0.8em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em; width: 1.5em">[-]</div><div style="width: 100%">audio: (optional) audio to add to the video</div></div><div vhs_title=meta_batch style="display: flex; font-size: 0.8em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em; width: 1.5em">[-]</div><div style="width: 100%">meta_batch: (optional) Connect to a Meta Batch manager to divide extremely long image sequences into sub batches. See the documentation for Meta Batch Manager</div></div><div vhs_title=vae style="display: flex; font-size: 0.8em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em; width: 1.5em">[-]</div><div style="width: 100%">vae: (optional) If provided, the node will take latents as input instead of images. This drastically reduces the required RAM (not VRAM) required when working with very long sequences</div></div></div></div><div vhs_title=Widgets style="display: flex; font-size: 0.8em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em; width: 1.5em">[-]</div><div style="width: 100%">Widgets: <div vhs_title=frame_rate style="display: flex; font-size: 0.8em" class="VHS_collapse VHS_precollapse"><div style="color: #AAA; height: 1.5em; width: 1.5em">[-]</div><div style="width: 100%">frame_rate: The frame rate  which will be used for the output video. Consider converting this to an input and connecting this  to a load Video with Video Info(Loaded)->fps. When including audio, failure to properly set this will result in audio desync</div></div><div vhs_title=loop_count style="display: flex; font-size: 0.8em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em; width: 1.5em">[-]</div><div style="width: 100%">loop_count: The number of additional times the video should repeat.</div></div><div vhs_title=filename_prefix style="display: flex; font-size: 0.8em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em; width: 1.5em">[-]</div><div style="width: 100%">filename_prefix: A prefix to add to the name of the output filename. This can include subfolders or format strings.</div></div><div vhs_title=format style="display: flex; font-size: 0.8em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em; width: 1.5em">[-]</div><div style="width: 100%">format: The output format to use. Formats starting with, 'image' are saved with PIL, but formats starting with 'video' utilize the video_formats system. 'video' options require ffmpeg and selecting one frequently adds additional options to the node.</div></div><div vhs_title=pingpong style="display: flex; font-size: 0.8em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em; width: 1.5em">[-]</div><div style="width: 100%">pingpong: Play the video normally, then repeat the video in reverse so that it 'pingpongs' back and forth. This is frequently used to minimize the appearance of skips on very short animations.</div></div><div vhs_title=save_output style="display: flex; font-size: 0.8em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em; width: 1.5em">[-]</div><div style="width: 100%">save_output: Specifies if output files should be saved to the output folder, or the temporary output folder</div></div></div></div><div vhs_title=Common Format Widgets style="display: flex; font-size: 0.8em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em; width: 1.5em">[-]</div><div style="width: 100%">Common Format Widgets: <div vhs_title=crf style="display: flex; font-size: 0.8em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em; width: 1.5em">[-]</div><div style="width: 100%">crf: Determines how much to prioritize quality over filesize. Numbers vary between formats, but on each format that includes it, the default value provides visually loss less output</div></div><div vhs_title=pix_fmt style="display: flex; font-size: 0.8em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em; width: 1.5em">[-]</div><div style="width: 100%">pix_fmt: <div>The pixel format to use for output. Alternative options will often have higher quality at the cost of increased file size and  reduced compatibility with external software.</div><div><div vhs_title=yuv420p style="display: flex; font-size: 1em" class="VHS_collapse VHS_precollapse"><div style="color: #AAA; height: 1.5em; width: 1.5em">[-]</div><div style="width: 100%">yuv420p: The most common and default format</div></div><div vhs_title=yuv420p10le style="display: flex; font-size: 1em" class="VHS_collapse VHS_precollapse"><div style="color: #AAA; height: 1.5em; width: 1.5em">[-]</div><div style="width: 100%">yuv420p10le: Use 10 bit color depth. This can improve color quality when combined with 16bit input color depth</div></div><div vhs_title=yuva420p style="display: flex; font-size: 1em" class="VHS_collapse VHS_precollapse"><div style="color: #AAA; height: 1.5em; width: 1.5em">[-]</div><div style="width: 100%">yuva420p: Include transparency in the output video</div></div></div></div></div><div vhs_title=input_color_depth style="display: flex; font-size: 0.8em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em; width: 1.5em">[-]</div><div style="width: 100%">input_color_depth: VHS supports outputting 16bit images. While this produces higher quality output, the difference usually isn't visible without postprocessing and it significantly increases file size and processing time.</div></div><div vhs_title=save_metadata style="display: flex; font-size: 0.8em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em; width: 1.5em">[-]</div><div style="width: 100%">save_metadata: Determines if metadata for the workflow should be included in the output video file</div></div></div></div></div>
    */
    "VHS_VideoCombine" : class extends Node{
        //Setters
        //set 'frame_rate'(value : FLOAT)  { super.$$link(0, value) } 
//set 'loop_count'(value : INT)  { super.$$link(1, value) } 
//set 'filename_prefix'(value : STRING)  { super.$$link(2, value) } 
//set 'format'(value : 'image/gif'|'image/webp'|'video/16bit-png'|'video/8bit-png'|'video/ProRes,profile,1,2,3,4,[object Object]'|'video/av1-webm,pix_fmt,yuv420p10le,yuv420p,crf,INT,[object Object],input_color_depth,8bit,16bit,save_metadata,BOOLEAN,[object Object]'|'video/ffmpeg-gif,dither,bayer,heckbert,floyd_steinberg,sierra2,sierra2_4a,sierra3,burkes,atkinson,none,[object Object],[0:v] split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse=dither=$val'|'video/h264-mp4,pix_fmt,yuv420p,yuv420p10le,crf,INT,[object Object],save_metadata,BOOLEAN,[object Object]'|'video/h265-mp4,pix_fmt,yuv420p10le,yuv420p,crf,INT,[object Object],save_metadata,BOOLEAN,[object Object]'|'video/nvenc_h264-mp4,pix_fmt,yuv420p,yuv420p10le,rgba,bitrate,INT,[object Object],megabit,BOOLEAN,[object Object],save_metadata,BOOLEAN,[object Object]'|'video/nvenc_hevc-mp4,pix_fmt,yuv420p,yuv420p10le,rgba,bitrate,INT,[object Object],megabit,BOOLEAN,[object Object],save_metadata,BOOLEAN,[object Object]'|'video/webm,pix_fmt,yuv420p,yuva420p,crf,INT,[object Object],save_metadata,BOOLEAN,[object Object]'| $dyn)  { super.$$link(3, value) } 
//set 'pingpong'(value : BOOLEAN)  { super.$$link(4, value) } 
//set 'save_output'(value : BOOLEAN)  { super.$$link(5, value) } 
//set 'images'(value : IMAGE)  { super.$$link(6, value) } 
//set 'audio'(value : AUDIO)  { super.$$link(7, value) } 
//set 'meta_batch'(value : VHS_BatchManager)  { super.$$link(8, value) } 
//set 'vae'(value : VAE)  { super.$$link(9, value) } 
//set 'latents'(value : LATENT)  { super.$$link(10, value) } 

        //Getters
        get 'Filenames'() : VHS_FILENAMES { return [this.$uid.toString(), 0]  as unknown as VHS_FILENAMES; }

        /**
          * Constructor
		 * @param opts.frame_rate default: 8 max: undefined min: 1 step: 1
		 * @param opts.loop_count step: 1
		 * @param opts.filename_prefix default: "AnimateDiff"
		 * @param opts.format
		 * @param opts.pingpong
		 * @param opts.save_output default: true
		 * @param opts.images
		 * @param opts.audio
		 * @param opts.meta_batch
		 * @param opts.vae
		 * @param opts.latents}
        */
        constructor(opts:{
            'frame_rate'?: FLOAT,'loop_count'?: INT,'filename_prefix'?: STRING,'format': 'image/gif'|'image/webp'|'video/16bit-png'|'video/8bit-png'|'video/ProRes,profile,1,2,3,4,[object Object]'|'video/av1-webm,pix_fmt,yuv420p10le,yuv420p,crf,INT,[object Object],input_color_depth,8bit,16bit,save_metadata,BOOLEAN,[object Object]'|'video/ffmpeg-gif,dither,bayer,heckbert,floyd_steinberg,sierra2,sierra2_4a,sierra3,burkes,atkinson,none,[object Object],[0:v] split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse=dither=$val'|'video/h264-mp4,pix_fmt,yuv420p,yuv420p10le,crf,INT,[object Object],save_metadata,BOOLEAN,[object Object]'|'video/h265-mp4,pix_fmt,yuv420p10le,yuv420p,crf,INT,[object Object],save_metadata,BOOLEAN,[object Object]'|'video/nvenc_h264-mp4,pix_fmt,yuv420p,yuv420p10le,rgba,bitrate,INT,[object Object],megabit,BOOLEAN,[object Object],save_metadata,BOOLEAN,[object Object]'|'video/nvenc_hevc-mp4,pix_fmt,yuv420p,yuv420p10le,rgba,bitrate,INT,[object Object],megabit,BOOLEAN,[object Object],save_metadata,BOOLEAN,[object Object]'|'video/webm,pix_fmt,yuv420p,yuva420p,crf,INT,[object Object],save_metadata,BOOLEAN,[object Object]'| $dyn,'pingpong'?: BOOLEAN,'save_output'?: BOOLEAN,'images'?: IMAGE,'audio'?: AUDIO,'meta_batch'?: VHS_BatchManager,'vae'?: VAE,'latents'?: LATENT
        }){
            super(ctx);

            super.$$link("frame_rate", opts['frame_rate']??tmp["VHS_VideoCombine"].defaults['frame_rate'])
super.$$link("loop_count", opts['loop_count']??tmp["VHS_VideoCombine"].defaults['loop_count'])
super.$$link("filename_prefix", opts['filename_prefix']??tmp["VHS_VideoCombine"].defaults['filename_prefix'])
super.$$link("format", opts['format'])
super.$$link("pingpong", opts['pingpong']??tmp["VHS_VideoCombine"].defaults['pingpong'])
super.$$link("save_output", opts['save_output']??tmp["VHS_VideoCombine"].defaults['save_output'])
super.$$link("images", opts['images'])
super.$$link("audio", opts['audio'])
super.$$link("meta_batch", opts['meta_batch'])
super.$$link("vae", opts['vae'])
super.$$link("latents", opts['latents'])
}

        static defaults = {
    'frame_rate':  8,
'loop_count':  0,
'filename_prefix':  "AnimateDiff",
'pingpong':  false,
'save_output':  true
}
        protected override $$type(){
            return "VHS_VideoCombine"
        }
},

    /**
     * Load Video (Upload) 🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢
     * @desc 
    */
    "VHS_LoadVideo" : class extends Node{
        //Setters
        //set 'video'(value : void)  { super.$$link(0, value) } 
//set 'force_rate'(value : INT)  { super.$$link(1, value) } 
//set 'force_size'(value : 'Disabled'|'Custom Height'|'Custom Width'|'Custom'|'256x?'|'?x256'|'256x256'|'512x?'|'?x512'|'512x512'| $dyn)  { super.$$link(2, value) } 
//set 'custom_width'(value : INT)  { super.$$link(3, value) } 
//set 'custom_height'(value : INT)  { super.$$link(4, value) } 
//set 'frame_load_cap'(value : INT)  { super.$$link(5, value) } 
//set 'skip_first_frames'(value : INT)  { super.$$link(6, value) } 
//set 'select_every_nth'(value : INT)  { super.$$link(7, value) } 
//set 'meta_batch'(value : VHS_BatchManager)  { super.$$link(8, value) } 
//set 'vae'(value : VAE)  { super.$$link(9, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'frame_count'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }
get 'audio'() : AUDIO { return [this.$uid.toString(), 2]  as unknown as AUDIO; }
get 'video_info'() : VHS_VIDEOINFO { return [this.$uid.toString(), 3]  as unknown as VHS_VIDEOINFO; }
get 'LATENT'() : LATENT { return [this.$uid.toString(), 4]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.video
		 * @param opts.force_rate step: 1
		 * @param opts.force_size
		 * @param opts.custom_width default: 512 step: 8
		 * @param opts.custom_height default: 512 step: 8
		 * @param opts.frame_load_cap step: 1
		 * @param opts.skip_first_frames step: 1
		 * @param opts.select_every_nth default: 1 max: 9007199254740991 min: 1 step: 1
		 * @param opts.meta_batch
		 * @param opts.vae}
        */
        constructor(opts:{
            'video': void,'force_rate'?: INT,'force_size': 'Disabled'|'Custom Height'|'Custom Width'|'Custom'|'256x?'|'?x256'|'256x256'|'512x?'|'?x512'|'512x512'| $dyn,'custom_width'?: INT,'custom_height'?: INT,'frame_load_cap'?: INT,'skip_first_frames'?: INT,'select_every_nth'?: INT,'meta_batch'?: VHS_BatchManager,'vae'?: VAE
        }){
            super(ctx);

            super.$$link("video", opts['video'])
super.$$link("force_rate", opts['force_rate']??tmp["VHS_LoadVideo"].defaults['force_rate'])
super.$$link("force_size", opts['force_size'])
super.$$link("custom_width", opts['custom_width']??tmp["VHS_LoadVideo"].defaults['custom_width'])
super.$$link("custom_height", opts['custom_height']??tmp["VHS_LoadVideo"].defaults['custom_height'])
super.$$link("frame_load_cap", opts['frame_load_cap']??tmp["VHS_LoadVideo"].defaults['frame_load_cap'])
super.$$link("skip_first_frames", opts['skip_first_frames']??tmp["VHS_LoadVideo"].defaults['skip_first_frames'])
super.$$link("select_every_nth", opts['select_every_nth']??tmp["VHS_LoadVideo"].defaults['select_every_nth'])
super.$$link("meta_batch", opts['meta_batch'])
super.$$link("vae", opts['vae'])
}

        static defaults = {
    'force_rate':  0,
'custom_width':  512,
'custom_height':  512,
'frame_load_cap':  0,
'skip_first_frames':  0,
'select_every_nth':  1
}
        protected override $$type(){
            return "VHS_LoadVideo"
        }
},

    /**
     * Load Video (Path) 🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢
     * @desc 
    */
    "VHS_LoadVideoPath" : class extends Node{
        //Setters
        //set 'video'(value : STRING)  { super.$$link(0, value) } 
//set 'force_rate'(value : INT)  { super.$$link(1, value) } 
//set 'force_size'(value : 'Disabled'|'Custom Height'|'Custom Width'|'Custom'|'256x?'|'?x256'|'256x256'|'512x?'|'?x512'|'512x512'| $dyn)  { super.$$link(2, value) } 
//set 'custom_width'(value : INT)  { super.$$link(3, value) } 
//set 'custom_height'(value : INT)  { super.$$link(4, value) } 
//set 'frame_load_cap'(value : INT)  { super.$$link(5, value) } 
//set 'skip_first_frames'(value : INT)  { super.$$link(6, value) } 
//set 'select_every_nth'(value : INT)  { super.$$link(7, value) } 
//set 'meta_batch'(value : VHS_BatchManager)  { super.$$link(8, value) } 
//set 'vae'(value : VAE)  { super.$$link(9, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'frame_count'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }
get 'audio'() : AUDIO { return [this.$uid.toString(), 2]  as unknown as AUDIO; }
get 'video_info'() : VHS_VIDEOINFO { return [this.$uid.toString(), 3]  as unknown as VHS_VIDEOINFO; }
get 'LATENT'() : LATENT { return [this.$uid.toString(), 4]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.video default: "X://insert/path/here.mp4"
		 * @param opts.force_rate step: 1
		 * @param opts.force_size
		 * @param opts.custom_width default: 512 step: 8
		 * @param opts.custom_height default: 512 step: 8
		 * @param opts.frame_load_cap step: 1
		 * @param opts.skip_first_frames step: 1
		 * @param opts.select_every_nth default: 1 max: 9007199254740991 min: 1 step: 1
		 * @param opts.meta_batch
		 * @param opts.vae}
        */
        constructor(opts:{
            'video'?: STRING,'force_rate'?: INT,'force_size': 'Disabled'|'Custom Height'|'Custom Width'|'Custom'|'256x?'|'?x256'|'256x256'|'512x?'|'?x512'|'512x512'| $dyn,'custom_width'?: INT,'custom_height'?: INT,'frame_load_cap'?: INT,'skip_first_frames'?: INT,'select_every_nth'?: INT,'meta_batch'?: VHS_BatchManager,'vae'?: VAE
        }){
            super(ctx);

            super.$$link("video", opts['video']??tmp["VHS_LoadVideoPath"].defaults['video'])
super.$$link("force_rate", opts['force_rate']??tmp["VHS_LoadVideoPath"].defaults['force_rate'])
super.$$link("force_size", opts['force_size'])
super.$$link("custom_width", opts['custom_width']??tmp["VHS_LoadVideoPath"].defaults['custom_width'])
super.$$link("custom_height", opts['custom_height']??tmp["VHS_LoadVideoPath"].defaults['custom_height'])
super.$$link("frame_load_cap", opts['frame_load_cap']??tmp["VHS_LoadVideoPath"].defaults['frame_load_cap'])
super.$$link("skip_first_frames", opts['skip_first_frames']??tmp["VHS_LoadVideoPath"].defaults['skip_first_frames'])
super.$$link("select_every_nth", opts['select_every_nth']??tmp["VHS_LoadVideoPath"].defaults['select_every_nth'])
super.$$link("meta_batch", opts['meta_batch'])
super.$$link("vae", opts['vae'])
}

        static defaults = {
    'video':  "X://insert/path/here.mp4",
'force_rate':  0,
'custom_width':  512,
'custom_height':  512,
'frame_load_cap':  0,
'skip_first_frames':  0,
'select_every_nth':  1
}
        protected override $$type(){
            return "VHS_LoadVideoPath"
        }
},

    /**
     * Load Images (Upload) 🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢
     * @desc 
    */
    "VHS_LoadImages" : class extends Node{
        //Setters
        //set 'directory'(value : 'COFFIN'|'pasted'| $dyn)  { super.$$link(0, value) } 
//set 'image_load_cap'(value : INT)  { super.$$link(1, value) } 
//set 'skip_first_images'(value : INT)  { super.$$link(2, value) } 
//set 'select_every_nth'(value : INT)  { super.$$link(3, value) } 
//set 'meta_batch'(value : VHS_BatchManager)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'MASK'() : MASK { return [this.$uid.toString(), 1]  as unknown as MASK; }
get 'frame_count'() : INT { return [this.$uid.toString(), 2]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.directory
		 * @param opts.image_load_cap step: 1
		 * @param opts.skip_first_images step: 1
		 * @param opts.select_every_nth default: 1 max: 9007199254740991 min: 1 step: 1
		 * @param opts.meta_batch}
        */
        constructor(opts:{
            'directory': 'COFFIN'|'pasted'| $dyn,'image_load_cap'?: INT,'skip_first_images'?: INT,'select_every_nth'?: INT,'meta_batch'?: VHS_BatchManager
        }){
            super(ctx);

            super.$$link("directory", opts['directory'])
super.$$link("image_load_cap", opts['image_load_cap']??tmp["VHS_LoadImages"].defaults['image_load_cap'])
super.$$link("skip_first_images", opts['skip_first_images']??tmp["VHS_LoadImages"].defaults['skip_first_images'])
super.$$link("select_every_nth", opts['select_every_nth']??tmp["VHS_LoadImages"].defaults['select_every_nth'])
super.$$link("meta_batch", opts['meta_batch'])
}

        static defaults = {
    'image_load_cap':  0,
'skip_first_images':  0,
'select_every_nth':  1
}
        protected override $$type(){
            return "VHS_LoadImages"
        }
},

    /**
     * Load Images (Path) 🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢
     * @desc 
    */
    "VHS_LoadImagesPath" : class extends Node{
        //Setters
        //set 'directory'(value : STRING)  { super.$$link(0, value) } 
//set 'image_load_cap'(value : INT)  { super.$$link(1, value) } 
//set 'skip_first_images'(value : INT)  { super.$$link(2, value) } 
//set 'select_every_nth'(value : INT)  { super.$$link(3, value) } 
//set 'meta_batch'(value : VHS_BatchManager)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'MASK'() : MASK { return [this.$uid.toString(), 1]  as unknown as MASK; }
get 'frame_count'() : INT { return [this.$uid.toString(), 2]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.directory default: "X://path/to/images"
		 * @param opts.image_load_cap step: 1
		 * @param opts.skip_first_images step: 1
		 * @param opts.select_every_nth default: 1 max: 9007199254740991 min: 1 step: 1
		 * @param opts.meta_batch}
        */
        constructor(opts:{
            'directory'?: STRING,'image_load_cap'?: INT,'skip_first_images'?: INT,'select_every_nth'?: INT,'meta_batch'?: VHS_BatchManager
        }){
            super(ctx);

            super.$$link("directory", opts['directory']??tmp["VHS_LoadImagesPath"].defaults['directory'])
super.$$link("image_load_cap", opts['image_load_cap']??tmp["VHS_LoadImagesPath"].defaults['image_load_cap'])
super.$$link("skip_first_images", opts['skip_first_images']??tmp["VHS_LoadImagesPath"].defaults['skip_first_images'])
super.$$link("select_every_nth", opts['select_every_nth']??tmp["VHS_LoadImagesPath"].defaults['select_every_nth'])
super.$$link("meta_batch", opts['meta_batch'])
}

        static defaults = {
    'directory':  "X://path/to/images",
'image_load_cap':  0,
'skip_first_images':  0,
'select_every_nth':  1
}
        protected override $$type(){
            return "VHS_LoadImagesPath"
        }
},

    /**
     * Load Audio (Path)🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢/audio
     * @desc 
    */
    "VHS_LoadAudio" : class extends Node{
        //Setters
        //set 'audio_file'(value : STRING)  { super.$$link(0, value) } 
//set 'seek_seconds'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'audio'() : AUDIO { return [this.$uid.toString(), 0]  as unknown as AUDIO; }

        /**
          * Constructor
		 * @param opts.audio_file default: "input/"
		 * @param opts.seek_seconds}
        */
        constructor(opts:{
            'audio_file'?: STRING,'seek_seconds'?: FLOAT
        }){
            super(ctx);

            super.$$link("audio_file", opts['audio_file']??tmp["VHS_LoadAudio"].defaults['audio_file'])
super.$$link("seek_seconds", opts['seek_seconds']??tmp["VHS_LoadAudio"].defaults['seek_seconds'])
}

        static defaults = {
    'audio_file':  "input/",
'seek_seconds':  0
}
        protected override $$type(){
            return "VHS_LoadAudio"
        }
},

    /**
     * Load Audio (Upload)🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢/audio
     * @desc 
    */
    "VHS_LoadAudioUpload" : class extends Node{
        //Setters
        //set 'audio'(value : void)  { super.$$link(0, value) } 
//set 'start_time'(value : FLOAT)  { super.$$link(1, value) } 
//set 'duration'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'audio'() : AUDIO { return [this.$uid.toString(), 0]  as unknown as AUDIO; }

        /**
          * Constructor
		 * @param opts.audio
		 * @param opts.start_time step: 0.01
		 * @param opts.duration step: 0.01}
        */
        constructor(opts:{
            'audio': void,'start_time'?: FLOAT,'duration'?: FLOAT
        }){
            super(ctx);

            super.$$link("audio", opts['audio'])
super.$$link("start_time", opts['start_time']??tmp["VHS_LoadAudioUpload"].defaults['start_time'])
super.$$link("duration", opts['duration']??tmp["VHS_LoadAudioUpload"].defaults['duration'])
}

        static defaults = {
    'start_time':  0,
'duration':  0
}
        protected override $$type(){
            return "VHS_LoadAudioUpload"
        }
},

    /**
     * Audio to legacy VHS_AUDIO🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢/audio
     * @desc 
    */
    "VHS_AudioToVHSAudio" : class extends Node{
        //Setters
        //set 'audio'(value : AUDIO)  { super.$$link(0, value) } 

        //Getters
        get 'vhs_audio'() : VHS_AUDIO { return [this.$uid.toString(), 0]  as unknown as VHS_AUDIO; }

        /**
          * Constructor
		 * @param opts.audio}
        */
        constructor(opts:{
            'audio': AUDIO
        }){
            super(ctx);

            super.$$link("audio", opts['audio'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "VHS_AudioToVHSAudio"
        }
},

    /**
     * Legacy VHS_AUDIO to Audio🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢/audio
     * @desc 
    */
    "VHS_VHSAudioToAudio" : class extends Node{
        //Setters
        //set 'vhs_audio'(value : VHS_AUDIO)  { super.$$link(0, value) } 

        //Getters
        get 'audio'() : AUDIO { return [this.$uid.toString(), 0]  as unknown as AUDIO; }

        /**
          * Constructor
		 * @param opts.vhs_audio}
        */
        constructor(opts:{
            'vhs_audio': VHS_AUDIO
        }){
            super(ctx);

            super.$$link("vhs_audio", opts['vhs_audio'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "VHS_VHSAudioToAudio"
        }
},

    /**
     * Prune Outputs 🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢
     * @desc 
    */
    "VHS_PruneOutputs" : class extends Node{
        //Setters
        //set 'filenames'(value : VHS_FILENAMES)  { super.$$link(0, value) } 
//set 'options'(value : 'Intermediate'|'Intermediate and Utility'| $dyn)  { super.$$link(1, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.filenames
		 * @param opts.options}
        */
        constructor(opts:{
            'filenames': VHS_FILENAMES,'options': 'Intermediate'|'Intermediate and Utility'| $dyn
        }){
            super(ctx);

            super.$$link("filenames", opts['filenames'])
super.$$link("options", opts['options'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "VHS_PruneOutputs"
        }
},

    /**
     * Meta Batch Manager 🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢
     * @desc 
    */
    "VHS_BatchManager" : class extends Node{
        //Setters
        //set 'frames_per_batch'(value : INT)  { super.$$link(0, value) } 

        //Getters
        get 'meta_batch'() : VHS_BatchManager { return [this.$uid.toString(), 0]  as unknown as VHS_BatchManager; }

        /**
          * Constructor
		 * @param opts.frames_per_batch default: 16 max: 128 min: 1 step: 1}
        */
        constructor(opts:{
            'frames_per_batch'?: INT
        }){
            super(ctx);

            super.$$link("frames_per_batch", opts['frames_per_batch']??tmp["VHS_BatchManager"].defaults['frames_per_batch'])
}

        static defaults = {
    'frames_per_batch':  16
}
        protected override $$type(){
            return "VHS_BatchManager"
        }
},

    /**
     * Video Info 🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢
     * @desc 
    */
    "VHS_VideoInfo" : class extends Node{
        //Setters
        //set 'video_info'(value : VHS_VIDEOINFO)  { super.$$link(0, value) } 

        //Getters
        get 'source_fps🟨'() : FLOAT { return [this.$uid.toString(), 0]  as unknown as FLOAT; }
get 'source_frame_count🟨'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }
get 'source_duration🟨'() : FLOAT { return [this.$uid.toString(), 2]  as unknown as FLOAT; }
get 'source_width🟨'() : INT { return [this.$uid.toString(), 3]  as unknown as INT; }
get 'source_height🟨'() : INT { return [this.$uid.toString(), 4]  as unknown as INT; }
get 'loaded_fps🟦'() : FLOAT { return [this.$uid.toString(), 5]  as unknown as FLOAT; }
get 'loaded_frame_count🟦'() : INT { return [this.$uid.toString(), 6]  as unknown as INT; }
get 'loaded_duration🟦'() : FLOAT { return [this.$uid.toString(), 7]  as unknown as FLOAT; }
get 'loaded_width🟦'() : INT { return [this.$uid.toString(), 8]  as unknown as INT; }
get 'loaded_height🟦'() : INT { return [this.$uid.toString(), 9]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.video_info}
        */
        constructor(opts:{
            'video_info': VHS_VIDEOINFO
        }){
            super(ctx);

            super.$$link("video_info", opts['video_info'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "VHS_VideoInfo"
        }
},

    /**
     * Video Info (Source) 🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢
     * @desc 
    */
    "VHS_VideoInfoSource" : class extends Node{
        //Setters
        //set 'video_info'(value : VHS_VIDEOINFO)  { super.$$link(0, value) } 

        //Getters
        get 'fps🟨'() : FLOAT { return [this.$uid.toString(), 0]  as unknown as FLOAT; }
get 'frame_count🟨'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }
get 'duration🟨'() : FLOAT { return [this.$uid.toString(), 2]  as unknown as FLOAT; }
get 'width🟨'() : INT { return [this.$uid.toString(), 3]  as unknown as INT; }
get 'height🟨'() : INT { return [this.$uid.toString(), 4]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.video_info}
        */
        constructor(opts:{
            'video_info': VHS_VIDEOINFO
        }){
            super(ctx);

            super.$$link("video_info", opts['video_info'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "VHS_VideoInfoSource"
        }
},

    /**
     * Video Info (Loaded) 🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢
     * @desc 
    */
    "VHS_VideoInfoLoaded" : class extends Node{
        //Setters
        //set 'video_info'(value : VHS_VIDEOINFO)  { super.$$link(0, value) } 

        //Getters
        get 'fps🟦'() : FLOAT { return [this.$uid.toString(), 0]  as unknown as FLOAT; }
get 'frame_count🟦'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }
get 'duration🟦'() : FLOAT { return [this.$uid.toString(), 2]  as unknown as FLOAT; }
get 'width🟦'() : INT { return [this.$uid.toString(), 3]  as unknown as INT; }
get 'height🟦'() : INT { return [this.$uid.toString(), 4]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.video_info}
        */
        constructor(opts:{
            'video_info': VHS_VIDEOINFO
        }){
            super(ctx);

            super.$$link("video_info", opts['video_info'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "VHS_VideoInfoLoaded"
        }
},

    /**
     * VAE Encode Batched 🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢/batched nodes
     * @desc 
    */
    "VHS_VAEEncodeBatched" : class extends Node{
        //Setters
        //set 'pixels'(value : IMAGE)  { super.$$link(0, value) } 
//set 'vae'(value : VAE)  { super.$$link(1, value) } 
//set 'per_batch'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.pixels
		 * @param opts.vae
		 * @param opts.per_batch default: 16 max: undefined min: 1}
        */
        constructor(opts:{
            'pixels': IMAGE,'vae': VAE,'per_batch'?: INT
        }){
            super(ctx);

            super.$$link("pixels", opts['pixels'])
super.$$link("vae", opts['vae'])
super.$$link("per_batch", opts['per_batch']??tmp["VHS_VAEEncodeBatched"].defaults['per_batch'])
}

        static defaults = {
    'per_batch':  16
}
        protected override $$type(){
            return "VHS_VAEEncodeBatched"
        }
},

    /**
     * VAE Decode Batched 🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢/batched nodes
     * @desc 
    */
    "VHS_VAEDecodeBatched" : class extends Node{
        //Setters
        //set 'samples'(value : LATENT)  { super.$$link(0, value) } 
//set 'vae'(value : VAE)  { super.$$link(1, value) } 
//set 'per_batch'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.samples
		 * @param opts.vae
		 * @param opts.per_batch default: 16 max: undefined min: 1}
        */
        constructor(opts:{
            'samples': LATENT,'vae': VAE,'per_batch'?: INT
        }){
            super(ctx);

            super.$$link("samples", opts['samples'])
super.$$link("vae", opts['vae'])
super.$$link("per_batch", opts['per_batch']??tmp["VHS_VAEDecodeBatched"].defaults['per_batch'])
}

        static defaults = {
    'per_batch':  16
}
        protected override $$type(){
            return "VHS_VAEDecodeBatched"
        }
},

    /**
     * Split Latents 🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢/latent
     * @desc 
    */
    "VHS_SplitLatents" : class extends Node{
        //Setters
        //set 'latents'(value : LATENT)  { super.$$link(0, value) } 
//set 'split_index'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'LATENT_A'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }
get 'A_count'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }
get 'LATENT_B'() : LATENT { return [this.$uid.toString(), 2]  as unknown as LATENT; }
get 'B_count'() : INT { return [this.$uid.toString(), 3]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.latents
		 * @param opts.split_index max: 9007199254740991 min: -9007199254740991 step: 1}
        */
        constructor(opts:{
            'latents': LATENT,'split_index'?: INT
        }){
            super(ctx);

            super.$$link("latents", opts['latents'])
super.$$link("split_index", opts['split_index']??tmp["VHS_SplitLatents"].defaults['split_index'])
}

        static defaults = {
    'split_index':  0
}
        protected override $$type(){
            return "VHS_SplitLatents"
        }
},

    /**
     * Split Images 🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢/image
     * @desc 
    */
    "VHS_SplitImages" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'split_index'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE_A'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'A_count'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }
get 'IMAGE_B'() : IMAGE { return [this.$uid.toString(), 2]  as unknown as IMAGE; }
get 'B_count'() : INT { return [this.$uid.toString(), 3]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.split_index max: 9007199254740991 min: -9007199254740991 step: 1}
        */
        constructor(opts:{
            'images': IMAGE,'split_index'?: INT
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("split_index", opts['split_index']??tmp["VHS_SplitImages"].defaults['split_index'])
}

        static defaults = {
    'split_index':  0
}
        protected override $$type(){
            return "VHS_SplitImages"
        }
},

    /**
     * Split Masks 🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢/mask
     * @desc 
    */
    "VHS_SplitMasks" : class extends Node{
        //Setters
        //set 'mask'(value : MASK)  { super.$$link(0, value) } 
//set 'split_index'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'MASK_A'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }
get 'A_count'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }
get 'MASK_B'() : MASK { return [this.$uid.toString(), 2]  as unknown as MASK; }
get 'B_count'() : INT { return [this.$uid.toString(), 3]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.mask
		 * @param opts.split_index max: 9007199254740991 min: -9007199254740991 step: 1}
        */
        constructor(opts:{
            'mask': MASK,'split_index'?: INT
        }){
            super(ctx);

            super.$$link("mask", opts['mask'])
super.$$link("split_index", opts['split_index']??tmp["VHS_SplitMasks"].defaults['split_index'])
}

        static defaults = {
    'split_index':  0
}
        protected override $$type(){
            return "VHS_SplitMasks"
        }
},

    /**
     * Merge Latents 🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢/latent
     * @desc 
    */
    "VHS_MergeLatents" : class extends Node{
        //Setters
        //set 'latents_A'(value : LATENT)  { super.$$link(0, value) } 
//set 'latents_B'(value : LATENT)  { super.$$link(1, value) } 
//set 'merge_strategy'(value : 'match A'|'match B'|'match smaller'|'match larger'| $dyn)  { super.$$link(2, value) } 
//set 'scale_method'(value : 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp'| $dyn)  { super.$$link(3, value) } 
//set 'crop'(value : 'disabled'|'center'| $dyn)  { super.$$link(4, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }
get 'count'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.latents_A
		 * @param opts.latents_B
		 * @param opts.merge_strategy
		 * @param opts.scale_method
		 * @param opts.crop}
        */
        constructor(opts:{
            'latents_A': LATENT,'latents_B': LATENT,'merge_strategy': 'match A'|'match B'|'match smaller'|'match larger'| $dyn,'scale_method': 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp'| $dyn,'crop': 'disabled'|'center'| $dyn
        }){
            super(ctx);

            super.$$link("latents_A", opts['latents_A'])
super.$$link("latents_B", opts['latents_B'])
super.$$link("merge_strategy", opts['merge_strategy'])
super.$$link("scale_method", opts['scale_method'])
super.$$link("crop", opts['crop'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "VHS_MergeLatents"
        }
},

    /**
     * Merge Images 🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢/image
     * @desc 
    */
    "VHS_MergeImages" : class extends Node{
        //Setters
        //set 'images_A'(value : IMAGE)  { super.$$link(0, value) } 
//set 'images_B'(value : IMAGE)  { super.$$link(1, value) } 
//set 'merge_strategy'(value : 'match A'|'match B'|'match smaller'|'match larger'| $dyn)  { super.$$link(2, value) } 
//set 'scale_method'(value : 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp'| $dyn)  { super.$$link(3, value) } 
//set 'crop'(value : 'disabled'|'center'| $dyn)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'count'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.images_A
		 * @param opts.images_B
		 * @param opts.merge_strategy
		 * @param opts.scale_method
		 * @param opts.crop}
        */
        constructor(opts:{
            'images_A': IMAGE,'images_B': IMAGE,'merge_strategy': 'match A'|'match B'|'match smaller'|'match larger'| $dyn,'scale_method': 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp'| $dyn,'crop': 'disabled'|'center'| $dyn
        }){
            super(ctx);

            super.$$link("images_A", opts['images_A'])
super.$$link("images_B", opts['images_B'])
super.$$link("merge_strategy", opts['merge_strategy'])
super.$$link("scale_method", opts['scale_method'])
super.$$link("crop", opts['crop'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "VHS_MergeImages"
        }
},

    /**
     * Merge Masks 🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢/mask
     * @desc 
    */
    "VHS_MergeMasks" : class extends Node{
        //Setters
        //set 'mask_A'(value : MASK)  { super.$$link(0, value) } 
//set 'mask_B'(value : MASK)  { super.$$link(1, value) } 
//set 'merge_strategy'(value : 'match A'|'match B'|'match smaller'|'match larger'| $dyn)  { super.$$link(2, value) } 
//set 'scale_method'(value : 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp'| $dyn)  { super.$$link(3, value) } 
//set 'crop'(value : 'disabled'|'center'| $dyn)  { super.$$link(4, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }
get 'count'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.mask_A
		 * @param opts.mask_B
		 * @param opts.merge_strategy
		 * @param opts.scale_method
		 * @param opts.crop}
        */
        constructor(opts:{
            'mask_A': MASK,'mask_B': MASK,'merge_strategy': 'match A'|'match B'|'match smaller'|'match larger'| $dyn,'scale_method': 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp'| $dyn,'crop': 'disabled'|'center'| $dyn
        }){
            super(ctx);

            super.$$link("mask_A", opts['mask_A'])
super.$$link("mask_B", opts['mask_B'])
super.$$link("merge_strategy", opts['merge_strategy'])
super.$$link("scale_method", opts['scale_method'])
super.$$link("crop", opts['crop'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "VHS_MergeMasks"
        }
},

    /**
     * Get Latent Count 🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢/latent
     * @desc 
    */
    "VHS_GetLatentCount" : class extends Node{
        //Setters
        //set 'latents'(value : LATENT)  { super.$$link(0, value) } 

        //Getters
        get 'count'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.latents}
        */
        constructor(opts:{
            'latents': LATENT
        }){
            super(ctx);

            super.$$link("latents", opts['latents'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "VHS_GetLatentCount"
        }
},

    /**
     * Get Image Count 🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢/image
     * @desc 
    */
    "VHS_GetImageCount" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        get 'count'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.images}
        */
        constructor(opts:{
            'images': IMAGE
        }){
            super(ctx);

            super.$$link("images", opts['images'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "VHS_GetImageCount"
        }
},

    /**
     * Get Mask Count 🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢/mask
     * @desc 
    */
    "VHS_GetMaskCount" : class extends Node{
        //Setters
        //set 'mask'(value : MASK)  { super.$$link(0, value) } 

        //Getters
        get 'count'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.mask}
        */
        constructor(opts:{
            'mask': MASK
        }){
            super(ctx);

            super.$$link("mask", opts['mask'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "VHS_GetMaskCount"
        }
},

    /**
     * Repeat Latents 🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢/latent
     * @desc 
    */
    "VHS_DuplicateLatents" : class extends Node{
        //Setters
        //set 'latents'(value : LATENT)  { super.$$link(0, value) } 
//set 'multiply_by'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }
get 'count'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.latents
		 * @param opts.multiply_by default: 1 max: 9007199254740991 min: 1 step: 1}
        */
        constructor(opts:{
            'latents': LATENT,'multiply_by'?: INT
        }){
            super(ctx);

            super.$$link("latents", opts['latents'])
super.$$link("multiply_by", opts['multiply_by']??tmp["VHS_DuplicateLatents"].defaults['multiply_by'])
}

        static defaults = {
    'multiply_by':  1
}
        protected override $$type(){
            return "VHS_DuplicateLatents"
        }
},

    /**
     * Repeat Images 🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢/image
     * @desc 
    */
    "VHS_DuplicateImages" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'multiply_by'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'count'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.multiply_by default: 1 max: 9007199254740991 min: 1 step: 1}
        */
        constructor(opts:{
            'images': IMAGE,'multiply_by'?: INT
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("multiply_by", opts['multiply_by']??tmp["VHS_DuplicateImages"].defaults['multiply_by'])
}

        static defaults = {
    'multiply_by':  1
}
        protected override $$type(){
            return "VHS_DuplicateImages"
        }
},

    /**
     * Repeat Masks 🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢/mask
     * @desc 
    */
    "VHS_DuplicateMasks" : class extends Node{
        //Setters
        //set 'mask'(value : MASK)  { super.$$link(0, value) } 
//set 'multiply_by'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }
get 'count'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.mask
		 * @param opts.multiply_by default: 1 max: 9007199254740991 min: 1 step: 1}
        */
        constructor(opts:{
            'mask': MASK,'multiply_by'?: INT
        }){
            super(ctx);

            super.$$link("mask", opts['mask'])
super.$$link("multiply_by", opts['multiply_by']??tmp["VHS_DuplicateMasks"].defaults['multiply_by'])
}

        static defaults = {
    'multiply_by':  1
}
        protected override $$type(){
            return "VHS_DuplicateMasks"
        }
},

    /**
     * Select Every Nth Latent 🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢/latent
     * @desc 
    */
    "VHS_SelectEveryNthLatent" : class extends Node{
        //Setters
        //set 'latents'(value : LATENT)  { super.$$link(0, value) } 
//set 'select_every_nth'(value : INT)  { super.$$link(1, value) } 
//set 'skip_first_latents'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }
get 'count'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.latents
		 * @param opts.select_every_nth default: 1 max: 9007199254740991 min: 1 step: 1
		 * @param opts.skip_first_latents step: 1}
        */
        constructor(opts:{
            'latents': LATENT,'select_every_nth'?: INT,'skip_first_latents'?: INT
        }){
            super(ctx);

            super.$$link("latents", opts['latents'])
super.$$link("select_every_nth", opts['select_every_nth']??tmp["VHS_SelectEveryNthLatent"].defaults['select_every_nth'])
super.$$link("skip_first_latents", opts['skip_first_latents']??tmp["VHS_SelectEveryNthLatent"].defaults['skip_first_latents'])
}

        static defaults = {
    'select_every_nth':  1,
'skip_first_latents':  0
}
        protected override $$type(){
            return "VHS_SelectEveryNthLatent"
        }
},

    /**
     * Select Every Nth Image 🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢/image
     * @desc 
    */
    "VHS_SelectEveryNthImage" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'select_every_nth'(value : INT)  { super.$$link(1, value) } 
//set 'skip_first_images'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'count'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.select_every_nth default: 1 max: 9007199254740991 min: 1 step: 1
		 * @param opts.skip_first_images step: 1}
        */
        constructor(opts:{
            'images': IMAGE,'select_every_nth'?: INT,'skip_first_images'?: INT
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("select_every_nth", opts['select_every_nth']??tmp["VHS_SelectEveryNthImage"].defaults['select_every_nth'])
super.$$link("skip_first_images", opts['skip_first_images']??tmp["VHS_SelectEveryNthImage"].defaults['skip_first_images'])
}

        static defaults = {
    'select_every_nth':  1,
'skip_first_images':  0
}
        protected override $$type(){
            return "VHS_SelectEveryNthImage"
        }
},

    /**
     * Select Every Nth Mask 🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢/mask
     * @desc 
    */
    "VHS_SelectEveryNthMask" : class extends Node{
        //Setters
        //set 'mask'(value : MASK)  { super.$$link(0, value) } 
//set 'select_every_nth'(value : INT)  { super.$$link(1, value) } 
//set 'skip_first_masks'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }
get 'count'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.mask
		 * @param opts.select_every_nth default: 1 max: 9007199254740991 min: 1 step: 1
		 * @param opts.skip_first_masks step: 1}
        */
        constructor(opts:{
            'mask': MASK,'select_every_nth'?: INT,'skip_first_masks'?: INT
        }){
            super(ctx);

            super.$$link("mask", opts['mask'])
super.$$link("select_every_nth", opts['select_every_nth']??tmp["VHS_SelectEveryNthMask"].defaults['select_every_nth'])
super.$$link("skip_first_masks", opts['skip_first_masks']??tmp["VHS_SelectEveryNthMask"].defaults['skip_first_masks'])
}

        static defaults = {
    'select_every_nth':  1,
'skip_first_masks':  0
}
        protected override $$type(){
            return "VHS_SelectEveryNthMask"
        }
},

    /**
     * Select Latents 🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢/latent
     * @desc Use comma-separated indexes to select items in the given order.
Supports negative indexes, python-style ranges (end index excluded),
as well as range step.

Acceptable entries (assuming 16 items provided, so idxs 0 to 15 exist):
0         -> Returns [0]
-1        -> Returns [15]
0, 1, 13  -> Returns [0, 1, 13]
0:5, 13   -> Returns [0, 1, 2, 3, 4, 13]
0:-1      -> Returns [0, 1, 2, ..., 13, 14]
0:5:-1    -> Returns [4, 3, 2, 1, 0]
0:5:2     -> Returns [0, 2, 4]
::-1     -> Returns [15, 14, 13, ..., 2, 1, 0]

    */
    "VHS_SelectLatents" : class extends Node{
        //Setters
        //set 'latent'(value : LATENT)  { super.$$link(0, value) } 
//set 'indexes'(value : STRING)  { super.$$link(1, value) } 
//set 'err_if_missing'(value : BOOLEAN)  { super.$$link(2, value) } 
//set 'err_if_empty'(value : BOOLEAN)  { super.$$link(3, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.latent
		 * @param opts.indexes default: "0"
		 * @param opts.err_if_missing default: true
		 * @param opts.err_if_empty default: true}
        */
        constructor(opts:{
            'latent': LATENT,'indexes'?: STRING,'err_if_missing'?: BOOLEAN,'err_if_empty'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("latent", opts['latent'])
super.$$link("indexes", opts['indexes']??tmp["VHS_SelectLatents"].defaults['indexes'])
super.$$link("err_if_missing", opts['err_if_missing']??tmp["VHS_SelectLatents"].defaults['err_if_missing'])
super.$$link("err_if_empty", opts['err_if_empty']??tmp["VHS_SelectLatents"].defaults['err_if_empty'])
}

        static defaults = {
    'indexes':  "0",
'err_if_missing':  true,
'err_if_empty':  true
}
        protected override $$type(){
            return "VHS_SelectLatents"
        }
},

    /**
     * Select Images 🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢/image
     * @desc Use comma-separated indexes to select items in the given order.
Supports negative indexes, python-style ranges (end index excluded),
as well as range step.

Acceptable entries (assuming 16 items provided, so idxs 0 to 15 exist):
0         -> Returns [0]
-1        -> Returns [15]
0, 1, 13  -> Returns [0, 1, 13]
0:5, 13   -> Returns [0, 1, 2, 3, 4, 13]
0:-1      -> Returns [0, 1, 2, ..., 13, 14]
0:5:-1    -> Returns [4, 3, 2, 1, 0]
0:5:2     -> Returns [0, 2, 4]
::-1     -> Returns [15, 14, 13, ..., 2, 1, 0]

    */
    "VHS_SelectImages" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'indexes'(value : STRING)  { super.$$link(1, value) } 
//set 'err_if_missing'(value : BOOLEAN)  { super.$$link(2, value) } 
//set 'err_if_empty'(value : BOOLEAN)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.indexes default: "0"
		 * @param opts.err_if_missing default: true
		 * @param opts.err_if_empty default: true}
        */
        constructor(opts:{
            'image': IMAGE,'indexes'?: STRING,'err_if_missing'?: BOOLEAN,'err_if_empty'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("indexes", opts['indexes']??tmp["VHS_SelectImages"].defaults['indexes'])
super.$$link("err_if_missing", opts['err_if_missing']??tmp["VHS_SelectImages"].defaults['err_if_missing'])
super.$$link("err_if_empty", opts['err_if_empty']??tmp["VHS_SelectImages"].defaults['err_if_empty'])
}

        static defaults = {
    'indexes':  "0",
'err_if_missing':  true,
'err_if_empty':  true
}
        protected override $$type(){
            return "VHS_SelectImages"
        }
},

    /**
     * Select Masks 🎥🅥🅗🅢 from Video Helper Suite 🎥🅥🅗🅢/mask
     * @desc Use comma-separated indexes to select items in the given order.
Supports negative indexes, python-style ranges (end index excluded),
as well as range step.

Acceptable entries (assuming 16 items provided, so idxs 0 to 15 exist):
0         -> Returns [0]
-1        -> Returns [15]
0, 1, 13  -> Returns [0, 1, 13]
0:5, 13   -> Returns [0, 1, 2, 3, 4, 13]
0:-1      -> Returns [0, 1, 2, ..., 13, 14]
0:5:-1    -> Returns [4, 3, 2, 1, 0]
0:5:2     -> Returns [0, 2, 4]
::-1     -> Returns [15, 14, 13, ..., 2, 1, 0]

    */
    "VHS_SelectMasks" : class extends Node{
        //Setters
        //set 'mask'(value : MASK)  { super.$$link(0, value) } 
//set 'indexes'(value : STRING)  { super.$$link(1, value) } 
//set 'err_if_missing'(value : BOOLEAN)  { super.$$link(2, value) } 
//set 'err_if_empty'(value : BOOLEAN)  { super.$$link(3, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.mask
		 * @param opts.indexes default: "0"
		 * @param opts.err_if_missing default: true
		 * @param opts.err_if_empty default: true}
        */
        constructor(opts:{
            'mask': MASK,'indexes'?: STRING,'err_if_missing'?: BOOLEAN,'err_if_empty'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("mask", opts['mask'])
super.$$link("indexes", opts['indexes']??tmp["VHS_SelectMasks"].defaults['indexes'])
super.$$link("err_if_missing", opts['err_if_missing']??tmp["VHS_SelectMasks"].defaults['err_if_missing'])
super.$$link("err_if_empty", opts['err_if_empty']??tmp["VHS_SelectMasks"].defaults['err_if_empty'])
}

        static defaults = {
    'indexes':  "0",
'err_if_missing':  true,
'err_if_empty':  true
}
        protected override $$type(){
            return "VHS_SelectMasks"
        }
},

    /**
     * Live Portrait from ♾️Mixlab/Video/LivePortrait
     * @desc 
    */
    "LivePortraitNode" : class extends Node{
        //Setters
        //set 'source_image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'driving_video'(value : SCENE_VIDEO)  { super.$$link(1, value) } 
//set 'crop_info'(value : CROP_INFO)  { super.$$link(2, value) } 
//set 'driving_video_reverse_align'(value : BOOLEAN)  { super.$$link(3, value) } 

        //Getters
        get 'video'() : SCENE_VIDEO { return [this.$uid.toString(), 0]  as unknown as SCENE_VIDEO; }
get 'video_concat'() : SCENE_VIDEO { return [this.$uid.toString(), 1]  as unknown as SCENE_VIDEO; }

        /**
          * Constructor
		 * @param opts.source_image
		 * @param opts.driving_video
		 * @param opts.crop_info
		 * @param opts.driving_video_reverse_align default: true}
        */
        constructor(opts:{
            'source_image': IMAGE,'driving_video': SCENE_VIDEO,'crop_info'?: CROP_INFO,'driving_video_reverse_align'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("source_image", opts['source_image'])
super.$$link("driving_video", opts['driving_video'])
super.$$link("crop_info", opts['crop_info'])
super.$$link("driving_video_reverse_align", opts['driving_video_reverse_align']??tmp["LivePortraitNode"].defaults['driving_video_reverse_align'])
}

        static defaults = {
    'driving_video_reverse_align':  true
}
        protected override $$type(){
            return "LivePortraitNode"
        }
},

    /**
     * Live Portrait for Video from ♾️Mixlab/Video/LivePortrait
     * @desc 
    */
    "LivePortraitVideoNode" : class extends Node{
        //Setters
        //set 'source_image_batch'(value : IMAGE)  { super.$$link(0, value) } 
//set 'driving_video'(value : SCENE_VIDEO)  { super.$$link(1, value) } 

        //Getters
        get 'video'() : SCENE_VIDEO { return [this.$uid.toString(), 0]  as unknown as SCENE_VIDEO; }
get 'video_concat'() : SCENE_VIDEO { return [this.$uid.toString(), 1]  as unknown as SCENE_VIDEO; }

        /**
          * Constructor
		 * @param opts.source_image_batch
		 * @param opts.driving_video}
        */
        constructor(opts:{
            'source_image_batch': IMAGE,'driving_video': SCENE_VIDEO
        }){
            super(ctx);

            super.$$link("source_image_batch", opts['source_image_batch'])
super.$$link("driving_video", opts['driving_video'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "LivePortraitVideoNode"
        }
},

    /**
     * Face Crop Info from ♾️Mixlab/Video/LivePortrait
     * @desc 
    */
    "FaceCropInfo" : class extends Node{
        //Setters
        //set 'source_image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'face_sorting_direction'(value : 'left-right'|'large-small'| $dyn)  { super.$$link(1, value) } 
//set 'face_index'(value : INT)  { super.$$link(2, value) } 
//set 'debug'(value : BOOLEAN)  { super.$$link(3, value) } 

        //Getters
        get 'crop_info'() : CROP_INFO { return [this.$uid.toString(), 0]  as unknown as CROP_INFO; }
get 'debug_image'() : IMAGE { return [this.$uid.toString(), 1]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.source_image
		 * @param opts.face_sorting_direction default: "left-right"
		 * @param opts.face_index max: 200 min: -1 step: 1
		 * @param opts.debug}
        */
        constructor(opts:{
            'source_image': IMAGE,'face_sorting_direction'?: 'left-right'|'large-small'| $dyn,'face_index'?: INT,'debug'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("source_image", opts['source_image'])
super.$$link("face_sorting_direction", opts['face_sorting_direction']??tmp["FaceCropInfo"].defaults['face_sorting_direction'])
super.$$link("face_index", opts['face_index']??tmp["FaceCropInfo"].defaults['face_index'])
super.$$link("debug", opts['debug']??tmp["FaceCropInfo"].defaults['debug'])
}

        static defaults = {
    'face_sorting_direction':  "left-right",
'face_index':  0,
'debug':  false
}
        protected override $$type(){
            return "FaceCropInfo"
        }
},

    /**
     * Retargeting from ♾️Mixlab/Video/LivePortrait
     * @desc 
    */
    "Retargeting" : class extends Node{
        //Setters
        //set 'crop_info'(value : CROP_INFO)  { super.$$link(0, value) } 
//set 'lip'(value : BOOLEAN)  { super.$$link(1, value) } 
//set 'eye'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'crop_info'() : CROP_INFO { return [this.$uid.toString(), 0]  as unknown as CROP_INFO; }

        /**
          * Constructor
		 * @param opts.crop_info
		 * @param opts.lip default: true
		 * @param opts.eye default: true}
        */
        constructor(opts:{
            'crop_info': CROP_INFO,'lip'?: BOOLEAN,'eye'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("crop_info", opts['crop_info'])
super.$$link("lip", opts['lip']??tmp["Retargeting"].defaults['lip'])
super.$$link("eye", opts['eye']??tmp["Retargeting"].defaults['eye'])
}

        static defaults = {
    'lip':  true,
'eye':  true
}
        protected override $$type(){
            return "Retargeting"
        }
},

    /**
     * Expression Editor from ♾️Mixlab/Face
     * @desc 
    */
    "ExpressionEditor_" : class extends Node{
        //Setters
        //set 'src_image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'rotate_pitch'(value : FLOAT)  { super.$$link(1, value) } 
//set 'rotate_yaw'(value : FLOAT)  { super.$$link(2, value) } 
//set 'rotate_roll'(value : FLOAT)  { super.$$link(3, value) } 
//set 'blink'(value : FLOAT)  { super.$$link(4, value) } 
//set 'eyebrow'(value : FLOAT)  { super.$$link(5, value) } 
//set 'wink'(value : FLOAT)  { super.$$link(6, value) } 
//set 'pupil_x'(value : FLOAT)  { super.$$link(7, value) } 
//set 'pupil_y'(value : FLOAT)  { super.$$link(8, value) } 
//set 'aaa'(value : FLOAT)  { super.$$link(9, value) } 
//set 'eee'(value : FLOAT)  { super.$$link(10, value) } 
//set 'woo'(value : FLOAT)  { super.$$link(11, value) } 
//set 'smile'(value : FLOAT)  { super.$$link(12, value) } 
//set 'src_weight'(value : FLOAT)  { super.$$link(13, value) } 
//set 'expression_json'(value : STRING)  { super.$$link(14, value) } 

        //Getters
        get 'image'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'expression_json'() : STRING { return [this.$uid.toString(), 1]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.src_image
		 * @param opts.rotate_pitch max: 50 min: -50 step: 0.2
		 * @param opts.rotate_yaw max: 50 min: -50 step: 0.2
		 * @param opts.rotate_roll max: 50 min: -50 step: 0.2
		 * @param opts.blink max: 15 min: -30 step: 0.2
		 * @param opts.eyebrow max: 25 min: -30 step: 0.2
		 * @param opts.wink max: 25 min: -10 step: 0.2
		 * @param opts.pupil_x max: 15 min: -15 step: 0.2
		 * @param opts.pupil_y max: 15 min: -15 step: 0.2
		 * @param opts.aaa max: 120 min: -30 step: 1
		 * @param opts.eee max: 15 min: -20 step: 0.2
		 * @param opts.woo max: 15 min: -20 step: 0.2
		 * @param opts.smile max: 1.3 min: -0.3 step: 0.01
		 * @param opts.src_weight default: 1 step: 0.01
		 * @param opts.expression_json}
        */
        constructor(opts:{
            'src_image': IMAGE,'rotate_pitch'?: FLOAT,'rotate_yaw'?: FLOAT,'rotate_roll'?: FLOAT,'blink'?: FLOAT,'eyebrow'?: FLOAT,'wink'?: FLOAT,'pupil_x'?: FLOAT,'pupil_y'?: FLOAT,'aaa'?: FLOAT,'eee'?: FLOAT,'woo'?: FLOAT,'smile'?: FLOAT,'src_weight'?: FLOAT,'expression_json'?: STRING
        }){
            super(ctx);

            super.$$link("src_image", opts['src_image'])
super.$$link("rotate_pitch", opts['rotate_pitch']??tmp["ExpressionEditor_"].defaults['rotate_pitch'])
super.$$link("rotate_yaw", opts['rotate_yaw']??tmp["ExpressionEditor_"].defaults['rotate_yaw'])
super.$$link("rotate_roll", opts['rotate_roll']??tmp["ExpressionEditor_"].defaults['rotate_roll'])
super.$$link("blink", opts['blink']??tmp["ExpressionEditor_"].defaults['blink'])
super.$$link("eyebrow", opts['eyebrow']??tmp["ExpressionEditor_"].defaults['eyebrow'])
super.$$link("wink", opts['wink']??tmp["ExpressionEditor_"].defaults['wink'])
super.$$link("pupil_x", opts['pupil_x']??tmp["ExpressionEditor_"].defaults['pupil_x'])
super.$$link("pupil_y", opts['pupil_y']??tmp["ExpressionEditor_"].defaults['pupil_y'])
super.$$link("aaa", opts['aaa']??tmp["ExpressionEditor_"].defaults['aaa'])
super.$$link("eee", opts['eee']??tmp["ExpressionEditor_"].defaults['eee'])
super.$$link("woo", opts['woo']??tmp["ExpressionEditor_"].defaults['woo'])
super.$$link("smile", opts['smile']??tmp["ExpressionEditor_"].defaults['smile'])
super.$$link("src_weight", opts['src_weight']??tmp["ExpressionEditor_"].defaults['src_weight'])
super.$$link("expression_json", opts['expression_json'])
}

        static defaults = {
    'rotate_pitch':  0,
'rotate_yaw':  0,
'rotate_roll':  0,
'blink':  0,
'eyebrow':  0,
'wink':  0,
'pupil_x':  0,
'pupil_y':  0,
'aaa':  0,
'eee':  0,
'woo':  0,
'smile':  0,
'src_weight':  1
}
        protected override $$type(){
            return "ExpressionEditor_"
        }
},

    /**
     * Expression Video from ♾️Mixlab/Video/LivePortrait
     * @desc 
    */
    "ExpressionVideoNode" : class extends Node{
        //Setters
        //set 'src_image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'from_expression'(value : STRING)  { super.$$link(1, value) } 
//set 'to_expression'(value : STRING)  { super.$$link(2, value) } 
//set 'interpolation_type'(value : 'linear'|'nearest'|'cubic'| $dyn)  { super.$$link(3, value) } 
//set 'interpolations_num'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'frames'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.src_image
		 * @param opts.from_expression
		 * @param opts.to_expression
		 * @param opts.interpolation_type default: "cubic"
		 * @param opts.interpolations_num default: 1 max: 204800000000 min: 1 step: 1}
        */
        constructor(opts:{
            'src_image': IMAGE,'from_expression': STRING,'to_expression': STRING,'interpolation_type'?: 'linear'|'nearest'|'cubic'| $dyn,'interpolations_num'?: INT
        }){
            super(ctx);

            super.$$link("src_image", opts['src_image'])
super.$$link("from_expression", opts['from_expression'])
super.$$link("to_expression", opts['to_expression'])
super.$$link("interpolation_type", opts['interpolation_type']??tmp["ExpressionVideoNode"].defaults['interpolation_type'])
super.$$link("interpolations_num", opts['interpolations_num']??tmp["ExpressionVideoNode"].defaults['interpolations_num'])
}

        static defaults = {
    'interpolation_type':  "cubic",
'interpolations_num':  1
}
        protected override $$type(){
            return "ExpressionVideoNode"
        }
},

    /**
     * Expression Video 2 Video from ♾️Mixlab/Video/LivePortrait
     * @desc 
    */
    "ExpressionVideo2VideoNode" : class extends Node{
        //Setters
        //set 'src_frames'(value : IMAGE)  { super.$$link(0, value) } 
//set 'from_expression'(value : STRING)  { super.$$link(1, value) } 
//set 'to_expression'(value : STRING)  { super.$$link(2, value) } 
//set 'interpolation_type'(value : 'linear'|'nearest'|'cubic'| $dyn)  { super.$$link(3, value) } 

        //Getters
        get 'frames'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.src_frames
		 * @param opts.from_expression
		 * @param opts.to_expression
		 * @param opts.interpolation_type default: "cubic"}
        */
        constructor(opts:{
            'src_frames': IMAGE,'from_expression': STRING,'to_expression': STRING,'interpolation_type'?: 'linear'|'nearest'|'cubic'| $dyn
        }){
            super(ctx);

            super.$$link("src_frames", opts['src_frames'])
super.$$link("from_expression", opts['from_expression'])
super.$$link("to_expression", opts['to_expression'])
super.$$link("interpolation_type", opts['interpolation_type']??tmp["ExpressionVideo2VideoNode"].defaults['interpolation_type'])
}

        static defaults = {
    'interpolation_type':  "cubic"
}
        protected override $$type(){
            return "ExpressionVideo2VideoNode"
        }
},

    /**
     * Context Big (rgthree) from rgthree
     * @desc 
    */
    "Context Big (rgthree)" : class extends Node{
        //Setters
        //set 'base_ctx'(value : RGTHREE_CONTEXT)  { super.$$link(0, value) } 
//set 'model'(value : MODEL)  { super.$$link(1, value) } 
//set 'clip'(value : CLIP)  { super.$$link(2, value) } 
//set 'vae'(value : VAE)  { super.$$link(3, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(4, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(5, value) } 
//set 'latent'(value : LATENT)  { super.$$link(6, value) } 
//set 'images'(value : IMAGE)  { super.$$link(7, value) } 
//set 'seed'(value : INT)  { super.$$link(8, value) } 
//set 'steps'(value : INT)  { super.$$link(9, value) } 
//set 'step_refiner'(value : INT)  { super.$$link(10, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(11, value) } 
//set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(12, value) } 
//set 'sampler'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(13, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn)  { super.$$link(14, value) } 
//set 'clip_width'(value : INT)  { super.$$link(15, value) } 
//set 'clip_height'(value : INT)  { super.$$link(16, value) } 
//set 'text_pos_g'(value : STRING)  { super.$$link(17, value) } 
//set 'text_pos_l'(value : STRING)  { super.$$link(18, value) } 
//set 'text_neg_g'(value : STRING)  { super.$$link(19, value) } 
//set 'text_neg_l'(value : STRING)  { super.$$link(20, value) } 
//set 'mask'(value : MASK)  { super.$$link(21, value) } 
//set 'control_net'(value : CONTROL_NET)  { super.$$link(22, value) } 

        //Getters
        get 'CONTEXT'() : RGTHREE_CONTEXT { return [this.$uid.toString(), 0]  as unknown as RGTHREE_CONTEXT; }
get 'MODEL'() : MODEL { return [this.$uid.toString(), 1]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this.$uid.toString(), 2]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this.$uid.toString(), 3]  as unknown as VAE; }
get 'POSITIVE'() : CONDITIONING { return [this.$uid.toString(), 4]  as unknown as CONDITIONING; }
get 'NEGATIVE'() : CONDITIONING { return [this.$uid.toString(), 5]  as unknown as CONDITIONING; }
get 'LATENT'() : LATENT { return [this.$uid.toString(), 6]  as unknown as LATENT; }
get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 7]  as unknown as IMAGE; }
get 'SEED'() : INT { return [this.$uid.toString(), 8]  as unknown as INT; }
get 'STEPS'() : INT { return [this.$uid.toString(), 9]  as unknown as INT; }
get 'STEP_REFINER'() : INT { return [this.$uid.toString(), 10]  as unknown as INT; }
get 'CFG'() : FLOAT { return [this.$uid.toString(), 11]  as unknown as FLOAT; }
get 'CKPT_NAME'() : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn { return [this.$uid.toString(), 12]  as unknown as 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn; }
get 'SAMPLER'() : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn { return [this.$uid.toString(), 13]  as unknown as 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn; }
get 'SCHEDULER'() : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn { return [this.$uid.toString(), 14]  as unknown as 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn; }
get 'CLIP_WIDTH'() : INT { return [this.$uid.toString(), 15]  as unknown as INT; }
get 'CLIP_HEIGHT'() : INT { return [this.$uid.toString(), 16]  as unknown as INT; }
get 'TEXT_POS_G'() : STRING { return [this.$uid.toString(), 17]  as unknown as STRING; }
get 'TEXT_POS_L'() : STRING { return [this.$uid.toString(), 18]  as unknown as STRING; }
get 'TEXT_NEG_G'() : STRING { return [this.$uid.toString(), 19]  as unknown as STRING; }
get 'TEXT_NEG_L'() : STRING { return [this.$uid.toString(), 20]  as unknown as STRING; }
get 'MASK'() : MASK { return [this.$uid.toString(), 21]  as unknown as MASK; }
get 'CONTROL_NET'() : CONTROL_NET { return [this.$uid.toString(), 22]  as unknown as CONTROL_NET; }

        /**
          * Constructor
		 * @param opts.base_ctx
		 * @param opts.model
		 * @param opts.clip
		 * @param opts.vae
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.latent
		 * @param opts.images
		 * @param opts.seed
		 * @param opts.steps
		 * @param opts.step_refiner
		 * @param opts.cfg
		 * @param opts.ckpt_name
		 * @param opts.sampler
		 * @param opts.scheduler
		 * @param opts.clip_width
		 * @param opts.clip_height
		 * @param opts.text_pos_g
		 * @param opts.text_pos_l
		 * @param opts.text_neg_g
		 * @param opts.text_neg_l
		 * @param opts.mask
		 * @param opts.control_net}
        */
        constructor(opts:{
            'base_ctx'?: RGTHREE_CONTEXT,'model'?: MODEL,'clip'?: CLIP,'vae'?: VAE,'positive'?: CONDITIONING,'negative'?: CONDITIONING,'latent'?: LATENT,'images'?: IMAGE,'seed'?: INT,'steps'?: INT,'step_refiner'?: INT,'cfg'?: FLOAT,'ckpt_name'?: 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'sampler'?: 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler'?: 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn,'clip_width'?: INT,'clip_height'?: INT,'text_pos_g'?: STRING,'text_pos_l'?: STRING,'text_neg_g'?: STRING,'text_neg_l'?: STRING,'mask'?: MASK,'control_net'?: CONTROL_NET
        }){
            super(ctx);

            super.$$link("base_ctx", opts['base_ctx'])
super.$$link("model", opts['model'])
super.$$link("clip", opts['clip'])
super.$$link("vae", opts['vae'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("latent", opts['latent'])
super.$$link("images", opts['images'])
super.$$link("seed", opts['seed'])
super.$$link("steps", opts['steps'])
super.$$link("step_refiner", opts['step_refiner'])
super.$$link("cfg", opts['cfg'])
super.$$link("ckpt_name", opts['ckpt_name'])
super.$$link("sampler", opts['sampler'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("clip_width", opts['clip_width'])
super.$$link("clip_height", opts['clip_height'])
super.$$link("text_pos_g", opts['text_pos_g'])
super.$$link("text_pos_l", opts['text_pos_l'])
super.$$link("text_neg_g", opts['text_neg_g'])
super.$$link("text_neg_l", opts['text_neg_l'])
super.$$link("mask", opts['mask'])
super.$$link("control_net", opts['control_net'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Context Big (rgthree)"
        }
},

    /**
     * Context (rgthree) from rgthree
     * @desc 
    */
    "Context (rgthree)" : class extends Node{
        //Setters
        //set 'base_ctx'(value : RGTHREE_CONTEXT)  { super.$$link(0, value) } 
//set 'model'(value : MODEL)  { super.$$link(1, value) } 
//set 'clip'(value : CLIP)  { super.$$link(2, value) } 
//set 'vae'(value : VAE)  { super.$$link(3, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(4, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(5, value) } 
//set 'latent'(value : LATENT)  { super.$$link(6, value) } 
//set 'images'(value : IMAGE)  { super.$$link(7, value) } 
//set 'seed'(value : INT)  { super.$$link(8, value) } 

        //Getters
        get 'CONTEXT'() : RGTHREE_CONTEXT { return [this.$uid.toString(), 0]  as unknown as RGTHREE_CONTEXT; }
get 'MODEL'() : MODEL { return [this.$uid.toString(), 1]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this.$uid.toString(), 2]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this.$uid.toString(), 3]  as unknown as VAE; }
get 'POSITIVE'() : CONDITIONING { return [this.$uid.toString(), 4]  as unknown as CONDITIONING; }
get 'NEGATIVE'() : CONDITIONING { return [this.$uid.toString(), 5]  as unknown as CONDITIONING; }
get 'LATENT'() : LATENT { return [this.$uid.toString(), 6]  as unknown as LATENT; }
get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 7]  as unknown as IMAGE; }
get 'SEED'() : INT { return [this.$uid.toString(), 8]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.base_ctx
		 * @param opts.model
		 * @param opts.clip
		 * @param opts.vae
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.latent
		 * @param opts.images
		 * @param opts.seed}
        */
        constructor(opts:{
            'base_ctx'?: RGTHREE_CONTEXT,'model'?: MODEL,'clip'?: CLIP,'vae'?: VAE,'positive'?: CONDITIONING,'negative'?: CONDITIONING,'latent'?: LATENT,'images'?: IMAGE,'seed'?: INT
        }){
            super(ctx);

            super.$$link("base_ctx", opts['base_ctx'])
super.$$link("model", opts['model'])
super.$$link("clip", opts['clip'])
super.$$link("vae", opts['vae'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("latent", opts['latent'])
super.$$link("images", opts['images'])
super.$$link("seed", opts['seed'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Context (rgthree)"
        }
},

    /**
     * Context Switch (rgthree) from rgthree
     * @desc 
    */
    "Context Switch (rgthree)" : class extends Node{
        //Setters
        

        //Getters
        get 'CONTEXT'() : RGTHREE_CONTEXT { return [this.$uid.toString(), 0]  as unknown as RGTHREE_CONTEXT; }
get 'MODEL'() : MODEL { return [this.$uid.toString(), 1]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this.$uid.toString(), 2]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this.$uid.toString(), 3]  as unknown as VAE; }
get 'POSITIVE'() : CONDITIONING { return [this.$uid.toString(), 4]  as unknown as CONDITIONING; }
get 'NEGATIVE'() : CONDITIONING { return [this.$uid.toString(), 5]  as unknown as CONDITIONING; }
get 'LATENT'() : LATENT { return [this.$uid.toString(), 6]  as unknown as LATENT; }
get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 7]  as unknown as IMAGE; }
get 'SEED'() : INT { return [this.$uid.toString(), 8]  as unknown as INT; }

        /**
          * Constructor
}
        */
        constructor(opts:{
            
        }){
            super(ctx);

            
}

        static defaults = {
    
}
        protected override $$type(){
            return "Context Switch (rgthree)"
        }
},

    /**
     * Context Switch Big (rgthree) from rgthree
     * @desc 
    */
    "Context Switch Big (rgthree)" : class extends Node{
        //Setters
        

        //Getters
        get 'CONTEXT'() : RGTHREE_CONTEXT { return [this.$uid.toString(), 0]  as unknown as RGTHREE_CONTEXT; }
get 'MODEL'() : MODEL { return [this.$uid.toString(), 1]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this.$uid.toString(), 2]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this.$uid.toString(), 3]  as unknown as VAE; }
get 'POSITIVE'() : CONDITIONING { return [this.$uid.toString(), 4]  as unknown as CONDITIONING; }
get 'NEGATIVE'() : CONDITIONING { return [this.$uid.toString(), 5]  as unknown as CONDITIONING; }
get 'LATENT'() : LATENT { return [this.$uid.toString(), 6]  as unknown as LATENT; }
get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 7]  as unknown as IMAGE; }
get 'SEED'() : INT { return [this.$uid.toString(), 8]  as unknown as INT; }
get 'STEPS'() : INT { return [this.$uid.toString(), 9]  as unknown as INT; }
get 'STEP_REFINER'() : INT { return [this.$uid.toString(), 10]  as unknown as INT; }
get 'CFG'() : FLOAT { return [this.$uid.toString(), 11]  as unknown as FLOAT; }
get 'CKPT_NAME'() : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn { return [this.$uid.toString(), 12]  as unknown as 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn; }
get 'SAMPLER'() : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn { return [this.$uid.toString(), 13]  as unknown as 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn; }
get 'SCHEDULER'() : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn { return [this.$uid.toString(), 14]  as unknown as 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn; }
get 'CLIP_WIDTH'() : INT { return [this.$uid.toString(), 15]  as unknown as INT; }
get 'CLIP_HEIGHT'() : INT { return [this.$uid.toString(), 16]  as unknown as INT; }
get 'TEXT_POS_G'() : STRING { return [this.$uid.toString(), 17]  as unknown as STRING; }
get 'TEXT_POS_L'() : STRING { return [this.$uid.toString(), 18]  as unknown as STRING; }
get 'TEXT_NEG_G'() : STRING { return [this.$uid.toString(), 19]  as unknown as STRING; }
get 'TEXT_NEG_L'() : STRING { return [this.$uid.toString(), 20]  as unknown as STRING; }
get 'MASK'() : MASK { return [this.$uid.toString(), 21]  as unknown as MASK; }
get 'CONTROL_NET'() : CONTROL_NET { return [this.$uid.toString(), 22]  as unknown as CONTROL_NET; }

        /**
          * Constructor
}
        */
        constructor(opts:{
            
        }){
            super(ctx);

            
}

        static defaults = {
    
}
        protected override $$type(){
            return "Context Switch Big (rgthree)"
        }
},

    /**
     * Context Merge (rgthree) from rgthree
     * @desc 
    */
    "Context Merge (rgthree)" : class extends Node{
        //Setters
        

        //Getters
        get 'CONTEXT'() : RGTHREE_CONTEXT { return [this.$uid.toString(), 0]  as unknown as RGTHREE_CONTEXT; }
get 'MODEL'() : MODEL { return [this.$uid.toString(), 1]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this.$uid.toString(), 2]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this.$uid.toString(), 3]  as unknown as VAE; }
get 'POSITIVE'() : CONDITIONING { return [this.$uid.toString(), 4]  as unknown as CONDITIONING; }
get 'NEGATIVE'() : CONDITIONING { return [this.$uid.toString(), 5]  as unknown as CONDITIONING; }
get 'LATENT'() : LATENT { return [this.$uid.toString(), 6]  as unknown as LATENT; }
get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 7]  as unknown as IMAGE; }
get 'SEED'() : INT { return [this.$uid.toString(), 8]  as unknown as INT; }

        /**
          * Constructor
}
        */
        constructor(opts:{
            
        }){
            super(ctx);

            
}

        static defaults = {
    
}
        protected override $$type(){
            return "Context Merge (rgthree)"
        }
},

    /**
     * Context Merge Big (rgthree) from rgthree
     * @desc 
    */
    "Context Merge Big (rgthree)" : class extends Node{
        //Setters
        

        //Getters
        get 'CONTEXT'() : RGTHREE_CONTEXT { return [this.$uid.toString(), 0]  as unknown as RGTHREE_CONTEXT; }
get 'MODEL'() : MODEL { return [this.$uid.toString(), 1]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this.$uid.toString(), 2]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this.$uid.toString(), 3]  as unknown as VAE; }
get 'POSITIVE'() : CONDITIONING { return [this.$uid.toString(), 4]  as unknown as CONDITIONING; }
get 'NEGATIVE'() : CONDITIONING { return [this.$uid.toString(), 5]  as unknown as CONDITIONING; }
get 'LATENT'() : LATENT { return [this.$uid.toString(), 6]  as unknown as LATENT; }
get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 7]  as unknown as IMAGE; }
get 'SEED'() : INT { return [this.$uid.toString(), 8]  as unknown as INT; }
get 'STEPS'() : INT { return [this.$uid.toString(), 9]  as unknown as INT; }
get 'STEP_REFINER'() : INT { return [this.$uid.toString(), 10]  as unknown as INT; }
get 'CFG'() : FLOAT { return [this.$uid.toString(), 11]  as unknown as FLOAT; }
get 'CKPT_NAME'() : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn { return [this.$uid.toString(), 12]  as unknown as 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn; }
get 'SAMPLER'() : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn { return [this.$uid.toString(), 13]  as unknown as 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn; }
get 'SCHEDULER'() : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn { return [this.$uid.toString(), 14]  as unknown as 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn; }
get 'CLIP_WIDTH'() : INT { return [this.$uid.toString(), 15]  as unknown as INT; }
get 'CLIP_HEIGHT'() : INT { return [this.$uid.toString(), 16]  as unknown as INT; }
get 'TEXT_POS_G'() : STRING { return [this.$uid.toString(), 17]  as unknown as STRING; }
get 'TEXT_POS_L'() : STRING { return [this.$uid.toString(), 18]  as unknown as STRING; }
get 'TEXT_NEG_G'() : STRING { return [this.$uid.toString(), 19]  as unknown as STRING; }
get 'TEXT_NEG_L'() : STRING { return [this.$uid.toString(), 20]  as unknown as STRING; }
get 'MASK'() : MASK { return [this.$uid.toString(), 21]  as unknown as MASK; }
get 'CONTROL_NET'() : CONTROL_NET { return [this.$uid.toString(), 22]  as unknown as CONTROL_NET; }

        /**
          * Constructor
}
        */
        constructor(opts:{
            
        }){
            super(ctx);

            
}

        static defaults = {
    
}
        protected override $$type(){
            return "Context Merge Big (rgthree)"
        }
},

    /**
     * Display Int (rgthree) from rgthree
     * @desc 
    */
    "Display Int (rgthree)" : class extends Node{
        //Setters
        //set 'input'(value : INT)  { super.$$link(0, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.input}
        */
        constructor(opts:{
            'input': INT
        }){
            super(ctx);

            super.$$link("input", opts['input'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Display Int (rgthree)"
        }
},

    /**
     * Display Any (rgthree) from rgthree
     * @desc 
    */
    "Display Any (rgthree)" : class extends Node{
        //Setters
        //set 'source'(value : ANY)  { super.$$link(0, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.source}
        */
        constructor(opts:{
            'source': ANY
        }){
            super(ctx);

            super.$$link("source", opts['source'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Display Any (rgthree)"
        }
},

    /**
     * Lora Loader Stack (rgthree) from rgthree
     * @desc 
    */
    "Lora Loader Stack (rgthree)" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'clip'(value : CLIP)  { super.$$link(1, value) } 
//set 'lora_01'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(2, value) } 
//set 'strength_01'(value : FLOAT)  { super.$$link(3, value) } 
//set 'lora_02'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(4, value) } 
//set 'strength_02'(value : FLOAT)  { super.$$link(5, value) } 
//set 'lora_03'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(6, value) } 
//set 'strength_03'(value : FLOAT)  { super.$$link(7, value) } 
//set 'lora_04'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(8, value) } 
//set 'strength_04'(value : FLOAT)  { super.$$link(9, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this.$uid.toString(), 1]  as unknown as CLIP; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.clip
		 * @param opts.lora_01
		 * @param opts.strength_01 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_02
		 * @param opts.strength_02 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_03
		 * @param opts.strength_03 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_04
		 * @param opts.strength_04 default: 1 max: 10 min: -10 step: 0.01}
        */
        constructor(opts:{
            'model': MODEL,'clip': CLIP,'lora_01': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'strength_01'?: FLOAT,'lora_02': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'strength_02'?: FLOAT,'lora_03': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'strength_03'?: FLOAT,'lora_04': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'strength_04'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("clip", opts['clip'])
super.$$link("lora_01", opts['lora_01'])
super.$$link("strength_01", opts['strength_01']??tmp["Lora Loader Stack (rgthree)"].defaults['strength_01'])
super.$$link("lora_02", opts['lora_02'])
super.$$link("strength_02", opts['strength_02']??tmp["Lora Loader Stack (rgthree)"].defaults['strength_02'])
super.$$link("lora_03", opts['lora_03'])
super.$$link("strength_03", opts['strength_03']??tmp["Lora Loader Stack (rgthree)"].defaults['strength_03'])
super.$$link("lora_04", opts['lora_04'])
super.$$link("strength_04", opts['strength_04']??tmp["Lora Loader Stack (rgthree)"].defaults['strength_04'])
}

        static defaults = {
    'strength_01':  1,
'strength_02':  1,
'strength_03':  1,
'strength_04':  1
}
        protected override $$type(){
            return "Lora Loader Stack (rgthree)"
        }
},

    /**
     * Seed (rgthree) from rgthree
     * @desc 
    */
    "Seed (rgthree)" : class extends Node{
        //Setters
        //set 'seed'(value : INT)  { super.$$link(0, value) } 

        //Getters
        get 'SEED'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.seed max: 1125899906842624 min: -1125899906842624}
        */
        constructor(opts:{
            'seed'?: INT
        }){
            super(ctx);

            super.$$link("seed", opts['seed']??tmp["Seed (rgthree)"].defaults['seed'])
}

        static defaults = {
    'seed':  0
}
        protected override $$type(){
            return "Seed (rgthree)"
        }
},

    /**
     * Image Inset Crop (rgthree) from rgthree
     * @desc 
    */
    "Image Inset Crop (rgthree)" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'measurement'(value : 'Pixels'|'Percentage'| $dyn)  { super.$$link(1, value) } 
//set 'left'(value : INT)  { super.$$link(2, value) } 
//set 'right'(value : INT)  { super.$$link(3, value) } 
//set 'top'(value : INT)  { super.$$link(4, value) } 
//set 'bottom'(value : INT)  { super.$$link(5, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.measurement
		 * @param opts.left step: 8
		 * @param opts.right step: 8
		 * @param opts.top step: 8
		 * @param opts.bottom step: 8}
        */
        constructor(opts:{
            'image': IMAGE,'measurement': 'Pixels'|'Percentage'| $dyn,'left'?: INT,'right'?: INT,'top'?: INT,'bottom'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("measurement", opts['measurement'])
super.$$link("left", opts['left']??tmp["Image Inset Crop (rgthree)"].defaults['left'])
super.$$link("right", opts['right']??tmp["Image Inset Crop (rgthree)"].defaults['right'])
super.$$link("top", opts['top']??tmp["Image Inset Crop (rgthree)"].defaults['top'])
super.$$link("bottom", opts['bottom']??tmp["Image Inset Crop (rgthree)"].defaults['bottom'])
}

        static defaults = {
    'left':  0,
'right':  0,
'top':  0,
'bottom':  0
}
        protected override $$type(){
            return "Image Inset Crop (rgthree)"
        }
},

    /**
     * Power Prompt (rgthree) from rgthree
     * @desc 
    */
    "Power Prompt (rgthree)" : class extends Node{
        //Setters
        //set 'prompt'(value : STRING)  { super.$$link(0, value) } 
//set 'opt_model'(value : MODEL)  { super.$$link(1, value) } 
//set 'opt_clip'(value : CLIP)  { super.$$link(2, value) } 
//set 'insert_lora'(value : 'CHOOSE'|'DISABLE LORAS'|'SDXL-Lightning/sdxl_lightning_2step_lora'|'SDXL-Lightning/sdxl_lightning_4step_lora'|'SDXL-Lightning/sdxl_lightning_8step_lora'|'ipadapter/ip-adapter-faceid-plus_sd15_lora'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora'|'ipadapter/ip-adapter-faceid_sd15_lora'|'lcm-lora-sdv1-5'|'lcm-lora-sdxl'|'lcm/SD1.5/pytorch_lora_weights'|'lcm/SDXL/pytorch_lora_weights'|'lcm/SSD-1B/pytorch_lora_weights'|'sd_xl_offset_example-lora_1.0'|'sdxl/pxx4_v1_alpha'|'sdxl/xl_shuimo-000012'|'slider-concepts/age'|'slider-concepts/cartoon_style'|'slider-concepts/chubby'|'slider-concepts/clay_style'|'slider-concepts/cluttered_room'|'slider-concepts/curlyhair'|'slider-concepts/dark_weather'|'slider-concepts/eyebrow'|'slider-concepts/eyesize'|'slider-concepts/festive'|'slider-concepts/fix_hands'|'slider-concepts/long_hair'|'slider-concepts/muscular'|'slider-concepts/pixar_style'|'slider-concepts/professional'|'slider-concepts/repair_slider'|'slider-concepts/sculpture_style'|'slider-concepts/smiling'|'slider-concepts/stylegan_latent1'|'slider-concepts/stylegan_latent2'|'slider-concepts/suprised_look'|'slider-concepts/tropical_weather'|'slider-concepts/winter_weather'| $dyn)  { super.$$link(3, value) } 
//set 'insert_embedding'(value : 'CHOOSE'| $dyn)  { super.$$link(4, value) } 
//set 'insert_saved'(value : 'CHOOSE'| $dyn)  { super.$$link(5, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }
get 'MODEL'() : MODEL { return [this.$uid.toString(), 1]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this.$uid.toString(), 2]  as unknown as CLIP; }
get 'TEXT'() : STRING { return [this.$uid.toString(), 3]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.prompt
		 * @param opts.opt_model
		 * @param opts.opt_clip
		 * @param opts.insert_lora
		 * @param opts.insert_embedding
		 * @param opts.insert_saved}
        */
        constructor(opts:{
            'prompt': STRING,'opt_model'?: MODEL,'opt_clip'?: CLIP,'insert_lora'?: 'CHOOSE'|'DISABLE LORAS'|'SDXL-Lightning/sdxl_lightning_2step_lora'|'SDXL-Lightning/sdxl_lightning_4step_lora'|'SDXL-Lightning/sdxl_lightning_8step_lora'|'ipadapter/ip-adapter-faceid-plus_sd15_lora'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora'|'ipadapter/ip-adapter-faceid_sd15_lora'|'lcm-lora-sdv1-5'|'lcm-lora-sdxl'|'lcm/SD1.5/pytorch_lora_weights'|'lcm/SDXL/pytorch_lora_weights'|'lcm/SSD-1B/pytorch_lora_weights'|'sd_xl_offset_example-lora_1.0'|'sdxl/pxx4_v1_alpha'|'sdxl/xl_shuimo-000012'|'slider-concepts/age'|'slider-concepts/cartoon_style'|'slider-concepts/chubby'|'slider-concepts/clay_style'|'slider-concepts/cluttered_room'|'slider-concepts/curlyhair'|'slider-concepts/dark_weather'|'slider-concepts/eyebrow'|'slider-concepts/eyesize'|'slider-concepts/festive'|'slider-concepts/fix_hands'|'slider-concepts/long_hair'|'slider-concepts/muscular'|'slider-concepts/pixar_style'|'slider-concepts/professional'|'slider-concepts/repair_slider'|'slider-concepts/sculpture_style'|'slider-concepts/smiling'|'slider-concepts/stylegan_latent1'|'slider-concepts/stylegan_latent2'|'slider-concepts/suprised_look'|'slider-concepts/tropical_weather'|'slider-concepts/winter_weather'| $dyn,'insert_embedding'?: 'CHOOSE'| $dyn,'insert_saved'?: 'CHOOSE'| $dyn
        }){
            super(ctx);

            super.$$link("prompt", opts['prompt'])
super.$$link("opt_model", opts['opt_model'])
super.$$link("opt_clip", opts['opt_clip'])
super.$$link("insert_lora", opts['insert_lora'])
super.$$link("insert_embedding", opts['insert_embedding'])
super.$$link("insert_saved", opts['insert_saved'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Power Prompt (rgthree)"
        }
},

    /**
     * Power Prompt - Simple (rgthree) from rgthree
     * @desc 
    */
    "Power Prompt - Simple (rgthree)" : class extends Node{
        //Setters
        //set 'prompt'(value : STRING)  { super.$$link(0, value) } 
//set 'opt_clip'(value : CLIP)  { super.$$link(1, value) } 
//set 'insert_embedding'(value : 'CHOOSE'| $dyn)  { super.$$link(2, value) } 
//set 'insert_saved'(value : 'CHOOSE'| $dyn)  { super.$$link(3, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }
get 'TEXT'() : STRING { return [this.$uid.toString(), 1]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.prompt
		 * @param opts.opt_clip
		 * @param opts.insert_embedding
		 * @param opts.insert_saved}
        */
        constructor(opts:{
            'prompt': STRING,'opt_clip'?: CLIP,'insert_embedding'?: 'CHOOSE'| $dyn,'insert_saved'?: 'CHOOSE'| $dyn
        }){
            super(ctx);

            super.$$link("prompt", opts['prompt'])
super.$$link("opt_clip", opts['opt_clip'])
super.$$link("insert_embedding", opts['insert_embedding'])
super.$$link("insert_saved", opts['insert_saved'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Power Prompt - Simple (rgthree)"
        }
},

    /**
     * KSampler Config (rgthree) from rgthree
     * @desc 
    */
    "KSampler Config (rgthree)" : class extends Node{
        //Setters
        //set 'steps_total'(value : INT)  { super.$$link(0, value) } 
//set 'refiner_step'(value : INT)  { super.$$link(1, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(2, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(3, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn)  { super.$$link(4, value) } 

        //Getters
        get 'STEPS'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }
get 'REFINER_STEP'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }
get 'CFG'() : FLOAT { return [this.$uid.toString(), 2]  as unknown as FLOAT; }
get 'SAMPLER'() : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn { return [this.$uid.toString(), 3]  as unknown as 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn; }
get 'SCHEDULER'() : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn { return [this.$uid.toString(), 4]  as unknown as 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn; }

        /**
          * Constructor
		 * @param opts.steps_total default: 30 max: 16384 min: 1 step: 1
		 * @param opts.refiner_step default: 24 max: 16384 min: 1 step: 1
		 * @param opts.cfg default: 8 step: 0.5
		 * @param opts.sampler_name
		 * @param opts.scheduler}
        */
        constructor(opts:{
            'steps_total'?: INT,'refiner_step'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn
        }){
            super(ctx);

            super.$$link("steps_total", opts['steps_total']??tmp["KSampler Config (rgthree)"].defaults['steps_total'])
super.$$link("refiner_step", opts['refiner_step']??tmp["KSampler Config (rgthree)"].defaults['refiner_step'])
super.$$link("cfg", opts['cfg']??tmp["KSampler Config (rgthree)"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
}

        static defaults = {
    'steps_total':  30,
'refiner_step':  24,
'cfg':  8
}
        protected override $$type(){
            return "KSampler Config (rgthree)"
        }
},

    /**
     * SDXL Empty Latent Image (rgthree) from rgthree
     * @desc 
    */
    "SDXL Empty Latent Image (rgthree)" : class extends Node{
        //Setters
        //set 'dimensions'(value : '1536 x 640   (landscape)'|'1344 x 768   (landscape)'|'1216 x 832   (landscape)'|'1152 x 896   (landscape)'|'1024 x 1024  (square)'|' 896 x 1152  (portrait)'|' 832 x 1216  (portrait)'|' 768 x 1344  (portrait)'|' 640 x 1536  (portrait)'| $dyn)  { super.$$link(0, value) } 
//set 'clip_scale'(value : FLOAT)  { super.$$link(1, value) } 
//set 'batch_size'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }
get 'CLIP_WIDTH'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }
get 'CLIP_HEIGHT'() : INT { return [this.$uid.toString(), 2]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.dimensions default: "1024 x 1024  (square)"
		 * @param opts.clip_scale default: 2 max: 10 min: 1 step: 0.5
		 * @param opts.batch_size default: 1 max: 64 min: 1}
        */
        constructor(opts:{
            'dimensions'?: '1536 x 640   (landscape)'|'1344 x 768   (landscape)'|'1216 x 832   (landscape)'|'1152 x 896   (landscape)'|'1024 x 1024  (square)'|' 896 x 1152  (portrait)'|' 832 x 1216  (portrait)'|' 768 x 1344  (portrait)'|' 640 x 1536  (portrait)'| $dyn,'clip_scale'?: FLOAT,'batch_size'?: INT
        }){
            super(ctx);

            super.$$link("dimensions", opts['dimensions']??tmp["SDXL Empty Latent Image (rgthree)"].defaults['dimensions'])
super.$$link("clip_scale", opts['clip_scale']??tmp["SDXL Empty Latent Image (rgthree)"].defaults['clip_scale'])
super.$$link("batch_size", opts['batch_size']??tmp["SDXL Empty Latent Image (rgthree)"].defaults['batch_size'])
}

        static defaults = {
    'dimensions':  "1024 x 1024  (square)",
'clip_scale':  2,
'batch_size':  1
}
        protected override $$type(){
            return "SDXL Empty Latent Image (rgthree)"
        }
},

    /**
     * SDXL Power Prompt - Positive (rgthree) from rgthree
     * @desc 
    */
    "SDXL Power Prompt - Positive (rgthree)" : class extends Node{
        //Setters
        //set 'prompt_g'(value : STRING)  { super.$$link(0, value) } 
//set 'prompt_l'(value : STRING)  { super.$$link(1, value) } 
//set 'opt_model'(value : MODEL)  { super.$$link(2, value) } 
//set 'opt_clip'(value : CLIP)  { super.$$link(3, value) } 
//set 'opt_clip_width'(value : INT)  { super.$$link(4, value) } 
//set 'opt_clip_height'(value : INT)  { super.$$link(5, value) } 
//set 'insert_lora'(value : 'CHOOSE'|'DISABLE LORAS'|'SDXL-Lightning/sdxl_lightning_2step_lora'|'SDXL-Lightning/sdxl_lightning_4step_lora'|'SDXL-Lightning/sdxl_lightning_8step_lora'|'ipadapter/ip-adapter-faceid-plus_sd15_lora'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora'|'ipadapter/ip-adapter-faceid_sd15_lora'|'lcm-lora-sdv1-5'|'lcm-lora-sdxl'|'lcm/SD1.5/pytorch_lora_weights'|'lcm/SDXL/pytorch_lora_weights'|'lcm/SSD-1B/pytorch_lora_weights'|'sd_xl_offset_example-lora_1.0'|'sdxl/pxx4_v1_alpha'|'sdxl/xl_shuimo-000012'|'slider-concepts/age'|'slider-concepts/cartoon_style'|'slider-concepts/chubby'|'slider-concepts/clay_style'|'slider-concepts/cluttered_room'|'slider-concepts/curlyhair'|'slider-concepts/dark_weather'|'slider-concepts/eyebrow'|'slider-concepts/eyesize'|'slider-concepts/festive'|'slider-concepts/fix_hands'|'slider-concepts/long_hair'|'slider-concepts/muscular'|'slider-concepts/pixar_style'|'slider-concepts/professional'|'slider-concepts/repair_slider'|'slider-concepts/sculpture_style'|'slider-concepts/smiling'|'slider-concepts/stylegan_latent1'|'slider-concepts/stylegan_latent2'|'slider-concepts/suprised_look'|'slider-concepts/tropical_weather'|'slider-concepts/winter_weather'| $dyn)  { super.$$link(6, value) } 
//set 'insert_embedding'(value : 'CHOOSE'| $dyn)  { super.$$link(7, value) } 
//set 'insert_saved'(value : 'CHOOSE'| $dyn)  { super.$$link(8, value) } 
//set 'target_width'(value : INT)  { super.$$link(9, value) } 
//set 'target_height'(value : INT)  { super.$$link(10, value) } 
//set 'crop_width'(value : INT)  { super.$$link(11, value) } 
//set 'crop_height'(value : INT)  { super.$$link(12, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }
get 'MODEL'() : MODEL { return [this.$uid.toString(), 1]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this.$uid.toString(), 2]  as unknown as CLIP; }
get 'TEXT_G'() : STRING { return [this.$uid.toString(), 3]  as unknown as STRING; }
get 'TEXT_L'() : STRING { return [this.$uid.toString(), 4]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.prompt_g
		 * @param opts.prompt_l
		 * @param opts.opt_model
		 * @param opts.opt_clip
		 * @param opts.opt_clip_width default: 1024
		 * @param opts.opt_clip_height default: 1024
		 * @param opts.insert_lora
		 * @param opts.insert_embedding
		 * @param opts.insert_saved
		 * @param opts.target_width default: -1 max: 16384 min: -1
		 * @param opts.target_height default: -1 max: 16384 min: -1
		 * @param opts.crop_width default: -1 max: 16384 min: -1
		 * @param opts.crop_height default: -1 max: 16384 min: -1}
        */
        constructor(opts:{
            'prompt_g': STRING,'prompt_l': STRING,'opt_model'?: MODEL,'opt_clip'?: CLIP,'opt_clip_width'?: INT,'opt_clip_height'?: INT,'insert_lora'?: 'CHOOSE'|'DISABLE LORAS'|'SDXL-Lightning/sdxl_lightning_2step_lora'|'SDXL-Lightning/sdxl_lightning_4step_lora'|'SDXL-Lightning/sdxl_lightning_8step_lora'|'ipadapter/ip-adapter-faceid-plus_sd15_lora'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora'|'ipadapter/ip-adapter-faceid_sd15_lora'|'lcm-lora-sdv1-5'|'lcm-lora-sdxl'|'lcm/SD1.5/pytorch_lora_weights'|'lcm/SDXL/pytorch_lora_weights'|'lcm/SSD-1B/pytorch_lora_weights'|'sd_xl_offset_example-lora_1.0'|'sdxl/pxx4_v1_alpha'|'sdxl/xl_shuimo-000012'|'slider-concepts/age'|'slider-concepts/cartoon_style'|'slider-concepts/chubby'|'slider-concepts/clay_style'|'slider-concepts/cluttered_room'|'slider-concepts/curlyhair'|'slider-concepts/dark_weather'|'slider-concepts/eyebrow'|'slider-concepts/eyesize'|'slider-concepts/festive'|'slider-concepts/fix_hands'|'slider-concepts/long_hair'|'slider-concepts/muscular'|'slider-concepts/pixar_style'|'slider-concepts/professional'|'slider-concepts/repair_slider'|'slider-concepts/sculpture_style'|'slider-concepts/smiling'|'slider-concepts/stylegan_latent1'|'slider-concepts/stylegan_latent2'|'slider-concepts/suprised_look'|'slider-concepts/tropical_weather'|'slider-concepts/winter_weather'| $dyn,'insert_embedding'?: 'CHOOSE'| $dyn,'insert_saved'?: 'CHOOSE'| $dyn,'target_width'?: INT,'target_height'?: INT,'crop_width'?: INT,'crop_height'?: INT
        }){
            super(ctx);

            super.$$link("prompt_g", opts['prompt_g'])
super.$$link("prompt_l", opts['prompt_l'])
super.$$link("opt_model", opts['opt_model'])
super.$$link("opt_clip", opts['opt_clip'])
super.$$link("opt_clip_width", opts['opt_clip_width']??tmp["SDXL Power Prompt - Positive (rgthree)"].defaults['opt_clip_width'])
super.$$link("opt_clip_height", opts['opt_clip_height']??tmp["SDXL Power Prompt - Positive (rgthree)"].defaults['opt_clip_height'])
super.$$link("insert_lora", opts['insert_lora'])
super.$$link("insert_embedding", opts['insert_embedding'])
super.$$link("insert_saved", opts['insert_saved'])
super.$$link("target_width", opts['target_width']??tmp["SDXL Power Prompt - Positive (rgthree)"].defaults['target_width'])
super.$$link("target_height", opts['target_height']??tmp["SDXL Power Prompt - Positive (rgthree)"].defaults['target_height'])
super.$$link("crop_width", opts['crop_width']??tmp["SDXL Power Prompt - Positive (rgthree)"].defaults['crop_width'])
super.$$link("crop_height", opts['crop_height']??tmp["SDXL Power Prompt - Positive (rgthree)"].defaults['crop_height'])
}

        static defaults = {
    'opt_clip_width':  1024,
'opt_clip_height':  1024,
'target_width':  -1,
'target_height':  -1,
'crop_width':  -1,
'crop_height':  -1
}
        protected override $$type(){
            return "SDXL Power Prompt - Positive (rgthree)"
        }
},

    /**
     * SDXL Power Prompt - Simple / Negative (rgthree) from rgthree
     * @desc 
    */
    "SDXL Power Prompt - Simple / Negative (rgthree)" : class extends Node{
        //Setters
        //set 'prompt_g'(value : STRING)  { super.$$link(0, value) } 
//set 'prompt_l'(value : STRING)  { super.$$link(1, value) } 
//set 'opt_clip'(value : CLIP)  { super.$$link(2, value) } 
//set 'opt_clip_width'(value : INT)  { super.$$link(3, value) } 
//set 'opt_clip_height'(value : INT)  { super.$$link(4, value) } 
//set 'insert_embedding'(value : 'CHOOSE'| $dyn)  { super.$$link(5, value) } 
//set 'insert_saved'(value : 'CHOOSE'| $dyn)  { super.$$link(6, value) } 
//set 'target_width'(value : INT)  { super.$$link(7, value) } 
//set 'target_height'(value : INT)  { super.$$link(8, value) } 
//set 'crop_width'(value : INT)  { super.$$link(9, value) } 
//set 'crop_height'(value : INT)  { super.$$link(10, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }
get 'TEXT_G'() : STRING { return [this.$uid.toString(), 1]  as unknown as STRING; }
get 'TEXT_L'() : STRING { return [this.$uid.toString(), 2]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.prompt_g
		 * @param opts.prompt_l
		 * @param opts.opt_clip
		 * @param opts.opt_clip_width default: 1024
		 * @param opts.opt_clip_height default: 1024
		 * @param opts.insert_embedding
		 * @param opts.insert_saved
		 * @param opts.target_width default: -1 max: 16384 min: -1
		 * @param opts.target_height default: -1 max: 16384 min: -1
		 * @param opts.crop_width default: -1 max: 16384 min: -1
		 * @param opts.crop_height default: -1 max: 16384 min: -1}
        */
        constructor(opts:{
            'prompt_g': STRING,'prompt_l': STRING,'opt_clip'?: CLIP,'opt_clip_width'?: INT,'opt_clip_height'?: INT,'insert_embedding'?: 'CHOOSE'| $dyn,'insert_saved'?: 'CHOOSE'| $dyn,'target_width'?: INT,'target_height'?: INT,'crop_width'?: INT,'crop_height'?: INT
        }){
            super(ctx);

            super.$$link("prompt_g", opts['prompt_g'])
super.$$link("prompt_l", opts['prompt_l'])
super.$$link("opt_clip", opts['opt_clip'])
super.$$link("opt_clip_width", opts['opt_clip_width']??tmp["SDXL Power Prompt - Simple / Negative (rgthree)"].defaults['opt_clip_width'])
super.$$link("opt_clip_height", opts['opt_clip_height']??tmp["SDXL Power Prompt - Simple / Negative (rgthree)"].defaults['opt_clip_height'])
super.$$link("insert_embedding", opts['insert_embedding'])
super.$$link("insert_saved", opts['insert_saved'])
super.$$link("target_width", opts['target_width']??tmp["SDXL Power Prompt - Simple / Negative (rgthree)"].defaults['target_width'])
super.$$link("target_height", opts['target_height']??tmp["SDXL Power Prompt - Simple / Negative (rgthree)"].defaults['target_height'])
super.$$link("crop_width", opts['crop_width']??tmp["SDXL Power Prompt - Simple / Negative (rgthree)"].defaults['crop_width'])
super.$$link("crop_height", opts['crop_height']??tmp["SDXL Power Prompt - Simple / Negative (rgthree)"].defaults['crop_height'])
}

        static defaults = {
    'opt_clip_width':  1024,
'opt_clip_height':  1024,
'target_width':  -1,
'target_height':  -1,
'crop_width':  -1,
'crop_height':  -1
}
        protected override $$type(){
            return "SDXL Power Prompt - Simple / Negative (rgthree)"
        }
},

    /**
     * Any Switch (rgthree) from rgthree
     * @desc 
    */
    "Any Switch (rgthree)" : class extends Node{
        //Setters
        

        //Getters
        get '*'() : ANY { return [this.$uid.toString(), 0]  as unknown as ANY; }

        /**
          * Constructor
}
        */
        constructor(opts:{
            
        }){
            super(ctx);

            
}

        static defaults = {
    
}
        protected override $$type(){
            return "Any Switch (rgthree)"
        }
},

    /**
     * Image Comparer (rgthree) from rgthree
     * @desc Saves the input images to your ComfyUI output directory.
    */
    "Image Comparer (rgthree)" : class extends Node{
        //Setters
        //set 'image_a'(value : IMAGE)  { super.$$link(0, value) } 
//set 'image_b'(value : IMAGE)  { super.$$link(1, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.image_a
		 * @param opts.image_b}
        */
        constructor(opts:{
            'image_a'?: IMAGE,'image_b'?: IMAGE
        }){
            super(ctx);

            super.$$link("image_a", opts['image_a'])
super.$$link("image_b", opts['image_b'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Image Comparer (rgthree)"
        }
},

    /**
     * Power Lora Loader (rgthree) from rgthree
     * @desc 
    */
    "Power Lora Loader (rgthree)" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'clip'(value : CLIP)  { super.$$link(1, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this.$uid.toString(), 1]  as unknown as CLIP; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.clip}
        */
        constructor(opts:{
            'model': MODEL,'clip': CLIP
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("clip", opts['clip'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Power Lora Loader (rgthree)"
        }
},

    /**
     * Big lama Remover from LamaRemover
     * @desc 
    */
    "LamaRemover" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'masks'(value : MASK)  { super.$$link(1, value) } 
//set 'mask_threshold'(value : INT)  { super.$$link(2, value) } 
//set 'gaussblur_radius'(value : INT)  { super.$$link(3, value) } 
//set 'invert_mask'(value : BOOLEAN)  { super.$$link(4, value) } 

        //Getters
        get 'images'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.masks
		 * @param opts.mask_threshold default: 250 step: 1
		 * @param opts.gaussblur_radius default: 8 step: 1
		 * @param opts.invert_mask}
        */
        constructor(opts:{
            'images': IMAGE,'masks': MASK,'mask_threshold'?: INT,'gaussblur_radius'?: INT,'invert_mask'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("masks", opts['masks'])
super.$$link("mask_threshold", opts['mask_threshold']??tmp["LamaRemover"].defaults['mask_threshold'])
super.$$link("gaussblur_radius", opts['gaussblur_radius']??tmp["LamaRemover"].defaults['gaussblur_radius'])
super.$$link("invert_mask", opts['invert_mask']??tmp["LamaRemover"].defaults['invert_mask'])
}

        static defaults = {
    'mask_threshold':  250,
'gaussblur_radius':  8,
'invert_mask':  false
}
        protected override $$type(){
            return "LamaRemover"
        }
},

    /**
     * Big lama Remover(IMG) from LamaRemover
     * @desc 
    */
    "LamaRemoverIMG" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'masks'(value : IMAGE)  { super.$$link(1, value) } 
//set 'mask_threshold'(value : INT)  { super.$$link(2, value) } 
//set 'gaussblur_radius'(value : INT)  { super.$$link(3, value) } 
//set 'invert_mask'(value : BOOLEAN)  { super.$$link(4, value) } 

        //Getters
        get 'images'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.masks
		 * @param opts.mask_threshold default: 250 step: 1
		 * @param opts.gaussblur_radius default: 8 step: 1
		 * @param opts.invert_mask}
        */
        constructor(opts:{
            'images': IMAGE,'masks': IMAGE,'mask_threshold'?: INT,'gaussblur_radius'?: INT,'invert_mask'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("masks", opts['masks'])
super.$$link("mask_threshold", opts['mask_threshold']??tmp["LamaRemoverIMG"].defaults['mask_threshold'])
super.$$link("gaussblur_radius", opts['gaussblur_radius']??tmp["LamaRemoverIMG"].defaults['gaussblur_radius'])
super.$$link("invert_mask", opts['invert_mask']??tmp["LamaRemoverIMG"].defaults['invert_mask'])
}

        static defaults = {
    'mask_threshold':  250,
'gaussblur_radius':  8,
'invert_mask':  false
}
        protected override $$type(){
            return "LamaRemoverIMG"
        }
},

    /**
     * CustomScheduler from sampling/custom_sampling/schedulers
     * @desc 
    */
    "CustomScheduler" : class extends Node{
        //Setters
        //set 'steps'(value : INT)  { super.$$link(0, value) } 
//set 'sigma_0'(value : FLOAT)  { super.$$link(1, value) } 
//set 'sigma_1'(value : FLOAT)  { super.$$link(2, value) } 
//set 'sigma_2'(value : FLOAT)  { super.$$link(3, value) } 
//set 'sigma_3'(value : FLOAT)  { super.$$link(4, value) } 
//set 'sigma_4'(value : FLOAT)  { super.$$link(5, value) } 
//set 'sigma_5'(value : FLOAT)  { super.$$link(6, value) } 
//set 'sigma_6'(value : FLOAT)  { super.$$link(7, value) } 
//set 'sigma_7'(value : FLOAT)  { super.$$link(8, value) } 
//set 'sigma_8'(value : FLOAT)  { super.$$link(9, value) } 
//set 'sigma_9'(value : FLOAT)  { super.$$link(10, value) } 
//set 'sigma_10'(value : FLOAT)  { super.$$link(11, value) } 
//set 'sigma_11'(value : FLOAT)  { super.$$link(12, value) } 
//set 'sigma_12'(value : FLOAT)  { super.$$link(13, value) } 
//set 'sigma_13'(value : FLOAT)  { super.$$link(14, value) } 
//set 'sigma_14'(value : FLOAT)  { super.$$link(15, value) } 
//set 'sigma_15'(value : FLOAT)  { super.$$link(16, value) } 
//set 'sigma_16'(value : FLOAT)  { super.$$link(17, value) } 
//set 'sigma_17'(value : FLOAT)  { super.$$link(18, value) } 
//set 'sigma_18'(value : FLOAT)  { super.$$link(19, value) } 
//set 'sigma_19'(value : FLOAT)  { super.$$link(20, value) } 
//set 'sigma_20'(value : FLOAT)  { super.$$link(21, value) } 
//set 'sigma_21'(value : FLOAT)  { super.$$link(22, value) } 
//set 'sigma_22'(value : FLOAT)  { super.$$link(23, value) } 
//set 'sigma_23'(value : FLOAT)  { super.$$link(24, value) } 
//set 'sigma_24'(value : FLOAT)  { super.$$link(25, value) } 
//set 'sigma_25'(value : FLOAT)  { super.$$link(26, value) } 

        //Getters
        get 'SIGMAS'() : SIGMAS { return [this.$uid.toString(), 0]  as unknown as SIGMAS; }

        /**
          * Constructor
		 * @param opts.steps default: 4 max: 25 min: 1
		 * @param opts.sigma_0 default: 4.12 step: 0.01
		 * @param opts.sigma_1 default: 1.62 step: 0.01
		 * @param opts.sigma_2 default: 0.7 step: 0.01
		 * @param opts.sigma_3 default: 0.04 step: 0.01
		 * @param opts.sigma_4 step: 0.01
		 * @param opts.sigma_5 step: 0.01
		 * @param opts.sigma_6 step: 0.01
		 * @param opts.sigma_7 step: 0.01
		 * @param opts.sigma_8 step: 0.01
		 * @param opts.sigma_9 step: 0.01
		 * @param opts.sigma_10 step: 0.01
		 * @param opts.sigma_11 step: 0.01
		 * @param opts.sigma_12 step: 0.01
		 * @param opts.sigma_13 step: 0.01
		 * @param opts.sigma_14 step: 0.01
		 * @param opts.sigma_15 step: 0.01
		 * @param opts.sigma_16 step: 0.01
		 * @param opts.sigma_17 step: 0.01
		 * @param opts.sigma_18 step: 0.01
		 * @param opts.sigma_19 step: 0.01
		 * @param opts.sigma_20 step: 0.01
		 * @param opts.sigma_21 step: 0.01
		 * @param opts.sigma_22 step: 0.01
		 * @param opts.sigma_23 step: 0.01
		 * @param opts.sigma_24 step: 0.01
		 * @param opts.sigma_25 step: 0.01}
        */
        constructor(opts:{
            'steps'?: INT,'sigma_0'?: FLOAT,'sigma_1'?: FLOAT,'sigma_2'?: FLOAT,'sigma_3'?: FLOAT,'sigma_4'?: FLOAT,'sigma_5'?: FLOAT,'sigma_6'?: FLOAT,'sigma_7'?: FLOAT,'sigma_8'?: FLOAT,'sigma_9'?: FLOAT,'sigma_10'?: FLOAT,'sigma_11'?: FLOAT,'sigma_12'?: FLOAT,'sigma_13'?: FLOAT,'sigma_14'?: FLOAT,'sigma_15'?: FLOAT,'sigma_16'?: FLOAT,'sigma_17'?: FLOAT,'sigma_18'?: FLOAT,'sigma_19'?: FLOAT,'sigma_20'?: FLOAT,'sigma_21'?: FLOAT,'sigma_22'?: FLOAT,'sigma_23'?: FLOAT,'sigma_24'?: FLOAT,'sigma_25'?: FLOAT
        }){
            super(ctx);

            super.$$link("steps", opts['steps']??tmp["CustomScheduler"].defaults['steps'])
super.$$link("sigma_0", opts['sigma_0']??tmp["CustomScheduler"].defaults['sigma_0'])
super.$$link("sigma_1", opts['sigma_1']??tmp["CustomScheduler"].defaults['sigma_1'])
super.$$link("sigma_2", opts['sigma_2']??tmp["CustomScheduler"].defaults['sigma_2'])
super.$$link("sigma_3", opts['sigma_3']??tmp["CustomScheduler"].defaults['sigma_3'])
super.$$link("sigma_4", opts['sigma_4']??tmp["CustomScheduler"].defaults['sigma_4'])
super.$$link("sigma_5", opts['sigma_5']??tmp["CustomScheduler"].defaults['sigma_5'])
super.$$link("sigma_6", opts['sigma_6']??tmp["CustomScheduler"].defaults['sigma_6'])
super.$$link("sigma_7", opts['sigma_7']??tmp["CustomScheduler"].defaults['sigma_7'])
super.$$link("sigma_8", opts['sigma_8']??tmp["CustomScheduler"].defaults['sigma_8'])
super.$$link("sigma_9", opts['sigma_9']??tmp["CustomScheduler"].defaults['sigma_9'])
super.$$link("sigma_10", opts['sigma_10']??tmp["CustomScheduler"].defaults['sigma_10'])
super.$$link("sigma_11", opts['sigma_11']??tmp["CustomScheduler"].defaults['sigma_11'])
super.$$link("sigma_12", opts['sigma_12']??tmp["CustomScheduler"].defaults['sigma_12'])
super.$$link("sigma_13", opts['sigma_13']??tmp["CustomScheduler"].defaults['sigma_13'])
super.$$link("sigma_14", opts['sigma_14']??tmp["CustomScheduler"].defaults['sigma_14'])
super.$$link("sigma_15", opts['sigma_15']??tmp["CustomScheduler"].defaults['sigma_15'])
super.$$link("sigma_16", opts['sigma_16']??tmp["CustomScheduler"].defaults['sigma_16'])
super.$$link("sigma_17", opts['sigma_17']??tmp["CustomScheduler"].defaults['sigma_17'])
super.$$link("sigma_18", opts['sigma_18']??tmp["CustomScheduler"].defaults['sigma_18'])
super.$$link("sigma_19", opts['sigma_19']??tmp["CustomScheduler"].defaults['sigma_19'])
super.$$link("sigma_20", opts['sigma_20']??tmp["CustomScheduler"].defaults['sigma_20'])
super.$$link("sigma_21", opts['sigma_21']??tmp["CustomScheduler"].defaults['sigma_21'])
super.$$link("sigma_22", opts['sigma_22']??tmp["CustomScheduler"].defaults['sigma_22'])
super.$$link("sigma_23", opts['sigma_23']??tmp["CustomScheduler"].defaults['sigma_23'])
super.$$link("sigma_24", opts['sigma_24']??tmp["CustomScheduler"].defaults['sigma_24'])
super.$$link("sigma_25", opts['sigma_25']??tmp["CustomScheduler"].defaults['sigma_25'])
}

        static defaults = {
    'steps':  4,
'sigma_0':  4.12,
'sigma_1':  1.62,
'sigma_2':  0.7,
'sigma_3':  0.04,
'sigma_4':  0,
'sigma_5':  0,
'sigma_6':  0,
'sigma_7':  0,
'sigma_8':  0,
'sigma_9':  0,
'sigma_10':  0,
'sigma_11':  0,
'sigma_12':  0,
'sigma_13':  0,
'sigma_14':  0,
'sigma_15':  0,
'sigma_16':  0,
'sigma_17':  0,
'sigma_18':  0,
'sigma_19':  0,
'sigma_20':  0,
'sigma_21':  0,
'sigma_22':  0,
'sigma_23':  0,
'sigma_24':  0,
'sigma_25':  0
}
        protected override $$type(){
            return "CustomScheduler"
        }
},

    /**
     * SingleImagePathLoader from Tools
     * @desc 
    */
    "SingleImagePathLoader" : class extends Node{
        //Setters
        //set 'path'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.path}
        */
        constructor(opts:{
            'path'?: STRING
        }){
            super(ctx);

            super.$$link("path", opts['path']??tmp["SingleImagePathLoader"].defaults['path'])
}

        static defaults = {
    'path':  ""
}
        protected override $$type(){
            return "SingleImagePathLoader"
        }
},

    /**
     * SingleImageUrlLoader from Tools
     * @desc 
    */
    "SingleImageUrlLoader" : class extends Node{
        //Setters
        //set 'url'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.url}
        */
        constructor(opts:{
            'url'?: STRING
        }){
            super(ctx);

            super.$$link("url", opts['url']??tmp["SingleImageUrlLoader"].defaults['url'])
}

        static defaults = {
    'url':  ""
}
        protected override $$type(){
            return "SingleImageUrlLoader"
        }
},

    /**
     * ImageStandardResizeProcessor from Tools
     * @desc 
    */
    "ImageStandardResizeProcessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'size'(value : '512*768'|'512*512'|'768*768'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.size}
        */
        constructor(opts:{
            'image': IMAGE,'size': '512*768'|'512*512'|'768*768'| $dyn
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("size", opts['size'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImageStandardResizeProcessor"
        }
},

    /**
     * ImageBgRemoveProcessor from Tools
     * @desc 
    */
    "ImageBgRemoveProcessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image}
        */
        constructor(opts:{
            'image': IMAGE
        }){
            super(ctx);

            super.$$link("image", opts['image'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImageBgRemoveProcessor"
        }
},

    /**
     * BatchImagePathLoader from Tools
     * @desc 
    */
    "BatchImagePathLoader" : class extends Node{
        //Setters
        //set 'path'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.path}
        */
        constructor(opts:{
            'path'?: STRING
        }){
            super(ctx);

            super.$$link("path", opts['path']??tmp["BatchImagePathLoader"].defaults['path'])
}

        static defaults = {
    'path':  ""
}
        protected override $$type(){
            return "BatchImagePathLoader"
        }
},

    /**
     * ImageCheveretoUploader from Tools
     * @desc 
    */
    "ImageCheveretoUploader" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'url'(value : STRING)  { super.$$link(1, value) } 
//set 'key'(value : STRING)  { super.$$link(2, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.url
		 * @param opts.key}
        */
        constructor(opts:{
            'image': IMAGE,'url'?: STRING,'key'?: STRING
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("url", opts['url']??tmp["ImageCheveretoUploader"].defaults['url'])
super.$$link("key", opts['key']??tmp["ImageCheveretoUploader"].defaults['key'])
}

        static defaults = {
    'url':  "",
'key':  ""
}
        protected override $$type(){
            return "ImageCheveretoUploader"
        }
},

    /**
     * JSONMessageNotifyTool from Tools
     * @desc 
    */
    "JSONMessageNotifyTool" : class extends Node{
        //Setters
        //set 'url'(value : STRING)  { super.$$link(0, value) } 
//set 'message'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.url
		 * @param opts.message}
        */
        constructor(opts:{
            'url'?: STRING,'message'?: STRING
        }){
            super(ctx);

            super.$$link("url", opts['url']??tmp["JSONMessageNotifyTool"].defaults['url'])
super.$$link("message", opts['message']??tmp["JSONMessageNotifyTool"].defaults['message'])
}

        static defaults = {
    'url':  "",
'message':  ""
}
        protected override $$type(){
            return "JSONMessageNotifyTool"
        }
},

    /**
     * PreviewJSONNode from Tools
     * @desc 
    */
    "PreviewJSONNode" : class extends Node{
        //Setters
        //set 'text'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.text}
        */
        constructor(opts:{
            'text': STRING
        }){
            super(ctx);

            super.$$link("text", opts['text'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "PreviewJSONNode"
        }
},

    /**
     * 🍜Webcam Noodle from 🍜Noodle Webcam
     * @desc 
    */
    "WebcamNode" : class extends Node{
        //Setters
        //set 'select_webcam'(value : INT)  { super.$$link(0, value) } 
//set 'framerate'(value : INT)  { super.$$link(1, value) } 
//set 'control_stream'(value : STRING)  { super.$$link(2, value) } 
//set 'duration'(value : INT)  { super.$$link(3, value) } 
//set 'height'(value : INT)  { super.$$link(4, value) } 
//set 'width'(value : INT)  { super.$$link(5, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.select_webcam step: 1
		 * @param opts.framerate default: 12 max: 60 min: 1 step: 1
		 * @param opts.control_stream default: "start"
		 * @param opts.duration default: 10 max: 120 min: 1 step: 1
		 * @param opts.height default: 480 max: 1080 min: 100 step: 1
		 * @param opts.width default: 640 max: 1920 min: 100 step: 1}
        */
        constructor(opts:{
            'select_webcam'?: INT,'framerate'?: INT,'control_stream'?: STRING,'duration'?: INT,'height'?: INT,'width'?: INT
        }){
            super(ctx);

            super.$$link("select_webcam", opts['select_webcam']??tmp["WebcamNode"].defaults['select_webcam'])
super.$$link("framerate", opts['framerate']??tmp["WebcamNode"].defaults['framerate'])
super.$$link("control_stream", opts['control_stream']??tmp["WebcamNode"].defaults['control_stream'])
super.$$link("duration", opts['duration']??tmp["WebcamNode"].defaults['duration'])
super.$$link("height", opts['height']??tmp["WebcamNode"].defaults['height'])
super.$$link("width", opts['width']??tmp["WebcamNode"].defaults['width'])
}

        static defaults = {
    'select_webcam':  0,
'framerate':  12,
'control_stream':  "start",
'duration':  10,
'height':  480,
'width':  640
}
        protected override $$type(){
            return "WebcamNode"
        }
},

    /**
     * DitCheckpointLoader from ExtraModels/DiT
     * @desc 
    */
    "DitCheckpointLoader" : class extends Node{
        //Setters
        //set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(0, value) } 
//set 'model'(value : 'XL/2'|'XL/4'|'XL/8'|'L/2'|'L/4'|'L/8'|'B/2'|'B/4'|'B/8'|'S/2'|'S/4'|'S/8'| $dyn)  { super.$$link(1, value) } 
//set 'image_size'(value : '256'|'512'| $dyn)  { super.$$link(2, value) } 

        //Getters
        get 'model'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.ckpt_name
		 * @param opts.model
		 * @param opts.image_size}
        */
        constructor(opts:{
            'ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'model': 'XL/2'|'XL/4'|'XL/8'|'L/2'|'L/4'|'L/8'|'B/2'|'B/4'|'B/8'|'S/2'|'S/4'|'S/8'| $dyn,'image_size': '256'|'512'| $dyn
        }){
            super(ctx);

            super.$$link("ckpt_name", opts['ckpt_name'])
super.$$link("model", opts['model'])
super.$$link("image_size", opts['image_size'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "DitCheckpointLoader"
        }
},

    /**
     * DiTCondLabelSelect from ExtraModels/DiT
     * @desc 
    */
    "DiTCondLabelSelect" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'label_name'(value : 'tench, Tinca tinca'|'goldfish, Carassius auratus'|'great white shark, white shark, man-eater, man-eating shark, Carcharodon carcharias'|'tiger shark, Galeocerdo cuvieri'|'hammerhead, hammerhead shark'|'electric ray, crampfish, numbfish, torpedo'|'stingray'|'cock'|'hen'|'ostrich, Struthio camelus'|'brambling, Fringilla montifringilla'|'goldfinch, Carduelis carduelis'|'house finch, linnet, Carpodacus mexicanus'|'junco, snowbird'|'indigo bunting, indigo finch, indigo bird, Passerina cyanea'|'robin, American robin, Turdus migratorius'|'bulbul'|'jay'|'magpie'|'chickadee'|'water ouzel, dipper'|'kite'|'bald eagle, American eagle, Haliaeetus leucocephalus'|'vulture'|'great grey owl, great gray owl, Strix nebulosa'|'European fire salamander, Salamandra salamandra'|'common newt, Triturus vulgaris'|'eft'|'spotted salamander, Ambystoma maculatum'|'axolotl, mud puppy, Ambystoma mexicanum'|'bullfrog, Rana catesbeiana'|'tree frog, tree-frog'|'tailed frog, bell toad, ribbed toad, tailed toad, Ascaphus trui'|'loggerhead, loggerhead turtle, Caretta caretta'|'leatherback turtle, leatherback, leathery turtle, Dermochelys coriacea'|'mud turtle'|'terrapin'|'box turtle, box tortoise'|'banded gecko'|'common iguana, iguana, Iguana iguana'|'American chameleon, anole, Anolis carolinensis'|'whiptail, whiptail lizard'|'agama'|'frilled lizard, Chlamydosaurus kingi'|'alligator lizard'|'Gila monster, Heloderma suspectum'|'green lizard, Lacerta viridis'|'African chameleon, Chamaeleo chamaeleon'|'Komodo dragon, Komodo lizard, dragon lizard, giant lizard, Varanus komodoensis'|'African crocodile, Nile crocodile, Crocodylus niloticus'|'American alligator, Alligator mississipiensis'|'triceratops'|'thunder snake, worm snake, Carphophis amoenus'|'ringneck snake, ring-necked snake, ring snake'|'hognose snake, puff adder, sand viper'|'green snake, grass snake'|'king snake, kingsnake'|'garter snake, grass snake'|'water snake'|'vine snake'|'night snake, Hypsiglena torquata'|'boa constrictor, Constrictor constrictor'|'rock python, rock snake, Python sebae'|'Indian cobra, Naja naja'|'green mamba'|'sea snake'|'horned viper, cerastes, sand viper, horned asp, Cerastes cornutus'|'diamondback, diamondback rattlesnake, Crotalus adamanteus'|'sidewinder, horned rattlesnake, Crotalus cerastes'|'trilobite'|'harvestman, daddy longlegs, Phalangium opilio'|'scorpion'|'black and gold garden spider, Argiope aurantia'|'barn spider, Araneus cavaticus'|'garden spider, Aranea diademata'|'black widow, Latrodectus mactans'|'tarantula'|'wolf spider, hunting spider'|'tick'|'centipede'|'black grouse'|'ptarmigan'|'ruffed grouse, partridge, Bonasa umbellus'|'prairie chicken, prairie grouse, prairie fowl'|'peacock'|'quail'|'partridge'|'African grey, African gray, Psittacus erithacus'|'macaw'|'sulphur-crested cockatoo, Kakatoe galerita, Cacatua galerita'|'lorikeet'|'coucal'|'bee eater'|'hornbill'|'hummingbird'|'jacamar'|'toucan'|'drake'|'red-breasted merganser, Mergus serrator'|'goose'|'black swan, Cygnus atratus'|'tusker'|'echidna, spiny anteater, anteater'|'platypus, duckbill, duckbilled platypus, duck-billed platypus, Ornithorhynchus anatinus'|'wallaby, brush kangaroo'|'koala, koala bear, kangaroo bear, native bear, Phascolarctos cinereus'|'wombat'|'jellyfish'|'sea anemone, anemone'|'brain coral'|'flatworm, platyhelminth'|'nematode, nematode worm, roundworm'|'conch'|'snail'|'slug'|'sea slug, nudibranch'|'chiton, coat-of-mail shell, sea cradle, polyplacophore'|'chambered nautilus, pearly nautilus, nautilus'|'Dungeness crab, Cancer magister'|'rock crab, Cancer irroratus'|'fiddler crab'|'king crab, Alaska crab, Alaskan king crab, Alaska king crab, Paralithodes camtschatica'|'American lobster, Northern lobster, Maine lobster, Homarus americanus'|'spiny lobster, langouste, rock lobster, crawfish, crayfish, sea crawfish'|'crayfish, crawfish, crawdad, crawdaddy'|'hermit crab'|'isopod'|'white stork, Ciconia ciconia'|'black stork, Ciconia nigra'|'spoonbill'|'flamingo'|'little blue heron, Egretta caerulea'|'American egret, great white heron, Egretta albus'|'bittern'|'crane'|'limpkin, Aramus pictus'|'European gallinule, Porphyrio porphyrio'|'American coot, marsh hen, mud hen, water hen, Fulica americana'|'bustard'|'ruddy turnstone, Arenaria interpres'|'red-backed sandpiper, dunlin, Erolia alpina'|'redshank, Tringa totanus'|'dowitcher'|'oystercatcher, oyster catcher'|'pelican'|'king penguin, Aptenodytes patagonica'|'albatross, mollymawk'|'grey whale, gray whale, devilfish, Eschrichtius gibbosus, Eschrichtius robustus'|'killer whale, killer, orca, grampus, sea wolf, Orcinus orca'|'dugong, Dugong dugon'|'sea lion'|'Chihuahua'|'Japanese spaniel'|'Maltese dog, Maltese terrier, Maltese'|'Pekinese, Pekingese, Peke'|'Shih-Tzu'|'Blenheim spaniel'|'papillon'|'toy terrier'|'Rhodesian ridgeback'|'Afghan hound, Afghan'|'basset, basset hound'|'beagle'|'bloodhound, sleuthhound'|'bluetick'|'black-and-tan coonhound'|'Walker hound, Walker foxhound'|'English foxhound'|'redbone'|'borzoi, Russian wolfhound'|'Irish wolfhound'|'Italian greyhound'|'whippet'|'Ibizan hound, Ibizan Podenco'|'Norwegian elkhound, elkhound'|'otterhound, otter hound'|'Saluki, gazelle hound'|'Scottish deerhound, deerhound'|'Weimaraner'|'Staffordshire bullterrier, Staffordshire bull terrier'|'American Staffordshire terrier, Staffordshire terrier, American pit bull terrier, pit bull terrier'|'Bedlington terrier'|'Border terrier'|'Kerry blue terrier'|'Irish terrier'|'Norfolk terrier'|'Norwich terrier'|'Yorkshire terrier'|'wire-haired fox terrier'|'Lakeland terrier'|'Sealyham terrier, Sealyham'|'Airedale, Airedale terrier'|'cairn, cairn terrier'|'Australian terrier'|'Dandie Dinmont, Dandie Dinmont terrier'|'Boston bull, Boston terrier'|'miniature schnauzer'|'giant schnauzer'|'standard schnauzer'|'Scotch terrier, Scottish terrier, Scottie'|'Tibetan terrier, chrysanthemum dog'|'silky terrier, Sydney silky'|'soft-coated wheaten terrier'|'West Highland white terrier'|'Lhasa, Lhasa apso'|'flat-coated retriever'|'curly-coated retriever'|'golden retriever'|'Labrador retriever'|'Chesapeake Bay retriever'|'German short-haired pointer'|'vizsla, Hungarian pointer'|'English setter'|'Irish setter, red setter'|'Gordon setter'|'Brittany spaniel'|'clumber, clumber spaniel'|'English springer, English springer spaniel'|'Welsh springer spaniel'|'cocker spaniel, English cocker spaniel, cocker'|'Sussex spaniel'|'Irish water spaniel'|'kuvasz'|'schipperke'|'groenendael'|'malinois'|'briard'|'kelpie'|'komondor'|'Old English sheepdog, bobtail'|'Shetland sheepdog, Shetland sheep dog, Shetland'|'collie'|'Border collie'|'Bouvier des Flandres, Bouviers des Flandres'|'Rottweiler'|'German shepherd, German shepherd dog, German police dog, alsatian'|'Doberman, Doberman pinscher'|'miniature pinscher'|'Greater Swiss Mountain dog'|'Bernese mountain dog'|'Appenzeller'|'EntleBucher'|'boxer'|'bull mastiff'|'Tibetan mastiff'|'French bulldog'|'Great Dane'|'Saint Bernard, St Bernard'|'Eskimo dog, husky'|'malamute, malemute, Alaskan malamute'|'Siberian husky'|'dalmatian, coach dog, carriage dog'|'affenpinscher, monkey pinscher, monkey dog'|'basenji'|'pug, pug-dog'|'Leonberg'|'Newfoundland, Newfoundland dog'|'Great Pyrenees'|'Samoyed, Samoyede'|'Pomeranian'|'chow, chow chow'|'keeshond'|'Brabancon griffon'|'Pembroke, Pembroke Welsh corgi'|'Cardigan, Cardigan Welsh corgi'|'toy poodle'|'miniature poodle'|'standard poodle'|'Mexican hairless'|'timber wolf, grey wolf, gray wolf, Canis lupus'|'white wolf, Arctic wolf, Canis lupus tundrarum'|'red wolf, maned wolf, Canis rufus, Canis niger'|'coyote, prairie wolf, brush wolf, Canis latrans'|'dingo, warrigal, warragal, Canis dingo'|'dhole, Cuon alpinus'|'African hunting dog, hyena dog, Cape hunting dog, Lycaon pictus'|'hyena, hyaena'|'red fox, Vulpes vulpes'|'kit fox, Vulpes macrotis'|'Arctic fox, white fox, Alopex lagopus'|'grey fox, gray fox, Urocyon cinereoargenteus'|'tabby, tabby cat'|'tiger cat'|'Persian cat'|'Siamese cat, Siamese'|'Egyptian cat'|'cougar, puma, catamount, mountain lion, painter, panther, Felis concolor'|'lynx, catamount'|'leopard, Panthera pardus'|'snow leopard, ounce, Panthera uncia'|'jaguar, panther, Panthera onca, Felis onca'|'lion, king of beasts, Panthera leo'|'tiger, Panthera tigris'|'cheetah, chetah, Acinonyx jubatus'|'brown bear, bruin, Ursus arctos'|'American black bear, black bear, Ursus americanus, Euarctos americanus'|'ice bear, polar bear, Ursus Maritimus, Thalarctos maritimus'|'sloth bear, Melursus ursinus, Ursus ursinus'|'mongoose'|'meerkat, mierkat'|'tiger beetle'|'ladybug, ladybeetle, lady beetle, ladybird, ladybird beetle'|'ground beetle, carabid beetle'|'long-horned beetle, longicorn, longicorn beetle'|'leaf beetle, chrysomelid'|'dung beetle'|'rhinoceros beetle'|'weevil'|'fly'|'bee'|'ant, emmet, pismire'|'grasshopper, hopper'|'cricket'|'walking stick, walkingstick, stick insect'|'cockroach, roach'|'mantis, mantid'|'cicada, cicala'|'leafhopper'|'lacewing, lacewing fly'|'dragonfly, darning needle, devil\'s darning needle, sewing needle, snake feeder, snake doctor, mosquito hawk, skeeter hawk'|'damselfly'|'admiral'|'ringlet, ringlet butterfly'|'monarch, monarch butterfly, milkweed butterfly, Danaus plexippus'|'cabbage butterfly'|'sulphur butterfly, sulfur butterfly'|'lycaenid, lycaenid butterfly'|'starfish, sea star'|'sea urchin'|'sea cucumber, holothurian'|'wood rabbit, cottontail, cottontail rabbit'|'hare'|'Angora, Angora rabbit'|'hamster'|'porcupine, hedgehog'|'fox squirrel, eastern fox squirrel, Sciurus niger'|'marmot'|'beaver'|'guinea pig, Cavia cobaya'|'sorrel'|'zebra'|'hog, pig, grunter, squealer, Sus scrofa'|'wild boar, boar, Sus scrofa'|'warthog'|'hippopotamus, hippo, river horse, Hippopotamus amphibius'|'ox'|'water buffalo, water ox, Asiatic buffalo, Bubalus bubalis'|'bison'|'ram, tup'|'bighorn, bighorn sheep, cimarron, Rocky Mountain bighorn, Rocky Mountain sheep, Ovis canadensis'|'ibex, Capra ibex'|'hartebeest'|'impala, Aepyceros melampus'|'gazelle'|'Arabian camel, dromedary, Camelus dromedarius'|'llama'|'weasel'|'mink'|'polecat, fitch, foulmart, foumart, Mustela putorius'|'black-footed ferret, ferret, Mustela nigripes'|'otter'|'skunk, polecat, wood pussy'|'badger'|'armadillo'|'three-toed sloth, ai, Bradypus tridactylus'|'orangutan, orang, orangutang, Pongo pygmaeus'|'gorilla, Gorilla gorilla'|'chimpanzee, chimp, Pan troglodytes'|'gibbon, Hylobates lar'|'siamang, Hylobates syndactylus, Symphalangus syndactylus'|'guenon, guenon monkey'|'patas, hussar monkey, Erythrocebus patas'|'baboon'|'macaque'|'langur'|'colobus, colobus monkey'|'proboscis monkey, Nasalis larvatus'|'marmoset'|'capuchin, ringtail, Cebus capucinus'|'howler monkey, howler'|'titi, titi monkey'|'spider monkey, Ateles geoffroyi'|'squirrel monkey, Saimiri sciureus'|'Madagascar cat, ring-tailed lemur, Lemur catta'|'indri, indris, Indri indri, Indri brevicaudatus'|'Indian elephant, Elephas maximus'|'African elephant, Loxodonta africana'|'lesser panda, red panda, panda, bear cat, cat bear, Ailurus fulgens'|'giant panda, panda, panda bear, coon bear, Ailuropoda melanoleuca'|'barracouta, snoek'|'eel'|'coho, cohoe, coho salmon, blue jack, silver salmon, Oncorhynchus kisutch'|'rock beauty, Holocanthus tricolor'|'anemone fish'|'sturgeon'|'gar, garfish, garpike, billfish, Lepisosteus osseus'|'lionfish'|'puffer, pufferfish, blowfish, globefish'|'abacus'|'abaya'|'academic gown, academic robe, judge\'s robe'|'accordion, piano accordion, squeeze box'|'acoustic guitar'|'aircraft carrier, carrier, flattop, attack aircraft carrier'|'airliner'|'airship, dirigible'|'altar'|'ambulance'|'amphibian, amphibious vehicle'|'analog clock'|'apiary, bee house'|'apron'|'ashcan, trash can, garbage can, wastebin, ash bin, ash-bin, ashbin, dustbin, trash barrel, trash bin'|'assault rifle, assault gun'|'backpack, back pack, knapsack, packsack, rucksack, haversack'|'bakery, bakeshop, bakehouse'|'balance beam, beam'|'balloon'|'ballpoint, ballpoint pen, ballpen, Biro'|'Band Aid'|'banjo'|'bannister, banister, balustrade, balusters, handrail'|'barbell'|'barber chair'|'barbershop'|'barn'|'barometer'|'barrel, cask'|'barrow, garden cart, lawn cart, wheelbarrow'|'baseball'|'basketball'|'bassinet'|'bassoon'|'bathing cap, swimming cap'|'bath towel'|'bathtub, bathing tub, bath, tub'|'beach wagon, station wagon, wagon, estate car, beach waggon, station waggon, waggon'|'beacon, lighthouse, beacon light, pharos'|'beaker'|'bearskin, busby, shako'|'beer bottle'|'beer glass'|'bell cote, bell cot'|'bib'|'bicycle-built-for-two, tandem bicycle, tandem'|'bikini, two-piece'|'binder, ring-binder'|'binoculars, field glasses, opera glasses'|'birdhouse'|'boathouse'|'bobsled, bobsleigh, bob'|'bolo tie, bolo, bola tie, bola'|'bonnet, poke bonnet'|'bookcase'|'bookshop, bookstore, bookstall'|'bottlecap'|'bow'|'bow tie, bow-tie, bowtie'|'brass, memorial tablet, plaque'|'brassiere, bra, bandeau'|'breakwater, groin, groyne, mole, bulwark, seawall, jetty'|'breastplate, aegis, egis'|'broom'|'bucket, pail'|'buckle'|'bulletproof vest'|'bullet train, bullet'|'butcher shop, meat market'|'cab, hack, taxi, taxicab'|'caldron, cauldron'|'candle, taper, wax light'|'cannon'|'canoe'|'can opener, tin opener'|'cardigan'|'car mirror'|'carousel, carrousel, merry-go-round, roundabout, whirligig'|'carpenter\'s kit, tool kit'|'carton'|'car wheel'|'cash machine, cash dispenser, automated teller machine, automatic teller machine, automated teller, automatic teller, ATM'|'cassette'|'cassette player'|'castle'|'catamaran'|'CD player'|'cello, violoncello'|'cellular telephone, cellular phone, cellphone, cell, mobile phone'|'chain'|'chainlink fence'|'chain mail, ring mail, mail, chain armor, chain armour, ring armor, ring armour'|'chain saw, chainsaw'|'chest'|'chiffonier, commode'|'chime, bell, gong'|'china cabinet, china closet'|'Christmas stocking'|'church, church building'|'cinema, movie theater, movie theatre, movie house, picture palace'|'cleaver, meat cleaver, chopper'|'cliff dwelling'|'cloak'|'clog, geta, patten, sabot'|'cocktail shaker'|'coffee mug'|'coffeepot'|'coil, spiral, volute, whorl, helix'|'combination lock'|'computer keyboard, keypad'|'confectionery, confectionary, candy store'|'container ship, containership, container vessel'|'convertible'|'corkscrew, bottle screw'|'cornet, horn, trumpet, trump'|'cowboy boot'|'cowboy hat, ten-gallon hat'|'cradle'|'crane'|'crash helmet'|'crate'|'crib, cot'|'Crock Pot'|'croquet ball'|'crutch'|'cuirass'|'dam, dike, dyke'|'desk'|'desktop computer'|'dial telephone, dial phone'|'diaper, nappy, napkin'|'digital clock'|'digital watch'|'dining table, board'|'dishrag, dishcloth'|'dishwasher, dish washer, dishwashing machine'|'disk brake, disc brake'|'dock, dockage, docking facility'|'dogsled, dog sled, dog sleigh'|'dome'|'doormat, welcome mat'|'drilling platform, offshore rig'|'drum, membranophone, tympan'|'drumstick'|'dumbbell'|'Dutch oven'|'electric fan, blower'|'electric guitar'|'electric locomotive'|'entertainment center'|'envelope'|'espresso maker'|'face powder'|'feather boa, boa'|'file, file cabinet, filing cabinet'|'fireboat'|'fire engine, fire truck'|'fire screen, fireguard'|'flagpole, flagstaff'|'flute, transverse flute'|'folding chair'|'football helmet'|'forklift'|'fountain'|'fountain pen'|'four-poster'|'freight car'|'French horn, horn'|'frying pan, frypan, skillet'|'fur coat'|'garbage truck, dustcart'|'gasmask, respirator, gas helmet'|'gas pump, gasoline pump, petrol pump, island dispenser'|'goblet'|'go-kart'|'golf ball'|'golfcart, golf cart'|'gondola'|'gong, tam-tam'|'gown'|'grand piano, grand'|'greenhouse, nursery, glasshouse'|'grille, radiator grille'|'grocery store, grocery, food market, market'|'guillotine'|'hair slide'|'hair spray'|'half track'|'hammer'|'hamper'|'hand blower, blow dryer, blow drier, hair dryer, hair drier'|'hand-held computer, hand-held microcomputer'|'handkerchief, hankie, hanky, hankey'|'hard disc, hard disk, fixed disk'|'harmonica, mouth organ, harp, mouth harp'|'harp'|'harvester, reaper'|'hatchet'|'holster'|'home theater, home theatre'|'honeycomb'|'hook, claw'|'hoopskirt, crinoline'|'horizontal bar, high bar'|'horse cart, horse-cart'|'hourglass'|'iPod'|'iron, smoothing iron'|'jack-o\'-lantern'|'jean, blue jean, denim'|'jeep, landrover'|'jersey, T-shirt, tee shirt'|'jigsaw puzzle'|'jinrikisha, ricksha, rickshaw'|'joystick'|'kimono'|'knee pad'|'knot'|'lab coat, laboratory coat'|'ladle'|'lampshade, lamp shade'|'laptop, laptop computer'|'lawn mower, mower'|'lens cap, lens cover'|'letter opener, paper knife, paperknife'|'library'|'lifeboat'|'lighter, light, igniter, ignitor'|'limousine, limo'|'liner, ocean liner'|'lipstick, lip rouge'|'Loafer'|'lotion'|'loudspeaker, speaker, speaker unit, loudspeaker system, speaker system'|'loupe, jeweler\'s loupe'|'lumbermill, sawmill'|'magnetic compass'|'mailbag, postbag'|'mailbox, letter box'|'maillot'|'maillot, tank suit'|'manhole cover'|'maraca'|'marimba, xylophone'|'mask'|'matchstick'|'maypole'|'maze, labyrinth'|'measuring cup'|'medicine chest, medicine cabinet'|'megalith, megalithic structure'|'microphone, mike'|'microwave, microwave oven'|'military uniform'|'milk can'|'minibus'|'miniskirt, mini'|'minivan'|'missile'|'mitten'|'mixing bowl'|'mobile home, manufactured home'|'Model T'|'modem'|'monastery'|'monitor'|'moped'|'mortar'|'mortarboard'|'mosque'|'mosquito net'|'motor scooter, scooter'|'mountain bike, all-terrain bike, off-roader'|'mountain tent'|'mouse, computer mouse'|'mousetrap'|'moving van'|'muzzle'|'nail'|'neck brace'|'necklace'|'nipple'|'notebook, notebook computer'|'obelisk'|'oboe, hautboy, hautbois'|'ocarina, sweet potato'|'odometer, hodometer, mileometer, milometer'|'oil filter'|'organ, pipe organ'|'oscilloscope, scope, cathode-ray oscilloscope, CRO'|'overskirt'|'oxcart'|'oxygen mask'|'packet'|'paddle, boat paddle'|'paddlewheel, paddle wheel'|'padlock'|'paintbrush'|'pajama, pyjama, pj\'s, jammies'|'palace'|'panpipe, pandean pipe, syrinx'|'paper towel'|'parachute, chute'|'parallel bars, bars'|'park bench'|'parking meter'|'passenger car, coach, carriage'|'patio, terrace'|'pay-phone, pay-station'|'pedestal, plinth, footstall'|'pencil box, pencil case'|'pencil sharpener'|'perfume, essence'|'Petri dish'|'photocopier'|'pick, plectrum, plectron'|'pickelhaube'|'picket fence, paling'|'pickup, pickup truck'|'pier'|'piggy bank, penny bank'|'pill bottle'|'pillow'|'ping-pong ball'|'pinwheel'|'pirate, pirate ship'|'pitcher, ewer'|'plane, carpenter\'s plane, woodworking plane'|'planetarium'|'plastic bag'|'plate rack'|'plow, plough'|'plunger, plumber\'s helper'|'Polaroid camera, Polaroid Land camera'|'pole'|'police van, police wagon, paddy wagon, patrol wagon, wagon, black Maria'|'poncho'|'pool table, billiard table, snooker table'|'pop bottle, soda bottle'|'pot, flowerpot'|'potter\'s wheel'|'power drill'|'prayer rug, prayer mat'|'printer'|'prison, prison house'|'projectile, missile'|'projector'|'puck, hockey puck'|'punching bag, punch bag, punching ball, punchball'|'purse'|'quill, quill pen'|'quilt, comforter, comfort, puff'|'racer, race car, racing car'|'racket, racquet'|'radiator'|'radio, wireless'|'radio telescope, radio reflector'|'rain barrel'|'recreational vehicle, RV, R.V.'|'reel'|'reflex camera'|'refrigerator, icebox'|'remote control, remote'|'restaurant, eating house, eating place, eatery'|'revolver, six-gun, six-shooter'|'rifle'|'rocking chair, rocker'|'rotisserie'|'rubber eraser, rubber, pencil eraser'|'rugby ball'|'rule, ruler'|'running shoe'|'safe'|'safety pin'|'saltshaker, salt shaker'|'sandal'|'sarong'|'sax, saxophone'|'scabbard'|'scale, weighing machine'|'school bus'|'schooner'|'scoreboard'|'screen, CRT screen'|'screw'|'screwdriver'|'seat belt, seatbelt'|'sewing machine'|'shield, buckler'|'shoe shop, shoe-shop, shoe store'|'shoji'|'shopping basket'|'shopping cart'|'shovel'|'shower cap'|'shower curtain'|'ski'|'ski mask'|'sleeping bag'|'slide rule, slipstick'|'sliding door'|'slot, one-armed bandit'|'snorkel'|'snowmobile'|'snowplow, snowplough'|'soap dispenser'|'soccer ball'|'sock'|'solar dish, solar collector, solar furnace'|'sombrero'|'soup bowl'|'space bar'|'space heater'|'space shuttle'|'spatula'|'speedboat'|'spider web, spider\'s web'|'spindle'|'sports car, sport car'|'spotlight, spot'|'stage'|'steam locomotive'|'steel arch bridge'|'steel drum'|'stethoscope'|'stole'|'stone wall'|'stopwatch, stop watch'|'stove'|'strainer'|'streetcar, tram, tramcar, trolley, trolley car'|'stretcher'|'studio couch, day bed'|'stupa, tope'|'submarine, pigboat, sub, U-boat'|'suit, suit of clothes'|'sundial'|'sunglass'|'sunglasses, dark glasses, shades'|'sunscreen, sunblock, sun blocker'|'suspension bridge'|'swab, swob, mop'|'sweatshirt'|'swimming trunks, bathing trunks'|'swing'|'switch, electric switch, electrical switch'|'syringe'|'table lamp'|'tank, army tank, armored combat vehicle, armoured combat vehicle'|'tape player'|'teapot'|'teddy, teddy bear'|'television, television system'|'tennis ball'|'thatch, thatched roof'|'theater curtain, theatre curtain'|'thimble'|'thresher, thrasher, threshing machine'|'throne'|'tile roof'|'toaster'|'tobacco shop, tobacconist shop, tobacconist'|'toilet seat'|'torch'|'totem pole'|'tow truck, tow car, wrecker'|'toyshop'|'tractor'|'trailer truck, tractor trailer, trucking rig, rig, articulated lorry, semi'|'tray'|'trench coat'|'tricycle, trike, velocipede'|'trimaran'|'tripod'|'triumphal arch'|'trolleybus, trolley coach, trackless trolley'|'trombone'|'tub, vat'|'turnstile'|'typewriter keyboard'|'umbrella'|'unicycle, monocycle'|'upright, upright piano'|'vacuum, vacuum cleaner'|'vase'|'vault'|'velvet'|'vending machine'|'vestment'|'viaduct'|'violin, fiddle'|'volleyball'|'waffle iron'|'wall clock'|'wallet, billfold, notecase, pocketbook'|'wardrobe, closet, press'|'warplane, military plane'|'washbasin, handbasin, washbowl, lavabo, wash-hand basin'|'washer, automatic washer, washing machine'|'water bottle'|'water jug'|'water tower'|'whiskey jug'|'whistle'|'wig'|'window screen'|'window shade'|'Windsor tie'|'wine bottle'|'wing'|'wok'|'wooden spoon'|'wool, woolen, woollen'|'worm fence, snake fence, snake-rail fence, Virginia fence'|'wreck'|'yawl'|'yurt'|'web site, website, internet site, site'|'comic book'|'crossword puzzle, crossword'|'street sign'|'traffic light, traffic signal, stoplight'|'book jacket, dust cover, dust jacket, dust wrapper'|'menu'|'plate'|'guacamole'|'consomme'|'hot pot, hotpot'|'trifle'|'ice cream, icecream'|'ice lolly, lolly, lollipop, popsicle'|'French loaf'|'bagel, beigel'|'pretzel'|'cheeseburger'|'hotdog, hot dog, red hot'|'mashed potato'|'head cabbage'|'broccoli'|'cauliflower'|'zucchini, courgette'|'spaghetti squash'|'acorn squash'|'butternut squash'|'cucumber, cuke'|'artichoke, globe artichoke'|'bell pepper'|'cardoon'|'mushroom'|'Granny Smith'|'strawberry'|'orange'|'lemon'|'fig'|'pineapple, ananas'|'banana'|'jackfruit, jak, jack'|'custard apple'|'pomegranate'|'hay'|'carbonara'|'chocolate sauce, chocolate syrup'|'dough'|'meat loaf, meatloaf'|'pizza, pizza pie'|'potpie'|'burrito'|'red wine'|'espresso'|'cup'|'eggnog'|'alp'|'bubble'|'cliff, drop, drop-off'|'coral reef'|'geyser'|'lakeside, lakeshore'|'promontory, headland, head, foreland'|'sandbar, sand bar'|'seashore, coast, seacoast, sea-coast'|'valley, vale'|'volcano'|'ballplayer, baseball player'|'groom, bridegroom'|'scuba diver'|'rapeseed'|'daisy'|'yellow lady\'s slipper, yellow lady-slipper, Cypripedium calceolus, Cypripedium parviflorum'|'corn'|'acorn'|'hip, rose hip, rosehip'|'buckeye, horse chestnut, conker'|'coral fungus'|'agaric'|'gyromitra'|'stinkhorn, carrion fungus'|'earthstar'|'hen-of-the-woods, hen of the woods, Polyporus frondosus, Grifola frondosa'|'bolete'|'ear, spike, capitulum'|'toilet tissue, toilet paper, bathroom tissue'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'class'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.label_name}
        */
        constructor(opts:{
            'model': MODEL,'label_name': 'tench, Tinca tinca'|'goldfish, Carassius auratus'|'great white shark, white shark, man-eater, man-eating shark, Carcharodon carcharias'|'tiger shark, Galeocerdo cuvieri'|'hammerhead, hammerhead shark'|'electric ray, crampfish, numbfish, torpedo'|'stingray'|'cock'|'hen'|'ostrich, Struthio camelus'|'brambling, Fringilla montifringilla'|'goldfinch, Carduelis carduelis'|'house finch, linnet, Carpodacus mexicanus'|'junco, snowbird'|'indigo bunting, indigo finch, indigo bird, Passerina cyanea'|'robin, American robin, Turdus migratorius'|'bulbul'|'jay'|'magpie'|'chickadee'|'water ouzel, dipper'|'kite'|'bald eagle, American eagle, Haliaeetus leucocephalus'|'vulture'|'great grey owl, great gray owl, Strix nebulosa'|'European fire salamander, Salamandra salamandra'|'common newt, Triturus vulgaris'|'eft'|'spotted salamander, Ambystoma maculatum'|'axolotl, mud puppy, Ambystoma mexicanum'|'bullfrog, Rana catesbeiana'|'tree frog, tree-frog'|'tailed frog, bell toad, ribbed toad, tailed toad, Ascaphus trui'|'loggerhead, loggerhead turtle, Caretta caretta'|'leatherback turtle, leatherback, leathery turtle, Dermochelys coriacea'|'mud turtle'|'terrapin'|'box turtle, box tortoise'|'banded gecko'|'common iguana, iguana, Iguana iguana'|'American chameleon, anole, Anolis carolinensis'|'whiptail, whiptail lizard'|'agama'|'frilled lizard, Chlamydosaurus kingi'|'alligator lizard'|'Gila monster, Heloderma suspectum'|'green lizard, Lacerta viridis'|'African chameleon, Chamaeleo chamaeleon'|'Komodo dragon, Komodo lizard, dragon lizard, giant lizard, Varanus komodoensis'|'African crocodile, Nile crocodile, Crocodylus niloticus'|'American alligator, Alligator mississipiensis'|'triceratops'|'thunder snake, worm snake, Carphophis amoenus'|'ringneck snake, ring-necked snake, ring snake'|'hognose snake, puff adder, sand viper'|'green snake, grass snake'|'king snake, kingsnake'|'garter snake, grass snake'|'water snake'|'vine snake'|'night snake, Hypsiglena torquata'|'boa constrictor, Constrictor constrictor'|'rock python, rock snake, Python sebae'|'Indian cobra, Naja naja'|'green mamba'|'sea snake'|'horned viper, cerastes, sand viper, horned asp, Cerastes cornutus'|'diamondback, diamondback rattlesnake, Crotalus adamanteus'|'sidewinder, horned rattlesnake, Crotalus cerastes'|'trilobite'|'harvestman, daddy longlegs, Phalangium opilio'|'scorpion'|'black and gold garden spider, Argiope aurantia'|'barn spider, Araneus cavaticus'|'garden spider, Aranea diademata'|'black widow, Latrodectus mactans'|'tarantula'|'wolf spider, hunting spider'|'tick'|'centipede'|'black grouse'|'ptarmigan'|'ruffed grouse, partridge, Bonasa umbellus'|'prairie chicken, prairie grouse, prairie fowl'|'peacock'|'quail'|'partridge'|'African grey, African gray, Psittacus erithacus'|'macaw'|'sulphur-crested cockatoo, Kakatoe galerita, Cacatua galerita'|'lorikeet'|'coucal'|'bee eater'|'hornbill'|'hummingbird'|'jacamar'|'toucan'|'drake'|'red-breasted merganser, Mergus serrator'|'goose'|'black swan, Cygnus atratus'|'tusker'|'echidna, spiny anteater, anteater'|'platypus, duckbill, duckbilled platypus, duck-billed platypus, Ornithorhynchus anatinus'|'wallaby, brush kangaroo'|'koala, koala bear, kangaroo bear, native bear, Phascolarctos cinereus'|'wombat'|'jellyfish'|'sea anemone, anemone'|'brain coral'|'flatworm, platyhelminth'|'nematode, nematode worm, roundworm'|'conch'|'snail'|'slug'|'sea slug, nudibranch'|'chiton, coat-of-mail shell, sea cradle, polyplacophore'|'chambered nautilus, pearly nautilus, nautilus'|'Dungeness crab, Cancer magister'|'rock crab, Cancer irroratus'|'fiddler crab'|'king crab, Alaska crab, Alaskan king crab, Alaska king crab, Paralithodes camtschatica'|'American lobster, Northern lobster, Maine lobster, Homarus americanus'|'spiny lobster, langouste, rock lobster, crawfish, crayfish, sea crawfish'|'crayfish, crawfish, crawdad, crawdaddy'|'hermit crab'|'isopod'|'white stork, Ciconia ciconia'|'black stork, Ciconia nigra'|'spoonbill'|'flamingo'|'little blue heron, Egretta caerulea'|'American egret, great white heron, Egretta albus'|'bittern'|'crane'|'limpkin, Aramus pictus'|'European gallinule, Porphyrio porphyrio'|'American coot, marsh hen, mud hen, water hen, Fulica americana'|'bustard'|'ruddy turnstone, Arenaria interpres'|'red-backed sandpiper, dunlin, Erolia alpina'|'redshank, Tringa totanus'|'dowitcher'|'oystercatcher, oyster catcher'|'pelican'|'king penguin, Aptenodytes patagonica'|'albatross, mollymawk'|'grey whale, gray whale, devilfish, Eschrichtius gibbosus, Eschrichtius robustus'|'killer whale, killer, orca, grampus, sea wolf, Orcinus orca'|'dugong, Dugong dugon'|'sea lion'|'Chihuahua'|'Japanese spaniel'|'Maltese dog, Maltese terrier, Maltese'|'Pekinese, Pekingese, Peke'|'Shih-Tzu'|'Blenheim spaniel'|'papillon'|'toy terrier'|'Rhodesian ridgeback'|'Afghan hound, Afghan'|'basset, basset hound'|'beagle'|'bloodhound, sleuthhound'|'bluetick'|'black-and-tan coonhound'|'Walker hound, Walker foxhound'|'English foxhound'|'redbone'|'borzoi, Russian wolfhound'|'Irish wolfhound'|'Italian greyhound'|'whippet'|'Ibizan hound, Ibizan Podenco'|'Norwegian elkhound, elkhound'|'otterhound, otter hound'|'Saluki, gazelle hound'|'Scottish deerhound, deerhound'|'Weimaraner'|'Staffordshire bullterrier, Staffordshire bull terrier'|'American Staffordshire terrier, Staffordshire terrier, American pit bull terrier, pit bull terrier'|'Bedlington terrier'|'Border terrier'|'Kerry blue terrier'|'Irish terrier'|'Norfolk terrier'|'Norwich terrier'|'Yorkshire terrier'|'wire-haired fox terrier'|'Lakeland terrier'|'Sealyham terrier, Sealyham'|'Airedale, Airedale terrier'|'cairn, cairn terrier'|'Australian terrier'|'Dandie Dinmont, Dandie Dinmont terrier'|'Boston bull, Boston terrier'|'miniature schnauzer'|'giant schnauzer'|'standard schnauzer'|'Scotch terrier, Scottish terrier, Scottie'|'Tibetan terrier, chrysanthemum dog'|'silky terrier, Sydney silky'|'soft-coated wheaten terrier'|'West Highland white terrier'|'Lhasa, Lhasa apso'|'flat-coated retriever'|'curly-coated retriever'|'golden retriever'|'Labrador retriever'|'Chesapeake Bay retriever'|'German short-haired pointer'|'vizsla, Hungarian pointer'|'English setter'|'Irish setter, red setter'|'Gordon setter'|'Brittany spaniel'|'clumber, clumber spaniel'|'English springer, English springer spaniel'|'Welsh springer spaniel'|'cocker spaniel, English cocker spaniel, cocker'|'Sussex spaniel'|'Irish water spaniel'|'kuvasz'|'schipperke'|'groenendael'|'malinois'|'briard'|'kelpie'|'komondor'|'Old English sheepdog, bobtail'|'Shetland sheepdog, Shetland sheep dog, Shetland'|'collie'|'Border collie'|'Bouvier des Flandres, Bouviers des Flandres'|'Rottweiler'|'German shepherd, German shepherd dog, German police dog, alsatian'|'Doberman, Doberman pinscher'|'miniature pinscher'|'Greater Swiss Mountain dog'|'Bernese mountain dog'|'Appenzeller'|'EntleBucher'|'boxer'|'bull mastiff'|'Tibetan mastiff'|'French bulldog'|'Great Dane'|'Saint Bernard, St Bernard'|'Eskimo dog, husky'|'malamute, malemute, Alaskan malamute'|'Siberian husky'|'dalmatian, coach dog, carriage dog'|'affenpinscher, monkey pinscher, monkey dog'|'basenji'|'pug, pug-dog'|'Leonberg'|'Newfoundland, Newfoundland dog'|'Great Pyrenees'|'Samoyed, Samoyede'|'Pomeranian'|'chow, chow chow'|'keeshond'|'Brabancon griffon'|'Pembroke, Pembroke Welsh corgi'|'Cardigan, Cardigan Welsh corgi'|'toy poodle'|'miniature poodle'|'standard poodle'|'Mexican hairless'|'timber wolf, grey wolf, gray wolf, Canis lupus'|'white wolf, Arctic wolf, Canis lupus tundrarum'|'red wolf, maned wolf, Canis rufus, Canis niger'|'coyote, prairie wolf, brush wolf, Canis latrans'|'dingo, warrigal, warragal, Canis dingo'|'dhole, Cuon alpinus'|'African hunting dog, hyena dog, Cape hunting dog, Lycaon pictus'|'hyena, hyaena'|'red fox, Vulpes vulpes'|'kit fox, Vulpes macrotis'|'Arctic fox, white fox, Alopex lagopus'|'grey fox, gray fox, Urocyon cinereoargenteus'|'tabby, tabby cat'|'tiger cat'|'Persian cat'|'Siamese cat, Siamese'|'Egyptian cat'|'cougar, puma, catamount, mountain lion, painter, panther, Felis concolor'|'lynx, catamount'|'leopard, Panthera pardus'|'snow leopard, ounce, Panthera uncia'|'jaguar, panther, Panthera onca, Felis onca'|'lion, king of beasts, Panthera leo'|'tiger, Panthera tigris'|'cheetah, chetah, Acinonyx jubatus'|'brown bear, bruin, Ursus arctos'|'American black bear, black bear, Ursus americanus, Euarctos americanus'|'ice bear, polar bear, Ursus Maritimus, Thalarctos maritimus'|'sloth bear, Melursus ursinus, Ursus ursinus'|'mongoose'|'meerkat, mierkat'|'tiger beetle'|'ladybug, ladybeetle, lady beetle, ladybird, ladybird beetle'|'ground beetle, carabid beetle'|'long-horned beetle, longicorn, longicorn beetle'|'leaf beetle, chrysomelid'|'dung beetle'|'rhinoceros beetle'|'weevil'|'fly'|'bee'|'ant, emmet, pismire'|'grasshopper, hopper'|'cricket'|'walking stick, walkingstick, stick insect'|'cockroach, roach'|'mantis, mantid'|'cicada, cicala'|'leafhopper'|'lacewing, lacewing fly'|'dragonfly, darning needle, devil\'s darning needle, sewing needle, snake feeder, snake doctor, mosquito hawk, skeeter hawk'|'damselfly'|'admiral'|'ringlet, ringlet butterfly'|'monarch, monarch butterfly, milkweed butterfly, Danaus plexippus'|'cabbage butterfly'|'sulphur butterfly, sulfur butterfly'|'lycaenid, lycaenid butterfly'|'starfish, sea star'|'sea urchin'|'sea cucumber, holothurian'|'wood rabbit, cottontail, cottontail rabbit'|'hare'|'Angora, Angora rabbit'|'hamster'|'porcupine, hedgehog'|'fox squirrel, eastern fox squirrel, Sciurus niger'|'marmot'|'beaver'|'guinea pig, Cavia cobaya'|'sorrel'|'zebra'|'hog, pig, grunter, squealer, Sus scrofa'|'wild boar, boar, Sus scrofa'|'warthog'|'hippopotamus, hippo, river horse, Hippopotamus amphibius'|'ox'|'water buffalo, water ox, Asiatic buffalo, Bubalus bubalis'|'bison'|'ram, tup'|'bighorn, bighorn sheep, cimarron, Rocky Mountain bighorn, Rocky Mountain sheep, Ovis canadensis'|'ibex, Capra ibex'|'hartebeest'|'impala, Aepyceros melampus'|'gazelle'|'Arabian camel, dromedary, Camelus dromedarius'|'llama'|'weasel'|'mink'|'polecat, fitch, foulmart, foumart, Mustela putorius'|'black-footed ferret, ferret, Mustela nigripes'|'otter'|'skunk, polecat, wood pussy'|'badger'|'armadillo'|'three-toed sloth, ai, Bradypus tridactylus'|'orangutan, orang, orangutang, Pongo pygmaeus'|'gorilla, Gorilla gorilla'|'chimpanzee, chimp, Pan troglodytes'|'gibbon, Hylobates lar'|'siamang, Hylobates syndactylus, Symphalangus syndactylus'|'guenon, guenon monkey'|'patas, hussar monkey, Erythrocebus patas'|'baboon'|'macaque'|'langur'|'colobus, colobus monkey'|'proboscis monkey, Nasalis larvatus'|'marmoset'|'capuchin, ringtail, Cebus capucinus'|'howler monkey, howler'|'titi, titi monkey'|'spider monkey, Ateles geoffroyi'|'squirrel monkey, Saimiri sciureus'|'Madagascar cat, ring-tailed lemur, Lemur catta'|'indri, indris, Indri indri, Indri brevicaudatus'|'Indian elephant, Elephas maximus'|'African elephant, Loxodonta africana'|'lesser panda, red panda, panda, bear cat, cat bear, Ailurus fulgens'|'giant panda, panda, panda bear, coon bear, Ailuropoda melanoleuca'|'barracouta, snoek'|'eel'|'coho, cohoe, coho salmon, blue jack, silver salmon, Oncorhynchus kisutch'|'rock beauty, Holocanthus tricolor'|'anemone fish'|'sturgeon'|'gar, garfish, garpike, billfish, Lepisosteus osseus'|'lionfish'|'puffer, pufferfish, blowfish, globefish'|'abacus'|'abaya'|'academic gown, academic robe, judge\'s robe'|'accordion, piano accordion, squeeze box'|'acoustic guitar'|'aircraft carrier, carrier, flattop, attack aircraft carrier'|'airliner'|'airship, dirigible'|'altar'|'ambulance'|'amphibian, amphibious vehicle'|'analog clock'|'apiary, bee house'|'apron'|'ashcan, trash can, garbage can, wastebin, ash bin, ash-bin, ashbin, dustbin, trash barrel, trash bin'|'assault rifle, assault gun'|'backpack, back pack, knapsack, packsack, rucksack, haversack'|'bakery, bakeshop, bakehouse'|'balance beam, beam'|'balloon'|'ballpoint, ballpoint pen, ballpen, Biro'|'Band Aid'|'banjo'|'bannister, banister, balustrade, balusters, handrail'|'barbell'|'barber chair'|'barbershop'|'barn'|'barometer'|'barrel, cask'|'barrow, garden cart, lawn cart, wheelbarrow'|'baseball'|'basketball'|'bassinet'|'bassoon'|'bathing cap, swimming cap'|'bath towel'|'bathtub, bathing tub, bath, tub'|'beach wagon, station wagon, wagon, estate car, beach waggon, station waggon, waggon'|'beacon, lighthouse, beacon light, pharos'|'beaker'|'bearskin, busby, shako'|'beer bottle'|'beer glass'|'bell cote, bell cot'|'bib'|'bicycle-built-for-two, tandem bicycle, tandem'|'bikini, two-piece'|'binder, ring-binder'|'binoculars, field glasses, opera glasses'|'birdhouse'|'boathouse'|'bobsled, bobsleigh, bob'|'bolo tie, bolo, bola tie, bola'|'bonnet, poke bonnet'|'bookcase'|'bookshop, bookstore, bookstall'|'bottlecap'|'bow'|'bow tie, bow-tie, bowtie'|'brass, memorial tablet, plaque'|'brassiere, bra, bandeau'|'breakwater, groin, groyne, mole, bulwark, seawall, jetty'|'breastplate, aegis, egis'|'broom'|'bucket, pail'|'buckle'|'bulletproof vest'|'bullet train, bullet'|'butcher shop, meat market'|'cab, hack, taxi, taxicab'|'caldron, cauldron'|'candle, taper, wax light'|'cannon'|'canoe'|'can opener, tin opener'|'cardigan'|'car mirror'|'carousel, carrousel, merry-go-round, roundabout, whirligig'|'carpenter\'s kit, tool kit'|'carton'|'car wheel'|'cash machine, cash dispenser, automated teller machine, automatic teller machine, automated teller, automatic teller, ATM'|'cassette'|'cassette player'|'castle'|'catamaran'|'CD player'|'cello, violoncello'|'cellular telephone, cellular phone, cellphone, cell, mobile phone'|'chain'|'chainlink fence'|'chain mail, ring mail, mail, chain armor, chain armour, ring armor, ring armour'|'chain saw, chainsaw'|'chest'|'chiffonier, commode'|'chime, bell, gong'|'china cabinet, china closet'|'Christmas stocking'|'church, church building'|'cinema, movie theater, movie theatre, movie house, picture palace'|'cleaver, meat cleaver, chopper'|'cliff dwelling'|'cloak'|'clog, geta, patten, sabot'|'cocktail shaker'|'coffee mug'|'coffeepot'|'coil, spiral, volute, whorl, helix'|'combination lock'|'computer keyboard, keypad'|'confectionery, confectionary, candy store'|'container ship, containership, container vessel'|'convertible'|'corkscrew, bottle screw'|'cornet, horn, trumpet, trump'|'cowboy boot'|'cowboy hat, ten-gallon hat'|'cradle'|'crane'|'crash helmet'|'crate'|'crib, cot'|'Crock Pot'|'croquet ball'|'crutch'|'cuirass'|'dam, dike, dyke'|'desk'|'desktop computer'|'dial telephone, dial phone'|'diaper, nappy, napkin'|'digital clock'|'digital watch'|'dining table, board'|'dishrag, dishcloth'|'dishwasher, dish washer, dishwashing machine'|'disk brake, disc brake'|'dock, dockage, docking facility'|'dogsled, dog sled, dog sleigh'|'dome'|'doormat, welcome mat'|'drilling platform, offshore rig'|'drum, membranophone, tympan'|'drumstick'|'dumbbell'|'Dutch oven'|'electric fan, blower'|'electric guitar'|'electric locomotive'|'entertainment center'|'envelope'|'espresso maker'|'face powder'|'feather boa, boa'|'file, file cabinet, filing cabinet'|'fireboat'|'fire engine, fire truck'|'fire screen, fireguard'|'flagpole, flagstaff'|'flute, transverse flute'|'folding chair'|'football helmet'|'forklift'|'fountain'|'fountain pen'|'four-poster'|'freight car'|'French horn, horn'|'frying pan, frypan, skillet'|'fur coat'|'garbage truck, dustcart'|'gasmask, respirator, gas helmet'|'gas pump, gasoline pump, petrol pump, island dispenser'|'goblet'|'go-kart'|'golf ball'|'golfcart, golf cart'|'gondola'|'gong, tam-tam'|'gown'|'grand piano, grand'|'greenhouse, nursery, glasshouse'|'grille, radiator grille'|'grocery store, grocery, food market, market'|'guillotine'|'hair slide'|'hair spray'|'half track'|'hammer'|'hamper'|'hand blower, blow dryer, blow drier, hair dryer, hair drier'|'hand-held computer, hand-held microcomputer'|'handkerchief, hankie, hanky, hankey'|'hard disc, hard disk, fixed disk'|'harmonica, mouth organ, harp, mouth harp'|'harp'|'harvester, reaper'|'hatchet'|'holster'|'home theater, home theatre'|'honeycomb'|'hook, claw'|'hoopskirt, crinoline'|'horizontal bar, high bar'|'horse cart, horse-cart'|'hourglass'|'iPod'|'iron, smoothing iron'|'jack-o\'-lantern'|'jean, blue jean, denim'|'jeep, landrover'|'jersey, T-shirt, tee shirt'|'jigsaw puzzle'|'jinrikisha, ricksha, rickshaw'|'joystick'|'kimono'|'knee pad'|'knot'|'lab coat, laboratory coat'|'ladle'|'lampshade, lamp shade'|'laptop, laptop computer'|'lawn mower, mower'|'lens cap, lens cover'|'letter opener, paper knife, paperknife'|'library'|'lifeboat'|'lighter, light, igniter, ignitor'|'limousine, limo'|'liner, ocean liner'|'lipstick, lip rouge'|'Loafer'|'lotion'|'loudspeaker, speaker, speaker unit, loudspeaker system, speaker system'|'loupe, jeweler\'s loupe'|'lumbermill, sawmill'|'magnetic compass'|'mailbag, postbag'|'mailbox, letter box'|'maillot'|'maillot, tank suit'|'manhole cover'|'maraca'|'marimba, xylophone'|'mask'|'matchstick'|'maypole'|'maze, labyrinth'|'measuring cup'|'medicine chest, medicine cabinet'|'megalith, megalithic structure'|'microphone, mike'|'microwave, microwave oven'|'military uniform'|'milk can'|'minibus'|'miniskirt, mini'|'minivan'|'missile'|'mitten'|'mixing bowl'|'mobile home, manufactured home'|'Model T'|'modem'|'monastery'|'monitor'|'moped'|'mortar'|'mortarboard'|'mosque'|'mosquito net'|'motor scooter, scooter'|'mountain bike, all-terrain bike, off-roader'|'mountain tent'|'mouse, computer mouse'|'mousetrap'|'moving van'|'muzzle'|'nail'|'neck brace'|'necklace'|'nipple'|'notebook, notebook computer'|'obelisk'|'oboe, hautboy, hautbois'|'ocarina, sweet potato'|'odometer, hodometer, mileometer, milometer'|'oil filter'|'organ, pipe organ'|'oscilloscope, scope, cathode-ray oscilloscope, CRO'|'overskirt'|'oxcart'|'oxygen mask'|'packet'|'paddle, boat paddle'|'paddlewheel, paddle wheel'|'padlock'|'paintbrush'|'pajama, pyjama, pj\'s, jammies'|'palace'|'panpipe, pandean pipe, syrinx'|'paper towel'|'parachute, chute'|'parallel bars, bars'|'park bench'|'parking meter'|'passenger car, coach, carriage'|'patio, terrace'|'pay-phone, pay-station'|'pedestal, plinth, footstall'|'pencil box, pencil case'|'pencil sharpener'|'perfume, essence'|'Petri dish'|'photocopier'|'pick, plectrum, plectron'|'pickelhaube'|'picket fence, paling'|'pickup, pickup truck'|'pier'|'piggy bank, penny bank'|'pill bottle'|'pillow'|'ping-pong ball'|'pinwheel'|'pirate, pirate ship'|'pitcher, ewer'|'plane, carpenter\'s plane, woodworking plane'|'planetarium'|'plastic bag'|'plate rack'|'plow, plough'|'plunger, plumber\'s helper'|'Polaroid camera, Polaroid Land camera'|'pole'|'police van, police wagon, paddy wagon, patrol wagon, wagon, black Maria'|'poncho'|'pool table, billiard table, snooker table'|'pop bottle, soda bottle'|'pot, flowerpot'|'potter\'s wheel'|'power drill'|'prayer rug, prayer mat'|'printer'|'prison, prison house'|'projectile, missile'|'projector'|'puck, hockey puck'|'punching bag, punch bag, punching ball, punchball'|'purse'|'quill, quill pen'|'quilt, comforter, comfort, puff'|'racer, race car, racing car'|'racket, racquet'|'radiator'|'radio, wireless'|'radio telescope, radio reflector'|'rain barrel'|'recreational vehicle, RV, R.V.'|'reel'|'reflex camera'|'refrigerator, icebox'|'remote control, remote'|'restaurant, eating house, eating place, eatery'|'revolver, six-gun, six-shooter'|'rifle'|'rocking chair, rocker'|'rotisserie'|'rubber eraser, rubber, pencil eraser'|'rugby ball'|'rule, ruler'|'running shoe'|'safe'|'safety pin'|'saltshaker, salt shaker'|'sandal'|'sarong'|'sax, saxophone'|'scabbard'|'scale, weighing machine'|'school bus'|'schooner'|'scoreboard'|'screen, CRT screen'|'screw'|'screwdriver'|'seat belt, seatbelt'|'sewing machine'|'shield, buckler'|'shoe shop, shoe-shop, shoe store'|'shoji'|'shopping basket'|'shopping cart'|'shovel'|'shower cap'|'shower curtain'|'ski'|'ski mask'|'sleeping bag'|'slide rule, slipstick'|'sliding door'|'slot, one-armed bandit'|'snorkel'|'snowmobile'|'snowplow, snowplough'|'soap dispenser'|'soccer ball'|'sock'|'solar dish, solar collector, solar furnace'|'sombrero'|'soup bowl'|'space bar'|'space heater'|'space shuttle'|'spatula'|'speedboat'|'spider web, spider\'s web'|'spindle'|'sports car, sport car'|'spotlight, spot'|'stage'|'steam locomotive'|'steel arch bridge'|'steel drum'|'stethoscope'|'stole'|'stone wall'|'stopwatch, stop watch'|'stove'|'strainer'|'streetcar, tram, tramcar, trolley, trolley car'|'stretcher'|'studio couch, day bed'|'stupa, tope'|'submarine, pigboat, sub, U-boat'|'suit, suit of clothes'|'sundial'|'sunglass'|'sunglasses, dark glasses, shades'|'sunscreen, sunblock, sun blocker'|'suspension bridge'|'swab, swob, mop'|'sweatshirt'|'swimming trunks, bathing trunks'|'swing'|'switch, electric switch, electrical switch'|'syringe'|'table lamp'|'tank, army tank, armored combat vehicle, armoured combat vehicle'|'tape player'|'teapot'|'teddy, teddy bear'|'television, television system'|'tennis ball'|'thatch, thatched roof'|'theater curtain, theatre curtain'|'thimble'|'thresher, thrasher, threshing machine'|'throne'|'tile roof'|'toaster'|'tobacco shop, tobacconist shop, tobacconist'|'toilet seat'|'torch'|'totem pole'|'tow truck, tow car, wrecker'|'toyshop'|'tractor'|'trailer truck, tractor trailer, trucking rig, rig, articulated lorry, semi'|'tray'|'trench coat'|'tricycle, trike, velocipede'|'trimaran'|'tripod'|'triumphal arch'|'trolleybus, trolley coach, trackless trolley'|'trombone'|'tub, vat'|'turnstile'|'typewriter keyboard'|'umbrella'|'unicycle, monocycle'|'upright, upright piano'|'vacuum, vacuum cleaner'|'vase'|'vault'|'velvet'|'vending machine'|'vestment'|'viaduct'|'violin, fiddle'|'volleyball'|'waffle iron'|'wall clock'|'wallet, billfold, notecase, pocketbook'|'wardrobe, closet, press'|'warplane, military plane'|'washbasin, handbasin, washbowl, lavabo, wash-hand basin'|'washer, automatic washer, washing machine'|'water bottle'|'water jug'|'water tower'|'whiskey jug'|'whistle'|'wig'|'window screen'|'window shade'|'Windsor tie'|'wine bottle'|'wing'|'wok'|'wooden spoon'|'wool, woolen, woollen'|'worm fence, snake fence, snake-rail fence, Virginia fence'|'wreck'|'yawl'|'yurt'|'web site, website, internet site, site'|'comic book'|'crossword puzzle, crossword'|'street sign'|'traffic light, traffic signal, stoplight'|'book jacket, dust cover, dust jacket, dust wrapper'|'menu'|'plate'|'guacamole'|'consomme'|'hot pot, hotpot'|'trifle'|'ice cream, icecream'|'ice lolly, lolly, lollipop, popsicle'|'French loaf'|'bagel, beigel'|'pretzel'|'cheeseburger'|'hotdog, hot dog, red hot'|'mashed potato'|'head cabbage'|'broccoli'|'cauliflower'|'zucchini, courgette'|'spaghetti squash'|'acorn squash'|'butternut squash'|'cucumber, cuke'|'artichoke, globe artichoke'|'bell pepper'|'cardoon'|'mushroom'|'Granny Smith'|'strawberry'|'orange'|'lemon'|'fig'|'pineapple, ananas'|'banana'|'jackfruit, jak, jack'|'custard apple'|'pomegranate'|'hay'|'carbonara'|'chocolate sauce, chocolate syrup'|'dough'|'meat loaf, meatloaf'|'pizza, pizza pie'|'potpie'|'burrito'|'red wine'|'espresso'|'cup'|'eggnog'|'alp'|'bubble'|'cliff, drop, drop-off'|'coral reef'|'geyser'|'lakeside, lakeshore'|'promontory, headland, head, foreland'|'sandbar, sand bar'|'seashore, coast, seacoast, sea-coast'|'valley, vale'|'volcano'|'ballplayer, baseball player'|'groom, bridegroom'|'scuba diver'|'rapeseed'|'daisy'|'yellow lady\'s slipper, yellow lady-slipper, Cypripedium calceolus, Cypripedium parviflorum'|'corn'|'acorn'|'hip, rose hip, rosehip'|'buckeye, horse chestnut, conker'|'coral fungus'|'agaric'|'gyromitra'|'stinkhorn, carrion fungus'|'earthstar'|'hen-of-the-woods, hen of the woods, Polyporus frondosus, Grifola frondosa'|'bolete'|'ear, spike, capitulum'|'toilet tissue, toilet paper, bathroom tissue'| $dyn
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("label_name", opts['label_name'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "DiTCondLabelSelect"
        }
},

    /**
     * DiTCondLabelEmpty from ExtraModels/DiT
     * @desc 
    */
    "DiTCondLabelEmpty" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 

        //Getters
        get 'empty'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.model}
        */
        constructor(opts:{
            'model': MODEL
        }){
            super(ctx);

            super.$$link("model", opts['model'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "DiTCondLabelEmpty"
        }
},

    /**
     * PixArt Checkpoint Loader from ExtraModels/PixArt
     * @desc 
    */
    "PixArtCheckpointLoader" : class extends Node{
        //Setters
        //set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(0, value) } 
//set 'model'(value : 'PixArtMS_XL_2'|'PixArtMS_Sigma_XL_2'|'PixArtMS_Sigma_XL_2_900M'|'PixArtMS_Sigma_XL_2_2K'|'PixArt_XL_2'|'ControlPixArtHalf'|'ControlPixArtMSHalf'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'model'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.ckpt_name
		 * @param opts.model}
        */
        constructor(opts:{
            'ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'model': 'PixArtMS_XL_2'|'PixArtMS_Sigma_XL_2'|'PixArtMS_Sigma_XL_2_900M'|'PixArtMS_Sigma_XL_2_2K'|'PixArt_XL_2'|'ControlPixArtHalf'|'ControlPixArtMSHalf'| $dyn
        }){
            super(ctx);

            super.$$link("ckpt_name", opts['ckpt_name'])
super.$$link("model", opts['model'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "PixArtCheckpointLoader"
        }
},

    /**
     * PixArt Checkpoint Loader (auto) from ExtraModels/PixArt
     * @desc 
    */
    "PixArtCheckpointLoaderSimple" : class extends Node{
        //Setters
        //set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'model'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.ckpt_name}
        */
        constructor(opts:{
            'ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn
        }){
            super(ctx);

            super.$$link("ckpt_name", opts['ckpt_name'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "PixArtCheckpointLoaderSimple"
        }
},

    /**
     * PixArt Resolution Select from ExtraModels/PixArt
     * @desc 
    */
    "PixArtResolutionSelect" : class extends Node{
        //Setters
        //set 'model'(value : 'PixArtMS_XL_2'|'PixArt_XL_2'|'PixArtMS_Sigma_XL_2_2K'|'PixArtMS_Sigma_XL_2'|'PixArtMS_Sigma_XL_2_512'| $dyn)  { super.$$link(0, value) } 
//set 'ratio'(value : '0.25'|'0.26'|'0.27'|'0.28'|'0.32'|'0.33'|'0.35'|'0.40'|'0.42'|'0.48'|'0.50'|'0.52'|'0.57'|'0.60'|'0.68'|'0.72'|'0.78'|'0.82'|'0.88'|'0.94'|'1.00'|'1.07'|'1.13'|'1.21'|'1.29'|'1.38'|'1.46'|'1.67'|'1.75'|'2.00'|'2.09'|'2.40'|'2.50'|'2.89'|'3.00'|'3.11'|'3.62'|'3.75'|'3.88'|'4.00'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'width'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }
get 'height'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.ratio default: "1.00"}
        */
        constructor(opts:{
            'model': 'PixArtMS_XL_2'|'PixArt_XL_2'|'PixArtMS_Sigma_XL_2_2K'|'PixArtMS_Sigma_XL_2'|'PixArtMS_Sigma_XL_2_512'| $dyn,'ratio'?: '0.25'|'0.26'|'0.27'|'0.28'|'0.32'|'0.33'|'0.35'|'0.40'|'0.42'|'0.48'|'0.50'|'0.52'|'0.57'|'0.60'|'0.68'|'0.72'|'0.78'|'0.82'|'0.88'|'0.94'|'1.00'|'1.07'|'1.13'|'1.21'|'1.29'|'1.38'|'1.46'|'1.67'|'1.75'|'2.00'|'2.09'|'2.40'|'2.50'|'2.89'|'3.00'|'3.11'|'3.62'|'3.75'|'3.88'|'4.00'| $dyn
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("ratio", opts['ratio']??tmp["PixArtResolutionSelect"].defaults['ratio'])
}

        static defaults = {
    'ratio':  "1.00"
}
        protected override $$type(){
            return "PixArtResolutionSelect"
        }
},

    /**
     * PixArt Load LoRA from ExtraModels/PixArt
     * @desc 
    */
    "PixArtLoraLoader" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'lora_name'(value : 'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(1, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.lora_name
		 * @param opts.strength default: 1 max: 20 min: -20 step: 0.01}
        */
        constructor(opts:{
            'model': MODEL,'lora_name': 'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'strength'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("lora_name", opts['lora_name'])
super.$$link("strength", opts['strength']??tmp["PixArtLoraLoader"].defaults['strength'])
}

        static defaults = {
    'strength':  1
}
        protected override $$type(){
            return "PixArtLoraLoader"
        }
},

    /**
     * PixArt T5 Text Encode [Reference] from ExtraModels/PixArt
     * @desc 
    */
    "PixArtT5TextEncode" : class extends Node{
        //Setters
        //set 'text'(value : STRING)  { super.$$link(0, value) } 
//set 'T5'(value : T5)  { super.$$link(1, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.text
		 * @param opts.T5}
        */
        constructor(opts:{
            'text': STRING,'T5': T5
        }){
            super(ctx);

            super.$$link("text", opts['text'])
super.$$link("T5", opts['T5'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "PixArtT5TextEncode"
        }
},

    /**
     * PixArt Resolution Conditioning from ExtraModels/PixArt
     * @desc 
    */
    "PixArtResolutionCond" : class extends Node{
        //Setters
        //set 'cond'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'width'(value : INT)  { super.$$link(1, value) } 
//set 'height'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'cond'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.cond
		 * @param opts.width default: 1024
		 * @param opts.height default: 1024}
        */
        constructor(opts:{
            'cond': CONDITIONING,'width'?: INT,'height'?: INT
        }){
            super(ctx);

            super.$$link("cond", opts['cond'])
super.$$link("width", opts['width']??tmp["PixArtResolutionCond"].defaults['width'])
super.$$link("height", opts['height']??tmp["PixArtResolutionCond"].defaults['height'])
}

        static defaults = {
    'width':  1024,
'height':  1024
}
        protected override $$type(){
            return "PixArtResolutionCond"
        }
},

    /**
     * PixArt ControlNet Conditioning from ExtraModels/PixArt
     * @desc 
    */
    "PixArtControlNetCond" : class extends Node{
        //Setters
        //set 'cond'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'latent'(value : LATENT)  { super.$$link(1, value) } 

        //Getters
        get 'cond'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.cond
		 * @param opts.latent}
        */
        constructor(opts:{
            'cond': CONDITIONING,'latent': LATENT
        }){
            super(ctx);

            super.$$link("cond", opts['cond'])
super.$$link("latent", opts['latent'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "PixArtControlNetCond"
        }
},

    /**
     * PixArt T5 from SD3 CLIP from ExtraModels/PixArt
     * @desc 
    */
    "PixArtT5FromSD3CLIP" : class extends Node{
        //Setters
        //set 'sd3_clip'(value : CLIP)  { super.$$link(0, value) } 
//set 'padding'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 't5'() : CLIP { return [this.$uid.toString(), 0]  as unknown as CLIP; }

        /**
          * Constructor
		 * @param opts.sd3_clip
		 * @param opts.padding default: 1 max: 300 min: 1}
        */
        constructor(opts:{
            'sd3_clip': CLIP,'padding'?: INT
        }){
            super(ctx);

            super.$$link("sd3_clip", opts['sd3_clip'])
super.$$link("padding", opts['padding']??tmp["PixArtT5FromSD3CLIP"].defaults['padding'])
}

        static defaults = {
    'padding':  1
}
        protected override $$type(){
            return "PixArtT5FromSD3CLIP"
        }
},

    /**
     * T5v1.1 Loader from ExtraModels/T5
     * @desc 
    */
    "T5v11Loader" : class extends Node{
        //Setters
        //set 't5v11_name'(value : 't5-v1_1-xxl/pytorch_model-00001-of-00002.bin'|'t5-v1_1-xxl/pytorch_model-00002-of-00002.bin'| $dyn)  { super.$$link(0, value) } 
//set 't5v11_ver'(value : 'xxl'| $dyn)  { super.$$link(1, value) } 
//set 'path_type'(value : 'folder'|'file'| $dyn)  { super.$$link(2, value) } 
//set 'device'(value : 'auto'|'cpu'|'gpu'| $dyn)  { super.$$link(3, value) } 
//set 'dtype'(value : 'default'|'auto (comfy)'|'FP32'|'FP16'|'bnb8bit'|'bnb4bit'|'FP8 E4M3'|'FP8 E5M2'| $dyn)  { super.$$link(4, value) } 

        //Getters
        get 'T5'() : T5 { return [this.$uid.toString(), 0]  as unknown as T5; }

        /**
          * Constructor
		 * @param opts.t5v11_name
		 * @param opts.t5v11_ver
		 * @param opts.path_type
		 * @param opts.device default: "cpu"
		 * @param opts.dtype}
        */
        constructor(opts:{
            't5v11_name': 't5-v1_1-xxl/pytorch_model-00001-of-00002.bin'|'t5-v1_1-xxl/pytorch_model-00002-of-00002.bin'| $dyn,'t5v11_ver': 'xxl'| $dyn,'path_type': 'folder'|'file'| $dyn,'device'?: 'auto'|'cpu'|'gpu'| $dyn,'dtype': 'default'|'auto (comfy)'|'FP32'|'FP16'|'bnb8bit'|'bnb4bit'|'FP8 E4M3'|'FP8 E5M2'| $dyn
        }){
            super(ctx);

            super.$$link("t5v11_name", opts['t5v11_name'])
super.$$link("t5v11_ver", opts['t5v11_ver'])
super.$$link("path_type", opts['path_type'])
super.$$link("device", opts['device']??tmp["T5v11Loader"].defaults['device'])
super.$$link("dtype", opts['dtype'])
}

        static defaults = {
    'device':  "cpu"
}
        protected override $$type(){
            return "T5v11Loader"
        }
},

    /**
     * T5 Text Encode from ExtraModels/T5
     * @desc 
    */
    "T5TextEncode" : class extends Node{
        //Setters
        //set 'text'(value : STRING)  { super.$$link(0, value) } 
//set 'T5'(value : T5)  { super.$$link(1, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.text
		 * @param opts.T5}
        */
        constructor(opts:{
            'text': STRING,'T5': T5
        }){
            super(ctx);

            super.$$link("text", opts['text'])
super.$$link("T5", opts['T5'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "T5TextEncode"
        }
},

    /**
     * Hunyuan DiT Checkpoint Loader from ExtraModels/HunyuanDiT
     * @desc 
    */
    "HYDiTCheckpointLoader" : class extends Node{
        //Setters
        //set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(0, value) } 
//set 'model'(value : 'G/2'|'G/2-1.2'|'XL/2'|'L/2'|'B/2'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'model'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.ckpt_name
		 * @param opts.model default: "G/2"}
        */
        constructor(opts:{
            'ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'model'?: 'G/2'|'G/2-1.2'|'XL/2'|'L/2'|'B/2'| $dyn
        }){
            super(ctx);

            super.$$link("ckpt_name", opts['ckpt_name'])
super.$$link("model", opts['model']??tmp["HYDiTCheckpointLoader"].defaults['model'])
}

        static defaults = {
    'model':  "G/2"
}
        protected override $$type(){
            return "HYDiTCheckpointLoader"
        }
},

    /**
     * Hunyuan DiT Text Encoder Loader from ExtraModels/HunyuanDiT
     * @desc 
    */
    "HYDiTTextEncoderLoader" : class extends Node{
        //Setters
        //set 'clip_name'(value : void)  { super.$$link(0, value) } 
//set 'mt5_name'(value : 't5-v1_1-xxl/pytorch_model-00001-of-00002.bin'|'t5-v1_1-xxl/pytorch_model-00002-of-00002.bin'| $dyn)  { super.$$link(1, value) } 
//set 'device'(value : 'auto'|'cpu'|'gpu'| $dyn)  { super.$$link(2, value) } 
//set 'dtype'(value : 'default'|'auto (comfy)'|'FP32'|'FP16'|'BF16'| $dyn)  { super.$$link(3, value) } 

        //Getters
        get 'CLIP'() : CLIP { return [this.$uid.toString(), 0]  as unknown as CLIP; }
get 'T5'() : T5 { return [this.$uid.toString(), 1]  as unknown as T5; }

        /**
          * Constructor
		 * @param opts.clip_name
		 * @param opts.mt5_name
		 * @param opts.device default: "cpu"
		 * @param opts.dtype}
        */
        constructor(opts:{
            'clip_name': void,'mt5_name': 't5-v1_1-xxl/pytorch_model-00001-of-00002.bin'|'t5-v1_1-xxl/pytorch_model-00002-of-00002.bin'| $dyn,'device'?: 'auto'|'cpu'|'gpu'| $dyn,'dtype': 'default'|'auto (comfy)'|'FP32'|'FP16'|'BF16'| $dyn
        }){
            super(ctx);

            super.$$link("clip_name", opts['clip_name'])
super.$$link("mt5_name", opts['mt5_name'])
super.$$link("device", opts['device']??tmp["HYDiTTextEncoderLoader"].defaults['device'])
super.$$link("dtype", opts['dtype'])
}

        static defaults = {
    'device':  "cpu"
}
        protected override $$type(){
            return "HYDiTTextEncoderLoader"
        }
},

    /**
     * Hunyuan DiT Text Encode from ExtraModels/HunyuanDiT
     * @desc 
    */
    "HYDiTTextEncode" : class extends Node{
        //Setters
        //set 'text'(value : STRING)  { super.$$link(0, value) } 
//set 'text_t5'(value : STRING)  { super.$$link(1, value) } 
//set 'CLIP'(value : CLIP)  { super.$$link(2, value) } 
//set 'T5'(value : T5)  { super.$$link(3, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.text
		 * @param opts.text_t5
		 * @param opts.CLIP
		 * @param opts.T5}
        */
        constructor(opts:{
            'text': STRING,'text_t5': STRING,'CLIP': CLIP,'T5': T5
        }){
            super(ctx);

            super.$$link("text", opts['text'])
super.$$link("text_t5", opts['text_t5'])
super.$$link("CLIP", opts['CLIP'])
super.$$link("T5", opts['T5'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "HYDiTTextEncode"
        }
},

    /**
     * Hunyuan DiT Text Encode (simple) from ExtraModels/HunyuanDiT
     * @desc 
    */
    "HYDiTTextEncodeSimple" : class extends Node{
        //Setters
        //set 'text'(value : STRING)  { super.$$link(0, value) } 
//set 'CLIP'(value : CLIP)  { super.$$link(1, value) } 
//set 'T5'(value : T5)  { super.$$link(2, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.text
		 * @param opts.CLIP
		 * @param opts.T5}
        */
        constructor(opts:{
            'text': STRING,'CLIP': CLIP,'T5': T5
        }){
            super(ctx);

            super.$$link("text", opts['text'])
super.$$link("CLIP", opts['CLIP'])
super.$$link("T5", opts['T5'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "HYDiTTextEncodeSimple"
        }
},

    /**
     * Hunyuan DiT Size Conditioning (advanced) from ExtraModels/HunyuanDiT
     * @desc 
    */
    "HYDiTSrcSizeCond" : class extends Node{
        //Setters
        //set 'cond'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'width'(value : INT)  { super.$$link(1, value) } 
//set 'height'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'cond'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.cond
		 * @param opts.width default: 1024 step: 16
		 * @param opts.height default: 1024 step: 16}
        */
        constructor(opts:{
            'cond': CONDITIONING,'width'?: INT,'height'?: INT
        }){
            super(ctx);

            super.$$link("cond", opts['cond'])
super.$$link("width", opts['width']??tmp["HYDiTSrcSizeCond"].defaults['width'])
super.$$link("height", opts['height']??tmp["HYDiTSrcSizeCond"].defaults['height'])
}

        static defaults = {
    'width':  1024,
'height':  1024
}
        protected override $$type(){
            return "HYDiTSrcSizeCond"
        }
},

    /**
     * ExtraVAELoader from ExtraModels
     * @desc 
    */
    "ExtraVAELoader" : class extends Node{
        //Setters
        //set 'vae_name'(value : 'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(0, value) } 
//set 'vae_type'(value : 'kl-f4'|'kl-f8'|'kl-f8-d16'|'kl-f16'|'kl-f32'|'vq-f4'|'vq-f8'|'vq-f16'|'Consistency-Decoder'|'SDV-VideoDecoder'|'MoVQ3'| $dyn)  { super.$$link(1, value) } 
//set 'dtype'(value : 'auto'|'FP32'|'FP16'|'BF16'| $dyn)  { super.$$link(2, value) } 

        //Getters
        get 'VAE'() : VAE { return [this.$uid.toString(), 0]  as unknown as VAE; }

        /**
          * Constructor
		 * @param opts.vae_name
		 * @param opts.vae_type default: "kl-f8"
		 * @param opts.dtype}
        */
        constructor(opts:{
            'vae_name': 'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_type'?: 'kl-f4'|'kl-f8'|'kl-f8-d16'|'kl-f16'|'kl-f32'|'vq-f4'|'vq-f8'|'vq-f16'|'Consistency-Decoder'|'SDV-VideoDecoder'|'MoVQ3'| $dyn,'dtype': 'auto'|'FP32'|'FP16'|'BF16'| $dyn
        }){
            super(ctx);

            super.$$link("vae_name", opts['vae_name'])
super.$$link("vae_type", opts['vae_type']??tmp["ExtraVAELoader"].defaults['vae_type'])
super.$$link("dtype", opts['dtype'])
}

        static defaults = {
    'vae_type':  "kl-f8"
}
        protected override $$type(){
            return "ExtraVAELoader"
        }
},

    /**
     * MiaoBi CLIP Loader from ExtraModels/MiaoBi
     * @desc 
    */
    "MiaoBiCLIPLoader" : class extends Node{
        //Setters
        //set 'clip_name'(value : void)  { super.$$link(0, value) } 

        //Getters
        get 'CLIP'() : CLIP { return [this.$uid.toString(), 0]  as unknown as CLIP; }

        /**
          * Constructor
		 * @param opts.clip_name}
        */
        constructor(opts:{
            'clip_name': void
        }){
            super(ctx);

            super.$$link("clip_name", opts['clip_name'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "MiaoBiCLIPLoader"
        }
},

    /**
     * MiaoBi Checkpoint Loader (Diffusers) from ExtraModels/MiaoBi
     * @desc 
    */
    "MiaoBiDiffusersLoader" : class extends Node{
        //Setters
        //set 'model_path'(value : void)  { super.$$link(0, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this.$uid.toString(), 1]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this.$uid.toString(), 2]  as unknown as VAE; }

        /**
          * Constructor
		 * @param opts.model_path}
        */
        constructor(opts:{
            'model_path': void
        }){
            super(ctx);

            super.$$link("model_path", opts['model_path'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "MiaoBiDiffusersLoader"
        }
},

    /**
     * Force/Set CLIP Device from ExtraModels/other
     * @desc 
    */
    "OverrideCLIPDevice" : class extends Node{
        //Setters
        //set 'device'(value : 'cpu'|'cuda:0'| $dyn)  { super.$$link(0, value) } 
//set 'clip'(value : CLIP)  { super.$$link(1, value) } 

        //Getters
        get 'CLIP'() : CLIP { return [this.$uid.toString(), 0]  as unknown as CLIP; }

        /**
          * Constructor
		 * @param opts.device default: "cpu"
		 * @param opts.clip}
        */
        constructor(opts:{
            'device'?: 'cpu'|'cuda:0'| $dyn,'clip': CLIP
        }){
            super(ctx);

            super.$$link("device", opts['device']??tmp["OverrideCLIPDevice"].defaults['device'])
super.$$link("clip", opts['clip'])
}

        static defaults = {
    'device':  "cpu"
}
        protected override $$type(){
            return "OverrideCLIPDevice"
        }
},

    /**
     * Force/Set VAE Device from ExtraModels/other
     * @desc 
    */
    "OverrideVAEDevice" : class extends Node{
        //Setters
        //set 'device'(value : 'cpu'|'cuda:0'| $dyn)  { super.$$link(0, value) } 
//set 'vae'(value : VAE)  { super.$$link(1, value) } 

        //Getters
        get 'VAE'() : VAE { return [this.$uid.toString(), 0]  as unknown as VAE; }

        /**
          * Constructor
		 * @param opts.device default: "cpu"
		 * @param opts.vae}
        */
        constructor(opts:{
            'device'?: 'cpu'|'cuda:0'| $dyn,'vae': VAE
        }){
            super(ctx);

            super.$$link("device", opts['device']??tmp["OverrideVAEDevice"].defaults['device'])
super.$$link("vae", opts['vae'])
}

        static defaults = {
    'device':  "cpu"
}
        protected override $$type(){
            return "OverrideVAEDevice"
        }
},

    /**
     * Create Image Grid from EasyGrids
     * @desc 
    */
    "ImageGridCommander" : class extends Node{
        //Setters
        //set 'x_count'(value : INT)  { super.$$link(0, value) } 
//set 'y_count'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'x_index'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }
get 'y_index'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }
get 'x_size'() : INT { return [this.$uid.toString(), 2]  as unknown as INT; }
get 'y_size'() : INT { return [this.$uid.toString(), 3]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.x_count default: 1 max: undefined min: 1 step: 1
		 * @param opts.y_count default: 1 max: undefined min: 1 step: 1}
        */
        constructor(opts:{
            'x_count'?: INT,'y_count'?: INT
        }){
            super(ctx);

            super.$$link("x_count", opts['x_count']??tmp["ImageGridCommander"].defaults['x_count'])
super.$$link("y_count", opts['y_count']??tmp["ImageGridCommander"].defaults['y_count'])
}

        static defaults = {
    'x_count':  1,
'y_count':  1
}
        protected override $$type(){
            return "ImageGridCommander"
        }
},

    /**
     * Float List from EasyGrids
     * @desc 
    */
    "GridFloats" : class extends Node{
        //Setters
        //set 'index'(value : INT)  { super.$$link(0, value) } 
//set 'decimal_places'(value : INT)  { super.$$link(1, value) } 
//set 'float1'(value : FLOAT)  { super.$$link(2, value) } 
//set 'float2'(value : FLOAT)  { super.$$link(3, value) } 
//set 'float3'(value : FLOAT)  { super.$$link(4, value) } 
//set 'float4'(value : FLOAT)  { super.$$link(5, value) } 
//set 'float5'(value : FLOAT)  { super.$$link(6, value) } 
//set 'float6'(value : FLOAT)  { super.$$link(7, value) } 

        //Getters
        get 'current value'() : FLOAT { return [this.$uid.toString(), 0]  as unknown as FLOAT; }
get 'list'() : FLOAT_LIST { return [this.$uid.toString(), 1]  as unknown as FLOAT_LIST; }
get 'list text'() : STRING_LIST { return [this.$uid.toString(), 2]  as unknown as STRING_LIST; }

        /**
          * Constructor
		 * @param opts.index default: 1 max: undefined min: 1
		 * @param opts.decimal_places default: 3 max: undefined min: 1
		 * @param opts.float1 default: 1 step: 0.01
		 * @param opts.float2 default: 1 step: 0.01
		 * @param opts.float3 default: 1 step: 0.01
		 * @param opts.float4 default: 1 step: 0.01
		 * @param opts.float5 default: 1 step: 0.01
		 * @param opts.float6 default: 1 step: 0.01}
        */
        constructor(opts:{
            'index'?: INT,'decimal_places'?: INT,'float1'?: FLOAT,'float2'?: FLOAT,'float3'?: FLOAT,'float4'?: FLOAT,'float5'?: FLOAT,'float6'?: FLOAT
        }){
            super(ctx);

            super.$$link("index", opts['index']??tmp["GridFloats"].defaults['index'])
super.$$link("decimal_places", opts['decimal_places']??tmp["GridFloats"].defaults['decimal_places'])
super.$$link("float1", opts['float1']??tmp["GridFloats"].defaults['float1'])
super.$$link("float2", opts['float2']??tmp["GridFloats"].defaults['float2'])
super.$$link("float3", opts['float3']??tmp["GridFloats"].defaults['float3'])
super.$$link("float4", opts['float4']??tmp["GridFloats"].defaults['float4'])
super.$$link("float5", opts['float5']??tmp["GridFloats"].defaults['float5'])
super.$$link("float6", opts['float6']??tmp["GridFloats"].defaults['float6'])
}

        static defaults = {
    'index':  1,
'decimal_places':  3,
'float1':  1,
'float2':  1,
'float3':  1,
'float4':  1,
'float5':  1,
'float6':  1
}
        protected override $$type(){
            return "GridFloats"
        }
},

    /**
     * Float List fom Text Field from EasyGrids
     * @desc 
    */
    "GridFloatList" : class extends Node{
        //Setters
        //set 'index'(value : INT)  { super.$$link(0, value) } 
//set 'decimal_places'(value : INT)  { super.$$link(1, value) } 
//set 'float_list'(value : STRING)  { super.$$link(2, value) } 

        //Getters
        get 'current value'() : FLOAT { return [this.$uid.toString(), 0]  as unknown as FLOAT; }
get 'list'() : FLOAT_LIST { return [this.$uid.toString(), 1]  as unknown as FLOAT_LIST; }
get 'list text'() : STRING_LIST { return [this.$uid.toString(), 2]  as unknown as STRING_LIST; }

        /**
          * Constructor
		 * @param opts.index default: 1 max: 100 min: 1
		 * @param opts.decimal_places default: 3 max: undefined min: 1
		 * @param opts.float_list}
        */
        constructor(opts:{
            'index'?: INT,'decimal_places'?: INT,'float_list': STRING
        }){
            super(ctx);

            super.$$link("index", opts['index']??tmp["GridFloatList"].defaults['index'])
super.$$link("decimal_places", opts['decimal_places']??tmp["GridFloatList"].defaults['decimal_places'])
super.$$link("float_list", opts['float_list'])
}

        static defaults = {
    'index':  1,
'decimal_places':  3
}
        protected override $$type(){
            return "GridFloatList"
        }
},

    /**
     * Int List from EasyGrids
     * @desc 
    */
    "GridInts" : class extends Node{
        //Setters
        //set 'index'(value : INT)  { super.$$link(0, value) } 
//set 'int1'(value : INT)  { super.$$link(1, value) } 
//set 'int2'(value : INT)  { super.$$link(2, value) } 
//set 'int3'(value : INT)  { super.$$link(3, value) } 
//set 'int4'(value : INT)  { super.$$link(4, value) } 
//set 'int5'(value : INT)  { super.$$link(5, value) } 
//set 'int6'(value : INT)  { super.$$link(6, value) } 

        //Getters
        get 'current value'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }
get 'list'() : INT_LIST { return [this.$uid.toString(), 1]  as unknown as INT_LIST; }
get 'list text'() : STRING_LIST { return [this.$uid.toString(), 2]  as unknown as STRING_LIST; }

        /**
          * Constructor
		 * @param opts.index default: 1 max: undefined min: 1
		 * @param opts.int1 default: 1 step: 1
		 * @param opts.int2 default: 1 step: 1
		 * @param opts.int3 default: 1 step: 1
		 * @param opts.int4 default: 1 step: 1
		 * @param opts.int5 default: 1 step: 1
		 * @param opts.int6 default: 1 step: 1}
        */
        constructor(opts:{
            'index'?: INT,'int1'?: INT,'int2'?: INT,'int3'?: INT,'int4'?: INT,'int5'?: INT,'int6'?: INT
        }){
            super(ctx);

            super.$$link("index", opts['index']??tmp["GridInts"].defaults['index'])
super.$$link("int1", opts['int1']??tmp["GridInts"].defaults['int1'])
super.$$link("int2", opts['int2']??tmp["GridInts"].defaults['int2'])
super.$$link("int3", opts['int3']??tmp["GridInts"].defaults['int3'])
super.$$link("int4", opts['int4']??tmp["GridInts"].defaults['int4'])
super.$$link("int5", opts['int5']??tmp["GridInts"].defaults['int5'])
super.$$link("int6", opts['int6']??tmp["GridInts"].defaults['int6'])
}

        static defaults = {
    'index':  1,
'int1':  1,
'int2':  1,
'int3':  1,
'int4':  1,
'int5':  1,
'int6':  1
}
        protected override $$type(){
            return "GridInts"
        }
},

    /**
     * Int List from Text Field from EasyGrids
     * @desc 
    */
    "GridIntList" : class extends Node{
        //Setters
        //set 'index'(value : INT)  { super.$$link(0, value) } 
//set 'int_list'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'current value'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }
get 'list'() : INT_LIST { return [this.$uid.toString(), 1]  as unknown as INT_LIST; }
get 'list text'() : STRING_LIST { return [this.$uid.toString(), 2]  as unknown as STRING_LIST; }

        /**
          * Constructor
		 * @param opts.index default: 1 max: 100 min: 1
		 * @param opts.int_list}
        */
        constructor(opts:{
            'index'?: INT,'int_list': STRING
        }){
            super(ctx);

            super.$$link("index", opts['index']??tmp["GridIntList"].defaults['index'])
super.$$link("int_list", opts['int_list'])
}

        static defaults = {
    'index':  1
}
        protected override $$type(){
            return "GridIntList"
        }
},

    /**
     * String List from EasyGrids
     * @desc 
    */
    "GridStrings" : class extends Node{
        //Setters
        //set 'index'(value : INT)  { super.$$link(0, value) } 
//set 'string1'(value : STRING)  { super.$$link(1, value) } 
//set 'string2'(value : STRING)  { super.$$link(2, value) } 
//set 'string3'(value : STRING)  { super.$$link(3, value) } 
//set 'string4'(value : STRING)  { super.$$link(4, value) } 
//set 'string5'(value : STRING)  { super.$$link(5, value) } 
//set 'string6'(value : STRING)  { super.$$link(6, value) } 

        //Getters
        get 'current value'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }
get 'list'() : STRING_LIST { return [this.$uid.toString(), 1]  as unknown as STRING_LIST; }

        /**
          * Constructor
		 * @param opts.index default: 1 max: undefined min: 1
		 * @param opts.string1
		 * @param opts.string2
		 * @param opts.string3
		 * @param opts.string4
		 * @param opts.string5
		 * @param opts.string6}
        */
        constructor(opts:{
            'index'?: INT,'string1'?: STRING,'string2'?: STRING,'string3'?: STRING,'string4'?: STRING,'string5'?: STRING,'string6'?: STRING
        }){
            super(ctx);

            super.$$link("index", opts['index']??tmp["GridStrings"].defaults['index'])
super.$$link("string1", opts['string1']??tmp["GridStrings"].defaults['string1'])
super.$$link("string2", opts['string2']??tmp["GridStrings"].defaults['string2'])
super.$$link("string3", opts['string3']??tmp["GridStrings"].defaults['string3'])
super.$$link("string4", opts['string4']??tmp["GridStrings"].defaults['string4'])
super.$$link("string5", opts['string5']??tmp["GridStrings"].defaults['string5'])
super.$$link("string6", opts['string6']??tmp["GridStrings"].defaults['string6'])
}

        static defaults = {
    'index':  1,
'string1':  "",
'string2':  "",
'string3':  "",
'string4':  "",
'string5':  "",
'string6':  ""
}
        protected override $$type(){
            return "GridStrings"
        }
},

    /**
     * String List from Text Field from EasyGrids
     * @desc 
    */
    "GridStringList" : class extends Node{
        //Setters
        //set 'index'(value : INT)  { super.$$link(0, value) } 
//set 'string_list'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'current value'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }
get 'list'() : STRING_LIST { return [this.$uid.toString(), 1]  as unknown as STRING_LIST; }

        /**
          * Constructor
		 * @param opts.index default: 1 max: 100 min: 1
		 * @param opts.string_list}
        */
        constructor(opts:{
            'index'?: INT,'string_list': STRING
        }){
            super(ctx);

            super.$$link("index", opts['index']??tmp["GridStringList"].defaults['index'])
super.$$link("string_list", opts['string_list'])
}

        static defaults = {
    'index':  1
}
        protected override $$type(){
            return "GridStringList"
        }
},

    /**
     * Lora List from EasyGrids
     * @desc 
    */
    "GridLoras" : class extends Node{
        //Setters
        //set 'index'(value : INT)  { super.$$link(0, value) } 
//set 'model'(value : MODEL)  { super.$$link(1, value) } 
//set 'clip'(value : CLIP)  { super.$$link(2, value) } 
//set 'lora1'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(3, value) } 
//set 'lora2'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(4, value) } 
//set 'lora3'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(5, value) } 
//set 'lora4'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(6, value) } 
//set 'lora5'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(7, value) } 
//set 'lora6'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(8, value) } 
//set 'strength_model'(value : FLOAT)  { super.$$link(9, value) } 
//set 'strength_clip'(value : FLOAT)  { super.$$link(10, value) } 

        //Getters
        get 'current model'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'current clip'() : CLIP { return [this.$uid.toString(), 1]  as unknown as CLIP; }
get 'lora name list'() : STRING_LIST { return [this.$uid.toString(), 2]  as unknown as STRING_LIST; }

        /**
          * Constructor
		 * @param opts.index default: 1 max: undefined min: 1
		 * @param opts.model
		 * @param opts.clip
		 * @param opts.lora1
		 * @param opts.lora2
		 * @param opts.lora3
		 * @param opts.lora4
		 * @param opts.lora5
		 * @param opts.lora6
		 * @param opts.strength_model default: 1 max: 20 min: -20 step: 0.01
		 * @param opts.strength_clip default: 1 max: 20 min: -20 step: 0.01}
        */
        constructor(opts:{
            'index'?: INT,'model': MODEL,'clip': CLIP,'lora1': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora2': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora3': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora4': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora5': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora6': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'strength_model'?: FLOAT,'strength_clip'?: FLOAT
        }){
            super(ctx);

            super.$$link("index", opts['index']??tmp["GridLoras"].defaults['index'])
super.$$link("model", opts['model'])
super.$$link("clip", opts['clip'])
super.$$link("lora1", opts['lora1'])
super.$$link("lora2", opts['lora2'])
super.$$link("lora3", opts['lora3'])
super.$$link("lora4", opts['lora4'])
super.$$link("lora5", opts['lora5'])
super.$$link("lora6", opts['lora6'])
super.$$link("strength_model", opts['strength_model']??tmp["GridLoras"].defaults['strength_model'])
super.$$link("strength_clip", opts['strength_clip']??tmp["GridLoras"].defaults['strength_clip'])
}

        static defaults = {
    'index':  1,
'strength_model':  1,
'strength_clip':  1
}
        protected override $$type(){
            return "GridLoras"
        }
},

    /**
     * Text Concatenator from EasyGrids
     * @desc 
    */
    "TextConcatenator" : class extends Node{
        //Setters
        //set 'text_1'(value : STRING)  { super.$$link(0, value) } 
//set 'text_2'(value : STRING)  { super.$$link(1, value) } 
//set 'text_3'(value : STRING)  { super.$$link(2, value) } 
//set 'text_4'(value : STRING)  { super.$$link(3, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.text_1
		 * @param opts.text_2
		 * @param opts.text_3
		 * @param opts.text_4}
        */
        constructor(opts:{
            'text_1': STRING,'text_2'?: STRING,'text_3'?: STRING,'text_4'?: STRING
        }){
            super(ctx);

            super.$$link("text_1", opts['text_1'])
super.$$link("text_2", opts['text_2'])
super.$$link("text_3", opts['text_3'])
super.$$link("text_4", opts['text_4'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "TextConcatenator"
        }
},

    /**
     * Float to Text from EasyGrids
     * @desc 
    */
    "FloatToText" : class extends Node{
        //Setters
        //set 'float_input'(value : FLOAT)  { super.$$link(0, value) } 
//set 'decimal_places'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.float_input default: 1 step: 0.01
		 * @param opts.decimal_places default: 3 max: 10 min: 1}
        */
        constructor(opts:{
            'float_input'?: FLOAT,'decimal_places'?: INT
        }){
            super(ctx);

            super.$$link("float_input", opts['float_input']??tmp["FloatToText"].defaults['float_input'])
super.$$link("decimal_places", opts['decimal_places']??tmp["FloatToText"].defaults['decimal_places'])
}

        static defaults = {
    'float_input':  1,
'decimal_places':  3
}
        protected override $$type(){
            return "FloatToText"
        }
},

    /**
     * Int to Text from EasyGrids
     * @desc 
    */
    "IntToText" : class extends Node{
        //Setters
        //set 'int_input'(value : INT)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.int_input default: 1}
        */
        constructor(opts:{
            'int_input'?: INT
        }){
            super(ctx);

            super.$$link("int_input", opts['int_input']??tmp["IntToText"].defaults['int_input'])
}

        static defaults = {
    'int_input':  1
}
        protected override $$type(){
            return "IntToText"
        }
},

    /**
     * Save Image Grid from EasyGrids
     * @desc 
    */
    "SaveImageGrid" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'x_size'(value : INT)  { super.$$link(1, value) } 
//set 'y_size'(value : INT)  { super.$$link(2, value) } 
//set 'filename_prefix'(value : STRING)  { super.$$link(3, value) } 
//set 'column_labels'(value : STRING_LIST)  { super.$$link(4, value) } 
//set 'row_labels'(value : STRING_LIST)  { super.$$link(5, value) } 
//set 'images_grid_annotation'(value : GRID_ANNOTATION)  { super.$$link(6, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.x_size default: 1 max: undefined min: 1 step: 1
		 * @param opts.y_size default: 1 max: undefined min: 1 step: 1
		 * @param opts.filename_prefix default: "ComfyUI"
		 * @param opts.column_labels
		 * @param opts.row_labels
		 * @param opts.images_grid_annotation}
        */
        constructor(opts:{
            'images': IMAGE,'x_size'?: INT,'y_size'?: INT,'filename_prefix'?: STRING,'column_labels'?: STRING_LIST,'row_labels'?: STRING_LIST,'images_grid_annotation'?: GRID_ANNOTATION
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("x_size", opts['x_size']??tmp["SaveImageGrid"].defaults['x_size'])
super.$$link("y_size", opts['y_size']??tmp["SaveImageGrid"].defaults['y_size'])
super.$$link("filename_prefix", opts['filename_prefix']??tmp["SaveImageGrid"].defaults['filename_prefix'])
super.$$link("column_labels", opts['column_labels']??tmp["SaveImageGrid"].defaults['column_labels'])
super.$$link("row_labels", opts['row_labels']??tmp["SaveImageGrid"].defaults['row_labels'])
super.$$link("images_grid_annotation", opts['images_grid_annotation'])
}

        static defaults = {
    'x_size':  1,
'y_size':  1,
'filename_prefix':  "ComfyUI",
'column_labels':  null,
'row_labels':  null
}
        protected override $$type(){
            return "SaveImageGrid"
        }
},

    /**
     * Ultimate SD Upscale from image/upscaling
     * @desc 
    */
    "UltimateSDUpscale" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'model'(value : MODEL)  { super.$$link(1, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(2, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(3, value) } 
//set 'vae'(value : VAE)  { super.$$link(4, value) } 
//set 'upscale_by'(value : FLOAT)  { super.$$link(5, value) } 
//set 'seed'(value : INT)  { super.$$link(6, value) } 
//set 'steps'(value : INT)  { super.$$link(7, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(8, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(9, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn)  { super.$$link(10, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(11, value) } 
//set 'upscale_model'(value : UPSCALE_MODEL)  { super.$$link(12, value) } 
//set 'mode_type'(value : 'Linear'|'Chess'|'None'| $dyn)  { super.$$link(13, value) } 
//set 'tile_width'(value : INT)  { super.$$link(14, value) } 
//set 'tile_height'(value : INT)  { super.$$link(15, value) } 
//set 'mask_blur'(value : INT)  { super.$$link(16, value) } 
//set 'tile_padding'(value : INT)  { super.$$link(17, value) } 
//set 'seam_fix_mode'(value : 'None'|'Band Pass'|'Half Tile'|'Half Tile + Intersections'| $dyn)  { super.$$link(18, value) } 
//set 'seam_fix_denoise'(value : FLOAT)  { super.$$link(19, value) } 
//set 'seam_fix_width'(value : INT)  { super.$$link(20, value) } 
//set 'seam_fix_mask_blur'(value : INT)  { super.$$link(21, value) } 
//set 'seam_fix_padding'(value : INT)  { super.$$link(22, value) } 
//set 'force_uniform_tiles'(value : 'enable'|'disable'| $dyn)  { super.$$link(23, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.model
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.vae
		 * @param opts.upscale_by default: 2 max: 4 min: 0.05 step: 0.05
		 * @param opts.seed
		 * @param opts.steps default: 20 max: 10000 min: 1 step: 1
		 * @param opts.cfg default: 8
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.denoise default: 1 step: 0.01
		 * @param opts.upscale_model
		 * @param opts.mode_type
		 * @param opts.tile_width default: 512 max: 8192 min: 64 step: 8
		 * @param opts.tile_height default: 512 max: 8192 min: 64 step: 8
		 * @param opts.mask_blur default: 8 step: 1
		 * @param opts.tile_padding default: 32 step: 8
		 * @param opts.seam_fix_mode
		 * @param opts.seam_fix_denoise default: 1 step: 0.01
		 * @param opts.seam_fix_width default: 64 step: 8
		 * @param opts.seam_fix_mask_blur default: 8 step: 1
		 * @param opts.seam_fix_padding default: 16 step: 8
		 * @param opts.force_uniform_tiles}
        */
        constructor(opts:{
            'image': IMAGE,'model': MODEL,'positive': CONDITIONING,'negative': CONDITIONING,'vae': VAE,'upscale_by'?: FLOAT,'seed'?: INT,'steps'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn,'denoise'?: FLOAT,'upscale_model': UPSCALE_MODEL,'mode_type': 'Linear'|'Chess'|'None'| $dyn,'tile_width'?: INT,'tile_height'?: INT,'mask_blur'?: INT,'tile_padding'?: INT,'seam_fix_mode': 'None'|'Band Pass'|'Half Tile'|'Half Tile + Intersections'| $dyn,'seam_fix_denoise'?: FLOAT,'seam_fix_width'?: INT,'seam_fix_mask_blur'?: INT,'seam_fix_padding'?: INT,'force_uniform_tiles': 'enable'|'disable'| $dyn
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("model", opts['model'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("vae", opts['vae'])
super.$$link("upscale_by", opts['upscale_by']??tmp["UltimateSDUpscale"].defaults['upscale_by'])
super.$$link("seed", opts['seed']??tmp["UltimateSDUpscale"].defaults['seed'])
super.$$link("steps", opts['steps']??tmp["UltimateSDUpscale"].defaults['steps'])
super.$$link("cfg", opts['cfg']??tmp["UltimateSDUpscale"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("denoise", opts['denoise']??tmp["UltimateSDUpscale"].defaults['denoise'])
super.$$link("upscale_model", opts['upscale_model'])
super.$$link("mode_type", opts['mode_type'])
super.$$link("tile_width", opts['tile_width']??tmp["UltimateSDUpscale"].defaults['tile_width'])
super.$$link("tile_height", opts['tile_height']??tmp["UltimateSDUpscale"].defaults['tile_height'])
super.$$link("mask_blur", opts['mask_blur']??tmp["UltimateSDUpscale"].defaults['mask_blur'])
super.$$link("tile_padding", opts['tile_padding']??tmp["UltimateSDUpscale"].defaults['tile_padding'])
super.$$link("seam_fix_mode", opts['seam_fix_mode'])
super.$$link("seam_fix_denoise", opts['seam_fix_denoise']??tmp["UltimateSDUpscale"].defaults['seam_fix_denoise'])
super.$$link("seam_fix_width", opts['seam_fix_width']??tmp["UltimateSDUpscale"].defaults['seam_fix_width'])
super.$$link("seam_fix_mask_blur", opts['seam_fix_mask_blur']??tmp["UltimateSDUpscale"].defaults['seam_fix_mask_blur'])
super.$$link("seam_fix_padding", opts['seam_fix_padding']??tmp["UltimateSDUpscale"].defaults['seam_fix_padding'])
super.$$link("force_uniform_tiles", opts['force_uniform_tiles'])
}

        static defaults = {
    'upscale_by':  2,
'seed':  0,
'steps':  20,
'cfg':  8,
'denoise':  1,
'tile_width':  512,
'tile_height':  512,
'mask_blur':  8,
'tile_padding':  32,
'seam_fix_denoise':  1,
'seam_fix_width':  64,
'seam_fix_mask_blur':  8,
'seam_fix_padding':  16
}
        protected override $$type(){
            return "UltimateSDUpscale"
        }
},

    /**
     * Ultimate SD Upscale (No Upscale) from image/upscaling
     * @desc 
    */
    "UltimateSDUpscaleNoUpscale" : class extends Node{
        //Setters
        //set 'upscaled_image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'model'(value : MODEL)  { super.$$link(1, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(2, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(3, value) } 
//set 'vae'(value : VAE)  { super.$$link(4, value) } 
//set 'seed'(value : INT)  { super.$$link(5, value) } 
//set 'steps'(value : INT)  { super.$$link(6, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(7, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(8, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn)  { super.$$link(9, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(10, value) } 
//set 'mode_type'(value : 'Linear'|'Chess'|'None'| $dyn)  { super.$$link(11, value) } 
//set 'tile_width'(value : INT)  { super.$$link(12, value) } 
//set 'tile_height'(value : INT)  { super.$$link(13, value) } 
//set 'mask_blur'(value : INT)  { super.$$link(14, value) } 
//set 'tile_padding'(value : INT)  { super.$$link(15, value) } 
//set 'seam_fix_mode'(value : 'None'|'Band Pass'|'Half Tile'|'Half Tile + Intersections'| $dyn)  { super.$$link(16, value) } 
//set 'seam_fix_denoise'(value : FLOAT)  { super.$$link(17, value) } 
//set 'seam_fix_width'(value : INT)  { super.$$link(18, value) } 
//set 'seam_fix_mask_blur'(value : INT)  { super.$$link(19, value) } 
//set 'seam_fix_padding'(value : INT)  { super.$$link(20, value) } 
//set 'force_uniform_tiles'(value : 'enable'|'disable'| $dyn)  { super.$$link(21, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.upscaled_image
		 * @param opts.model
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.vae
		 * @param opts.seed
		 * @param opts.steps default: 20 max: 10000 min: 1 step: 1
		 * @param opts.cfg default: 8
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.denoise default: 1 step: 0.01
		 * @param opts.mode_type
		 * @param opts.tile_width default: 512 max: 8192 min: 64 step: 8
		 * @param opts.tile_height default: 512 max: 8192 min: 64 step: 8
		 * @param opts.mask_blur default: 8 step: 1
		 * @param opts.tile_padding default: 32 step: 8
		 * @param opts.seam_fix_mode
		 * @param opts.seam_fix_denoise default: 1 step: 0.01
		 * @param opts.seam_fix_width default: 64 step: 8
		 * @param opts.seam_fix_mask_blur default: 8 step: 1
		 * @param opts.seam_fix_padding default: 16 step: 8
		 * @param opts.force_uniform_tiles}
        */
        constructor(opts:{
            'upscaled_image': IMAGE,'model': MODEL,'positive': CONDITIONING,'negative': CONDITIONING,'vae': VAE,'seed'?: INT,'steps'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn,'denoise'?: FLOAT,'mode_type': 'Linear'|'Chess'|'None'| $dyn,'tile_width'?: INT,'tile_height'?: INT,'mask_blur'?: INT,'tile_padding'?: INT,'seam_fix_mode': 'None'|'Band Pass'|'Half Tile'|'Half Tile + Intersections'| $dyn,'seam_fix_denoise'?: FLOAT,'seam_fix_width'?: INT,'seam_fix_mask_blur'?: INT,'seam_fix_padding'?: INT,'force_uniform_tiles': 'enable'|'disable'| $dyn
        }){
            super(ctx);

            super.$$link("upscaled_image", opts['upscaled_image'])
super.$$link("model", opts['model'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("vae", opts['vae'])
super.$$link("seed", opts['seed']??tmp["UltimateSDUpscaleNoUpscale"].defaults['seed'])
super.$$link("steps", opts['steps']??tmp["UltimateSDUpscaleNoUpscale"].defaults['steps'])
super.$$link("cfg", opts['cfg']??tmp["UltimateSDUpscaleNoUpscale"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("denoise", opts['denoise']??tmp["UltimateSDUpscaleNoUpscale"].defaults['denoise'])
super.$$link("mode_type", opts['mode_type'])
super.$$link("tile_width", opts['tile_width']??tmp["UltimateSDUpscaleNoUpscale"].defaults['tile_width'])
super.$$link("tile_height", opts['tile_height']??tmp["UltimateSDUpscaleNoUpscale"].defaults['tile_height'])
super.$$link("mask_blur", opts['mask_blur']??tmp["UltimateSDUpscaleNoUpscale"].defaults['mask_blur'])
super.$$link("tile_padding", opts['tile_padding']??tmp["UltimateSDUpscaleNoUpscale"].defaults['tile_padding'])
super.$$link("seam_fix_mode", opts['seam_fix_mode'])
super.$$link("seam_fix_denoise", opts['seam_fix_denoise']??tmp["UltimateSDUpscaleNoUpscale"].defaults['seam_fix_denoise'])
super.$$link("seam_fix_width", opts['seam_fix_width']??tmp["UltimateSDUpscaleNoUpscale"].defaults['seam_fix_width'])
super.$$link("seam_fix_mask_blur", opts['seam_fix_mask_blur']??tmp["UltimateSDUpscaleNoUpscale"].defaults['seam_fix_mask_blur'])
super.$$link("seam_fix_padding", opts['seam_fix_padding']??tmp["UltimateSDUpscaleNoUpscale"].defaults['seam_fix_padding'])
super.$$link("force_uniform_tiles", opts['force_uniform_tiles'])
}

        static defaults = {
    'seed':  0,
'steps':  20,
'cfg':  8,
'denoise':  1,
'tile_width':  512,
'tile_height':  512,
'mask_blur':  8,
'tile_padding':  32,
'seam_fix_denoise':  1,
'seam_fix_width':  64,
'seam_fix_mask_blur':  8,
'seam_fix_padding':  16
}
        protected override $$type(){
            return "UltimateSDUpscaleNoUpscale"
        }
},

    /**
     * Blend Latents 🦚 from Power Noise Suite/Latent/Adjustements
     * @desc 
    */
    "Blend Latents (PPF Noise)" : class extends Node{
        //Setters
        //set 'latent_a'(value : LATENT)  { super.$$link(0, value) } 
//set 'latent_b'(value : LATENT)  { super.$$link(1, value) } 
//set 'operation'(value : 'add'|'bislerp'|'color dodge'|'colorize'|'cosine interp'|'cuberp'|'difference'|'exclusion'|'glow'|'hard light'|'hslerp'|'inject'|'lerp'|'linear dodge'|'linear light'|'multiply'|'overlay'|'pin light'|'random'|'reflect'|'screen'|'slerp'|'subtract'|'vivid light'| $dyn)  { super.$$link(2, value) } 
//set 'blend_ratio'(value : FLOAT)  { super.$$link(3, value) } 
//set 'blend_strength'(value : FLOAT)  { super.$$link(4, value) } 
//set 'mask'(value : MASK)  { super.$$link(5, value) } 
//set 'set_noise_mask'(value : 'false'|'true'| $dyn)  { super.$$link(6, value) } 
//set 'normalize'(value : 'false'|'true'| $dyn)  { super.$$link(7, value) } 
//set 'clamp_min'(value : FLOAT)  { super.$$link(8, value) } 
//set 'clamp_max'(value : FLOAT)  { super.$$link(9, value) } 
//set 'latent2rgb_preview'(value : 'false'|'true'| $dyn)  { super.$$link(10, value) } 

        //Getters
        get 'latents'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }
get 'previews'() : IMAGE { return [this.$uid.toString(), 1]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.latent_a
		 * @param opts.latent_b
		 * @param opts.operation
		 * @param opts.blend_ratio default: 0.5 max: 1 min: 0.01 step: 0.01
		 * @param opts.blend_strength default: 1 max: 100 min: -100 step: 0.01
		 * @param opts.mask
		 * @param opts.set_noise_mask
		 * @param opts.normalize
		 * @param opts.clamp_min max: 10 min: -10 step: 0.01
		 * @param opts.clamp_max default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.latent2rgb_preview}
        */
        constructor(opts:{
            'latent_a': LATENT,'latent_b': LATENT,'operation': 'add'|'bislerp'|'color dodge'|'colorize'|'cosine interp'|'cuberp'|'difference'|'exclusion'|'glow'|'hard light'|'hslerp'|'inject'|'lerp'|'linear dodge'|'linear light'|'multiply'|'overlay'|'pin light'|'random'|'reflect'|'screen'|'slerp'|'subtract'|'vivid light'| $dyn,'blend_ratio'?: FLOAT,'blend_strength'?: FLOAT,'mask'?: MASK,'set_noise_mask'?: 'false'|'true'| $dyn,'normalize'?: 'false'|'true'| $dyn,'clamp_min'?: FLOAT,'clamp_max'?: FLOAT,'latent2rgb_preview'?: 'false'|'true'| $dyn
        }){
            super(ctx);

            super.$$link("latent_a", opts['latent_a'])
super.$$link("latent_b", opts['latent_b'])
super.$$link("operation", opts['operation'])
super.$$link("blend_ratio", opts['blend_ratio']??tmp["Blend Latents (PPF Noise)"].defaults['blend_ratio'])
super.$$link("blend_strength", opts['blend_strength']??tmp["Blend Latents (PPF Noise)"].defaults['blend_strength'])
super.$$link("mask", opts['mask'])
super.$$link("set_noise_mask", opts['set_noise_mask'])
super.$$link("normalize", opts['normalize'])
super.$$link("clamp_min", opts['clamp_min']??tmp["Blend Latents (PPF Noise)"].defaults['clamp_min'])
super.$$link("clamp_max", opts['clamp_max']??tmp["Blend Latents (PPF Noise)"].defaults['clamp_max'])
super.$$link("latent2rgb_preview", opts['latent2rgb_preview'])
}

        static defaults = {
    'blend_ratio':  0.5,
'blend_strength':  1,
'clamp_min':  0,
'clamp_max':  1
}
        protected override $$type(){
            return "Blend Latents (PPF Noise)"
        }
},

    /**
     * Cross-Hatch Power Fractal 🦚 from Power Noise Suite/Noise
     * @desc 
    */
    "Cross-Hatch Power Fractal (PPF Noise)" : class extends Node{
        //Setters
        //set 'batch_size'(value : INT)  { super.$$link(0, value) } 
//set 'width'(value : INT)  { super.$$link(1, value) } 
//set 'height'(value : INT)  { super.$$link(2, value) } 
//set 'resampling'(value : 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp'| $dyn)  { super.$$link(3, value) } 
//set 'frequency'(value : FLOAT)  { super.$$link(4, value) } 
//set 'octaves'(value : INT)  { super.$$link(5, value) } 
//set 'persistence'(value : FLOAT)  { super.$$link(6, value) } 
//set 'num_colors'(value : INT)  { super.$$link(7, value) } 
//set 'color_tolerance'(value : FLOAT)  { super.$$link(8, value) } 
//set 'angle_degrees'(value : FLOAT)  { super.$$link(9, value) } 
//set 'brightness'(value : FLOAT)  { super.$$link(10, value) } 
//set 'contrast'(value : FLOAT)  { super.$$link(11, value) } 
//set 'blur'(value : FLOAT)  { super.$$link(12, value) } 
//set 'clamp_min'(value : FLOAT)  { super.$$link(13, value) } 
//set 'clamp_max'(value : FLOAT)  { super.$$link(14, value) } 
//set 'seed'(value : INT)  { super.$$link(15, value) } 
//set 'device'(value : 'cpu'|'cuda'| $dyn)  { super.$$link(16, value) } 
//set 'optional_vae'(value : VAE)  { super.$$link(17, value) } 
//set 'ch_settings'(value : CH_SETTINGS)  { super.$$link(18, value) } 

        //Getters
        get 'latents'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }
get 'previews'() : IMAGE { return [this.$uid.toString(), 1]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.batch_size default: 1 max: 64 min: 1 step: 1
		 * @param opts.width default: 512 max: 8192 min: 64 step: 1
		 * @param opts.height default: 512 max: 8192 min: 64 step: 1
		 * @param opts.resampling
		 * @param opts.frequency default: 320 max: 1024 min: 0.001 step: 0.001
		 * @param opts.octaves default: 12 max: 32 min: 1 step: 1
		 * @param opts.persistence default: 1.5 max: 2 min: 0.001 step: 0.001
		 * @param opts.num_colors default: 16 max: 256 min: 2 step: 1
		 * @param opts.color_tolerance default: 0.05 max: 1 min: 0.001 step: 0.001
		 * @param opts.angle_degrees default: 45 step: 0.01
		 * @param opts.brightness max: 1 min: -1 step: 0.001
		 * @param opts.contrast max: 1 min: -1 step: 0.001
		 * @param opts.blur default: 2.5 step: 0.01
		 * @param opts.clamp_min max: 10 min: -10 step: 0.01
		 * @param opts.clamp_max default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.seed
		 * @param opts.device
		 * @param opts.optional_vae
		 * @param opts.ch_settings}
        */
        constructor(opts:{
            'batch_size'?: INT,'width'?: INT,'height'?: INT,'resampling': 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp'| $dyn,'frequency'?: FLOAT,'octaves'?: INT,'persistence'?: FLOAT,'num_colors'?: INT,'color_tolerance'?: FLOAT,'angle_degrees'?: FLOAT,'brightness'?: FLOAT,'contrast'?: FLOAT,'blur'?: FLOAT,'clamp_min'?: FLOAT,'clamp_max'?: FLOAT,'seed'?: INT,'device': 'cpu'|'cuda'| $dyn,'optional_vae'?: VAE,'ch_settings'?: CH_SETTINGS
        }){
            super(ctx);

            super.$$link("batch_size", opts['batch_size']??tmp["Cross-Hatch Power Fractal (PPF Noise)"].defaults['batch_size'])
super.$$link("width", opts['width']??tmp["Cross-Hatch Power Fractal (PPF Noise)"].defaults['width'])
super.$$link("height", opts['height']??tmp["Cross-Hatch Power Fractal (PPF Noise)"].defaults['height'])
super.$$link("resampling", opts['resampling'])
super.$$link("frequency", opts['frequency']??tmp["Cross-Hatch Power Fractal (PPF Noise)"].defaults['frequency'])
super.$$link("octaves", opts['octaves']??tmp["Cross-Hatch Power Fractal (PPF Noise)"].defaults['octaves'])
super.$$link("persistence", opts['persistence']??tmp["Cross-Hatch Power Fractal (PPF Noise)"].defaults['persistence'])
super.$$link("num_colors", opts['num_colors']??tmp["Cross-Hatch Power Fractal (PPF Noise)"].defaults['num_colors'])
super.$$link("color_tolerance", opts['color_tolerance']??tmp["Cross-Hatch Power Fractal (PPF Noise)"].defaults['color_tolerance'])
super.$$link("angle_degrees", opts['angle_degrees']??tmp["Cross-Hatch Power Fractal (PPF Noise)"].defaults['angle_degrees'])
super.$$link("brightness", opts['brightness']??tmp["Cross-Hatch Power Fractal (PPF Noise)"].defaults['brightness'])
super.$$link("contrast", opts['contrast']??tmp["Cross-Hatch Power Fractal (PPF Noise)"].defaults['contrast'])
super.$$link("blur", opts['blur']??tmp["Cross-Hatch Power Fractal (PPF Noise)"].defaults['blur'])
super.$$link("clamp_min", opts['clamp_min']??tmp["Cross-Hatch Power Fractal (PPF Noise)"].defaults['clamp_min'])
super.$$link("clamp_max", opts['clamp_max']??tmp["Cross-Hatch Power Fractal (PPF Noise)"].defaults['clamp_max'])
super.$$link("seed", opts['seed']??tmp["Cross-Hatch Power Fractal (PPF Noise)"].defaults['seed'])
super.$$link("device", opts['device'])
super.$$link("optional_vae", opts['optional_vae'])
super.$$link("ch_settings", opts['ch_settings'])
}

        static defaults = {
    'batch_size':  1,
'width':  512,
'height':  512,
'frequency':  320,
'octaves':  12,
'persistence':  1.5,
'num_colors':  16,
'color_tolerance':  0.05,
'angle_degrees':  45,
'brightness':  0,
'contrast':  0,
'blur':  2.5,
'clamp_min':  0,
'clamp_max':  1,
'seed':  0
}
        protected override $$type(){
            return "Cross-Hatch Power Fractal (PPF Noise)"
        }
},

    /**
     * Cross-Hatch Power Fractal Settings 🦚 from Power Noise Suite/Sampling/Settings
     * @desc 
    */
    "Cross-Hatch Power Fractal Settings (PPF Noise)" : class extends Node{
        //Setters
        //set 'frequency'(value : FLOAT)  { super.$$link(0, value) } 
//set 'octaves'(value : INT)  { super.$$link(1, value) } 
//set 'persistence'(value : FLOAT)  { super.$$link(2, value) } 
//set 'num_colors'(value : INT)  { super.$$link(3, value) } 
//set 'color_tolerance'(value : FLOAT)  { super.$$link(4, value) } 
//set 'angle_degrees'(value : FLOAT)  { super.$$link(5, value) } 
//set 'brightness'(value : FLOAT)  { super.$$link(6, value) } 
//set 'contrast'(value : FLOAT)  { super.$$link(7, value) } 
//set 'blur'(value : FLOAT)  { super.$$link(8, value) } 

        //Getters
        get 'ch_settings'() : CH_SETTINGS { return [this.$uid.toString(), 0]  as unknown as CH_SETTINGS; }

        /**
          * Constructor
		 * @param opts.frequency default: 320 max: 1024 min: 0.001 step: 0.001
		 * @param opts.octaves default: 12 max: 32 min: 1 step: 1
		 * @param opts.persistence default: 1.5 max: 2 min: 0.001 step: 0.001
		 * @param opts.num_colors default: 16 max: 256 min: 2 step: 1
		 * @param opts.color_tolerance default: 0.05 max: 1 min: 0.001 step: 0.001
		 * @param opts.angle_degrees default: 45 step: 0.01
		 * @param opts.brightness max: 1 min: -1 step: 0.001
		 * @param opts.contrast max: 1 min: -1 step: 0.001
		 * @param opts.blur default: 2.5 step: 0.01}
        */
        constructor(opts:{
            'frequency'?: FLOAT,'octaves'?: INT,'persistence'?: FLOAT,'num_colors'?: INT,'color_tolerance'?: FLOAT,'angle_degrees'?: FLOAT,'brightness'?: FLOAT,'contrast'?: FLOAT,'blur'?: FLOAT
        }){
            super(ctx);

            super.$$link("frequency", opts['frequency']??tmp["Cross-Hatch Power Fractal Settings (PPF Noise)"].defaults['frequency'])
super.$$link("octaves", opts['octaves']??tmp["Cross-Hatch Power Fractal Settings (PPF Noise)"].defaults['octaves'])
super.$$link("persistence", opts['persistence']??tmp["Cross-Hatch Power Fractal Settings (PPF Noise)"].defaults['persistence'])
super.$$link("num_colors", opts['num_colors']??tmp["Cross-Hatch Power Fractal Settings (PPF Noise)"].defaults['num_colors'])
super.$$link("color_tolerance", opts['color_tolerance']??tmp["Cross-Hatch Power Fractal Settings (PPF Noise)"].defaults['color_tolerance'])
super.$$link("angle_degrees", opts['angle_degrees']??tmp["Cross-Hatch Power Fractal Settings (PPF Noise)"].defaults['angle_degrees'])
super.$$link("brightness", opts['brightness']??tmp["Cross-Hatch Power Fractal Settings (PPF Noise)"].defaults['brightness'])
super.$$link("contrast", opts['contrast']??tmp["Cross-Hatch Power Fractal Settings (PPF Noise)"].defaults['contrast'])
super.$$link("blur", opts['blur']??tmp["Cross-Hatch Power Fractal Settings (PPF Noise)"].defaults['blur'])
}

        static defaults = {
    'frequency':  320,
'octaves':  12,
'persistence':  1.5,
'num_colors':  16,
'color_tolerance':  0.05,
'angle_degrees':  45,
'brightness':  0,
'contrast':  0,
'blur':  2.5
}
        protected override $$type(){
            return "Cross-Hatch Power Fractal Settings (PPF Noise)"
        }
},

    /**
     * Images as Latents 🦚 from latent/util
     * @desc 
    */
    "Images as Latents (PPF Noise)" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'resampling'(value : 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'latents'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }
get 'images'() : IMAGE { return [this.$uid.toString(), 1]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.resampling}
        */
        constructor(opts:{
            'images': IMAGE,'resampling': 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp'| $dyn
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("resampling", opts['resampling'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Images as Latents (PPF Noise)"
        }
},

    /**
     * Latent Adjustment 🦚 from Power Noise Suite/Latent/Adjustements
     * @desc 
    */
    "Latent Adjustment (PPF Noise)" : class extends Node{
        //Setters
        //set 'latents'(value : LATENT)  { super.$$link(0, value) } 
//set 'brightness'(value : FLOAT)  { super.$$link(1, value) } 
//set 'contrast'(value : FLOAT)  { super.$$link(2, value) } 
//set 'saturation'(value : FLOAT)  { super.$$link(3, value) } 
//set 'exposure'(value : FLOAT)  { super.$$link(4, value) } 
//set 'alpha_sharpen'(value : FLOAT)  { super.$$link(5, value) } 
//set 'high_pass_radius'(value : FLOAT)  { super.$$link(6, value) } 
//set 'high_pass_strength'(value : FLOAT)  { super.$$link(7, value) } 
//set 'clamp_min'(value : FLOAT)  { super.$$link(8, value) } 
//set 'clamp_max'(value : FLOAT)  { super.$$link(9, value) } 
//set 'latent2rgb_preview'(value : 'false'|'true'| $dyn)  { super.$$link(10, value) } 

        //Getters
        get 'latents'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }
get 'previews'() : IMAGE { return [this.$uid.toString(), 1]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.latents
		 * @param opts.brightness default: 1 max: 2 min: -1 step: 0.001
		 * @param opts.contrast default: 1 max: 2 min: -1 step: 0.001
		 * @param opts.saturation default: 1 step: 0.001
		 * @param opts.exposure max: 2 min: -1 step: 0.001
		 * @param opts.alpha_sharpen step: 0.01
		 * @param opts.high_pass_radius step: 0.01
		 * @param opts.high_pass_strength default: 1 step: 0.01
		 * @param opts.clamp_min max: 10 min: -10 step: 0.01
		 * @param opts.clamp_max default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.latent2rgb_preview}
        */
        constructor(opts:{
            'latents': LATENT,'brightness'?: FLOAT,'contrast'?: FLOAT,'saturation'?: FLOAT,'exposure'?: FLOAT,'alpha_sharpen'?: FLOAT,'high_pass_radius'?: FLOAT,'high_pass_strength'?: FLOAT,'clamp_min'?: FLOAT,'clamp_max'?: FLOAT,'latent2rgb_preview'?: 'false'|'true'| $dyn
        }){
            super(ctx);

            super.$$link("latents", opts['latents'])
super.$$link("brightness", opts['brightness']??tmp["Latent Adjustment (PPF Noise)"].defaults['brightness'])
super.$$link("contrast", opts['contrast']??tmp["Latent Adjustment (PPF Noise)"].defaults['contrast'])
super.$$link("saturation", opts['saturation']??tmp["Latent Adjustment (PPF Noise)"].defaults['saturation'])
super.$$link("exposure", opts['exposure']??tmp["Latent Adjustment (PPF Noise)"].defaults['exposure'])
super.$$link("alpha_sharpen", opts['alpha_sharpen']??tmp["Latent Adjustment (PPF Noise)"].defaults['alpha_sharpen'])
super.$$link("high_pass_radius", opts['high_pass_radius']??tmp["Latent Adjustment (PPF Noise)"].defaults['high_pass_radius'])
super.$$link("high_pass_strength", opts['high_pass_strength']??tmp["Latent Adjustment (PPF Noise)"].defaults['high_pass_strength'])
super.$$link("clamp_min", opts['clamp_min']??tmp["Latent Adjustment (PPF Noise)"].defaults['clamp_min'])
super.$$link("clamp_max", opts['clamp_max']??tmp["Latent Adjustment (PPF Noise)"].defaults['clamp_max'])
super.$$link("latent2rgb_preview", opts['latent2rgb_preview'])
}

        static defaults = {
    'brightness':  1,
'contrast':  1,
'saturation':  1,
'exposure':  0,
'alpha_sharpen':  0,
'high_pass_radius':  0,
'high_pass_strength':  1,
'clamp_min':  0,
'clamp_max':  1
}
        protected override $$type(){
            return "Latent Adjustment (PPF Noise)"
        }
},

    /**
     * Latents to CPU 🦚 from Power Noise Suite/Latent/Util
     * @desc 
    */
    "Latents to CPU (PPF Noise)" : class extends Node{
        //Setters
        //set 'latents'(value : LATENT)  { super.$$link(0, value) } 

        //Getters
        get 'latents'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.latents}
        */
        constructor(opts:{
            'latents': LATENT
        }){
            super(ctx);

            super.$$link("latents", opts['latents'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Latents to CPU (PPF Noise)"
        }
},

    /**
     * Linear Cross-Hatch Power Fractal 🦚 from Power Noise Suite/Noise
     * @desc 
    */
    "Linear Cross-Hatch Power Fractal (PPF Noise)" : class extends Node{
        //Setters
        //set 'batch_size'(value : INT)  { super.$$link(0, value) } 
//set 'width'(value : INT)  { super.$$link(1, value) } 
//set 'height'(value : INT)  { super.$$link(2, value) } 
//set 'resampling'(value : 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp'| $dyn)  { super.$$link(3, value) } 
//set 'frequency'(value : FLOAT)  { super.$$link(4, value) } 
//set 'gain'(value : FLOAT)  { super.$$link(5, value) } 
//set 'octaves'(value : INT)  { super.$$link(6, value) } 
//set 'persistence'(value : FLOAT)  { super.$$link(7, value) } 
//set 'add_noise'(value : FLOAT)  { super.$$link(8, value) } 
//set 'linear_range'(value : INT)  { super.$$link(9, value) } 
//set 'linear_tolerance'(value : FLOAT)  { super.$$link(10, value) } 
//set 'angle_degrees'(value : FLOAT)  { super.$$link(11, value) } 
//set 'brightness'(value : FLOAT)  { super.$$link(12, value) } 
//set 'contrast'(value : FLOAT)  { super.$$link(13, value) } 
//set 'seed'(value : INT)  { super.$$link(14, value) } 
//set 'device'(value : 'cpu'|'cuda'| $dyn)  { super.$$link(15, value) } 
//set 'optional_vae'(value : VAE)  { super.$$link(16, value) } 

        //Getters
        get 'latents'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }
get 'previews'() : IMAGE { return [this.$uid.toString(), 1]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.batch_size default: 1 max: 64 min: 1 step: 1
		 * @param opts.width default: 512 max: 8192 min: 64 step: 1
		 * @param opts.height default: 512 max: 8192 min: 64 step: 1
		 * @param opts.resampling
		 * @param opts.frequency default: 320 max: 1024 min: 0.001 step: 0.001
		 * @param opts.gain default: 0.25 step: 0.001
		 * @param opts.octaves default: 12 max: 32 min: 1 step: 1
		 * @param opts.persistence default: 1.5 max: 2 min: 0.001 step: 0.001
		 * @param opts.add_noise step: 0.001
		 * @param opts.linear_range default: 16 max: 256 min: 2 step: 1
		 * @param opts.linear_tolerance default: 0.05 max: 1 min: 0.001 step: 0.001
		 * @param opts.angle_degrees default: 45 step: 0.01
		 * @param opts.brightness max: 1 min: -1 step: 0.001
		 * @param opts.contrast max: 1 min: -1 step: 0.001
		 * @param opts.seed
		 * @param opts.device
		 * @param opts.optional_vae}
        */
        constructor(opts:{
            'batch_size'?: INT,'width'?: INT,'height'?: INT,'resampling': 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp'| $dyn,'frequency'?: FLOAT,'gain'?: FLOAT,'octaves'?: INT,'persistence'?: FLOAT,'add_noise'?: FLOAT,'linear_range'?: INT,'linear_tolerance'?: FLOAT,'angle_degrees'?: FLOAT,'brightness'?: FLOAT,'contrast'?: FLOAT,'seed'?: INT,'device': 'cpu'|'cuda'| $dyn,'optional_vae'?: VAE
        }){
            super(ctx);

            super.$$link("batch_size", opts['batch_size']??tmp["Linear Cross-Hatch Power Fractal (PPF Noise)"].defaults['batch_size'])
super.$$link("width", opts['width']??tmp["Linear Cross-Hatch Power Fractal (PPF Noise)"].defaults['width'])
super.$$link("height", opts['height']??tmp["Linear Cross-Hatch Power Fractal (PPF Noise)"].defaults['height'])
super.$$link("resampling", opts['resampling'])
super.$$link("frequency", opts['frequency']??tmp["Linear Cross-Hatch Power Fractal (PPF Noise)"].defaults['frequency'])
super.$$link("gain", opts['gain']??tmp["Linear Cross-Hatch Power Fractal (PPF Noise)"].defaults['gain'])
super.$$link("octaves", opts['octaves']??tmp["Linear Cross-Hatch Power Fractal (PPF Noise)"].defaults['octaves'])
super.$$link("persistence", opts['persistence']??tmp["Linear Cross-Hatch Power Fractal (PPF Noise)"].defaults['persistence'])
super.$$link("add_noise", opts['add_noise']??tmp["Linear Cross-Hatch Power Fractal (PPF Noise)"].defaults['add_noise'])
super.$$link("linear_range", opts['linear_range']??tmp["Linear Cross-Hatch Power Fractal (PPF Noise)"].defaults['linear_range'])
super.$$link("linear_tolerance", opts['linear_tolerance']??tmp["Linear Cross-Hatch Power Fractal (PPF Noise)"].defaults['linear_tolerance'])
super.$$link("angle_degrees", opts['angle_degrees']??tmp["Linear Cross-Hatch Power Fractal (PPF Noise)"].defaults['angle_degrees'])
super.$$link("brightness", opts['brightness']??tmp["Linear Cross-Hatch Power Fractal (PPF Noise)"].defaults['brightness'])
super.$$link("contrast", opts['contrast']??tmp["Linear Cross-Hatch Power Fractal (PPF Noise)"].defaults['contrast'])
super.$$link("seed", opts['seed']??tmp["Linear Cross-Hatch Power Fractal (PPF Noise)"].defaults['seed'])
super.$$link("device", opts['device'])
super.$$link("optional_vae", opts['optional_vae'])
}

        static defaults = {
    'batch_size':  1,
'width':  512,
'height':  512,
'frequency':  320,
'gain':  0.25,
'octaves':  12,
'persistence':  1.5,
'add_noise':  0,
'linear_range':  16,
'linear_tolerance':  0.05,
'angle_degrees':  45,
'brightness':  0,
'contrast':  0,
'seed':  0
}
        protected override $$type(){
            return "Linear Cross-Hatch Power Fractal (PPF Noise)"
        }
},

    /**
     * Perlin Power Fractal Noise 🦚 from Power Noise Suite/Noise
     * @desc 
    */
    "Perlin Power Fractal Latent (PPF Noise)" : class extends Node{
        //Setters
        //set 'batch_size'(value : INT)  { super.$$link(0, value) } 
//set 'width'(value : INT)  { super.$$link(1, value) } 
//set 'height'(value : INT)  { super.$$link(2, value) } 
//set 'resampling'(value : 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp'| $dyn)  { super.$$link(3, value) } 
//set 'X'(value : FLOAT)  { super.$$link(4, value) } 
//set 'Y'(value : FLOAT)  { super.$$link(5, value) } 
//set 'Z'(value : FLOAT)  { super.$$link(6, value) } 
//set 'evolution'(value : FLOAT)  { super.$$link(7, value) } 
//set 'frame'(value : INT)  { super.$$link(8, value) } 
//set 'scale'(value : FLOAT)  { super.$$link(9, value) } 
//set 'octaves'(value : INT)  { super.$$link(10, value) } 
//set 'persistence'(value : FLOAT)  { super.$$link(11, value) } 
//set 'lacunarity'(value : FLOAT)  { super.$$link(12, value) } 
//set 'exponent'(value : FLOAT)  { super.$$link(13, value) } 
//set 'brightness'(value : FLOAT)  { super.$$link(14, value) } 
//set 'contrast'(value : FLOAT)  { super.$$link(15, value) } 
//set 'clamp_min'(value : FLOAT)  { super.$$link(16, value) } 
//set 'clamp_max'(value : FLOAT)  { super.$$link(17, value) } 
//set 'seed'(value : INT)  { super.$$link(18, value) } 
//set 'device'(value : 'cpu'|'cuda'| $dyn)  { super.$$link(19, value) } 
//set 'optional_vae'(value : VAE)  { super.$$link(20, value) } 
//set 'ppf_settings'(value : PPF_SETTINGS)  { super.$$link(21, value) } 

        //Getters
        get 'latents'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }
get 'previews'() : IMAGE { return [this.$uid.toString(), 1]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.batch_size default: 1 max: 64 min: 1 step: 1
		 * @param opts.width default: 512 max: 8192 min: 64 step: 1
		 * @param opts.height default: 512 max: 8192 min: 64 step: 1
		 * @param opts.resampling
		 * @param opts.X max: 99999999 min: -99999999 step: 0.01
		 * @param opts.Y max: 99999999 min: -99999999 step: 0.01
		 * @param opts.Z max: 99999999 min: -99999999 step: 0.01
		 * @param opts.evolution step: 0.01
		 * @param opts.frame step: 1
		 * @param opts.scale default: 5 max: 2048 min: 2 step: 0.01
		 * @param opts.octaves default: 8 max: 8 min: 1 step: 1
		 * @param opts.persistence default: 1.5 max: 23 min: 0.01 step: 0.01
		 * @param opts.lacunarity default: 2 max: 99 min: 0.01 step: 0.01
		 * @param opts.exponent default: 4 max: 38 min: 0.01 step: 0.01
		 * @param opts.brightness max: 1 min: -1 step: 0.01
		 * @param opts.contrast max: 1 min: -1 step: 0.01
		 * @param opts.clamp_min max: 10 min: -10 step: 0.01
		 * @param opts.clamp_max default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.seed
		 * @param opts.device
		 * @param opts.optional_vae
		 * @param opts.ppf_settings}
        */
        constructor(opts:{
            'batch_size'?: INT,'width'?: INT,'height'?: INT,'resampling': 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp'| $dyn,'X'?: FLOAT,'Y'?: FLOAT,'Z'?: FLOAT,'evolution'?: FLOAT,'frame'?: INT,'scale'?: FLOAT,'octaves'?: INT,'persistence'?: FLOAT,'lacunarity'?: FLOAT,'exponent'?: FLOAT,'brightness'?: FLOAT,'contrast'?: FLOAT,'clamp_min'?: FLOAT,'clamp_max'?: FLOAT,'seed'?: INT,'device': 'cpu'|'cuda'| $dyn,'optional_vae'?: VAE,'ppf_settings'?: PPF_SETTINGS
        }){
            super(ctx);

            super.$$link("batch_size", opts['batch_size']??tmp["Perlin Power Fractal Latent (PPF Noise)"].defaults['batch_size'])
super.$$link("width", opts['width']??tmp["Perlin Power Fractal Latent (PPF Noise)"].defaults['width'])
super.$$link("height", opts['height']??tmp["Perlin Power Fractal Latent (PPF Noise)"].defaults['height'])
super.$$link("resampling", opts['resampling'])
super.$$link("X", opts['X']??tmp["Perlin Power Fractal Latent (PPF Noise)"].defaults['X'])
super.$$link("Y", opts['Y']??tmp["Perlin Power Fractal Latent (PPF Noise)"].defaults['Y'])
super.$$link("Z", opts['Z']??tmp["Perlin Power Fractal Latent (PPF Noise)"].defaults['Z'])
super.$$link("evolution", opts['evolution']??tmp["Perlin Power Fractal Latent (PPF Noise)"].defaults['evolution'])
super.$$link("frame", opts['frame']??tmp["Perlin Power Fractal Latent (PPF Noise)"].defaults['frame'])
super.$$link("scale", opts['scale']??tmp["Perlin Power Fractal Latent (PPF Noise)"].defaults['scale'])
super.$$link("octaves", opts['octaves']??tmp["Perlin Power Fractal Latent (PPF Noise)"].defaults['octaves'])
super.$$link("persistence", opts['persistence']??tmp["Perlin Power Fractal Latent (PPF Noise)"].defaults['persistence'])
super.$$link("lacunarity", opts['lacunarity']??tmp["Perlin Power Fractal Latent (PPF Noise)"].defaults['lacunarity'])
super.$$link("exponent", opts['exponent']??tmp["Perlin Power Fractal Latent (PPF Noise)"].defaults['exponent'])
super.$$link("brightness", opts['brightness']??tmp["Perlin Power Fractal Latent (PPF Noise)"].defaults['brightness'])
super.$$link("contrast", opts['contrast']??tmp["Perlin Power Fractal Latent (PPF Noise)"].defaults['contrast'])
super.$$link("clamp_min", opts['clamp_min']??tmp["Perlin Power Fractal Latent (PPF Noise)"].defaults['clamp_min'])
super.$$link("clamp_max", opts['clamp_max']??tmp["Perlin Power Fractal Latent (PPF Noise)"].defaults['clamp_max'])
super.$$link("seed", opts['seed']??tmp["Perlin Power Fractal Latent (PPF Noise)"].defaults['seed'])
super.$$link("device", opts['device'])
super.$$link("optional_vae", opts['optional_vae'])
super.$$link("ppf_settings", opts['ppf_settings'])
}

        static defaults = {
    'batch_size':  1,
'width':  512,
'height':  512,
'X':  0,
'Y':  0,
'Z':  0,
'evolution':  0,
'frame':  0,
'scale':  5,
'octaves':  8,
'persistence':  1.5,
'lacunarity':  2,
'exponent':  4,
'brightness':  0,
'contrast':  0,
'clamp_min':  0,
'clamp_max':  1,
'seed':  0
}
        protected override $$type(){
            return "Perlin Power Fractal Latent (PPF Noise)"
        }
},

    /**
     * Perlin Power Fractal Settings 🦚 from Power Noise Suite/Sampling/Settings
     * @desc 
    */
    "Perlin Power Fractal Settings (PPF Noise)" : class extends Node{
        //Setters
        //set 'X'(value : FLOAT)  { super.$$link(0, value) } 
//set 'Y'(value : FLOAT)  { super.$$link(1, value) } 
//set 'Z'(value : FLOAT)  { super.$$link(2, value) } 
//set 'evolution'(value : FLOAT)  { super.$$link(3, value) } 
//set 'frame'(value : INT)  { super.$$link(4, value) } 
//set 'scale'(value : FLOAT)  { super.$$link(5, value) } 
//set 'octaves'(value : INT)  { super.$$link(6, value) } 
//set 'persistence'(value : FLOAT)  { super.$$link(7, value) } 
//set 'lacunarity'(value : FLOAT)  { super.$$link(8, value) } 
//set 'exponent'(value : FLOAT)  { super.$$link(9, value) } 
//set 'brightness'(value : FLOAT)  { super.$$link(10, value) } 
//set 'contrast'(value : FLOAT)  { super.$$link(11, value) } 

        //Getters
        get 'ppf_settings'() : PPF_SETTINGS { return [this.$uid.toString(), 0]  as unknown as PPF_SETTINGS; }

        /**
          * Constructor
		 * @param opts.X max: 99999999 min: -99999999 step: 0.01
		 * @param opts.Y max: 99999999 min: -99999999 step: 0.01
		 * @param opts.Z max: 99999999 min: -99999999 step: 0.01
		 * @param opts.evolution step: 0.01
		 * @param opts.frame step: 1
		 * @param opts.scale default: 5 max: 2048 min: 2 step: 0.01
		 * @param opts.octaves default: 8 max: 8 min: 1 step: 1
		 * @param opts.persistence default: 1.5 max: 23 min: 0.01 step: 0.01
		 * @param opts.lacunarity default: 2 max: 99 min: 0.01 step: 0.01
		 * @param opts.exponent default: 4 max: 38 min: 0.01 step: 0.01
		 * @param opts.brightness max: 1 min: -1 step: 0.01
		 * @param opts.contrast max: 1 min: -1 step: 0.01}
        */
        constructor(opts:{
            'X'?: FLOAT,'Y'?: FLOAT,'Z'?: FLOAT,'evolution'?: FLOAT,'frame'?: INT,'scale'?: FLOAT,'octaves'?: INT,'persistence'?: FLOAT,'lacunarity'?: FLOAT,'exponent'?: FLOAT,'brightness'?: FLOAT,'contrast'?: FLOAT
        }){
            super(ctx);

            super.$$link("X", opts['X']??tmp["Perlin Power Fractal Settings (PPF Noise)"].defaults['X'])
super.$$link("Y", opts['Y']??tmp["Perlin Power Fractal Settings (PPF Noise)"].defaults['Y'])
super.$$link("Z", opts['Z']??tmp["Perlin Power Fractal Settings (PPF Noise)"].defaults['Z'])
super.$$link("evolution", opts['evolution']??tmp["Perlin Power Fractal Settings (PPF Noise)"].defaults['evolution'])
super.$$link("frame", opts['frame']??tmp["Perlin Power Fractal Settings (PPF Noise)"].defaults['frame'])
super.$$link("scale", opts['scale']??tmp["Perlin Power Fractal Settings (PPF Noise)"].defaults['scale'])
super.$$link("octaves", opts['octaves']??tmp["Perlin Power Fractal Settings (PPF Noise)"].defaults['octaves'])
super.$$link("persistence", opts['persistence']??tmp["Perlin Power Fractal Settings (PPF Noise)"].defaults['persistence'])
super.$$link("lacunarity", opts['lacunarity']??tmp["Perlin Power Fractal Settings (PPF Noise)"].defaults['lacunarity'])
super.$$link("exponent", opts['exponent']??tmp["Perlin Power Fractal Settings (PPF Noise)"].defaults['exponent'])
super.$$link("brightness", opts['brightness']??tmp["Perlin Power Fractal Settings (PPF Noise)"].defaults['brightness'])
super.$$link("contrast", opts['contrast']??tmp["Perlin Power Fractal Settings (PPF Noise)"].defaults['contrast'])
}

        static defaults = {
    'X':  0,
'Y':  0,
'Z':  0,
'evolution':  0,
'frame':  0,
'scale':  5,
'octaves':  8,
'persistence':  1.5,
'lacunarity':  2,
'exponent':  4,
'brightness':  0,
'contrast':  0
}
        protected override $$type(){
            return "Perlin Power Fractal Settings (PPF Noise)"
        }
},

    /**
     * Power-Law Noise 🦚 from Power Noise Suite/Noise
     * @desc 
    */
    "Power-Law Noise (PPF Noise)" : class extends Node{
        //Setters
        //set 'batch_size'(value : INT)  { super.$$link(0, value) } 
//set 'width'(value : INT)  { super.$$link(1, value) } 
//set 'height'(value : INT)  { super.$$link(2, value) } 
//set 'resampling'(value : 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp'| $dyn)  { super.$$link(3, value) } 
//set 'noise_type'(value : 'white'|'grey'|'pink'|'green'|'blue'|'random_mix'|'brownian_fractal'|'velvet'|'violet'| $dyn)  { super.$$link(4, value) } 
//set 'scale'(value : FLOAT)  { super.$$link(5, value) } 
//set 'alpha_exponent'(value : FLOAT)  { super.$$link(6, value) } 
//set 'modulator'(value : FLOAT)  { super.$$link(7, value) } 
//set 'seed'(value : INT)  { super.$$link(8, value) } 
//set 'device'(value : 'cpu'|'cuda'| $dyn)  { super.$$link(9, value) } 
//set 'optional_vae'(value : VAE)  { super.$$link(10, value) } 

        //Getters
        get 'latents'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }
get 'previews'() : IMAGE { return [this.$uid.toString(), 1]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.batch_size default: 1 max: 64 min: 1 step: 1
		 * @param opts.width default: 512 max: 8192 min: 64 step: 1
		 * @param opts.height default: 512 max: 8192 min: 64 step: 1
		 * @param opts.resampling
		 * @param opts.noise_type
		 * @param opts.scale default: 1 max: 1024 min: 0.01 step: 0.001
		 * @param opts.alpha_exponent default: 1 max: 12 min: -12 step: 0.001
		 * @param opts.modulator default: 1 max: 2 min: 0.1 step: 0.01
		 * @param opts.seed
		 * @param opts.device
		 * @param opts.optional_vae}
        */
        constructor(opts:{
            'batch_size'?: INT,'width'?: INT,'height'?: INT,'resampling': 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp'| $dyn,'noise_type': 'white'|'grey'|'pink'|'green'|'blue'|'random_mix'|'brownian_fractal'|'velvet'|'violet'| $dyn,'scale'?: FLOAT,'alpha_exponent'?: FLOAT,'modulator'?: FLOAT,'seed'?: INT,'device': 'cpu'|'cuda'| $dyn,'optional_vae'?: VAE
        }){
            super(ctx);

            super.$$link("batch_size", opts['batch_size']??tmp["Power-Law Noise (PPF Noise)"].defaults['batch_size'])
super.$$link("width", opts['width']??tmp["Power-Law Noise (PPF Noise)"].defaults['width'])
super.$$link("height", opts['height']??tmp["Power-Law Noise (PPF Noise)"].defaults['height'])
super.$$link("resampling", opts['resampling'])
super.$$link("noise_type", opts['noise_type'])
super.$$link("scale", opts['scale']??tmp["Power-Law Noise (PPF Noise)"].defaults['scale'])
super.$$link("alpha_exponent", opts['alpha_exponent']??tmp["Power-Law Noise (PPF Noise)"].defaults['alpha_exponent'])
super.$$link("modulator", opts['modulator']??tmp["Power-Law Noise (PPF Noise)"].defaults['modulator'])
super.$$link("seed", opts['seed']??tmp["Power-Law Noise (PPF Noise)"].defaults['seed'])
super.$$link("device", opts['device'])
super.$$link("optional_vae", opts['optional_vae'])
}

        static defaults = {
    'batch_size':  1,
'width':  512,
'height':  512,
'scale':  1,
'alpha_exponent':  1,
'modulator':  1,
'seed':  0
}
        protected override $$type(){
            return "Power-Law Noise (PPF Noise)"
        }
},

    /**
     * Power KSampler Advanced 🦚 from Power Noise Suite/Sampling
     * @desc 
    */
    "Power KSampler Advanced (PPF Noise)" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'seed'(value : INT)  { super.$$link(1, value) } 
//set 'steps'(value : INT)  { super.$$link(2, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(3, value) } 
//set 'sampler_name'(value : 'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'euler_ancestral'|'dpm_2_ancestral'|'dpmpp_2s_ancestral'|'dpm_fast'|'dpm_adaptive'| $dyn)  { super.$$link(4, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn)  { super.$$link(5, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(6, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(7, value) } 
//set 'latent_image'(value : LATENT)  { super.$$link(8, value) } 
//set 'start_at_step'(value : INT)  { super.$$link(9, value) } 
//set 'end_at_step'(value : INT)  { super.$$link(10, value) } 
//set 'enable_denoise'(value : 'false'|'true'| $dyn)  { super.$$link(11, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(12, value) } 
//set 'add_noise'(value : 'enable'|'disable'| $dyn)  { super.$$link(13, value) } 
//set 'return_with_leftover_noise'(value : 'disable'|'enable'| $dyn)  { super.$$link(14, value) } 
//set 'noise_type'(value : 'white'|'grey'|'pink'|'green'|'blue'|'random_mix'|'brownian_fractal'|'velvet'|'violet'|'vanilla_comfy'| $dyn)  { super.$$link(15, value) } 
//set 'noise_blending'(value : 'bislerp'|'cosine interp'|'cuberp'|'hslerp'|'lerp'|'add'|'inject'| $dyn)  { super.$$link(16, value) } 
//set 'noise_mode'(value : 'additive'|'subtractive'| $dyn)  { super.$$link(17, value) } 
//set 'scale'(value : FLOAT)  { super.$$link(18, value) } 
//set 'alpha_exponent'(value : FLOAT)  { super.$$link(19, value) } 
//set 'modulator'(value : FLOAT)  { super.$$link(20, value) } 
//set 'sigma_tolerance'(value : FLOAT)  { super.$$link(21, value) } 
//set 'boost_leading_sigma'(value : 'false'|'true'| $dyn)  { super.$$link(22, value) } 
//set 'tonal_guide_latent'(value : LATENT)  { super.$$link(23, value) } 
//set 'ppf_settings'(value : PPF_SETTINGS)  { super.$$link(24, value) } 
//set 'ch_settings'(value : CH_SETTINGS)  { super.$$link(25, value) } 
//set 'guide_use_noise'(value : 'true'|'false'| $dyn)  { super.$$link(26, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.seed
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.cfg default: 8
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.latent_image
		 * @param opts.start_at_step
		 * @param opts.end_at_step default: 10000
		 * @param opts.enable_denoise
		 * @param opts.denoise default: 1 step: 0.01
		 * @param opts.add_noise
		 * @param opts.return_with_leftover_noise
		 * @param opts.noise_type
		 * @param opts.noise_blending
		 * @param opts.noise_mode
		 * @param opts.scale default: 1 max: 9223372036854776000 min: -9223372036854776000 step: 0.001
		 * @param opts.alpha_exponent default: 1 max: 12 min: -12 step: 0.001
		 * @param opts.modulator default: 1 max: 2 min: 0.1 step: 0.01
		 * @param opts.sigma_tolerance default: 0.5 step: 0.001
		 * @param opts.boost_leading_sigma
		 * @param opts.tonal_guide_latent
		 * @param opts.ppf_settings
		 * @param opts.ch_settings
		 * @param opts.guide_use_noise}
        */
        constructor(opts:{
            'model': MODEL,'seed'?: INT,'steps'?: INT,'cfg'?: FLOAT,'sampler_name': 'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'euler_ancestral'|'dpm_2_ancestral'|'dpmpp_2s_ancestral'|'dpm_fast'|'dpm_adaptive'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn,'positive': CONDITIONING,'negative': CONDITIONING,'latent_image': LATENT,'start_at_step'?: INT,'end_at_step'?: INT,'enable_denoise': 'false'|'true'| $dyn,'denoise'?: FLOAT,'add_noise': 'enable'|'disable'| $dyn,'return_with_leftover_noise': 'disable'|'enable'| $dyn,'noise_type'?: 'white'|'grey'|'pink'|'green'|'blue'|'random_mix'|'brownian_fractal'|'velvet'|'violet'|'vanilla_comfy'| $dyn,'noise_blending'?: 'bislerp'|'cosine interp'|'cuberp'|'hslerp'|'lerp'|'add'|'inject'| $dyn,'noise_mode'?: 'additive'|'subtractive'| $dyn,'scale'?: FLOAT,'alpha_exponent'?: FLOAT,'modulator'?: FLOAT,'sigma_tolerance'?: FLOAT,'boost_leading_sigma'?: 'false'|'true'| $dyn,'tonal_guide_latent'?: LATENT,'ppf_settings'?: PPF_SETTINGS,'ch_settings'?: CH_SETTINGS,'guide_use_noise'?: 'true'|'false'| $dyn
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("seed", opts['seed']??tmp["Power KSampler Advanced (PPF Noise)"].defaults['seed'])
super.$$link("steps", opts['steps']??tmp["Power KSampler Advanced (PPF Noise)"].defaults['steps'])
super.$$link("cfg", opts['cfg']??tmp["Power KSampler Advanced (PPF Noise)"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("latent_image", opts['latent_image'])
super.$$link("start_at_step", opts['start_at_step']??tmp["Power KSampler Advanced (PPF Noise)"].defaults['start_at_step'])
super.$$link("end_at_step", opts['end_at_step']??tmp["Power KSampler Advanced (PPF Noise)"].defaults['end_at_step'])
super.$$link("enable_denoise", opts['enable_denoise'])
super.$$link("denoise", opts['denoise']??tmp["Power KSampler Advanced (PPF Noise)"].defaults['denoise'])
super.$$link("add_noise", opts['add_noise'])
super.$$link("return_with_leftover_noise", opts['return_with_leftover_noise'])
super.$$link("noise_type", opts['noise_type'])
super.$$link("noise_blending", opts['noise_blending'])
super.$$link("noise_mode", opts['noise_mode'])
super.$$link("scale", opts['scale']??tmp["Power KSampler Advanced (PPF Noise)"].defaults['scale'])
super.$$link("alpha_exponent", opts['alpha_exponent']??tmp["Power KSampler Advanced (PPF Noise)"].defaults['alpha_exponent'])
super.$$link("modulator", opts['modulator']??tmp["Power KSampler Advanced (PPF Noise)"].defaults['modulator'])
super.$$link("sigma_tolerance", opts['sigma_tolerance']??tmp["Power KSampler Advanced (PPF Noise)"].defaults['sigma_tolerance'])
super.$$link("boost_leading_sigma", opts['boost_leading_sigma'])
super.$$link("tonal_guide_latent", opts['tonal_guide_latent'])
super.$$link("ppf_settings", opts['ppf_settings'])
super.$$link("ch_settings", opts['ch_settings'])
super.$$link("guide_use_noise", opts['guide_use_noise'])
}

        static defaults = {
    'seed':  0,
'steps':  20,
'cfg':  8,
'start_at_step':  0,
'end_at_step':  10000,
'denoise':  1,
'scale':  1,
'alpha_exponent':  1,
'modulator':  1,
'sigma_tolerance':  0.5
}
        protected override $$type(){
            return "Power KSampler Advanced (PPF Noise)"
        }
},

    /**
     * SaveImageWebsocket from api/image
     * @desc 
    */
    "SaveImageWebsocket" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.images}
        */
        constructor(opts:{
            'images': IMAGE
        }){
            super(ctx);

            super.$$link("images", opts['images'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "SaveImageWebsocket"
        }
},

    /**
     * KSampler (Efficient) from Efficiency Nodes/Sampling
     * @desc 
    */
    "KSampler (Efficient)" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'seed'(value : INT)  { super.$$link(1, value) } 
//set 'steps'(value : INT)  { super.$$link(2, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(3, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(4, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(5, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(6, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(7, value) } 
//set 'latent_image'(value : LATENT)  { super.$$link(8, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(9, value) } 
//set 'preview_method'(value : 'auto'|'latent2rgb'|'taesd'|'vae_decoded_only'|'none'| $dyn)  { super.$$link(10, value) } 
//set 'vae_decode'(value : 'true'|'true (tiled)'|'false'| $dyn)  { super.$$link(11, value) } 
//set 'optional_vae'(value : VAE)  { super.$$link(12, value) } 
//set 'script'(value : SCRIPT)  { super.$$link(13, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'CONDITIONING+'() : CONDITIONING { return [this.$uid.toString(), 1]  as unknown as CONDITIONING; }
get 'CONDITIONING-'() : CONDITIONING { return [this.$uid.toString(), 2]  as unknown as CONDITIONING; }
get 'LATENT'() : LATENT { return [this.$uid.toString(), 3]  as unknown as LATENT; }
get 'VAE'() : VAE { return [this.$uid.toString(), 4]  as unknown as VAE; }
get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 5]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.seed
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.cfg default: 7
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.latent_image
		 * @param opts.denoise default: 1 step: 0.01
		 * @param opts.preview_method
		 * @param opts.vae_decode
		 * @param opts.optional_vae
		 * @param opts.script}
        */
        constructor(opts:{
            'model': MODEL,'seed'?: INT,'steps'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'positive': CONDITIONING,'negative': CONDITIONING,'latent_image': LATENT,'denoise'?: FLOAT,'preview_method': 'auto'|'latent2rgb'|'taesd'|'vae_decoded_only'|'none'| $dyn,'vae_decode': 'true'|'true (tiled)'|'false'| $dyn,'optional_vae'?: VAE,'script'?: SCRIPT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("seed", opts['seed']??tmp["KSampler (Efficient)"].defaults['seed'])
super.$$link("steps", opts['steps']??tmp["KSampler (Efficient)"].defaults['steps'])
super.$$link("cfg", opts['cfg']??tmp["KSampler (Efficient)"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("latent_image", opts['latent_image'])
super.$$link("denoise", opts['denoise']??tmp["KSampler (Efficient)"].defaults['denoise'])
super.$$link("preview_method", opts['preview_method'])
super.$$link("vae_decode", opts['vae_decode'])
super.$$link("optional_vae", opts['optional_vae'])
super.$$link("script", opts['script'])
}

        static defaults = {
    'seed':  0,
'steps':  20,
'cfg':  7,
'denoise':  1
}
        protected override $$type(){
            return "KSampler (Efficient)"
        }
},

    /**
     * KSampler Adv. (Efficient) from Efficiency Nodes/Sampling
     * @desc 
    */
    "KSampler Adv. (Efficient)" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'add_noise'(value : 'enable'|'disable'| $dyn)  { super.$$link(1, value) } 
//set 'noise_seed'(value : INT)  { super.$$link(2, value) } 
//set 'steps'(value : INT)  { super.$$link(3, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(4, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(5, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(6, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(7, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(8, value) } 
//set 'latent_image'(value : LATENT)  { super.$$link(9, value) } 
//set 'start_at_step'(value : INT)  { super.$$link(10, value) } 
//set 'end_at_step'(value : INT)  { super.$$link(11, value) } 
//set 'return_with_leftover_noise'(value : 'disable'|'enable'| $dyn)  { super.$$link(12, value) } 
//set 'preview_method'(value : 'auto'|'latent2rgb'|'taesd'|'none'| $dyn)  { super.$$link(13, value) } 
//set 'vae_decode'(value : 'true'|'true (tiled)'|'false'|'output only'|'output only (tiled)'| $dyn)  { super.$$link(14, value) } 
//set 'optional_vae'(value : VAE)  { super.$$link(15, value) } 
//set 'script'(value : SCRIPT)  { super.$$link(16, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'CONDITIONING+'() : CONDITIONING { return [this.$uid.toString(), 1]  as unknown as CONDITIONING; }
get 'CONDITIONING-'() : CONDITIONING { return [this.$uid.toString(), 2]  as unknown as CONDITIONING; }
get 'LATENT'() : LATENT { return [this.$uid.toString(), 3]  as unknown as LATENT; }
get 'VAE'() : VAE { return [this.$uid.toString(), 4]  as unknown as VAE; }
get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 5]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.add_noise
		 * @param opts.noise_seed
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.cfg default: 7
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.latent_image
		 * @param opts.start_at_step
		 * @param opts.end_at_step default: 10000
		 * @param opts.return_with_leftover_noise
		 * @param opts.preview_method
		 * @param opts.vae_decode
		 * @param opts.optional_vae
		 * @param opts.script}
        */
        constructor(opts:{
            'model': MODEL,'add_noise': 'enable'|'disable'| $dyn,'noise_seed'?: INT,'steps'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'positive': CONDITIONING,'negative': CONDITIONING,'latent_image': LATENT,'start_at_step'?: INT,'end_at_step'?: INT,'return_with_leftover_noise': 'disable'|'enable'| $dyn,'preview_method': 'auto'|'latent2rgb'|'taesd'|'none'| $dyn,'vae_decode': 'true'|'true (tiled)'|'false'|'output only'|'output only (tiled)'| $dyn,'optional_vae'?: VAE,'script'?: SCRIPT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("add_noise", opts['add_noise'])
super.$$link("noise_seed", opts['noise_seed']??tmp["KSampler Adv. (Efficient)"].defaults['noise_seed'])
super.$$link("steps", opts['steps']??tmp["KSampler Adv. (Efficient)"].defaults['steps'])
super.$$link("cfg", opts['cfg']??tmp["KSampler Adv. (Efficient)"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("latent_image", opts['latent_image'])
super.$$link("start_at_step", opts['start_at_step']??tmp["KSampler Adv. (Efficient)"].defaults['start_at_step'])
super.$$link("end_at_step", opts['end_at_step']??tmp["KSampler Adv. (Efficient)"].defaults['end_at_step'])
super.$$link("return_with_leftover_noise", opts['return_with_leftover_noise'])
super.$$link("preview_method", opts['preview_method'])
super.$$link("vae_decode", opts['vae_decode'])
super.$$link("optional_vae", opts['optional_vae'])
super.$$link("script", opts['script'])
}

        static defaults = {
    'noise_seed':  0,
'steps':  20,
'cfg':  7,
'start_at_step':  0,
'end_at_step':  10000
}
        protected override $$type(){
            return "KSampler Adv. (Efficient)"
        }
},

    /**
     * KSampler SDXL (Eff.) from Efficiency Nodes/Sampling
     * @desc 
    */
    "KSampler SDXL (Eff.)" : class extends Node{
        //Setters
        //set 'sdxl_tuple'(value : SDXL_TUPLE)  { super.$$link(0, value) } 
//set 'noise_seed'(value : INT)  { super.$$link(1, value) } 
//set 'steps'(value : INT)  { super.$$link(2, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(3, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(4, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(5, value) } 
//set 'latent_image'(value : LATENT)  { super.$$link(6, value) } 
//set 'start_at_step'(value : INT)  { super.$$link(7, value) } 
//set 'refine_at_step'(value : INT)  { super.$$link(8, value) } 
//set 'preview_method'(value : 'auto'|'latent2rgb'|'taesd'|'none'| $dyn)  { super.$$link(9, value) } 
//set 'vae_decode'(value : 'true'|'true (tiled)'|'false'|'output only'|'output only (tiled)'| $dyn)  { super.$$link(10, value) } 
//set 'optional_vae'(value : VAE)  { super.$$link(11, value) } 
//set 'script'(value : SCRIPT)  { super.$$link(12, value) } 

        //Getters
        get 'SDXL_TUPLE'() : SDXL_TUPLE { return [this.$uid.toString(), 0]  as unknown as SDXL_TUPLE; }
get 'LATENT'() : LATENT { return [this.$uid.toString(), 1]  as unknown as LATENT; }
get 'VAE'() : VAE { return [this.$uid.toString(), 2]  as unknown as VAE; }
get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 3]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.sdxl_tuple
		 * @param opts.noise_seed
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.cfg default: 7
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.latent_image
		 * @param opts.start_at_step
		 * @param opts.refine_at_step default: -1 max: 10000 min: -1
		 * @param opts.preview_method
		 * @param opts.vae_decode
		 * @param opts.optional_vae
		 * @param opts.script}
        */
        constructor(opts:{
            'sdxl_tuple': SDXL_TUPLE,'noise_seed'?: INT,'steps'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'latent_image': LATENT,'start_at_step'?: INT,'refine_at_step'?: INT,'preview_method': 'auto'|'latent2rgb'|'taesd'|'none'| $dyn,'vae_decode': 'true'|'true (tiled)'|'false'|'output only'|'output only (tiled)'| $dyn,'optional_vae'?: VAE,'script'?: SCRIPT
        }){
            super(ctx);

            super.$$link("sdxl_tuple", opts['sdxl_tuple'])
super.$$link("noise_seed", opts['noise_seed']??tmp["KSampler SDXL (Eff.)"].defaults['noise_seed'])
super.$$link("steps", opts['steps']??tmp["KSampler SDXL (Eff.)"].defaults['steps'])
super.$$link("cfg", opts['cfg']??tmp["KSampler SDXL (Eff.)"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("latent_image", opts['latent_image'])
super.$$link("start_at_step", opts['start_at_step']??tmp["KSampler SDXL (Eff.)"].defaults['start_at_step'])
super.$$link("refine_at_step", opts['refine_at_step']??tmp["KSampler SDXL (Eff.)"].defaults['refine_at_step'])
super.$$link("preview_method", opts['preview_method'])
super.$$link("vae_decode", opts['vae_decode'])
super.$$link("optional_vae", opts['optional_vae'])
super.$$link("script", opts['script'])
}

        static defaults = {
    'noise_seed':  0,
'steps':  20,
'cfg':  7,
'start_at_step':  0,
'refine_at_step':  -1
}
        protected override $$type(){
            return "KSampler SDXL (Eff.)"
        }
},

    /**
     * Efficient Loader from Efficiency Nodes/Loaders
     * @desc 
    */
    "Efficient Loader" : class extends Node{
        //Setters
        //set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(0, value) } 
//set 'vae_name'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(1, value) } 
//set 'clip_skip'(value : INT)  { super.$$link(2, value) } 
//set 'lora_name'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(3, value) } 
//set 'lora_model_strength'(value : FLOAT)  { super.$$link(4, value) } 
//set 'lora_clip_strength'(value : FLOAT)  { super.$$link(5, value) } 
//set 'positive'(value : STRING)  { super.$$link(6, value) } 
//set 'negative'(value : STRING)  { super.$$link(7, value) } 
//set 'token_normalization'(value : 'none'|'mean'|'length'|'length+mean'| $dyn)  { super.$$link(8, value) } 
//set 'weight_interpretation'(value : 'comfy'|'A1111'|'compel'|'comfy++'|'down_weight'| $dyn)  { super.$$link(9, value) } 
//set 'empty_latent_width'(value : INT)  { super.$$link(10, value) } 
//set 'empty_latent_height'(value : INT)  { super.$$link(11, value) } 
//set 'batch_size'(value : INT)  { super.$$link(12, value) } 
//set 'lora_stack'(value : LORA_STACK)  { super.$$link(13, value) } 
//set 'cnet_stack'(value : CONTROL_NET_STACK)  { super.$$link(14, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'CONDITIONING+'() : CONDITIONING { return [this.$uid.toString(), 1]  as unknown as CONDITIONING; }
get 'CONDITIONING-'() : CONDITIONING { return [this.$uid.toString(), 2]  as unknown as CONDITIONING; }
get 'LATENT'() : LATENT { return [this.$uid.toString(), 3]  as unknown as LATENT; }
get 'VAE'() : VAE { return [this.$uid.toString(), 4]  as unknown as VAE; }
get 'CLIP'() : CLIP { return [this.$uid.toString(), 5]  as unknown as CLIP; }
get 'DEPENDENCIES'() : DEPENDENCIES { return [this.$uid.toString(), 6]  as unknown as DEPENDENCIES; }

        /**
          * Constructor
		 * @param opts.ckpt_name
		 * @param opts.vae_name
		 * @param opts.clip_skip default: -1 max: -1 min: -24 step: 1
		 * @param opts.lora_name
		 * @param opts.lora_model_strength default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_clip_strength default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.positive default: "CLIP_POSITIVE"
		 * @param opts.negative default: "CLIP_NEGATIVE"
		 * @param opts.token_normalization
		 * @param opts.weight_interpretation
		 * @param opts.empty_latent_width default: 512 max: 16384 min: 64 step: 64
		 * @param opts.empty_latent_height default: 512 max: 16384 min: 64 step: 64
		 * @param opts.batch_size default: 1 max: 262144 min: 1
		 * @param opts.lora_stack
		 * @param opts.cnet_stack}
        */
        constructor(opts:{
            'ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'vae_name': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'clip_skip'?: INT,'lora_name': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_model_strength'?: FLOAT,'lora_clip_strength'?: FLOAT,'positive'?: STRING,'negative'?: STRING,'token_normalization': 'none'|'mean'|'length'|'length+mean'| $dyn,'weight_interpretation': 'comfy'|'A1111'|'compel'|'comfy++'|'down_weight'| $dyn,'empty_latent_width'?: INT,'empty_latent_height'?: INT,'batch_size'?: INT,'lora_stack'?: LORA_STACK,'cnet_stack'?: CONTROL_NET_STACK
        }){
            super(ctx);

            super.$$link("ckpt_name", opts['ckpt_name'])
super.$$link("vae_name", opts['vae_name'])
super.$$link("clip_skip", opts['clip_skip']??tmp["Efficient Loader"].defaults['clip_skip'])
super.$$link("lora_name", opts['lora_name'])
super.$$link("lora_model_strength", opts['lora_model_strength']??tmp["Efficient Loader"].defaults['lora_model_strength'])
super.$$link("lora_clip_strength", opts['lora_clip_strength']??tmp["Efficient Loader"].defaults['lora_clip_strength'])
super.$$link("positive", opts['positive']??tmp["Efficient Loader"].defaults['positive'])
super.$$link("negative", opts['negative']??tmp["Efficient Loader"].defaults['negative'])
super.$$link("token_normalization", opts['token_normalization'])
super.$$link("weight_interpretation", opts['weight_interpretation'])
super.$$link("empty_latent_width", opts['empty_latent_width']??tmp["Efficient Loader"].defaults['empty_latent_width'])
super.$$link("empty_latent_height", opts['empty_latent_height']??tmp["Efficient Loader"].defaults['empty_latent_height'])
super.$$link("batch_size", opts['batch_size']??tmp["Efficient Loader"].defaults['batch_size'])
super.$$link("lora_stack", opts['lora_stack'])
super.$$link("cnet_stack", opts['cnet_stack'])
}

        static defaults = {
    'clip_skip':  -1,
'lora_model_strength':  1,
'lora_clip_strength':  1,
'positive':  "CLIP_POSITIVE",
'negative':  "CLIP_NEGATIVE",
'empty_latent_width':  512,
'empty_latent_height':  512,
'batch_size':  1
}
        protected override $$type(){
            return "Efficient Loader"
        }
},

    /**
     * Eff. Loader SDXL from Efficiency Nodes/Loaders
     * @desc 
    */
    "Eff. Loader SDXL" : class extends Node{
        //Setters
        //set 'base_ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(0, value) } 
//set 'base_clip_skip'(value : INT)  { super.$$link(1, value) } 
//set 'refiner_ckpt_name'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(2, value) } 
//set 'refiner_clip_skip'(value : INT)  { super.$$link(3, value) } 
//set 'positive_ascore'(value : FLOAT)  { super.$$link(4, value) } 
//set 'negative_ascore'(value : FLOAT)  { super.$$link(5, value) } 
//set 'vae_name'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(6, value) } 
//set 'positive'(value : STRING)  { super.$$link(7, value) } 
//set 'negative'(value : STRING)  { super.$$link(8, value) } 
//set 'token_normalization'(value : 'none'|'mean'|'length'|'length+mean'| $dyn)  { super.$$link(9, value) } 
//set 'weight_interpretation'(value : 'comfy'|'A1111'|'compel'|'comfy++'|'down_weight'| $dyn)  { super.$$link(10, value) } 
//set 'empty_latent_width'(value : INT)  { super.$$link(11, value) } 
//set 'empty_latent_height'(value : INT)  { super.$$link(12, value) } 
//set 'batch_size'(value : INT)  { super.$$link(13, value) } 
//set 'lora_stack'(value : LORA_STACK)  { super.$$link(14, value) } 
//set 'cnet_stack'(value : CONTROL_NET_STACK)  { super.$$link(15, value) } 

        //Getters
        get 'SDXL_TUPLE'() : SDXL_TUPLE { return [this.$uid.toString(), 0]  as unknown as SDXL_TUPLE; }
get 'LATENT'() : LATENT { return [this.$uid.toString(), 1]  as unknown as LATENT; }
get 'VAE'() : VAE { return [this.$uid.toString(), 2]  as unknown as VAE; }
get 'DEPENDENCIES'() : DEPENDENCIES { return [this.$uid.toString(), 3]  as unknown as DEPENDENCIES; }

        /**
          * Constructor
		 * @param opts.base_ckpt_name
		 * @param opts.base_clip_skip default: -2 max: -1 min: -24 step: 1
		 * @param opts.refiner_ckpt_name
		 * @param opts.refiner_clip_skip default: -2 max: -1 min: -24 step: 1
		 * @param opts.positive_ascore default: 6 step: 0.01
		 * @param opts.negative_ascore default: 2 step: 0.01
		 * @param opts.vae_name
		 * @param opts.positive default: "CLIP_POSITIVE"
		 * @param opts.negative default: "CLIP_NEGATIVE"
		 * @param opts.token_normalization
		 * @param opts.weight_interpretation
		 * @param opts.empty_latent_width default: 1024 max: 16384 min: 64 step: 64
		 * @param opts.empty_latent_height default: 1024 max: 16384 min: 64 step: 64
		 * @param opts.batch_size default: 1 max: 64 min: 1
		 * @param opts.lora_stack
		 * @param opts.cnet_stack}
        */
        constructor(opts:{
            'base_ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'base_clip_skip'?: INT,'refiner_ckpt_name': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'refiner_clip_skip'?: INT,'positive_ascore'?: FLOAT,'negative_ascore'?: FLOAT,'vae_name': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'positive'?: STRING,'negative'?: STRING,'token_normalization': 'none'|'mean'|'length'|'length+mean'| $dyn,'weight_interpretation': 'comfy'|'A1111'|'compel'|'comfy++'|'down_weight'| $dyn,'empty_latent_width'?: INT,'empty_latent_height'?: INT,'batch_size'?: INT,'lora_stack'?: LORA_STACK,'cnet_stack'?: CONTROL_NET_STACK
        }){
            super(ctx);

            super.$$link("base_ckpt_name", opts['base_ckpt_name'])
super.$$link("base_clip_skip", opts['base_clip_skip']??tmp["Eff. Loader SDXL"].defaults['base_clip_skip'])
super.$$link("refiner_ckpt_name", opts['refiner_ckpt_name'])
super.$$link("refiner_clip_skip", opts['refiner_clip_skip']??tmp["Eff. Loader SDXL"].defaults['refiner_clip_skip'])
super.$$link("positive_ascore", opts['positive_ascore']??tmp["Eff. Loader SDXL"].defaults['positive_ascore'])
super.$$link("negative_ascore", opts['negative_ascore']??tmp["Eff. Loader SDXL"].defaults['negative_ascore'])
super.$$link("vae_name", opts['vae_name'])
super.$$link("positive", opts['positive']??tmp["Eff. Loader SDXL"].defaults['positive'])
super.$$link("negative", opts['negative']??tmp["Eff. Loader SDXL"].defaults['negative'])
super.$$link("token_normalization", opts['token_normalization'])
super.$$link("weight_interpretation", opts['weight_interpretation'])
super.$$link("empty_latent_width", opts['empty_latent_width']??tmp["Eff. Loader SDXL"].defaults['empty_latent_width'])
super.$$link("empty_latent_height", opts['empty_latent_height']??tmp["Eff. Loader SDXL"].defaults['empty_latent_height'])
super.$$link("batch_size", opts['batch_size']??tmp["Eff. Loader SDXL"].defaults['batch_size'])
super.$$link("lora_stack", opts['lora_stack'])
super.$$link("cnet_stack", opts['cnet_stack'])
}

        static defaults = {
    'base_clip_skip':  -2,
'refiner_clip_skip':  -2,
'positive_ascore':  6,
'negative_ascore':  2,
'positive':  "CLIP_POSITIVE",
'negative':  "CLIP_NEGATIVE",
'empty_latent_width':  1024,
'empty_latent_height':  1024,
'batch_size':  1
}
        protected override $$type(){
            return "Eff. Loader SDXL"
        }
},

    /**
     * LoRA Stacker from Efficiency Nodes/Stackers
     * @desc 
    */
    "LoRA Stacker" : class extends Node{
        //Setters
        //set 'input_mode'(value : 'simple'|'advanced'| $dyn)  { super.$$link(0, value) } 
//set 'lora_count'(value : INT)  { super.$$link(1, value) } 
//set 'lora_name_1'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(2, value) } 
//set 'lora_wt_1'(value : FLOAT)  { super.$$link(3, value) } 
//set 'model_str_1'(value : FLOAT)  { super.$$link(4, value) } 
//set 'clip_str_1'(value : FLOAT)  { super.$$link(5, value) } 
//set 'lora_name_2'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(6, value) } 
//set 'lora_wt_2'(value : FLOAT)  { super.$$link(7, value) } 
//set 'model_str_2'(value : FLOAT)  { super.$$link(8, value) } 
//set 'clip_str_2'(value : FLOAT)  { super.$$link(9, value) } 
//set 'lora_name_3'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(10, value) } 
//set 'lora_wt_3'(value : FLOAT)  { super.$$link(11, value) } 
//set 'model_str_3'(value : FLOAT)  { super.$$link(12, value) } 
//set 'clip_str_3'(value : FLOAT)  { super.$$link(13, value) } 
//set 'lora_name_4'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(14, value) } 
//set 'lora_wt_4'(value : FLOAT)  { super.$$link(15, value) } 
//set 'model_str_4'(value : FLOAT)  { super.$$link(16, value) } 
//set 'clip_str_4'(value : FLOAT)  { super.$$link(17, value) } 
//set 'lora_name_5'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(18, value) } 
//set 'lora_wt_5'(value : FLOAT)  { super.$$link(19, value) } 
//set 'model_str_5'(value : FLOAT)  { super.$$link(20, value) } 
//set 'clip_str_5'(value : FLOAT)  { super.$$link(21, value) } 
//set 'lora_name_6'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(22, value) } 
//set 'lora_wt_6'(value : FLOAT)  { super.$$link(23, value) } 
//set 'model_str_6'(value : FLOAT)  { super.$$link(24, value) } 
//set 'clip_str_6'(value : FLOAT)  { super.$$link(25, value) } 
//set 'lora_name_7'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(26, value) } 
//set 'lora_wt_7'(value : FLOAT)  { super.$$link(27, value) } 
//set 'model_str_7'(value : FLOAT)  { super.$$link(28, value) } 
//set 'clip_str_7'(value : FLOAT)  { super.$$link(29, value) } 
//set 'lora_name_8'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(30, value) } 
//set 'lora_wt_8'(value : FLOAT)  { super.$$link(31, value) } 
//set 'model_str_8'(value : FLOAT)  { super.$$link(32, value) } 
//set 'clip_str_8'(value : FLOAT)  { super.$$link(33, value) } 
//set 'lora_name_9'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(34, value) } 
//set 'lora_wt_9'(value : FLOAT)  { super.$$link(35, value) } 
//set 'model_str_9'(value : FLOAT)  { super.$$link(36, value) } 
//set 'clip_str_9'(value : FLOAT)  { super.$$link(37, value) } 
//set 'lora_name_10'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(38, value) } 
//set 'lora_wt_10'(value : FLOAT)  { super.$$link(39, value) } 
//set 'model_str_10'(value : FLOAT)  { super.$$link(40, value) } 
//set 'clip_str_10'(value : FLOAT)  { super.$$link(41, value) } 
//set 'lora_name_11'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(42, value) } 
//set 'lora_wt_11'(value : FLOAT)  { super.$$link(43, value) } 
//set 'model_str_11'(value : FLOAT)  { super.$$link(44, value) } 
//set 'clip_str_11'(value : FLOAT)  { super.$$link(45, value) } 
//set 'lora_name_12'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(46, value) } 
//set 'lora_wt_12'(value : FLOAT)  { super.$$link(47, value) } 
//set 'model_str_12'(value : FLOAT)  { super.$$link(48, value) } 
//set 'clip_str_12'(value : FLOAT)  { super.$$link(49, value) } 
//set 'lora_name_13'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(50, value) } 
//set 'lora_wt_13'(value : FLOAT)  { super.$$link(51, value) } 
//set 'model_str_13'(value : FLOAT)  { super.$$link(52, value) } 
//set 'clip_str_13'(value : FLOAT)  { super.$$link(53, value) } 
//set 'lora_name_14'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(54, value) } 
//set 'lora_wt_14'(value : FLOAT)  { super.$$link(55, value) } 
//set 'model_str_14'(value : FLOAT)  { super.$$link(56, value) } 
//set 'clip_str_14'(value : FLOAT)  { super.$$link(57, value) } 
//set 'lora_name_15'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(58, value) } 
//set 'lora_wt_15'(value : FLOAT)  { super.$$link(59, value) } 
//set 'model_str_15'(value : FLOAT)  { super.$$link(60, value) } 
//set 'clip_str_15'(value : FLOAT)  { super.$$link(61, value) } 
//set 'lora_name_16'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(62, value) } 
//set 'lora_wt_16'(value : FLOAT)  { super.$$link(63, value) } 
//set 'model_str_16'(value : FLOAT)  { super.$$link(64, value) } 
//set 'clip_str_16'(value : FLOAT)  { super.$$link(65, value) } 
//set 'lora_name_17'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(66, value) } 
//set 'lora_wt_17'(value : FLOAT)  { super.$$link(67, value) } 
//set 'model_str_17'(value : FLOAT)  { super.$$link(68, value) } 
//set 'clip_str_17'(value : FLOAT)  { super.$$link(69, value) } 
//set 'lora_name_18'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(70, value) } 
//set 'lora_wt_18'(value : FLOAT)  { super.$$link(71, value) } 
//set 'model_str_18'(value : FLOAT)  { super.$$link(72, value) } 
//set 'clip_str_18'(value : FLOAT)  { super.$$link(73, value) } 
//set 'lora_name_19'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(74, value) } 
//set 'lora_wt_19'(value : FLOAT)  { super.$$link(75, value) } 
//set 'model_str_19'(value : FLOAT)  { super.$$link(76, value) } 
//set 'clip_str_19'(value : FLOAT)  { super.$$link(77, value) } 
//set 'lora_name_20'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(78, value) } 
//set 'lora_wt_20'(value : FLOAT)  { super.$$link(79, value) } 
//set 'model_str_20'(value : FLOAT)  { super.$$link(80, value) } 
//set 'clip_str_20'(value : FLOAT)  { super.$$link(81, value) } 
//set 'lora_name_21'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(82, value) } 
//set 'lora_wt_21'(value : FLOAT)  { super.$$link(83, value) } 
//set 'model_str_21'(value : FLOAT)  { super.$$link(84, value) } 
//set 'clip_str_21'(value : FLOAT)  { super.$$link(85, value) } 
//set 'lora_name_22'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(86, value) } 
//set 'lora_wt_22'(value : FLOAT)  { super.$$link(87, value) } 
//set 'model_str_22'(value : FLOAT)  { super.$$link(88, value) } 
//set 'clip_str_22'(value : FLOAT)  { super.$$link(89, value) } 
//set 'lora_name_23'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(90, value) } 
//set 'lora_wt_23'(value : FLOAT)  { super.$$link(91, value) } 
//set 'model_str_23'(value : FLOAT)  { super.$$link(92, value) } 
//set 'clip_str_23'(value : FLOAT)  { super.$$link(93, value) } 
//set 'lora_name_24'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(94, value) } 
//set 'lora_wt_24'(value : FLOAT)  { super.$$link(95, value) } 
//set 'model_str_24'(value : FLOAT)  { super.$$link(96, value) } 
//set 'clip_str_24'(value : FLOAT)  { super.$$link(97, value) } 
//set 'lora_name_25'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(98, value) } 
//set 'lora_wt_25'(value : FLOAT)  { super.$$link(99, value) } 
//set 'model_str_25'(value : FLOAT)  { super.$$link(100, value) } 
//set 'clip_str_25'(value : FLOAT)  { super.$$link(101, value) } 
//set 'lora_name_26'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(102, value) } 
//set 'lora_wt_26'(value : FLOAT)  { super.$$link(103, value) } 
//set 'model_str_26'(value : FLOAT)  { super.$$link(104, value) } 
//set 'clip_str_26'(value : FLOAT)  { super.$$link(105, value) } 
//set 'lora_name_27'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(106, value) } 
//set 'lora_wt_27'(value : FLOAT)  { super.$$link(107, value) } 
//set 'model_str_27'(value : FLOAT)  { super.$$link(108, value) } 
//set 'clip_str_27'(value : FLOAT)  { super.$$link(109, value) } 
//set 'lora_name_28'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(110, value) } 
//set 'lora_wt_28'(value : FLOAT)  { super.$$link(111, value) } 
//set 'model_str_28'(value : FLOAT)  { super.$$link(112, value) } 
//set 'clip_str_28'(value : FLOAT)  { super.$$link(113, value) } 
//set 'lora_name_29'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(114, value) } 
//set 'lora_wt_29'(value : FLOAT)  { super.$$link(115, value) } 
//set 'model_str_29'(value : FLOAT)  { super.$$link(116, value) } 
//set 'clip_str_29'(value : FLOAT)  { super.$$link(117, value) } 
//set 'lora_name_30'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(118, value) } 
//set 'lora_wt_30'(value : FLOAT)  { super.$$link(119, value) } 
//set 'model_str_30'(value : FLOAT)  { super.$$link(120, value) } 
//set 'clip_str_30'(value : FLOAT)  { super.$$link(121, value) } 
//set 'lora_name_31'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(122, value) } 
//set 'lora_wt_31'(value : FLOAT)  { super.$$link(123, value) } 
//set 'model_str_31'(value : FLOAT)  { super.$$link(124, value) } 
//set 'clip_str_31'(value : FLOAT)  { super.$$link(125, value) } 
//set 'lora_name_32'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(126, value) } 
//set 'lora_wt_32'(value : FLOAT)  { super.$$link(127, value) } 
//set 'model_str_32'(value : FLOAT)  { super.$$link(128, value) } 
//set 'clip_str_32'(value : FLOAT)  { super.$$link(129, value) } 
//set 'lora_name_33'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(130, value) } 
//set 'lora_wt_33'(value : FLOAT)  { super.$$link(131, value) } 
//set 'model_str_33'(value : FLOAT)  { super.$$link(132, value) } 
//set 'clip_str_33'(value : FLOAT)  { super.$$link(133, value) } 
//set 'lora_name_34'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(134, value) } 
//set 'lora_wt_34'(value : FLOAT)  { super.$$link(135, value) } 
//set 'model_str_34'(value : FLOAT)  { super.$$link(136, value) } 
//set 'clip_str_34'(value : FLOAT)  { super.$$link(137, value) } 
//set 'lora_name_35'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(138, value) } 
//set 'lora_wt_35'(value : FLOAT)  { super.$$link(139, value) } 
//set 'model_str_35'(value : FLOAT)  { super.$$link(140, value) } 
//set 'clip_str_35'(value : FLOAT)  { super.$$link(141, value) } 
//set 'lora_name_36'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(142, value) } 
//set 'lora_wt_36'(value : FLOAT)  { super.$$link(143, value) } 
//set 'model_str_36'(value : FLOAT)  { super.$$link(144, value) } 
//set 'clip_str_36'(value : FLOAT)  { super.$$link(145, value) } 
//set 'lora_name_37'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(146, value) } 
//set 'lora_wt_37'(value : FLOAT)  { super.$$link(147, value) } 
//set 'model_str_37'(value : FLOAT)  { super.$$link(148, value) } 
//set 'clip_str_37'(value : FLOAT)  { super.$$link(149, value) } 
//set 'lora_name_38'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(150, value) } 
//set 'lora_wt_38'(value : FLOAT)  { super.$$link(151, value) } 
//set 'model_str_38'(value : FLOAT)  { super.$$link(152, value) } 
//set 'clip_str_38'(value : FLOAT)  { super.$$link(153, value) } 
//set 'lora_name_39'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(154, value) } 
//set 'lora_wt_39'(value : FLOAT)  { super.$$link(155, value) } 
//set 'model_str_39'(value : FLOAT)  { super.$$link(156, value) } 
//set 'clip_str_39'(value : FLOAT)  { super.$$link(157, value) } 
//set 'lora_name_40'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(158, value) } 
//set 'lora_wt_40'(value : FLOAT)  { super.$$link(159, value) } 
//set 'model_str_40'(value : FLOAT)  { super.$$link(160, value) } 
//set 'clip_str_40'(value : FLOAT)  { super.$$link(161, value) } 
//set 'lora_name_41'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(162, value) } 
//set 'lora_wt_41'(value : FLOAT)  { super.$$link(163, value) } 
//set 'model_str_41'(value : FLOAT)  { super.$$link(164, value) } 
//set 'clip_str_41'(value : FLOAT)  { super.$$link(165, value) } 
//set 'lora_name_42'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(166, value) } 
//set 'lora_wt_42'(value : FLOAT)  { super.$$link(167, value) } 
//set 'model_str_42'(value : FLOAT)  { super.$$link(168, value) } 
//set 'clip_str_42'(value : FLOAT)  { super.$$link(169, value) } 
//set 'lora_name_43'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(170, value) } 
//set 'lora_wt_43'(value : FLOAT)  { super.$$link(171, value) } 
//set 'model_str_43'(value : FLOAT)  { super.$$link(172, value) } 
//set 'clip_str_43'(value : FLOAT)  { super.$$link(173, value) } 
//set 'lora_name_44'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(174, value) } 
//set 'lora_wt_44'(value : FLOAT)  { super.$$link(175, value) } 
//set 'model_str_44'(value : FLOAT)  { super.$$link(176, value) } 
//set 'clip_str_44'(value : FLOAT)  { super.$$link(177, value) } 
//set 'lora_name_45'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(178, value) } 
//set 'lora_wt_45'(value : FLOAT)  { super.$$link(179, value) } 
//set 'model_str_45'(value : FLOAT)  { super.$$link(180, value) } 
//set 'clip_str_45'(value : FLOAT)  { super.$$link(181, value) } 
//set 'lora_name_46'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(182, value) } 
//set 'lora_wt_46'(value : FLOAT)  { super.$$link(183, value) } 
//set 'model_str_46'(value : FLOAT)  { super.$$link(184, value) } 
//set 'clip_str_46'(value : FLOAT)  { super.$$link(185, value) } 
//set 'lora_name_47'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(186, value) } 
//set 'lora_wt_47'(value : FLOAT)  { super.$$link(187, value) } 
//set 'model_str_47'(value : FLOAT)  { super.$$link(188, value) } 
//set 'clip_str_47'(value : FLOAT)  { super.$$link(189, value) } 
//set 'lora_name_48'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(190, value) } 
//set 'lora_wt_48'(value : FLOAT)  { super.$$link(191, value) } 
//set 'model_str_48'(value : FLOAT)  { super.$$link(192, value) } 
//set 'clip_str_48'(value : FLOAT)  { super.$$link(193, value) } 
//set 'lora_name_49'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(194, value) } 
//set 'lora_wt_49'(value : FLOAT)  { super.$$link(195, value) } 
//set 'model_str_49'(value : FLOAT)  { super.$$link(196, value) } 
//set 'clip_str_49'(value : FLOAT)  { super.$$link(197, value) } 
//set 'lora_stack'(value : LORA_STACK)  { super.$$link(198, value) } 

        //Getters
        get 'LORA_STACK'() : LORA_STACK { return [this.$uid.toString(), 0]  as unknown as LORA_STACK; }

        /**
          * Constructor
		 * @param opts.input_mode
		 * @param opts.lora_count default: 3 step: 1
		 * @param opts.lora_name_1
		 * @param opts.lora_wt_1 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_1 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_1 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_2
		 * @param opts.lora_wt_2 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_2 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_2 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_3
		 * @param opts.lora_wt_3 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_3 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_3 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_4
		 * @param opts.lora_wt_4 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_4 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_4 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_5
		 * @param opts.lora_wt_5 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_5 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_5 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_6
		 * @param opts.lora_wt_6 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_6 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_6 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_7
		 * @param opts.lora_wt_7 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_7 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_7 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_8
		 * @param opts.lora_wt_8 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_8 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_8 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_9
		 * @param opts.lora_wt_9 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_9 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_9 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_10
		 * @param opts.lora_wt_10 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_10 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_10 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_11
		 * @param opts.lora_wt_11 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_11 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_11 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_12
		 * @param opts.lora_wt_12 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_12 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_12 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_13
		 * @param opts.lora_wt_13 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_13 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_13 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_14
		 * @param opts.lora_wt_14 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_14 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_14 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_15
		 * @param opts.lora_wt_15 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_15 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_15 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_16
		 * @param opts.lora_wt_16 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_16 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_16 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_17
		 * @param opts.lora_wt_17 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_17 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_17 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_18
		 * @param opts.lora_wt_18 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_18 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_18 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_19
		 * @param opts.lora_wt_19 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_19 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_19 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_20
		 * @param opts.lora_wt_20 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_20 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_20 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_21
		 * @param opts.lora_wt_21 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_21 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_21 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_22
		 * @param opts.lora_wt_22 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_22 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_22 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_23
		 * @param opts.lora_wt_23 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_23 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_23 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_24
		 * @param opts.lora_wt_24 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_24 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_24 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_25
		 * @param opts.lora_wt_25 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_25 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_25 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_26
		 * @param opts.lora_wt_26 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_26 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_26 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_27
		 * @param opts.lora_wt_27 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_27 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_27 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_28
		 * @param opts.lora_wt_28 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_28 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_28 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_29
		 * @param opts.lora_wt_29 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_29 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_29 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_30
		 * @param opts.lora_wt_30 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_30 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_30 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_31
		 * @param opts.lora_wt_31 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_31 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_31 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_32
		 * @param opts.lora_wt_32 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_32 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_32 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_33
		 * @param opts.lora_wt_33 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_33 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_33 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_34
		 * @param opts.lora_wt_34 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_34 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_34 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_35
		 * @param opts.lora_wt_35 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_35 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_35 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_36
		 * @param opts.lora_wt_36 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_36 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_36 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_37
		 * @param opts.lora_wt_37 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_37 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_37 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_38
		 * @param opts.lora_wt_38 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_38 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_38 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_39
		 * @param opts.lora_wt_39 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_39 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_39 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_40
		 * @param opts.lora_wt_40 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_40 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_40 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_41
		 * @param opts.lora_wt_41 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_41 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_41 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_42
		 * @param opts.lora_wt_42 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_42 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_42 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_43
		 * @param opts.lora_wt_43 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_43 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_43 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_44
		 * @param opts.lora_wt_44 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_44 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_44 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_45
		 * @param opts.lora_wt_45 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_45 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_45 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_46
		 * @param opts.lora_wt_46 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_46 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_46 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_47
		 * @param opts.lora_wt_47 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_47 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_47 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_48
		 * @param opts.lora_wt_48 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_48 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_48 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_49
		 * @param opts.lora_wt_49 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.model_str_49 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_49 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_stack}
        */
        constructor(opts:{
            'input_mode': 'simple'|'advanced'| $dyn,'lora_count'?: INT,'lora_name_1': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_1'?: FLOAT,'model_str_1'?: FLOAT,'clip_str_1'?: FLOAT,'lora_name_2': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_2'?: FLOAT,'model_str_2'?: FLOAT,'clip_str_2'?: FLOAT,'lora_name_3': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_3'?: FLOAT,'model_str_3'?: FLOAT,'clip_str_3'?: FLOAT,'lora_name_4': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_4'?: FLOAT,'model_str_4'?: FLOAT,'clip_str_4'?: FLOAT,'lora_name_5': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_5'?: FLOAT,'model_str_5'?: FLOAT,'clip_str_5'?: FLOAT,'lora_name_6': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_6'?: FLOAT,'model_str_6'?: FLOAT,'clip_str_6'?: FLOAT,'lora_name_7': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_7'?: FLOAT,'model_str_7'?: FLOAT,'clip_str_7'?: FLOAT,'lora_name_8': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_8'?: FLOAT,'model_str_8'?: FLOAT,'clip_str_8'?: FLOAT,'lora_name_9': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_9'?: FLOAT,'model_str_9'?: FLOAT,'clip_str_9'?: FLOAT,'lora_name_10': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_10'?: FLOAT,'model_str_10'?: FLOAT,'clip_str_10'?: FLOAT,'lora_name_11': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_11'?: FLOAT,'model_str_11'?: FLOAT,'clip_str_11'?: FLOAT,'lora_name_12': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_12'?: FLOAT,'model_str_12'?: FLOAT,'clip_str_12'?: FLOAT,'lora_name_13': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_13'?: FLOAT,'model_str_13'?: FLOAT,'clip_str_13'?: FLOAT,'lora_name_14': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_14'?: FLOAT,'model_str_14'?: FLOAT,'clip_str_14'?: FLOAT,'lora_name_15': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_15'?: FLOAT,'model_str_15'?: FLOAT,'clip_str_15'?: FLOAT,'lora_name_16': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_16'?: FLOAT,'model_str_16'?: FLOAT,'clip_str_16'?: FLOAT,'lora_name_17': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_17'?: FLOAT,'model_str_17'?: FLOAT,'clip_str_17'?: FLOAT,'lora_name_18': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_18'?: FLOAT,'model_str_18'?: FLOAT,'clip_str_18'?: FLOAT,'lora_name_19': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_19'?: FLOAT,'model_str_19'?: FLOAT,'clip_str_19'?: FLOAT,'lora_name_20': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_20'?: FLOAT,'model_str_20'?: FLOAT,'clip_str_20'?: FLOAT,'lora_name_21': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_21'?: FLOAT,'model_str_21'?: FLOAT,'clip_str_21'?: FLOAT,'lora_name_22': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_22'?: FLOAT,'model_str_22'?: FLOAT,'clip_str_22'?: FLOAT,'lora_name_23': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_23'?: FLOAT,'model_str_23'?: FLOAT,'clip_str_23'?: FLOAT,'lora_name_24': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_24'?: FLOAT,'model_str_24'?: FLOAT,'clip_str_24'?: FLOAT,'lora_name_25': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_25'?: FLOAT,'model_str_25'?: FLOAT,'clip_str_25'?: FLOAT,'lora_name_26': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_26'?: FLOAT,'model_str_26'?: FLOAT,'clip_str_26'?: FLOAT,'lora_name_27': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_27'?: FLOAT,'model_str_27'?: FLOAT,'clip_str_27'?: FLOAT,'lora_name_28': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_28'?: FLOAT,'model_str_28'?: FLOAT,'clip_str_28'?: FLOAT,'lora_name_29': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_29'?: FLOAT,'model_str_29'?: FLOAT,'clip_str_29'?: FLOAT,'lora_name_30': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_30'?: FLOAT,'model_str_30'?: FLOAT,'clip_str_30'?: FLOAT,'lora_name_31': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_31'?: FLOAT,'model_str_31'?: FLOAT,'clip_str_31'?: FLOAT,'lora_name_32': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_32'?: FLOAT,'model_str_32'?: FLOAT,'clip_str_32'?: FLOAT,'lora_name_33': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_33'?: FLOAT,'model_str_33'?: FLOAT,'clip_str_33'?: FLOAT,'lora_name_34': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_34'?: FLOAT,'model_str_34'?: FLOAT,'clip_str_34'?: FLOAT,'lora_name_35': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_35'?: FLOAT,'model_str_35'?: FLOAT,'clip_str_35'?: FLOAT,'lora_name_36': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_36'?: FLOAT,'model_str_36'?: FLOAT,'clip_str_36'?: FLOAT,'lora_name_37': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_37'?: FLOAT,'model_str_37'?: FLOAT,'clip_str_37'?: FLOAT,'lora_name_38': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_38'?: FLOAT,'model_str_38'?: FLOAT,'clip_str_38'?: FLOAT,'lora_name_39': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_39'?: FLOAT,'model_str_39'?: FLOAT,'clip_str_39'?: FLOAT,'lora_name_40': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_40'?: FLOAT,'model_str_40'?: FLOAT,'clip_str_40'?: FLOAT,'lora_name_41': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_41'?: FLOAT,'model_str_41'?: FLOAT,'clip_str_41'?: FLOAT,'lora_name_42': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_42'?: FLOAT,'model_str_42'?: FLOAT,'clip_str_42'?: FLOAT,'lora_name_43': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_43'?: FLOAT,'model_str_43'?: FLOAT,'clip_str_43'?: FLOAT,'lora_name_44': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_44'?: FLOAT,'model_str_44'?: FLOAT,'clip_str_44'?: FLOAT,'lora_name_45': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_45'?: FLOAT,'model_str_45'?: FLOAT,'clip_str_45'?: FLOAT,'lora_name_46': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_46'?: FLOAT,'model_str_46'?: FLOAT,'clip_str_46'?: FLOAT,'lora_name_47': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_47'?: FLOAT,'model_str_47'?: FLOAT,'clip_str_47'?: FLOAT,'lora_name_48': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_48'?: FLOAT,'model_str_48'?: FLOAT,'clip_str_48'?: FLOAT,'lora_name_49': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'lora_wt_49'?: FLOAT,'model_str_49'?: FLOAT,'clip_str_49'?: FLOAT,'lora_stack'?: LORA_STACK
        }){
            super(ctx);

            super.$$link("input_mode", opts['input_mode'])
super.$$link("lora_count", opts['lora_count']??tmp["LoRA Stacker"].defaults['lora_count'])
super.$$link("lora_name_1", opts['lora_name_1'])
super.$$link("lora_wt_1", opts['lora_wt_1']??tmp["LoRA Stacker"].defaults['lora_wt_1'])
super.$$link("model_str_1", opts['model_str_1']??tmp["LoRA Stacker"].defaults['model_str_1'])
super.$$link("clip_str_1", opts['clip_str_1']??tmp["LoRA Stacker"].defaults['clip_str_1'])
super.$$link("lora_name_2", opts['lora_name_2'])
super.$$link("lora_wt_2", opts['lora_wt_2']??tmp["LoRA Stacker"].defaults['lora_wt_2'])
super.$$link("model_str_2", opts['model_str_2']??tmp["LoRA Stacker"].defaults['model_str_2'])
super.$$link("clip_str_2", opts['clip_str_2']??tmp["LoRA Stacker"].defaults['clip_str_2'])
super.$$link("lora_name_3", opts['lora_name_3'])
super.$$link("lora_wt_3", opts['lora_wt_3']??tmp["LoRA Stacker"].defaults['lora_wt_3'])
super.$$link("model_str_3", opts['model_str_3']??tmp["LoRA Stacker"].defaults['model_str_3'])
super.$$link("clip_str_3", opts['clip_str_3']??tmp["LoRA Stacker"].defaults['clip_str_3'])
super.$$link("lora_name_4", opts['lora_name_4'])
super.$$link("lora_wt_4", opts['lora_wt_4']??tmp["LoRA Stacker"].defaults['lora_wt_4'])
super.$$link("model_str_4", opts['model_str_4']??tmp["LoRA Stacker"].defaults['model_str_4'])
super.$$link("clip_str_4", opts['clip_str_4']??tmp["LoRA Stacker"].defaults['clip_str_4'])
super.$$link("lora_name_5", opts['lora_name_5'])
super.$$link("lora_wt_5", opts['lora_wt_5']??tmp["LoRA Stacker"].defaults['lora_wt_5'])
super.$$link("model_str_5", opts['model_str_5']??tmp["LoRA Stacker"].defaults['model_str_5'])
super.$$link("clip_str_5", opts['clip_str_5']??tmp["LoRA Stacker"].defaults['clip_str_5'])
super.$$link("lora_name_6", opts['lora_name_6'])
super.$$link("lora_wt_6", opts['lora_wt_6']??tmp["LoRA Stacker"].defaults['lora_wt_6'])
super.$$link("model_str_6", opts['model_str_6']??tmp["LoRA Stacker"].defaults['model_str_6'])
super.$$link("clip_str_6", opts['clip_str_6']??tmp["LoRA Stacker"].defaults['clip_str_6'])
super.$$link("lora_name_7", opts['lora_name_7'])
super.$$link("lora_wt_7", opts['lora_wt_7']??tmp["LoRA Stacker"].defaults['lora_wt_7'])
super.$$link("model_str_7", opts['model_str_7']??tmp["LoRA Stacker"].defaults['model_str_7'])
super.$$link("clip_str_7", opts['clip_str_7']??tmp["LoRA Stacker"].defaults['clip_str_7'])
super.$$link("lora_name_8", opts['lora_name_8'])
super.$$link("lora_wt_8", opts['lora_wt_8']??tmp["LoRA Stacker"].defaults['lora_wt_8'])
super.$$link("model_str_8", opts['model_str_8']??tmp["LoRA Stacker"].defaults['model_str_8'])
super.$$link("clip_str_8", opts['clip_str_8']??tmp["LoRA Stacker"].defaults['clip_str_8'])
super.$$link("lora_name_9", opts['lora_name_9'])
super.$$link("lora_wt_9", opts['lora_wt_9']??tmp["LoRA Stacker"].defaults['lora_wt_9'])
super.$$link("model_str_9", opts['model_str_9']??tmp["LoRA Stacker"].defaults['model_str_9'])
super.$$link("clip_str_9", opts['clip_str_9']??tmp["LoRA Stacker"].defaults['clip_str_9'])
super.$$link("lora_name_10", opts['lora_name_10'])
super.$$link("lora_wt_10", opts['lora_wt_10']??tmp["LoRA Stacker"].defaults['lora_wt_10'])
super.$$link("model_str_10", opts['model_str_10']??tmp["LoRA Stacker"].defaults['model_str_10'])
super.$$link("clip_str_10", opts['clip_str_10']??tmp["LoRA Stacker"].defaults['clip_str_10'])
super.$$link("lora_name_11", opts['lora_name_11'])
super.$$link("lora_wt_11", opts['lora_wt_11']??tmp["LoRA Stacker"].defaults['lora_wt_11'])
super.$$link("model_str_11", opts['model_str_11']??tmp["LoRA Stacker"].defaults['model_str_11'])
super.$$link("clip_str_11", opts['clip_str_11']??tmp["LoRA Stacker"].defaults['clip_str_11'])
super.$$link("lora_name_12", opts['lora_name_12'])
super.$$link("lora_wt_12", opts['lora_wt_12']??tmp["LoRA Stacker"].defaults['lora_wt_12'])
super.$$link("model_str_12", opts['model_str_12']??tmp["LoRA Stacker"].defaults['model_str_12'])
super.$$link("clip_str_12", opts['clip_str_12']??tmp["LoRA Stacker"].defaults['clip_str_12'])
super.$$link("lora_name_13", opts['lora_name_13'])
super.$$link("lora_wt_13", opts['lora_wt_13']??tmp["LoRA Stacker"].defaults['lora_wt_13'])
super.$$link("model_str_13", opts['model_str_13']??tmp["LoRA Stacker"].defaults['model_str_13'])
super.$$link("clip_str_13", opts['clip_str_13']??tmp["LoRA Stacker"].defaults['clip_str_13'])
super.$$link("lora_name_14", opts['lora_name_14'])
super.$$link("lora_wt_14", opts['lora_wt_14']??tmp["LoRA Stacker"].defaults['lora_wt_14'])
super.$$link("model_str_14", opts['model_str_14']??tmp["LoRA Stacker"].defaults['model_str_14'])
super.$$link("clip_str_14", opts['clip_str_14']??tmp["LoRA Stacker"].defaults['clip_str_14'])
super.$$link("lora_name_15", opts['lora_name_15'])
super.$$link("lora_wt_15", opts['lora_wt_15']??tmp["LoRA Stacker"].defaults['lora_wt_15'])
super.$$link("model_str_15", opts['model_str_15']??tmp["LoRA Stacker"].defaults['model_str_15'])
super.$$link("clip_str_15", opts['clip_str_15']??tmp["LoRA Stacker"].defaults['clip_str_15'])
super.$$link("lora_name_16", opts['lora_name_16'])
super.$$link("lora_wt_16", opts['lora_wt_16']??tmp["LoRA Stacker"].defaults['lora_wt_16'])
super.$$link("model_str_16", opts['model_str_16']??tmp["LoRA Stacker"].defaults['model_str_16'])
super.$$link("clip_str_16", opts['clip_str_16']??tmp["LoRA Stacker"].defaults['clip_str_16'])
super.$$link("lora_name_17", opts['lora_name_17'])
super.$$link("lora_wt_17", opts['lora_wt_17']??tmp["LoRA Stacker"].defaults['lora_wt_17'])
super.$$link("model_str_17", opts['model_str_17']??tmp["LoRA Stacker"].defaults['model_str_17'])
super.$$link("clip_str_17", opts['clip_str_17']??tmp["LoRA Stacker"].defaults['clip_str_17'])
super.$$link("lora_name_18", opts['lora_name_18'])
super.$$link("lora_wt_18", opts['lora_wt_18']??tmp["LoRA Stacker"].defaults['lora_wt_18'])
super.$$link("model_str_18", opts['model_str_18']??tmp["LoRA Stacker"].defaults['model_str_18'])
super.$$link("clip_str_18", opts['clip_str_18']??tmp["LoRA Stacker"].defaults['clip_str_18'])
super.$$link("lora_name_19", opts['lora_name_19'])
super.$$link("lora_wt_19", opts['lora_wt_19']??tmp["LoRA Stacker"].defaults['lora_wt_19'])
super.$$link("model_str_19", opts['model_str_19']??tmp["LoRA Stacker"].defaults['model_str_19'])
super.$$link("clip_str_19", opts['clip_str_19']??tmp["LoRA Stacker"].defaults['clip_str_19'])
super.$$link("lora_name_20", opts['lora_name_20'])
super.$$link("lora_wt_20", opts['lora_wt_20']??tmp["LoRA Stacker"].defaults['lora_wt_20'])
super.$$link("model_str_20", opts['model_str_20']??tmp["LoRA Stacker"].defaults['model_str_20'])
super.$$link("clip_str_20", opts['clip_str_20']??tmp["LoRA Stacker"].defaults['clip_str_20'])
super.$$link("lora_name_21", opts['lora_name_21'])
super.$$link("lora_wt_21", opts['lora_wt_21']??tmp["LoRA Stacker"].defaults['lora_wt_21'])
super.$$link("model_str_21", opts['model_str_21']??tmp["LoRA Stacker"].defaults['model_str_21'])
super.$$link("clip_str_21", opts['clip_str_21']??tmp["LoRA Stacker"].defaults['clip_str_21'])
super.$$link("lora_name_22", opts['lora_name_22'])
super.$$link("lora_wt_22", opts['lora_wt_22']??tmp["LoRA Stacker"].defaults['lora_wt_22'])
super.$$link("model_str_22", opts['model_str_22']??tmp["LoRA Stacker"].defaults['model_str_22'])
super.$$link("clip_str_22", opts['clip_str_22']??tmp["LoRA Stacker"].defaults['clip_str_22'])
super.$$link("lora_name_23", opts['lora_name_23'])
super.$$link("lora_wt_23", opts['lora_wt_23']??tmp["LoRA Stacker"].defaults['lora_wt_23'])
super.$$link("model_str_23", opts['model_str_23']??tmp["LoRA Stacker"].defaults['model_str_23'])
super.$$link("clip_str_23", opts['clip_str_23']??tmp["LoRA Stacker"].defaults['clip_str_23'])
super.$$link("lora_name_24", opts['lora_name_24'])
super.$$link("lora_wt_24", opts['lora_wt_24']??tmp["LoRA Stacker"].defaults['lora_wt_24'])
super.$$link("model_str_24", opts['model_str_24']??tmp["LoRA Stacker"].defaults['model_str_24'])
super.$$link("clip_str_24", opts['clip_str_24']??tmp["LoRA Stacker"].defaults['clip_str_24'])
super.$$link("lora_name_25", opts['lora_name_25'])
super.$$link("lora_wt_25", opts['lora_wt_25']??tmp["LoRA Stacker"].defaults['lora_wt_25'])
super.$$link("model_str_25", opts['model_str_25']??tmp["LoRA Stacker"].defaults['model_str_25'])
super.$$link("clip_str_25", opts['clip_str_25']??tmp["LoRA Stacker"].defaults['clip_str_25'])
super.$$link("lora_name_26", opts['lora_name_26'])
super.$$link("lora_wt_26", opts['lora_wt_26']??tmp["LoRA Stacker"].defaults['lora_wt_26'])
super.$$link("model_str_26", opts['model_str_26']??tmp["LoRA Stacker"].defaults['model_str_26'])
super.$$link("clip_str_26", opts['clip_str_26']??tmp["LoRA Stacker"].defaults['clip_str_26'])
super.$$link("lora_name_27", opts['lora_name_27'])
super.$$link("lora_wt_27", opts['lora_wt_27']??tmp["LoRA Stacker"].defaults['lora_wt_27'])
super.$$link("model_str_27", opts['model_str_27']??tmp["LoRA Stacker"].defaults['model_str_27'])
super.$$link("clip_str_27", opts['clip_str_27']??tmp["LoRA Stacker"].defaults['clip_str_27'])
super.$$link("lora_name_28", opts['lora_name_28'])
super.$$link("lora_wt_28", opts['lora_wt_28']??tmp["LoRA Stacker"].defaults['lora_wt_28'])
super.$$link("model_str_28", opts['model_str_28']??tmp["LoRA Stacker"].defaults['model_str_28'])
super.$$link("clip_str_28", opts['clip_str_28']??tmp["LoRA Stacker"].defaults['clip_str_28'])
super.$$link("lora_name_29", opts['lora_name_29'])
super.$$link("lora_wt_29", opts['lora_wt_29']??tmp["LoRA Stacker"].defaults['lora_wt_29'])
super.$$link("model_str_29", opts['model_str_29']??tmp["LoRA Stacker"].defaults['model_str_29'])
super.$$link("clip_str_29", opts['clip_str_29']??tmp["LoRA Stacker"].defaults['clip_str_29'])
super.$$link("lora_name_30", opts['lora_name_30'])
super.$$link("lora_wt_30", opts['lora_wt_30']??tmp["LoRA Stacker"].defaults['lora_wt_30'])
super.$$link("model_str_30", opts['model_str_30']??tmp["LoRA Stacker"].defaults['model_str_30'])
super.$$link("clip_str_30", opts['clip_str_30']??tmp["LoRA Stacker"].defaults['clip_str_30'])
super.$$link("lora_name_31", opts['lora_name_31'])
super.$$link("lora_wt_31", opts['lora_wt_31']??tmp["LoRA Stacker"].defaults['lora_wt_31'])
super.$$link("model_str_31", opts['model_str_31']??tmp["LoRA Stacker"].defaults['model_str_31'])
super.$$link("clip_str_31", opts['clip_str_31']??tmp["LoRA Stacker"].defaults['clip_str_31'])
super.$$link("lora_name_32", opts['lora_name_32'])
super.$$link("lora_wt_32", opts['lora_wt_32']??tmp["LoRA Stacker"].defaults['lora_wt_32'])
super.$$link("model_str_32", opts['model_str_32']??tmp["LoRA Stacker"].defaults['model_str_32'])
super.$$link("clip_str_32", opts['clip_str_32']??tmp["LoRA Stacker"].defaults['clip_str_32'])
super.$$link("lora_name_33", opts['lora_name_33'])
super.$$link("lora_wt_33", opts['lora_wt_33']??tmp["LoRA Stacker"].defaults['lora_wt_33'])
super.$$link("model_str_33", opts['model_str_33']??tmp["LoRA Stacker"].defaults['model_str_33'])
super.$$link("clip_str_33", opts['clip_str_33']??tmp["LoRA Stacker"].defaults['clip_str_33'])
super.$$link("lora_name_34", opts['lora_name_34'])
super.$$link("lora_wt_34", opts['lora_wt_34']??tmp["LoRA Stacker"].defaults['lora_wt_34'])
super.$$link("model_str_34", opts['model_str_34']??tmp["LoRA Stacker"].defaults['model_str_34'])
super.$$link("clip_str_34", opts['clip_str_34']??tmp["LoRA Stacker"].defaults['clip_str_34'])
super.$$link("lora_name_35", opts['lora_name_35'])
super.$$link("lora_wt_35", opts['lora_wt_35']??tmp["LoRA Stacker"].defaults['lora_wt_35'])
super.$$link("model_str_35", opts['model_str_35']??tmp["LoRA Stacker"].defaults['model_str_35'])
super.$$link("clip_str_35", opts['clip_str_35']??tmp["LoRA Stacker"].defaults['clip_str_35'])
super.$$link("lora_name_36", opts['lora_name_36'])
super.$$link("lora_wt_36", opts['lora_wt_36']??tmp["LoRA Stacker"].defaults['lora_wt_36'])
super.$$link("model_str_36", opts['model_str_36']??tmp["LoRA Stacker"].defaults['model_str_36'])
super.$$link("clip_str_36", opts['clip_str_36']??tmp["LoRA Stacker"].defaults['clip_str_36'])
super.$$link("lora_name_37", opts['lora_name_37'])
super.$$link("lora_wt_37", opts['lora_wt_37']??tmp["LoRA Stacker"].defaults['lora_wt_37'])
super.$$link("model_str_37", opts['model_str_37']??tmp["LoRA Stacker"].defaults['model_str_37'])
super.$$link("clip_str_37", opts['clip_str_37']??tmp["LoRA Stacker"].defaults['clip_str_37'])
super.$$link("lora_name_38", opts['lora_name_38'])
super.$$link("lora_wt_38", opts['lora_wt_38']??tmp["LoRA Stacker"].defaults['lora_wt_38'])
super.$$link("model_str_38", opts['model_str_38']??tmp["LoRA Stacker"].defaults['model_str_38'])
super.$$link("clip_str_38", opts['clip_str_38']??tmp["LoRA Stacker"].defaults['clip_str_38'])
super.$$link("lora_name_39", opts['lora_name_39'])
super.$$link("lora_wt_39", opts['lora_wt_39']??tmp["LoRA Stacker"].defaults['lora_wt_39'])
super.$$link("model_str_39", opts['model_str_39']??tmp["LoRA Stacker"].defaults['model_str_39'])
super.$$link("clip_str_39", opts['clip_str_39']??tmp["LoRA Stacker"].defaults['clip_str_39'])
super.$$link("lora_name_40", opts['lora_name_40'])
super.$$link("lora_wt_40", opts['lora_wt_40']??tmp["LoRA Stacker"].defaults['lora_wt_40'])
super.$$link("model_str_40", opts['model_str_40']??tmp["LoRA Stacker"].defaults['model_str_40'])
super.$$link("clip_str_40", opts['clip_str_40']??tmp["LoRA Stacker"].defaults['clip_str_40'])
super.$$link("lora_name_41", opts['lora_name_41'])
super.$$link("lora_wt_41", opts['lora_wt_41']??tmp["LoRA Stacker"].defaults['lora_wt_41'])
super.$$link("model_str_41", opts['model_str_41']??tmp["LoRA Stacker"].defaults['model_str_41'])
super.$$link("clip_str_41", opts['clip_str_41']??tmp["LoRA Stacker"].defaults['clip_str_41'])
super.$$link("lora_name_42", opts['lora_name_42'])
super.$$link("lora_wt_42", opts['lora_wt_42']??tmp["LoRA Stacker"].defaults['lora_wt_42'])
super.$$link("model_str_42", opts['model_str_42']??tmp["LoRA Stacker"].defaults['model_str_42'])
super.$$link("clip_str_42", opts['clip_str_42']??tmp["LoRA Stacker"].defaults['clip_str_42'])
super.$$link("lora_name_43", opts['lora_name_43'])
super.$$link("lora_wt_43", opts['lora_wt_43']??tmp["LoRA Stacker"].defaults['lora_wt_43'])
super.$$link("model_str_43", opts['model_str_43']??tmp["LoRA Stacker"].defaults['model_str_43'])
super.$$link("clip_str_43", opts['clip_str_43']??tmp["LoRA Stacker"].defaults['clip_str_43'])
super.$$link("lora_name_44", opts['lora_name_44'])
super.$$link("lora_wt_44", opts['lora_wt_44']??tmp["LoRA Stacker"].defaults['lora_wt_44'])
super.$$link("model_str_44", opts['model_str_44']??tmp["LoRA Stacker"].defaults['model_str_44'])
super.$$link("clip_str_44", opts['clip_str_44']??tmp["LoRA Stacker"].defaults['clip_str_44'])
super.$$link("lora_name_45", opts['lora_name_45'])
super.$$link("lora_wt_45", opts['lora_wt_45']??tmp["LoRA Stacker"].defaults['lora_wt_45'])
super.$$link("model_str_45", opts['model_str_45']??tmp["LoRA Stacker"].defaults['model_str_45'])
super.$$link("clip_str_45", opts['clip_str_45']??tmp["LoRA Stacker"].defaults['clip_str_45'])
super.$$link("lora_name_46", opts['lora_name_46'])
super.$$link("lora_wt_46", opts['lora_wt_46']??tmp["LoRA Stacker"].defaults['lora_wt_46'])
super.$$link("model_str_46", opts['model_str_46']??tmp["LoRA Stacker"].defaults['model_str_46'])
super.$$link("clip_str_46", opts['clip_str_46']??tmp["LoRA Stacker"].defaults['clip_str_46'])
super.$$link("lora_name_47", opts['lora_name_47'])
super.$$link("lora_wt_47", opts['lora_wt_47']??tmp["LoRA Stacker"].defaults['lora_wt_47'])
super.$$link("model_str_47", opts['model_str_47']??tmp["LoRA Stacker"].defaults['model_str_47'])
super.$$link("clip_str_47", opts['clip_str_47']??tmp["LoRA Stacker"].defaults['clip_str_47'])
super.$$link("lora_name_48", opts['lora_name_48'])
super.$$link("lora_wt_48", opts['lora_wt_48']??tmp["LoRA Stacker"].defaults['lora_wt_48'])
super.$$link("model_str_48", opts['model_str_48']??tmp["LoRA Stacker"].defaults['model_str_48'])
super.$$link("clip_str_48", opts['clip_str_48']??tmp["LoRA Stacker"].defaults['clip_str_48'])
super.$$link("lora_name_49", opts['lora_name_49'])
super.$$link("lora_wt_49", opts['lora_wt_49']??tmp["LoRA Stacker"].defaults['lora_wt_49'])
super.$$link("model_str_49", opts['model_str_49']??tmp["LoRA Stacker"].defaults['model_str_49'])
super.$$link("clip_str_49", opts['clip_str_49']??tmp["LoRA Stacker"].defaults['clip_str_49'])
super.$$link("lora_stack", opts['lora_stack'])
}

        static defaults = {
    'lora_count':  3,
'lora_wt_1':  1,
'model_str_1':  1,
'clip_str_1':  1,
'lora_wt_2':  1,
'model_str_2':  1,
'clip_str_2':  1,
'lora_wt_3':  1,
'model_str_3':  1,
'clip_str_3':  1,
'lora_wt_4':  1,
'model_str_4':  1,
'clip_str_4':  1,
'lora_wt_5':  1,
'model_str_5':  1,
'clip_str_5':  1,
'lora_wt_6':  1,
'model_str_6':  1,
'clip_str_6':  1,
'lora_wt_7':  1,
'model_str_7':  1,
'clip_str_7':  1,
'lora_wt_8':  1,
'model_str_8':  1,
'clip_str_8':  1,
'lora_wt_9':  1,
'model_str_9':  1,
'clip_str_9':  1,
'lora_wt_10':  1,
'model_str_10':  1,
'clip_str_10':  1,
'lora_wt_11':  1,
'model_str_11':  1,
'clip_str_11':  1,
'lora_wt_12':  1,
'model_str_12':  1,
'clip_str_12':  1,
'lora_wt_13':  1,
'model_str_13':  1,
'clip_str_13':  1,
'lora_wt_14':  1,
'model_str_14':  1,
'clip_str_14':  1,
'lora_wt_15':  1,
'model_str_15':  1,
'clip_str_15':  1,
'lora_wt_16':  1,
'model_str_16':  1,
'clip_str_16':  1,
'lora_wt_17':  1,
'model_str_17':  1,
'clip_str_17':  1,
'lora_wt_18':  1,
'model_str_18':  1,
'clip_str_18':  1,
'lora_wt_19':  1,
'model_str_19':  1,
'clip_str_19':  1,
'lora_wt_20':  1,
'model_str_20':  1,
'clip_str_20':  1,
'lora_wt_21':  1,
'model_str_21':  1,
'clip_str_21':  1,
'lora_wt_22':  1,
'model_str_22':  1,
'clip_str_22':  1,
'lora_wt_23':  1,
'model_str_23':  1,
'clip_str_23':  1,
'lora_wt_24':  1,
'model_str_24':  1,
'clip_str_24':  1,
'lora_wt_25':  1,
'model_str_25':  1,
'clip_str_25':  1,
'lora_wt_26':  1,
'model_str_26':  1,
'clip_str_26':  1,
'lora_wt_27':  1,
'model_str_27':  1,
'clip_str_27':  1,
'lora_wt_28':  1,
'model_str_28':  1,
'clip_str_28':  1,
'lora_wt_29':  1,
'model_str_29':  1,
'clip_str_29':  1,
'lora_wt_30':  1,
'model_str_30':  1,
'clip_str_30':  1,
'lora_wt_31':  1,
'model_str_31':  1,
'clip_str_31':  1,
'lora_wt_32':  1,
'model_str_32':  1,
'clip_str_32':  1,
'lora_wt_33':  1,
'model_str_33':  1,
'clip_str_33':  1,
'lora_wt_34':  1,
'model_str_34':  1,
'clip_str_34':  1,
'lora_wt_35':  1,
'model_str_35':  1,
'clip_str_35':  1,
'lora_wt_36':  1,
'model_str_36':  1,
'clip_str_36':  1,
'lora_wt_37':  1,
'model_str_37':  1,
'clip_str_37':  1,
'lora_wt_38':  1,
'model_str_38':  1,
'clip_str_38':  1,
'lora_wt_39':  1,
'model_str_39':  1,
'clip_str_39':  1,
'lora_wt_40':  1,
'model_str_40':  1,
'clip_str_40':  1,
'lora_wt_41':  1,
'model_str_41':  1,
'clip_str_41':  1,
'lora_wt_42':  1,
'model_str_42':  1,
'clip_str_42':  1,
'lora_wt_43':  1,
'model_str_43':  1,
'clip_str_43':  1,
'lora_wt_44':  1,
'model_str_44':  1,
'clip_str_44':  1,
'lora_wt_45':  1,
'model_str_45':  1,
'clip_str_45':  1,
'lora_wt_46':  1,
'model_str_46':  1,
'clip_str_46':  1,
'lora_wt_47':  1,
'model_str_47':  1,
'clip_str_47':  1,
'lora_wt_48':  1,
'model_str_48':  1,
'clip_str_48':  1,
'lora_wt_49':  1,
'model_str_49':  1,
'clip_str_49':  1
}
        protected override $$type(){
            return "LoRA Stacker"
        }
},

    /**
     * Control Net Stacker from Efficiency Nodes/Stackers
     * @desc 
    */
    "Control Net Stacker" : class extends Node{
        //Setters
        //set 'control_net'(value : CONTROL_NET)  { super.$$link(0, value) } 
//set 'image'(value : IMAGE)  { super.$$link(1, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(2, value) } 
//set 'start_percent'(value : FLOAT)  { super.$$link(3, value) } 
//set 'end_percent'(value : FLOAT)  { super.$$link(4, value) } 
//set 'cnet_stack'(value : CONTROL_NET_STACK)  { super.$$link(5, value) } 

        //Getters
        get 'CNET_STACK'() : CONTROL_NET_STACK { return [this.$uid.toString(), 0]  as unknown as CONTROL_NET_STACK; }

        /**
          * Constructor
		 * @param opts.control_net
		 * @param opts.image
		 * @param opts.strength default: 1 step: 0.01
		 * @param opts.start_percent step: 0.001
		 * @param opts.end_percent default: 1 step: 0.001
		 * @param opts.cnet_stack}
        */
        constructor(opts:{
            'control_net': CONTROL_NET,'image': IMAGE,'strength'?: FLOAT,'start_percent'?: FLOAT,'end_percent'?: FLOAT,'cnet_stack'?: CONTROL_NET_STACK
        }){
            super(ctx);

            super.$$link("control_net", opts['control_net'])
super.$$link("image", opts['image'])
super.$$link("strength", opts['strength']??tmp["Control Net Stacker"].defaults['strength'])
super.$$link("start_percent", opts['start_percent']??tmp["Control Net Stacker"].defaults['start_percent'])
super.$$link("end_percent", opts['end_percent']??tmp["Control Net Stacker"].defaults['end_percent'])
super.$$link("cnet_stack", opts['cnet_stack'])
}

        static defaults = {
    'strength':  1,
'start_percent':  0,
'end_percent':  1
}
        protected override $$type(){
            return "Control Net Stacker"
        }
},

    /**
     * Apply ControlNet Stack from Efficiency Nodes/Stackers
     * @desc 
    */
    "Apply ControlNet Stack" : class extends Node{
        //Setters
        //set 'positive'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(1, value) } 
//set 'cnet_stack'(value : CONTROL_NET_STACK)  { super.$$link(2, value) } 

        //Getters
        get 'CONDITIONING+'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }
get 'CONDITIONING-'() : CONDITIONING { return [this.$uid.toString(), 1]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.cnet_stack}
        */
        constructor(opts:{
            'positive': CONDITIONING,'negative': CONDITIONING,'cnet_stack'?: CONTROL_NET_STACK
        }){
            super(ctx);

            super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("cnet_stack", opts['cnet_stack'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Apply ControlNet Stack"
        }
},

    /**
     * Unpack SDXL Tuple from Efficiency Nodes/Misc
     * @desc 
    */
    "Unpack SDXL Tuple" : class extends Node{
        //Setters
        //set 'sdxl_tuple'(value : SDXL_TUPLE)  { super.$$link(0, value) } 

        //Getters
        get 'BASE_MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'BASE_CLIP'() : CLIP { return [this.$uid.toString(), 1]  as unknown as CLIP; }
get 'BASE_CONDITIONING+'() : CONDITIONING { return [this.$uid.toString(), 2]  as unknown as CONDITIONING; }
get 'BASE_CONDITIONING-'() : CONDITIONING { return [this.$uid.toString(), 3]  as unknown as CONDITIONING; }
get 'REFINER_MODEL'() : MODEL { return [this.$uid.toString(), 4]  as unknown as MODEL; }
get 'REFINER_CLIP'() : CLIP { return [this.$uid.toString(), 5]  as unknown as CLIP; }
get 'REFINER_CONDITIONING+'() : CONDITIONING { return [this.$uid.toString(), 6]  as unknown as CONDITIONING; }
get 'REFINER_CONDITIONING-'() : CONDITIONING { return [this.$uid.toString(), 7]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.sdxl_tuple}
        */
        constructor(opts:{
            'sdxl_tuple': SDXL_TUPLE
        }){
            super(ctx);

            super.$$link("sdxl_tuple", opts['sdxl_tuple'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Unpack SDXL Tuple"
        }
},

    /**
     * Pack SDXL Tuple from Efficiency Nodes/Misc
     * @desc 
    */
    "Pack SDXL Tuple" : class extends Node{
        //Setters
        //set 'base_model'(value : MODEL)  { super.$$link(0, value) } 
//set 'base_clip'(value : CLIP)  { super.$$link(1, value) } 
//set 'base_positive'(value : CONDITIONING)  { super.$$link(2, value) } 
//set 'base_negative'(value : CONDITIONING)  { super.$$link(3, value) } 
//set 'refiner_model'(value : MODEL)  { super.$$link(4, value) } 
//set 'refiner_clip'(value : CLIP)  { super.$$link(5, value) } 
//set 'refiner_positive'(value : CONDITIONING)  { super.$$link(6, value) } 
//set 'refiner_negative'(value : CONDITIONING)  { super.$$link(7, value) } 

        //Getters
        get 'SDXL_TUPLE'() : SDXL_TUPLE { return [this.$uid.toString(), 0]  as unknown as SDXL_TUPLE; }

        /**
          * Constructor
		 * @param opts.base_model
		 * @param opts.base_clip
		 * @param opts.base_positive
		 * @param opts.base_negative
		 * @param opts.refiner_model
		 * @param opts.refiner_clip
		 * @param opts.refiner_positive
		 * @param opts.refiner_negative}
        */
        constructor(opts:{
            'base_model': MODEL,'base_clip': CLIP,'base_positive': CONDITIONING,'base_negative': CONDITIONING,'refiner_model': MODEL,'refiner_clip': CLIP,'refiner_positive': CONDITIONING,'refiner_negative': CONDITIONING
        }){
            super(ctx);

            super.$$link("base_model", opts['base_model'])
super.$$link("base_clip", opts['base_clip'])
super.$$link("base_positive", opts['base_positive'])
super.$$link("base_negative", opts['base_negative'])
super.$$link("refiner_model", opts['refiner_model'])
super.$$link("refiner_clip", opts['refiner_clip'])
super.$$link("refiner_positive", opts['refiner_positive'])
super.$$link("refiner_negative", opts['refiner_negative'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Pack SDXL Tuple"
        }
},

    /**
     * XY Plot from Efficiency Nodes/Scripts
     * @desc 
    */
    "XY Plot" : class extends Node{
        //Setters
        //set 'grid_spacing'(value : INT)  { super.$$link(0, value) } 
//set 'XY_flip'(value : 'False'|'True'| $dyn)  { super.$$link(1, value) } 
//set 'Y_label_orientation'(value : 'Horizontal'|'Vertical'| $dyn)  { super.$$link(2, value) } 
//set 'cache_models'(value : 'True'|'False'| $dyn)  { super.$$link(3, value) } 
//set 'ksampler_output_image'(value : 'Images'|'Plot'| $dyn)  { super.$$link(4, value) } 
//set 'dependencies'(value : DEPENDENCIES)  { super.$$link(5, value) } 
//set 'X'(value : XY)  { super.$$link(6, value) } 
//set 'Y'(value : XY)  { super.$$link(7, value) } 

        //Getters
        get 'SCRIPT'() : SCRIPT { return [this.$uid.toString(), 0]  as unknown as SCRIPT; }

        /**
          * Constructor
		 * @param opts.grid_spacing step: 5
		 * @param opts.XY_flip
		 * @param opts.Y_label_orientation
		 * @param opts.cache_models
		 * @param opts.ksampler_output_image
		 * @param opts.dependencies
		 * @param opts.X
		 * @param opts.Y}
        */
        constructor(opts:{
            'grid_spacing'?: INT,'XY_flip': 'False'|'True'| $dyn,'Y_label_orientation': 'Horizontal'|'Vertical'| $dyn,'cache_models': 'True'|'False'| $dyn,'ksampler_output_image': 'Images'|'Plot'| $dyn,'dependencies'?: DEPENDENCIES,'X'?: XY,'Y'?: XY
        }){
            super(ctx);

            super.$$link("grid_spacing", opts['grid_spacing']??tmp["XY Plot"].defaults['grid_spacing'])
super.$$link("XY_flip", opts['XY_flip'])
super.$$link("Y_label_orientation", opts['Y_label_orientation'])
super.$$link("cache_models", opts['cache_models'])
super.$$link("ksampler_output_image", opts['ksampler_output_image'])
super.$$link("dependencies", opts['dependencies'])
super.$$link("X", opts['X'])
super.$$link("Y", opts['Y'])
}

        static defaults = {
    'grid_spacing':  0
}
        protected override $$type(){
            return "XY Plot"
        }
},

    /**
     * XY Input: Seeds++ Batch from Efficiency Nodes/XY Inputs
     * @desc 
    */
    "XY Input: Seeds++ Batch" : class extends Node{
        //Setters
        //set 'batch_count'(value : INT)  { super.$$link(0, value) } 

        //Getters
        get 'X or Y'() : XY { return [this.$uid.toString(), 0]  as unknown as XY; }

        /**
          * Constructor
		 * @param opts.batch_count default: 3}
        */
        constructor(opts:{
            'batch_count'?: INT
        }){
            super(ctx);

            super.$$link("batch_count", opts['batch_count']??tmp["XY Input: Seeds++ Batch"].defaults['batch_count'])
}

        static defaults = {
    'batch_count':  3
}
        protected override $$type(){
            return "XY Input: Seeds++ Batch"
        }
},

    /**
     * XY Input: Add/Return Noise from Efficiency Nodes/XY Inputs
     * @desc 
    */
    "XY Input: Add/Return Noise" : class extends Node{
        //Setters
        //set 'XY_type'(value : 'add_noise'|'return_with_leftover_noise'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'X or Y'() : XY { return [this.$uid.toString(), 0]  as unknown as XY; }

        /**
          * Constructor
		 * @param opts.XY_type}
        */
        constructor(opts:{
            'XY_type': 'add_noise'|'return_with_leftover_noise'| $dyn
        }){
            super(ctx);

            super.$$link("XY_type", opts['XY_type'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "XY Input: Add/Return Noise"
        }
},

    /**
     * XY Input: Steps from Efficiency Nodes/XY Inputs
     * @desc 
    */
    "XY Input: Steps" : class extends Node{
        //Setters
        //set 'target_parameter'(value : 'steps'|'start_at_step'|'end_at_step'|'refine_at_step'| $dyn)  { super.$$link(0, value) } 
//set 'batch_count'(value : INT)  { super.$$link(1, value) } 
//set 'first_step'(value : INT)  { super.$$link(2, value) } 
//set 'last_step'(value : INT)  { super.$$link(3, value) } 
//set 'first_start_step'(value : INT)  { super.$$link(4, value) } 
//set 'last_start_step'(value : INT)  { super.$$link(5, value) } 
//set 'first_end_step'(value : INT)  { super.$$link(6, value) } 
//set 'last_end_step'(value : INT)  { super.$$link(7, value) } 
//set 'first_refine_step'(value : INT)  { super.$$link(8, value) } 
//set 'last_refine_step'(value : INT)  { super.$$link(9, value) } 

        //Getters
        get 'X or Y'() : XY { return [this.$uid.toString(), 0]  as unknown as XY; }

        /**
          * Constructor
		 * @param opts.target_parameter
		 * @param opts.batch_count default: 3
		 * @param opts.first_step default: 10 max: 10000 min: 1
		 * @param opts.last_step default: 20 max: 10000 min: 1
		 * @param opts.first_start_step
		 * @param opts.last_start_step default: 10
		 * @param opts.first_end_step default: 10
		 * @param opts.last_end_step default: 20
		 * @param opts.first_refine_step default: 10
		 * @param opts.last_refine_step default: 20}
        */
        constructor(opts:{
            'target_parameter': 'steps'|'start_at_step'|'end_at_step'|'refine_at_step'| $dyn,'batch_count'?: INT,'first_step'?: INT,'last_step'?: INT,'first_start_step'?: INT,'last_start_step'?: INT,'first_end_step'?: INT,'last_end_step'?: INT,'first_refine_step'?: INT,'last_refine_step'?: INT
        }){
            super(ctx);

            super.$$link("target_parameter", opts['target_parameter'])
super.$$link("batch_count", opts['batch_count']??tmp["XY Input: Steps"].defaults['batch_count'])
super.$$link("first_step", opts['first_step']??tmp["XY Input: Steps"].defaults['first_step'])
super.$$link("last_step", opts['last_step']??tmp["XY Input: Steps"].defaults['last_step'])
super.$$link("first_start_step", opts['first_start_step']??tmp["XY Input: Steps"].defaults['first_start_step'])
super.$$link("last_start_step", opts['last_start_step']??tmp["XY Input: Steps"].defaults['last_start_step'])
super.$$link("first_end_step", opts['first_end_step']??tmp["XY Input: Steps"].defaults['first_end_step'])
super.$$link("last_end_step", opts['last_end_step']??tmp["XY Input: Steps"].defaults['last_end_step'])
super.$$link("first_refine_step", opts['first_refine_step']??tmp["XY Input: Steps"].defaults['first_refine_step'])
super.$$link("last_refine_step", opts['last_refine_step']??tmp["XY Input: Steps"].defaults['last_refine_step'])
}

        static defaults = {
    'batch_count':  3,
'first_step':  10,
'last_step':  20,
'first_start_step':  0,
'last_start_step':  10,
'first_end_step':  10,
'last_end_step':  20,
'first_refine_step':  10,
'last_refine_step':  20
}
        protected override $$type(){
            return "XY Input: Steps"
        }
},

    /**
     * XY Input: CFG Scale from Efficiency Nodes/XY Inputs
     * @desc 
    */
    "XY Input: CFG Scale" : class extends Node{
        //Setters
        //set 'batch_count'(value : INT)  { super.$$link(0, value) } 
//set 'first_cfg'(value : FLOAT)  { super.$$link(1, value) } 
//set 'last_cfg'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'X or Y'() : XY { return [this.$uid.toString(), 0]  as unknown as XY; }

        /**
          * Constructor
		 * @param opts.batch_count default: 3
		 * @param opts.first_cfg default: 7
		 * @param opts.last_cfg default: 9}
        */
        constructor(opts:{
            'batch_count'?: INT,'first_cfg'?: FLOAT,'last_cfg'?: FLOAT
        }){
            super(ctx);

            super.$$link("batch_count", opts['batch_count']??tmp["XY Input: CFG Scale"].defaults['batch_count'])
super.$$link("first_cfg", opts['first_cfg']??tmp["XY Input: CFG Scale"].defaults['first_cfg'])
super.$$link("last_cfg", opts['last_cfg']??tmp["XY Input: CFG Scale"].defaults['last_cfg'])
}

        static defaults = {
    'batch_count':  3,
'first_cfg':  7,
'last_cfg':  9
}
        protected override $$type(){
            return "XY Input: CFG Scale"
        }
},

    /**
     * XY Input: Sampler/Scheduler from Efficiency Nodes/XY Inputs
     * @desc 
    */
    "XY Input: Sampler/Scheduler" : class extends Node{
        //Setters
        //set 'target_parameter'(value : 'sampler'|'scheduler'|'sampler & scheduler'| $dyn)  { super.$$link(0, value) } 
//set 'input_count'(value : INT)  { super.$$link(1, value) } 
//set 'sampler_1'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(2, value) } 
//set 'scheduler_1'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(3, value) } 
//set 'sampler_2'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(4, value) } 
//set 'scheduler_2'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(5, value) } 
//set 'sampler_3'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(6, value) } 
//set 'scheduler_3'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(7, value) } 
//set 'sampler_4'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(8, value) } 
//set 'scheduler_4'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(9, value) } 
//set 'sampler_5'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(10, value) } 
//set 'scheduler_5'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(11, value) } 
//set 'sampler_6'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(12, value) } 
//set 'scheduler_6'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(13, value) } 
//set 'sampler_7'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(14, value) } 
//set 'scheduler_7'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(15, value) } 
//set 'sampler_8'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(16, value) } 
//set 'scheduler_8'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(17, value) } 
//set 'sampler_9'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(18, value) } 
//set 'scheduler_9'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(19, value) } 
//set 'sampler_10'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(20, value) } 
//set 'scheduler_10'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(21, value) } 
//set 'sampler_11'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(22, value) } 
//set 'scheduler_11'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(23, value) } 
//set 'sampler_12'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(24, value) } 
//set 'scheduler_12'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(25, value) } 
//set 'sampler_13'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(26, value) } 
//set 'scheduler_13'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(27, value) } 
//set 'sampler_14'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(28, value) } 
//set 'scheduler_14'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(29, value) } 
//set 'sampler_15'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(30, value) } 
//set 'scheduler_15'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(31, value) } 
//set 'sampler_16'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(32, value) } 
//set 'scheduler_16'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(33, value) } 
//set 'sampler_17'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(34, value) } 
//set 'scheduler_17'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(35, value) } 
//set 'sampler_18'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(36, value) } 
//set 'scheduler_18'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(37, value) } 
//set 'sampler_19'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(38, value) } 
//set 'scheduler_19'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(39, value) } 
//set 'sampler_20'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(40, value) } 
//set 'scheduler_20'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(41, value) } 
//set 'sampler_21'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(42, value) } 
//set 'scheduler_21'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(43, value) } 
//set 'sampler_22'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(44, value) } 
//set 'scheduler_22'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(45, value) } 
//set 'sampler_23'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(46, value) } 
//set 'scheduler_23'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(47, value) } 
//set 'sampler_24'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(48, value) } 
//set 'scheduler_24'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(49, value) } 
//set 'sampler_25'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(50, value) } 
//set 'scheduler_25'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(51, value) } 
//set 'sampler_26'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(52, value) } 
//set 'scheduler_26'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(53, value) } 
//set 'sampler_27'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(54, value) } 
//set 'scheduler_27'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(55, value) } 
//set 'sampler_28'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(56, value) } 
//set 'scheduler_28'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(57, value) } 
//set 'sampler_29'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(58, value) } 
//set 'scheduler_29'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(59, value) } 
//set 'sampler_30'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(60, value) } 
//set 'scheduler_30'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(61, value) } 
//set 'sampler_31'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(62, value) } 
//set 'scheduler_31'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(63, value) } 
//set 'sampler_32'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(64, value) } 
//set 'scheduler_32'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(65, value) } 
//set 'sampler_33'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(66, value) } 
//set 'scheduler_33'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(67, value) } 
//set 'sampler_34'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(68, value) } 
//set 'scheduler_34'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(69, value) } 
//set 'sampler_35'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(70, value) } 
//set 'scheduler_35'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(71, value) } 
//set 'sampler_36'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(72, value) } 
//set 'scheduler_36'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(73, value) } 
//set 'sampler_37'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(74, value) } 
//set 'scheduler_37'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(75, value) } 
//set 'sampler_38'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(76, value) } 
//set 'scheduler_38'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(77, value) } 
//set 'sampler_39'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(78, value) } 
//set 'scheduler_39'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(79, value) } 
//set 'sampler_40'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(80, value) } 
//set 'scheduler_40'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(81, value) } 
//set 'sampler_41'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(82, value) } 
//set 'scheduler_41'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(83, value) } 
//set 'sampler_42'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(84, value) } 
//set 'scheduler_42'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(85, value) } 
//set 'sampler_43'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(86, value) } 
//set 'scheduler_43'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(87, value) } 
//set 'sampler_44'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(88, value) } 
//set 'scheduler_44'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(89, value) } 
//set 'sampler_45'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(90, value) } 
//set 'scheduler_45'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(91, value) } 
//set 'sampler_46'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(92, value) } 
//set 'scheduler_46'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(93, value) } 
//set 'sampler_47'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(94, value) } 
//set 'scheduler_47'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(95, value) } 
//set 'sampler_48'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(96, value) } 
//set 'scheduler_48'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(97, value) } 
//set 'sampler_49'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(98, value) } 
//set 'scheduler_49'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(99, value) } 
//set 'sampler_50'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(100, value) } 
//set 'scheduler_50'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn)  { super.$$link(101, value) } 

        //Getters
        get 'X or Y'() : XY { return [this.$uid.toString(), 0]  as unknown as XY; }

        /**
          * Constructor
		 * @param opts.target_parameter
		 * @param opts.input_count default: 3 step: 1
		 * @param opts.sampler_1
		 * @param opts.scheduler_1
		 * @param opts.sampler_2
		 * @param opts.scheduler_2
		 * @param opts.sampler_3
		 * @param opts.scheduler_3
		 * @param opts.sampler_4
		 * @param opts.scheduler_4
		 * @param opts.sampler_5
		 * @param opts.scheduler_5
		 * @param opts.sampler_6
		 * @param opts.scheduler_6
		 * @param opts.sampler_7
		 * @param opts.scheduler_7
		 * @param opts.sampler_8
		 * @param opts.scheduler_8
		 * @param opts.sampler_9
		 * @param opts.scheduler_9
		 * @param opts.sampler_10
		 * @param opts.scheduler_10
		 * @param opts.sampler_11
		 * @param opts.scheduler_11
		 * @param opts.sampler_12
		 * @param opts.scheduler_12
		 * @param opts.sampler_13
		 * @param opts.scheduler_13
		 * @param opts.sampler_14
		 * @param opts.scheduler_14
		 * @param opts.sampler_15
		 * @param opts.scheduler_15
		 * @param opts.sampler_16
		 * @param opts.scheduler_16
		 * @param opts.sampler_17
		 * @param opts.scheduler_17
		 * @param opts.sampler_18
		 * @param opts.scheduler_18
		 * @param opts.sampler_19
		 * @param opts.scheduler_19
		 * @param opts.sampler_20
		 * @param opts.scheduler_20
		 * @param opts.sampler_21
		 * @param opts.scheduler_21
		 * @param opts.sampler_22
		 * @param opts.scheduler_22
		 * @param opts.sampler_23
		 * @param opts.scheduler_23
		 * @param opts.sampler_24
		 * @param opts.scheduler_24
		 * @param opts.sampler_25
		 * @param opts.scheduler_25
		 * @param opts.sampler_26
		 * @param opts.scheduler_26
		 * @param opts.sampler_27
		 * @param opts.scheduler_27
		 * @param opts.sampler_28
		 * @param opts.scheduler_28
		 * @param opts.sampler_29
		 * @param opts.scheduler_29
		 * @param opts.sampler_30
		 * @param opts.scheduler_30
		 * @param opts.sampler_31
		 * @param opts.scheduler_31
		 * @param opts.sampler_32
		 * @param opts.scheduler_32
		 * @param opts.sampler_33
		 * @param opts.scheduler_33
		 * @param opts.sampler_34
		 * @param opts.scheduler_34
		 * @param opts.sampler_35
		 * @param opts.scheduler_35
		 * @param opts.sampler_36
		 * @param opts.scheduler_36
		 * @param opts.sampler_37
		 * @param opts.scheduler_37
		 * @param opts.sampler_38
		 * @param opts.scheduler_38
		 * @param opts.sampler_39
		 * @param opts.scheduler_39
		 * @param opts.sampler_40
		 * @param opts.scheduler_40
		 * @param opts.sampler_41
		 * @param opts.scheduler_41
		 * @param opts.sampler_42
		 * @param opts.scheduler_42
		 * @param opts.sampler_43
		 * @param opts.scheduler_43
		 * @param opts.sampler_44
		 * @param opts.scheduler_44
		 * @param opts.sampler_45
		 * @param opts.scheduler_45
		 * @param opts.sampler_46
		 * @param opts.scheduler_46
		 * @param opts.sampler_47
		 * @param opts.scheduler_47
		 * @param opts.sampler_48
		 * @param opts.scheduler_48
		 * @param opts.sampler_49
		 * @param opts.scheduler_49
		 * @param opts.sampler_50
		 * @param opts.scheduler_50}
        */
        constructor(opts:{
            'target_parameter': 'sampler'|'scheduler'|'sampler & scheduler'| $dyn,'input_count'?: INT,'sampler_1': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_1': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_2': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_2': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_3': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_3': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_4': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_4': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_5': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_5': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_6': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_6': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_7': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_7': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_8': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_8': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_9': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_9': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_10': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_10': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_11': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_11': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_12': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_12': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_13': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_13': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_14': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_14': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_15': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_15': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_16': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_16': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_17': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_17': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_18': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_18': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_19': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_19': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_20': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_20': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_21': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_21': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_22': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_22': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_23': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_23': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_24': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_24': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_25': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_25': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_26': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_26': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_27': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_27': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_28': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_28': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_29': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_29': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_30': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_30': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_31': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_31': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_32': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_32': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_33': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_33': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_34': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_34': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_35': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_35': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_36': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_36': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_37': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_37': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_38': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_38': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_39': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_39': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_40': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_40': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_41': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_41': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_42': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_42': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_43': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_43': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_44': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_44': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_45': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_45': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_46': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_46': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_47': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_47': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_48': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_48': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_49': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_49': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn,'sampler_50': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler_50': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SD1'|'AYS SDXL'|'AYS SVD'| $dyn
        }){
            super(ctx);

            super.$$link("target_parameter", opts['target_parameter'])
super.$$link("input_count", opts['input_count']??tmp["XY Input: Sampler/Scheduler"].defaults['input_count'])
super.$$link("sampler_1", opts['sampler_1'])
super.$$link("scheduler_1", opts['scheduler_1'])
super.$$link("sampler_2", opts['sampler_2'])
super.$$link("scheduler_2", opts['scheduler_2'])
super.$$link("sampler_3", opts['sampler_3'])
super.$$link("scheduler_3", opts['scheduler_3'])
super.$$link("sampler_4", opts['sampler_4'])
super.$$link("scheduler_4", opts['scheduler_4'])
super.$$link("sampler_5", opts['sampler_5'])
super.$$link("scheduler_5", opts['scheduler_5'])
super.$$link("sampler_6", opts['sampler_6'])
super.$$link("scheduler_6", opts['scheduler_6'])
super.$$link("sampler_7", opts['sampler_7'])
super.$$link("scheduler_7", opts['scheduler_7'])
super.$$link("sampler_8", opts['sampler_8'])
super.$$link("scheduler_8", opts['scheduler_8'])
super.$$link("sampler_9", opts['sampler_9'])
super.$$link("scheduler_9", opts['scheduler_9'])
super.$$link("sampler_10", opts['sampler_10'])
super.$$link("scheduler_10", opts['scheduler_10'])
super.$$link("sampler_11", opts['sampler_11'])
super.$$link("scheduler_11", opts['scheduler_11'])
super.$$link("sampler_12", opts['sampler_12'])
super.$$link("scheduler_12", opts['scheduler_12'])
super.$$link("sampler_13", opts['sampler_13'])
super.$$link("scheduler_13", opts['scheduler_13'])
super.$$link("sampler_14", opts['sampler_14'])
super.$$link("scheduler_14", opts['scheduler_14'])
super.$$link("sampler_15", opts['sampler_15'])
super.$$link("scheduler_15", opts['scheduler_15'])
super.$$link("sampler_16", opts['sampler_16'])
super.$$link("scheduler_16", opts['scheduler_16'])
super.$$link("sampler_17", opts['sampler_17'])
super.$$link("scheduler_17", opts['scheduler_17'])
super.$$link("sampler_18", opts['sampler_18'])
super.$$link("scheduler_18", opts['scheduler_18'])
super.$$link("sampler_19", opts['sampler_19'])
super.$$link("scheduler_19", opts['scheduler_19'])
super.$$link("sampler_20", opts['sampler_20'])
super.$$link("scheduler_20", opts['scheduler_20'])
super.$$link("sampler_21", opts['sampler_21'])
super.$$link("scheduler_21", opts['scheduler_21'])
super.$$link("sampler_22", opts['sampler_22'])
super.$$link("scheduler_22", opts['scheduler_22'])
super.$$link("sampler_23", opts['sampler_23'])
super.$$link("scheduler_23", opts['scheduler_23'])
super.$$link("sampler_24", opts['sampler_24'])
super.$$link("scheduler_24", opts['scheduler_24'])
super.$$link("sampler_25", opts['sampler_25'])
super.$$link("scheduler_25", opts['scheduler_25'])
super.$$link("sampler_26", opts['sampler_26'])
super.$$link("scheduler_26", opts['scheduler_26'])
super.$$link("sampler_27", opts['sampler_27'])
super.$$link("scheduler_27", opts['scheduler_27'])
super.$$link("sampler_28", opts['sampler_28'])
super.$$link("scheduler_28", opts['scheduler_28'])
super.$$link("sampler_29", opts['sampler_29'])
super.$$link("scheduler_29", opts['scheduler_29'])
super.$$link("sampler_30", opts['sampler_30'])
super.$$link("scheduler_30", opts['scheduler_30'])
super.$$link("sampler_31", opts['sampler_31'])
super.$$link("scheduler_31", opts['scheduler_31'])
super.$$link("sampler_32", opts['sampler_32'])
super.$$link("scheduler_32", opts['scheduler_32'])
super.$$link("sampler_33", opts['sampler_33'])
super.$$link("scheduler_33", opts['scheduler_33'])
super.$$link("sampler_34", opts['sampler_34'])
super.$$link("scheduler_34", opts['scheduler_34'])
super.$$link("sampler_35", opts['sampler_35'])
super.$$link("scheduler_35", opts['scheduler_35'])
super.$$link("sampler_36", opts['sampler_36'])
super.$$link("scheduler_36", opts['scheduler_36'])
super.$$link("sampler_37", opts['sampler_37'])
super.$$link("scheduler_37", opts['scheduler_37'])
super.$$link("sampler_38", opts['sampler_38'])
super.$$link("scheduler_38", opts['scheduler_38'])
super.$$link("sampler_39", opts['sampler_39'])
super.$$link("scheduler_39", opts['scheduler_39'])
super.$$link("sampler_40", opts['sampler_40'])
super.$$link("scheduler_40", opts['scheduler_40'])
super.$$link("sampler_41", opts['sampler_41'])
super.$$link("scheduler_41", opts['scheduler_41'])
super.$$link("sampler_42", opts['sampler_42'])
super.$$link("scheduler_42", opts['scheduler_42'])
super.$$link("sampler_43", opts['sampler_43'])
super.$$link("scheduler_43", opts['scheduler_43'])
super.$$link("sampler_44", opts['sampler_44'])
super.$$link("scheduler_44", opts['scheduler_44'])
super.$$link("sampler_45", opts['sampler_45'])
super.$$link("scheduler_45", opts['scheduler_45'])
super.$$link("sampler_46", opts['sampler_46'])
super.$$link("scheduler_46", opts['scheduler_46'])
super.$$link("sampler_47", opts['sampler_47'])
super.$$link("scheduler_47", opts['scheduler_47'])
super.$$link("sampler_48", opts['sampler_48'])
super.$$link("scheduler_48", opts['scheduler_48'])
super.$$link("sampler_49", opts['sampler_49'])
super.$$link("scheduler_49", opts['scheduler_49'])
super.$$link("sampler_50", opts['sampler_50'])
super.$$link("scheduler_50", opts['scheduler_50'])
}

        static defaults = {
    'input_count':  3
}
        protected override $$type(){
            return "XY Input: Sampler/Scheduler"
        }
},

    /**
     * XY Input: Denoise from Efficiency Nodes/XY Inputs
     * @desc 
    */
    "XY Input: Denoise" : class extends Node{
        //Setters
        //set 'batch_count'(value : INT)  { super.$$link(0, value) } 
//set 'first_denoise'(value : FLOAT)  { super.$$link(1, value) } 
//set 'last_denoise'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'X or Y'() : XY { return [this.$uid.toString(), 0]  as unknown as XY; }

        /**
          * Constructor
		 * @param opts.batch_count default: 3
		 * @param opts.first_denoise step: 0.01
		 * @param opts.last_denoise default: 1 step: 0.01}
        */
        constructor(opts:{
            'batch_count'?: INT,'first_denoise'?: FLOAT,'last_denoise'?: FLOAT
        }){
            super(ctx);

            super.$$link("batch_count", opts['batch_count']??tmp["XY Input: Denoise"].defaults['batch_count'])
super.$$link("first_denoise", opts['first_denoise']??tmp["XY Input: Denoise"].defaults['first_denoise'])
super.$$link("last_denoise", opts['last_denoise']??tmp["XY Input: Denoise"].defaults['last_denoise'])
}

        static defaults = {
    'batch_count':  3,
'first_denoise':  0,
'last_denoise':  1
}
        protected override $$type(){
            return "XY Input: Denoise"
        }
},

    /**
     * XY Input: VAE from Efficiency Nodes/XY Inputs
     * @desc 
    */
    "XY Input: VAE" : class extends Node{
        //Setters
        //set 'input_mode'(value : 'VAE Names'|'VAE Batch'| $dyn)  { super.$$link(0, value) } 
//set 'batch_path'(value : STRING)  { super.$$link(1, value) } 
//set 'subdirectories'(value : BOOLEAN)  { super.$$link(2, value) } 
//set 'batch_sort'(value : 'ascending'|'descending'| $dyn)  { super.$$link(3, value) } 
//set 'batch_max'(value : INT)  { super.$$link(4, value) } 
//set 'vae_count'(value : INT)  { super.$$link(5, value) } 
//set 'vae_name_1'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(6, value) } 
//set 'vae_name_2'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(7, value) } 
//set 'vae_name_3'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(8, value) } 
//set 'vae_name_4'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(9, value) } 
//set 'vae_name_5'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(10, value) } 
//set 'vae_name_6'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(11, value) } 
//set 'vae_name_7'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(12, value) } 
//set 'vae_name_8'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(13, value) } 
//set 'vae_name_9'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(14, value) } 
//set 'vae_name_10'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(15, value) } 
//set 'vae_name_11'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(16, value) } 
//set 'vae_name_12'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(17, value) } 
//set 'vae_name_13'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(18, value) } 
//set 'vae_name_14'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(19, value) } 
//set 'vae_name_15'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(20, value) } 
//set 'vae_name_16'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(21, value) } 
//set 'vae_name_17'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(22, value) } 
//set 'vae_name_18'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(23, value) } 
//set 'vae_name_19'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(24, value) } 
//set 'vae_name_20'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(25, value) } 
//set 'vae_name_21'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(26, value) } 
//set 'vae_name_22'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(27, value) } 
//set 'vae_name_23'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(28, value) } 
//set 'vae_name_24'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(29, value) } 
//set 'vae_name_25'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(30, value) } 
//set 'vae_name_26'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(31, value) } 
//set 'vae_name_27'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(32, value) } 
//set 'vae_name_28'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(33, value) } 
//set 'vae_name_29'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(34, value) } 
//set 'vae_name_30'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(35, value) } 
//set 'vae_name_31'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(36, value) } 
//set 'vae_name_32'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(37, value) } 
//set 'vae_name_33'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(38, value) } 
//set 'vae_name_34'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(39, value) } 
//set 'vae_name_35'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(40, value) } 
//set 'vae_name_36'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(41, value) } 
//set 'vae_name_37'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(42, value) } 
//set 'vae_name_38'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(43, value) } 
//set 'vae_name_39'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(44, value) } 
//set 'vae_name_40'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(45, value) } 
//set 'vae_name_41'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(46, value) } 
//set 'vae_name_42'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(47, value) } 
//set 'vae_name_43'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(48, value) } 
//set 'vae_name_44'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(49, value) } 
//set 'vae_name_45'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(50, value) } 
//set 'vae_name_46'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(51, value) } 
//set 'vae_name_47'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(52, value) } 
//set 'vae_name_48'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(53, value) } 
//set 'vae_name_49'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(54, value) } 
//set 'vae_name_50'(value : 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(55, value) } 

        //Getters
        get 'X or Y'() : XY { return [this.$uid.toString(), 0]  as unknown as XY; }

        /**
          * Constructor
		 * @param opts.input_mode
		 * @param opts.batch_path default: "/example_folder"
		 * @param opts.subdirectories
		 * @param opts.batch_sort
		 * @param opts.batch_max default: -1 max: 50 min: -1 step: 1
		 * @param opts.vae_count default: 3 step: 1
		 * @param opts.vae_name_1
		 * @param opts.vae_name_2
		 * @param opts.vae_name_3
		 * @param opts.vae_name_4
		 * @param opts.vae_name_5
		 * @param opts.vae_name_6
		 * @param opts.vae_name_7
		 * @param opts.vae_name_8
		 * @param opts.vae_name_9
		 * @param opts.vae_name_10
		 * @param opts.vae_name_11
		 * @param opts.vae_name_12
		 * @param opts.vae_name_13
		 * @param opts.vae_name_14
		 * @param opts.vae_name_15
		 * @param opts.vae_name_16
		 * @param opts.vae_name_17
		 * @param opts.vae_name_18
		 * @param opts.vae_name_19
		 * @param opts.vae_name_20
		 * @param opts.vae_name_21
		 * @param opts.vae_name_22
		 * @param opts.vae_name_23
		 * @param opts.vae_name_24
		 * @param opts.vae_name_25
		 * @param opts.vae_name_26
		 * @param opts.vae_name_27
		 * @param opts.vae_name_28
		 * @param opts.vae_name_29
		 * @param opts.vae_name_30
		 * @param opts.vae_name_31
		 * @param opts.vae_name_32
		 * @param opts.vae_name_33
		 * @param opts.vae_name_34
		 * @param opts.vae_name_35
		 * @param opts.vae_name_36
		 * @param opts.vae_name_37
		 * @param opts.vae_name_38
		 * @param opts.vae_name_39
		 * @param opts.vae_name_40
		 * @param opts.vae_name_41
		 * @param opts.vae_name_42
		 * @param opts.vae_name_43
		 * @param opts.vae_name_44
		 * @param opts.vae_name_45
		 * @param opts.vae_name_46
		 * @param opts.vae_name_47
		 * @param opts.vae_name_48
		 * @param opts.vae_name_49
		 * @param opts.vae_name_50}
        */
        constructor(opts:{
            'input_mode': 'VAE Names'|'VAE Batch'| $dyn,'batch_path'?: STRING,'subdirectories'?: BOOLEAN,'batch_sort': 'ascending'|'descending'| $dyn,'batch_max'?: INT,'vae_count'?: INT,'vae_name_1': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_2': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_3': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_4': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_5': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_6': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_7': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_8': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_9': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_10': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_11': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_12': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_13': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_14': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_15': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_16': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_17': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_18': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_19': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_20': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_21': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_22': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_23': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_24': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_25': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_26': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_27': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_28': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_29': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_30': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_31': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_32': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_33': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_34': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_35': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_36': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_37': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_38': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_39': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_40': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_41': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_42': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_43': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_44': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_45': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_46': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_47': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_48': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_49': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'vae_name_50': 'None'|'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn
        }){
            super(ctx);

            super.$$link("input_mode", opts['input_mode'])
super.$$link("batch_path", opts['batch_path']??tmp["XY Input: VAE"].defaults['batch_path'])
super.$$link("subdirectories", opts['subdirectories']??tmp["XY Input: VAE"].defaults['subdirectories'])
super.$$link("batch_sort", opts['batch_sort'])
super.$$link("batch_max", opts['batch_max']??tmp["XY Input: VAE"].defaults['batch_max'])
super.$$link("vae_count", opts['vae_count']??tmp["XY Input: VAE"].defaults['vae_count'])
super.$$link("vae_name_1", opts['vae_name_1'])
super.$$link("vae_name_2", opts['vae_name_2'])
super.$$link("vae_name_3", opts['vae_name_3'])
super.$$link("vae_name_4", opts['vae_name_4'])
super.$$link("vae_name_5", opts['vae_name_5'])
super.$$link("vae_name_6", opts['vae_name_6'])
super.$$link("vae_name_7", opts['vae_name_7'])
super.$$link("vae_name_8", opts['vae_name_8'])
super.$$link("vae_name_9", opts['vae_name_9'])
super.$$link("vae_name_10", opts['vae_name_10'])
super.$$link("vae_name_11", opts['vae_name_11'])
super.$$link("vae_name_12", opts['vae_name_12'])
super.$$link("vae_name_13", opts['vae_name_13'])
super.$$link("vae_name_14", opts['vae_name_14'])
super.$$link("vae_name_15", opts['vae_name_15'])
super.$$link("vae_name_16", opts['vae_name_16'])
super.$$link("vae_name_17", opts['vae_name_17'])
super.$$link("vae_name_18", opts['vae_name_18'])
super.$$link("vae_name_19", opts['vae_name_19'])
super.$$link("vae_name_20", opts['vae_name_20'])
super.$$link("vae_name_21", opts['vae_name_21'])
super.$$link("vae_name_22", opts['vae_name_22'])
super.$$link("vae_name_23", opts['vae_name_23'])
super.$$link("vae_name_24", opts['vae_name_24'])
super.$$link("vae_name_25", opts['vae_name_25'])
super.$$link("vae_name_26", opts['vae_name_26'])
super.$$link("vae_name_27", opts['vae_name_27'])
super.$$link("vae_name_28", opts['vae_name_28'])
super.$$link("vae_name_29", opts['vae_name_29'])
super.$$link("vae_name_30", opts['vae_name_30'])
super.$$link("vae_name_31", opts['vae_name_31'])
super.$$link("vae_name_32", opts['vae_name_32'])
super.$$link("vae_name_33", opts['vae_name_33'])
super.$$link("vae_name_34", opts['vae_name_34'])
super.$$link("vae_name_35", opts['vae_name_35'])
super.$$link("vae_name_36", opts['vae_name_36'])
super.$$link("vae_name_37", opts['vae_name_37'])
super.$$link("vae_name_38", opts['vae_name_38'])
super.$$link("vae_name_39", opts['vae_name_39'])
super.$$link("vae_name_40", opts['vae_name_40'])
super.$$link("vae_name_41", opts['vae_name_41'])
super.$$link("vae_name_42", opts['vae_name_42'])
super.$$link("vae_name_43", opts['vae_name_43'])
super.$$link("vae_name_44", opts['vae_name_44'])
super.$$link("vae_name_45", opts['vae_name_45'])
super.$$link("vae_name_46", opts['vae_name_46'])
super.$$link("vae_name_47", opts['vae_name_47'])
super.$$link("vae_name_48", opts['vae_name_48'])
super.$$link("vae_name_49", opts['vae_name_49'])
super.$$link("vae_name_50", opts['vae_name_50'])
}

        static defaults = {
    'batch_path':  "/example_folder",
'subdirectories':  false,
'batch_max':  -1,
'vae_count':  3
}
        protected override $$type(){
            return "XY Input: VAE"
        }
},

    /**
     * XY Input: Prompt S/R from Efficiency Nodes/XY Inputs
     * @desc 
    */
    "XY Input: Prompt S/R" : class extends Node{
        //Setters
        //set 'target_prompt'(value : 'positive'|'negative'| $dyn)  { super.$$link(0, value) } 
//set 'search_txt'(value : STRING)  { super.$$link(1, value) } 
//set 'replace_count'(value : INT)  { super.$$link(2, value) } 
//set 'replace_1'(value : STRING)  { super.$$link(3, value) } 
//set 'replace_2'(value : STRING)  { super.$$link(4, value) } 
//set 'replace_3'(value : STRING)  { super.$$link(5, value) } 
//set 'replace_4'(value : STRING)  { super.$$link(6, value) } 
//set 'replace_5'(value : STRING)  { super.$$link(7, value) } 
//set 'replace_6'(value : STRING)  { super.$$link(8, value) } 
//set 'replace_7'(value : STRING)  { super.$$link(9, value) } 
//set 'replace_8'(value : STRING)  { super.$$link(10, value) } 
//set 'replace_9'(value : STRING)  { super.$$link(11, value) } 
//set 'replace_10'(value : STRING)  { super.$$link(12, value) } 
//set 'replace_11'(value : STRING)  { super.$$link(13, value) } 
//set 'replace_12'(value : STRING)  { super.$$link(14, value) } 
//set 'replace_13'(value : STRING)  { super.$$link(15, value) } 
//set 'replace_14'(value : STRING)  { super.$$link(16, value) } 
//set 'replace_15'(value : STRING)  { super.$$link(17, value) } 
//set 'replace_16'(value : STRING)  { super.$$link(18, value) } 
//set 'replace_17'(value : STRING)  { super.$$link(19, value) } 
//set 'replace_18'(value : STRING)  { super.$$link(20, value) } 
//set 'replace_19'(value : STRING)  { super.$$link(21, value) } 
//set 'replace_20'(value : STRING)  { super.$$link(22, value) } 
//set 'replace_21'(value : STRING)  { super.$$link(23, value) } 
//set 'replace_22'(value : STRING)  { super.$$link(24, value) } 
//set 'replace_23'(value : STRING)  { super.$$link(25, value) } 
//set 'replace_24'(value : STRING)  { super.$$link(26, value) } 
//set 'replace_25'(value : STRING)  { super.$$link(27, value) } 
//set 'replace_26'(value : STRING)  { super.$$link(28, value) } 
//set 'replace_27'(value : STRING)  { super.$$link(29, value) } 
//set 'replace_28'(value : STRING)  { super.$$link(30, value) } 
//set 'replace_29'(value : STRING)  { super.$$link(31, value) } 
//set 'replace_30'(value : STRING)  { super.$$link(32, value) } 
//set 'replace_31'(value : STRING)  { super.$$link(33, value) } 
//set 'replace_32'(value : STRING)  { super.$$link(34, value) } 
//set 'replace_33'(value : STRING)  { super.$$link(35, value) } 
//set 'replace_34'(value : STRING)  { super.$$link(36, value) } 
//set 'replace_35'(value : STRING)  { super.$$link(37, value) } 
//set 'replace_36'(value : STRING)  { super.$$link(38, value) } 
//set 'replace_37'(value : STRING)  { super.$$link(39, value) } 
//set 'replace_38'(value : STRING)  { super.$$link(40, value) } 
//set 'replace_39'(value : STRING)  { super.$$link(41, value) } 
//set 'replace_40'(value : STRING)  { super.$$link(42, value) } 
//set 'replace_41'(value : STRING)  { super.$$link(43, value) } 
//set 'replace_42'(value : STRING)  { super.$$link(44, value) } 
//set 'replace_43'(value : STRING)  { super.$$link(45, value) } 
//set 'replace_44'(value : STRING)  { super.$$link(46, value) } 
//set 'replace_45'(value : STRING)  { super.$$link(47, value) } 
//set 'replace_46'(value : STRING)  { super.$$link(48, value) } 
//set 'replace_47'(value : STRING)  { super.$$link(49, value) } 
//set 'replace_48'(value : STRING)  { super.$$link(50, value) } 
//set 'replace_49'(value : STRING)  { super.$$link(51, value) } 

        //Getters
        get 'X or Y'() : XY { return [this.$uid.toString(), 0]  as unknown as XY; }

        /**
          * Constructor
		 * @param opts.target_prompt
		 * @param opts.search_txt
		 * @param opts.replace_count default: 3
		 * @param opts.replace_1
		 * @param opts.replace_2
		 * @param opts.replace_3
		 * @param opts.replace_4
		 * @param opts.replace_5
		 * @param opts.replace_6
		 * @param opts.replace_7
		 * @param opts.replace_8
		 * @param opts.replace_9
		 * @param opts.replace_10
		 * @param opts.replace_11
		 * @param opts.replace_12
		 * @param opts.replace_13
		 * @param opts.replace_14
		 * @param opts.replace_15
		 * @param opts.replace_16
		 * @param opts.replace_17
		 * @param opts.replace_18
		 * @param opts.replace_19
		 * @param opts.replace_20
		 * @param opts.replace_21
		 * @param opts.replace_22
		 * @param opts.replace_23
		 * @param opts.replace_24
		 * @param opts.replace_25
		 * @param opts.replace_26
		 * @param opts.replace_27
		 * @param opts.replace_28
		 * @param opts.replace_29
		 * @param opts.replace_30
		 * @param opts.replace_31
		 * @param opts.replace_32
		 * @param opts.replace_33
		 * @param opts.replace_34
		 * @param opts.replace_35
		 * @param opts.replace_36
		 * @param opts.replace_37
		 * @param opts.replace_38
		 * @param opts.replace_39
		 * @param opts.replace_40
		 * @param opts.replace_41
		 * @param opts.replace_42
		 * @param opts.replace_43
		 * @param opts.replace_44
		 * @param opts.replace_45
		 * @param opts.replace_46
		 * @param opts.replace_47
		 * @param opts.replace_48
		 * @param opts.replace_49}
        */
        constructor(opts:{
            'target_prompt': 'positive'|'negative'| $dyn,'search_txt'?: STRING,'replace_count'?: INT,'replace_1'?: STRING,'replace_2'?: STRING,'replace_3'?: STRING,'replace_4'?: STRING,'replace_5'?: STRING,'replace_6'?: STRING,'replace_7'?: STRING,'replace_8'?: STRING,'replace_9'?: STRING,'replace_10'?: STRING,'replace_11'?: STRING,'replace_12'?: STRING,'replace_13'?: STRING,'replace_14'?: STRING,'replace_15'?: STRING,'replace_16'?: STRING,'replace_17'?: STRING,'replace_18'?: STRING,'replace_19'?: STRING,'replace_20'?: STRING,'replace_21'?: STRING,'replace_22'?: STRING,'replace_23'?: STRING,'replace_24'?: STRING,'replace_25'?: STRING,'replace_26'?: STRING,'replace_27'?: STRING,'replace_28'?: STRING,'replace_29'?: STRING,'replace_30'?: STRING,'replace_31'?: STRING,'replace_32'?: STRING,'replace_33'?: STRING,'replace_34'?: STRING,'replace_35'?: STRING,'replace_36'?: STRING,'replace_37'?: STRING,'replace_38'?: STRING,'replace_39'?: STRING,'replace_40'?: STRING,'replace_41'?: STRING,'replace_42'?: STRING,'replace_43'?: STRING,'replace_44'?: STRING,'replace_45'?: STRING,'replace_46'?: STRING,'replace_47'?: STRING,'replace_48'?: STRING,'replace_49'?: STRING
        }){
            super(ctx);

            super.$$link("target_prompt", opts['target_prompt'])
super.$$link("search_txt", opts['search_txt']??tmp["XY Input: Prompt S/R"].defaults['search_txt'])
super.$$link("replace_count", opts['replace_count']??tmp["XY Input: Prompt S/R"].defaults['replace_count'])
super.$$link("replace_1", opts['replace_1']??tmp["XY Input: Prompt S/R"].defaults['replace_1'])
super.$$link("replace_2", opts['replace_2']??tmp["XY Input: Prompt S/R"].defaults['replace_2'])
super.$$link("replace_3", opts['replace_3']??tmp["XY Input: Prompt S/R"].defaults['replace_3'])
super.$$link("replace_4", opts['replace_4']??tmp["XY Input: Prompt S/R"].defaults['replace_4'])
super.$$link("replace_5", opts['replace_5']??tmp["XY Input: Prompt S/R"].defaults['replace_5'])
super.$$link("replace_6", opts['replace_6']??tmp["XY Input: Prompt S/R"].defaults['replace_6'])
super.$$link("replace_7", opts['replace_7']??tmp["XY Input: Prompt S/R"].defaults['replace_7'])
super.$$link("replace_8", opts['replace_8']??tmp["XY Input: Prompt S/R"].defaults['replace_8'])
super.$$link("replace_9", opts['replace_9']??tmp["XY Input: Prompt S/R"].defaults['replace_9'])
super.$$link("replace_10", opts['replace_10']??tmp["XY Input: Prompt S/R"].defaults['replace_10'])
super.$$link("replace_11", opts['replace_11']??tmp["XY Input: Prompt S/R"].defaults['replace_11'])
super.$$link("replace_12", opts['replace_12']??tmp["XY Input: Prompt S/R"].defaults['replace_12'])
super.$$link("replace_13", opts['replace_13']??tmp["XY Input: Prompt S/R"].defaults['replace_13'])
super.$$link("replace_14", opts['replace_14']??tmp["XY Input: Prompt S/R"].defaults['replace_14'])
super.$$link("replace_15", opts['replace_15']??tmp["XY Input: Prompt S/R"].defaults['replace_15'])
super.$$link("replace_16", opts['replace_16']??tmp["XY Input: Prompt S/R"].defaults['replace_16'])
super.$$link("replace_17", opts['replace_17']??tmp["XY Input: Prompt S/R"].defaults['replace_17'])
super.$$link("replace_18", opts['replace_18']??tmp["XY Input: Prompt S/R"].defaults['replace_18'])
super.$$link("replace_19", opts['replace_19']??tmp["XY Input: Prompt S/R"].defaults['replace_19'])
super.$$link("replace_20", opts['replace_20']??tmp["XY Input: Prompt S/R"].defaults['replace_20'])
super.$$link("replace_21", opts['replace_21']??tmp["XY Input: Prompt S/R"].defaults['replace_21'])
super.$$link("replace_22", opts['replace_22']??tmp["XY Input: Prompt S/R"].defaults['replace_22'])
super.$$link("replace_23", opts['replace_23']??tmp["XY Input: Prompt S/R"].defaults['replace_23'])
super.$$link("replace_24", opts['replace_24']??tmp["XY Input: Prompt S/R"].defaults['replace_24'])
super.$$link("replace_25", opts['replace_25']??tmp["XY Input: Prompt S/R"].defaults['replace_25'])
super.$$link("replace_26", opts['replace_26']??tmp["XY Input: Prompt S/R"].defaults['replace_26'])
super.$$link("replace_27", opts['replace_27']??tmp["XY Input: Prompt S/R"].defaults['replace_27'])
super.$$link("replace_28", opts['replace_28']??tmp["XY Input: Prompt S/R"].defaults['replace_28'])
super.$$link("replace_29", opts['replace_29']??tmp["XY Input: Prompt S/R"].defaults['replace_29'])
super.$$link("replace_30", opts['replace_30']??tmp["XY Input: Prompt S/R"].defaults['replace_30'])
super.$$link("replace_31", opts['replace_31']??tmp["XY Input: Prompt S/R"].defaults['replace_31'])
super.$$link("replace_32", opts['replace_32']??tmp["XY Input: Prompt S/R"].defaults['replace_32'])
super.$$link("replace_33", opts['replace_33']??tmp["XY Input: Prompt S/R"].defaults['replace_33'])
super.$$link("replace_34", opts['replace_34']??tmp["XY Input: Prompt S/R"].defaults['replace_34'])
super.$$link("replace_35", opts['replace_35']??tmp["XY Input: Prompt S/R"].defaults['replace_35'])
super.$$link("replace_36", opts['replace_36']??tmp["XY Input: Prompt S/R"].defaults['replace_36'])
super.$$link("replace_37", opts['replace_37']??tmp["XY Input: Prompt S/R"].defaults['replace_37'])
super.$$link("replace_38", opts['replace_38']??tmp["XY Input: Prompt S/R"].defaults['replace_38'])
super.$$link("replace_39", opts['replace_39']??tmp["XY Input: Prompt S/R"].defaults['replace_39'])
super.$$link("replace_40", opts['replace_40']??tmp["XY Input: Prompt S/R"].defaults['replace_40'])
super.$$link("replace_41", opts['replace_41']??tmp["XY Input: Prompt S/R"].defaults['replace_41'])
super.$$link("replace_42", opts['replace_42']??tmp["XY Input: Prompt S/R"].defaults['replace_42'])
super.$$link("replace_43", opts['replace_43']??tmp["XY Input: Prompt S/R"].defaults['replace_43'])
super.$$link("replace_44", opts['replace_44']??tmp["XY Input: Prompt S/R"].defaults['replace_44'])
super.$$link("replace_45", opts['replace_45']??tmp["XY Input: Prompt S/R"].defaults['replace_45'])
super.$$link("replace_46", opts['replace_46']??tmp["XY Input: Prompt S/R"].defaults['replace_46'])
super.$$link("replace_47", opts['replace_47']??tmp["XY Input: Prompt S/R"].defaults['replace_47'])
super.$$link("replace_48", opts['replace_48']??tmp["XY Input: Prompt S/R"].defaults['replace_48'])
super.$$link("replace_49", opts['replace_49']??tmp["XY Input: Prompt S/R"].defaults['replace_49'])
}

        static defaults = {
    'search_txt':  "",
'replace_count':  3,
'replace_1':  "",
'replace_2':  "",
'replace_3':  "",
'replace_4':  "",
'replace_5':  "",
'replace_6':  "",
'replace_7':  "",
'replace_8':  "",
'replace_9':  "",
'replace_10':  "",
'replace_11':  "",
'replace_12':  "",
'replace_13':  "",
'replace_14':  "",
'replace_15':  "",
'replace_16':  "",
'replace_17':  "",
'replace_18':  "",
'replace_19':  "",
'replace_20':  "",
'replace_21':  "",
'replace_22':  "",
'replace_23':  "",
'replace_24':  "",
'replace_25':  "",
'replace_26':  "",
'replace_27':  "",
'replace_28':  "",
'replace_29':  "",
'replace_30':  "",
'replace_31':  "",
'replace_32':  "",
'replace_33':  "",
'replace_34':  "",
'replace_35':  "",
'replace_36':  "",
'replace_37':  "",
'replace_38':  "",
'replace_39':  "",
'replace_40':  "",
'replace_41':  "",
'replace_42':  "",
'replace_43':  "",
'replace_44':  "",
'replace_45':  "",
'replace_46':  "",
'replace_47':  "",
'replace_48':  "",
'replace_49':  ""
}
        protected override $$type(){
            return "XY Input: Prompt S/R"
        }
},

    /**
     * XY Input: Aesthetic Score from Efficiency Nodes/XY Inputs
     * @desc 
    */
    "XY Input: Aesthetic Score" : class extends Node{
        //Setters
        //set 'target_ascore'(value : 'positive'|'negative'| $dyn)  { super.$$link(0, value) } 
//set 'batch_count'(value : INT)  { super.$$link(1, value) } 
//set 'first_ascore'(value : FLOAT)  { super.$$link(2, value) } 
//set 'last_ascore'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'X or Y'() : XY { return [this.$uid.toString(), 0]  as unknown as XY; }

        /**
          * Constructor
		 * @param opts.target_ascore
		 * @param opts.batch_count default: 3
		 * @param opts.first_ascore step: 0.01
		 * @param opts.last_ascore default: 10 step: 0.01}
        */
        constructor(opts:{
            'target_ascore': 'positive'|'negative'| $dyn,'batch_count'?: INT,'first_ascore'?: FLOAT,'last_ascore'?: FLOAT
        }){
            super(ctx);

            super.$$link("target_ascore", opts['target_ascore'])
super.$$link("batch_count", opts['batch_count']??tmp["XY Input: Aesthetic Score"].defaults['batch_count'])
super.$$link("first_ascore", opts['first_ascore']??tmp["XY Input: Aesthetic Score"].defaults['first_ascore'])
super.$$link("last_ascore", opts['last_ascore']??tmp["XY Input: Aesthetic Score"].defaults['last_ascore'])
}

        static defaults = {
    'batch_count':  3,
'first_ascore':  0,
'last_ascore':  10
}
        protected override $$type(){
            return "XY Input: Aesthetic Score"
        }
},

    /**
     * XY Input: Refiner On/Off from Efficiency Nodes/XY Inputs
     * @desc 
    */
    "XY Input: Refiner On/Off" : class extends Node{
        //Setters
        //set 'refine_at_percent'(value : FLOAT)  { super.$$link(0, value) } 

        //Getters
        get 'X or Y'() : XY { return [this.$uid.toString(), 0]  as unknown as XY; }

        /**
          * Constructor
		 * @param opts.refine_at_percent default: 0.8 step: 0.01}
        */
        constructor(opts:{
            'refine_at_percent'?: FLOAT
        }){
            super(ctx);

            super.$$link("refine_at_percent", opts['refine_at_percent']??tmp["XY Input: Refiner On/Off"].defaults['refine_at_percent'])
}

        static defaults = {
    'refine_at_percent':  0.8
}
        protected override $$type(){
            return "XY Input: Refiner On/Off"
        }
},

    /**
     * XY Input: Checkpoint from Efficiency Nodes/XY Inputs
     * @desc 
    */
    "XY Input: Checkpoint" : class extends Node{
        //Setters
        //set 'target_ckpt'(value : 'Base'|'Refiner'| $dyn)  { super.$$link(0, value) } 
//set 'input_mode'(value : 'Ckpt Names'|'Ckpt Names+ClipSkip'|'Ckpt Names+ClipSkip+VAE'|'Checkpoint Batch'| $dyn)  { super.$$link(1, value) } 
//set 'batch_path'(value : STRING)  { super.$$link(2, value) } 
//set 'subdirectories'(value : BOOLEAN)  { super.$$link(3, value) } 
//set 'batch_sort'(value : 'ascending'|'descending'| $dyn)  { super.$$link(4, value) } 
//set 'batch_max'(value : INT)  { super.$$link(5, value) } 
//set 'ckpt_count'(value : INT)  { super.$$link(6, value) } 
//set 'ckpt_name_1'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(7, value) } 
//set 'clip_skip_1'(value : INT)  { super.$$link(8, value) } 
//set 'vae_name_1'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(9, value) } 
//set 'ckpt_name_2'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(10, value) } 
//set 'clip_skip_2'(value : INT)  { super.$$link(11, value) } 
//set 'vae_name_2'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(12, value) } 
//set 'ckpt_name_3'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(13, value) } 
//set 'clip_skip_3'(value : INT)  { super.$$link(14, value) } 
//set 'vae_name_3'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(15, value) } 
//set 'ckpt_name_4'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(16, value) } 
//set 'clip_skip_4'(value : INT)  { super.$$link(17, value) } 
//set 'vae_name_4'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(18, value) } 
//set 'ckpt_name_5'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(19, value) } 
//set 'clip_skip_5'(value : INT)  { super.$$link(20, value) } 
//set 'vae_name_5'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(21, value) } 
//set 'ckpt_name_6'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(22, value) } 
//set 'clip_skip_6'(value : INT)  { super.$$link(23, value) } 
//set 'vae_name_6'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(24, value) } 
//set 'ckpt_name_7'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(25, value) } 
//set 'clip_skip_7'(value : INT)  { super.$$link(26, value) } 
//set 'vae_name_7'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(27, value) } 
//set 'ckpt_name_8'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(28, value) } 
//set 'clip_skip_8'(value : INT)  { super.$$link(29, value) } 
//set 'vae_name_8'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(30, value) } 
//set 'ckpt_name_9'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(31, value) } 
//set 'clip_skip_9'(value : INT)  { super.$$link(32, value) } 
//set 'vae_name_9'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(33, value) } 
//set 'ckpt_name_10'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(34, value) } 
//set 'clip_skip_10'(value : INT)  { super.$$link(35, value) } 
//set 'vae_name_10'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(36, value) } 
//set 'ckpt_name_11'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(37, value) } 
//set 'clip_skip_11'(value : INT)  { super.$$link(38, value) } 
//set 'vae_name_11'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(39, value) } 
//set 'ckpt_name_12'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(40, value) } 
//set 'clip_skip_12'(value : INT)  { super.$$link(41, value) } 
//set 'vae_name_12'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(42, value) } 
//set 'ckpt_name_13'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(43, value) } 
//set 'clip_skip_13'(value : INT)  { super.$$link(44, value) } 
//set 'vae_name_13'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(45, value) } 
//set 'ckpt_name_14'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(46, value) } 
//set 'clip_skip_14'(value : INT)  { super.$$link(47, value) } 
//set 'vae_name_14'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(48, value) } 
//set 'ckpt_name_15'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(49, value) } 
//set 'clip_skip_15'(value : INT)  { super.$$link(50, value) } 
//set 'vae_name_15'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(51, value) } 
//set 'ckpt_name_16'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(52, value) } 
//set 'clip_skip_16'(value : INT)  { super.$$link(53, value) } 
//set 'vae_name_16'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(54, value) } 
//set 'ckpt_name_17'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(55, value) } 
//set 'clip_skip_17'(value : INT)  { super.$$link(56, value) } 
//set 'vae_name_17'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(57, value) } 
//set 'ckpt_name_18'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(58, value) } 
//set 'clip_skip_18'(value : INT)  { super.$$link(59, value) } 
//set 'vae_name_18'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(60, value) } 
//set 'ckpt_name_19'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(61, value) } 
//set 'clip_skip_19'(value : INT)  { super.$$link(62, value) } 
//set 'vae_name_19'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(63, value) } 
//set 'ckpt_name_20'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(64, value) } 
//set 'clip_skip_20'(value : INT)  { super.$$link(65, value) } 
//set 'vae_name_20'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(66, value) } 
//set 'ckpt_name_21'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(67, value) } 
//set 'clip_skip_21'(value : INT)  { super.$$link(68, value) } 
//set 'vae_name_21'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(69, value) } 
//set 'ckpt_name_22'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(70, value) } 
//set 'clip_skip_22'(value : INT)  { super.$$link(71, value) } 
//set 'vae_name_22'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(72, value) } 
//set 'ckpt_name_23'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(73, value) } 
//set 'clip_skip_23'(value : INT)  { super.$$link(74, value) } 
//set 'vae_name_23'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(75, value) } 
//set 'ckpt_name_24'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(76, value) } 
//set 'clip_skip_24'(value : INT)  { super.$$link(77, value) } 
//set 'vae_name_24'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(78, value) } 
//set 'ckpt_name_25'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(79, value) } 
//set 'clip_skip_25'(value : INT)  { super.$$link(80, value) } 
//set 'vae_name_25'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(81, value) } 
//set 'ckpt_name_26'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(82, value) } 
//set 'clip_skip_26'(value : INT)  { super.$$link(83, value) } 
//set 'vae_name_26'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(84, value) } 
//set 'ckpt_name_27'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(85, value) } 
//set 'clip_skip_27'(value : INT)  { super.$$link(86, value) } 
//set 'vae_name_27'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(87, value) } 
//set 'ckpt_name_28'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(88, value) } 
//set 'clip_skip_28'(value : INT)  { super.$$link(89, value) } 
//set 'vae_name_28'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(90, value) } 
//set 'ckpt_name_29'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(91, value) } 
//set 'clip_skip_29'(value : INT)  { super.$$link(92, value) } 
//set 'vae_name_29'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(93, value) } 
//set 'ckpt_name_30'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(94, value) } 
//set 'clip_skip_30'(value : INT)  { super.$$link(95, value) } 
//set 'vae_name_30'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(96, value) } 
//set 'ckpt_name_31'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(97, value) } 
//set 'clip_skip_31'(value : INT)  { super.$$link(98, value) } 
//set 'vae_name_31'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(99, value) } 
//set 'ckpt_name_32'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(100, value) } 
//set 'clip_skip_32'(value : INT)  { super.$$link(101, value) } 
//set 'vae_name_32'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(102, value) } 
//set 'ckpt_name_33'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(103, value) } 
//set 'clip_skip_33'(value : INT)  { super.$$link(104, value) } 
//set 'vae_name_33'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(105, value) } 
//set 'ckpt_name_34'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(106, value) } 
//set 'clip_skip_34'(value : INT)  { super.$$link(107, value) } 
//set 'vae_name_34'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(108, value) } 
//set 'ckpt_name_35'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(109, value) } 
//set 'clip_skip_35'(value : INT)  { super.$$link(110, value) } 
//set 'vae_name_35'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(111, value) } 
//set 'ckpt_name_36'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(112, value) } 
//set 'clip_skip_36'(value : INT)  { super.$$link(113, value) } 
//set 'vae_name_36'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(114, value) } 
//set 'ckpt_name_37'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(115, value) } 
//set 'clip_skip_37'(value : INT)  { super.$$link(116, value) } 
//set 'vae_name_37'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(117, value) } 
//set 'ckpt_name_38'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(118, value) } 
//set 'clip_skip_38'(value : INT)  { super.$$link(119, value) } 
//set 'vae_name_38'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(120, value) } 
//set 'ckpt_name_39'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(121, value) } 
//set 'clip_skip_39'(value : INT)  { super.$$link(122, value) } 
//set 'vae_name_39'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(123, value) } 
//set 'ckpt_name_40'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(124, value) } 
//set 'clip_skip_40'(value : INT)  { super.$$link(125, value) } 
//set 'vae_name_40'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(126, value) } 
//set 'ckpt_name_41'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(127, value) } 
//set 'clip_skip_41'(value : INT)  { super.$$link(128, value) } 
//set 'vae_name_41'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(129, value) } 
//set 'ckpt_name_42'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(130, value) } 
//set 'clip_skip_42'(value : INT)  { super.$$link(131, value) } 
//set 'vae_name_42'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(132, value) } 
//set 'ckpt_name_43'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(133, value) } 
//set 'clip_skip_43'(value : INT)  { super.$$link(134, value) } 
//set 'vae_name_43'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(135, value) } 
//set 'ckpt_name_44'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(136, value) } 
//set 'clip_skip_44'(value : INT)  { super.$$link(137, value) } 
//set 'vae_name_44'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(138, value) } 
//set 'ckpt_name_45'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(139, value) } 
//set 'clip_skip_45'(value : INT)  { super.$$link(140, value) } 
//set 'vae_name_45'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(141, value) } 
//set 'ckpt_name_46'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(142, value) } 
//set 'clip_skip_46'(value : INT)  { super.$$link(143, value) } 
//set 'vae_name_46'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(144, value) } 
//set 'ckpt_name_47'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(145, value) } 
//set 'clip_skip_47'(value : INT)  { super.$$link(146, value) } 
//set 'vae_name_47'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(147, value) } 
//set 'ckpt_name_48'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(148, value) } 
//set 'clip_skip_48'(value : INT)  { super.$$link(149, value) } 
//set 'vae_name_48'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(150, value) } 
//set 'ckpt_name_49'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(151, value) } 
//set 'clip_skip_49'(value : INT)  { super.$$link(152, value) } 
//set 'vae_name_49'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(153, value) } 
//set 'ckpt_name_50'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(154, value) } 
//set 'clip_skip_50'(value : INT)  { super.$$link(155, value) } 
//set 'vae_name_50'(value : 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn)  { super.$$link(156, value) } 

        //Getters
        get 'X or Y'() : XY { return [this.$uid.toString(), 0]  as unknown as XY; }

        /**
          * Constructor
		 * @param opts.target_ckpt
		 * @param opts.input_mode
		 * @param opts.batch_path default: "/example_folder"
		 * @param opts.subdirectories
		 * @param opts.batch_sort
		 * @param opts.batch_max default: -1 max: 50 min: -1 step: 1
		 * @param opts.ckpt_count default: 3 step: 1
		 * @param opts.ckpt_name_1
		 * @param opts.clip_skip_1 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_1
		 * @param opts.ckpt_name_2
		 * @param opts.clip_skip_2 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_2
		 * @param opts.ckpt_name_3
		 * @param opts.clip_skip_3 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_3
		 * @param opts.ckpt_name_4
		 * @param opts.clip_skip_4 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_4
		 * @param opts.ckpt_name_5
		 * @param opts.clip_skip_5 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_5
		 * @param opts.ckpt_name_6
		 * @param opts.clip_skip_6 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_6
		 * @param opts.ckpt_name_7
		 * @param opts.clip_skip_7 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_7
		 * @param opts.ckpt_name_8
		 * @param opts.clip_skip_8 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_8
		 * @param opts.ckpt_name_9
		 * @param opts.clip_skip_9 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_9
		 * @param opts.ckpt_name_10
		 * @param opts.clip_skip_10 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_10
		 * @param opts.ckpt_name_11
		 * @param opts.clip_skip_11 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_11
		 * @param opts.ckpt_name_12
		 * @param opts.clip_skip_12 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_12
		 * @param opts.ckpt_name_13
		 * @param opts.clip_skip_13 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_13
		 * @param opts.ckpt_name_14
		 * @param opts.clip_skip_14 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_14
		 * @param opts.ckpt_name_15
		 * @param opts.clip_skip_15 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_15
		 * @param opts.ckpt_name_16
		 * @param opts.clip_skip_16 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_16
		 * @param opts.ckpt_name_17
		 * @param opts.clip_skip_17 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_17
		 * @param opts.ckpt_name_18
		 * @param opts.clip_skip_18 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_18
		 * @param opts.ckpt_name_19
		 * @param opts.clip_skip_19 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_19
		 * @param opts.ckpt_name_20
		 * @param opts.clip_skip_20 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_20
		 * @param opts.ckpt_name_21
		 * @param opts.clip_skip_21 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_21
		 * @param opts.ckpt_name_22
		 * @param opts.clip_skip_22 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_22
		 * @param opts.ckpt_name_23
		 * @param opts.clip_skip_23 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_23
		 * @param opts.ckpt_name_24
		 * @param opts.clip_skip_24 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_24
		 * @param opts.ckpt_name_25
		 * @param opts.clip_skip_25 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_25
		 * @param opts.ckpt_name_26
		 * @param opts.clip_skip_26 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_26
		 * @param opts.ckpt_name_27
		 * @param opts.clip_skip_27 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_27
		 * @param opts.ckpt_name_28
		 * @param opts.clip_skip_28 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_28
		 * @param opts.ckpt_name_29
		 * @param opts.clip_skip_29 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_29
		 * @param opts.ckpt_name_30
		 * @param opts.clip_skip_30 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_30
		 * @param opts.ckpt_name_31
		 * @param opts.clip_skip_31 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_31
		 * @param opts.ckpt_name_32
		 * @param opts.clip_skip_32 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_32
		 * @param opts.ckpt_name_33
		 * @param opts.clip_skip_33 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_33
		 * @param opts.ckpt_name_34
		 * @param opts.clip_skip_34 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_34
		 * @param opts.ckpt_name_35
		 * @param opts.clip_skip_35 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_35
		 * @param opts.ckpt_name_36
		 * @param opts.clip_skip_36 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_36
		 * @param opts.ckpt_name_37
		 * @param opts.clip_skip_37 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_37
		 * @param opts.ckpt_name_38
		 * @param opts.clip_skip_38 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_38
		 * @param opts.ckpt_name_39
		 * @param opts.clip_skip_39 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_39
		 * @param opts.ckpt_name_40
		 * @param opts.clip_skip_40 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_40
		 * @param opts.ckpt_name_41
		 * @param opts.clip_skip_41 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_41
		 * @param opts.ckpt_name_42
		 * @param opts.clip_skip_42 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_42
		 * @param opts.ckpt_name_43
		 * @param opts.clip_skip_43 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_43
		 * @param opts.ckpt_name_44
		 * @param opts.clip_skip_44 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_44
		 * @param opts.ckpt_name_45
		 * @param opts.clip_skip_45 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_45
		 * @param opts.ckpt_name_46
		 * @param opts.clip_skip_46 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_46
		 * @param opts.ckpt_name_47
		 * @param opts.clip_skip_47 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_47
		 * @param opts.ckpt_name_48
		 * @param opts.clip_skip_48 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_48
		 * @param opts.ckpt_name_49
		 * @param opts.clip_skip_49 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_49
		 * @param opts.ckpt_name_50
		 * @param opts.clip_skip_50 default: -1 max: -1 min: -24 step: 1
		 * @param opts.vae_name_50}
        */
        constructor(opts:{
            'target_ckpt': 'Base'|'Refiner'| $dyn,'input_mode': 'Ckpt Names'|'Ckpt Names+ClipSkip'|'Ckpt Names+ClipSkip+VAE'|'Checkpoint Batch'| $dyn,'batch_path'?: STRING,'subdirectories'?: BOOLEAN,'batch_sort': 'ascending'|'descending'| $dyn,'batch_max'?: INT,'ckpt_count'?: INT,'ckpt_name_1': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_1'?: INT,'vae_name_1': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_2': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_2'?: INT,'vae_name_2': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_3': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_3'?: INT,'vae_name_3': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_4': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_4'?: INT,'vae_name_4': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_5': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_5'?: INT,'vae_name_5': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_6': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_6'?: INT,'vae_name_6': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_7': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_7'?: INT,'vae_name_7': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_8': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_8'?: INT,'vae_name_8': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_9': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_9'?: INT,'vae_name_9': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_10': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_10'?: INT,'vae_name_10': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_11': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_11'?: INT,'vae_name_11': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_12': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_12'?: INT,'vae_name_12': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_13': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_13'?: INT,'vae_name_13': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_14': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_14'?: INT,'vae_name_14': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_15': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_15'?: INT,'vae_name_15': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_16': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_16'?: INT,'vae_name_16': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_17': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_17'?: INT,'vae_name_17': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_18': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_18'?: INT,'vae_name_18': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_19': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_19'?: INT,'vae_name_19': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_20': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_20'?: INT,'vae_name_20': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_21': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_21'?: INT,'vae_name_21': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_22': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_22'?: INT,'vae_name_22': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_23': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_23'?: INT,'vae_name_23': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_24': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_24'?: INT,'vae_name_24': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_25': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_25'?: INT,'vae_name_25': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_26': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_26'?: INT,'vae_name_26': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_27': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_27'?: INT,'vae_name_27': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_28': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_28'?: INT,'vae_name_28': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_29': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_29'?: INT,'vae_name_29': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_30': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_30'?: INT,'vae_name_30': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_31': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_31'?: INT,'vae_name_31': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_32': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_32'?: INT,'vae_name_32': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_33': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_33'?: INT,'vae_name_33': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_34': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_34'?: INT,'vae_name_34': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_35': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_35'?: INT,'vae_name_35': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_36': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_36'?: INT,'vae_name_36': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_37': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_37'?: INT,'vae_name_37': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_38': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_38'?: INT,'vae_name_38': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_39': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_39'?: INT,'vae_name_39': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_40': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_40'?: INT,'vae_name_40': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_41': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_41'?: INT,'vae_name_41': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_42': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_42'?: INT,'vae_name_42': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_43': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_43'?: INT,'vae_name_43': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_44': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_44'?: INT,'vae_name_44': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_45': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_45'?: INT,'vae_name_45': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_46': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_46'?: INT,'vae_name_46': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_47': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_47'?: INT,'vae_name_47': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_48': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_48'?: INT,'vae_name_48': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_49': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_49'?: INT,'vae_name_49': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn,'ckpt_name_50': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'clip_skip_50'?: INT,'vae_name_50': 'Baked VAE'|'FLUX1/ae.sft'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'| $dyn
        }){
            super(ctx);

            super.$$link("target_ckpt", opts['target_ckpt'])
super.$$link("input_mode", opts['input_mode'])
super.$$link("batch_path", opts['batch_path']??tmp["XY Input: Checkpoint"].defaults['batch_path'])
super.$$link("subdirectories", opts['subdirectories']??tmp["XY Input: Checkpoint"].defaults['subdirectories'])
super.$$link("batch_sort", opts['batch_sort'])
super.$$link("batch_max", opts['batch_max']??tmp["XY Input: Checkpoint"].defaults['batch_max'])
super.$$link("ckpt_count", opts['ckpt_count']??tmp["XY Input: Checkpoint"].defaults['ckpt_count'])
super.$$link("ckpt_name_1", opts['ckpt_name_1'])
super.$$link("clip_skip_1", opts['clip_skip_1']??tmp["XY Input: Checkpoint"].defaults['clip_skip_1'])
super.$$link("vae_name_1", opts['vae_name_1'])
super.$$link("ckpt_name_2", opts['ckpt_name_2'])
super.$$link("clip_skip_2", opts['clip_skip_2']??tmp["XY Input: Checkpoint"].defaults['clip_skip_2'])
super.$$link("vae_name_2", opts['vae_name_2'])
super.$$link("ckpt_name_3", opts['ckpt_name_3'])
super.$$link("clip_skip_3", opts['clip_skip_3']??tmp["XY Input: Checkpoint"].defaults['clip_skip_3'])
super.$$link("vae_name_3", opts['vae_name_3'])
super.$$link("ckpt_name_4", opts['ckpt_name_4'])
super.$$link("clip_skip_4", opts['clip_skip_4']??tmp["XY Input: Checkpoint"].defaults['clip_skip_4'])
super.$$link("vae_name_4", opts['vae_name_4'])
super.$$link("ckpt_name_5", opts['ckpt_name_5'])
super.$$link("clip_skip_5", opts['clip_skip_5']??tmp["XY Input: Checkpoint"].defaults['clip_skip_5'])
super.$$link("vae_name_5", opts['vae_name_5'])
super.$$link("ckpt_name_6", opts['ckpt_name_6'])
super.$$link("clip_skip_6", opts['clip_skip_6']??tmp["XY Input: Checkpoint"].defaults['clip_skip_6'])
super.$$link("vae_name_6", opts['vae_name_6'])
super.$$link("ckpt_name_7", opts['ckpt_name_7'])
super.$$link("clip_skip_7", opts['clip_skip_7']??tmp["XY Input: Checkpoint"].defaults['clip_skip_7'])
super.$$link("vae_name_7", opts['vae_name_7'])
super.$$link("ckpt_name_8", opts['ckpt_name_8'])
super.$$link("clip_skip_8", opts['clip_skip_8']??tmp["XY Input: Checkpoint"].defaults['clip_skip_8'])
super.$$link("vae_name_8", opts['vae_name_8'])
super.$$link("ckpt_name_9", opts['ckpt_name_9'])
super.$$link("clip_skip_9", opts['clip_skip_9']??tmp["XY Input: Checkpoint"].defaults['clip_skip_9'])
super.$$link("vae_name_9", opts['vae_name_9'])
super.$$link("ckpt_name_10", opts['ckpt_name_10'])
super.$$link("clip_skip_10", opts['clip_skip_10']??tmp["XY Input: Checkpoint"].defaults['clip_skip_10'])
super.$$link("vae_name_10", opts['vae_name_10'])
super.$$link("ckpt_name_11", opts['ckpt_name_11'])
super.$$link("clip_skip_11", opts['clip_skip_11']??tmp["XY Input: Checkpoint"].defaults['clip_skip_11'])
super.$$link("vae_name_11", opts['vae_name_11'])
super.$$link("ckpt_name_12", opts['ckpt_name_12'])
super.$$link("clip_skip_12", opts['clip_skip_12']??tmp["XY Input: Checkpoint"].defaults['clip_skip_12'])
super.$$link("vae_name_12", opts['vae_name_12'])
super.$$link("ckpt_name_13", opts['ckpt_name_13'])
super.$$link("clip_skip_13", opts['clip_skip_13']??tmp["XY Input: Checkpoint"].defaults['clip_skip_13'])
super.$$link("vae_name_13", opts['vae_name_13'])
super.$$link("ckpt_name_14", opts['ckpt_name_14'])
super.$$link("clip_skip_14", opts['clip_skip_14']??tmp["XY Input: Checkpoint"].defaults['clip_skip_14'])
super.$$link("vae_name_14", opts['vae_name_14'])
super.$$link("ckpt_name_15", opts['ckpt_name_15'])
super.$$link("clip_skip_15", opts['clip_skip_15']??tmp["XY Input: Checkpoint"].defaults['clip_skip_15'])
super.$$link("vae_name_15", opts['vae_name_15'])
super.$$link("ckpt_name_16", opts['ckpt_name_16'])
super.$$link("clip_skip_16", opts['clip_skip_16']??tmp["XY Input: Checkpoint"].defaults['clip_skip_16'])
super.$$link("vae_name_16", opts['vae_name_16'])
super.$$link("ckpt_name_17", opts['ckpt_name_17'])
super.$$link("clip_skip_17", opts['clip_skip_17']??tmp["XY Input: Checkpoint"].defaults['clip_skip_17'])
super.$$link("vae_name_17", opts['vae_name_17'])
super.$$link("ckpt_name_18", opts['ckpt_name_18'])
super.$$link("clip_skip_18", opts['clip_skip_18']??tmp["XY Input: Checkpoint"].defaults['clip_skip_18'])
super.$$link("vae_name_18", opts['vae_name_18'])
super.$$link("ckpt_name_19", opts['ckpt_name_19'])
super.$$link("clip_skip_19", opts['clip_skip_19']??tmp["XY Input: Checkpoint"].defaults['clip_skip_19'])
super.$$link("vae_name_19", opts['vae_name_19'])
super.$$link("ckpt_name_20", opts['ckpt_name_20'])
super.$$link("clip_skip_20", opts['clip_skip_20']??tmp["XY Input: Checkpoint"].defaults['clip_skip_20'])
super.$$link("vae_name_20", opts['vae_name_20'])
super.$$link("ckpt_name_21", opts['ckpt_name_21'])
super.$$link("clip_skip_21", opts['clip_skip_21']??tmp["XY Input: Checkpoint"].defaults['clip_skip_21'])
super.$$link("vae_name_21", opts['vae_name_21'])
super.$$link("ckpt_name_22", opts['ckpt_name_22'])
super.$$link("clip_skip_22", opts['clip_skip_22']??tmp["XY Input: Checkpoint"].defaults['clip_skip_22'])
super.$$link("vae_name_22", opts['vae_name_22'])
super.$$link("ckpt_name_23", opts['ckpt_name_23'])
super.$$link("clip_skip_23", opts['clip_skip_23']??tmp["XY Input: Checkpoint"].defaults['clip_skip_23'])
super.$$link("vae_name_23", opts['vae_name_23'])
super.$$link("ckpt_name_24", opts['ckpt_name_24'])
super.$$link("clip_skip_24", opts['clip_skip_24']??tmp["XY Input: Checkpoint"].defaults['clip_skip_24'])
super.$$link("vae_name_24", opts['vae_name_24'])
super.$$link("ckpt_name_25", opts['ckpt_name_25'])
super.$$link("clip_skip_25", opts['clip_skip_25']??tmp["XY Input: Checkpoint"].defaults['clip_skip_25'])
super.$$link("vae_name_25", opts['vae_name_25'])
super.$$link("ckpt_name_26", opts['ckpt_name_26'])
super.$$link("clip_skip_26", opts['clip_skip_26']??tmp["XY Input: Checkpoint"].defaults['clip_skip_26'])
super.$$link("vae_name_26", opts['vae_name_26'])
super.$$link("ckpt_name_27", opts['ckpt_name_27'])
super.$$link("clip_skip_27", opts['clip_skip_27']??tmp["XY Input: Checkpoint"].defaults['clip_skip_27'])
super.$$link("vae_name_27", opts['vae_name_27'])
super.$$link("ckpt_name_28", opts['ckpt_name_28'])
super.$$link("clip_skip_28", opts['clip_skip_28']??tmp["XY Input: Checkpoint"].defaults['clip_skip_28'])
super.$$link("vae_name_28", opts['vae_name_28'])
super.$$link("ckpt_name_29", opts['ckpt_name_29'])
super.$$link("clip_skip_29", opts['clip_skip_29']??tmp["XY Input: Checkpoint"].defaults['clip_skip_29'])
super.$$link("vae_name_29", opts['vae_name_29'])
super.$$link("ckpt_name_30", opts['ckpt_name_30'])
super.$$link("clip_skip_30", opts['clip_skip_30']??tmp["XY Input: Checkpoint"].defaults['clip_skip_30'])
super.$$link("vae_name_30", opts['vae_name_30'])
super.$$link("ckpt_name_31", opts['ckpt_name_31'])
super.$$link("clip_skip_31", opts['clip_skip_31']??tmp["XY Input: Checkpoint"].defaults['clip_skip_31'])
super.$$link("vae_name_31", opts['vae_name_31'])
super.$$link("ckpt_name_32", opts['ckpt_name_32'])
super.$$link("clip_skip_32", opts['clip_skip_32']??tmp["XY Input: Checkpoint"].defaults['clip_skip_32'])
super.$$link("vae_name_32", opts['vae_name_32'])
super.$$link("ckpt_name_33", opts['ckpt_name_33'])
super.$$link("clip_skip_33", opts['clip_skip_33']??tmp["XY Input: Checkpoint"].defaults['clip_skip_33'])
super.$$link("vae_name_33", opts['vae_name_33'])
super.$$link("ckpt_name_34", opts['ckpt_name_34'])
super.$$link("clip_skip_34", opts['clip_skip_34']??tmp["XY Input: Checkpoint"].defaults['clip_skip_34'])
super.$$link("vae_name_34", opts['vae_name_34'])
super.$$link("ckpt_name_35", opts['ckpt_name_35'])
super.$$link("clip_skip_35", opts['clip_skip_35']??tmp["XY Input: Checkpoint"].defaults['clip_skip_35'])
super.$$link("vae_name_35", opts['vae_name_35'])
super.$$link("ckpt_name_36", opts['ckpt_name_36'])
super.$$link("clip_skip_36", opts['clip_skip_36']??tmp["XY Input: Checkpoint"].defaults['clip_skip_36'])
super.$$link("vae_name_36", opts['vae_name_36'])
super.$$link("ckpt_name_37", opts['ckpt_name_37'])
super.$$link("clip_skip_37", opts['clip_skip_37']??tmp["XY Input: Checkpoint"].defaults['clip_skip_37'])
super.$$link("vae_name_37", opts['vae_name_37'])
super.$$link("ckpt_name_38", opts['ckpt_name_38'])
super.$$link("clip_skip_38", opts['clip_skip_38']??tmp["XY Input: Checkpoint"].defaults['clip_skip_38'])
super.$$link("vae_name_38", opts['vae_name_38'])
super.$$link("ckpt_name_39", opts['ckpt_name_39'])
super.$$link("clip_skip_39", opts['clip_skip_39']??tmp["XY Input: Checkpoint"].defaults['clip_skip_39'])
super.$$link("vae_name_39", opts['vae_name_39'])
super.$$link("ckpt_name_40", opts['ckpt_name_40'])
super.$$link("clip_skip_40", opts['clip_skip_40']??tmp["XY Input: Checkpoint"].defaults['clip_skip_40'])
super.$$link("vae_name_40", opts['vae_name_40'])
super.$$link("ckpt_name_41", opts['ckpt_name_41'])
super.$$link("clip_skip_41", opts['clip_skip_41']??tmp["XY Input: Checkpoint"].defaults['clip_skip_41'])
super.$$link("vae_name_41", opts['vae_name_41'])
super.$$link("ckpt_name_42", opts['ckpt_name_42'])
super.$$link("clip_skip_42", opts['clip_skip_42']??tmp["XY Input: Checkpoint"].defaults['clip_skip_42'])
super.$$link("vae_name_42", opts['vae_name_42'])
super.$$link("ckpt_name_43", opts['ckpt_name_43'])
super.$$link("clip_skip_43", opts['clip_skip_43']??tmp["XY Input: Checkpoint"].defaults['clip_skip_43'])
super.$$link("vae_name_43", opts['vae_name_43'])
super.$$link("ckpt_name_44", opts['ckpt_name_44'])
super.$$link("clip_skip_44", opts['clip_skip_44']??tmp["XY Input: Checkpoint"].defaults['clip_skip_44'])
super.$$link("vae_name_44", opts['vae_name_44'])
super.$$link("ckpt_name_45", opts['ckpt_name_45'])
super.$$link("clip_skip_45", opts['clip_skip_45']??tmp["XY Input: Checkpoint"].defaults['clip_skip_45'])
super.$$link("vae_name_45", opts['vae_name_45'])
super.$$link("ckpt_name_46", opts['ckpt_name_46'])
super.$$link("clip_skip_46", opts['clip_skip_46']??tmp["XY Input: Checkpoint"].defaults['clip_skip_46'])
super.$$link("vae_name_46", opts['vae_name_46'])
super.$$link("ckpt_name_47", opts['ckpt_name_47'])
super.$$link("clip_skip_47", opts['clip_skip_47']??tmp["XY Input: Checkpoint"].defaults['clip_skip_47'])
super.$$link("vae_name_47", opts['vae_name_47'])
super.$$link("ckpt_name_48", opts['ckpt_name_48'])
super.$$link("clip_skip_48", opts['clip_skip_48']??tmp["XY Input: Checkpoint"].defaults['clip_skip_48'])
super.$$link("vae_name_48", opts['vae_name_48'])
super.$$link("ckpt_name_49", opts['ckpt_name_49'])
super.$$link("clip_skip_49", opts['clip_skip_49']??tmp["XY Input: Checkpoint"].defaults['clip_skip_49'])
super.$$link("vae_name_49", opts['vae_name_49'])
super.$$link("ckpt_name_50", opts['ckpt_name_50'])
super.$$link("clip_skip_50", opts['clip_skip_50']??tmp["XY Input: Checkpoint"].defaults['clip_skip_50'])
super.$$link("vae_name_50", opts['vae_name_50'])
}

        static defaults = {
    'batch_path':  "/example_folder",
'subdirectories':  false,
'batch_max':  -1,
'ckpt_count':  3,
'clip_skip_1':  -1,
'clip_skip_2':  -1,
'clip_skip_3':  -1,
'clip_skip_4':  -1,
'clip_skip_5':  -1,
'clip_skip_6':  -1,
'clip_skip_7':  -1,
'clip_skip_8':  -1,
'clip_skip_9':  -1,
'clip_skip_10':  -1,
'clip_skip_11':  -1,
'clip_skip_12':  -1,
'clip_skip_13':  -1,
'clip_skip_14':  -1,
'clip_skip_15':  -1,
'clip_skip_16':  -1,
'clip_skip_17':  -1,
'clip_skip_18':  -1,
'clip_skip_19':  -1,
'clip_skip_20':  -1,
'clip_skip_21':  -1,
'clip_skip_22':  -1,
'clip_skip_23':  -1,
'clip_skip_24':  -1,
'clip_skip_25':  -1,
'clip_skip_26':  -1,
'clip_skip_27':  -1,
'clip_skip_28':  -1,
'clip_skip_29':  -1,
'clip_skip_30':  -1,
'clip_skip_31':  -1,
'clip_skip_32':  -1,
'clip_skip_33':  -1,
'clip_skip_34':  -1,
'clip_skip_35':  -1,
'clip_skip_36':  -1,
'clip_skip_37':  -1,
'clip_skip_38':  -1,
'clip_skip_39':  -1,
'clip_skip_40':  -1,
'clip_skip_41':  -1,
'clip_skip_42':  -1,
'clip_skip_43':  -1,
'clip_skip_44':  -1,
'clip_skip_45':  -1,
'clip_skip_46':  -1,
'clip_skip_47':  -1,
'clip_skip_48':  -1,
'clip_skip_49':  -1,
'clip_skip_50':  -1
}
        protected override $$type(){
            return "XY Input: Checkpoint"
        }
},

    /**
     * XY Input: Clip Skip from Efficiency Nodes/XY Inputs
     * @desc 
    */
    "XY Input: Clip Skip" : class extends Node{
        //Setters
        //set 'target_ckpt'(value : 'Base'|'Refiner'| $dyn)  { super.$$link(0, value) } 
//set 'batch_count'(value : INT)  { super.$$link(1, value) } 
//set 'first_clip_skip'(value : INT)  { super.$$link(2, value) } 
//set 'last_clip_skip'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'X or Y'() : XY { return [this.$uid.toString(), 0]  as unknown as XY; }

        /**
          * Constructor
		 * @param opts.target_ckpt
		 * @param opts.batch_count default: 3
		 * @param opts.first_clip_skip default: -1 max: -1 min: -24 step: 1
		 * @param opts.last_clip_skip default: -3 max: -1 min: -24 step: 1}
        */
        constructor(opts:{
            'target_ckpt': 'Base'|'Refiner'| $dyn,'batch_count'?: INT,'first_clip_skip'?: INT,'last_clip_skip'?: INT
        }){
            super(ctx);

            super.$$link("target_ckpt", opts['target_ckpt'])
super.$$link("batch_count", opts['batch_count']??tmp["XY Input: Clip Skip"].defaults['batch_count'])
super.$$link("first_clip_skip", opts['first_clip_skip']??tmp["XY Input: Clip Skip"].defaults['first_clip_skip'])
super.$$link("last_clip_skip", opts['last_clip_skip']??tmp["XY Input: Clip Skip"].defaults['last_clip_skip'])
}

        static defaults = {
    'batch_count':  3,
'first_clip_skip':  -1,
'last_clip_skip':  -3
}
        protected override $$type(){
            return "XY Input: Clip Skip"
        }
},

    /**
     * XY Input: LoRA from Efficiency Nodes/XY Inputs
     * @desc 
    */
    "XY Input: LoRA" : class extends Node{
        //Setters
        //set 'input_mode'(value : 'LoRA Names'|'LoRA Names+Weights'|'LoRA Batch'| $dyn)  { super.$$link(0, value) } 
//set 'batch_path'(value : STRING)  { super.$$link(1, value) } 
//set 'subdirectories'(value : BOOLEAN)  { super.$$link(2, value) } 
//set 'batch_sort'(value : 'ascending'|'descending'| $dyn)  { super.$$link(3, value) } 
//set 'batch_max'(value : INT)  { super.$$link(4, value) } 
//set 'lora_count'(value : INT)  { super.$$link(5, value) } 
//set 'model_strength'(value : FLOAT)  { super.$$link(6, value) } 
//set 'clip_strength'(value : FLOAT)  { super.$$link(7, value) } 
//set 'lora_name_1'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(8, value) } 
//set 'model_str_1'(value : FLOAT)  { super.$$link(9, value) } 
//set 'clip_str_1'(value : FLOAT)  { super.$$link(10, value) } 
//set 'lora_name_2'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(11, value) } 
//set 'model_str_2'(value : FLOAT)  { super.$$link(12, value) } 
//set 'clip_str_2'(value : FLOAT)  { super.$$link(13, value) } 
//set 'lora_name_3'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(14, value) } 
//set 'model_str_3'(value : FLOAT)  { super.$$link(15, value) } 
//set 'clip_str_3'(value : FLOAT)  { super.$$link(16, value) } 
//set 'lora_name_4'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(17, value) } 
//set 'model_str_4'(value : FLOAT)  { super.$$link(18, value) } 
//set 'clip_str_4'(value : FLOAT)  { super.$$link(19, value) } 
//set 'lora_name_5'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(20, value) } 
//set 'model_str_5'(value : FLOAT)  { super.$$link(21, value) } 
//set 'clip_str_5'(value : FLOAT)  { super.$$link(22, value) } 
//set 'lora_name_6'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(23, value) } 
//set 'model_str_6'(value : FLOAT)  { super.$$link(24, value) } 
//set 'clip_str_6'(value : FLOAT)  { super.$$link(25, value) } 
//set 'lora_name_7'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(26, value) } 
//set 'model_str_7'(value : FLOAT)  { super.$$link(27, value) } 
//set 'clip_str_7'(value : FLOAT)  { super.$$link(28, value) } 
//set 'lora_name_8'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(29, value) } 
//set 'model_str_8'(value : FLOAT)  { super.$$link(30, value) } 
//set 'clip_str_8'(value : FLOAT)  { super.$$link(31, value) } 
//set 'lora_name_9'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(32, value) } 
//set 'model_str_9'(value : FLOAT)  { super.$$link(33, value) } 
//set 'clip_str_9'(value : FLOAT)  { super.$$link(34, value) } 
//set 'lora_name_10'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(35, value) } 
//set 'model_str_10'(value : FLOAT)  { super.$$link(36, value) } 
//set 'clip_str_10'(value : FLOAT)  { super.$$link(37, value) } 
//set 'lora_name_11'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(38, value) } 
//set 'model_str_11'(value : FLOAT)  { super.$$link(39, value) } 
//set 'clip_str_11'(value : FLOAT)  { super.$$link(40, value) } 
//set 'lora_name_12'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(41, value) } 
//set 'model_str_12'(value : FLOAT)  { super.$$link(42, value) } 
//set 'clip_str_12'(value : FLOAT)  { super.$$link(43, value) } 
//set 'lora_name_13'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(44, value) } 
//set 'model_str_13'(value : FLOAT)  { super.$$link(45, value) } 
//set 'clip_str_13'(value : FLOAT)  { super.$$link(46, value) } 
//set 'lora_name_14'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(47, value) } 
//set 'model_str_14'(value : FLOAT)  { super.$$link(48, value) } 
//set 'clip_str_14'(value : FLOAT)  { super.$$link(49, value) } 
//set 'lora_name_15'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(50, value) } 
//set 'model_str_15'(value : FLOAT)  { super.$$link(51, value) } 
//set 'clip_str_15'(value : FLOAT)  { super.$$link(52, value) } 
//set 'lora_name_16'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(53, value) } 
//set 'model_str_16'(value : FLOAT)  { super.$$link(54, value) } 
//set 'clip_str_16'(value : FLOAT)  { super.$$link(55, value) } 
//set 'lora_name_17'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(56, value) } 
//set 'model_str_17'(value : FLOAT)  { super.$$link(57, value) } 
//set 'clip_str_17'(value : FLOAT)  { super.$$link(58, value) } 
//set 'lora_name_18'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(59, value) } 
//set 'model_str_18'(value : FLOAT)  { super.$$link(60, value) } 
//set 'clip_str_18'(value : FLOAT)  { super.$$link(61, value) } 
//set 'lora_name_19'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(62, value) } 
//set 'model_str_19'(value : FLOAT)  { super.$$link(63, value) } 
//set 'clip_str_19'(value : FLOAT)  { super.$$link(64, value) } 
//set 'lora_name_20'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(65, value) } 
//set 'model_str_20'(value : FLOAT)  { super.$$link(66, value) } 
//set 'clip_str_20'(value : FLOAT)  { super.$$link(67, value) } 
//set 'lora_name_21'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(68, value) } 
//set 'model_str_21'(value : FLOAT)  { super.$$link(69, value) } 
//set 'clip_str_21'(value : FLOAT)  { super.$$link(70, value) } 
//set 'lora_name_22'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(71, value) } 
//set 'model_str_22'(value : FLOAT)  { super.$$link(72, value) } 
//set 'clip_str_22'(value : FLOAT)  { super.$$link(73, value) } 
//set 'lora_name_23'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(74, value) } 
//set 'model_str_23'(value : FLOAT)  { super.$$link(75, value) } 
//set 'clip_str_23'(value : FLOAT)  { super.$$link(76, value) } 
//set 'lora_name_24'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(77, value) } 
//set 'model_str_24'(value : FLOAT)  { super.$$link(78, value) } 
//set 'clip_str_24'(value : FLOAT)  { super.$$link(79, value) } 
//set 'lora_name_25'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(80, value) } 
//set 'model_str_25'(value : FLOAT)  { super.$$link(81, value) } 
//set 'clip_str_25'(value : FLOAT)  { super.$$link(82, value) } 
//set 'lora_name_26'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(83, value) } 
//set 'model_str_26'(value : FLOAT)  { super.$$link(84, value) } 
//set 'clip_str_26'(value : FLOAT)  { super.$$link(85, value) } 
//set 'lora_name_27'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(86, value) } 
//set 'model_str_27'(value : FLOAT)  { super.$$link(87, value) } 
//set 'clip_str_27'(value : FLOAT)  { super.$$link(88, value) } 
//set 'lora_name_28'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(89, value) } 
//set 'model_str_28'(value : FLOAT)  { super.$$link(90, value) } 
//set 'clip_str_28'(value : FLOAT)  { super.$$link(91, value) } 
//set 'lora_name_29'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(92, value) } 
//set 'model_str_29'(value : FLOAT)  { super.$$link(93, value) } 
//set 'clip_str_29'(value : FLOAT)  { super.$$link(94, value) } 
//set 'lora_name_30'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(95, value) } 
//set 'model_str_30'(value : FLOAT)  { super.$$link(96, value) } 
//set 'clip_str_30'(value : FLOAT)  { super.$$link(97, value) } 
//set 'lora_name_31'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(98, value) } 
//set 'model_str_31'(value : FLOAT)  { super.$$link(99, value) } 
//set 'clip_str_31'(value : FLOAT)  { super.$$link(100, value) } 
//set 'lora_name_32'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(101, value) } 
//set 'model_str_32'(value : FLOAT)  { super.$$link(102, value) } 
//set 'clip_str_32'(value : FLOAT)  { super.$$link(103, value) } 
//set 'lora_name_33'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(104, value) } 
//set 'model_str_33'(value : FLOAT)  { super.$$link(105, value) } 
//set 'clip_str_33'(value : FLOAT)  { super.$$link(106, value) } 
//set 'lora_name_34'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(107, value) } 
//set 'model_str_34'(value : FLOAT)  { super.$$link(108, value) } 
//set 'clip_str_34'(value : FLOAT)  { super.$$link(109, value) } 
//set 'lora_name_35'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(110, value) } 
//set 'model_str_35'(value : FLOAT)  { super.$$link(111, value) } 
//set 'clip_str_35'(value : FLOAT)  { super.$$link(112, value) } 
//set 'lora_name_36'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(113, value) } 
//set 'model_str_36'(value : FLOAT)  { super.$$link(114, value) } 
//set 'clip_str_36'(value : FLOAT)  { super.$$link(115, value) } 
//set 'lora_name_37'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(116, value) } 
//set 'model_str_37'(value : FLOAT)  { super.$$link(117, value) } 
//set 'clip_str_37'(value : FLOAT)  { super.$$link(118, value) } 
//set 'lora_name_38'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(119, value) } 
//set 'model_str_38'(value : FLOAT)  { super.$$link(120, value) } 
//set 'clip_str_38'(value : FLOAT)  { super.$$link(121, value) } 
//set 'lora_name_39'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(122, value) } 
//set 'model_str_39'(value : FLOAT)  { super.$$link(123, value) } 
//set 'clip_str_39'(value : FLOAT)  { super.$$link(124, value) } 
//set 'lora_name_40'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(125, value) } 
//set 'model_str_40'(value : FLOAT)  { super.$$link(126, value) } 
//set 'clip_str_40'(value : FLOAT)  { super.$$link(127, value) } 
//set 'lora_name_41'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(128, value) } 
//set 'model_str_41'(value : FLOAT)  { super.$$link(129, value) } 
//set 'clip_str_41'(value : FLOAT)  { super.$$link(130, value) } 
//set 'lora_name_42'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(131, value) } 
//set 'model_str_42'(value : FLOAT)  { super.$$link(132, value) } 
//set 'clip_str_42'(value : FLOAT)  { super.$$link(133, value) } 
//set 'lora_name_43'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(134, value) } 
//set 'model_str_43'(value : FLOAT)  { super.$$link(135, value) } 
//set 'clip_str_43'(value : FLOAT)  { super.$$link(136, value) } 
//set 'lora_name_44'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(137, value) } 
//set 'model_str_44'(value : FLOAT)  { super.$$link(138, value) } 
//set 'clip_str_44'(value : FLOAT)  { super.$$link(139, value) } 
//set 'lora_name_45'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(140, value) } 
//set 'model_str_45'(value : FLOAT)  { super.$$link(141, value) } 
//set 'clip_str_45'(value : FLOAT)  { super.$$link(142, value) } 
//set 'lora_name_46'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(143, value) } 
//set 'model_str_46'(value : FLOAT)  { super.$$link(144, value) } 
//set 'clip_str_46'(value : FLOAT)  { super.$$link(145, value) } 
//set 'lora_name_47'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(146, value) } 
//set 'model_str_47'(value : FLOAT)  { super.$$link(147, value) } 
//set 'clip_str_47'(value : FLOAT)  { super.$$link(148, value) } 
//set 'lora_name_48'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(149, value) } 
//set 'model_str_48'(value : FLOAT)  { super.$$link(150, value) } 
//set 'clip_str_48'(value : FLOAT)  { super.$$link(151, value) } 
//set 'lora_name_49'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(152, value) } 
//set 'model_str_49'(value : FLOAT)  { super.$$link(153, value) } 
//set 'clip_str_49'(value : FLOAT)  { super.$$link(154, value) } 
//set 'lora_name_50'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(155, value) } 
//set 'model_str_50'(value : FLOAT)  { super.$$link(156, value) } 
//set 'clip_str_50'(value : FLOAT)  { super.$$link(157, value) } 
//set 'lora_stack'(value : LORA_STACK)  { super.$$link(158, value) } 

        //Getters
        get 'X or Y'() : XY { return [this.$uid.toString(), 0]  as unknown as XY; }

        /**
          * Constructor
		 * @param opts.input_mode
		 * @param opts.batch_path default: "/example_folder"
		 * @param opts.subdirectories
		 * @param opts.batch_sort
		 * @param opts.batch_max default: -1 max: 50 min: -1 step: 1
		 * @param opts.lora_count default: 3 step: 1
		 * @param opts.model_strength default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_strength default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_1
		 * @param opts.model_str_1 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_1 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_2
		 * @param opts.model_str_2 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_2 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_3
		 * @param opts.model_str_3 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_3 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_4
		 * @param opts.model_str_4 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_4 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_5
		 * @param opts.model_str_5 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_5 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_6
		 * @param opts.model_str_6 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_6 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_7
		 * @param opts.model_str_7 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_7 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_8
		 * @param opts.model_str_8 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_8 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_9
		 * @param opts.model_str_9 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_9 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_10
		 * @param opts.model_str_10 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_10 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_11
		 * @param opts.model_str_11 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_11 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_12
		 * @param opts.model_str_12 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_12 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_13
		 * @param opts.model_str_13 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_13 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_14
		 * @param opts.model_str_14 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_14 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_15
		 * @param opts.model_str_15 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_15 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_16
		 * @param opts.model_str_16 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_16 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_17
		 * @param opts.model_str_17 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_17 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_18
		 * @param opts.model_str_18 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_18 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_19
		 * @param opts.model_str_19 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_19 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_20
		 * @param opts.model_str_20 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_20 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_21
		 * @param opts.model_str_21 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_21 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_22
		 * @param opts.model_str_22 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_22 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_23
		 * @param opts.model_str_23 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_23 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_24
		 * @param opts.model_str_24 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_24 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_25
		 * @param opts.model_str_25 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_25 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_26
		 * @param opts.model_str_26 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_26 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_27
		 * @param opts.model_str_27 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_27 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_28
		 * @param opts.model_str_28 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_28 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_29
		 * @param opts.model_str_29 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_29 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_30
		 * @param opts.model_str_30 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_30 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_31
		 * @param opts.model_str_31 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_31 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_32
		 * @param opts.model_str_32 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_32 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_33
		 * @param opts.model_str_33 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_33 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_34
		 * @param opts.model_str_34 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_34 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_35
		 * @param opts.model_str_35 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_35 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_36
		 * @param opts.model_str_36 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_36 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_37
		 * @param opts.model_str_37 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_37 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_38
		 * @param opts.model_str_38 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_38 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_39
		 * @param opts.model_str_39 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_39 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_40
		 * @param opts.model_str_40 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_40 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_41
		 * @param opts.model_str_41 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_41 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_42
		 * @param opts.model_str_42 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_42 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_43
		 * @param opts.model_str_43 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_43 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_44
		 * @param opts.model_str_44 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_44 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_45
		 * @param opts.model_str_45 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_45 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_46
		 * @param opts.model_str_46 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_46 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_47
		 * @param opts.model_str_47 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_47 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_48
		 * @param opts.model_str_48 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_48 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_49
		 * @param opts.model_str_49 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_49 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_name_50
		 * @param opts.model_str_50 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_str_50 default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.lora_stack}
        */
        constructor(opts:{
            'input_mode': 'LoRA Names'|'LoRA Names+Weights'|'LoRA Batch'| $dyn,'batch_path'?: STRING,'subdirectories'?: BOOLEAN,'batch_sort': 'ascending'|'descending'| $dyn,'batch_max'?: INT,'lora_count'?: INT,'model_strength'?: FLOAT,'clip_strength'?: FLOAT,'lora_name_1': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_1'?: FLOAT,'clip_str_1'?: FLOAT,'lora_name_2': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_2'?: FLOAT,'clip_str_2'?: FLOAT,'lora_name_3': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_3'?: FLOAT,'clip_str_3'?: FLOAT,'lora_name_4': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_4'?: FLOAT,'clip_str_4'?: FLOAT,'lora_name_5': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_5'?: FLOAT,'clip_str_5'?: FLOAT,'lora_name_6': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_6'?: FLOAT,'clip_str_6'?: FLOAT,'lora_name_7': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_7'?: FLOAT,'clip_str_7'?: FLOAT,'lora_name_8': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_8'?: FLOAT,'clip_str_8'?: FLOAT,'lora_name_9': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_9'?: FLOAT,'clip_str_9'?: FLOAT,'lora_name_10': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_10'?: FLOAT,'clip_str_10'?: FLOAT,'lora_name_11': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_11'?: FLOAT,'clip_str_11'?: FLOAT,'lora_name_12': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_12'?: FLOAT,'clip_str_12'?: FLOAT,'lora_name_13': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_13'?: FLOAT,'clip_str_13'?: FLOAT,'lora_name_14': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_14'?: FLOAT,'clip_str_14'?: FLOAT,'lora_name_15': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_15'?: FLOAT,'clip_str_15'?: FLOAT,'lora_name_16': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_16'?: FLOAT,'clip_str_16'?: FLOAT,'lora_name_17': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_17'?: FLOAT,'clip_str_17'?: FLOAT,'lora_name_18': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_18'?: FLOAT,'clip_str_18'?: FLOAT,'lora_name_19': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_19'?: FLOAT,'clip_str_19'?: FLOAT,'lora_name_20': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_20'?: FLOAT,'clip_str_20'?: FLOAT,'lora_name_21': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_21'?: FLOAT,'clip_str_21'?: FLOAT,'lora_name_22': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_22'?: FLOAT,'clip_str_22'?: FLOAT,'lora_name_23': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_23'?: FLOAT,'clip_str_23'?: FLOAT,'lora_name_24': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_24'?: FLOAT,'clip_str_24'?: FLOAT,'lora_name_25': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_25'?: FLOAT,'clip_str_25'?: FLOAT,'lora_name_26': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_26'?: FLOAT,'clip_str_26'?: FLOAT,'lora_name_27': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_27'?: FLOAT,'clip_str_27'?: FLOAT,'lora_name_28': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_28'?: FLOAT,'clip_str_28'?: FLOAT,'lora_name_29': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_29'?: FLOAT,'clip_str_29'?: FLOAT,'lora_name_30': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_30'?: FLOAT,'clip_str_30'?: FLOAT,'lora_name_31': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_31'?: FLOAT,'clip_str_31'?: FLOAT,'lora_name_32': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_32'?: FLOAT,'clip_str_32'?: FLOAT,'lora_name_33': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_33'?: FLOAT,'clip_str_33'?: FLOAT,'lora_name_34': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_34'?: FLOAT,'clip_str_34'?: FLOAT,'lora_name_35': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_35'?: FLOAT,'clip_str_35'?: FLOAT,'lora_name_36': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_36'?: FLOAT,'clip_str_36'?: FLOAT,'lora_name_37': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_37'?: FLOAT,'clip_str_37'?: FLOAT,'lora_name_38': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_38'?: FLOAT,'clip_str_38'?: FLOAT,'lora_name_39': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_39'?: FLOAT,'clip_str_39'?: FLOAT,'lora_name_40': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_40'?: FLOAT,'clip_str_40'?: FLOAT,'lora_name_41': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_41'?: FLOAT,'clip_str_41'?: FLOAT,'lora_name_42': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_42'?: FLOAT,'clip_str_42'?: FLOAT,'lora_name_43': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_43'?: FLOAT,'clip_str_43'?: FLOAT,'lora_name_44': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_44'?: FLOAT,'clip_str_44'?: FLOAT,'lora_name_45': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_45'?: FLOAT,'clip_str_45'?: FLOAT,'lora_name_46': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_46'?: FLOAT,'clip_str_46'?: FLOAT,'lora_name_47': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_47'?: FLOAT,'clip_str_47'?: FLOAT,'lora_name_48': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_48'?: FLOAT,'clip_str_48'?: FLOAT,'lora_name_49': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_49'?: FLOAT,'clip_str_49'?: FLOAT,'lora_name_50': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_str_50'?: FLOAT,'clip_str_50'?: FLOAT,'lora_stack'?: LORA_STACK
        }){
            super(ctx);

            super.$$link("input_mode", opts['input_mode'])
super.$$link("batch_path", opts['batch_path']??tmp["XY Input: LoRA"].defaults['batch_path'])
super.$$link("subdirectories", opts['subdirectories']??tmp["XY Input: LoRA"].defaults['subdirectories'])
super.$$link("batch_sort", opts['batch_sort'])
super.$$link("batch_max", opts['batch_max']??tmp["XY Input: LoRA"].defaults['batch_max'])
super.$$link("lora_count", opts['lora_count']??tmp["XY Input: LoRA"].defaults['lora_count'])
super.$$link("model_strength", opts['model_strength']??tmp["XY Input: LoRA"].defaults['model_strength'])
super.$$link("clip_strength", opts['clip_strength']??tmp["XY Input: LoRA"].defaults['clip_strength'])
super.$$link("lora_name_1", opts['lora_name_1'])
super.$$link("model_str_1", opts['model_str_1']??tmp["XY Input: LoRA"].defaults['model_str_1'])
super.$$link("clip_str_1", opts['clip_str_1']??tmp["XY Input: LoRA"].defaults['clip_str_1'])
super.$$link("lora_name_2", opts['lora_name_2'])
super.$$link("model_str_2", opts['model_str_2']??tmp["XY Input: LoRA"].defaults['model_str_2'])
super.$$link("clip_str_2", opts['clip_str_2']??tmp["XY Input: LoRA"].defaults['clip_str_2'])
super.$$link("lora_name_3", opts['lora_name_3'])
super.$$link("model_str_3", opts['model_str_3']??tmp["XY Input: LoRA"].defaults['model_str_3'])
super.$$link("clip_str_3", opts['clip_str_3']??tmp["XY Input: LoRA"].defaults['clip_str_3'])
super.$$link("lora_name_4", opts['lora_name_4'])
super.$$link("model_str_4", opts['model_str_4']??tmp["XY Input: LoRA"].defaults['model_str_4'])
super.$$link("clip_str_4", opts['clip_str_4']??tmp["XY Input: LoRA"].defaults['clip_str_4'])
super.$$link("lora_name_5", opts['lora_name_5'])
super.$$link("model_str_5", opts['model_str_5']??tmp["XY Input: LoRA"].defaults['model_str_5'])
super.$$link("clip_str_5", opts['clip_str_5']??tmp["XY Input: LoRA"].defaults['clip_str_5'])
super.$$link("lora_name_6", opts['lora_name_6'])
super.$$link("model_str_6", opts['model_str_6']??tmp["XY Input: LoRA"].defaults['model_str_6'])
super.$$link("clip_str_6", opts['clip_str_6']??tmp["XY Input: LoRA"].defaults['clip_str_6'])
super.$$link("lora_name_7", opts['lora_name_7'])
super.$$link("model_str_7", opts['model_str_7']??tmp["XY Input: LoRA"].defaults['model_str_7'])
super.$$link("clip_str_7", opts['clip_str_7']??tmp["XY Input: LoRA"].defaults['clip_str_7'])
super.$$link("lora_name_8", opts['lora_name_8'])
super.$$link("model_str_8", opts['model_str_8']??tmp["XY Input: LoRA"].defaults['model_str_8'])
super.$$link("clip_str_8", opts['clip_str_8']??tmp["XY Input: LoRA"].defaults['clip_str_8'])
super.$$link("lora_name_9", opts['lora_name_9'])
super.$$link("model_str_9", opts['model_str_9']??tmp["XY Input: LoRA"].defaults['model_str_9'])
super.$$link("clip_str_9", opts['clip_str_9']??tmp["XY Input: LoRA"].defaults['clip_str_9'])
super.$$link("lora_name_10", opts['lora_name_10'])
super.$$link("model_str_10", opts['model_str_10']??tmp["XY Input: LoRA"].defaults['model_str_10'])
super.$$link("clip_str_10", opts['clip_str_10']??tmp["XY Input: LoRA"].defaults['clip_str_10'])
super.$$link("lora_name_11", opts['lora_name_11'])
super.$$link("model_str_11", opts['model_str_11']??tmp["XY Input: LoRA"].defaults['model_str_11'])
super.$$link("clip_str_11", opts['clip_str_11']??tmp["XY Input: LoRA"].defaults['clip_str_11'])
super.$$link("lora_name_12", opts['lora_name_12'])
super.$$link("model_str_12", opts['model_str_12']??tmp["XY Input: LoRA"].defaults['model_str_12'])
super.$$link("clip_str_12", opts['clip_str_12']??tmp["XY Input: LoRA"].defaults['clip_str_12'])
super.$$link("lora_name_13", opts['lora_name_13'])
super.$$link("model_str_13", opts['model_str_13']??tmp["XY Input: LoRA"].defaults['model_str_13'])
super.$$link("clip_str_13", opts['clip_str_13']??tmp["XY Input: LoRA"].defaults['clip_str_13'])
super.$$link("lora_name_14", opts['lora_name_14'])
super.$$link("model_str_14", opts['model_str_14']??tmp["XY Input: LoRA"].defaults['model_str_14'])
super.$$link("clip_str_14", opts['clip_str_14']??tmp["XY Input: LoRA"].defaults['clip_str_14'])
super.$$link("lora_name_15", opts['lora_name_15'])
super.$$link("model_str_15", opts['model_str_15']??tmp["XY Input: LoRA"].defaults['model_str_15'])
super.$$link("clip_str_15", opts['clip_str_15']??tmp["XY Input: LoRA"].defaults['clip_str_15'])
super.$$link("lora_name_16", opts['lora_name_16'])
super.$$link("model_str_16", opts['model_str_16']??tmp["XY Input: LoRA"].defaults['model_str_16'])
super.$$link("clip_str_16", opts['clip_str_16']??tmp["XY Input: LoRA"].defaults['clip_str_16'])
super.$$link("lora_name_17", opts['lora_name_17'])
super.$$link("model_str_17", opts['model_str_17']??tmp["XY Input: LoRA"].defaults['model_str_17'])
super.$$link("clip_str_17", opts['clip_str_17']??tmp["XY Input: LoRA"].defaults['clip_str_17'])
super.$$link("lora_name_18", opts['lora_name_18'])
super.$$link("model_str_18", opts['model_str_18']??tmp["XY Input: LoRA"].defaults['model_str_18'])
super.$$link("clip_str_18", opts['clip_str_18']??tmp["XY Input: LoRA"].defaults['clip_str_18'])
super.$$link("lora_name_19", opts['lora_name_19'])
super.$$link("model_str_19", opts['model_str_19']??tmp["XY Input: LoRA"].defaults['model_str_19'])
super.$$link("clip_str_19", opts['clip_str_19']??tmp["XY Input: LoRA"].defaults['clip_str_19'])
super.$$link("lora_name_20", opts['lora_name_20'])
super.$$link("model_str_20", opts['model_str_20']??tmp["XY Input: LoRA"].defaults['model_str_20'])
super.$$link("clip_str_20", opts['clip_str_20']??tmp["XY Input: LoRA"].defaults['clip_str_20'])
super.$$link("lora_name_21", opts['lora_name_21'])
super.$$link("model_str_21", opts['model_str_21']??tmp["XY Input: LoRA"].defaults['model_str_21'])
super.$$link("clip_str_21", opts['clip_str_21']??tmp["XY Input: LoRA"].defaults['clip_str_21'])
super.$$link("lora_name_22", opts['lora_name_22'])
super.$$link("model_str_22", opts['model_str_22']??tmp["XY Input: LoRA"].defaults['model_str_22'])
super.$$link("clip_str_22", opts['clip_str_22']??tmp["XY Input: LoRA"].defaults['clip_str_22'])
super.$$link("lora_name_23", opts['lora_name_23'])
super.$$link("model_str_23", opts['model_str_23']??tmp["XY Input: LoRA"].defaults['model_str_23'])
super.$$link("clip_str_23", opts['clip_str_23']??tmp["XY Input: LoRA"].defaults['clip_str_23'])
super.$$link("lora_name_24", opts['lora_name_24'])
super.$$link("model_str_24", opts['model_str_24']??tmp["XY Input: LoRA"].defaults['model_str_24'])
super.$$link("clip_str_24", opts['clip_str_24']??tmp["XY Input: LoRA"].defaults['clip_str_24'])
super.$$link("lora_name_25", opts['lora_name_25'])
super.$$link("model_str_25", opts['model_str_25']??tmp["XY Input: LoRA"].defaults['model_str_25'])
super.$$link("clip_str_25", opts['clip_str_25']??tmp["XY Input: LoRA"].defaults['clip_str_25'])
super.$$link("lora_name_26", opts['lora_name_26'])
super.$$link("model_str_26", opts['model_str_26']??tmp["XY Input: LoRA"].defaults['model_str_26'])
super.$$link("clip_str_26", opts['clip_str_26']??tmp["XY Input: LoRA"].defaults['clip_str_26'])
super.$$link("lora_name_27", opts['lora_name_27'])
super.$$link("model_str_27", opts['model_str_27']??tmp["XY Input: LoRA"].defaults['model_str_27'])
super.$$link("clip_str_27", opts['clip_str_27']??tmp["XY Input: LoRA"].defaults['clip_str_27'])
super.$$link("lora_name_28", opts['lora_name_28'])
super.$$link("model_str_28", opts['model_str_28']??tmp["XY Input: LoRA"].defaults['model_str_28'])
super.$$link("clip_str_28", opts['clip_str_28']??tmp["XY Input: LoRA"].defaults['clip_str_28'])
super.$$link("lora_name_29", opts['lora_name_29'])
super.$$link("model_str_29", opts['model_str_29']??tmp["XY Input: LoRA"].defaults['model_str_29'])
super.$$link("clip_str_29", opts['clip_str_29']??tmp["XY Input: LoRA"].defaults['clip_str_29'])
super.$$link("lora_name_30", opts['lora_name_30'])
super.$$link("model_str_30", opts['model_str_30']??tmp["XY Input: LoRA"].defaults['model_str_30'])
super.$$link("clip_str_30", opts['clip_str_30']??tmp["XY Input: LoRA"].defaults['clip_str_30'])
super.$$link("lora_name_31", opts['lora_name_31'])
super.$$link("model_str_31", opts['model_str_31']??tmp["XY Input: LoRA"].defaults['model_str_31'])
super.$$link("clip_str_31", opts['clip_str_31']??tmp["XY Input: LoRA"].defaults['clip_str_31'])
super.$$link("lora_name_32", opts['lora_name_32'])
super.$$link("model_str_32", opts['model_str_32']??tmp["XY Input: LoRA"].defaults['model_str_32'])
super.$$link("clip_str_32", opts['clip_str_32']??tmp["XY Input: LoRA"].defaults['clip_str_32'])
super.$$link("lora_name_33", opts['lora_name_33'])
super.$$link("model_str_33", opts['model_str_33']??tmp["XY Input: LoRA"].defaults['model_str_33'])
super.$$link("clip_str_33", opts['clip_str_33']??tmp["XY Input: LoRA"].defaults['clip_str_33'])
super.$$link("lora_name_34", opts['lora_name_34'])
super.$$link("model_str_34", opts['model_str_34']??tmp["XY Input: LoRA"].defaults['model_str_34'])
super.$$link("clip_str_34", opts['clip_str_34']??tmp["XY Input: LoRA"].defaults['clip_str_34'])
super.$$link("lora_name_35", opts['lora_name_35'])
super.$$link("model_str_35", opts['model_str_35']??tmp["XY Input: LoRA"].defaults['model_str_35'])
super.$$link("clip_str_35", opts['clip_str_35']??tmp["XY Input: LoRA"].defaults['clip_str_35'])
super.$$link("lora_name_36", opts['lora_name_36'])
super.$$link("model_str_36", opts['model_str_36']??tmp["XY Input: LoRA"].defaults['model_str_36'])
super.$$link("clip_str_36", opts['clip_str_36']??tmp["XY Input: LoRA"].defaults['clip_str_36'])
super.$$link("lora_name_37", opts['lora_name_37'])
super.$$link("model_str_37", opts['model_str_37']??tmp["XY Input: LoRA"].defaults['model_str_37'])
super.$$link("clip_str_37", opts['clip_str_37']??tmp["XY Input: LoRA"].defaults['clip_str_37'])
super.$$link("lora_name_38", opts['lora_name_38'])
super.$$link("model_str_38", opts['model_str_38']??tmp["XY Input: LoRA"].defaults['model_str_38'])
super.$$link("clip_str_38", opts['clip_str_38']??tmp["XY Input: LoRA"].defaults['clip_str_38'])
super.$$link("lora_name_39", opts['lora_name_39'])
super.$$link("model_str_39", opts['model_str_39']??tmp["XY Input: LoRA"].defaults['model_str_39'])
super.$$link("clip_str_39", opts['clip_str_39']??tmp["XY Input: LoRA"].defaults['clip_str_39'])
super.$$link("lora_name_40", opts['lora_name_40'])
super.$$link("model_str_40", opts['model_str_40']??tmp["XY Input: LoRA"].defaults['model_str_40'])
super.$$link("clip_str_40", opts['clip_str_40']??tmp["XY Input: LoRA"].defaults['clip_str_40'])
super.$$link("lora_name_41", opts['lora_name_41'])
super.$$link("model_str_41", opts['model_str_41']??tmp["XY Input: LoRA"].defaults['model_str_41'])
super.$$link("clip_str_41", opts['clip_str_41']??tmp["XY Input: LoRA"].defaults['clip_str_41'])
super.$$link("lora_name_42", opts['lora_name_42'])
super.$$link("model_str_42", opts['model_str_42']??tmp["XY Input: LoRA"].defaults['model_str_42'])
super.$$link("clip_str_42", opts['clip_str_42']??tmp["XY Input: LoRA"].defaults['clip_str_42'])
super.$$link("lora_name_43", opts['lora_name_43'])
super.$$link("model_str_43", opts['model_str_43']??tmp["XY Input: LoRA"].defaults['model_str_43'])
super.$$link("clip_str_43", opts['clip_str_43']??tmp["XY Input: LoRA"].defaults['clip_str_43'])
super.$$link("lora_name_44", opts['lora_name_44'])
super.$$link("model_str_44", opts['model_str_44']??tmp["XY Input: LoRA"].defaults['model_str_44'])
super.$$link("clip_str_44", opts['clip_str_44']??tmp["XY Input: LoRA"].defaults['clip_str_44'])
super.$$link("lora_name_45", opts['lora_name_45'])
super.$$link("model_str_45", opts['model_str_45']??tmp["XY Input: LoRA"].defaults['model_str_45'])
super.$$link("clip_str_45", opts['clip_str_45']??tmp["XY Input: LoRA"].defaults['clip_str_45'])
super.$$link("lora_name_46", opts['lora_name_46'])
super.$$link("model_str_46", opts['model_str_46']??tmp["XY Input: LoRA"].defaults['model_str_46'])
super.$$link("clip_str_46", opts['clip_str_46']??tmp["XY Input: LoRA"].defaults['clip_str_46'])
super.$$link("lora_name_47", opts['lora_name_47'])
super.$$link("model_str_47", opts['model_str_47']??tmp["XY Input: LoRA"].defaults['model_str_47'])
super.$$link("clip_str_47", opts['clip_str_47']??tmp["XY Input: LoRA"].defaults['clip_str_47'])
super.$$link("lora_name_48", opts['lora_name_48'])
super.$$link("model_str_48", opts['model_str_48']??tmp["XY Input: LoRA"].defaults['model_str_48'])
super.$$link("clip_str_48", opts['clip_str_48']??tmp["XY Input: LoRA"].defaults['clip_str_48'])
super.$$link("lora_name_49", opts['lora_name_49'])
super.$$link("model_str_49", opts['model_str_49']??tmp["XY Input: LoRA"].defaults['model_str_49'])
super.$$link("clip_str_49", opts['clip_str_49']??tmp["XY Input: LoRA"].defaults['clip_str_49'])
super.$$link("lora_name_50", opts['lora_name_50'])
super.$$link("model_str_50", opts['model_str_50']??tmp["XY Input: LoRA"].defaults['model_str_50'])
super.$$link("clip_str_50", opts['clip_str_50']??tmp["XY Input: LoRA"].defaults['clip_str_50'])
super.$$link("lora_stack", opts['lora_stack'])
}

        static defaults = {
    'batch_path':  "/example_folder",
'subdirectories':  false,
'batch_max':  -1,
'lora_count':  3,
'model_strength':  1,
'clip_strength':  1,
'model_str_1':  1,
'clip_str_1':  1,
'model_str_2':  1,
'clip_str_2':  1,
'model_str_3':  1,
'clip_str_3':  1,
'model_str_4':  1,
'clip_str_4':  1,
'model_str_5':  1,
'clip_str_5':  1,
'model_str_6':  1,
'clip_str_6':  1,
'model_str_7':  1,
'clip_str_7':  1,
'model_str_8':  1,
'clip_str_8':  1,
'model_str_9':  1,
'clip_str_9':  1,
'model_str_10':  1,
'clip_str_10':  1,
'model_str_11':  1,
'clip_str_11':  1,
'model_str_12':  1,
'clip_str_12':  1,
'model_str_13':  1,
'clip_str_13':  1,
'model_str_14':  1,
'clip_str_14':  1,
'model_str_15':  1,
'clip_str_15':  1,
'model_str_16':  1,
'clip_str_16':  1,
'model_str_17':  1,
'clip_str_17':  1,
'model_str_18':  1,
'clip_str_18':  1,
'model_str_19':  1,
'clip_str_19':  1,
'model_str_20':  1,
'clip_str_20':  1,
'model_str_21':  1,
'clip_str_21':  1,
'model_str_22':  1,
'clip_str_22':  1,
'model_str_23':  1,
'clip_str_23':  1,
'model_str_24':  1,
'clip_str_24':  1,
'model_str_25':  1,
'clip_str_25':  1,
'model_str_26':  1,
'clip_str_26':  1,
'model_str_27':  1,
'clip_str_27':  1,
'model_str_28':  1,
'clip_str_28':  1,
'model_str_29':  1,
'clip_str_29':  1,
'model_str_30':  1,
'clip_str_30':  1,
'model_str_31':  1,
'clip_str_31':  1,
'model_str_32':  1,
'clip_str_32':  1,
'model_str_33':  1,
'clip_str_33':  1,
'model_str_34':  1,
'clip_str_34':  1,
'model_str_35':  1,
'clip_str_35':  1,
'model_str_36':  1,
'clip_str_36':  1,
'model_str_37':  1,
'clip_str_37':  1,
'model_str_38':  1,
'clip_str_38':  1,
'model_str_39':  1,
'clip_str_39':  1,
'model_str_40':  1,
'clip_str_40':  1,
'model_str_41':  1,
'clip_str_41':  1,
'model_str_42':  1,
'clip_str_42':  1,
'model_str_43':  1,
'clip_str_43':  1,
'model_str_44':  1,
'clip_str_44':  1,
'model_str_45':  1,
'clip_str_45':  1,
'model_str_46':  1,
'clip_str_46':  1,
'model_str_47':  1,
'clip_str_47':  1,
'model_str_48':  1,
'clip_str_48':  1,
'model_str_49':  1,
'clip_str_49':  1,
'model_str_50':  1,
'clip_str_50':  1
}
        protected override $$type(){
            return "XY Input: LoRA"
        }
},

    /**
     * XY Input: LoRA Plot from Efficiency Nodes/XY Inputs
     * @desc 
    */
    "XY Input: LoRA Plot" : class extends Node{
        //Setters
        //set 'input_mode'(value : 'X: LoRA Batch, Y: LoRA Weight'|'X: LoRA Batch, Y: Model Strength'|'X: LoRA Batch, Y: Clip Strength'|'X: Model Strength, Y: Clip Strength'| $dyn)  { super.$$link(0, value) } 
//set 'lora_name'(value : 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(1, value) } 
//set 'model_strength'(value : FLOAT)  { super.$$link(2, value) } 
//set 'clip_strength'(value : FLOAT)  { super.$$link(3, value) } 
//set 'X_batch_count'(value : INT)  { super.$$link(4, value) } 
//set 'X_batch_path'(value : STRING)  { super.$$link(5, value) } 
//set 'X_subdirectories'(value : BOOLEAN)  { super.$$link(6, value) } 
//set 'X_batch_sort'(value : 'ascending'|'descending'| $dyn)  { super.$$link(7, value) } 
//set 'X_first_value'(value : FLOAT)  { super.$$link(8, value) } 
//set 'X_last_value'(value : FLOAT)  { super.$$link(9, value) } 
//set 'Y_batch_count'(value : INT)  { super.$$link(10, value) } 
//set 'Y_first_value'(value : FLOAT)  { super.$$link(11, value) } 
//set 'Y_last_value'(value : FLOAT)  { super.$$link(12, value) } 
//set 'lora_stack'(value : LORA_STACK)  { super.$$link(13, value) } 

        //Getters
        get 'X'() : XY { return [this.$uid.toString(), 0]  as unknown as XY; }
get 'Y'() : XY { return [this.$uid.toString(), 1]  as unknown as XY; }

        /**
          * Constructor
		 * @param opts.input_mode
		 * @param opts.lora_name
		 * @param opts.model_strength default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.clip_strength default: 1 max: 10 min: -10 step: 0.01
		 * @param opts.X_batch_count default: 3
		 * @param opts.X_batch_path default: "/example_folder"
		 * @param opts.X_subdirectories
		 * @param opts.X_batch_sort
		 * @param opts.X_first_value step: 0.01
		 * @param opts.X_last_value default: 1 step: 0.01
		 * @param opts.Y_batch_count default: 3
		 * @param opts.Y_first_value step: 0.01
		 * @param opts.Y_last_value default: 1 step: 0.01
		 * @param opts.lora_stack}
        */
        constructor(opts:{
            'input_mode': 'X: LoRA Batch, Y: LoRA Weight'|'X: LoRA Batch, Y: Model Strength'|'X: LoRA Batch, Y: Clip Strength'|'X: Model Strength, Y: Clip Strength'| $dyn,'lora_name': 'None'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'model_strength'?: FLOAT,'clip_strength'?: FLOAT,'X_batch_count'?: INT,'X_batch_path'?: STRING,'X_subdirectories'?: BOOLEAN,'X_batch_sort': 'ascending'|'descending'| $dyn,'X_first_value'?: FLOAT,'X_last_value'?: FLOAT,'Y_batch_count'?: INT,'Y_first_value'?: FLOAT,'Y_last_value'?: FLOAT,'lora_stack'?: LORA_STACK
        }){
            super(ctx);

            super.$$link("input_mode", opts['input_mode'])
super.$$link("lora_name", opts['lora_name'])
super.$$link("model_strength", opts['model_strength']??tmp["XY Input: LoRA Plot"].defaults['model_strength'])
super.$$link("clip_strength", opts['clip_strength']??tmp["XY Input: LoRA Plot"].defaults['clip_strength'])
super.$$link("X_batch_count", opts['X_batch_count']??tmp["XY Input: LoRA Plot"].defaults['X_batch_count'])
super.$$link("X_batch_path", opts['X_batch_path']??tmp["XY Input: LoRA Plot"].defaults['X_batch_path'])
super.$$link("X_subdirectories", opts['X_subdirectories']??tmp["XY Input: LoRA Plot"].defaults['X_subdirectories'])
super.$$link("X_batch_sort", opts['X_batch_sort'])
super.$$link("X_first_value", opts['X_first_value']??tmp["XY Input: LoRA Plot"].defaults['X_first_value'])
super.$$link("X_last_value", opts['X_last_value']??tmp["XY Input: LoRA Plot"].defaults['X_last_value'])
super.$$link("Y_batch_count", opts['Y_batch_count']??tmp["XY Input: LoRA Plot"].defaults['Y_batch_count'])
super.$$link("Y_first_value", opts['Y_first_value']??tmp["XY Input: LoRA Plot"].defaults['Y_first_value'])
super.$$link("Y_last_value", opts['Y_last_value']??tmp["XY Input: LoRA Plot"].defaults['Y_last_value'])
super.$$link("lora_stack", opts['lora_stack'])
}

        static defaults = {
    'model_strength':  1,
'clip_strength':  1,
'X_batch_count':  3,
'X_batch_path':  "/example_folder",
'X_subdirectories':  false,
'X_first_value':  0,
'X_last_value':  1,
'Y_batch_count':  3,
'Y_first_value':  0,
'Y_last_value':  1
}
        protected override $$type(){
            return "XY Input: LoRA Plot"
        }
},

    /**
     * XY Input: LoRA Stacks from Efficiency Nodes/XY Inputs
     * @desc 
    */
    "XY Input: LoRA Stacks" : class extends Node{
        //Setters
        //set 'node_state'(value : 'Enabled'| $dyn)  { super.$$link(0, value) } 
//set 'lora_stack_1'(value : LORA_STACK)  { super.$$link(1, value) } 
//set 'lora_stack_2'(value : LORA_STACK)  { super.$$link(2, value) } 
//set 'lora_stack_3'(value : LORA_STACK)  { super.$$link(3, value) } 
//set 'lora_stack_4'(value : LORA_STACK)  { super.$$link(4, value) } 
//set 'lora_stack_5'(value : LORA_STACK)  { super.$$link(5, value) } 

        //Getters
        get 'X or Y'() : XY { return [this.$uid.toString(), 0]  as unknown as XY; }

        /**
          * Constructor
		 * @param opts.node_state
		 * @param opts.lora_stack_1
		 * @param opts.lora_stack_2
		 * @param opts.lora_stack_3
		 * @param opts.lora_stack_4
		 * @param opts.lora_stack_5}
        */
        constructor(opts:{
            'node_state': 'Enabled'| $dyn,'lora_stack_1'?: LORA_STACK,'lora_stack_2'?: LORA_STACK,'lora_stack_3'?: LORA_STACK,'lora_stack_4'?: LORA_STACK,'lora_stack_5'?: LORA_STACK
        }){
            super(ctx);

            super.$$link("node_state", opts['node_state'])
super.$$link("lora_stack_1", opts['lora_stack_1'])
super.$$link("lora_stack_2", opts['lora_stack_2'])
super.$$link("lora_stack_3", opts['lora_stack_3'])
super.$$link("lora_stack_4", opts['lora_stack_4'])
super.$$link("lora_stack_5", opts['lora_stack_5'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "XY Input: LoRA Stacks"
        }
},

    /**
     * XY Input: Control Net from Efficiency Nodes/XY Inputs
     * @desc 
    */
    "XY Input: Control Net" : class extends Node{
        //Setters
        //set 'control_net'(value : CONTROL_NET)  { super.$$link(0, value) } 
//set 'image'(value : IMAGE)  { super.$$link(1, value) } 
//set 'target_parameter'(value : 'strength'|'start_percent'|'end_percent'| $dyn)  { super.$$link(2, value) } 
//set 'batch_count'(value : INT)  { super.$$link(3, value) } 
//set 'first_strength'(value : FLOAT)  { super.$$link(4, value) } 
//set 'last_strength'(value : FLOAT)  { super.$$link(5, value) } 
//set 'first_start_percent'(value : FLOAT)  { super.$$link(6, value) } 
//set 'last_start_percent'(value : FLOAT)  { super.$$link(7, value) } 
//set 'first_end_percent'(value : FLOAT)  { super.$$link(8, value) } 
//set 'last_end_percent'(value : FLOAT)  { super.$$link(9, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(10, value) } 
//set 'start_percent'(value : FLOAT)  { super.$$link(11, value) } 
//set 'end_percent'(value : FLOAT)  { super.$$link(12, value) } 
//set 'cnet_stack'(value : CONTROL_NET_STACK)  { super.$$link(13, value) } 

        //Getters
        get 'X or Y'() : XY { return [this.$uid.toString(), 0]  as unknown as XY; }

        /**
          * Constructor
		 * @param opts.control_net
		 * @param opts.image
		 * @param opts.target_parameter
		 * @param opts.batch_count default: 3
		 * @param opts.first_strength step: 0.01
		 * @param opts.last_strength default: 1 step: 0.01
		 * @param opts.first_start_percent step: 0.01
		 * @param opts.last_start_percent default: 1 step: 0.01
		 * @param opts.first_end_percent step: 0.01
		 * @param opts.last_end_percent default: 1 step: 0.01
		 * @param opts.strength default: 1 step: 0.01
		 * @param opts.start_percent step: 0.01
		 * @param opts.end_percent default: 1 step: 0.01
		 * @param opts.cnet_stack}
        */
        constructor(opts:{
            'control_net': CONTROL_NET,'image': IMAGE,'target_parameter': 'strength'|'start_percent'|'end_percent'| $dyn,'batch_count'?: INT,'first_strength'?: FLOAT,'last_strength'?: FLOAT,'first_start_percent'?: FLOAT,'last_start_percent'?: FLOAT,'first_end_percent'?: FLOAT,'last_end_percent'?: FLOAT,'strength'?: FLOAT,'start_percent'?: FLOAT,'end_percent'?: FLOAT,'cnet_stack'?: CONTROL_NET_STACK
        }){
            super(ctx);

            super.$$link("control_net", opts['control_net'])
super.$$link("image", opts['image'])
super.$$link("target_parameter", opts['target_parameter'])
super.$$link("batch_count", opts['batch_count']??tmp["XY Input: Control Net"].defaults['batch_count'])
super.$$link("first_strength", opts['first_strength']??tmp["XY Input: Control Net"].defaults['first_strength'])
super.$$link("last_strength", opts['last_strength']??tmp["XY Input: Control Net"].defaults['last_strength'])
super.$$link("first_start_percent", opts['first_start_percent']??tmp["XY Input: Control Net"].defaults['first_start_percent'])
super.$$link("last_start_percent", opts['last_start_percent']??tmp["XY Input: Control Net"].defaults['last_start_percent'])
super.$$link("first_end_percent", opts['first_end_percent']??tmp["XY Input: Control Net"].defaults['first_end_percent'])
super.$$link("last_end_percent", opts['last_end_percent']??tmp["XY Input: Control Net"].defaults['last_end_percent'])
super.$$link("strength", opts['strength']??tmp["XY Input: Control Net"].defaults['strength'])
super.$$link("start_percent", opts['start_percent']??tmp["XY Input: Control Net"].defaults['start_percent'])
super.$$link("end_percent", opts['end_percent']??tmp["XY Input: Control Net"].defaults['end_percent'])
super.$$link("cnet_stack", opts['cnet_stack'])
}

        static defaults = {
    'batch_count':  3,
'first_strength':  0,
'last_strength':  1,
'first_start_percent':  0,
'last_start_percent':  1,
'first_end_percent':  0,
'last_end_percent':  1,
'strength':  1,
'start_percent':  0,
'end_percent':  1
}
        protected override $$type(){
            return "XY Input: Control Net"
        }
},

    /**
     * XY Input: Control Net Plot from Efficiency Nodes/XY Inputs
     * @desc 
    */
    "XY Input: Control Net Plot" : class extends Node{
        //Setters
        //set 'control_net'(value : CONTROL_NET)  { super.$$link(0, value) } 
//set 'image'(value : IMAGE)  { super.$$link(1, value) } 
//set 'plot_type'(value : 'X: Strength, Y: Start%'|'X: Strength, Y: End%'|'X: Start%, Y: Strength'|'X: Start%, Y: End%'|'X: End%, Y: Strength'|'X: End%, Y: Start%'| $dyn)  { super.$$link(2, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(3, value) } 
//set 'start_percent'(value : FLOAT)  { super.$$link(4, value) } 
//set 'end_percent'(value : FLOAT)  { super.$$link(5, value) } 
//set 'X_batch_count'(value : INT)  { super.$$link(6, value) } 
//set 'X_first_value'(value : FLOAT)  { super.$$link(7, value) } 
//set 'X_last_value'(value : FLOAT)  { super.$$link(8, value) } 
//set 'Y_batch_count'(value : INT)  { super.$$link(9, value) } 
//set 'Y_first_value'(value : FLOAT)  { super.$$link(10, value) } 
//set 'Y_last_value'(value : FLOAT)  { super.$$link(11, value) } 
//set 'cnet_stack'(value : CONTROL_NET_STACK)  { super.$$link(12, value) } 

        //Getters
        get 'X'() : XY { return [this.$uid.toString(), 0]  as unknown as XY; }
get 'Y'() : XY { return [this.$uid.toString(), 1]  as unknown as XY; }

        /**
          * Constructor
		 * @param opts.control_net
		 * @param opts.image
		 * @param opts.plot_type
		 * @param opts.strength default: 1 step: 0.01
		 * @param opts.start_percent step: 0.01
		 * @param opts.end_percent default: 1 step: 0.01
		 * @param opts.X_batch_count default: 3
		 * @param opts.X_first_value step: 0.01
		 * @param opts.X_last_value default: 1 step: 0.01
		 * @param opts.Y_batch_count default: 3
		 * @param opts.Y_first_value step: 0.01
		 * @param opts.Y_last_value default: 1 step: 0.01
		 * @param opts.cnet_stack}
        */
        constructor(opts:{
            'control_net': CONTROL_NET,'image': IMAGE,'plot_type': 'X: Strength, Y: Start%'|'X: Strength, Y: End%'|'X: Start%, Y: Strength'|'X: Start%, Y: End%'|'X: End%, Y: Strength'|'X: End%, Y: Start%'| $dyn,'strength'?: FLOAT,'start_percent'?: FLOAT,'end_percent'?: FLOAT,'X_batch_count'?: INT,'X_first_value'?: FLOAT,'X_last_value'?: FLOAT,'Y_batch_count'?: INT,'Y_first_value'?: FLOAT,'Y_last_value'?: FLOAT,'cnet_stack'?: CONTROL_NET_STACK
        }){
            super(ctx);

            super.$$link("control_net", opts['control_net'])
super.$$link("image", opts['image'])
super.$$link("plot_type", opts['plot_type'])
super.$$link("strength", opts['strength']??tmp["XY Input: Control Net Plot"].defaults['strength'])
super.$$link("start_percent", opts['start_percent']??tmp["XY Input: Control Net Plot"].defaults['start_percent'])
super.$$link("end_percent", opts['end_percent']??tmp["XY Input: Control Net Plot"].defaults['end_percent'])
super.$$link("X_batch_count", opts['X_batch_count']??tmp["XY Input: Control Net Plot"].defaults['X_batch_count'])
super.$$link("X_first_value", opts['X_first_value']??tmp["XY Input: Control Net Plot"].defaults['X_first_value'])
super.$$link("X_last_value", opts['X_last_value']??tmp["XY Input: Control Net Plot"].defaults['X_last_value'])
super.$$link("Y_batch_count", opts['Y_batch_count']??tmp["XY Input: Control Net Plot"].defaults['Y_batch_count'])
super.$$link("Y_first_value", opts['Y_first_value']??tmp["XY Input: Control Net Plot"].defaults['Y_first_value'])
super.$$link("Y_last_value", opts['Y_last_value']??tmp["XY Input: Control Net Plot"].defaults['Y_last_value'])
super.$$link("cnet_stack", opts['cnet_stack'])
}

        static defaults = {
    'strength':  1,
'start_percent':  0,
'end_percent':  1,
'X_batch_count':  3,
'X_first_value':  0,
'X_last_value':  1,
'Y_batch_count':  3,
'Y_first_value':  0,
'Y_last_value':  1
}
        protected override $$type(){
            return "XY Input: Control Net Plot"
        }
},

    /**
     * XY Input: Manual XY Entry from Efficiency Nodes/XY Inputs
     * @desc 
    */
    "XY Input: Manual XY Entry" : class extends Node{
        //Setters
        //set 'plot_type'(value : 'Nothing'|'Seeds++ Batch'|'Steps'|'StartStep'|'EndStep'|'CFG Scale'|'Sampler'|'Scheduler'|'Denoise'|'VAE'|'Positive Prompt S/R'|'Negative Prompt S/R'|'Checkpoint'|'Clip Skip'|'LoRA'| $dyn)  { super.$$link(0, value) } 
//set 'plot_value'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'X or Y'() : XY { return [this.$uid.toString(), 0]  as unknown as XY; }

        /**
          * Constructor
		 * @param opts.plot_type
		 * @param opts.plot_value}
        */
        constructor(opts:{
            'plot_type': 'Nothing'|'Seeds++ Batch'|'Steps'|'StartStep'|'EndStep'|'CFG Scale'|'Sampler'|'Scheduler'|'Denoise'|'VAE'|'Positive Prompt S/R'|'Negative Prompt S/R'|'Checkpoint'|'Clip Skip'|'LoRA'| $dyn,'plot_value'?: STRING
        }){
            super(ctx);

            super.$$link("plot_type", opts['plot_type'])
super.$$link("plot_value", opts['plot_value']??tmp["XY Input: Manual XY Entry"].defaults['plot_value'])
}

        static defaults = {
    'plot_value':  ""
}
        protected override $$type(){
            return "XY Input: Manual XY Entry"
        }
},

    /**
     * Manual XY Entry Info from Efficiency Nodes/XY Inputs
     * @desc 
    */
    "Manual XY Entry Info" : class extends Node{
        //Setters
        //set 'notes'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.notes default: "_____________SYNTAX_____________\n(X/Y_types)     (X/Y_values)\nSeeds++ Batch   batch_count\nSteps           steps_1;steps_2;...\nStartStep       start_step_1;start_step_2;...\nEndStep         end_step_1;end_step_2;...\nCFG Scale       cfg_1;cfg_2;...\nSampler(1)      sampler_1;sampler_2;...\nSampler(2)      sampler_1,scheduler_1;...\nSampler(3)      sampler_1;...;,default_scheduler\nScheduler       scheduler_1;scheduler_2;...\nDenoise         denoise_1;denoise_2;...\nVAE             vae_1;vae_2;vae_3;...\n+Prompt S/R     search_txt;replace_1;replace_2;...\n-Prompt S/R     search_txt;replace_1;replace_2;...\nCheckpoint(1)   ckpt_1;ckpt_2;ckpt_3;...\nCheckpoint(2)   ckpt_1,clip_skip_1;...\nCheckpoint(3)   ckpt_1;ckpt_2;...;,default_clip_skip\nClip Skip       clip_skip_1;clip_skip_2;...\nLoRA(1)         lora_1;lora_2;lora_3;...\nLoRA(2)         lora_1;...;,default_model_str,default_clip_str\nLoRA(3)         lora_1,model_str_1,clip_str_1;...\n\n____________SAMPLERS____________\neuler;\neuler_cfg_pp;\neuler_ancestral;\neuler_ancestral_cfg_pp;\nheun;\nheunpp2;\ndpm_2;\ndpm_2_ancestral;\nlms;\ndpm_fast;\ndpm_adaptive;\ndpmpp_2s_ancestral;\ndpmpp_sde;\ndpmpp_sde_gpu;\ndpmpp_2m;\ndpmpp_2m_sde;\ndpmpp_2m_sde_gpu;\ndpmpp_3m_sde;\ndpmpp_3m_sde_gpu;\nddpm;\nlcm;\nipndm;\nipndm_v;\ndeis;\nddim;\nuni_pc;\nuni_pc_bh2\n\n___________SCHEDULERS___________\nnormal;\nkarras;\nexponential;\nsgm_uniform;\nsimple;\nddim_uniform;\nbeta;\nAYS SD1;\nAYS SDXL;\nAYS SVD\n\n_____________VAES_______________\nFLUX1/ae.sft;\norangemix.vae.pt;\nsd-vae-ft-ema/diffusion_pytorch_model.bin\n\n___________CHECKPOINTS__________\nCrystal-PR_rc2.safetensors;\nPixArt-XL-2-1024-MS.pth;\nanimagineXLV3_v30.safetensors;\ndreamshaper_8.safetensors;\nflux1-dev-bnb-nf4-v2.safetensors;\njuggernautXL_version6Rundiffusion.safetensors;\nmanmaruMix_v10.safetensors;\npettankoRouramashin_v10.safetensors;\nponyrealismV21VAE.kLac.safetensors;\nrealisticVisionV51_v51VAE.safetensors;\nsd_xl_base_0.9.safetensors;\nsd_xl_base_1.0_0.9vae.safetensors;\nsd_xl_refiner_0.9.safetensors;\nsd_xl_refiner_1.0_0.9vae.safetensors;\nuncannyafPonyxl_uncannyafPonyxl.safetensors\n\n_____________LORAS______________\nSDXL-Lightning/sdxl_lightning_2step_lora.safetensors;\nSDXL-Lightning/sdxl_lightning_4step_lora.safetensors;\nSDXL-Lightning/sdxl_lightning_8step_lora.safetensors;\nipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors;\nipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors;\nipadapter/ip-adapter-faceid_sd15_lora.safetensors;\nlcm-lora-sdv1-5.safetensors;\nlcm-lora-sdxl.safetensors;\nlcm/SD1.5/pytorch_lora_weights.safetensors;\nlcm/SDXL/pytorch_lora_weights.safetensors;\nlcm/SSD-1B/pytorch_lora_weights.safetensors;\nsd_xl_offset_example-lora_1.0.safetensors;\nsdxl/pxx4_v1_alpha.safetensors;\nsdxl/xl_shuimo-000012.safetensors;\nslider-concepts/age.pt;\nslider-concepts/cartoon_style.pt;\nslider-concepts/chubby.pt;\nslider-concepts/clay_style.pt;\nslider-concepts/cluttered_room.pt;\nslider-concepts/curlyhair.pt;\nslider-concepts/dark_weather.pt;\nslider-concepts/eyebrow.pt;\nslider-concepts/eyesize.pt;\nslider-concepts/festive.pt;\nslider-concepts/fix_hands.pt;\nslider-concepts/long_hair.pt;\nslider-concepts/muscular.pt;\nslider-concepts/pixar_style.pt;\nslider-concepts/professional.pt;\nslider-concepts/repair_slider.pt;\nslider-concepts/sculpture_style.pt;\nslider-concepts/smiling.pt;\nslider-concepts/stylegan_latent1.pt;\nslider-concepts/stylegan_latent2.pt;\nslider-concepts/suprised_look.pt;\nslider-concepts/tropical_weather.pt;\nslider-concepts/winter_weather.pt\n"}
        */
        constructor(opts:{
            'notes'?: STRING
        }){
            super(ctx);

            super.$$link("notes", opts['notes']??tmp["Manual XY Entry Info"].defaults['notes'])
}

        static defaults = {
    'notes':  "_____________SYNTAX_____________\n(X/Y_types)     (X/Y_values)\nSeeds++ Batch   batch_count\nSteps           steps_1;steps_2;...\nStartStep       start_step_1;start_step_2;...\nEndStep         end_step_1;end_step_2;...\nCFG Scale       cfg_1;cfg_2;...\nSampler(1)      sampler_1;sampler_2;...\nSampler(2)      sampler_1,scheduler_1;...\nSampler(3)      sampler_1;...;,default_scheduler\nScheduler       scheduler_1;scheduler_2;...\nDenoise         denoise_1;denoise_2;...\nVAE             vae_1;vae_2;vae_3;...\n+Prompt S/R     search_txt;replace_1;replace_2;...\n-Prompt S/R     search_txt;replace_1;replace_2;...\nCheckpoint(1)   ckpt_1;ckpt_2;ckpt_3;...\nCheckpoint(2)   ckpt_1,clip_skip_1;...\nCheckpoint(3)   ckpt_1;ckpt_2;...;,default_clip_skip\nClip Skip       clip_skip_1;clip_skip_2;...\nLoRA(1)         lora_1;lora_2;lora_3;...\nLoRA(2)         lora_1;...;,default_model_str,default_clip_str\nLoRA(3)         lora_1,model_str_1,clip_str_1;...\n\n____________SAMPLERS____________\neuler;\neuler_cfg_pp;\neuler_ancestral;\neuler_ancestral_cfg_pp;\nheun;\nheunpp2;\ndpm_2;\ndpm_2_ancestral;\nlms;\ndpm_fast;\ndpm_adaptive;\ndpmpp_2s_ancestral;\ndpmpp_sde;\ndpmpp_sde_gpu;\ndpmpp_2m;\ndpmpp_2m_sde;\ndpmpp_2m_sde_gpu;\ndpmpp_3m_sde;\ndpmpp_3m_sde_gpu;\nddpm;\nlcm;\nipndm;\nipndm_v;\ndeis;\nddim;\nuni_pc;\nuni_pc_bh2\n\n___________SCHEDULERS___________\nnormal;\nkarras;\nexponential;\nsgm_uniform;\nsimple;\nddim_uniform;\nbeta;\nAYS SD1;\nAYS SDXL;\nAYS SVD\n\n_____________VAES_______________\nFLUX1/ae.sft;\norangemix.vae.pt;\nsd-vae-ft-ema/diffusion_pytorch_model.bin\n\n___________CHECKPOINTS__________\nCrystal-PR_rc2.safetensors;\nPixArt-XL-2-1024-MS.pth;\nanimagineXLV3_v30.safetensors;\ndreamshaper_8.safetensors;\nflux1-dev-bnb-nf4-v2.safetensors;\njuggernautXL_version6Rundiffusion.safetensors;\nmanmaruMix_v10.safetensors;\npettankoRouramashin_v10.safetensors;\nponyrealismV21VAE.kLac.safetensors;\nrealisticVisionV51_v51VAE.safetensors;\nsd_xl_base_0.9.safetensors;\nsd_xl_base_1.0_0.9vae.safetensors;\nsd_xl_refiner_0.9.safetensors;\nsd_xl_refiner_1.0_0.9vae.safetensors;\nuncannyafPonyxl_uncannyafPonyxl.safetensors\n\n_____________LORAS______________\nSDXL-Lightning/sdxl_lightning_2step_lora.safetensors;\nSDXL-Lightning/sdxl_lightning_4step_lora.safetensors;\nSDXL-Lightning/sdxl_lightning_8step_lora.safetensors;\nipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors;\nipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors;\nipadapter/ip-adapter-faceid_sd15_lora.safetensors;\nlcm-lora-sdv1-5.safetensors;\nlcm-lora-sdxl.safetensors;\nlcm/SD1.5/pytorch_lora_weights.safetensors;\nlcm/SDXL/pytorch_lora_weights.safetensors;\nlcm/SSD-1B/pytorch_lora_weights.safetensors;\nsd_xl_offset_example-lora_1.0.safetensors;\nsdxl/pxx4_v1_alpha.safetensors;\nsdxl/xl_shuimo-000012.safetensors;\nslider-concepts/age.pt;\nslider-concepts/cartoon_style.pt;\nslider-concepts/chubby.pt;\nslider-concepts/clay_style.pt;\nslider-concepts/cluttered_room.pt;\nslider-concepts/curlyhair.pt;\nslider-concepts/dark_weather.pt;\nslider-concepts/eyebrow.pt;\nslider-concepts/eyesize.pt;\nslider-concepts/festive.pt;\nslider-concepts/fix_hands.pt;\nslider-concepts/long_hair.pt;\nslider-concepts/muscular.pt;\nslider-concepts/pixar_style.pt;\nslider-concepts/professional.pt;\nslider-concepts/repair_slider.pt;\nslider-concepts/sculpture_style.pt;\nslider-concepts/smiling.pt;\nslider-concepts/stylegan_latent1.pt;\nslider-concepts/stylegan_latent2.pt;\nslider-concepts/suprised_look.pt;\nslider-concepts/tropical_weather.pt;\nslider-concepts/winter_weather.pt\n"
}
        protected override $$type(){
            return "Manual XY Entry Info"
        }
},

    /**
     * Join XY Inputs of Same Type from Efficiency Nodes/XY Inputs
     * @desc 
    */
    "Join XY Inputs of Same Type" : class extends Node{
        //Setters
        //set 'XY_1'(value : XY)  { super.$$link(0, value) } 
//set 'XY_2'(value : XY)  { super.$$link(1, value) } 

        //Getters
        get 'X or Y'() : XY { return [this.$uid.toString(), 0]  as unknown as XY; }

        /**
          * Constructor
		 * @param opts.XY_1
		 * @param opts.XY_2}
        */
        constructor(opts:{
            'XY_1': XY,'XY_2': XY
        }){
            super(ctx);

            super.$$link("XY_1", opts['XY_1'])
super.$$link("XY_2", opts['XY_2'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Join XY Inputs of Same Type"
        }
},

    /**
     * Image Overlay from Efficiency Nodes/Image
     * @desc 
    */
    "Image Overlay" : class extends Node{
        //Setters
        //set 'base_image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'overlay_image'(value : IMAGE)  { super.$$link(1, value) } 
//set 'overlay_resize'(value : 'None'|'Fit'|'Resize by rescale_factor'|'Resize to width & heigth'| $dyn)  { super.$$link(2, value) } 
//set 'resize_method'(value : 'nearest-exact'|'bilinear'|'area'| $dyn)  { super.$$link(3, value) } 
//set 'rescale_factor'(value : FLOAT)  { super.$$link(4, value) } 
//set 'width'(value : INT)  { super.$$link(5, value) } 
//set 'height'(value : INT)  { super.$$link(6, value) } 
//set 'x_offset'(value : INT)  { super.$$link(7, value) } 
//set 'y_offset'(value : INT)  { super.$$link(8, value) } 
//set 'rotation'(value : INT)  { super.$$link(9, value) } 
//set 'opacity'(value : FLOAT)  { super.$$link(10, value) } 
//set 'optional_mask'(value : MASK)  { super.$$link(11, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.base_image
		 * @param opts.overlay_image
		 * @param opts.overlay_resize
		 * @param opts.resize_method
		 * @param opts.rescale_factor default: 1 max: 16 min: 0.01 step: 0.1
		 * @param opts.width default: 512 step: 64
		 * @param opts.height default: 512 step: 64
		 * @param opts.x_offset max: 48000 min: -48000 step: 10
		 * @param opts.y_offset max: 48000 min: -48000 step: 10
		 * @param opts.rotation max: 180 min: -180 step: 5
		 * @param opts.opacity step: 5
		 * @param opts.optional_mask}
        */
        constructor(opts:{
            'base_image': IMAGE,'overlay_image': IMAGE,'overlay_resize': 'None'|'Fit'|'Resize by rescale_factor'|'Resize to width & heigth'| $dyn,'resize_method': 'nearest-exact'|'bilinear'|'area'| $dyn,'rescale_factor'?: FLOAT,'width'?: INT,'height'?: INT,'x_offset'?: INT,'y_offset'?: INT,'rotation'?: INT,'opacity'?: FLOAT,'optional_mask'?: MASK
        }){
            super(ctx);

            super.$$link("base_image", opts['base_image'])
super.$$link("overlay_image", opts['overlay_image'])
super.$$link("overlay_resize", opts['overlay_resize'])
super.$$link("resize_method", opts['resize_method'])
super.$$link("rescale_factor", opts['rescale_factor']??tmp["Image Overlay"].defaults['rescale_factor'])
super.$$link("width", opts['width']??tmp["Image Overlay"].defaults['width'])
super.$$link("height", opts['height']??tmp["Image Overlay"].defaults['height'])
super.$$link("x_offset", opts['x_offset']??tmp["Image Overlay"].defaults['x_offset'])
super.$$link("y_offset", opts['y_offset']??tmp["Image Overlay"].defaults['y_offset'])
super.$$link("rotation", opts['rotation']??tmp["Image Overlay"].defaults['rotation'])
super.$$link("opacity", opts['opacity']??tmp["Image Overlay"].defaults['opacity'])
super.$$link("optional_mask", opts['optional_mask'])
}

        static defaults = {
    'rescale_factor':  1,
'width':  512,
'height':  512,
'x_offset':  0,
'y_offset':  0,
'rotation':  0,
'opacity':  0
}
        protected override $$type(){
            return "Image Overlay"
        }
},

    /**
     * Noise Control Script from Efficiency Nodes/Scripts
     * @desc 
    */
    "Noise Control Script" : class extends Node{
        //Setters
        //set 'rng_source'(value : 'cpu'|'gpu'|'nv'| $dyn)  { super.$$link(0, value) } 
//set 'cfg_denoiser'(value : BOOLEAN)  { super.$$link(1, value) } 
//set 'add_seed_noise'(value : BOOLEAN)  { super.$$link(2, value) } 
//set 'seed'(value : INT)  { super.$$link(3, value) } 
//set 'weight'(value : FLOAT)  { super.$$link(4, value) } 
//set 'script'(value : SCRIPT)  { super.$$link(5, value) } 

        //Getters
        get 'SCRIPT'() : SCRIPT { return [this.$uid.toString(), 0]  as unknown as SCRIPT; }

        /**
          * Constructor
		 * @param opts.rng_source
		 * @param opts.cfg_denoiser
		 * @param opts.add_seed_noise
		 * @param opts.seed
		 * @param opts.weight default: 0.015 step: 0.001
		 * @param opts.script}
        */
        constructor(opts:{
            'rng_source': 'cpu'|'gpu'|'nv'| $dyn,'cfg_denoiser'?: BOOLEAN,'add_seed_noise'?: BOOLEAN,'seed'?: INT,'weight'?: FLOAT,'script'?: SCRIPT
        }){
            super(ctx);

            super.$$link("rng_source", opts['rng_source'])
super.$$link("cfg_denoiser", opts['cfg_denoiser']??tmp["Noise Control Script"].defaults['cfg_denoiser'])
super.$$link("add_seed_noise", opts['add_seed_noise']??tmp["Noise Control Script"].defaults['add_seed_noise'])
super.$$link("seed", opts['seed']??tmp["Noise Control Script"].defaults['seed'])
super.$$link("weight", opts['weight']??tmp["Noise Control Script"].defaults['weight'])
super.$$link("script", opts['script'])
}

        static defaults = {
    'cfg_denoiser':  false,
'add_seed_noise':  false,
'seed':  0,
'weight':  0.015
}
        protected override $$type(){
            return "Noise Control Script"
        }
},

    /**
     * HighRes-Fix Script from Efficiency Nodes/Scripts
     * @desc 
    */
    "HighRes-Fix Script" : class extends Node{
        //Setters
        //set 'upscale_type'(value : 'latent'|'pixel'|'both'| $dyn)  { super.$$link(0, value) } 
//set 'hires_ckpt_name'(value : '(use same)'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(1, value) } 
//set 'latent_upscaler'(value : 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp'|'city96.v1'|'city96.xl'|'ttl_nn.SDXL'|'ttl_nn.SD 1.x'| $dyn)  { super.$$link(2, value) } 
//set 'pixel_upscaler'(value : '4x_NMKD-Superscale-SP_178000_G.pth'|'HAT_SRx4_ImageNet-pretrain.pth'|'Real_HAT_GAN_sharper.pth'| $dyn)  { super.$$link(3, value) } 
//set 'upscale_by'(value : FLOAT)  { super.$$link(4, value) } 
//set 'use_same_seed'(value : BOOLEAN)  { super.$$link(5, value) } 
//set 'seed'(value : INT)  { super.$$link(6, value) } 
//set 'hires_steps'(value : INT)  { super.$$link(7, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(8, value) } 
//set 'iterations'(value : INT)  { super.$$link(9, value) } 
//set 'use_controlnet'(value : BOOLEAN)  { super.$$link(10, value) } 
//set 'control_net_name'(value : 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors'| $dyn)  { super.$$link(11, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(12, value) } 
//set 'preprocessor'(value : 'none'|'TilePreprocessor'|'TTPlanet_TileGF_Preprocessor'|'TTPlanet_TileSimple_Preprocessor'|'BAE-NormalMapPreprocessor'|'DensePosePreprocessor'|'PiDiNetPreprocessor'|'ScribblePreprocessor'|'Scribble_XDoG_Preprocessor'|'Scribble_PiDiNet_Preprocessor'|'SAMPreprocessor'|'LineartStandardPreprocessor'|'DSINE-NormalMapPreprocessor'|'TEEDPreprocessor'|'M-LSDPreprocessor'|'AnyLineArtPreprocessor_aux'|'Zoe-DepthMapPreprocessor'|'Metric3D-DepthMapPreprocessor'|'Metric3D-NormalMapPreprocessor'|'DWPreprocessor'|'AnimalPosePreprocessor'|'HEDPreprocessor'|'FakeScribblePreprocessor'|'ColorPreprocessor'|'MeshGraphormer-DepthMapPreprocessor'|'MeshGraphormer+ImpactDetector-DepthMapPreprocessor'|'ImageLuminanceDetector'|'ImageIntensityDetector'|'LineArtPreprocessor'|'MediaPipe-FaceMeshPreprocessor'|'BinaryPreprocessor'|'OneFormer-COCO-SemSegPreprocessor'|'OneFormer-ADE20K-SemSegPreprocessor'|'Unimatch_OptFlowPreprocessor'|'MaskOptFlow'|'AnimeFace_SemSegPreprocessor'|'SavePoseKpsAsJsonFile'|'FacialPartColoringFromPoseKps'|'UpperBodyTrackingFromPoseKps'|'RenderPeopleKps'|'RenderAnimalKps'|'ShufflePreprocessor'|'CannyEdgePreprocessor'|'OpenposePreprocessor'|'DepthAnythingPreprocessor'|'Zoe_DepthAnythingPreprocessor'|'DepthAnythingV2Preprocessor'|'DiffusionEdge_Preprocessor'|'UniFormer-SemSegPreprocessor'|'SemSegPreprocessor'|'LeReS-DepthMapPreprocessor'|'Manga2Anime_LineArt_Preprocessor'|'MiDaS-NormalMapPreprocessor'|'MiDaS-DepthMapPreprocessor'|'AnimeLineArtPreprocessor'| $dyn)  { super.$$link(13, value) } 
//set 'preprocessor_imgs'(value : BOOLEAN)  { super.$$link(14, value) } 
//set 'script'(value : SCRIPT)  { super.$$link(15, value) } 

        //Getters
        get 'SCRIPT'() : SCRIPT { return [this.$uid.toString(), 0]  as unknown as SCRIPT; }

        /**
          * Constructor
		 * @param opts.upscale_type
		 * @param opts.hires_ckpt_name
		 * @param opts.latent_upscaler
		 * @param opts.pixel_upscaler
		 * @param opts.upscale_by default: 1.25 max: 8 min: 0.01 step: 0.05
		 * @param opts.use_same_seed default: true
		 * @param opts.seed
		 * @param opts.hires_steps default: 12 max: 10000 min: 1
		 * @param opts.denoise default: 0.56 step: 0.01
		 * @param opts.iterations default: 1 step: 1
		 * @param opts.use_controlnet
		 * @param opts.control_net_name
		 * @param opts.strength default: 1 step: 0.01
		 * @param opts.preprocessor default: "none"
		 * @param opts.preprocessor_imgs
		 * @param opts.script}
        */
        constructor(opts:{
            'upscale_type': 'latent'|'pixel'|'both'| $dyn,'hires_ckpt_name': '(use same)'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'latent_upscaler': 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp'|'city96.v1'|'city96.xl'|'ttl_nn.SDXL'|'ttl_nn.SD 1.x'| $dyn,'pixel_upscaler': '4x_NMKD-Superscale-SP_178000_G.pth'|'HAT_SRx4_ImageNet-pretrain.pth'|'Real_HAT_GAN_sharper.pth'| $dyn,'upscale_by'?: FLOAT,'use_same_seed'?: BOOLEAN,'seed'?: INT,'hires_steps'?: INT,'denoise'?: FLOAT,'iterations'?: INT,'use_controlnet'?: BOOLEAN,'control_net_name': 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors'| $dyn,'strength'?: FLOAT,'preprocessor'?: 'none'|'TilePreprocessor'|'TTPlanet_TileGF_Preprocessor'|'TTPlanet_TileSimple_Preprocessor'|'BAE-NormalMapPreprocessor'|'DensePosePreprocessor'|'PiDiNetPreprocessor'|'ScribblePreprocessor'|'Scribble_XDoG_Preprocessor'|'Scribble_PiDiNet_Preprocessor'|'SAMPreprocessor'|'LineartStandardPreprocessor'|'DSINE-NormalMapPreprocessor'|'TEEDPreprocessor'|'M-LSDPreprocessor'|'AnyLineArtPreprocessor_aux'|'Zoe-DepthMapPreprocessor'|'Metric3D-DepthMapPreprocessor'|'Metric3D-NormalMapPreprocessor'|'DWPreprocessor'|'AnimalPosePreprocessor'|'HEDPreprocessor'|'FakeScribblePreprocessor'|'ColorPreprocessor'|'MeshGraphormer-DepthMapPreprocessor'|'MeshGraphormer+ImpactDetector-DepthMapPreprocessor'|'ImageLuminanceDetector'|'ImageIntensityDetector'|'LineArtPreprocessor'|'MediaPipe-FaceMeshPreprocessor'|'BinaryPreprocessor'|'OneFormer-COCO-SemSegPreprocessor'|'OneFormer-ADE20K-SemSegPreprocessor'|'Unimatch_OptFlowPreprocessor'|'MaskOptFlow'|'AnimeFace_SemSegPreprocessor'|'SavePoseKpsAsJsonFile'|'FacialPartColoringFromPoseKps'|'UpperBodyTrackingFromPoseKps'|'RenderPeopleKps'|'RenderAnimalKps'|'ShufflePreprocessor'|'CannyEdgePreprocessor'|'OpenposePreprocessor'|'DepthAnythingPreprocessor'|'Zoe_DepthAnythingPreprocessor'|'DepthAnythingV2Preprocessor'|'DiffusionEdge_Preprocessor'|'UniFormer-SemSegPreprocessor'|'SemSegPreprocessor'|'LeReS-DepthMapPreprocessor'|'Manga2Anime_LineArt_Preprocessor'|'MiDaS-NormalMapPreprocessor'|'MiDaS-DepthMapPreprocessor'|'AnimeLineArtPreprocessor'| $dyn,'preprocessor_imgs'?: BOOLEAN,'script'?: SCRIPT
        }){
            super(ctx);

            super.$$link("upscale_type", opts['upscale_type'])
super.$$link("hires_ckpt_name", opts['hires_ckpt_name'])
super.$$link("latent_upscaler", opts['latent_upscaler'])
super.$$link("pixel_upscaler", opts['pixel_upscaler'])
super.$$link("upscale_by", opts['upscale_by']??tmp["HighRes-Fix Script"].defaults['upscale_by'])
super.$$link("use_same_seed", opts['use_same_seed']??tmp["HighRes-Fix Script"].defaults['use_same_seed'])
super.$$link("seed", opts['seed']??tmp["HighRes-Fix Script"].defaults['seed'])
super.$$link("hires_steps", opts['hires_steps']??tmp["HighRes-Fix Script"].defaults['hires_steps'])
super.$$link("denoise", opts['denoise']??tmp["HighRes-Fix Script"].defaults['denoise'])
super.$$link("iterations", opts['iterations']??tmp["HighRes-Fix Script"].defaults['iterations'])
super.$$link("use_controlnet", opts['use_controlnet']??tmp["HighRes-Fix Script"].defaults['use_controlnet'])
super.$$link("control_net_name", opts['control_net_name'])
super.$$link("strength", opts['strength']??tmp["HighRes-Fix Script"].defaults['strength'])
super.$$link("preprocessor", opts['preprocessor']??tmp["HighRes-Fix Script"].defaults['preprocessor'])
super.$$link("preprocessor_imgs", opts['preprocessor_imgs']??tmp["HighRes-Fix Script"].defaults['preprocessor_imgs'])
super.$$link("script", opts['script'])
}

        static defaults = {
    'upscale_by':  1.25,
'use_same_seed':  true,
'seed':  0,
'hires_steps':  12,
'denoise':  0.56,
'iterations':  1,
'use_controlnet':  false,
'strength':  1,
'preprocessor':  "none",
'preprocessor_imgs':  false
}
        protected override $$type(){
            return "HighRes-Fix Script"
        }
},

    /**
     * Tiled Upscaler Script from Efficiency Nodes/Scripts
     * @desc 
    */
    "Tiled Upscaler Script" : class extends Node{
        //Setters
        //set 'upscale_by'(value : FLOAT)  { super.$$link(0, value) } 
//set 'tile_size'(value : INT)  { super.$$link(1, value) } 
//set 'tiling_strategy'(value : 'random'|'random strict'|'padded'|'simple'|'none'| $dyn)  { super.$$link(2, value) } 
//set 'tiling_steps'(value : INT)  { super.$$link(3, value) } 
//set 'seed'(value : INT)  { super.$$link(4, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(5, value) } 
//set 'use_controlnet'(value : BOOLEAN)  { super.$$link(6, value) } 
//set 'tile_controlnet'(value : 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors'| $dyn)  { super.$$link(7, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(8, value) } 
//set 'script'(value : SCRIPT)  { super.$$link(9, value) } 

        //Getters
        get 'SCRIPT'() : SCRIPT { return [this.$uid.toString(), 0]  as unknown as SCRIPT; }

        /**
          * Constructor
		 * @param opts.upscale_by default: 1.25 max: 8 min: 0.01 step: 0.05
		 * @param opts.tile_size default: 512 max: 16384 min: 256 step: 64
		 * @param opts.tiling_strategy
		 * @param opts.tiling_steps default: 30 max: 10000 min: 1
		 * @param opts.seed
		 * @param opts.denoise default: 0.4 step: 0.01
		 * @param opts.use_controlnet
		 * @param opts.tile_controlnet
		 * @param opts.strength default: 1 step: 0.01
		 * @param opts.script}
        */
        constructor(opts:{
            'upscale_by'?: FLOAT,'tile_size'?: INT,'tiling_strategy': 'random'|'random strict'|'padded'|'simple'|'none'| $dyn,'tiling_steps'?: INT,'seed'?: INT,'denoise'?: FLOAT,'use_controlnet'?: BOOLEAN,'tile_controlnet': 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors'| $dyn,'strength'?: FLOAT,'script'?: SCRIPT
        }){
            super(ctx);

            super.$$link("upscale_by", opts['upscale_by']??tmp["Tiled Upscaler Script"].defaults['upscale_by'])
super.$$link("tile_size", opts['tile_size']??tmp["Tiled Upscaler Script"].defaults['tile_size'])
super.$$link("tiling_strategy", opts['tiling_strategy'])
super.$$link("tiling_steps", opts['tiling_steps']??tmp["Tiled Upscaler Script"].defaults['tiling_steps'])
super.$$link("seed", opts['seed']??tmp["Tiled Upscaler Script"].defaults['seed'])
super.$$link("denoise", opts['denoise']??tmp["Tiled Upscaler Script"].defaults['denoise'])
super.$$link("use_controlnet", opts['use_controlnet']??tmp["Tiled Upscaler Script"].defaults['use_controlnet'])
super.$$link("tile_controlnet", opts['tile_controlnet'])
super.$$link("strength", opts['strength']??tmp["Tiled Upscaler Script"].defaults['strength'])
super.$$link("script", opts['script'])
}

        static defaults = {
    'upscale_by':  1.25,
'tile_size':  512,
'tiling_steps':  30,
'seed':  0,
'denoise':  0.4,
'use_controlnet':  false,
'strength':  1
}
        protected override $$type(){
            return "Tiled Upscaler Script"
        }
},

    /**
     * LoRA Stack to String converter from Efficiency Nodes/Misc
     * @desc 
    */
    "LoRA Stack to String converter" : class extends Node{
        //Setters
        //set 'lora_stack'(value : LORA_STACK)  { super.$$link(0, value) } 

        //Getters
        get 'LoRA string'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.lora_stack}
        */
        constructor(opts:{
            'lora_stack': LORA_STACK
        }){
            super(ctx);

            super.$$link("lora_stack", opts['lora_stack'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "LoRA Stack to String converter"
        }
},

    /**
     * Evaluate Integers from Efficiency Nodes/Simple Eval
     * @desc 
    */
    "Evaluate Integers" : class extends Node{
        //Setters
        //set 'python_expression'(value : STRING)  { super.$$link(0, value) } 
//set 'print_to_console'(value : 'False'|'True'| $dyn)  { super.$$link(1, value) } 
//set 'a'(value : INT)  { super.$$link(2, value) } 
//set 'b'(value : INT)  { super.$$link(3, value) } 
//set 'c'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'INT'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }
get 'FLOAT'() : FLOAT { return [this.$uid.toString(), 1]  as unknown as FLOAT; }
get 'STRING'() : STRING { return [this.$uid.toString(), 2]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.python_expression default: "((a + b) - c) / 2"
		 * @param opts.print_to_console
		 * @param opts.a max: 48000 min: -48000 step: 1
		 * @param opts.b max: 48000 min: -48000 step: 1
		 * @param opts.c max: 48000 min: -48000 step: 1}
        */
        constructor(opts:{
            'python_expression'?: STRING,'print_to_console': 'False'|'True'| $dyn,'a'?: INT,'b'?: INT,'c'?: INT
        }){
            super(ctx);

            super.$$link("python_expression", opts['python_expression']??tmp["Evaluate Integers"].defaults['python_expression'])
super.$$link("print_to_console", opts['print_to_console'])
super.$$link("a", opts['a']??tmp["Evaluate Integers"].defaults['a'])
super.$$link("b", opts['b']??tmp["Evaluate Integers"].defaults['b'])
super.$$link("c", opts['c']??tmp["Evaluate Integers"].defaults['c'])
}

        static defaults = {
    'python_expression':  "((a + b) - c) / 2",
'a':  0,
'b':  0,
'c':  0
}
        protected override $$type(){
            return "Evaluate Integers"
        }
},

    /**
     * Evaluate Floats from Efficiency Nodes/Simple Eval
     * @desc 
    */
    "Evaluate Floats" : class extends Node{
        //Setters
        //set 'python_expression'(value : STRING)  { super.$$link(0, value) } 
//set 'print_to_console'(value : 'False'|'True'| $dyn)  { super.$$link(1, value) } 
//set 'a'(value : FLOAT)  { super.$$link(2, value) } 
//set 'b'(value : FLOAT)  { super.$$link(3, value) } 
//set 'c'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'INT'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }
get 'FLOAT'() : FLOAT { return [this.$uid.toString(), 1]  as unknown as FLOAT; }
get 'STRING'() : STRING { return [this.$uid.toString(), 2]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.python_expression default: "((a + b) - c) / 2"
		 * @param opts.print_to_console
		 * @param opts.a max: 1.7976931348623157e+308 min: -1.7976931348623157e+308 step: 1
		 * @param opts.b max: 1.7976931348623157e+308 min: -1.7976931348623157e+308 step: 1
		 * @param opts.c max: 1.7976931348623157e+308 min: -1.7976931348623157e+308 step: 1}
        */
        constructor(opts:{
            'python_expression'?: STRING,'print_to_console': 'False'|'True'| $dyn,'a'?: FLOAT,'b'?: FLOAT,'c'?: FLOAT
        }){
            super(ctx);

            super.$$link("python_expression", opts['python_expression']??tmp["Evaluate Floats"].defaults['python_expression'])
super.$$link("print_to_console", opts['print_to_console'])
super.$$link("a", opts['a']??tmp["Evaluate Floats"].defaults['a'])
super.$$link("b", opts['b']??tmp["Evaluate Floats"].defaults['b'])
super.$$link("c", opts['c']??tmp["Evaluate Floats"].defaults['c'])
}

        static defaults = {
    'python_expression':  "((a + b) - c) / 2",
'a':  0,
'b':  0,
'c':  0
}
        protected override $$type(){
            return "Evaluate Floats"
        }
},

    /**
     * Evaluate Strings from Efficiency Nodes/Simple Eval
     * @desc 
    */
    "Evaluate Strings" : class extends Node{
        //Setters
        //set 'python_expression'(value : STRING)  { super.$$link(0, value) } 
//set 'print_to_console'(value : 'False'|'True'| $dyn)  { super.$$link(1, value) } 
//set 'a'(value : STRING)  { super.$$link(2, value) } 
//set 'b'(value : STRING)  { super.$$link(3, value) } 
//set 'c'(value : STRING)  { super.$$link(4, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.python_expression default: "a + b + c"
		 * @param opts.print_to_console
		 * @param opts.a default: "Hello"
		 * @param opts.b default: " World"
		 * @param opts.c default: "!"}
        */
        constructor(opts:{
            'python_expression'?: STRING,'print_to_console': 'False'|'True'| $dyn,'a'?: STRING,'b'?: STRING,'c'?: STRING
        }){
            super(ctx);

            super.$$link("python_expression", opts['python_expression']??tmp["Evaluate Strings"].defaults['python_expression'])
super.$$link("print_to_console", opts['print_to_console'])
super.$$link("a", opts['a']??tmp["Evaluate Strings"].defaults['a'])
super.$$link("b", opts['b']??tmp["Evaluate Strings"].defaults['b'])
super.$$link("c", opts['c']??tmp["Evaluate Strings"].defaults['c'])
}

        static defaults = {
    'python_expression':  "a + b + c",
'a':  "Hello",
'b':  " World",
'c':  "!"
}
        protected override $$type(){
            return "Evaluate Strings"
        }
},

    /**
     * Simple Eval Examples from Efficiency Nodes/Simple Eval
     * @desc 
    */
    "Simple Eval Examples" : class extends Node{
        //Setters
        //set 'models_text'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.models_text default: "The Evaluate Integers, Floats, and Strings nodes \nnow employ the SimpleEval library, enabling secure \ncreation and execution of custom Python expressions.\n\n(https://github.com/danthedeckie/simpleeval)\n\nBelow is a short list of what is possible.\n______________________________________________\n\n\"EVALUATE INTEGERS/FLOATS\" NODE EXPRESSION EXAMPLES:\n\nAddition: a + b + c\nSubtraction: a - b - c\nMultiplication: a * b * c\nDivision: a / b / c\nModulo: a % b % c\nExponentiation: a ** b ** c\nFloor Division: a // b // c\nAbsolute Value: abs(a) + abs(b) + abs(c)\nMaximum: max(a, b, c)\nMinimum: min(a, b, c)\nSum of Squares: a**2 + b**2 + c**2\nBitwise And: a & b & c\nBitwise Or: a | b | c\nBitwise Xor: a ^ b ^ c\nLeft Shift: a << 1 + b << 1 + c << 1\nRight Shift: a >> 1 + b >> 1 + c >> 1\nGreater Than Comparison: a > b > c\nLess Than Comparison: a < b < c\nEqual To Comparison: a == b == c\nNot Equal To Comparison: a != b != c\n______________________________________________\n\n\"EVALUATE STRINGS\" NODE EXPRESSION EXAMPLES:\n\nConcatenate: a + b + c\nFormat: f'{a} {b} {c}'\nLength: len(a) + len(b) + len(c)\nUppercase: a.upper() + b.upper() + c.upper()\nLowercase: a.lower() + b.lower() + c.lower()\nCapitalize: a.capitalize() + b.capitalize() + c.capitalize()\nTitle Case: a.title() + b.title() + c.title()\nStrip: a.strip() + b.strip() + c.strip()\nFind Substring: a.find('sub') + b.find('sub') + c.find('sub')\nReplace Substring: a.replace('old', 'new') + b.replace('old', 'new') + c.replace('old', 'new')\nCount Substring: a.count('sub') + b.count('sub') + c.count('sub')\nCheck Numeric: a.isnumeric() + b.isnumeric() + c.isnumeric()\nCheck Alphabetic: a.isalpha() + b.isalpha() + c.isalpha()\nCheck Alphanumeric: a.isalnum() + b.isalnum() + c.isalnum()\nCheck Start: a.startswith('prefix') + b.startswith('prefix') + c.startswith('prefix')\nCheck End: a.endswith('suffix') + b.endswith('suffix') + c.endswith('suffix')\nSplit: a.split(' ') + b.split(' ') + c.split(' ')\nZero Fill: a.zfill(5) + b.zfill(5) + c.zfill(5)\nSlice: a[:5] + b[:5] + c[:5]\nReverse: a[::-1] + b[::-1] + c[::-1]\n______________________________________________"}
        */
        constructor(opts:{
            'models_text'?: STRING
        }){
            super(ctx);

            super.$$link("models_text", opts['models_text']??tmp["Simple Eval Examples"].defaults['models_text'])
}

        static defaults = {
    'models_text':  "The Evaluate Integers, Floats, and Strings nodes \nnow employ the SimpleEval library, enabling secure \ncreation and execution of custom Python expressions.\n\n(https://github.com/danthedeckie/simpleeval)\n\nBelow is a short list of what is possible.\n______________________________________________\n\n\"EVALUATE INTEGERS/FLOATS\" NODE EXPRESSION EXAMPLES:\n\nAddition: a + b + c\nSubtraction: a - b - c\nMultiplication: a * b * c\nDivision: a / b / c\nModulo: a % b % c\nExponentiation: a ** b ** c\nFloor Division: a // b // c\nAbsolute Value: abs(a) + abs(b) + abs(c)\nMaximum: max(a, b, c)\nMinimum: min(a, b, c)\nSum of Squares: a**2 + b**2 + c**2\nBitwise And: a & b & c\nBitwise Or: a | b | c\nBitwise Xor: a ^ b ^ c\nLeft Shift: a << 1 + b << 1 + c << 1\nRight Shift: a >> 1 + b >> 1 + c >> 1\nGreater Than Comparison: a > b > c\nLess Than Comparison: a < b < c\nEqual To Comparison: a == b == c\nNot Equal To Comparison: a != b != c\n______________________________________________\n\n\"EVALUATE STRINGS\" NODE EXPRESSION EXAMPLES:\n\nConcatenate: a + b + c\nFormat: f'{a} {b} {c}'\nLength: len(a) + len(b) + len(c)\nUppercase: a.upper() + b.upper() + c.upper()\nLowercase: a.lower() + b.lower() + c.lower()\nCapitalize: a.capitalize() + b.capitalize() + c.capitalize()\nTitle Case: a.title() + b.title() + c.title()\nStrip: a.strip() + b.strip() + c.strip()\nFind Substring: a.find('sub') + b.find('sub') + c.find('sub')\nReplace Substring: a.replace('old', 'new') + b.replace('old', 'new') + c.replace('old', 'new')\nCount Substring: a.count('sub') + b.count('sub') + c.count('sub')\nCheck Numeric: a.isnumeric() + b.isnumeric() + c.isnumeric()\nCheck Alphabetic: a.isalpha() + b.isalpha() + c.isalpha()\nCheck Alphanumeric: a.isalnum() + b.isalnum() + c.isalnum()\nCheck Start: a.startswith('prefix') + b.startswith('prefix') + c.startswith('prefix')\nCheck End: a.endswith('suffix') + b.endswith('suffix') + c.endswith('suffix')\nSplit: a.split(' ') + b.split(' ') + c.split(' ')\nZero Fill: a.zfill(5) + b.zfill(5) + c.zfill(5)\nSlice: a[:5] + b[:5] + c[:5]\nReverse: a[::-1] + b[::-1] + c[::-1]\n______________________________________________"
}
        protected override $$type(){
            return "Simple Eval Examples"
        }
},

    /**
     * sudo latent upscale from latent
     * @desc 
    */
    "SudoLatentUpscale" : class extends Node{
        //Setters
        //set 'latent'(value : LATENT)  { super.$$link(0, value) } 
//set 'version'(value : 'SwinFIR4x6_mse_1.5'|'CRAFT7x6_l1_eV2-b0_1.5'|'DAT6x6_l1_eV2-b0_1.5'|'DAT12x6_l1_eV2-b0_contextual_1.5'|'SwinFIR4x6_mse_xl'|'SwinFIR4x6_fft_l1_xl'|'DRCT-l_12x6_325k_l1_xl'|'DRCTFIR-l_12x6_215k_l1_xl'|'DRCT-l_12x6_160k_l1_vaeDecode_l1_hfen_xl'|'DRCT-l_12x6_170k_l1_vaeDecode_l1_fft_xl'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.latent
		 * @param opts.version}
        */
        constructor(opts:{
            'latent': LATENT,'version': 'SwinFIR4x6_mse_1.5'|'CRAFT7x6_l1_eV2-b0_1.5'|'DAT6x6_l1_eV2-b0_1.5'|'DAT12x6_l1_eV2-b0_contextual_1.5'|'SwinFIR4x6_mse_xl'|'SwinFIR4x6_fft_l1_xl'|'DRCT-l_12x6_325k_l1_xl'|'DRCTFIR-l_12x6_215k_l1_xl'|'DRCT-l_12x6_160k_l1_vaeDecode_l1_hfen_xl'|'DRCT-l_12x6_170k_l1_vaeDecode_l1_fft_xl'| $dyn
        }){
            super(ctx);

            super.$$link("latent", opts['latent'])
super.$$link("version", opts['version'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "SudoLatentUpscale"
        }
},

    /**
     * Load EXR from image
     * @desc 
    */
    "LoadEXR" : class extends Node{
        //Setters
        //set 'filepath'(value : STRING)  { super.$$link(0, value) } 
//set 'linear_to_sRGB'(value : BOOLEAN)  { super.$$link(1, value) } 
//set 'image_load_cap'(value : INT)  { super.$$link(2, value) } 
//set 'skip_first_images'(value : INT)  { super.$$link(3, value) } 
//set 'select_every_nth'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'RGB'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'alpha'() : MASK { return [this.$uid.toString(), 1]  as unknown as MASK; }
get 'batch_size'() : INT { return [this.$uid.toString(), 2]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.filepath default: "path to directory or .exr file"
		 * @param opts.linear_to_sRGB default: true
		 * @param opts.image_load_cap step: 1
		 * @param opts.skip_first_images step: 1
		 * @param opts.select_every_nth default: 1 max: undefined min: 1 step: 1}
        */
        constructor(opts:{
            'filepath'?: STRING,'linear_to_sRGB'?: BOOLEAN,'image_load_cap'?: INT,'skip_first_images'?: INT,'select_every_nth'?: INT
        }){
            super(ctx);

            super.$$link("filepath", opts['filepath']??tmp["LoadEXR"].defaults['filepath'])
super.$$link("linear_to_sRGB", opts['linear_to_sRGB']??tmp["LoadEXR"].defaults['linear_to_sRGB'])
super.$$link("image_load_cap", opts['image_load_cap']??tmp["LoadEXR"].defaults['image_load_cap'])
super.$$link("skip_first_images", opts['skip_first_images']??tmp["LoadEXR"].defaults['skip_first_images'])
super.$$link("select_every_nth", opts['select_every_nth']??tmp["LoadEXR"].defaults['select_every_nth'])
}

        static defaults = {
    'filepath':  "path to directory or .exr file",
'linear_to_sRGB':  true,
'image_load_cap':  0,
'skip_first_images':  0,
'select_every_nth':  1
}
        protected override $$type(){
            return "LoadEXR"
        }
},

    /**
     * Load EXR Frames from image
     * @desc 
    */
    "LoadEXRFrames" : class extends Node{
        //Setters
        //set 'filepath'(value : STRING)  { super.$$link(0, value) } 
//set 'linear_to_sRGB'(value : BOOLEAN)  { super.$$link(1, value) } 
//set 'start_frame'(value : INT)  { super.$$link(2, value) } 
//set 'end_frame'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'RGB'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'alpha'() : MASK { return [this.$uid.toString(), 1]  as unknown as MASK; }
get 'batch_size'() : INT { return [this.$uid.toString(), 2]  as unknown as INT; }
get 'start_frame'() : INT { return [this.$uid.toString(), 3]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.filepath default: "path/to/frame%04d.exr"
		 * @param opts.linear_to_sRGB default: true
		 * @param opts.start_frame default: 1001
		 * @param opts.end_frame default: 1001}
        */
        constructor(opts:{
            'filepath'?: STRING,'linear_to_sRGB'?: BOOLEAN,'start_frame'?: INT,'end_frame'?: INT
        }){
            super(ctx);

            super.$$link("filepath", opts['filepath']??tmp["LoadEXRFrames"].defaults['filepath'])
super.$$link("linear_to_sRGB", opts['linear_to_sRGB']??tmp["LoadEXRFrames"].defaults['linear_to_sRGB'])
super.$$link("start_frame", opts['start_frame']??tmp["LoadEXRFrames"].defaults['start_frame'])
super.$$link("end_frame", opts['end_frame']??tmp["LoadEXRFrames"].defaults['end_frame'])
}

        static defaults = {
    'filepath':  "path/to/frame%04d.exr",
'linear_to_sRGB':  true,
'start_frame':  1001,
'end_frame':  1001
}
        protected override $$type(){
            return "LoadEXRFrames"
        }
},

    /**
     * Save EXR from image
     * @desc 
    */
    "SaveEXR" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'filename_prefix'(value : STRING)  { super.$$link(1, value) } 
//set 'sRGB_to_linear'(value : BOOLEAN)  { super.$$link(2, value) } 
//set 'version'(value : INT)  { super.$$link(3, value) } 
//set 'start_frame'(value : INT)  { super.$$link(4, value) } 
//set 'frame_pad'(value : INT)  { super.$$link(5, value) } 
//set 'save_workflow'(value : 'ui'|'api'|'ui + api'|'none'| $dyn)  { super.$$link(6, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.filename_prefix default: "ComfyUI"
		 * @param opts.sRGB_to_linear default: true
		 * @param opts.version default: 1 max: 999 min: -1
		 * @param opts.start_frame default: 1001
		 * @param opts.frame_pad default: 4 max: 8 min: 1
		 * @param opts.save_workflow}
        */
        constructor(opts:{
            'images': IMAGE,'filename_prefix'?: STRING,'sRGB_to_linear'?: BOOLEAN,'version'?: INT,'start_frame'?: INT,'frame_pad'?: INT,'save_workflow': 'ui'|'api'|'ui + api'|'none'| $dyn
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("filename_prefix", opts['filename_prefix']??tmp["SaveEXR"].defaults['filename_prefix'])
super.$$link("sRGB_to_linear", opts['sRGB_to_linear']??tmp["SaveEXR"].defaults['sRGB_to_linear'])
super.$$link("version", opts['version']??tmp["SaveEXR"].defaults['version'])
super.$$link("start_frame", opts['start_frame']??tmp["SaveEXR"].defaults['start_frame'])
super.$$link("frame_pad", opts['frame_pad']??tmp["SaveEXR"].defaults['frame_pad'])
super.$$link("save_workflow", opts['save_workflow'])
}

        static defaults = {
    'filename_prefix':  "ComfyUI",
'sRGB_to_linear':  true,
'version':  1,
'start_frame':  1001,
'frame_pad':  4
}
        protected override $$type(){
            return "SaveEXR"
        }
},

    /**
     * Save EXR Frames from image
     * @desc 
    */
    "SaveEXRFrames" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'filepath'(value : STRING)  { super.$$link(1, value) } 
//set 'sRGB_to_linear'(value : BOOLEAN)  { super.$$link(2, value) } 
//set 'start_frame'(value : INT)  { super.$$link(3, value) } 
//set 'overwrite'(value : BOOLEAN)  { super.$$link(4, value) } 
//set 'save_workflow'(value : 'ui'|'api'|'ui + api'|'none'| $dyn)  { super.$$link(5, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.filepath default: "path/to/frame%04d.exr"
		 * @param opts.sRGB_to_linear default: true
		 * @param opts.start_frame default: 1001
		 * @param opts.overwrite default: true
		 * @param opts.save_workflow}
        */
        constructor(opts:{
            'images': IMAGE,'filepath'?: STRING,'sRGB_to_linear'?: BOOLEAN,'start_frame'?: INT,'overwrite'?: BOOLEAN,'save_workflow': 'ui'|'api'|'ui + api'|'none'| $dyn
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("filepath", opts['filepath']??tmp["SaveEXRFrames"].defaults['filepath'])
super.$$link("sRGB_to_linear", opts['sRGB_to_linear']??tmp["SaveEXRFrames"].defaults['sRGB_to_linear'])
super.$$link("start_frame", opts['start_frame']??tmp["SaveEXRFrames"].defaults['start_frame'])
super.$$link("overwrite", opts['overwrite']??tmp["SaveEXRFrames"].defaults['overwrite'])
super.$$link("save_workflow", opts['save_workflow'])
}

        static defaults = {
    'filepath':  "path/to/frame%04d.exr",
'sRGB_to_linear':  true,
'start_frame':  1001,
'overwrite':  true
}
        protected override $$type(){
            return "SaveEXRFrames"
        }
},

    /**
     * Save Tiff from image
     * @desc 
    */
    "SaveTiff" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'filename_prefix'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.filename_prefix default: "ComfyUI"}
        */
        constructor(opts:{
            'images': IMAGE,'filename_prefix'?: STRING
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("filename_prefix", opts['filename_prefix']??tmp["SaveTiff"].defaults['filename_prefix'])
}

        static defaults = {
    'filename_prefix':  "ComfyUI"
}
        protected override $$type(){
            return "SaveTiff"
        }
},

    /**
     * Load Latent EXR from latent
     * @desc 
    */
    "LoadLatentEXR" : class extends Node{
        //Setters
        //set 'filepath'(value : STRING)  { super.$$link(0, value) } 
//set 'image_load_cap'(value : INT)  { super.$$link(1, value) } 
//set 'skip_first_images'(value : INT)  { super.$$link(2, value) } 
//set 'select_every_nth'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'samples'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }
get 'batch_size'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.filepath default: "path to directory or .exr file"
		 * @param opts.image_load_cap step: 1
		 * @param opts.skip_first_images step: 1
		 * @param opts.select_every_nth default: 1 max: undefined min: 1 step: 1}
        */
        constructor(opts:{
            'filepath'?: STRING,'image_load_cap'?: INT,'skip_first_images'?: INT,'select_every_nth'?: INT
        }){
            super(ctx);

            super.$$link("filepath", opts['filepath']??tmp["LoadLatentEXR"].defaults['filepath'])
super.$$link("image_load_cap", opts['image_load_cap']??tmp["LoadLatentEXR"].defaults['image_load_cap'])
super.$$link("skip_first_images", opts['skip_first_images']??tmp["LoadLatentEXR"].defaults['skip_first_images'])
super.$$link("select_every_nth", opts['select_every_nth']??tmp["LoadLatentEXR"].defaults['select_every_nth'])
}

        static defaults = {
    'filepath':  "path to directory or .exr file",
'image_load_cap':  0,
'skip_first_images':  0,
'select_every_nth':  1
}
        protected override $$type(){
            return "LoadLatentEXR"
        }
},

    /**
     * Save Latent EXR from latent
     * @desc 
    */
    "SaveLatentEXR" : class extends Node{
        //Setters
        //set 'samples'(value : LATENT)  { super.$$link(0, value) } 
//set 'filename_prefix'(value : STRING)  { super.$$link(1, value) } 
//set 'version'(value : INT)  { super.$$link(2, value) } 
//set 'start_frame'(value : INT)  { super.$$link(3, value) } 
//set 'frame_pad'(value : INT)  { super.$$link(4, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.samples
		 * @param opts.filename_prefix default: "ComfyUI"
		 * @param opts.version default: 1 max: 999 min: -1
		 * @param opts.start_frame default: 1001
		 * @param opts.frame_pad default: 4 max: 8 min: 1}
        */
        constructor(opts:{
            'samples': LATENT,'filename_prefix'?: STRING,'version'?: INT,'start_frame'?: INT,'frame_pad'?: INT
        }){
            super(ctx);

            super.$$link("samples", opts['samples'])
super.$$link("filename_prefix", opts['filename_prefix']??tmp["SaveLatentEXR"].defaults['filename_prefix'])
super.$$link("version", opts['version']??tmp["SaveLatentEXR"].defaults['version'])
super.$$link("start_frame", opts['start_frame']??tmp["SaveLatentEXR"].defaults['start_frame'])
super.$$link("frame_pad", opts['frame_pad']??tmp["SaveLatentEXR"].defaults['frame_pad'])
}

        static defaults = {
    'filename_prefix':  "ComfyUI",
'version':  1,
'start_frame':  1001,
'frame_pad':  4
}
        protected override $$type(){
            return "SaveLatentEXR"
        }
},

    /**
     * Float from Derfuu_Nodes/Variables
     * @desc 
    */
    "DF_Float" : class extends Node{
        //Setters
        //set 'Value'(value : FLOAT)  { super.$$link(0, value) } 

        //Getters
        get 'FLOAT'() : FLOAT { return [this.$uid.toString(), 0]  as unknown as FLOAT; }

        /**
          * Constructor
		 * @param opts.Value default: 1 max: 1.7976931348623157e+308 min: -1.7976931348623157e+308 step: 0.01}
        */
        constructor(opts:{
            'Value'?: FLOAT
        }){
            super(ctx);

            super.$$link("Value", opts['Value']??tmp["DF_Float"].defaults['Value'])
}

        static defaults = {
    'Value':  1
}
        protected override $$type(){
            return "DF_Float"
        }
},

    /**
     * Integer from Derfuu_Nodes/Variables
     * @desc 
    */
    "DF_Integer" : class extends Node{
        //Setters
        //set 'Value'(value : FLOAT)  { super.$$link(0, value) } 

        //Getters
        get 'INT'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.Value default: 1 max: 1.7976931348623157e+308 min: -1.7976931348623157e+308 step: 1}
        */
        constructor(opts:{
            'Value'?: FLOAT
        }){
            super(ctx);

            super.$$link("Value", opts['Value']??tmp["DF_Integer"].defaults['Value'])
}

        static defaults = {
    'Value':  1
}
        protected override $$type(){
            return "DF_Integer"
        }
},

    /**
     * Text from Derfuu_Nodes/Variables
     * @desc 
    */
    "DF_Text" : class extends Node{
        //Setters
        //set 'Text'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.Text}
        */
        constructor(opts:{
            'Text'?: STRING
        }){
            super(ctx);

            super.$$link("Text", opts['Text']??tmp["DF_Text"].defaults['Text'])
}

        static defaults = {
    'Text':  ""
}
        protected override $$type(){
            return "DF_Text"
        }
},

    /**
     * Text Box from Derfuu_Nodes/Variables
     * @desc 
    */
    "DF_Text_Box" : class extends Node{
        //Setters
        //set 'Text'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.Text}
        */
        constructor(opts:{
            'Text'?: STRING
        }){
            super(ctx);

            super.$$link("Text", opts['Text']??tmp["DF_Text_Box"].defaults['Text'])
}

        static defaults = {
    'Text':  ""
}
        protected override $$type(){
            return "DF_Text_Box"
        }
},

    /**
     * DynamicPrompts Text Box from Derfuu_Nodes/Variables
     * @desc 
    */
    "DF_DynamicPrompts_Text_Box" : class extends Node{
        //Setters
        //set 'Text'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.Text}
        */
        constructor(opts:{
            'Text'?: STRING
        }){
            super(ctx);

            super.$$link("Text", opts['Text']??tmp["DF_DynamicPrompts_Text_Box"].defaults['Text'])
}

        static defaults = {
    'Text':  ""
}
        protected override $$type(){
            return "DF_DynamicPrompts_Text_Box"
        }
},

    /**
     * String Concatenate from Derfuu_Nodes/Functions/String Operations
     * @desc 
    */
    "DF_String_Concatenate" : class extends Node{
        //Setters
        //set 'Prepend'(value : STRING)  { super.$$link(0, value) } 
//set 'Append'(value : STRING)  { super.$$link(1, value) } 
//set 'Delimiter'(value : STRING)  { super.$$link(2, value) } 

        //Getters
        get 'TEXT'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.Prepend
		 * @param opts.Append
		 * @param opts.Delimiter default: ", "}
        */
        constructor(opts:{
            'Prepend'?: STRING,'Append'?: STRING,'Delimiter'?: STRING
        }){
            super(ctx);

            super.$$link("Prepend", opts['Prepend']??tmp["DF_String_Concatenate"].defaults['Prepend'])
super.$$link("Append", opts['Append']??tmp["DF_String_Concatenate"].defaults['Append'])
super.$$link("Delimiter", opts['Delimiter']??tmp["DF_String_Concatenate"].defaults['Delimiter'])
}

        static defaults = {
    'Prepend':  "",
'Append':  "",
'Delimiter':  ", "
}
        protected override $$type(){
            return "DF_String_Concatenate"
        }
},

    /**
     * String Replace from Derfuu_Nodes/Functions/String Operations
     * @desc 
    */
    "DF_String_Replace" : class extends Node{
        //Setters
        //set 'Text'(value : STRING)  { super.$$link(0, value) } 
//set 'Pattern'(value : STRING)  { super.$$link(1, value) } 
//set 'Replace_With'(value : STRING)  { super.$$link(2, value) } 
//set 'Mode'(value : 'Strict'|'RegEx'| $dyn)  { super.$$link(3, value) } 

        //Getters
        get 'TEXT'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.Text
		 * @param opts.Pattern
		 * @param opts.Replace_With
		 * @param opts.Mode}
        */
        constructor(opts:{
            'Text'?: STRING,'Pattern'?: STRING,'Replace_With'?: STRING,'Mode': 'Strict'|'RegEx'| $dyn
        }){
            super(ctx);

            super.$$link("Text", opts['Text']??tmp["DF_String_Replace"].defaults['Text'])
super.$$link("Pattern", opts['Pattern']??tmp["DF_String_Replace"].defaults['Pattern'])
super.$$link("Replace_With", opts['Replace_With']??tmp["DF_String_Replace"].defaults['Replace_With'])
super.$$link("Mode", opts['Mode'])
}

        static defaults = {
    'Text':  "",
'Pattern':  "",
'Replace_With':  ""
}
        protected override $$type(){
            return "DF_String_Replace"
        }
},

    /**
     * Search In Text from Derfuu_Nodes/Functions/String Operations
     * @desc 
    */
    "DF_Search_In_Text" : class extends Node{
        //Setters
        //set 'Text'(value : STRING)  { super.$$link(0, value) } 
//set 'Pattern'(value : STRING)  { super.$$link(1, value) } 
//set 'ConsiderRegister'(value : BOOLEAN)  { super.$$link(2, value) } 
//set 'Mode'(value : 'Strict'|'RegEx'| $dyn)  { super.$$link(3, value) } 

        //Getters
        get 'BOOLEAN'() : BOOLEAN { return [this.$uid.toString(), 0]  as unknown as BOOLEAN; }
get 'OCCURRENCES'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.Text
		 * @param opts.Pattern
		 * @param opts.ConsiderRegister
		 * @param opts.Mode}
        */
        constructor(opts:{
            'Text'?: STRING,'Pattern'?: STRING,'ConsiderRegister'?: BOOLEAN,'Mode': 'Strict'|'RegEx'| $dyn
        }){
            super(ctx);

            super.$$link("Text", opts['Text']??tmp["DF_Search_In_Text"].defaults['Text'])
super.$$link("Pattern", opts['Pattern']??tmp["DF_Search_In_Text"].defaults['Pattern'])
super.$$link("ConsiderRegister", opts['ConsiderRegister']??tmp["DF_Search_In_Text"].defaults['ConsiderRegister'])
super.$$link("Mode", opts['Mode'])
}

        static defaults = {
    'Text':  "",
'Pattern':  "",
'ConsiderRegister':  false
}
        protected override $$type(){
            return "DF_Search_In_Text"
        }
},

    /**
     * To text (Debug) from Derfuu_Nodes/Debug
     * @desc 
    */
    "DF_To_text_(Debug)" : class extends Node{
        //Setters
        //set 'ANY'(value : ANY)  { super.$$link(0, value) } 

        //Getters
        get 'SAME AS INPUT'() : ANY { return [this.$uid.toString(), 0]  as unknown as ANY; }
get 'STRING'() : STRING { return [this.$uid.toString(), 1]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.ANY}
        */
        constructor(opts:{
            'ANY': ANY
        }){
            super(ctx);

            super.$$link("ANY", opts['ANY'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "DF_To_text_(Debug)"
        }
},

    /**
     * Random from Derfuu_Nodes/Functions
     * @desc 
    */
    "DF_Random" : class extends Node{
        //Setters
        //set 'Value_A'(value : FLOAT)  { super.$$link(0, value) } 
//set 'Value_B'(value : FLOAT)  { super.$$link(1, value) } 
//set 'seed'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'FLOAT'() : FLOAT { return [this.$uid.toString(), 0]  as unknown as FLOAT; }

        /**
          * Constructor
		 * @param opts.Value_A max: 1.7976931348623157e+308 min: -1.7976931348623157e+308 step: 0.01
		 * @param opts.Value_B default: 1 max: 1.7976931348623157e+308 min: -1.7976931348623157e+308 step: 0.01
		 * @param opts.seed step: 1}
        */
        constructor(opts:{
            'Value_A'?: FLOAT,'Value_B'?: FLOAT,'seed'?: INT
        }){
            super(ctx);

            super.$$link("Value_A", opts['Value_A']??tmp["DF_Random"].defaults['Value_A'])
super.$$link("Value_B", opts['Value_B']??tmp["DF_Random"].defaults['Value_B'])
super.$$link("seed", opts['seed']??tmp["DF_Random"].defaults['seed'])
}

        static defaults = {
    'Value_A':  0,
'Value_B':  1,
'seed':  0
}
        protected override $$type(){
            return "DF_Random"
        }
},

    /**
     * Int to Float from Derfuu_Nodes/Functions/Converters
     * @desc 
    */
    "DF_Int_to_Float" : class extends Node{
        //Setters
        //set 'Value'(value : INT)  { super.$$link(0, value) } 

        //Getters
        get 'FLOAT'() : FLOAT { return [this.$uid.toString(), 0]  as unknown as FLOAT; }

        /**
          * Constructor
		 * @param opts.Value default: 1 max: 9223372036854776000 min: -9223372036854776000 step: 1}
        */
        constructor(opts:{
            'Value'?: INT
        }){
            super(ctx);

            super.$$link("Value", opts['Value']??tmp["DF_Int_to_Float"].defaults['Value'])
}

        static defaults = {
    'Value':  1
}
        protected override $$type(){
            return "DF_Int_to_Float"
        }
},

    /**
     * Ceil from Derfuu_Nodes/Functions/Converters
     * @desc 
    */
    "DF_Ceil" : class extends Node{
        //Setters
        //set 'Value'(value : FLOAT)  { super.$$link(0, value) } 

        //Getters
        get 'INT'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.Value default: 1 max: 1.7976931348623157e+308 min: -1.7976931348623157e+308 step: 0.01}
        */
        constructor(opts:{
            'Value'?: FLOAT
        }){
            super(ctx);

            super.$$link("Value", opts['Value']??tmp["DF_Ceil"].defaults['Value'])
}

        static defaults = {
    'Value':  1
}
        protected override $$type(){
            return "DF_Ceil"
        }
},

    /**
     * Floor from Derfuu_Nodes/Functions/Converters
     * @desc 
    */
    "DF_Floor" : class extends Node{
        //Setters
        //set 'Value'(value : FLOAT)  { super.$$link(0, value) } 

        //Getters
        get 'INT'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.Value default: 1 max: 1.7976931348623157e+308 min: -1.7976931348623157e+308 step: 0.01}
        */
        constructor(opts:{
            'Value'?: FLOAT
        }){
            super(ctx);

            super.$$link("Value", opts['Value']??tmp["DF_Floor"].defaults['Value'])
}

        static defaults = {
    'Value':  1
}
        protected override $$type(){
            return "DF_Floor"
        }
},

    /**
     * Absolute value from Derfuu_Nodes/Functions/Converters
     * @desc 
    */
    "DF_Absolute_value" : class extends Node{
        //Setters
        //set 'Value'(value : FLOAT)  { super.$$link(0, value) } 
//set 'negative_out'(value : 'false'|'true'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'FLOAT'() : FLOAT { return [this.$uid.toString(), 0]  as unknown as FLOAT; }

        /**
          * Constructor
		 * @param opts.Value default: 1 max: 1.7976931348623157e+308 min: -1.7976931348623157e+308 step: 0.01
		 * @param opts.negative_out}
        */
        constructor(opts:{
            'Value'?: FLOAT,'negative_out': 'false'|'true'| $dyn
        }){
            super(ctx);

            super.$$link("Value", opts['Value']??tmp["DF_Absolute_value"].defaults['Value'])
super.$$link("negative_out", opts['negative_out'])
}

        static defaults = {
    'Value':  1
}
        protected override $$type(){
            return "DF_Absolute_value"
        }
},

    /**
     * Get latent size from Derfuu_Nodes/Functions
     * @desc 
    */
    "DF_Get_latent_size" : class extends Node{
        //Setters
        //set 'latent'(value : LATENT)  { super.$$link(0, value) } 
//set 'original'(value : 'false'|'true'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'WIDTH'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }
get 'HEIGHT'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.latent
		 * @param opts.original}
        */
        constructor(opts:{
            'latent': LATENT,'original': 'false'|'true'| $dyn
        }){
            super(ctx);

            super.$$link("latent", opts['latent'])
super.$$link("original", opts['original'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "DF_Get_latent_size"
        }
},

    /**
     * Get image size from Derfuu_Nodes/Functions
     * @desc 
    */
    "DF_Get_image_size" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        get 'WIDTH'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }
get 'HEIGHT'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.image}
        */
        constructor(opts:{
            'image': IMAGE
        }){
            super(ctx);

            super.$$link("image", opts['image'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "DF_Get_image_size"
        }
},

    /**
     * Sum from Derfuu_Nodes/Math
     * @desc 
    */
    "DF_Sum" : class extends Node{
        //Setters
        //set 'Value_A'(value : FLOAT)  { super.$$link(0, value) } 
//set 'Value_B'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'FLOAT'() : FLOAT { return [this.$uid.toString(), 0]  as unknown as FLOAT; }

        /**
          * Constructor
		 * @param opts.Value_A default: 1 max: 1.7976931348623157e+308 min: -1.7976931348623157e+308 step: 0.01
		 * @param opts.Value_B default: 1 max: 1.7976931348623157e+308 min: -1.7976931348623157e+308 step: 0.01}
        */
        constructor(opts:{
            'Value_A'?: FLOAT,'Value_B'?: FLOAT
        }){
            super(ctx);

            super.$$link("Value_A", opts['Value_A']??tmp["DF_Sum"].defaults['Value_A'])
super.$$link("Value_B", opts['Value_B']??tmp["DF_Sum"].defaults['Value_B'])
}

        static defaults = {
    'Value_A':  1,
'Value_B':  1
}
        protected override $$type(){
            return "DF_Sum"
        }
},

    /**
     * Subtract from Derfuu_Nodes/Math
     * @desc 
    */
    "DF_Subtract" : class extends Node{
        //Setters
        //set 'Value_A'(value : FLOAT)  { super.$$link(0, value) } 
//set 'Value_B'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'FLOAT'() : FLOAT { return [this.$uid.toString(), 0]  as unknown as FLOAT; }

        /**
          * Constructor
		 * @param opts.Value_A default: 1 max: 1.7976931348623157e+308 min: -1.7976931348623157e+308 step: 0.01
		 * @param opts.Value_B default: 1 max: 1.7976931348623157e+308 min: -1.7976931348623157e+308 step: 0.01}
        */
        constructor(opts:{
            'Value_A'?: FLOAT,'Value_B'?: FLOAT
        }){
            super(ctx);

            super.$$link("Value_A", opts['Value_A']??tmp["DF_Subtract"].defaults['Value_A'])
super.$$link("Value_B", opts['Value_B']??tmp["DF_Subtract"].defaults['Value_B'])
}

        static defaults = {
    'Value_A':  1,
'Value_B':  1
}
        protected override $$type(){
            return "DF_Subtract"
        }
},

    /**
     * Multiply from Derfuu_Nodes/Math
     * @desc 
    */
    "DF_Multiply" : class extends Node{
        //Setters
        //set 'Value_A'(value : FLOAT)  { super.$$link(0, value) } 
//set 'Value_B'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'FLOAT'() : FLOAT { return [this.$uid.toString(), 0]  as unknown as FLOAT; }

        /**
          * Constructor
		 * @param opts.Value_A default: 1 max: 1.7976931348623157e+308 min: -1.7976931348623157e+308 step: 0.01
		 * @param opts.Value_B default: 1 max: 1.7976931348623157e+308 min: -1.7976931348623157e+308 step: 0.01}
        */
        constructor(opts:{
            'Value_A'?: FLOAT,'Value_B'?: FLOAT
        }){
            super(ctx);

            super.$$link("Value_A", opts['Value_A']??tmp["DF_Multiply"].defaults['Value_A'])
super.$$link("Value_B", opts['Value_B']??tmp["DF_Multiply"].defaults['Value_B'])
}

        static defaults = {
    'Value_A':  1,
'Value_B':  1
}
        protected override $$type(){
            return "DF_Multiply"
        }
},

    /**
     * Divide from Derfuu_Nodes/Math
     * @desc 
    */
    "DF_Divide" : class extends Node{
        //Setters
        //set 'Numerator'(value : FLOAT)  { super.$$link(0, value) } 
//set 'Denominator'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'FLOAT'() : FLOAT { return [this.$uid.toString(), 0]  as unknown as FLOAT; }

        /**
          * Constructor
		 * @param opts.Numerator default: 1 max: 1.7976931348623157e+308 min: -1.7976931348623157e+308 step: 0.01
		 * @param opts.Denominator default: 1 max: 1.7976931348623157e+308 min: -1.7976931348623157e+308 step: 0.01}
        */
        constructor(opts:{
            'Numerator'?: FLOAT,'Denominator'?: FLOAT
        }){
            super(ctx);

            super.$$link("Numerator", opts['Numerator']??tmp["DF_Divide"].defaults['Numerator'])
super.$$link("Denominator", opts['Denominator']??tmp["DF_Divide"].defaults['Denominator'])
}

        static defaults = {
    'Numerator':  1,
'Denominator':  1
}
        protected override $$type(){
            return "DF_Divide"
        }
},

    /**
     * Power from Derfuu_Nodes/Math
     * @desc 
    */
    "DF_Power" : class extends Node{
        //Setters
        //set 'Value'(value : FLOAT)  { super.$$link(0, value) } 
//set 'Exponent'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'FLOAT'() : FLOAT { return [this.$uid.toString(), 0]  as unknown as FLOAT; }

        /**
          * Constructor
		 * @param opts.Value default: 1 max: 1.7976931348623157e+308 min: -1.7976931348623157e+308 step: 0.01
		 * @param opts.Exponent default: 1 max: 1.7976931348623157e+308 min: -1.7976931348623157e+308 step: 0.01}
        */
        constructor(opts:{
            'Value'?: FLOAT,'Exponent'?: FLOAT
        }){
            super(ctx);

            super.$$link("Value", opts['Value']??tmp["DF_Power"].defaults['Value'])
super.$$link("Exponent", opts['Exponent']??tmp["DF_Power"].defaults['Exponent'])
}

        static defaults = {
    'Value':  1,
'Exponent':  1
}
        protected override $$type(){
            return "DF_Power"
        }
},

    /**
     * Square root from Derfuu_Nodes/Math
     * @desc 
    */
    "DF_Square_root" : class extends Node{
        //Setters
        //set 'Value'(value : FLOAT)  { super.$$link(0, value) } 

        //Getters
        get 'FLOAT'() : FLOAT { return [this.$uid.toString(), 0]  as unknown as FLOAT; }

        /**
          * Constructor
		 * @param opts.Value default: 1 max: 1.7976931348623157e+308 min: -1.7976931348623157e+308 step: 0.01}
        */
        constructor(opts:{
            'Value'?: FLOAT
        }){
            super(ctx);

            super.$$link("Value", opts['Value']??tmp["DF_Square_root"].defaults['Value'])
}

        static defaults = {
    'Value':  1
}
        protected override $$type(){
            return "DF_Square_root"
        }
},

    /**
     * Sinus from Derfuu_Nodes/Math/Trigonometry
     * @desc 
    */
    "DF_Sinus" : class extends Node{
        //Setters
        //set 'value'(value : FLOAT)  { super.$$link(0, value) } 
//set 'type_'(value : 'RAD'|'DEG'| $dyn)  { super.$$link(1, value) } 
//set 'arcSin'(value : 'false'|'true'| $dyn)  { super.$$link(2, value) } 

        //Getters
        get 'FLOAT'() : FLOAT { return [this.$uid.toString(), 0]  as unknown as FLOAT; }

        /**
          * Constructor
		 * @param opts.value default: 1 max: 1.7976931348623157e+308 min: -1.7976931348623157e+308 step: 0.01
		 * @param opts.type_
		 * @param opts.arcSin}
        */
        constructor(opts:{
            'value'?: FLOAT,'type_': 'RAD'|'DEG'| $dyn,'arcSin': 'false'|'true'| $dyn
        }){
            super(ctx);

            super.$$link("value", opts['value']??tmp["DF_Sinus"].defaults['value'])
super.$$link("type_", opts['type_'])
super.$$link("arcSin", opts['arcSin'])
}

        static defaults = {
    'value':  1
}
        protected override $$type(){
            return "DF_Sinus"
        }
},

    /**
     * Cosines from Derfuu_Nodes/Math/Trigonometry
     * @desc 
    */
    "DF_Cosines" : class extends Node{
        //Setters
        //set 'value'(value : FLOAT)  { super.$$link(0, value) } 
//set 'type_'(value : 'RAD'|'DEG'| $dyn)  { super.$$link(1, value) } 
//set 'arcCos'(value : 'false'|'true'| $dyn)  { super.$$link(2, value) } 

        //Getters
        get 'FLOAT'() : FLOAT { return [this.$uid.toString(), 0]  as unknown as FLOAT; }

        /**
          * Constructor
		 * @param opts.value default: 1 max: 1.7976931348623157e+308 min: -1.7976931348623157e+308 step: 0.01
		 * @param opts.type_
		 * @param opts.arcCos}
        */
        constructor(opts:{
            'value'?: FLOAT,'type_': 'RAD'|'DEG'| $dyn,'arcCos': 'false'|'true'| $dyn
        }){
            super(ctx);

            super.$$link("value", opts['value']??tmp["DF_Cosines"].defaults['value'])
super.$$link("type_", opts['type_'])
super.$$link("arcCos", opts['arcCos'])
}

        static defaults = {
    'value':  1
}
        protected override $$type(){
            return "DF_Cosines"
        }
},

    /**
     * Tangent from Derfuu_Nodes/Math/Trigonometry
     * @desc 
    */
    "DF_Tangent" : class extends Node{
        //Setters
        //set 'value'(value : FLOAT)  { super.$$link(0, value) } 
//set 'type_'(value : 'RAD'|'DEG'| $dyn)  { super.$$link(1, value) } 
//set 'arcTan'(value : 'false'|'true'| $dyn)  { super.$$link(2, value) } 

        //Getters
        get 'FLOAT'() : FLOAT { return [this.$uid.toString(), 0]  as unknown as FLOAT; }

        /**
          * Constructor
		 * @param opts.value default: 1 max: 1.7976931348623157e+308 min: -1.7976931348623157e+308 step: 0.01
		 * @param opts.type_
		 * @param opts.arcTan}
        */
        constructor(opts:{
            'value'?: FLOAT,'type_': 'RAD'|'DEG'| $dyn,'arcTan': 'false'|'true'| $dyn
        }){
            super(ctx);

            super.$$link("value", opts['value']??tmp["DF_Tangent"].defaults['value'])
super.$$link("type_", opts['type_'])
super.$$link("arcTan", opts['arcTan'])
}

        static defaults = {
    'value':  1
}
        protected override $$type(){
            return "DF_Tangent"
        }
},

    /**
     * Logic node from Derfuu_Nodes/Functions
     * @desc 
    */
    "DF_Logic_node" : class extends Node{
        //Setters
        //set 'Operation'(value : 'A > B'|'A < B'|'A = B'|'A AND B'|'A OR B'|'A XOR B'| $dyn)  { super.$$link(0, value) } 
//set 'CompareValue_A'(value : ANY)  { super.$$link(1, value) } 
//set 'CompareValue_B'(value : ANY)  { super.$$link(2, value) } 
//set 'OnTrue'(value : ANY)  { super.$$link(3, value) } 
//set 'OnFalse'(value : ANY)  { super.$$link(4, value) } 

        //Getters
        get '*'() : ANY { return [this.$uid.toString(), 0]  as unknown as ANY; }

        /**
          * Constructor
		 * @param opts.Operation
		 * @param opts.CompareValue_A
		 * @param opts.CompareValue_B
		 * @param opts.OnTrue
		 * @param opts.OnFalse}
        */
        constructor(opts:{
            'Operation': 'A > B'|'A < B'|'A = B'|'A AND B'|'A OR B'|'A XOR B'| $dyn,'CompareValue_A': ANY,'CompareValue_B'?: ANY,'OnTrue'?: ANY,'OnFalse'?: ANY
        }){
            super(ctx);

            super.$$link("Operation", opts['Operation'])
super.$$link("CompareValue_A", opts['CompareValue_A'])
super.$$link("CompareValue_B", opts['CompareValue_B'])
super.$$link("OnTrue", opts['OnTrue'])
super.$$link("OnFalse", opts['OnFalse'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "DF_Logic_node"
        }
},

    /**
     * Latent Scale by ratio from Derfuu_Nodes/Modded nodes/Latent
     * @desc 
    */
    "DF_Latent_Scale_by_ratio" : class extends Node{
        //Setters
        //set 'latent'(value : LATENT)  { super.$$link(0, value) } 
//set 'modifier'(value : FLOAT)  { super.$$link(1, value) } 
//set 'scale_method'(value : 'nearest-exact'|'bilinear'|'bicubic'|'bislerp'|'area'|'lanczos'| $dyn)  { super.$$link(2, value) } 
//set 'crop'(value : 'disabled'|'center'| $dyn)  { super.$$link(3, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.latent
		 * @param opts.modifier default: 1 step: 0.01
		 * @param opts.scale_method
		 * @param opts.crop}
        */
        constructor(opts:{
            'latent': LATENT,'modifier'?: FLOAT,'scale_method': 'nearest-exact'|'bilinear'|'bicubic'|'bislerp'|'area'|'lanczos'| $dyn,'crop': 'disabled'|'center'| $dyn
        }){
            super(ctx);

            super.$$link("latent", opts['latent'])
super.$$link("modifier", opts['modifier']??tmp["DF_Latent_Scale_by_ratio"].defaults['modifier'])
super.$$link("scale_method", opts['scale_method'])
super.$$link("crop", opts['crop'])
}

        static defaults = {
    'modifier':  1
}
        protected override $$type(){
            return "DF_Latent_Scale_by_ratio"
        }
},

    /**
     * Latent Scale to side from Derfuu_Nodes/Modded nodes/Latent
     * @desc 
    */
    "DF_Latent_Scale_to_side" : class extends Node{
        //Setters
        //set 'latent'(value : LATENT)  { super.$$link(0, value) } 
//set 'side_length'(value : INT)  { super.$$link(1, value) } 
//set 'side'(value : 'Longest'|'Shortest'|'Width'|'Height'| $dyn)  { super.$$link(2, value) } 
//set 'scale_method'(value : 'nearest-exact'|'bilinear'|'bicubic'|'bislerp'|'area'|'lanczos'| $dyn)  { super.$$link(3, value) } 
//set 'crop'(value : 'disabled'|'center'| $dyn)  { super.$$link(4, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.latent
		 * @param opts.side_length default: 512 max: 9223372036854776000 min: -9223372036854776000 step: 1
		 * @param opts.side
		 * @param opts.scale_method
		 * @param opts.crop}
        */
        constructor(opts:{
            'latent': LATENT,'side_length'?: INT,'side': 'Longest'|'Shortest'|'Width'|'Height'| $dyn,'scale_method': 'nearest-exact'|'bilinear'|'bicubic'|'bislerp'|'area'|'lanczos'| $dyn,'crop': 'disabled'|'center'| $dyn
        }){
            super(ctx);

            super.$$link("latent", opts['latent'])
super.$$link("side_length", opts['side_length']??tmp["DF_Latent_Scale_to_side"].defaults['side_length'])
super.$$link("side", opts['side'])
super.$$link("scale_method", opts['scale_method'])
super.$$link("crop", opts['crop'])
}

        static defaults = {
    'side_length':  512
}
        protected override $$type(){
            return "DF_Latent_Scale_to_side"
        }
},

    /**
     * Image scale by ratio from Derfuu_Nodes/Modded nodes/Image
     * @desc 
    */
    "DF_Image_scale_by_ratio" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'upscale_by'(value : FLOAT)  { super.$$link(1, value) } 
//set 'upscale_method'(value : 'nearest-exact'|'bilinear'|'bicubic'|'bislerp'|'area'|'lanczos'| $dyn)  { super.$$link(2, value) } 
//set 'crop'(value : 'disabled'|'center'| $dyn)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.upscale_by default: 1 max: 1.7976931348623157e+308 min: -1.7976931348623157e+308 step: 0.01
		 * @param opts.upscale_method
		 * @param opts.crop}
        */
        constructor(opts:{
            'image': IMAGE,'upscale_by'?: FLOAT,'upscale_method': 'nearest-exact'|'bilinear'|'bicubic'|'bislerp'|'area'|'lanczos'| $dyn,'crop': 'disabled'|'center'| $dyn
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("upscale_by", opts['upscale_by']??tmp["DF_Image_scale_by_ratio"].defaults['upscale_by'])
super.$$link("upscale_method", opts['upscale_method'])
super.$$link("crop", opts['crop'])
}

        static defaults = {
    'upscale_by':  1
}
        protected override $$type(){
            return "DF_Image_scale_by_ratio"
        }
},

    /**
     * Image scale to side from Derfuu_Nodes/Modded nodes/Image
     * @desc 
    */
    "DF_Image_scale_to_side" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'side_length'(value : INT)  { super.$$link(1, value) } 
//set 'side'(value : 'Longest'|'Shortest'|'Width'|'Height'| $dyn)  { super.$$link(2, value) } 
//set 'upscale_method'(value : 'nearest-exact'|'bilinear'|'bicubic'|'bislerp'|'area'|'lanczos'| $dyn)  { super.$$link(3, value) } 
//set 'crop'(value : 'disabled'|'center'| $dyn)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.side_length default: 1 max: 9223372036854776000 min: -9223372036854776000 step: 1
		 * @param opts.side
		 * @param opts.upscale_method
		 * @param opts.crop}
        */
        constructor(opts:{
            'image': IMAGE,'side_length'?: INT,'side': 'Longest'|'Shortest'|'Width'|'Height'| $dyn,'upscale_method': 'nearest-exact'|'bilinear'|'bicubic'|'bislerp'|'area'|'lanczos'| $dyn,'crop': 'disabled'|'center'| $dyn
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("side_length", opts['side_length']??tmp["DF_Image_scale_to_side"].defaults['side_length'])
super.$$link("side", opts['side'])
super.$$link("upscale_method", opts['upscale_method'])
super.$$link("crop", opts['crop'])
}

        static defaults = {
    'side_length':  1
}
        protected override $$type(){
            return "DF_Image_scale_to_side"
        }
},

    /**
     * Conditioning area scale by ratio from Derfuu_Nodes/Modded nodes/Conditions
     * @desc 
    */
    "DF_Conditioning_area_scale_by_ratio" : class extends Node{
        //Setters
        //set 'conditioning'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'modifier'(value : FLOAT)  { super.$$link(1, value) } 
//set 'strength_modifier'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.conditioning
		 * @param opts.modifier default: 1 max: 1.7976931348623157e+308 min: -1.7976931348623157e+308 step: 0.01
		 * @param opts.strength_modifier default: 1 max: 1.7976931348623157e+308 min: -1.7976931348623157e+308 step: 0.01}
        */
        constructor(opts:{
            'conditioning': CONDITIONING,'modifier'?: FLOAT,'strength_modifier'?: FLOAT
        }){
            super(ctx);

            super.$$link("conditioning", opts['conditioning'])
super.$$link("modifier", opts['modifier']??tmp["DF_Conditioning_area_scale_by_ratio"].defaults['modifier'])
super.$$link("strength_modifier", opts['strength_modifier']??tmp["DF_Conditioning_area_scale_by_ratio"].defaults['strength_modifier'])
}

        static defaults = {
    'modifier':  1,
'strength_modifier':  1
}
        protected override $$type(){
            return "DF_Conditioning_area_scale_by_ratio"
        }
},

    /**
     * (Down)Load LivePortraitModels from LivePortrait
     * @desc 
    */
    "DownloadAndLoadLivePortraitModels" : class extends Node{
        //Setters
        //set 'precision'(value : 'fp16'|'fp32'|'auto'| $dyn)  { super.$$link(0, value) } 
//set 'mode'(value : 'human'|'animal'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'live_portrait_pipe'() : LIVEPORTRAITPIPE { return [this.$uid.toString(), 0]  as unknown as LIVEPORTRAITPIPE; }

        /**
          * Constructor
		 * @param opts.precision default: "auto"
		 * @param opts.mode}
        */
        constructor(opts:{
            'precision'?: 'fp16'|'fp32'|'auto'| $dyn,'mode'?: 'human'|'animal'| $dyn
        }){
            super(ctx);

            super.$$link("precision", opts['precision']??tmp["DownloadAndLoadLivePortraitModels"].defaults['precision'])
super.$$link("mode", opts['mode'])
}

        static defaults = {
    'precision':  "auto"
}
        protected override $$type(){
            return "DownloadAndLoadLivePortraitModels"
        }
},

    /**
     * LivePortrait Process from LivePortrait
     * @desc 
    */
    "LivePortraitProcess" : class extends Node{
        //Setters
        //set 'pipeline'(value : LIVEPORTRAITPIPE)  { super.$$link(0, value) } 
//set 'crop_info'(value : CROPINFO)  { super.$$link(1, value) } 
//set 'source_image'(value : IMAGE)  { super.$$link(2, value) } 
//set 'driving_images'(value : IMAGE)  { super.$$link(3, value) } 
//set 'lip_zero'(value : BOOLEAN)  { super.$$link(4, value) } 
//set 'lip_zero_threshold'(value : FLOAT)  { super.$$link(5, value) } 
//set 'stitching'(value : BOOLEAN)  { super.$$link(6, value) } 
//set 'delta_multiplier'(value : FLOAT)  { super.$$link(7, value) } 
//set 'mismatch_method'(value : 'constant'|'cycle'|'mirror'|'cut'| $dyn)  { super.$$link(8, value) } 
//set 'relative_motion_mode'(value : 'relative'|'source_video_smoothed'|'relative_rotation_only'|'single_frame'|'off'| $dyn)  { super.$$link(9, value) } 
//set 'driving_smooth_observation_variance'(value : FLOAT)  { super.$$link(10, value) } 
//set 'opt_retargeting_info'(value : RETARGETINGINFO)  { super.$$link(11, value) } 
//set 'expression_friendly'(value : BOOLEAN)  { super.$$link(12, value) } 
//set 'expression_friendly_multiplier'(value : FLOAT)  { super.$$link(13, value) } 

        //Getters
        get 'cropped_image'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'output'() : LP_OUT { return [this.$uid.toString(), 1]  as unknown as LP_OUT; }

        /**
          * Constructor
		 * @param opts.pipeline
		 * @param opts.crop_info default: {}
		 * @param opts.source_image
		 * @param opts.driving_images
		 * @param opts.lip_zero
		 * @param opts.lip_zero_threshold default: 0.03 max: 4 min: 0.001 step: 0.001
		 * @param opts.stitching default: true
		 * @param opts.delta_multiplier default: 1 max: 100 min: -100 step: 0.001
		 * @param opts.mismatch_method default: "constant"
		 * @param opts.relative_motion_mode
		 * @param opts.driving_smooth_observation_variance default: 0.000003 max: 0.01 min: 1e-11 step: 1e-11
		 * @param opts.opt_retargeting_info
		 * @param opts.expression_friendly
		 * @param opts.expression_friendly_multiplier default: 1 max: 100 min: 0.01 step: 0.001}
        */
        constructor(opts:{
            'pipeline': LIVEPORTRAITPIPE,'crop_info'?: CROPINFO,'source_image': IMAGE,'driving_images': IMAGE,'lip_zero'?: BOOLEAN,'lip_zero_threshold'?: FLOAT,'stitching'?: BOOLEAN,'delta_multiplier'?: FLOAT,'mismatch_method'?: 'constant'|'cycle'|'mirror'|'cut'| $dyn,'relative_motion_mode': 'relative'|'source_video_smoothed'|'relative_rotation_only'|'single_frame'|'off'| $dyn,'driving_smooth_observation_variance'?: FLOAT,'opt_retargeting_info'?: RETARGETINGINFO,'expression_friendly'?: BOOLEAN,'expression_friendly_multiplier'?: FLOAT
        }){
            super(ctx);

            super.$$link("pipeline", opts['pipeline'])
super.$$link("crop_info", opts['crop_info']??tmp["LivePortraitProcess"].defaults['crop_info'])
super.$$link("source_image", opts['source_image'])
super.$$link("driving_images", opts['driving_images'])
super.$$link("lip_zero", opts['lip_zero']??tmp["LivePortraitProcess"].defaults['lip_zero'])
super.$$link("lip_zero_threshold", opts['lip_zero_threshold']??tmp["LivePortraitProcess"].defaults['lip_zero_threshold'])
super.$$link("stitching", opts['stitching']??tmp["LivePortraitProcess"].defaults['stitching'])
super.$$link("delta_multiplier", opts['delta_multiplier']??tmp["LivePortraitProcess"].defaults['delta_multiplier'])
super.$$link("mismatch_method", opts['mismatch_method']??tmp["LivePortraitProcess"].defaults['mismatch_method'])
super.$$link("relative_motion_mode", opts['relative_motion_mode'])
super.$$link("driving_smooth_observation_variance", opts['driving_smooth_observation_variance']??tmp["LivePortraitProcess"].defaults['driving_smooth_observation_variance'])
super.$$link("opt_retargeting_info", opts['opt_retargeting_info']??tmp["LivePortraitProcess"].defaults['opt_retargeting_info'])
super.$$link("expression_friendly", opts['expression_friendly']??tmp["LivePortraitProcess"].defaults['expression_friendly'])
super.$$link("expression_friendly_multiplier", opts['expression_friendly_multiplier']??tmp["LivePortraitProcess"].defaults['expression_friendly_multiplier'])
}

        static defaults = {
    'crop_info':  {},
'lip_zero':  false,
'lip_zero_threshold':  0.03,
'stitching':  true,
'delta_multiplier':  1,
'mismatch_method':  "constant",
'driving_smooth_observation_variance':  0.000003,
'opt_retargeting_info':  null,
'expression_friendly':  false,
'expression_friendly_multiplier':  1
}
        protected override $$type(){
            return "LivePortraitProcess"
        }
},

    /**
     * LivePortrait Cropper from LivePortrait
     * @desc 
    */
    "LivePortraitCropper" : class extends Node{
        //Setters
        //set 'pipeline'(value : LIVEPORTRAITPIPE)  { super.$$link(0, value) } 
//set 'cropper'(value : LPCROPPER)  { super.$$link(1, value) } 
//set 'source_image'(value : IMAGE)  { super.$$link(2, value) } 
//set 'dsize'(value : INT)  { super.$$link(3, value) } 
//set 'scale'(value : FLOAT)  { super.$$link(4, value) } 
//set 'vx_ratio'(value : FLOAT)  { super.$$link(5, value) } 
//set 'vy_ratio'(value : FLOAT)  { super.$$link(6, value) } 
//set 'face_index'(value : INT)  { super.$$link(7, value) } 
//set 'face_index_order'(value : 'large-small'|'left-right'|'right-left'|'top-bottom'|'bottom-top'|'small-large'|'distance-from-retarget-face'| $dyn)  { super.$$link(8, value) } 
//set 'rotate'(value : BOOLEAN)  { super.$$link(9, value) } 

        //Getters
        get 'cropped_image'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'crop_info'() : CROPINFO { return [this.$uid.toString(), 1]  as unknown as CROPINFO; }

        /**
          * Constructor
		 * @param opts.pipeline
		 * @param opts.cropper
		 * @param opts.source_image
		 * @param opts.dsize default: 512 max: 2048 min: 64
		 * @param opts.scale default: 2.3 max: 4 min: 1 step: 0.01
		 * @param opts.vx_ratio max: 1 min: -1 step: 0.001
		 * @param opts.vy_ratio default: -0.125 max: 1 min: -1 step: 0.001
		 * @param opts.face_index
		 * @param opts.face_index_order
		 * @param opts.rotate default: true}
        */
        constructor(opts:{
            'pipeline': LIVEPORTRAITPIPE,'cropper': LPCROPPER,'source_image': IMAGE,'dsize'?: INT,'scale'?: FLOAT,'vx_ratio'?: FLOAT,'vy_ratio'?: FLOAT,'face_index'?: INT,'face_index_order': 'large-small'|'left-right'|'right-left'|'top-bottom'|'bottom-top'|'small-large'|'distance-from-retarget-face'| $dyn,'rotate'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("pipeline", opts['pipeline'])
super.$$link("cropper", opts['cropper'])
super.$$link("source_image", opts['source_image'])
super.$$link("dsize", opts['dsize']??tmp["LivePortraitCropper"].defaults['dsize'])
super.$$link("scale", opts['scale']??tmp["LivePortraitCropper"].defaults['scale'])
super.$$link("vx_ratio", opts['vx_ratio']??tmp["LivePortraitCropper"].defaults['vx_ratio'])
super.$$link("vy_ratio", opts['vy_ratio']??tmp["LivePortraitCropper"].defaults['vy_ratio'])
super.$$link("face_index", opts['face_index']??tmp["LivePortraitCropper"].defaults['face_index'])
super.$$link("face_index_order", opts['face_index_order'])
super.$$link("rotate", opts['rotate']??tmp["LivePortraitCropper"].defaults['rotate'])
}

        static defaults = {
    'dsize':  512,
'scale':  2.3,
'vx_ratio':  0,
'vy_ratio':  -0.125,
'face_index':  0,
'rotate':  true
}
        protected override $$type(){
            return "LivePortraitCropper"
        }
},

    /**
     * LivePortrait Retargeting from LivePortrait
     * @desc 
    */
    "LivePortraitRetargeting" : class extends Node{
        //Setters
        //set 'driving_crop_info'(value : CROPINFO)  { super.$$link(0, value) } 
//set 'eye_retargeting'(value : BOOLEAN)  { super.$$link(1, value) } 
//set 'eyes_retargeting_multiplier'(value : FLOAT)  { super.$$link(2, value) } 
//set 'lip_retargeting'(value : BOOLEAN)  { super.$$link(3, value) } 
//set 'lip_retargeting_multiplier'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'retargeting_info'() : RETARGETINGINFO { return [this.$uid.toString(), 0]  as unknown as RETARGETINGINFO; }

        /**
          * Constructor
		 * @param opts.driving_crop_info default: []
		 * @param opts.eye_retargeting
		 * @param opts.eyes_retargeting_multiplier default: 1 max: 10 min: 0.01 step: 0.001
		 * @param opts.lip_retargeting
		 * @param opts.lip_retargeting_multiplier default: 1 max: 10 min: 0.01 step: 0.001}
        */
        constructor(opts:{
            'driving_crop_info'?: CROPINFO,'eye_retargeting'?: BOOLEAN,'eyes_retargeting_multiplier'?: FLOAT,'lip_retargeting'?: BOOLEAN,'lip_retargeting_multiplier'?: FLOAT
        }){
            super(ctx);

            super.$$link("driving_crop_info", opts['driving_crop_info']??tmp["LivePortraitRetargeting"].defaults['driving_crop_info'])
super.$$link("eye_retargeting", opts['eye_retargeting']??tmp["LivePortraitRetargeting"].defaults['eye_retargeting'])
super.$$link("eyes_retargeting_multiplier", opts['eyes_retargeting_multiplier']??tmp["LivePortraitRetargeting"].defaults['eyes_retargeting_multiplier'])
super.$$link("lip_retargeting", opts['lip_retargeting']??tmp["LivePortraitRetargeting"].defaults['lip_retargeting'])
super.$$link("lip_retargeting_multiplier", opts['lip_retargeting_multiplier']??tmp["LivePortraitRetargeting"].defaults['lip_retargeting_multiplier'])
}

        static defaults = {
    'driving_crop_info':  [],
'eye_retargeting':  false,
'eyes_retargeting_multiplier':  1,
'lip_retargeting':  false,
'lip_retargeting_multiplier':  1
}
        protected override $$type(){
            return "LivePortraitRetargeting"
        }
},

    /**
     * LivePortrait KeypointsToImage from LivePortrait
     * @desc 
    */
    "KeypointsToImage" : class extends Node{
        //Setters
        //set 'crop_info'(value : CROPINFO)  { super.$$link(0, value) } 
//set 'draw_lines'(value : BOOLEAN)  { super.$$link(1, value) } 

        //Getters
        get 'keypoints_image'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.crop_info default: []
		 * @param opts.draw_lines}
        */
        constructor(opts:{
            'crop_info'?: CROPINFO,'draw_lines'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("crop_info", opts['crop_info']??tmp["KeypointsToImage"].defaults['crop_info'])
super.$$link("draw_lines", opts['draw_lines']??tmp["KeypointsToImage"].defaults['draw_lines'])
}

        static defaults = {
    'crop_info':  [],
'draw_lines':  false
}
        protected override $$type(){
            return "KeypointsToImage"
        }
},

    /**
     * LivePortrait Load InsightFaceCropper from LivePortrait
     * @desc 
    */
    "LivePortraitLoadCropper" : class extends Node{
        //Setters
        //set 'onnx_device'(value : 'CPU'|'CUDA'|'ROCM'|'CoreML'| $dyn)  { super.$$link(0, value) } 
//set 'keep_model_loaded'(value : BOOLEAN)  { super.$$link(1, value) } 
//set 'detection_threshold'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'cropper'() : LPCROPPER { return [this.$uid.toString(), 0]  as unknown as LPCROPPER; }

        /**
          * Constructor
		 * @param opts.onnx_device default: "CPU"
		 * @param opts.keep_model_loaded default: true
		 * @param opts.detection_threshold default: 0.5 max: 1 min: 0.05 step: 0.01}
        */
        constructor(opts:{
            'onnx_device'?: 'CPU'|'CUDA'|'ROCM'|'CoreML'| $dyn,'keep_model_loaded'?: BOOLEAN,'detection_threshold'?: FLOAT
        }){
            super(ctx);

            super.$$link("onnx_device", opts['onnx_device']??tmp["LivePortraitLoadCropper"].defaults['onnx_device'])
super.$$link("keep_model_loaded", opts['keep_model_loaded']??tmp["LivePortraitLoadCropper"].defaults['keep_model_loaded'])
super.$$link("detection_threshold", opts['detection_threshold']??tmp["LivePortraitLoadCropper"].defaults['detection_threshold'])
}

        static defaults = {
    'onnx_device':  "CPU",
'keep_model_loaded':  true,
'detection_threshold':  0.5
}
        protected override $$type(){
            return "LivePortraitLoadCropper"
        }
},

    /**
     * LivePortrait Load MediaPipeCropper from LivePortrait
     * @desc 
    */
    "LivePortraitLoadMediaPipeCropper" : class extends Node{
        //Setters
        //set 'landmarkrunner_onnx_device'(value : 'CPU'|'CUDA'|'ROCM'|'CoreML'|'torch_gpu'| $dyn)  { super.$$link(0, value) } 
//set 'keep_model_loaded'(value : BOOLEAN)  { super.$$link(1, value) } 

        //Getters
        get 'cropper'() : LPCROPPER { return [this.$uid.toString(), 0]  as unknown as LPCROPPER; }

        /**
          * Constructor
		 * @param opts.landmarkrunner_onnx_device default: "CPU"
		 * @param opts.keep_model_loaded default: true}
        */
        constructor(opts:{
            'landmarkrunner_onnx_device'?: 'CPU'|'CUDA'|'ROCM'|'CoreML'|'torch_gpu'| $dyn,'keep_model_loaded'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("landmarkrunner_onnx_device", opts['landmarkrunner_onnx_device']??tmp["LivePortraitLoadMediaPipeCropper"].defaults['landmarkrunner_onnx_device'])
super.$$link("keep_model_loaded", opts['keep_model_loaded']??tmp["LivePortraitLoadMediaPipeCropper"].defaults['keep_model_loaded'])
}

        static defaults = {
    'landmarkrunner_onnx_device':  "CPU",
'keep_model_loaded':  true
}
        protected override $$type(){
            return "LivePortraitLoadMediaPipeCropper"
        }
},

    /**
     * LivePortrait Load FaceAlignmentCropper from LivePortrait
     * @desc 
    */
    "LivePortraitLoadFaceAlignmentCropper" : class extends Node{
        //Setters
        //set 'face_detector'(value : 'blazeface'|'blazeface_back_camera'|'sfd'| $dyn)  { super.$$link(0, value) } 
//set 'landmarkrunner_device'(value : 'CPU'|'CUDA'|'ROCM'|'CoreML'|'torch_gpu'| $dyn)  { super.$$link(1, value) } 
//set 'face_detector_device'(value : 'cuda'|'cpu'|'mps'| $dyn)  { super.$$link(2, value) } 
//set 'face_detector_dtype'(value : 'fp16'|'bf16'|'fp32'| $dyn)  { super.$$link(3, value) } 
//set 'keep_model_loaded'(value : BOOLEAN)  { super.$$link(4, value) } 

        //Getters
        get 'cropper'() : LPCROPPER { return [this.$uid.toString(), 0]  as unknown as LPCROPPER; }

        /**
          * Constructor
		 * @param opts.face_detector default: "blazeface_back_camera"
		 * @param opts.landmarkrunner_device default: "torch_gpu"
		 * @param opts.face_detector_device default: "cuda"
		 * @param opts.face_detector_dtype default: "fp16"
		 * @param opts.keep_model_loaded default: true}
        */
        constructor(opts:{
            'face_detector'?: 'blazeface'|'blazeface_back_camera'|'sfd'| $dyn,'landmarkrunner_device'?: 'CPU'|'CUDA'|'ROCM'|'CoreML'|'torch_gpu'| $dyn,'face_detector_device'?: 'cuda'|'cpu'|'mps'| $dyn,'face_detector_dtype'?: 'fp16'|'bf16'|'fp32'| $dyn,'keep_model_loaded'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("face_detector", opts['face_detector']??tmp["LivePortraitLoadFaceAlignmentCropper"].defaults['face_detector'])
super.$$link("landmarkrunner_device", opts['landmarkrunner_device']??tmp["LivePortraitLoadFaceAlignmentCropper"].defaults['landmarkrunner_device'])
super.$$link("face_detector_device", opts['face_detector_device']??tmp["LivePortraitLoadFaceAlignmentCropper"].defaults['face_detector_device'])
super.$$link("face_detector_dtype", opts['face_detector_dtype']??tmp["LivePortraitLoadFaceAlignmentCropper"].defaults['face_detector_dtype'])
super.$$link("keep_model_loaded", opts['keep_model_loaded']??tmp["LivePortraitLoadFaceAlignmentCropper"].defaults['keep_model_loaded'])
}

        static defaults = {
    'face_detector':  "blazeface_back_camera",
'landmarkrunner_device':  "torch_gpu",
'face_detector_device':  "cuda",
'face_detector_dtype':  "fp16",
'keep_model_loaded':  true
}
        protected override $$type(){
            return "LivePortraitLoadFaceAlignmentCropper"
        }
},

    /**
     * LivePortrait Composite from LivePortrait
     * @desc 
    */
    "LivePortraitComposite" : class extends Node{
        //Setters
        //set 'source_image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'cropped_image'(value : IMAGE)  { super.$$link(1, value) } 
//set 'liveportrait_out'(value : LP_OUT)  { super.$$link(2, value) } 
//set 'mask'(value : MASK)  { super.$$link(3, value) } 

        //Getters
        get 'full_images'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'mask'() : MASK { return [this.$uid.toString(), 1]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.source_image
		 * @param opts.cropped_image
		 * @param opts.liveportrait_out
		 * @param opts.mask}
        */
        constructor(opts:{
            'source_image': IMAGE,'cropped_image': IMAGE,'liveportrait_out': LP_OUT,'mask'?: MASK
        }){
            super(ctx);

            super.$$link("source_image", opts['source_image'])
super.$$link("cropped_image", opts['cropped_image'])
super.$$link("liveportrait_out", opts['liveportrait_out'])
super.$$link("mask", opts['mask']??tmp["LivePortraitComposite"].defaults['mask'])
}

        static defaults = {
    'mask':  null
}
        protected override $$type(){
            return "LivePortraitComposite"
        }
},

    /**
     * CheckpointLoaderNF4 from loaders
     * @desc 
    */
    "CheckpointLoaderNF4" : class extends Node{
        //Setters
        //set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this.$uid.toString(), 1]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this.$uid.toString(), 2]  as unknown as VAE; }

        /**
          * Constructor
		 * @param opts.ckpt_name}
        */
        constructor(opts:{
            'ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn
        }){
            super(ctx);

            super.$$link("ckpt_name", opts['ckpt_name'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "CheckpointLoaderNF4"
        }
},

    /**
     * Layer Diffuse Apply from layer_diffuse
     * @desc 
    */
    "LayeredDiffusionApply" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'config'(value : 'SDXL, Attention Injection'|'SDXL, Conv Injection'|'SD15, Attention Injection, attn_sharing'| $dyn)  { super.$$link(1, value) } 
//set 'weight'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.config
		 * @param opts.weight default: 1 max: 3 min: -1 step: 0.05}
        */
        constructor(opts:{
            'model': MODEL,'config': 'SDXL, Attention Injection'|'SDXL, Conv Injection'|'SD15, Attention Injection, attn_sharing'| $dyn,'weight'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("config", opts['config'])
super.$$link("weight", opts['weight']??tmp["LayeredDiffusionApply"].defaults['weight'])
}

        static defaults = {
    'weight':  1
}
        protected override $$type(){
            return "LayeredDiffusionApply"
        }
},

    /**
     * Layer Diffuse Joint Apply from layer_diffuse
     * @desc 
    */
    "LayeredDiffusionJointApply" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'config'(value : 'SD15, attn_sharing, Batch size (3N)'| $dyn)  { super.$$link(1, value) } 
//set 'fg_cond'(value : CONDITIONING)  { super.$$link(2, value) } 
//set 'bg_cond'(value : CONDITIONING)  { super.$$link(3, value) } 
//set 'blended_cond'(value : CONDITIONING)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.config
		 * @param opts.fg_cond
		 * @param opts.bg_cond
		 * @param opts.blended_cond}
        */
        constructor(opts:{
            'model': MODEL,'config': 'SD15, attn_sharing, Batch size (3N)'| $dyn,'fg_cond'?: CONDITIONING,'bg_cond'?: CONDITIONING,'blended_cond'?: CONDITIONING
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("config", opts['config'])
super.$$link("fg_cond", opts['fg_cond'])
super.$$link("bg_cond", opts['bg_cond'])
super.$$link("blended_cond", opts['blended_cond'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "LayeredDiffusionJointApply"
        }
},

    /**
     * Layer Diffuse Cond Apply from layer_diffuse
     * @desc 
    */
    "LayeredDiffusionCondApply" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'cond'(value : CONDITIONING)  { super.$$link(1, value) } 
//set 'uncond'(value : CONDITIONING)  { super.$$link(2, value) } 
//set 'latent'(value : LATENT)  { super.$$link(3, value) } 
//set 'config'(value : 'SDXL, Foreground'|'SDXL, Background'| $dyn)  { super.$$link(4, value) } 
//set 'weight'(value : FLOAT)  { super.$$link(5, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 1]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.cond
		 * @param opts.uncond
		 * @param opts.latent
		 * @param opts.config
		 * @param opts.weight default: 1 max: 3 min: -1 step: 0.05}
        */
        constructor(opts:{
            'model': MODEL,'cond': CONDITIONING,'uncond': CONDITIONING,'latent': LATENT,'config': 'SDXL, Foreground'|'SDXL, Background'| $dyn,'weight'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("cond", opts['cond'])
super.$$link("uncond", opts['uncond'])
super.$$link("latent", opts['latent'])
super.$$link("config", opts['config'])
super.$$link("weight", opts['weight']??tmp["LayeredDiffusionCondApply"].defaults['weight'])
}

        static defaults = {
    'weight':  1
}
        protected override $$type(){
            return "LayeredDiffusionCondApply"
        }
},

    /**
     * Layer Diffuse Cond Joint Apply from layer_diffuse
     * @desc 
    */
    "LayeredDiffusionCondJointApply" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'image'(value : IMAGE)  { super.$$link(1, value) } 
//set 'config'(value : 'SD15, Foreground, attn_sharing, Batch size (2N)'|'SD15, Background, attn_sharing, Batch size (2N)'| $dyn)  { super.$$link(2, value) } 
//set 'cond'(value : CONDITIONING)  { super.$$link(3, value) } 
//set 'blended_cond'(value : CONDITIONING)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.image
		 * @param opts.config
		 * @param opts.cond
		 * @param opts.blended_cond}
        */
        constructor(opts:{
            'model': MODEL,'image': IMAGE,'config': 'SD15, Foreground, attn_sharing, Batch size (2N)'|'SD15, Background, attn_sharing, Batch size (2N)'| $dyn,'cond'?: CONDITIONING,'blended_cond'?: CONDITIONING
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("image", opts['image'])
super.$$link("config", opts['config'])
super.$$link("cond", opts['cond'])
super.$$link("blended_cond", opts['blended_cond'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "LayeredDiffusionCondJointApply"
        }
},

    /**
     * Layer Diffuse Diff Apply from layer_diffuse
     * @desc 
    */
    "LayeredDiffusionDiffApply" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'cond'(value : CONDITIONING)  { super.$$link(1, value) } 
//set 'uncond'(value : CONDITIONING)  { super.$$link(2, value) } 
//set 'blended_latent'(value : LATENT)  { super.$$link(3, value) } 
//set 'latent'(value : LATENT)  { super.$$link(4, value) } 
//set 'config'(value : 'SDXL, Foreground'|'SDXL, Background'| $dyn)  { super.$$link(5, value) } 
//set 'weight'(value : FLOAT)  { super.$$link(6, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 1]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.cond
		 * @param opts.uncond
		 * @param opts.blended_latent
		 * @param opts.latent
		 * @param opts.config
		 * @param opts.weight default: 1 max: 3 min: -1 step: 0.05}
        */
        constructor(opts:{
            'model': MODEL,'cond': CONDITIONING,'uncond': CONDITIONING,'blended_latent': LATENT,'latent': LATENT,'config': 'SDXL, Foreground'|'SDXL, Background'| $dyn,'weight'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("cond", opts['cond'])
super.$$link("uncond", opts['uncond'])
super.$$link("blended_latent", opts['blended_latent'])
super.$$link("latent", opts['latent'])
super.$$link("config", opts['config'])
super.$$link("weight", opts['weight']??tmp["LayeredDiffusionDiffApply"].defaults['weight'])
}

        static defaults = {
    'weight':  1
}
        protected override $$type(){
            return "LayeredDiffusionDiffApply"
        }
},

    /**
     * Layer Diffuse Decode from layer_diffuse
     * @desc 
    */
    "LayeredDiffusionDecode" : class extends Node{
        //Setters
        //set 'samples'(value : LATENT)  { super.$$link(0, value) } 
//set 'images'(value : IMAGE)  { super.$$link(1, value) } 
//set 'sd_version'(value : 'SD15'|'SDXL'| $dyn)  { super.$$link(2, value) } 
//set 'sub_batch_size'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'MASK'() : MASK { return [this.$uid.toString(), 1]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.samples
		 * @param opts.images
		 * @param opts.sd_version default: "SDXL"
		 * @param opts.sub_batch_size default: 16 max: 4096 min: 1 step: 1}
        */
        constructor(opts:{
            'samples': LATENT,'images': IMAGE,'sd_version'?: 'SD15'|'SDXL'| $dyn,'sub_batch_size'?: INT
        }){
            super(ctx);

            super.$$link("samples", opts['samples'])
super.$$link("images", opts['images'])
super.$$link("sd_version", opts['sd_version']??tmp["LayeredDiffusionDecode"].defaults['sd_version'])
super.$$link("sub_batch_size", opts['sub_batch_size']??tmp["LayeredDiffusionDecode"].defaults['sub_batch_size'])
}

        static defaults = {
    'sd_version':  "SDXL",
'sub_batch_size':  16
}
        protected override $$type(){
            return "LayeredDiffusionDecode"
        }
},

    /**
     * Layer Diffuse Decode (RGBA) from layer_diffuse
     * @desc 
    */
    "LayeredDiffusionDecodeRGBA" : class extends Node{
        //Setters
        //set 'samples'(value : LATENT)  { super.$$link(0, value) } 
//set 'images'(value : IMAGE)  { super.$$link(1, value) } 
//set 'sd_version'(value : 'SD15'|'SDXL'| $dyn)  { super.$$link(2, value) } 
//set 'sub_batch_size'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.samples
		 * @param opts.images
		 * @param opts.sd_version default: "SDXL"
		 * @param opts.sub_batch_size default: 16 max: 4096 min: 1 step: 1}
        */
        constructor(opts:{
            'samples': LATENT,'images': IMAGE,'sd_version'?: 'SD15'|'SDXL'| $dyn,'sub_batch_size'?: INT
        }){
            super(ctx);

            super.$$link("samples", opts['samples'])
super.$$link("images", opts['images'])
super.$$link("sd_version", opts['sd_version']??tmp["LayeredDiffusionDecodeRGBA"].defaults['sd_version'])
super.$$link("sub_batch_size", opts['sub_batch_size']??tmp["LayeredDiffusionDecodeRGBA"].defaults['sub_batch_size'])
}

        static defaults = {
    'sd_version':  "SDXL",
'sub_batch_size':  16
}
        protected override $$type(){
            return "LayeredDiffusionDecodeRGBA"
        }
},

    /**
     * Layer Diffuse Decode (Split) from layer_diffuse
     * @desc 
    */
    "LayeredDiffusionDecodeSplit" : class extends Node{
        //Setters
        //set 'samples'(value : LATENT)  { super.$$link(0, value) } 
//set 'images'(value : IMAGE)  { super.$$link(1, value) } 
//set 'frames'(value : INT)  { super.$$link(2, value) } 
//set 'sd_version'(value : 'SD15'|'SDXL'| $dyn)  { super.$$link(3, value) } 
//set 'sub_batch_size'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.samples
		 * @param opts.images
		 * @param opts.frames default: 2 max: 3 min: 2 step: 1
		 * @param opts.sd_version default: "SDXL"
		 * @param opts.sub_batch_size default: 16 max: 4096 min: 1 step: 1}
        */
        constructor(opts:{
            'samples': LATENT,'images': IMAGE,'frames'?: INT,'sd_version'?: 'SD15'|'SDXL'| $dyn,'sub_batch_size'?: INT
        }){
            super(ctx);

            super.$$link("samples", opts['samples'])
super.$$link("images", opts['images'])
super.$$link("frames", opts['frames']??tmp["LayeredDiffusionDecodeSplit"].defaults['frames'])
super.$$link("sd_version", opts['sd_version']??tmp["LayeredDiffusionDecodeSplit"].defaults['sd_version'])
super.$$link("sub_batch_size", opts['sub_batch_size']??tmp["LayeredDiffusionDecodeSplit"].defaults['sub_batch_size'])
}

        static defaults = {
    'frames':  2,
'sd_version':  "SDXL",
'sub_batch_size':  16
}
        protected override $$type(){
            return "LayeredDiffusionDecodeSplit"
        }
},

    /**
     * Load InstantID Model from InstantID
     * @desc 
    */
    "InstantIDModelLoader" : class extends Node{
        //Setters
        //set 'instantid_file'(value : void)  { super.$$link(0, value) } 

        //Getters
        get 'INSTANTID'() : INSTANTID { return [this.$uid.toString(), 0]  as unknown as INSTANTID; }

        /**
          * Constructor
		 * @param opts.instantid_file}
        */
        constructor(opts:{
            'instantid_file': void
        }){
            super(ctx);

            super.$$link("instantid_file", opts['instantid_file'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "InstantIDModelLoader"
        }
},

    /**
     * InstantID Face Analysis from InstantID
     * @desc 
    */
    "InstantIDFaceAnalysis" : class extends Node{
        //Setters
        //set 'provider'(value : 'CPU'|'CUDA'|'ROCM'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'FACEANALYSIS'() : FACEANALYSIS { return [this.$uid.toString(), 0]  as unknown as FACEANALYSIS; }

        /**
          * Constructor
		 * @param opts.provider}
        */
        constructor(opts:{
            'provider': 'CPU'|'CUDA'|'ROCM'| $dyn
        }){
            super(ctx);

            super.$$link("provider", opts['provider'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "InstantIDFaceAnalysis"
        }
},

    /**
     * Apply InstantID from InstantID
     * @desc 
    */
    "ApplyInstantID" : class extends Node{
        //Setters
        //set 'instantid'(value : INSTANTID)  { super.$$link(0, value) } 
//set 'insightface'(value : FACEANALYSIS)  { super.$$link(1, value) } 
//set 'control_net'(value : CONTROL_NET)  { super.$$link(2, value) } 
//set 'image'(value : IMAGE)  { super.$$link(3, value) } 
//set 'model'(value : MODEL)  { super.$$link(4, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(5, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(6, value) } 
//set 'weight'(value : FLOAT)  { super.$$link(7, value) } 
//set 'start_at'(value : FLOAT)  { super.$$link(8, value) } 
//set 'end_at'(value : FLOAT)  { super.$$link(9, value) } 
//set 'image_kps'(value : IMAGE)  { super.$$link(10, value) } 
//set 'mask'(value : MASK)  { super.$$link(11, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'positive'() : CONDITIONING { return [this.$uid.toString(), 1]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this.$uid.toString(), 2]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.instantid
		 * @param opts.insightface
		 * @param opts.control_net
		 * @param opts.image
		 * @param opts.model
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.weight default: 0.8 step: 0.01
		 * @param opts.start_at step: 0.001
		 * @param opts.end_at default: 1 step: 0.001
		 * @param opts.image_kps
		 * @param opts.mask}
        */
        constructor(opts:{
            'instantid': INSTANTID,'insightface': FACEANALYSIS,'control_net': CONTROL_NET,'image': IMAGE,'model': MODEL,'positive': CONDITIONING,'negative': CONDITIONING,'weight'?: FLOAT,'start_at'?: FLOAT,'end_at'?: FLOAT,'image_kps'?: IMAGE,'mask'?: MASK
        }){
            super(ctx);

            super.$$link("instantid", opts['instantid'])
super.$$link("insightface", opts['insightface'])
super.$$link("control_net", opts['control_net'])
super.$$link("image", opts['image'])
super.$$link("model", opts['model'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("weight", opts['weight']??tmp["ApplyInstantID"].defaults['weight'])
super.$$link("start_at", opts['start_at']??tmp["ApplyInstantID"].defaults['start_at'])
super.$$link("end_at", opts['end_at']??tmp["ApplyInstantID"].defaults['end_at'])
super.$$link("image_kps", opts['image_kps'])
super.$$link("mask", opts['mask'])
}

        static defaults = {
    'weight':  0.8,
'start_at':  0,
'end_at':  1
}
        protected override $$type(){
            return "ApplyInstantID"
        }
},

    /**
     * Apply InstantID Advanced from InstantID
     * @desc 
    */
    "ApplyInstantIDAdvanced" : class extends Node{
        //Setters
        //set 'instantid'(value : INSTANTID)  { super.$$link(0, value) } 
//set 'insightface'(value : FACEANALYSIS)  { super.$$link(1, value) } 
//set 'control_net'(value : CONTROL_NET)  { super.$$link(2, value) } 
//set 'image'(value : IMAGE)  { super.$$link(3, value) } 
//set 'model'(value : MODEL)  { super.$$link(4, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(5, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(6, value) } 
//set 'ip_weight'(value : FLOAT)  { super.$$link(7, value) } 
//set 'cn_strength'(value : FLOAT)  { super.$$link(8, value) } 
//set 'start_at'(value : FLOAT)  { super.$$link(9, value) } 
//set 'end_at'(value : FLOAT)  { super.$$link(10, value) } 
//set 'noise'(value : FLOAT)  { super.$$link(11, value) } 
//set 'combine_embeds'(value : 'average'|'norm average'|'concat'| $dyn)  { super.$$link(12, value) } 
//set 'image_kps'(value : IMAGE)  { super.$$link(13, value) } 
//set 'mask'(value : MASK)  { super.$$link(14, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'positive'() : CONDITIONING { return [this.$uid.toString(), 1]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this.$uid.toString(), 2]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.instantid
		 * @param opts.insightface
		 * @param opts.control_net
		 * @param opts.image
		 * @param opts.model
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.ip_weight default: 0.8 step: 0.01
		 * @param opts.cn_strength default: 0.8 step: 0.01
		 * @param opts.start_at step: 0.001
		 * @param opts.end_at default: 1 step: 0.001
		 * @param opts.noise step: 0.1
		 * @param opts.combine_embeds default: "average"
		 * @param opts.image_kps
		 * @param opts.mask}
        */
        constructor(opts:{
            'instantid': INSTANTID,'insightface': FACEANALYSIS,'control_net': CONTROL_NET,'image': IMAGE,'model': MODEL,'positive': CONDITIONING,'negative': CONDITIONING,'ip_weight'?: FLOAT,'cn_strength'?: FLOAT,'start_at'?: FLOAT,'end_at'?: FLOAT,'noise'?: FLOAT,'combine_embeds'?: 'average'|'norm average'|'concat'| $dyn,'image_kps'?: IMAGE,'mask'?: MASK
        }){
            super(ctx);

            super.$$link("instantid", opts['instantid'])
super.$$link("insightface", opts['insightface'])
super.$$link("control_net", opts['control_net'])
super.$$link("image", opts['image'])
super.$$link("model", opts['model'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("ip_weight", opts['ip_weight']??tmp["ApplyInstantIDAdvanced"].defaults['ip_weight'])
super.$$link("cn_strength", opts['cn_strength']??tmp["ApplyInstantIDAdvanced"].defaults['cn_strength'])
super.$$link("start_at", opts['start_at']??tmp["ApplyInstantIDAdvanced"].defaults['start_at'])
super.$$link("end_at", opts['end_at']??tmp["ApplyInstantIDAdvanced"].defaults['end_at'])
super.$$link("noise", opts['noise']??tmp["ApplyInstantIDAdvanced"].defaults['noise'])
super.$$link("combine_embeds", opts['combine_embeds']??tmp["ApplyInstantIDAdvanced"].defaults['combine_embeds'])
super.$$link("image_kps", opts['image_kps'])
super.$$link("mask", opts['mask'])
}

        static defaults = {
    'ip_weight':  0.8,
'cn_strength':  0.8,
'start_at':  0,
'end_at':  1,
'noise':  0,
'combine_embeds':  "average"
}
        protected override $$type(){
            return "ApplyInstantIDAdvanced"
        }
},

    /**
     * Face Keypoints Preprocessor from InstantID
     * @desc 
    */
    "FaceKeypointsPreprocessor" : class extends Node{
        //Setters
        //set 'faceanalysis'(value : FACEANALYSIS)  { super.$$link(0, value) } 
//set 'image'(value : IMAGE)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.faceanalysis
		 * @param opts.image}
        */
        constructor(opts:{
            'faceanalysis': FACEANALYSIS,'image': IMAGE
        }){
            super(ctx);

            super.$$link("faceanalysis", opts['faceanalysis'])
super.$$link("image", opts['image'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "FaceKeypointsPreprocessor"
        }
},

    /**
     * InstantID Patch Attention from InstantID
     * @desc 
    */
    "InstantIDAttentionPatch" : class extends Node{
        //Setters
        //set 'instantid'(value : INSTANTID)  { super.$$link(0, value) } 
//set 'insightface'(value : FACEANALYSIS)  { super.$$link(1, value) } 
//set 'image'(value : IMAGE)  { super.$$link(2, value) } 
//set 'model'(value : MODEL)  { super.$$link(3, value) } 
//set 'weight'(value : FLOAT)  { super.$$link(4, value) } 
//set 'start_at'(value : FLOAT)  { super.$$link(5, value) } 
//set 'end_at'(value : FLOAT)  { super.$$link(6, value) } 
//set 'noise'(value : FLOAT)  { super.$$link(7, value) } 
//set 'mask'(value : MASK)  { super.$$link(8, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'FACE_EMBEDS'() : FACE_EMBEDS { return [this.$uid.toString(), 1]  as unknown as FACE_EMBEDS; }

        /**
          * Constructor
		 * @param opts.instantid
		 * @param opts.insightface
		 * @param opts.image
		 * @param opts.model
		 * @param opts.weight default: 1 max: 3 min: -1 step: 0.01
		 * @param opts.start_at step: 0.001
		 * @param opts.end_at default: 1 step: 0.001
		 * @param opts.noise step: 0.1
		 * @param opts.mask}
        */
        constructor(opts:{
            'instantid': INSTANTID,'insightface': FACEANALYSIS,'image': IMAGE,'model': MODEL,'weight'?: FLOAT,'start_at'?: FLOAT,'end_at'?: FLOAT,'noise'?: FLOAT,'mask'?: MASK
        }){
            super(ctx);

            super.$$link("instantid", opts['instantid'])
super.$$link("insightface", opts['insightface'])
super.$$link("image", opts['image'])
super.$$link("model", opts['model'])
super.$$link("weight", opts['weight']??tmp["InstantIDAttentionPatch"].defaults['weight'])
super.$$link("start_at", opts['start_at']??tmp["InstantIDAttentionPatch"].defaults['start_at'])
super.$$link("end_at", opts['end_at']??tmp["InstantIDAttentionPatch"].defaults['end_at'])
super.$$link("noise", opts['noise']??tmp["InstantIDAttentionPatch"].defaults['noise'])
super.$$link("mask", opts['mask'])
}

        static defaults = {
    'weight':  1,
'start_at':  0,
'end_at':  1,
'noise':  0
}
        protected override $$type(){
            return "InstantIDAttentionPatch"
        }
},

    /**
     * InstantID Apply ControlNet from InstantID
     * @desc 
    */
    "ApplyInstantIDControlNet" : class extends Node{
        //Setters
        //set 'face_embeds'(value : FACE_EMBEDS)  { super.$$link(0, value) } 
//set 'control_net'(value : CONTROL_NET)  { super.$$link(1, value) } 
//set 'image_kps'(value : IMAGE)  { super.$$link(2, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(3, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(4, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(5, value) } 
//set 'start_at'(value : FLOAT)  { super.$$link(6, value) } 
//set 'end_at'(value : FLOAT)  { super.$$link(7, value) } 
//set 'mask'(value : MASK)  { super.$$link(8, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this.$uid.toString(), 1]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.face_embeds
		 * @param opts.control_net
		 * @param opts.image_kps
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.strength default: 1 step: 0.01
		 * @param opts.start_at step: 0.001
		 * @param opts.end_at default: 1 step: 0.001
		 * @param opts.mask}
        */
        constructor(opts:{
            'face_embeds': FACE_EMBEDS,'control_net': CONTROL_NET,'image_kps': IMAGE,'positive': CONDITIONING,'negative': CONDITIONING,'strength'?: FLOAT,'start_at'?: FLOAT,'end_at'?: FLOAT,'mask'?: MASK
        }){
            super(ctx);

            super.$$link("face_embeds", opts['face_embeds'])
super.$$link("control_net", opts['control_net'])
super.$$link("image_kps", opts['image_kps'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("strength", opts['strength']??tmp["ApplyInstantIDControlNet"].defaults['strength'])
super.$$link("start_at", opts['start_at']??tmp["ApplyInstantIDControlNet"].defaults['start_at'])
super.$$link("end_at", opts['end_at']??tmp["ApplyInstantIDControlNet"].defaults['end_at'])
super.$$link("mask", opts['mask'])
}

        static defaults = {
    'strength':  1,
'start_at':  0,
'end_at':  1
}
        protected override $$type(){
            return "ApplyInstantIDControlNet"
        }
},

    /**
     * Latent Diffusion Mega Modifier from clybNodes
     * @desc 
    */
    "Latent Diffusion Mega Modifier" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'sharpness_multiplier'(value : FLOAT)  { super.$$link(1, value) } 
//set 'sharpness_method'(value : 'anisotropic'|'joint-anisotropic'|'gaussian'|'cas'| $dyn)  { super.$$link(2, value) } 
//set 'tonemap_multiplier'(value : FLOAT)  { super.$$link(3, value) } 
//set 'tonemap_method'(value : 'reinhard'|'reinhard_perchannel'|'arctan'|'quantile'|'gated'|'cfg-mimic'|'spatial-norm'| $dyn)  { super.$$link(4, value) } 
//set 'tonemap_percentile'(value : FLOAT)  { super.$$link(5, value) } 
//set 'contrast_multiplier'(value : FLOAT)  { super.$$link(6, value) } 
//set 'combat_method'(value : 'subtract'|'subtract_channels'|'subtract_median'|'sharpen'| $dyn)  { super.$$link(7, value) } 
//set 'combat_cfg_drift'(value : FLOAT)  { super.$$link(8, value) } 
//set 'rescale_cfg_phi'(value : FLOAT)  { super.$$link(9, value) } 
//set 'extra_noise_type'(value : 'gaussian'|'uniform'|'perlin'|'pink'|'green'|'pyramid'| $dyn)  { super.$$link(10, value) } 
//set 'extra_noise_method'(value : 'add'|'add_scaled'|'speckle'|'cads'|'cads_rescaled'|'cads_speckle'|'cads_speckle_rescaled'| $dyn)  { super.$$link(11, value) } 
//set 'extra_noise_multiplier'(value : FLOAT)  { super.$$link(12, value) } 
//set 'extra_noise_lowpass'(value : INT)  { super.$$link(13, value) } 
//set 'divisive_norm_size'(value : INT)  { super.$$link(14, value) } 
//set 'divisive_norm_multiplier'(value : FLOAT)  { super.$$link(15, value) } 
//set 'spectral_mod_mode'(value : 'hard_clamp'|'soft_clamp'| $dyn)  { super.$$link(16, value) } 
//set 'spectral_mod_percentile'(value : FLOAT)  { super.$$link(17, value) } 
//set 'spectral_mod_multiplier'(value : FLOAT)  { super.$$link(18, value) } 
//set 'affect_uncond'(value : 'None'|'Sharpness'| $dyn)  { super.$$link(19, value) } 
//set 'dyn_cfg_augmentation'(value : 'None'|'dyncfg-halfcosine'|'dyncfg-halfcosine-mimic'| $dyn)  { super.$$link(20, value) } 
//set 'seed'(value : INT)  { super.$$link(21, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.sharpness_multiplier max: 100 min: -100 step: 0.1
		 * @param opts.sharpness_method
		 * @param opts.tonemap_multiplier step: 0.01
		 * @param opts.tonemap_method
		 * @param opts.tonemap_percentile default: 100 step: 0.005
		 * @param opts.contrast_multiplier max: 100 min: -100 step: 0.1
		 * @param opts.combat_method
		 * @param opts.combat_cfg_drift max: 10 min: -10 step: 0.01
		 * @param opts.rescale_cfg_phi max: 10 min: -10 step: 0.01
		 * @param opts.extra_noise_type
		 * @param opts.extra_noise_method
		 * @param opts.extra_noise_multiplier step: 0.1
		 * @param opts.extra_noise_lowpass default: 100 step: 1
		 * @param opts.divisive_norm_size default: 127 max: 255 min: 1 step: 1
		 * @param opts.divisive_norm_multiplier step: 0.01
		 * @param opts.spectral_mod_mode
		 * @param opts.spectral_mod_percentile default: 5 step: 0.01
		 * @param opts.spectral_mod_multiplier max: 15 min: -15 step: 0.01
		 * @param opts.affect_uncond
		 * @param opts.dyn_cfg_augmentation
		 * @param opts.seed}
        */
        constructor(opts:{
            'model': MODEL,'sharpness_multiplier'?: FLOAT,'sharpness_method': 'anisotropic'|'joint-anisotropic'|'gaussian'|'cas'| $dyn,'tonemap_multiplier'?: FLOAT,'tonemap_method': 'reinhard'|'reinhard_perchannel'|'arctan'|'quantile'|'gated'|'cfg-mimic'|'spatial-norm'| $dyn,'tonemap_percentile'?: FLOAT,'contrast_multiplier'?: FLOAT,'combat_method': 'subtract'|'subtract_channels'|'subtract_median'|'sharpen'| $dyn,'combat_cfg_drift'?: FLOAT,'rescale_cfg_phi'?: FLOAT,'extra_noise_type': 'gaussian'|'uniform'|'perlin'|'pink'|'green'|'pyramid'| $dyn,'extra_noise_method': 'add'|'add_scaled'|'speckle'|'cads'|'cads_rescaled'|'cads_speckle'|'cads_speckle_rescaled'| $dyn,'extra_noise_multiplier'?: FLOAT,'extra_noise_lowpass'?: INT,'divisive_norm_size'?: INT,'divisive_norm_multiplier'?: FLOAT,'spectral_mod_mode': 'hard_clamp'|'soft_clamp'| $dyn,'spectral_mod_percentile'?: FLOAT,'spectral_mod_multiplier'?: FLOAT,'affect_uncond': 'None'|'Sharpness'| $dyn,'dyn_cfg_augmentation': 'None'|'dyncfg-halfcosine'|'dyncfg-halfcosine-mimic'| $dyn,'seed'?: INT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("sharpness_multiplier", opts['sharpness_multiplier']??tmp["Latent Diffusion Mega Modifier"].defaults['sharpness_multiplier'])
super.$$link("sharpness_method", opts['sharpness_method'])
super.$$link("tonemap_multiplier", opts['tonemap_multiplier']??tmp["Latent Diffusion Mega Modifier"].defaults['tonemap_multiplier'])
super.$$link("tonemap_method", opts['tonemap_method'])
super.$$link("tonemap_percentile", opts['tonemap_percentile']??tmp["Latent Diffusion Mega Modifier"].defaults['tonemap_percentile'])
super.$$link("contrast_multiplier", opts['contrast_multiplier']??tmp["Latent Diffusion Mega Modifier"].defaults['contrast_multiplier'])
super.$$link("combat_method", opts['combat_method'])
super.$$link("combat_cfg_drift", opts['combat_cfg_drift']??tmp["Latent Diffusion Mega Modifier"].defaults['combat_cfg_drift'])
super.$$link("rescale_cfg_phi", opts['rescale_cfg_phi']??tmp["Latent Diffusion Mega Modifier"].defaults['rescale_cfg_phi'])
super.$$link("extra_noise_type", opts['extra_noise_type'])
super.$$link("extra_noise_method", opts['extra_noise_method'])
super.$$link("extra_noise_multiplier", opts['extra_noise_multiplier']??tmp["Latent Diffusion Mega Modifier"].defaults['extra_noise_multiplier'])
super.$$link("extra_noise_lowpass", opts['extra_noise_lowpass']??tmp["Latent Diffusion Mega Modifier"].defaults['extra_noise_lowpass'])
super.$$link("divisive_norm_size", opts['divisive_norm_size']??tmp["Latent Diffusion Mega Modifier"].defaults['divisive_norm_size'])
super.$$link("divisive_norm_multiplier", opts['divisive_norm_multiplier']??tmp["Latent Diffusion Mega Modifier"].defaults['divisive_norm_multiplier'])
super.$$link("spectral_mod_mode", opts['spectral_mod_mode'])
super.$$link("spectral_mod_percentile", opts['spectral_mod_percentile']??tmp["Latent Diffusion Mega Modifier"].defaults['spectral_mod_percentile'])
super.$$link("spectral_mod_multiplier", opts['spectral_mod_multiplier']??tmp["Latent Diffusion Mega Modifier"].defaults['spectral_mod_multiplier'])
super.$$link("affect_uncond", opts['affect_uncond'])
super.$$link("dyn_cfg_augmentation", opts['dyn_cfg_augmentation'])
super.$$link("seed", opts['seed'])
}

        static defaults = {
    'sharpness_multiplier':  0,
'tonemap_multiplier':  0,
'tonemap_percentile':  100,
'contrast_multiplier':  0,
'combat_cfg_drift':  0,
'rescale_cfg_phi':  0,
'extra_noise_multiplier':  0,
'extra_noise_lowpass':  100,
'divisive_norm_size':  127,
'divisive_norm_multiplier':  0,
'spectral_mod_percentile':  5,
'spectral_mod_multiplier':  0
}
        protected override $$type(){
            return "Latent Diffusion Mega Modifier"
        }
},

    /**
     * 🪛 Primitive boolean from crystools 🪛/Primitive
     * @desc 
    */
    "Primitive boolean [Crystools]" : class extends Node{
        //Setters
        //set 'boolean'(value : BOOLEAN)  { super.$$link(0, value) } 

        //Getters
        get 'boolean'() : BOOLEAN { return [this.$uid.toString(), 0]  as unknown as BOOLEAN; }

        /**
          * Constructor
		 * @param opts.boolean default: true}
        */
        constructor(opts:{
            'boolean'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("boolean", opts['boolean']??tmp["Primitive boolean [Crystools]"].defaults['boolean'])
}

        static defaults = {
    'boolean':  true
}
        protected override $$type(){
            return "Primitive boolean [Crystools]"
        }
},

    /**
     * 🪛 Primitive string from crystools 🪛/Primitive
     * @desc 
    */
    "Primitive string [Crystools]" : class extends Node{
        //Setters
        //set 'string'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'string'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.string}
        */
        constructor(opts:{
            'string'?: STRING
        }){
            super(ctx);

            super.$$link("string", opts['string']??tmp["Primitive string [Crystools]"].defaults['string'])
}

        static defaults = {
    'string':  ""
}
        protected override $$type(){
            return "Primitive string [Crystools]"
        }
},

    /**
     * 🪛 Primitive string multiline from crystools 🪛/Primitive
     * @desc 
    */
    "Primitive string multiline [Crystools]" : class extends Node{
        //Setters
        //set 'string'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'string'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.string}
        */
        constructor(opts:{
            'string'?: STRING
        }){
            super(ctx);

            super.$$link("string", opts['string']??tmp["Primitive string multiline [Crystools]"].defaults['string'])
}

        static defaults = {
    'string':  ""
}
        protected override $$type(){
            return "Primitive string multiline [Crystools]"
        }
},

    /**
     * 🪛 Primitive integer from crystools 🪛/Primitive
     * @desc 
    */
    "Primitive integer [Crystools]" : class extends Node{
        //Setters
        //set 'int'(value : INT)  { super.$$link(0, value) } 

        //Getters
        get 'int'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.int default: 1 max: 9223372036854776000 min: -9223372036854776000 step: 1}
        */
        constructor(opts:{
            'int'?: INT
        }){
            super(ctx);

            super.$$link("int", opts['int']??tmp["Primitive integer [Crystools]"].defaults['int'])
}

        static defaults = {
    'int':  1
}
        protected override $$type(){
            return "Primitive integer [Crystools]"
        }
},

    /**
     * 🪛 Primitive float from crystools 🪛/Primitive
     * @desc 
    */
    "Primitive float [Crystools]" : class extends Node{
        //Setters
        //set 'float'(value : FLOAT)  { super.$$link(0, value) } 

        //Getters
        get 'float'() : FLOAT { return [this.$uid.toString(), 0]  as unknown as FLOAT; }

        /**
          * Constructor
		 * @param opts.float default: 1 max: 1.7976931348623157e+308 min: -1.7976931348623157e+308 step: 0.01}
        */
        constructor(opts:{
            'float'?: FLOAT
        }){
            super(ctx);

            super.$$link("float", opts['float']??tmp["Primitive float [Crystools]"].defaults['float'])
}

        static defaults = {
    'float':  1
}
        protected override $$type(){
            return "Primitive float [Crystools]"
        }
},

    /**
     * 🪛 Show any value to console/display from crystools 🪛/Debugger
     * @desc 
    */
    "Show any [Crystools]" : class extends Node{
        //Setters
        //set 'any_value'(value : ANY)  { super.$$link(0, value) } 
//set 'console'(value : BOOLEAN)  { super.$$link(1, value) } 
//set 'display'(value : BOOLEAN)  { super.$$link(2, value) } 
//set 'prefix'(value : STRING)  { super.$$link(3, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.any_value
		 * @param opts.console
		 * @param opts.display default: true
		 * @param opts.prefix}
        */
        constructor(opts:{
            'any_value'?: ANY,'console'?: BOOLEAN,'display'?: BOOLEAN,'prefix'?: STRING
        }){
            super(ctx);

            super.$$link("any_value", opts['any_value'])
super.$$link("console", opts['console']??tmp["Show any [Crystools]"].defaults['console'])
super.$$link("display", opts['display']??tmp["Show any [Crystools]"].defaults['display'])
super.$$link("prefix", opts['prefix']??tmp["Show any [Crystools]"].defaults['prefix'])
}

        static defaults = {
    'console':  false,
'display':  true,
'prefix':  ""
}
        protected override $$type(){
            return "Show any [Crystools]"
        }
},

    /**
     * 🪛 Show any to JSON from crystools 🪛/Debugger
     * @desc 
    */
    "Show any to JSON [Crystools]" : class extends Node{
        //Setters
        //set 'any_value'(value : ANY)  { super.$$link(0, value) } 

        //Getters
        get 'string'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.any_value}
        */
        constructor(opts:{
            'any_value'?: ANY
        }){
            super(ctx);

            super.$$link("any_value", opts['any_value'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Show any to JSON [Crystools]"
        }
},

    /**
     * 🪛 List of any from crystools 🪛/List
     * @desc 
    */
    "List of any [Crystools]" : class extends Node{
        //Setters
        //set 'any_1'(value : ANY)  { super.$$link(0, value) } 
//set 'any_2'(value : ANY)  { super.$$link(1, value) } 
//set 'any_3'(value : ANY)  { super.$$link(2, value) } 
//set 'any_4'(value : ANY)  { super.$$link(3, value) } 
//set 'any_5'(value : ANY)  { super.$$link(4, value) } 
//set 'any_6'(value : ANY)  { super.$$link(5, value) } 
//set 'any_7'(value : ANY)  { super.$$link(6, value) } 
//set 'any_8'(value : ANY)  { super.$$link(7, value) } 

        //Getters
        get 'any_list'() : '*'| $dyn { return [this.$uid.toString(), 0]  as unknown as '*'| $dyn; }

        /**
          * Constructor
		 * @param opts.any_1
		 * @param opts.any_2
		 * @param opts.any_3
		 * @param opts.any_4
		 * @param opts.any_5
		 * @param opts.any_6
		 * @param opts.any_7
		 * @param opts.any_8}
        */
        constructor(opts:{
            'any_1'?: ANY,'any_2'?: ANY,'any_3'?: ANY,'any_4'?: ANY,'any_5'?: ANY,'any_6'?: ANY,'any_7'?: ANY,'any_8'?: ANY
        }){
            super(ctx);

            super.$$link("any_1", opts['any_1'])
super.$$link("any_2", opts['any_2'])
super.$$link("any_3", opts['any_3'])
super.$$link("any_4", opts['any_4'])
super.$$link("any_5", opts['any_5'])
super.$$link("any_6", opts['any_6'])
super.$$link("any_7", opts['any_7'])
super.$$link("any_8", opts['any_8'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "List of any [Crystools]"
        }
},

    /**
     * 🪛 List of strings from crystools 🪛/List
     * @desc 
    */
    "List of strings [Crystools]" : class extends Node{
        //Setters
        //set 'string_1'(value : STRING)  { super.$$link(0, value) } 
//set 'string_2'(value : STRING)  { super.$$link(1, value) } 
//set 'string_3'(value : STRING)  { super.$$link(2, value) } 
//set 'string_4'(value : STRING)  { super.$$link(3, value) } 
//set 'string_5'(value : STRING)  { super.$$link(4, value) } 
//set 'string_6'(value : STRING)  { super.$$link(5, value) } 
//set 'string_7'(value : STRING)  { super.$$link(6, value) } 
//set 'string_8'(value : STRING)  { super.$$link(7, value) } 
//set 'delimiter'(value : STRING)  { super.$$link(8, value) } 

        //Getters
        get 'concatenated'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }
get 'list_string'() : ListString { return [this.$uid.toString(), 1]  as unknown as ListString; }

        /**
          * Constructor
		 * @param opts.string_1
		 * @param opts.string_2
		 * @param opts.string_3
		 * @param opts.string_4
		 * @param opts.string_5
		 * @param opts.string_6
		 * @param opts.string_7
		 * @param opts.string_8
		 * @param opts.delimiter default: " "}
        */
        constructor(opts:{
            'string_1'?: STRING,'string_2'?: STRING,'string_3'?: STRING,'string_4'?: STRING,'string_5'?: STRING,'string_6'?: STRING,'string_7'?: STRING,'string_8'?: STRING,'delimiter'?: STRING
        }){
            super(ctx);

            super.$$link("string_1", opts['string_1']??tmp["List of strings [Crystools]"].defaults['string_1'])
super.$$link("string_2", opts['string_2']??tmp["List of strings [Crystools]"].defaults['string_2'])
super.$$link("string_3", opts['string_3']??tmp["List of strings [Crystools]"].defaults['string_3'])
super.$$link("string_4", opts['string_4']??tmp["List of strings [Crystools]"].defaults['string_4'])
super.$$link("string_5", opts['string_5']??tmp["List of strings [Crystools]"].defaults['string_5'])
super.$$link("string_6", opts['string_6']??tmp["List of strings [Crystools]"].defaults['string_6'])
super.$$link("string_7", opts['string_7']??tmp["List of strings [Crystools]"].defaults['string_7'])
super.$$link("string_8", opts['string_8']??tmp["List of strings [Crystools]"].defaults['string_8'])
super.$$link("delimiter", opts['delimiter']??tmp["List of strings [Crystools]"].defaults['delimiter'])
}

        static defaults = {
    'string_1':  "",
'string_2':  "",
'string_3':  "",
'string_4':  "",
'string_5':  "",
'string_6':  "",
'string_7':  "",
'string_8':  "",
'delimiter':  " "
}
        protected override $$type(){
            return "List of strings [Crystools]"
        }
},

    /**
     * 🪛 Switch any from crystools 🪛/Switch
     * @desc 
    */
    "Switch any [Crystools]" : class extends Node{
        //Setters
        //set 'on_true'(value : ANY)  { super.$$link(0, value) } 
//set 'on_false'(value : ANY)  { super.$$link(1, value) } 
//set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get '*'() : ANY { return [this.$uid.toString(), 0]  as unknown as ANY; }

        /**
          * Constructor
		 * @param opts.on_true
		 * @param opts.on_false
		 * @param opts.boolean default: true}
        */
        constructor(opts:{
            'on_true': ANY,'on_false': ANY,'boolean'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("on_true", opts['on_true'])
super.$$link("on_false", opts['on_false'])
super.$$link("boolean", opts['boolean']??tmp["Switch any [Crystools]"].defaults['boolean'])
}

        static defaults = {
    'boolean':  true
}
        protected override $$type(){
            return "Switch any [Crystools]"
        }
},

    /**
     * 🪛 Switch latent from crystools 🪛/Switch
     * @desc 
    */
    "Switch latent [Crystools]" : class extends Node{
        //Setters
        //set 'on_true'(value : LATENT)  { super.$$link(0, value) } 
//set 'on_false'(value : LATENT)  { super.$$link(1, value) } 
//set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'latent'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.on_true
		 * @param opts.on_false
		 * @param opts.boolean default: true}
        */
        constructor(opts:{
            'on_true': LATENT,'on_false': LATENT,'boolean'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("on_true", opts['on_true'])
super.$$link("on_false", opts['on_false'])
super.$$link("boolean", opts['boolean']??tmp["Switch latent [Crystools]"].defaults['boolean'])
}

        static defaults = {
    'boolean':  true
}
        protected override $$type(){
            return "Switch latent [Crystools]"
        }
},

    /**
     * 🪛 Switch conditioning from crystools 🪛/Switch
     * @desc 
    */
    "Switch conditioning [Crystools]" : class extends Node{
        //Setters
        //set 'on_true'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'on_false'(value : CONDITIONING)  { super.$$link(1, value) } 
//set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'conditioning'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.on_true
		 * @param opts.on_false
		 * @param opts.boolean default: true}
        */
        constructor(opts:{
            'on_true': CONDITIONING,'on_false': CONDITIONING,'boolean'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("on_true", opts['on_true'])
super.$$link("on_false", opts['on_false'])
super.$$link("boolean", opts['boolean']??tmp["Switch conditioning [Crystools]"].defaults['boolean'])
}

        static defaults = {
    'boolean':  true
}
        protected override $$type(){
            return "Switch conditioning [Crystools]"
        }
},

    /**
     * 🪛 Switch image from crystools 🪛/Switch
     * @desc 
    */
    "Switch image [Crystools]" : class extends Node{
        //Setters
        //set 'on_true'(value : IMAGE)  { super.$$link(0, value) } 
//set 'on_false'(value : IMAGE)  { super.$$link(1, value) } 
//set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'image'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.on_true
		 * @param opts.on_false
		 * @param opts.boolean default: true}
        */
        constructor(opts:{
            'on_true': IMAGE,'on_false': IMAGE,'boolean'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("on_true", opts['on_true'])
super.$$link("on_false", opts['on_false'])
super.$$link("boolean", opts['boolean']??tmp["Switch image [Crystools]"].defaults['boolean'])
}

        static defaults = {
    'boolean':  true
}
        protected override $$type(){
            return "Switch image [Crystools]"
        }
},

    /**
     * 🪛 Switch mask from crystools 🪛/Switch
     * @desc 
    */
    "Switch mask [Crystools]" : class extends Node{
        //Setters
        //set 'on_true'(value : MASK)  { super.$$link(0, value) } 
//set 'on_false'(value : MASK)  { super.$$link(1, value) } 
//set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'mask'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.on_true
		 * @param opts.on_false
		 * @param opts.boolean default: true}
        */
        constructor(opts:{
            'on_true': MASK,'on_false': MASK,'boolean'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("on_true", opts['on_true'])
super.$$link("on_false", opts['on_false'])
super.$$link("boolean", opts['boolean']??tmp["Switch mask [Crystools]"].defaults['boolean'])
}

        static defaults = {
    'boolean':  true
}
        protected override $$type(){
            return "Switch mask [Crystools]"
        }
},

    /**
     * 🪛 Switch string from crystools 🪛/Switch
     * @desc 
    */
    "Switch string [Crystools]" : class extends Node{
        //Setters
        //set 'on_true'(value : STRING)  { super.$$link(0, value) } 
//set 'on_false'(value : STRING)  { super.$$link(1, value) } 
//set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'string'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.on_true
		 * @param opts.on_false
		 * @param opts.boolean default: true}
        */
        constructor(opts:{
            'on_true'?: STRING,'on_false'?: STRING,'boolean'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("on_true", opts['on_true']??tmp["Switch string [Crystools]"].defaults['on_true'])
super.$$link("on_false", opts['on_false']??tmp["Switch string [Crystools]"].defaults['on_false'])
super.$$link("boolean", opts['boolean']??tmp["Switch string [Crystools]"].defaults['boolean'])
}

        static defaults = {
    'on_true':  "",
'on_false':  "",
'boolean':  true
}
        protected override $$type(){
            return "Switch string [Crystools]"
        }
},

    /**
     * 🪛 Pipe to/edit any from crystools 🪛/Pipe
     * @desc 
    */
    "Pipe to/edit any [Crystools]" : class extends Node{
        //Setters
        //set 'CPipeAny'(value : CPipeAny)  { super.$$link(0, value) } 
//set 'any_1'(value : ANY)  { super.$$link(1, value) } 
//set 'any_2'(value : ANY)  { super.$$link(2, value) } 
//set 'any_3'(value : ANY)  { super.$$link(3, value) } 
//set 'any_4'(value : ANY)  { super.$$link(4, value) } 
//set 'any_5'(value : ANY)  { super.$$link(5, value) } 
//set 'any_6'(value : ANY)  { super.$$link(6, value) } 

        //Getters
        get 'CPipeAny'() : CPipeAny { return [this.$uid.toString(), 0]  as unknown as CPipeAny; }

        /**
          * Constructor
		 * @param opts.CPipeAny
		 * @param opts.any_1
		 * @param opts.any_2
		 * @param opts.any_3
		 * @param opts.any_4
		 * @param opts.any_5
		 * @param opts.any_6}
        */
        constructor(opts:{
            'CPipeAny'?: CPipeAny,'any_1'?: ANY,'any_2'?: ANY,'any_3'?: ANY,'any_4'?: ANY,'any_5'?: ANY,'any_6'?: ANY
        }){
            super(ctx);

            super.$$link("CPipeAny", opts['CPipeAny'])
super.$$link("any_1", opts['any_1'])
super.$$link("any_2", opts['any_2'])
super.$$link("any_3", opts['any_3'])
super.$$link("any_4", opts['any_4'])
super.$$link("any_5", opts['any_5'])
super.$$link("any_6", opts['any_6'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Pipe to/edit any [Crystools]"
        }
},

    /**
     * 🪛 Pipe from any from crystools 🪛/Pipe
     * @desc 
    */
    "Pipe from any [Crystools]" : class extends Node{
        //Setters
        //set 'CPipeAny'(value : CPipeAny)  { super.$$link(0, value) } 

        //Getters
        get 'CPipeAny'() : CPipeAny { return [this.$uid.toString(), 0]  as unknown as CPipeAny; }
get 'any_1'() : ANY { return [this.$uid.toString(), 1]  as unknown as ANY; }
get 'any_2'() : ANY { return [this.$uid.toString(), 2]  as unknown as ANY; }
get 'any_3'() : ANY { return [this.$uid.toString(), 3]  as unknown as ANY; }
get 'any_4'() : ANY { return [this.$uid.toString(), 4]  as unknown as ANY; }
get 'any_5'() : ANY { return [this.$uid.toString(), 5]  as unknown as ANY; }
get 'any_6'() : ANY { return [this.$uid.toString(), 6]  as unknown as ANY; }

        /**
          * Constructor
		 * @param opts.CPipeAny}
        */
        constructor(opts:{
            'CPipeAny': CPipeAny
        }){
            super(ctx);

            super.$$link("CPipeAny", opts['CPipeAny'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Pipe from any [Crystools]"
        }
},

    /**
     * 🪛 Load image with metadata from crystools 🪛/Image
     * @desc 
    */
    "Load image with metadata [Crystools]" : class extends Node{
        //Setters
        //set 'image'(value : '00010-2274211228.png'|'1.png'|'13368745_041_0591.jpg'|'2019-12-13-more-velm.jpg'|'37756119_043_92ea.jpg'|'56162430_104_c181.jpg'|'56162430_111_453c.jpg'|'61635388_057_c911.jpg'|'61635388_068_b3ca (1).jpg'|'61635388_068_b3ca.jpg'|'61635388_077_aa9e.jpg'|'89918606_004_7c7a.jpg'|'9377545.png'|'Ashley_Meh.webp'|'COFFIN/ComfyUI_temp_mpmkr_00347_.png'|'COFFIN/ComfyUI_temp_mpmkr_00395_.png'|'COFFIN/ComfyUI_temp_mpmkr_00403_.png'|'COFFIN/ComfyUI_temp_mpmkr_00497_.png'|'COFFIN/ComfyUI_temp_mpmkr_00514_.png'|'COFFIN/ComfyUI_temp_mpmkr_00537_.png'|'COFFIN/ComfyUI_temp_mpmkr_00540_.png'|'COFFIN/ComfyUI_temp_mpmkr_00542_.png'|'COFFIN/ComfyUI_temp_mpmkr_00547_.png'|'COFFIN/ComfyUI_temp_mpmkr_00550_.png'|'COFFIN/ComfyUI_temp_mpmkr_00650_.png'|'COFFIN/ComfyUI_temp_mpmkr_00733_.png'|'COFFIN/ComfyUI_temp_mpmkr_00742_.png'|'COFFIN/ComfyUI_temp_mpmkr_00748_.png'|'ComfyUI_00135_.png'|'ComfyUI_temp_fkoyu_00029_.png'|'ComfyUI_temp_khmtq_00005_.png'|'ComfyUI_temp_khmtq_00005_2.png'|'ComfyUI_temp_mpmkr_00234_.png'|'ComfyUI_temp_mpmkr_00258_.png'|'ComfyUI_temp_mpmkr_00296_.png'|'ComfyUI_temp_mpmkr_00347_.png'|'ComfyUI_temp_mpmkr_00497_.png'|'ComfyUI_temp_mpmkr_00540_.png'|'ComfyUI_temp_mpmkr_00542_.png'|'ComfyUI_temp_mpmkr_00550_.png'|'ComfyUI_temp_mpmkr_00733_.png'|'ComfyUI_temp_onszj_00008_.png'|'ComfyUI_temp_otlbq_00049_.png'|'ComfyUI_temp_pxygj_00023_.png'|'DSCF6491.JPG'|'DSCF8216.JPG'|'DSCF8334.JPG'|'DSCF9566.JPG'|'FB_IMG_1671397597411.jpg'|'IMGP4666.JPG'|'IMGP4670.JPG'|'IMG_1913.JPG'|'Julia.webp'|'Julia2.webp'|'Mom.webp'|'QSCF8096.JPG'|'Screenshot from 2022-04-19 11-38-41.png'|'a837af5519f074782ae0b9c32eee12a7.jpg'|'aaa'|'asset.png'|'example-a.png'|'example.png'|'image (1).png'|'maegcgmdajglmcle-small.jpeg'|'pasted/image (1).png'|'pasted/image (10).png'|'pasted/image (11).png'|'pasted/image (12).png'|'pasted/image (13).png'|'pasted/image (14).png'|'pasted/image (15).png'|'pasted/image (16).png'|'pasted/image (17).png'|'pasted/image (2).png'|'pasted/image (3).png'|'pasted/image (4).png'|'pasted/image (5).png'|'pasted/image (6).png'|'pasted/image (7).png'|'pasted/image (8).png'|'pasted/image (9).png'|'pasted/image.png'|'testqr.png'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'image'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'mask'() : MASK { return [this.$uid.toString(), 1]  as unknown as MASK; }
get 'prompt'() : JSON { return [this.$uid.toString(), 2]  as unknown as JSON; }
get 'Metadata RAW'() : METADATA_RAW { return [this.$uid.toString(), 3]  as unknown as METADATA_RAW; }

        /**
          * Constructor
		 * @param opts.image}
        */
        constructor(opts:{
            'image': '00010-2274211228.png'|'1.png'|'13368745_041_0591.jpg'|'2019-12-13-more-velm.jpg'|'37756119_043_92ea.jpg'|'56162430_104_c181.jpg'|'56162430_111_453c.jpg'|'61635388_057_c911.jpg'|'61635388_068_b3ca (1).jpg'|'61635388_068_b3ca.jpg'|'61635388_077_aa9e.jpg'|'89918606_004_7c7a.jpg'|'9377545.png'|'Ashley_Meh.webp'|'COFFIN/ComfyUI_temp_mpmkr_00347_.png'|'COFFIN/ComfyUI_temp_mpmkr_00395_.png'|'COFFIN/ComfyUI_temp_mpmkr_00403_.png'|'COFFIN/ComfyUI_temp_mpmkr_00497_.png'|'COFFIN/ComfyUI_temp_mpmkr_00514_.png'|'COFFIN/ComfyUI_temp_mpmkr_00537_.png'|'COFFIN/ComfyUI_temp_mpmkr_00540_.png'|'COFFIN/ComfyUI_temp_mpmkr_00542_.png'|'COFFIN/ComfyUI_temp_mpmkr_00547_.png'|'COFFIN/ComfyUI_temp_mpmkr_00550_.png'|'COFFIN/ComfyUI_temp_mpmkr_00650_.png'|'COFFIN/ComfyUI_temp_mpmkr_00733_.png'|'COFFIN/ComfyUI_temp_mpmkr_00742_.png'|'COFFIN/ComfyUI_temp_mpmkr_00748_.png'|'ComfyUI_00135_.png'|'ComfyUI_temp_fkoyu_00029_.png'|'ComfyUI_temp_khmtq_00005_.png'|'ComfyUI_temp_khmtq_00005_2.png'|'ComfyUI_temp_mpmkr_00234_.png'|'ComfyUI_temp_mpmkr_00258_.png'|'ComfyUI_temp_mpmkr_00296_.png'|'ComfyUI_temp_mpmkr_00347_.png'|'ComfyUI_temp_mpmkr_00497_.png'|'ComfyUI_temp_mpmkr_00540_.png'|'ComfyUI_temp_mpmkr_00542_.png'|'ComfyUI_temp_mpmkr_00550_.png'|'ComfyUI_temp_mpmkr_00733_.png'|'ComfyUI_temp_onszj_00008_.png'|'ComfyUI_temp_otlbq_00049_.png'|'ComfyUI_temp_pxygj_00023_.png'|'DSCF6491.JPG'|'DSCF8216.JPG'|'DSCF8334.JPG'|'DSCF9566.JPG'|'FB_IMG_1671397597411.jpg'|'IMGP4666.JPG'|'IMGP4670.JPG'|'IMG_1913.JPG'|'Julia.webp'|'Julia2.webp'|'Mom.webp'|'QSCF8096.JPG'|'Screenshot from 2022-04-19 11-38-41.png'|'a837af5519f074782ae0b9c32eee12a7.jpg'|'aaa'|'asset.png'|'example-a.png'|'example.png'|'image (1).png'|'maegcgmdajglmcle-small.jpeg'|'pasted/image (1).png'|'pasted/image (10).png'|'pasted/image (11).png'|'pasted/image (12).png'|'pasted/image (13).png'|'pasted/image (14).png'|'pasted/image (15).png'|'pasted/image (16).png'|'pasted/image (17).png'|'pasted/image (2).png'|'pasted/image (3).png'|'pasted/image (4).png'|'pasted/image (5).png'|'pasted/image (6).png'|'pasted/image (7).png'|'pasted/image (8).png'|'pasted/image (9).png'|'pasted/image.png'|'testqr.png'| $dyn
        }){
            super(ctx);

            super.$$link("image", opts['image'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Load image with metadata [Crystools]"
        }
},

    /**
     * 🪛 Get resolution from crystools 🪛/Image
     * @desc 
    */
    "Get resolution [Crystools]" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        get 'width'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }
get 'height'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.image}
        */
        constructor(opts:{
            'image': IMAGE
        }){
            super(ctx);

            super.$$link("image", opts['image'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Get resolution [Crystools]"
        }
},

    /**
     * 🪛 Preview from image from crystools 🪛/Image
     * @desc Saves the input images to your ComfyUI output directory.
    */
    "Preview from image [Crystools]" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        get 'Metadata RAW'() : METADATA_RAW { return [this.$uid.toString(), 0]  as unknown as METADATA_RAW; }

        /**
          * Constructor
		 * @param opts.image}
        */
        constructor(opts:{
            'image'?: IMAGE
        }){
            super(ctx);

            super.$$link("image", opts['image'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Preview from image [Crystools]"
        }
},

    /**
     * 🪛 Preview from metadata from crystools 🪛/Image
     * @desc Saves the input images to your ComfyUI output directory.
    */
    "Preview from metadata [Crystools]" : class extends Node{
        //Setters
        //set 'metadata_raw'(value : METADATA_RAW)  { super.$$link(0, value) } 

        //Getters
        get 'Metadata RAW'() : METADATA_RAW { return [this.$uid.toString(), 0]  as unknown as METADATA_RAW; }

        /**
          * Constructor
		 * @param opts.metadata_raw}
        */
        constructor(opts:{
            'metadata_raw'?: METADATA_RAW
        }){
            super(ctx);

            super.$$link("metadata_raw", opts['metadata_raw'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Preview from metadata [Crystools]"
        }
},

    /**
     * 🪛 Save image with extra metadata from crystools 🪛/Image
     * @desc Saves the input images to your ComfyUI output directory.
    */
    "Save image with extra metadata [Crystools]" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'filename_prefix'(value : STRING)  { super.$$link(1, value) } 
//set 'with_workflow'(value : BOOLEAN)  { super.$$link(2, value) } 
//set 'metadata_extra'(value : STRING)  { super.$$link(3, value) } 

        //Getters
        get 'Metadata RAW'() : METADATA_RAW { return [this.$uid.toString(), 0]  as unknown as METADATA_RAW; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.filename_prefix default: "ComfyUI"
		 * @param opts.with_workflow default: true
		 * @param opts.metadata_extra default: "{\n  \"Title\": \"Image generated by Crystian\",\n  \"Description\": \"More info: https:\\/\\/www.instagram.com\\/crystian.ia\",\n  \"Author\": \"crystian.ia\",\n  \"Software\": \"ComfyUI\",\n  \"Category\": \"StableDiffusion\",\n  \"Rating\": 5,\n  \"UserComment\": \"\",\n  \"Keywords\": [\n    \"\"\n  ],\n  \"Copyrights\": \"\"\n}"}
        */
        constructor(opts:{
            'image': IMAGE,'filename_prefix'?: STRING,'with_workflow'?: BOOLEAN,'metadata_extra'?: STRING
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("filename_prefix", opts['filename_prefix']??tmp["Save image with extra metadata [Crystools]"].defaults['filename_prefix'])
super.$$link("with_workflow", opts['with_workflow']??tmp["Save image with extra metadata [Crystools]"].defaults['with_workflow'])
super.$$link("metadata_extra", opts['metadata_extra']??tmp["Save image with extra metadata [Crystools]"].defaults['metadata_extra'])
}

        static defaults = {
    'filename_prefix':  "ComfyUI",
'with_workflow':  true,
'metadata_extra':  "{\n  \"Title\": \"Image generated by Crystian\",\n  \"Description\": \"More info: https:\\/\\/www.instagram.com\\/crystian.ia\",\n  \"Author\": \"crystian.ia\",\n  \"Software\": \"ComfyUI\",\n  \"Category\": \"StableDiffusion\",\n  \"Rating\": 5,\n  \"UserComment\": \"\",\n  \"Keywords\": [\n    \"\"\n  ],\n  \"Copyrights\": \"\"\n}"
}
        protected override $$type(){
            return "Save image with extra metadata [Crystools]"
        }
},

    /**
     * 🪛 Metadata extractor from crystools 🪛/Metadata
     * @desc 
    */
    "Metadata extractor [Crystools]" : class extends Node{
        //Setters
        //set 'metadata_raw'(value : METADATA_RAW)  { super.$$link(0, value) } 

        //Getters
        get 'prompt'() : JSON { return [this.$uid.toString(), 0]  as unknown as JSON; }
get 'workflow'() : JSON { return [this.$uid.toString(), 1]  as unknown as JSON; }
get 'file info'() : JSON { return [this.$uid.toString(), 2]  as unknown as JSON; }
get 'raw to JSON'() : JSON { return [this.$uid.toString(), 3]  as unknown as JSON; }
get 'raw to property'() : STRING { return [this.$uid.toString(), 4]  as unknown as STRING; }
get 'raw to csv'() : STRING { return [this.$uid.toString(), 5]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.metadata_raw}
        */
        constructor(opts:{
            'metadata_raw': METADATA_RAW
        }){
            super(ctx);

            super.$$link("metadata_raw", opts['metadata_raw'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Metadata extractor [Crystools]"
        }
},

    /**
     * 🪛 Metadata comparator from crystools 🪛/Metadata
     * @desc 
    */
    "Metadata comparator [Crystools]" : class extends Node{
        //Setters
        //set 'metadata_raw_old'(value : METADATA_RAW)  { super.$$link(0, value) } 
//set 'metadata_raw_new'(value : METADATA_RAW)  { super.$$link(1, value) } 
//set 'what'(value : 'Prompt'|'Workflow'|'Fileinfo'| $dyn)  { super.$$link(2, value) } 

        //Getters
        get 'diff'() : JSON { return [this.$uid.toString(), 0]  as unknown as JSON; }

        /**
          * Constructor
		 * @param opts.metadata_raw_old
		 * @param opts.metadata_raw_new
		 * @param opts.what}
        */
        constructor(opts:{
            'metadata_raw_old': METADATA_RAW,'metadata_raw_new': METADATA_RAW,'what': 'Prompt'|'Workflow'|'Fileinfo'| $dyn
        }){
            super(ctx);

            super.$$link("metadata_raw_old", opts['metadata_raw_old'])
super.$$link("metadata_raw_new", opts['metadata_raw_new'])
super.$$link("what", opts['what'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Metadata comparator [Crystools]"
        }
},

    /**
     * 🪛 Json comparator from crystools 🪛/Utils
     * @desc 
    */
    "Json comparator [Crystools]" : class extends Node{
        //Setters
        //set 'json_old'(value : JSON)  { super.$$link(0, value) } 
//set 'json_new'(value : JSON)  { super.$$link(1, value) } 

        //Getters
        get 'json_compared'() : JSON { return [this.$uid.toString(), 0]  as unknown as JSON; }

        /**
          * Constructor
		 * @param opts.json_old
		 * @param opts.json_new}
        */
        constructor(opts:{
            'json_old': JSON,'json_new': JSON
        }){
            super(ctx);

            super.$$link("json_old", opts['json_old'])
super.$$link("json_new", opts['json_new'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Json comparator [Crystools]"
        }
},

    /**
     * 🪛 Stats system (powered by WAS) from crystools 🪛/Utils
     * @desc 
    */
    "Stats system [Crystools]" : class extends Node{
        //Setters
        //set 'latent'(value : LATENT)  { super.$$link(0, value) } 

        //Getters
        get 'latent'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.latent}
        */
        constructor(opts:{
            'latent': LATENT
        }){
            super(ctx);

            super.$$link("latent", opts['latent'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "Stats system [Crystools]"
        }
},

    /**
     * Timestep Keyframe 🛂🅐🅒🅝 from Adv-ControlNet 🛂🅐🅒🅝/keyframes
     * @desc 
    */
    "TimestepKeyframe" : class extends Node{
        //Setters
        //set 'start_percent'(value : FLOAT)  { super.$$link(0, value) } 
//set 'prev_timestep_kf'(value : TIMESTEP_KEYFRAME)  { super.$$link(1, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(2, value) } 
//set 'cn_weights'(value : CONTROL_NET_WEIGHTS)  { super.$$link(3, value) } 
//set 'latent_keyframe'(value : LATENT_KEYFRAME)  { super.$$link(4, value) } 
//set 'null_latent_kf_strength'(value : FLOAT)  { super.$$link(5, value) } 
//set 'inherit_missing'(value : BOOLEAN)  { super.$$link(6, value) } 
//set 'guarantee_steps'(value : INT)  { super.$$link(7, value) } 
//set 'mask_optional'(value : MASK)  { super.$$link(8, value) } 
//set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(9, value) } 

        //Getters
        get 'TIMESTEP_KF'() : TIMESTEP_KEYFRAME { return [this.$uid.toString(), 0]  as unknown as TIMESTEP_KEYFRAME; }

        /**
          * Constructor
		 * @param opts.start_percent step: 0.001
		 * @param opts.prev_timestep_kf
		 * @param opts.strength default: 1 step: 0.001
		 * @param opts.cn_weights
		 * @param opts.latent_keyframe
		 * @param opts.null_latent_kf_strength step: 0.001
		 * @param opts.inherit_missing default: true
		 * @param opts.guarantee_steps default: 1
		 * @param opts.mask_optional
		 * @param opts.autosize}
        */
        constructor(opts:{
            'start_percent'?: FLOAT,'prev_timestep_kf'?: TIMESTEP_KEYFRAME,'strength'?: FLOAT,'cn_weights'?: CONTROL_NET_WEIGHTS,'latent_keyframe'?: LATENT_KEYFRAME,'null_latent_kf_strength'?: FLOAT,'inherit_missing'?: BOOLEAN,'guarantee_steps'?: INT,'mask_optional'?: MASK,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            super.$$link("start_percent", opts['start_percent']??tmp["TimestepKeyframe"].defaults['start_percent'])
super.$$link("prev_timestep_kf", opts['prev_timestep_kf'])
super.$$link("strength", opts['strength']??tmp["TimestepKeyframe"].defaults['strength'])
super.$$link("cn_weights", opts['cn_weights'])
super.$$link("latent_keyframe", opts['latent_keyframe'])
super.$$link("null_latent_kf_strength", opts['null_latent_kf_strength']??tmp["TimestepKeyframe"].defaults['null_latent_kf_strength'])
super.$$link("inherit_missing", opts['inherit_missing']??tmp["TimestepKeyframe"].defaults['inherit_missing'])
super.$$link("guarantee_steps", opts['guarantee_steps']??tmp["TimestepKeyframe"].defaults['guarantee_steps'])
super.$$link("mask_optional", opts['mask_optional'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'start_percent':  0,
'strength':  1,
'null_latent_kf_strength':  0,
'inherit_missing':  true,
'guarantee_steps':  1
}
        protected override $$type(){
            return "TimestepKeyframe"
        }
},

    /**
     * Timestep Keyframe Interp. 🛂🅐🅒🅝 from Adv-ControlNet 🛂🅐🅒🅝/keyframes
     * @desc 
    */
    "ACN_TimestepKeyframeInterpolation" : class extends Node{
        //Setters
        //set 'start_percent'(value : FLOAT)  { super.$$link(0, value) } 
//set 'end_percent'(value : FLOAT)  { super.$$link(1, value) } 
//set 'strength_start'(value : FLOAT)  { super.$$link(2, value) } 
//set 'strength_end'(value : FLOAT)  { super.$$link(3, value) } 
//set 'interpolation'(value : 'linear'|'ease-in'|'ease-out'|'ease-in-out'| $dyn)  { super.$$link(4, value) } 
//set 'intervals'(value : INT)  { super.$$link(5, value) } 
//set 'prev_timestep_kf'(value : TIMESTEP_KEYFRAME)  { super.$$link(6, value) } 
//set 'cn_weights'(value : CONTROL_NET_WEIGHTS)  { super.$$link(7, value) } 
//set 'latent_keyframe'(value : LATENT_KEYFRAME)  { super.$$link(8, value) } 
//set 'null_latent_kf_strength'(value : FLOAT)  { super.$$link(9, value) } 
//set 'inherit_missing'(value : BOOLEAN)  { super.$$link(10, value) } 
//set 'mask_optional'(value : MASK)  { super.$$link(11, value) } 
//set 'print_keyframes'(value : BOOLEAN)  { super.$$link(12, value) } 
//set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(13, value) } 

        //Getters
        get 'TIMESTEP_KF'() : TIMESTEP_KEYFRAME { return [this.$uid.toString(), 0]  as unknown as TIMESTEP_KEYFRAME; }

        /**
          * Constructor
		 * @param opts.start_percent step: 0.001
		 * @param opts.end_percent default: 1 step: 0.001
		 * @param opts.strength_start default: 1 step: 0.001
		 * @param opts.strength_end default: 1 step: 0.001
		 * @param opts.interpolation
		 * @param opts.intervals default: 50 max: 100 min: 2 step: 1
		 * @param opts.prev_timestep_kf
		 * @param opts.cn_weights
		 * @param opts.latent_keyframe
		 * @param opts.null_latent_kf_strength step: 0.001
		 * @param opts.inherit_missing default: true
		 * @param opts.mask_optional
		 * @param opts.print_keyframes
		 * @param opts.autosize}
        */
        constructor(opts:{
            'start_percent'?: FLOAT,'end_percent'?: FLOAT,'strength_start'?: FLOAT,'strength_end'?: FLOAT,'interpolation': 'linear'|'ease-in'|'ease-out'|'ease-in-out'| $dyn,'intervals'?: INT,'prev_timestep_kf'?: TIMESTEP_KEYFRAME,'cn_weights'?: CONTROL_NET_WEIGHTS,'latent_keyframe'?: LATENT_KEYFRAME,'null_latent_kf_strength'?: FLOAT,'inherit_missing'?: BOOLEAN,'mask_optional'?: MASK,'print_keyframes'?: BOOLEAN,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            super.$$link("start_percent", opts['start_percent']??tmp["ACN_TimestepKeyframeInterpolation"].defaults['start_percent'])
super.$$link("end_percent", opts['end_percent']??tmp["ACN_TimestepKeyframeInterpolation"].defaults['end_percent'])
super.$$link("strength_start", opts['strength_start']??tmp["ACN_TimestepKeyframeInterpolation"].defaults['strength_start'])
super.$$link("strength_end", opts['strength_end']??tmp["ACN_TimestepKeyframeInterpolation"].defaults['strength_end'])
super.$$link("interpolation", opts['interpolation'])
super.$$link("intervals", opts['intervals']??tmp["ACN_TimestepKeyframeInterpolation"].defaults['intervals'])
super.$$link("prev_timestep_kf", opts['prev_timestep_kf'])
super.$$link("cn_weights", opts['cn_weights'])
super.$$link("latent_keyframe", opts['latent_keyframe'])
super.$$link("null_latent_kf_strength", opts['null_latent_kf_strength']??tmp["ACN_TimestepKeyframeInterpolation"].defaults['null_latent_kf_strength'])
super.$$link("inherit_missing", opts['inherit_missing']??tmp["ACN_TimestepKeyframeInterpolation"].defaults['inherit_missing'])
super.$$link("mask_optional", opts['mask_optional'])
super.$$link("print_keyframes", opts['print_keyframes']??tmp["ACN_TimestepKeyframeInterpolation"].defaults['print_keyframes'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'start_percent':  0,
'end_percent':  1,
'strength_start':  1,
'strength_end':  1,
'intervals':  50,
'null_latent_kf_strength':  0,
'inherit_missing':  true,
'print_keyframes':  false
}
        protected override $$type(){
            return "ACN_TimestepKeyframeInterpolation"
        }
},

    /**
     * Timestep Keyframe From List 🛂🅐🅒🅝 from Adv-ControlNet 🛂🅐🅒🅝/keyframes
     * @desc 
    */
    "ACN_TimestepKeyframeFromStrengthList" : class extends Node{
        //Setters
        //set 'float_strengths'(value : FLOAT)  { super.$$link(0, value) } 
//set 'start_percent'(value : FLOAT)  { super.$$link(1, value) } 
//set 'end_percent'(value : FLOAT)  { super.$$link(2, value) } 
//set 'prev_timestep_kf'(value : TIMESTEP_KEYFRAME)  { super.$$link(3, value) } 
//set 'cn_weights'(value : CONTROL_NET_WEIGHTS)  { super.$$link(4, value) } 
//set 'latent_keyframe'(value : LATENT_KEYFRAME)  { super.$$link(5, value) } 
//set 'null_latent_kf_strength'(value : FLOAT)  { super.$$link(6, value) } 
//set 'inherit_missing'(value : BOOLEAN)  { super.$$link(7, value) } 
//set 'mask_optional'(value : MASK)  { super.$$link(8, value) } 
//set 'print_keyframes'(value : BOOLEAN)  { super.$$link(9, value) } 
//set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(10, value) } 

        //Getters
        get 'TIMESTEP_KF'() : TIMESTEP_KEYFRAME { return [this.$uid.toString(), 0]  as unknown as TIMESTEP_KEYFRAME; }

        /**
          * Constructor
		 * @param opts.float_strengths default: -1 max: undefined min: -1 step: 0.001
		 * @param opts.start_percent step: 0.001
		 * @param opts.end_percent default: 1 step: 0.001
		 * @param opts.prev_timestep_kf
		 * @param opts.cn_weights
		 * @param opts.latent_keyframe
		 * @param opts.null_latent_kf_strength step: 0.001
		 * @param opts.inherit_missing default: true
		 * @param opts.mask_optional
		 * @param opts.print_keyframes
		 * @param opts.autosize}
        */
        constructor(opts:{
            'float_strengths'?: FLOAT,'start_percent'?: FLOAT,'end_percent'?: FLOAT,'prev_timestep_kf'?: TIMESTEP_KEYFRAME,'cn_weights'?: CONTROL_NET_WEIGHTS,'latent_keyframe'?: LATENT_KEYFRAME,'null_latent_kf_strength'?: FLOAT,'inherit_missing'?: BOOLEAN,'mask_optional'?: MASK,'print_keyframes'?: BOOLEAN,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            super.$$link("float_strengths", opts['float_strengths']??tmp["ACN_TimestepKeyframeFromStrengthList"].defaults['float_strengths'])
super.$$link("start_percent", opts['start_percent']??tmp["ACN_TimestepKeyframeFromStrengthList"].defaults['start_percent'])
super.$$link("end_percent", opts['end_percent']??tmp["ACN_TimestepKeyframeFromStrengthList"].defaults['end_percent'])
super.$$link("prev_timestep_kf", opts['prev_timestep_kf'])
super.$$link("cn_weights", opts['cn_weights'])
super.$$link("latent_keyframe", opts['latent_keyframe'])
super.$$link("null_latent_kf_strength", opts['null_latent_kf_strength']??tmp["ACN_TimestepKeyframeFromStrengthList"].defaults['null_latent_kf_strength'])
super.$$link("inherit_missing", opts['inherit_missing']??tmp["ACN_TimestepKeyframeFromStrengthList"].defaults['inherit_missing'])
super.$$link("mask_optional", opts['mask_optional'])
super.$$link("print_keyframes", opts['print_keyframes']??tmp["ACN_TimestepKeyframeFromStrengthList"].defaults['print_keyframes'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'float_strengths':  -1,
'start_percent':  0,
'end_percent':  1,
'null_latent_kf_strength':  0,
'inherit_missing':  true,
'print_keyframes':  false
}
        protected override $$type(){
            return "ACN_TimestepKeyframeFromStrengthList"
        }
},

    /**
     * Latent Keyframe 🛂🅐🅒🅝 from Adv-ControlNet 🛂🅐🅒🅝/keyframes
     * @desc 
    */
    "LatentKeyframe" : class extends Node{
        //Setters
        //set 'batch_index'(value : INT)  { super.$$link(0, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(1, value) } 
//set 'prev_latent_kf'(value : LATENT_KEYFRAME)  { super.$$link(2, value) } 
//set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(3, value) } 

        //Getters
        get 'LATENT_KF'() : LATENT_KEYFRAME { return [this.$uid.toString(), 0]  as unknown as LATENT_KEYFRAME; }

        /**
          * Constructor
		 * @param opts.batch_index max: 9007199254740991 min: -9007199254740991 step: 1
		 * @param opts.strength default: 1 step: 0.001
		 * @param opts.prev_latent_kf
		 * @param opts.autosize}
        */
        constructor(opts:{
            'batch_index'?: INT,'strength'?: FLOAT,'prev_latent_kf'?: LATENT_KEYFRAME,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            super.$$link("batch_index", opts['batch_index']??tmp["LatentKeyframe"].defaults['batch_index'])
super.$$link("strength", opts['strength']??tmp["LatentKeyframe"].defaults['strength'])
super.$$link("prev_latent_kf", opts['prev_latent_kf'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'batch_index':  0,
'strength':  1
}
        protected override $$type(){
            return "LatentKeyframe"
        }
},

    /**
     * Latent Keyframe Interp. 🛂🅐🅒🅝 from Adv-ControlNet 🛂🅐🅒🅝/keyframes
     * @desc 
    */
    "LatentKeyframeTiming" : class extends Node{
        //Setters
        //set 'batch_index_from'(value : INT)  { super.$$link(0, value) } 
//set 'batch_index_to_excl'(value : INT)  { super.$$link(1, value) } 
//set 'strength_from'(value : FLOAT)  { super.$$link(2, value) } 
//set 'strength_to'(value : FLOAT)  { super.$$link(3, value) } 
//set 'interpolation'(value : 'linear'|'ease-in'|'ease-out'|'ease-in-out'| $dyn)  { super.$$link(4, value) } 
//set 'prev_latent_kf'(value : LATENT_KEYFRAME)  { super.$$link(5, value) } 
//set 'print_keyframes'(value : BOOLEAN)  { super.$$link(6, value) } 
//set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(7, value) } 

        //Getters
        get 'LATENT_KF'() : LATENT_KEYFRAME { return [this.$uid.toString(), 0]  as unknown as LATENT_KEYFRAME; }

        /**
          * Constructor
		 * @param opts.batch_index_from max: 9007199254740991 min: -9007199254740991 step: 1
		 * @param opts.batch_index_to_excl max: 9007199254740991 min: -9007199254740991 step: 1
		 * @param opts.strength_from default: 1 step: 0.001
		 * @param opts.strength_to default: 1 step: 0.001
		 * @param opts.interpolation
		 * @param opts.prev_latent_kf
		 * @param opts.print_keyframes
		 * @param opts.autosize}
        */
        constructor(opts:{
            'batch_index_from'?: INT,'batch_index_to_excl'?: INT,'strength_from'?: FLOAT,'strength_to'?: FLOAT,'interpolation': 'linear'|'ease-in'|'ease-out'|'ease-in-out'| $dyn,'prev_latent_kf'?: LATENT_KEYFRAME,'print_keyframes'?: BOOLEAN,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            super.$$link("batch_index_from", opts['batch_index_from']??tmp["LatentKeyframeTiming"].defaults['batch_index_from'])
super.$$link("batch_index_to_excl", opts['batch_index_to_excl']??tmp["LatentKeyframeTiming"].defaults['batch_index_to_excl'])
super.$$link("strength_from", opts['strength_from']??tmp["LatentKeyframeTiming"].defaults['strength_from'])
super.$$link("strength_to", opts['strength_to']??tmp["LatentKeyframeTiming"].defaults['strength_to'])
super.$$link("interpolation", opts['interpolation'])
super.$$link("prev_latent_kf", opts['prev_latent_kf'])
super.$$link("print_keyframes", opts['print_keyframes']??tmp["LatentKeyframeTiming"].defaults['print_keyframes'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'batch_index_from':  0,
'batch_index_to_excl':  0,
'strength_from':  1,
'strength_to':  1,
'print_keyframes':  false
}
        protected override $$type(){
            return "LatentKeyframeTiming"
        }
},

    /**
     * Latent Keyframe From List 🛂🅐🅒🅝 from Adv-ControlNet 🛂🅐🅒🅝/keyframes
     * @desc 
    */
    "LatentKeyframeBatchedGroup" : class extends Node{
        //Setters
        //set 'float_strengths'(value : FLOAT)  { super.$$link(0, value) } 
//set 'prev_latent_kf'(value : LATENT_KEYFRAME)  { super.$$link(1, value) } 
//set 'print_keyframes'(value : BOOLEAN)  { super.$$link(2, value) } 
//set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(3, value) } 

        //Getters
        get 'LATENT_KF'() : LATENT_KEYFRAME { return [this.$uid.toString(), 0]  as unknown as LATENT_KEYFRAME; }

        /**
          * Constructor
		 * @param opts.float_strengths default: -1 max: undefined min: -1 step: 0.001
		 * @param opts.prev_latent_kf
		 * @param opts.print_keyframes
		 * @param opts.autosize}
        */
        constructor(opts:{
            'float_strengths'?: FLOAT,'prev_latent_kf'?: LATENT_KEYFRAME,'print_keyframes'?: BOOLEAN,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            super.$$link("float_strengths", opts['float_strengths']??tmp["LatentKeyframeBatchedGroup"].defaults['float_strengths'])
super.$$link("prev_latent_kf", opts['prev_latent_kf'])
super.$$link("print_keyframes", opts['print_keyframes']??tmp["LatentKeyframeBatchedGroup"].defaults['print_keyframes'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'float_strengths':  -1,
'print_keyframes':  false
}
        protected override $$type(){
            return "LatentKeyframeBatchedGroup"
        }
},

    /**
     * Latent Keyframe Group 🛂🅐🅒🅝 from Adv-ControlNet 🛂🅐🅒🅝/keyframes
     * @desc 
    */
    "LatentKeyframeGroup" : class extends Node{
        //Setters
        //set 'index_strengths'(value : STRING)  { super.$$link(0, value) } 
//set 'prev_latent_kf'(value : LATENT_KEYFRAME)  { super.$$link(1, value) } 
//set 'latent_optional'(value : LATENT)  { super.$$link(2, value) } 
//set 'print_keyframes'(value : BOOLEAN)  { super.$$link(3, value) } 
//set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(4, value) } 

        //Getters
        get 'LATENT_KF'() : LATENT_KEYFRAME { return [this.$uid.toString(), 0]  as unknown as LATENT_KEYFRAME; }

        /**
          * Constructor
		 * @param opts.index_strengths
		 * @param opts.prev_latent_kf
		 * @param opts.latent_optional
		 * @param opts.print_keyframes
		 * @param opts.autosize}
        */
        constructor(opts:{
            'index_strengths'?: STRING,'prev_latent_kf'?: LATENT_KEYFRAME,'latent_optional'?: LATENT,'print_keyframes'?: BOOLEAN,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            super.$$link("index_strengths", opts['index_strengths']??tmp["LatentKeyframeGroup"].defaults['index_strengths'])
super.$$link("prev_latent_kf", opts['prev_latent_kf'])
super.$$link("latent_optional", opts['latent_optional'])
super.$$link("print_keyframes", opts['print_keyframes']??tmp["LatentKeyframeGroup"].defaults['print_keyframes'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'index_strengths':  "",
'print_keyframes':  false
}
        protected override $$type(){
            return "LatentKeyframeGroup"
        }
},

    /**
     * Apply Advanced ControlNet 🛂🅐🅒🅝 from Adv-ControlNet 🛂🅐🅒🅝
     * @desc 
    */
    "ACN_AdvancedControlNetApply" : class extends Node{
        //Setters
        //set 'positive'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(1, value) } 
//set 'control_net'(value : CONTROL_NET)  { super.$$link(2, value) } 
//set 'image'(value : IMAGE)  { super.$$link(3, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(4, value) } 
//set 'start_percent'(value : FLOAT)  { super.$$link(5, value) } 
//set 'end_percent'(value : FLOAT)  { super.$$link(6, value) } 
//set 'mask_optional'(value : MASK)  { super.$$link(7, value) } 
//set 'timestep_kf'(value : TIMESTEP_KEYFRAME)  { super.$$link(8, value) } 
//set 'latent_kf_override'(value : LATENT_KEYFRAME)  { super.$$link(9, value) } 
//set 'weights_override'(value : CONTROL_NET_WEIGHTS)  { super.$$link(10, value) } 
//set 'model_optional'(value : MODEL)  { super.$$link(11, value) } 
//set 'vae_optional'(value : VAE)  { super.$$link(12, value) } 
//set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(13, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this.$uid.toString(), 1]  as unknown as CONDITIONING; }
get 'model_opt'() : MODEL { return [this.$uid.toString(), 2]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.control_net
		 * @param opts.image
		 * @param opts.strength default: 1 step: 0.01
		 * @param opts.start_percent step: 0.001
		 * @param opts.end_percent default: 1 step: 0.001
		 * @param opts.mask_optional
		 * @param opts.timestep_kf
		 * @param opts.latent_kf_override
		 * @param opts.weights_override
		 * @param opts.model_optional
		 * @param opts.vae_optional
		 * @param opts.autosize}
        */
        constructor(opts:{
            'positive': CONDITIONING,'negative': CONDITIONING,'control_net': CONTROL_NET,'image': IMAGE,'strength'?: FLOAT,'start_percent'?: FLOAT,'end_percent'?: FLOAT,'mask_optional'?: MASK,'timestep_kf'?: TIMESTEP_KEYFRAME,'latent_kf_override'?: LATENT_KEYFRAME,'weights_override'?: CONTROL_NET_WEIGHTS,'model_optional'?: MODEL,'vae_optional'?: VAE,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("control_net", opts['control_net'])
super.$$link("image", opts['image'])
super.$$link("strength", opts['strength']??tmp["ACN_AdvancedControlNetApply"].defaults['strength'])
super.$$link("start_percent", opts['start_percent']??tmp["ACN_AdvancedControlNetApply"].defaults['start_percent'])
super.$$link("end_percent", opts['end_percent']??tmp["ACN_AdvancedControlNetApply"].defaults['end_percent'])
super.$$link("mask_optional", opts['mask_optional'])
super.$$link("timestep_kf", opts['timestep_kf'])
super.$$link("latent_kf_override", opts['latent_kf_override'])
super.$$link("weights_override", opts['weights_override'])
super.$$link("model_optional", opts['model_optional'])
super.$$link("vae_optional", opts['vae_optional'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'strength':  1,
'start_percent':  0,
'end_percent':  1
}
        protected override $$type(){
            return "ACN_AdvancedControlNetApply"
        }
},

    /**
     * Load Advanced ControlNet Model 🛂🅐🅒🅝 from Adv-ControlNet 🛂🅐🅒🅝
     * @desc 
    */
    "ControlNetLoaderAdvanced" : class extends Node{
        //Setters
        //set 'control_net_name'(value : 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors'| $dyn)  { super.$$link(0, value) } 
//set 'tk_optional'(value : TIMESTEP_KEYFRAME)  { super.$$link(1, value) } 

        //Getters
        get 'CONTROL_NET'() : CONTROL_NET { return [this.$uid.toString(), 0]  as unknown as CONTROL_NET; }

        /**
          * Constructor
		 * @param opts.control_net_name
		 * @param opts.tk_optional}
        */
        constructor(opts:{
            'control_net_name': 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors'| $dyn,'tk_optional'?: TIMESTEP_KEYFRAME
        }){
            super(ctx);

            super.$$link("control_net_name", opts['control_net_name'])
super.$$link("tk_optional", opts['tk_optional'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ControlNetLoaderAdvanced"
        }
},

    /**
     * Load Advanced ControlNet Model (diff) 🛂🅐🅒🅝 from Adv-ControlNet 🛂🅐🅒🅝
     * @desc 
    */
    "DiffControlNetLoaderAdvanced" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'control_net_name'(value : 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors'| $dyn)  { super.$$link(1, value) } 
//set 'tk_optional'(value : TIMESTEP_KEYFRAME)  { super.$$link(2, value) } 
//set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(3, value) } 

        //Getters
        get 'CONTROL_NET'() : CONTROL_NET { return [this.$uid.toString(), 0]  as unknown as CONTROL_NET; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.control_net_name
		 * @param opts.tk_optional
		 * @param opts.autosize}
        */
        constructor(opts:{
            'model': MODEL,'control_net_name': 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors'| $dyn,'tk_optional'?: TIMESTEP_KEYFRAME,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("control_net_name", opts['control_net_name'])
super.$$link("tk_optional", opts['tk_optional'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "DiffControlNetLoaderAdvanced"
        }
},

    /**
     * Scaled Soft Weights 🛂🅐🅒🅝 from Adv-ControlNet 🛂🅐🅒🅝/weights
     * @desc 
    */
    "ScaledSoftControlNetWeights" : class extends Node{
        //Setters
        //set 'base_multiplier'(value : FLOAT)  { super.$$link(0, value) } 
//set 'flip_weights'(value : BOOLEAN)  { super.$$link(1, value) } 
//set 'uncond_multiplier'(value : FLOAT)  { super.$$link(2, value) } 
//set 'cn_extras'(value : CN_WEIGHTS_EXTRAS)  { super.$$link(3, value) } 
//set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(4, value) } 

        //Getters
        get 'CN_WEIGHTS'() : CONTROL_NET_WEIGHTS { return [this.$uid.toString(), 0]  as unknown as CONTROL_NET_WEIGHTS; }
get 'TK_SHORTCUT'() : TIMESTEP_KEYFRAME { return [this.$uid.toString(), 1]  as unknown as TIMESTEP_KEYFRAME; }

        /**
          * Constructor
		 * @param opts.base_multiplier default: 0.825 step: 0.001
		 * @param opts.flip_weights
		 * @param opts.uncond_multiplier default: 1 step: 0.01
		 * @param opts.cn_extras
		 * @param opts.autosize}
        */
        constructor(opts:{
            'base_multiplier'?: FLOAT,'flip_weights'?: BOOLEAN,'uncond_multiplier'?: FLOAT,'cn_extras'?: CN_WEIGHTS_EXTRAS,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            super.$$link("base_multiplier", opts['base_multiplier']??tmp["ScaledSoftControlNetWeights"].defaults['base_multiplier'])
super.$$link("flip_weights", opts['flip_weights']??tmp["ScaledSoftControlNetWeights"].defaults['flip_weights'])
super.$$link("uncond_multiplier", opts['uncond_multiplier']??tmp["ScaledSoftControlNetWeights"].defaults['uncond_multiplier'])
super.$$link("cn_extras", opts['cn_extras'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'base_multiplier':  0.825,
'flip_weights':  false,
'uncond_multiplier':  1
}
        protected override $$type(){
            return "ScaledSoftControlNetWeights"
        }
},

    /**
     * Scaled Soft Masked Weights 🛂🅐🅒🅝 from Adv-ControlNet 🛂🅐🅒🅝/weights
     * @desc 
    */
    "ScaledSoftMaskedUniversalWeights" : class extends Node{
        //Setters
        //set 'mask'(value : MASK)  { super.$$link(0, value) } 
//set 'min_base_multiplier'(value : FLOAT)  { super.$$link(1, value) } 
//set 'max_base_multiplier'(value : FLOAT)  { super.$$link(2, value) } 
//set 'uncond_multiplier'(value : FLOAT)  { super.$$link(3, value) } 
//set 'cn_extras'(value : CN_WEIGHTS_EXTRAS)  { super.$$link(4, value) } 
//set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(5, value) } 

        //Getters
        get 'CN_WEIGHTS'() : CONTROL_NET_WEIGHTS { return [this.$uid.toString(), 0]  as unknown as CONTROL_NET_WEIGHTS; }
get 'TK_SHORTCUT'() : TIMESTEP_KEYFRAME { return [this.$uid.toString(), 1]  as unknown as TIMESTEP_KEYFRAME; }

        /**
          * Constructor
		 * @param opts.mask
		 * @param opts.min_base_multiplier step: 0.001
		 * @param opts.max_base_multiplier default: 1 step: 0.001
		 * @param opts.uncond_multiplier default: 1 step: 0.01
		 * @param opts.cn_extras
		 * @param opts.autosize}
        */
        constructor(opts:{
            'mask': MASK,'min_base_multiplier'?: FLOAT,'max_base_multiplier'?: FLOAT,'uncond_multiplier'?: FLOAT,'cn_extras'?: CN_WEIGHTS_EXTRAS,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            super.$$link("mask", opts['mask'])
super.$$link("min_base_multiplier", opts['min_base_multiplier']??tmp["ScaledSoftMaskedUniversalWeights"].defaults['min_base_multiplier'])
super.$$link("max_base_multiplier", opts['max_base_multiplier']??tmp["ScaledSoftMaskedUniversalWeights"].defaults['max_base_multiplier'])
super.$$link("uncond_multiplier", opts['uncond_multiplier']??tmp["ScaledSoftMaskedUniversalWeights"].defaults['uncond_multiplier'])
super.$$link("cn_extras", opts['cn_extras'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'min_base_multiplier':  0,
'max_base_multiplier':  1,
'uncond_multiplier':  1
}
        protected override $$type(){
            return "ScaledSoftMaskedUniversalWeights"
        }
},

    /**
     * ControlNet Soft Weights 🛂🅐🅒🅝 from Adv-ControlNet 🛂🅐🅒🅝/weights/ControlNet
     * @desc 
    */
    "SoftControlNetWeights" : class extends Node{
        //Setters
        //set 'weight_00'(value : FLOAT)  { super.$$link(0, value) } 
//set 'weight_01'(value : FLOAT)  { super.$$link(1, value) } 
//set 'weight_02'(value : FLOAT)  { super.$$link(2, value) } 
//set 'weight_03'(value : FLOAT)  { super.$$link(3, value) } 
//set 'weight_04'(value : FLOAT)  { super.$$link(4, value) } 
//set 'weight_05'(value : FLOAT)  { super.$$link(5, value) } 
//set 'weight_06'(value : FLOAT)  { super.$$link(6, value) } 
//set 'weight_07'(value : FLOAT)  { super.$$link(7, value) } 
//set 'weight_08'(value : FLOAT)  { super.$$link(8, value) } 
//set 'weight_09'(value : FLOAT)  { super.$$link(9, value) } 
//set 'weight_10'(value : FLOAT)  { super.$$link(10, value) } 
//set 'weight_11'(value : FLOAT)  { super.$$link(11, value) } 
//set 'weight_12'(value : FLOAT)  { super.$$link(12, value) } 
//set 'flip_weights'(value : BOOLEAN)  { super.$$link(13, value) } 
//set 'uncond_multiplier'(value : FLOAT)  { super.$$link(14, value) } 
//set 'cn_extras'(value : CN_WEIGHTS_EXTRAS)  { super.$$link(15, value) } 
//set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(16, value) } 

        //Getters
        get 'CN_WEIGHTS'() : CONTROL_NET_WEIGHTS { return [this.$uid.toString(), 0]  as unknown as CONTROL_NET_WEIGHTS; }
get 'TK_SHORTCUT'() : TIMESTEP_KEYFRAME { return [this.$uid.toString(), 1]  as unknown as TIMESTEP_KEYFRAME; }

        /**
          * Constructor
		 * @param opts.weight_00 default: 0.09941396206337118 step: 0.001
		 * @param opts.weight_01 default: 0.12050177219802567 step: 0.001
		 * @param opts.weight_02 default: 0.14606275417942507 step: 0.001
		 * @param opts.weight_03 default: 0.17704576264172736 step: 0.001
		 * @param opts.weight_04 default: 0.214600924414215 step: 0.001
		 * @param opts.weight_05 default: 0.26012233262329093 step: 0.001
		 * @param opts.weight_06 default: 0.3152997971191405 step: 0.001
		 * @param opts.weight_07 default: 0.3821815722656249 step: 0.001
		 * @param opts.weight_08 default: 0.4632503906249999 step: 0.001
		 * @param opts.weight_09 default: 0.561515625 step: 0.001
		 * @param opts.weight_10 default: 0.6806249999999999 step: 0.001
		 * @param opts.weight_11 default: 0.825 step: 0.001
		 * @param opts.weight_12 default: 1 step: 0.001
		 * @param opts.flip_weights
		 * @param opts.uncond_multiplier default: 1 step: 0.01
		 * @param opts.cn_extras
		 * @param opts.autosize}
        */
        constructor(opts:{
            'weight_00'?: FLOAT,'weight_01'?: FLOAT,'weight_02'?: FLOAT,'weight_03'?: FLOAT,'weight_04'?: FLOAT,'weight_05'?: FLOAT,'weight_06'?: FLOAT,'weight_07'?: FLOAT,'weight_08'?: FLOAT,'weight_09'?: FLOAT,'weight_10'?: FLOAT,'weight_11'?: FLOAT,'weight_12'?: FLOAT,'flip_weights'?: BOOLEAN,'uncond_multiplier'?: FLOAT,'cn_extras'?: CN_WEIGHTS_EXTRAS,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            super.$$link("weight_00", opts['weight_00']??tmp["SoftControlNetWeights"].defaults['weight_00'])
super.$$link("weight_01", opts['weight_01']??tmp["SoftControlNetWeights"].defaults['weight_01'])
super.$$link("weight_02", opts['weight_02']??tmp["SoftControlNetWeights"].defaults['weight_02'])
super.$$link("weight_03", opts['weight_03']??tmp["SoftControlNetWeights"].defaults['weight_03'])
super.$$link("weight_04", opts['weight_04']??tmp["SoftControlNetWeights"].defaults['weight_04'])
super.$$link("weight_05", opts['weight_05']??tmp["SoftControlNetWeights"].defaults['weight_05'])
super.$$link("weight_06", opts['weight_06']??tmp["SoftControlNetWeights"].defaults['weight_06'])
super.$$link("weight_07", opts['weight_07']??tmp["SoftControlNetWeights"].defaults['weight_07'])
super.$$link("weight_08", opts['weight_08']??tmp["SoftControlNetWeights"].defaults['weight_08'])
super.$$link("weight_09", opts['weight_09']??tmp["SoftControlNetWeights"].defaults['weight_09'])
super.$$link("weight_10", opts['weight_10']??tmp["SoftControlNetWeights"].defaults['weight_10'])
super.$$link("weight_11", opts['weight_11']??tmp["SoftControlNetWeights"].defaults['weight_11'])
super.$$link("weight_12", opts['weight_12']??tmp["SoftControlNetWeights"].defaults['weight_12'])
super.$$link("flip_weights", opts['flip_weights']??tmp["SoftControlNetWeights"].defaults['flip_weights'])
super.$$link("uncond_multiplier", opts['uncond_multiplier']??tmp["SoftControlNetWeights"].defaults['uncond_multiplier'])
super.$$link("cn_extras", opts['cn_extras'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'weight_00':  0.09941396206337118,
'weight_01':  0.12050177219802567,
'weight_02':  0.14606275417942507,
'weight_03':  0.17704576264172736,
'weight_04':  0.214600924414215,
'weight_05':  0.26012233262329093,
'weight_06':  0.3152997971191405,
'weight_07':  0.3821815722656249,
'weight_08':  0.4632503906249999,
'weight_09':  0.561515625,
'weight_10':  0.6806249999999999,
'weight_11':  0.825,
'weight_12':  1,
'flip_weights':  false,
'uncond_multiplier':  1
}
        protected override $$type(){
            return "SoftControlNetWeights"
        }
},

    /**
     * ControlNet Custom Weights 🛂🅐🅒🅝 from Adv-ControlNet 🛂🅐🅒🅝/weights/ControlNet
     * @desc 
    */
    "CustomControlNetWeights" : class extends Node{
        //Setters
        //set 'weight_00'(value : FLOAT)  { super.$$link(0, value) } 
//set 'weight_01'(value : FLOAT)  { super.$$link(1, value) } 
//set 'weight_02'(value : FLOAT)  { super.$$link(2, value) } 
//set 'weight_03'(value : FLOAT)  { super.$$link(3, value) } 
//set 'weight_04'(value : FLOAT)  { super.$$link(4, value) } 
//set 'weight_05'(value : FLOAT)  { super.$$link(5, value) } 
//set 'weight_06'(value : FLOAT)  { super.$$link(6, value) } 
//set 'weight_07'(value : FLOAT)  { super.$$link(7, value) } 
//set 'weight_08'(value : FLOAT)  { super.$$link(8, value) } 
//set 'weight_09'(value : FLOAT)  { super.$$link(9, value) } 
//set 'weight_10'(value : FLOAT)  { super.$$link(10, value) } 
//set 'weight_11'(value : FLOAT)  { super.$$link(11, value) } 
//set 'weight_12'(value : FLOAT)  { super.$$link(12, value) } 
//set 'flip_weights'(value : BOOLEAN)  { super.$$link(13, value) } 
//set 'uncond_multiplier'(value : FLOAT)  { super.$$link(14, value) } 
//set 'cn_extras'(value : CN_WEIGHTS_EXTRAS)  { super.$$link(15, value) } 
//set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(16, value) } 

        //Getters
        get 'CN_WEIGHTS'() : CONTROL_NET_WEIGHTS { return [this.$uid.toString(), 0]  as unknown as CONTROL_NET_WEIGHTS; }
get 'TK_SHORTCUT'() : TIMESTEP_KEYFRAME { return [this.$uid.toString(), 1]  as unknown as TIMESTEP_KEYFRAME; }

        /**
          * Constructor
		 * @param opts.weight_00 default: 1 step: 0.001
		 * @param opts.weight_01 default: 1 step: 0.001
		 * @param opts.weight_02 default: 1 step: 0.001
		 * @param opts.weight_03 default: 1 step: 0.001
		 * @param opts.weight_04 default: 1 step: 0.001
		 * @param opts.weight_05 default: 1 step: 0.001
		 * @param opts.weight_06 default: 1 step: 0.001
		 * @param opts.weight_07 default: 1 step: 0.001
		 * @param opts.weight_08 default: 1 step: 0.001
		 * @param opts.weight_09 default: 1 step: 0.001
		 * @param opts.weight_10 default: 1 step: 0.001
		 * @param opts.weight_11 default: 1 step: 0.001
		 * @param opts.weight_12 default: 1 step: 0.001
		 * @param opts.flip_weights
		 * @param opts.uncond_multiplier default: 1 step: 0.01
		 * @param opts.cn_extras
		 * @param opts.autosize}
        */
        constructor(opts:{
            'weight_00'?: FLOAT,'weight_01'?: FLOAT,'weight_02'?: FLOAT,'weight_03'?: FLOAT,'weight_04'?: FLOAT,'weight_05'?: FLOAT,'weight_06'?: FLOAT,'weight_07'?: FLOAT,'weight_08'?: FLOAT,'weight_09'?: FLOAT,'weight_10'?: FLOAT,'weight_11'?: FLOAT,'weight_12'?: FLOAT,'flip_weights'?: BOOLEAN,'uncond_multiplier'?: FLOAT,'cn_extras'?: CN_WEIGHTS_EXTRAS,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            super.$$link("weight_00", opts['weight_00']??tmp["CustomControlNetWeights"].defaults['weight_00'])
super.$$link("weight_01", opts['weight_01']??tmp["CustomControlNetWeights"].defaults['weight_01'])
super.$$link("weight_02", opts['weight_02']??tmp["CustomControlNetWeights"].defaults['weight_02'])
super.$$link("weight_03", opts['weight_03']??tmp["CustomControlNetWeights"].defaults['weight_03'])
super.$$link("weight_04", opts['weight_04']??tmp["CustomControlNetWeights"].defaults['weight_04'])
super.$$link("weight_05", opts['weight_05']??tmp["CustomControlNetWeights"].defaults['weight_05'])
super.$$link("weight_06", opts['weight_06']??tmp["CustomControlNetWeights"].defaults['weight_06'])
super.$$link("weight_07", opts['weight_07']??tmp["CustomControlNetWeights"].defaults['weight_07'])
super.$$link("weight_08", opts['weight_08']??tmp["CustomControlNetWeights"].defaults['weight_08'])
super.$$link("weight_09", opts['weight_09']??tmp["CustomControlNetWeights"].defaults['weight_09'])
super.$$link("weight_10", opts['weight_10']??tmp["CustomControlNetWeights"].defaults['weight_10'])
super.$$link("weight_11", opts['weight_11']??tmp["CustomControlNetWeights"].defaults['weight_11'])
super.$$link("weight_12", opts['weight_12']??tmp["CustomControlNetWeights"].defaults['weight_12'])
super.$$link("flip_weights", opts['flip_weights']??tmp["CustomControlNetWeights"].defaults['flip_weights'])
super.$$link("uncond_multiplier", opts['uncond_multiplier']??tmp["CustomControlNetWeights"].defaults['uncond_multiplier'])
super.$$link("cn_extras", opts['cn_extras'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'weight_00':  1,
'weight_01':  1,
'weight_02':  1,
'weight_03':  1,
'weight_04':  1,
'weight_05':  1,
'weight_06':  1,
'weight_07':  1,
'weight_08':  1,
'weight_09':  1,
'weight_10':  1,
'weight_11':  1,
'weight_12':  1,
'flip_weights':  false,
'uncond_multiplier':  1
}
        protected override $$type(){
            return "CustomControlNetWeights"
        }
},

    /**
     * T2IAdapter Soft Weights 🛂🅐🅒🅝 from Adv-ControlNet 🛂🅐🅒🅝/weights/T2IAdapter
     * @desc 
    */
    "SoftT2IAdapterWeights" : class extends Node{
        //Setters
        //set 'weight_00'(value : FLOAT)  { super.$$link(0, value) } 
//set 'weight_01'(value : FLOAT)  { super.$$link(1, value) } 
//set 'weight_02'(value : FLOAT)  { super.$$link(2, value) } 
//set 'weight_03'(value : FLOAT)  { super.$$link(3, value) } 
//set 'flip_weights'(value : BOOLEAN)  { super.$$link(4, value) } 
//set 'uncond_multiplier'(value : FLOAT)  { super.$$link(5, value) } 
//set 'cn_extras'(value : CN_WEIGHTS_EXTRAS)  { super.$$link(6, value) } 
//set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(7, value) } 

        //Getters
        get 'CN_WEIGHTS'() : CONTROL_NET_WEIGHTS { return [this.$uid.toString(), 0]  as unknown as CONTROL_NET_WEIGHTS; }
get 'TK_SHORTCUT'() : TIMESTEP_KEYFRAME { return [this.$uid.toString(), 1]  as unknown as TIMESTEP_KEYFRAME; }

        /**
          * Constructor
		 * @param opts.weight_00 default: 0.25 step: 0.001
		 * @param opts.weight_01 default: 0.62 step: 0.001
		 * @param opts.weight_02 default: 0.825 step: 0.001
		 * @param opts.weight_03 default: 1 step: 0.001
		 * @param opts.flip_weights
		 * @param opts.uncond_multiplier default: 1 step: 0.01
		 * @param opts.cn_extras
		 * @param opts.autosize}
        */
        constructor(opts:{
            'weight_00'?: FLOAT,'weight_01'?: FLOAT,'weight_02'?: FLOAT,'weight_03'?: FLOAT,'flip_weights'?: BOOLEAN,'uncond_multiplier'?: FLOAT,'cn_extras'?: CN_WEIGHTS_EXTRAS,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            super.$$link("weight_00", opts['weight_00']??tmp["SoftT2IAdapterWeights"].defaults['weight_00'])
super.$$link("weight_01", opts['weight_01']??tmp["SoftT2IAdapterWeights"].defaults['weight_01'])
super.$$link("weight_02", opts['weight_02']??tmp["SoftT2IAdapterWeights"].defaults['weight_02'])
super.$$link("weight_03", opts['weight_03']??tmp["SoftT2IAdapterWeights"].defaults['weight_03'])
super.$$link("flip_weights", opts['flip_weights']??tmp["SoftT2IAdapterWeights"].defaults['flip_weights'])
super.$$link("uncond_multiplier", opts['uncond_multiplier']??tmp["SoftT2IAdapterWeights"].defaults['uncond_multiplier'])
super.$$link("cn_extras", opts['cn_extras'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'weight_00':  0.25,
'weight_01':  0.62,
'weight_02':  0.825,
'weight_03':  1,
'flip_weights':  false,
'uncond_multiplier':  1
}
        protected override $$type(){
            return "SoftT2IAdapterWeights"
        }
},

    /**
     * T2IAdapter Custom Weights 🛂🅐🅒🅝 from Adv-ControlNet 🛂🅐🅒🅝/weights/T2IAdapter
     * @desc 
    */
    "CustomT2IAdapterWeights" : class extends Node{
        //Setters
        //set 'weight_00'(value : FLOAT)  { super.$$link(0, value) } 
//set 'weight_01'(value : FLOAT)  { super.$$link(1, value) } 
//set 'weight_02'(value : FLOAT)  { super.$$link(2, value) } 
//set 'weight_03'(value : FLOAT)  { super.$$link(3, value) } 
//set 'flip_weights'(value : BOOLEAN)  { super.$$link(4, value) } 
//set 'uncond_multiplier'(value : FLOAT)  { super.$$link(5, value) } 
//set 'cn_extras'(value : CN_WEIGHTS_EXTRAS)  { super.$$link(6, value) } 
//set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(7, value) } 

        //Getters
        get 'CN_WEIGHTS'() : CONTROL_NET_WEIGHTS { return [this.$uid.toString(), 0]  as unknown as CONTROL_NET_WEIGHTS; }
get 'TK_SHORTCUT'() : TIMESTEP_KEYFRAME { return [this.$uid.toString(), 1]  as unknown as TIMESTEP_KEYFRAME; }

        /**
          * Constructor
		 * @param opts.weight_00 default: 1 step: 0.001
		 * @param opts.weight_01 default: 1 step: 0.001
		 * @param opts.weight_02 default: 1 step: 0.001
		 * @param opts.weight_03 default: 1 step: 0.001
		 * @param opts.flip_weights
		 * @param opts.uncond_multiplier default: 1 step: 0.01
		 * @param opts.cn_extras
		 * @param opts.autosize}
        */
        constructor(opts:{
            'weight_00'?: FLOAT,'weight_01'?: FLOAT,'weight_02'?: FLOAT,'weight_03'?: FLOAT,'flip_weights'?: BOOLEAN,'uncond_multiplier'?: FLOAT,'cn_extras'?: CN_WEIGHTS_EXTRAS,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            super.$$link("weight_00", opts['weight_00']??tmp["CustomT2IAdapterWeights"].defaults['weight_00'])
super.$$link("weight_01", opts['weight_01']??tmp["CustomT2IAdapterWeights"].defaults['weight_01'])
super.$$link("weight_02", opts['weight_02']??tmp["CustomT2IAdapterWeights"].defaults['weight_02'])
super.$$link("weight_03", opts['weight_03']??tmp["CustomT2IAdapterWeights"].defaults['weight_03'])
super.$$link("flip_weights", opts['flip_weights']??tmp["CustomT2IAdapterWeights"].defaults['flip_weights'])
super.$$link("uncond_multiplier", opts['uncond_multiplier']??tmp["CustomT2IAdapterWeights"].defaults['uncond_multiplier'])
super.$$link("cn_extras", opts['cn_extras'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'weight_00':  1,
'weight_01':  1,
'weight_02':  1,
'weight_03':  1,
'flip_weights':  false,
'uncond_multiplier':  1
}
        protected override $$type(){
            return "CustomT2IAdapterWeights"
        }
},

    /**
     * Default Weights 🛂🅐🅒🅝 from Adv-ControlNet 🛂🅐🅒🅝/weights
     * @desc 
    */
    "ACN_DefaultUniversalWeights" : class extends Node{
        //Setters
        //set 'cn_extras'(value : CN_WEIGHTS_EXTRAS)  { super.$$link(0, value) } 
//set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(1, value) } 

        //Getters
        get 'CN_WEIGHTS'() : CONTROL_NET_WEIGHTS { return [this.$uid.toString(), 0]  as unknown as CONTROL_NET_WEIGHTS; }
get 'TK_SHORTCUT'() : TIMESTEP_KEYFRAME { return [this.$uid.toString(), 1]  as unknown as TIMESTEP_KEYFRAME; }

        /**
          * Constructor
		 * @param opts.cn_extras
		 * @param opts.autosize}
        */
        constructor(opts:{
            'cn_extras'?: CN_WEIGHTS_EXTRAS,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            super.$$link("cn_extras", opts['cn_extras'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ACN_DefaultUniversalWeights"
        }
},

    /**
     * RGB SparseCtrl 🛂🅐🅒🅝 from Adv-ControlNet 🛂🅐🅒🅝/SparseCtrl/preprocess
     * @desc 
    */
    "ACN_SparseCtrlRGBPreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'vae'(value : VAE)  { super.$$link(1, value) } 
//set 'latent_size'(value : LATENT)  { super.$$link(2, value) } 
//set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(3, value) } 

        //Getters
        get 'proc_IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.vae
		 * @param opts.latent_size
		 * @param opts.autosize}
        */
        constructor(opts:{
            'image': IMAGE,'vae': VAE,'latent_size': LATENT,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("vae", opts['vae'])
super.$$link("latent_size", opts['latent_size'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ACN_SparseCtrlRGBPreprocessor"
        }
},

    /**
     * Load SparseCtrl Model 🛂🅐🅒🅝 from Adv-ControlNet 🛂🅐🅒🅝/SparseCtrl
     * @desc 
    */
    "ACN_SparseCtrlLoaderAdvanced" : class extends Node{
        //Setters
        //set 'sparsectrl_name'(value : 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors'| $dyn)  { super.$$link(0, value) } 
//set 'use_motion'(value : BOOLEAN)  { super.$$link(1, value) } 
//set 'motion_strength'(value : FLOAT)  { super.$$link(2, value) } 
//set 'motion_scale'(value : FLOAT)  { super.$$link(3, value) } 
//set 'sparse_method'(value : SPARSE_METHOD)  { super.$$link(4, value) } 
//set 'tk_optional'(value : TIMESTEP_KEYFRAME)  { super.$$link(5, value) } 
//set 'context_aware'(value : 'nearest_hint'|'off'| $dyn)  { super.$$link(6, value) } 
//set 'sparse_hint_mult'(value : FLOAT)  { super.$$link(7, value) } 
//set 'sparse_nonhint_mult'(value : FLOAT)  { super.$$link(8, value) } 
//set 'sparse_mask_mult'(value : FLOAT)  { super.$$link(9, value) } 

        //Getters
        get 'CONTROL_NET'() : CONTROL_NET { return [this.$uid.toString(), 0]  as unknown as CONTROL_NET; }

        /**
          * Constructor
		 * @param opts.sparsectrl_name
		 * @param opts.use_motion default: true
		 * @param opts.motion_strength default: 1 step: 0.001
		 * @param opts.motion_scale default: 1 step: 0.001
		 * @param opts.sparse_method
		 * @param opts.tk_optional
		 * @param opts.context_aware
		 * @param opts.sparse_hint_mult default: 1 step: 0.001
		 * @param opts.sparse_nonhint_mult default: 1 step: 0.001
		 * @param opts.sparse_mask_mult default: 1 step: 0.001}
        */
        constructor(opts:{
            'sparsectrl_name': 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors'| $dyn,'use_motion'?: BOOLEAN,'motion_strength'?: FLOAT,'motion_scale'?: FLOAT,'sparse_method'?: SPARSE_METHOD,'tk_optional'?: TIMESTEP_KEYFRAME,'context_aware'?: 'nearest_hint'|'off'| $dyn,'sparse_hint_mult'?: FLOAT,'sparse_nonhint_mult'?: FLOAT,'sparse_mask_mult'?: FLOAT
        }){
            super(ctx);

            super.$$link("sparsectrl_name", opts['sparsectrl_name'])
super.$$link("use_motion", opts['use_motion']??tmp["ACN_SparseCtrlLoaderAdvanced"].defaults['use_motion'])
super.$$link("motion_strength", opts['motion_strength']??tmp["ACN_SparseCtrlLoaderAdvanced"].defaults['motion_strength'])
super.$$link("motion_scale", opts['motion_scale']??tmp["ACN_SparseCtrlLoaderAdvanced"].defaults['motion_scale'])
super.$$link("sparse_method", opts['sparse_method'])
super.$$link("tk_optional", opts['tk_optional'])
super.$$link("context_aware", opts['context_aware'])
super.$$link("sparse_hint_mult", opts['sparse_hint_mult']??tmp["ACN_SparseCtrlLoaderAdvanced"].defaults['sparse_hint_mult'])
super.$$link("sparse_nonhint_mult", opts['sparse_nonhint_mult']??tmp["ACN_SparseCtrlLoaderAdvanced"].defaults['sparse_nonhint_mult'])
super.$$link("sparse_mask_mult", opts['sparse_mask_mult']??tmp["ACN_SparseCtrlLoaderAdvanced"].defaults['sparse_mask_mult'])
}

        static defaults = {
    'use_motion':  true,
'motion_strength':  1,
'motion_scale':  1,
'sparse_hint_mult':  1,
'sparse_nonhint_mult':  1,
'sparse_mask_mult':  1
}
        protected override $$type(){
            return "ACN_SparseCtrlLoaderAdvanced"
        }
},

    /**
     * 🧪Load Merged SparseCtrl Model 🛂🅐🅒🅝 from Adv-ControlNet 🛂🅐🅒🅝/SparseCtrl/experimental
     * @desc 
    */
    "ACN_SparseCtrlMergedLoaderAdvanced" : class extends Node{
        //Setters
        //set 'sparsectrl_name'(value : 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors'| $dyn)  { super.$$link(0, value) } 
//set 'control_net_name'(value : 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors'| $dyn)  { super.$$link(1, value) } 
//set 'use_motion'(value : BOOLEAN)  { super.$$link(2, value) } 
//set 'motion_strength'(value : FLOAT)  { super.$$link(3, value) } 
//set 'motion_scale'(value : FLOAT)  { super.$$link(4, value) } 
//set 'sparse_method'(value : SPARSE_METHOD)  { super.$$link(5, value) } 
//set 'tk_optional'(value : TIMESTEP_KEYFRAME)  { super.$$link(6, value) } 

        //Getters
        get 'CONTROL_NET'() : CONTROL_NET { return [this.$uid.toString(), 0]  as unknown as CONTROL_NET; }

        /**
          * Constructor
		 * @param opts.sparsectrl_name
		 * @param opts.control_net_name
		 * @param opts.use_motion default: true
		 * @param opts.motion_strength default: 1 step: 0.001
		 * @param opts.motion_scale default: 1 step: 0.001
		 * @param opts.sparse_method
		 * @param opts.tk_optional}
        */
        constructor(opts:{
            'sparsectrl_name': 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors'| $dyn,'control_net_name': 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors'| $dyn,'use_motion'?: BOOLEAN,'motion_strength'?: FLOAT,'motion_scale'?: FLOAT,'sparse_method'?: SPARSE_METHOD,'tk_optional'?: TIMESTEP_KEYFRAME
        }){
            super(ctx);

            super.$$link("sparsectrl_name", opts['sparsectrl_name'])
super.$$link("control_net_name", opts['control_net_name'])
super.$$link("use_motion", opts['use_motion']??tmp["ACN_SparseCtrlMergedLoaderAdvanced"].defaults['use_motion'])
super.$$link("motion_strength", opts['motion_strength']??tmp["ACN_SparseCtrlMergedLoaderAdvanced"].defaults['motion_strength'])
super.$$link("motion_scale", opts['motion_scale']??tmp["ACN_SparseCtrlMergedLoaderAdvanced"].defaults['motion_scale'])
super.$$link("sparse_method", opts['sparse_method'])
super.$$link("tk_optional", opts['tk_optional'])
}

        static defaults = {
    'use_motion':  true,
'motion_strength':  1,
'motion_scale':  1
}
        protected override $$type(){
            return "ACN_SparseCtrlMergedLoaderAdvanced"
        }
},

    /**
     * SparseCtrl Index Method 🛂🅐🅒🅝 from Adv-ControlNet 🛂🅐🅒🅝/SparseCtrl
     * @desc 
    */
    "ACN_SparseCtrlIndexMethodNode" : class extends Node{
        //Setters
        //set 'indexes'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'SPARSE_METHOD'() : SPARSE_METHOD { return [this.$uid.toString(), 0]  as unknown as SPARSE_METHOD; }

        /**
          * Constructor
		 * @param opts.indexes default: "0"}
        */
        constructor(opts:{
            'indexes'?: STRING
        }){
            super(ctx);

            super.$$link("indexes", opts['indexes']??tmp["ACN_SparseCtrlIndexMethodNode"].defaults['indexes'])
}

        static defaults = {
    'indexes':  "0"
}
        protected override $$type(){
            return "ACN_SparseCtrlIndexMethodNode"
        }
},

    /**
     * SparseCtrl Spread Method 🛂🅐🅒🅝 from Adv-ControlNet 🛂🅐🅒🅝/SparseCtrl
     * @desc 
    */
    "ACN_SparseCtrlSpreadMethodNode" : class extends Node{
        //Setters
        //set 'spread'(value : 'uniform'|'starting'|'ending'|'center'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'SPARSE_METHOD'() : SPARSE_METHOD { return [this.$uid.toString(), 0]  as unknown as SPARSE_METHOD; }

        /**
          * Constructor
		 * @param opts.spread}
        */
        constructor(opts:{
            'spread': 'uniform'|'starting'|'ending'|'center'| $dyn
        }){
            super(ctx);

            super.$$link("spread", opts['spread'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ACN_SparseCtrlSpreadMethodNode"
        }
},

    /**
     * SparseCtrl Weight Extras 🛂🅐🅒🅝 from Adv-ControlNet 🛂🅐🅒🅝/SparseCtrl/extras
     * @desc 
    */
    "ACN_SparseCtrlWeightExtras" : class extends Node{
        //Setters
        //set 'cn_extras'(value : CN_WEIGHTS_EXTRAS)  { super.$$link(0, value) } 
//set 'sparse_hint_mult'(value : FLOAT)  { super.$$link(1, value) } 
//set 'sparse_nonhint_mult'(value : FLOAT)  { super.$$link(2, value) } 
//set 'sparse_mask_mult'(value : FLOAT)  { super.$$link(3, value) } 
//set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(4, value) } 

        //Getters
        get 'cn_extras'() : CN_WEIGHTS_EXTRAS { return [this.$uid.toString(), 0]  as unknown as CN_WEIGHTS_EXTRAS; }

        /**
          * Constructor
		 * @param opts.cn_extras
		 * @param opts.sparse_hint_mult default: 1 step: 0.001
		 * @param opts.sparse_nonhint_mult default: 1 step: 0.001
		 * @param opts.sparse_mask_mult default: 1 step: 0.001
		 * @param opts.autosize}
        */
        constructor(opts:{
            'cn_extras'?: CN_WEIGHTS_EXTRAS,'sparse_hint_mult'?: FLOAT,'sparse_nonhint_mult'?: FLOAT,'sparse_mask_mult'?: FLOAT,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            super.$$link("cn_extras", opts['cn_extras'])
super.$$link("sparse_hint_mult", opts['sparse_hint_mult']??tmp["ACN_SparseCtrlWeightExtras"].defaults['sparse_hint_mult'])
super.$$link("sparse_nonhint_mult", opts['sparse_nonhint_mult']??tmp["ACN_SparseCtrlWeightExtras"].defaults['sparse_nonhint_mult'])
super.$$link("sparse_mask_mult", opts['sparse_mask_mult']??tmp["ACN_SparseCtrlWeightExtras"].defaults['sparse_mask_mult'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'sparse_hint_mult':  1,
'sparse_nonhint_mult':  1,
'sparse_mask_mult':  1
}
        protected override $$type(){
            return "ACN_SparseCtrlWeightExtras"
        }
},

    /**
     * Load ControlNet++ Model (Single) 🛂🅐🅒🅝 from Adv-ControlNet 🛂🅐🅒🅝/ControlNet++
     * @desc 
    */
    "ACN_ControlNet++LoaderSingle" : class extends Node{
        //Setters
        //set 'name'(value : 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors'| $dyn)  { super.$$link(0, value) } 
//set 'control_type'(value : 'openpose'|'depth'|'hed/pidi/scribble/ted'|'canny/lineart/mlsd'|'normal'|'segment'|'tile'|'inpaint/outpaint'|'none'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'CONTROL_NET'() : CONTROL_NET { return [this.$uid.toString(), 0]  as unknown as CONTROL_NET; }

        /**
          * Constructor
		 * @param opts.name
		 * @param opts.control_type default: "none"}
        */
        constructor(opts:{
            'name': 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors'| $dyn,'control_type'?: 'openpose'|'depth'|'hed/pidi/scribble/ted'|'canny/lineart/mlsd'|'normal'|'segment'|'tile'|'inpaint/outpaint'|'none'| $dyn
        }){
            super(ctx);

            super.$$link("name", opts['name'])
super.$$link("control_type", opts['control_type']??tmp["ACN_ControlNet++LoaderSingle"].defaults['control_type'])
}

        static defaults = {
    'control_type':  "none"
}
        protected override $$type(){
            return "ACN_ControlNet++LoaderSingle"
        }
},

    /**
     * Load ControlNet++ Model (Multi) 🛂🅐🅒🅝 from Adv-ControlNet 🛂🅐🅒🅝/ControlNet++
     * @desc 
    */
    "ACN_ControlNet++LoaderAdvanced" : class extends Node{
        //Setters
        //set 'plus_input'(value : PLUS_INPUT)  { super.$$link(0, value) } 
//set 'name'(value : 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'CONTROL_NET'() : CONTROL_NET { return [this.$uid.toString(), 0]  as unknown as CONTROL_NET; }
get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 1]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.plus_input
		 * @param opts.name}
        */
        constructor(opts:{
            'plus_input': PLUS_INPUT,'name': 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors'| $dyn
        }){
            super(ctx);

            super.$$link("plus_input", opts['plus_input'])
super.$$link("name", opts['name'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ACN_ControlNet++LoaderAdvanced"
        }
},

    /**
     * ControlNet++ Input 🛂🅐🅒🅝 from Adv-ControlNet 🛂🅐🅒🅝/ControlNet++
     * @desc 
    */
    "ACN_ControlNet++InputNode" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'control_type'(value : 'openpose'|'depth'|'hed/pidi/scribble/ted'|'canny/lineart/mlsd'|'normal'|'segment'|'tile'|'inpaint/outpaint'| $dyn)  { super.$$link(1, value) } 
//set 'prev_plus_input'(value : PLUS_INPUT)  { super.$$link(2, value) } 
//set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(3, value) } 

        //Getters
        get 'PLUS_INPUT'() : PLUS_INPUT { return [this.$uid.toString(), 0]  as unknown as PLUS_INPUT; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.control_type
		 * @param opts.prev_plus_input
		 * @param opts.autosize}
        */
        constructor(opts:{
            'image': IMAGE,'control_type': 'openpose'|'depth'|'hed/pidi/scribble/ted'|'canny/lineart/mlsd'|'normal'|'segment'|'tile'|'inpaint/outpaint'| $dyn,'prev_plus_input'?: PLUS_INPUT,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("control_type", opts['control_type'])
super.$$link("prev_plus_input", opts['prev_plus_input'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ACN_ControlNet++InputNode"
        }
},

    /**
     * Reference Preproccessor 🛂🅐🅒🅝 from Adv-ControlNet 🛂🅐🅒🅝/Reference/preprocess
     * @desc 
    */
    "ACN_ReferencePreprocessor" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'vae'(value : VAE)  { super.$$link(1, value) } 
//set 'latent_size'(value : LATENT)  { super.$$link(2, value) } 

        //Getters
        get 'proc_IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.vae
		 * @param opts.latent_size}
        */
        constructor(opts:{
            'image': IMAGE,'vae': VAE,'latent_size': LATENT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("vae", opts['vae'])
super.$$link("latent_size", opts['latent_size'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ACN_ReferencePreprocessor"
        }
},

    /**
     * Reference ControlNet 🛂🅐🅒🅝 from Adv-ControlNet 🛂🅐🅒🅝/Reference
     * @desc 
    */
    "ACN_ReferenceControlNet" : class extends Node{
        //Setters
        //set 'reference_type'(value : 'reference_attn'|'reference_adain'|'reference_attn+adain'| $dyn)  { super.$$link(0, value) } 
//set 'style_fidelity'(value : FLOAT)  { super.$$link(1, value) } 
//set 'ref_weight'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'CONTROL_NET'() : CONTROL_NET { return [this.$uid.toString(), 0]  as unknown as CONTROL_NET; }

        /**
          * Constructor
		 * @param opts.reference_type
		 * @param opts.style_fidelity default: 0.5 step: 0.01
		 * @param opts.ref_weight default: 1 step: 0.01}
        */
        constructor(opts:{
            'reference_type': 'reference_attn'|'reference_adain'|'reference_attn+adain'| $dyn,'style_fidelity'?: FLOAT,'ref_weight'?: FLOAT
        }){
            super(ctx);

            super.$$link("reference_type", opts['reference_type'])
super.$$link("style_fidelity", opts['style_fidelity']??tmp["ACN_ReferenceControlNet"].defaults['style_fidelity'])
super.$$link("ref_weight", opts['ref_weight']??tmp["ACN_ReferenceControlNet"].defaults['ref_weight'])
}

        static defaults = {
    'style_fidelity':  0.5,
'ref_weight':  1
}
        protected override $$type(){
            return "ACN_ReferenceControlNet"
        }
},

    /**
     * Reference ControlNet (Finetune) 🛂🅐🅒🅝 from Adv-ControlNet 🛂🅐🅒🅝/Reference
     * @desc 
    */
    "ACN_ReferenceControlNetFinetune" : class extends Node{
        //Setters
        //set 'attn_style_fidelity'(value : FLOAT)  { super.$$link(0, value) } 
//set 'attn_ref_weight'(value : FLOAT)  { super.$$link(1, value) } 
//set 'attn_strength'(value : FLOAT)  { super.$$link(2, value) } 
//set 'adain_style_fidelity'(value : FLOAT)  { super.$$link(3, value) } 
//set 'adain_ref_weight'(value : FLOAT)  { super.$$link(4, value) } 
//set 'adain_strength'(value : FLOAT)  { super.$$link(5, value) } 

        //Getters
        get 'CONTROL_NET'() : CONTROL_NET { return [this.$uid.toString(), 0]  as unknown as CONTROL_NET; }

        /**
          * Constructor
		 * @param opts.attn_style_fidelity default: 0.5 step: 0.01
		 * @param opts.attn_ref_weight default: 1 step: 0.01
		 * @param opts.attn_strength default: 1 step: 0.01
		 * @param opts.adain_style_fidelity default: 0.5 step: 0.01
		 * @param opts.adain_ref_weight default: 1 step: 0.01
		 * @param opts.adain_strength default: 1 step: 0.01}
        */
        constructor(opts:{
            'attn_style_fidelity'?: FLOAT,'attn_ref_weight'?: FLOAT,'attn_strength'?: FLOAT,'adain_style_fidelity'?: FLOAT,'adain_ref_weight'?: FLOAT,'adain_strength'?: FLOAT
        }){
            super(ctx);

            super.$$link("attn_style_fidelity", opts['attn_style_fidelity']??tmp["ACN_ReferenceControlNetFinetune"].defaults['attn_style_fidelity'])
super.$$link("attn_ref_weight", opts['attn_ref_weight']??tmp["ACN_ReferenceControlNetFinetune"].defaults['attn_ref_weight'])
super.$$link("attn_strength", opts['attn_strength']??tmp["ACN_ReferenceControlNetFinetune"].defaults['attn_strength'])
super.$$link("adain_style_fidelity", opts['adain_style_fidelity']??tmp["ACN_ReferenceControlNetFinetune"].defaults['adain_style_fidelity'])
super.$$link("adain_ref_weight", opts['adain_ref_weight']??tmp["ACN_ReferenceControlNetFinetune"].defaults['adain_ref_weight'])
super.$$link("adain_strength", opts['adain_strength']??tmp["ACN_ReferenceControlNetFinetune"].defaults['adain_strength'])
}

        static defaults = {
    'attn_style_fidelity':  0.5,
'attn_ref_weight':  1,
'attn_strength':  1,
'adain_style_fidelity':  0.5,
'adain_ref_weight':  1,
'adain_strength':  1
}
        protected override $$type(){
            return "ACN_ReferenceControlNetFinetune"
        }
},

    /**
     * 🚫Load Images [DEPRECATED] 🛂🅐🅒🅝 from 
     * @desc 
    */
    "LoadImagesFromDirectory" : class extends Node{
        //Setters
        //set 'directory'(value : STRING)  { super.$$link(0, value) } 
//set 'image_load_cap'(value : INT)  { super.$$link(1, value) } 
//set 'start_index'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'MASK'() : MASK { return [this.$uid.toString(), 1]  as unknown as MASK; }
get 'INT'() : INT { return [this.$uid.toString(), 2]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.directory
		 * @param opts.image_load_cap step: 1
		 * @param opts.start_index step: 1}
        */
        constructor(opts:{
            'directory'?: STRING,'image_load_cap'?: INT,'start_index'?: INT
        }){
            super(ctx);

            super.$$link("directory", opts['directory']??tmp["LoadImagesFromDirectory"].defaults['directory'])
super.$$link("image_load_cap", opts['image_load_cap']??tmp["LoadImagesFromDirectory"].defaults['image_load_cap'])
super.$$link("start_index", opts['start_index']??tmp["LoadImagesFromDirectory"].defaults['start_index'])
}

        static defaults = {
    'directory':  "",
'image_load_cap':  0,
'start_index':  0
}
        protected override $$type(){
            return "LoadImagesFromDirectory"
        }
},

    /**
     * Latent Interposer from latent
     * @desc 
    */
    "LatentInterposer" : class extends Node{
        //Setters
        //set 'samples'(value : LATENT)  { super.$$link(0, value) } 
//set 'latent_src'(value : 'v1'|'xl'|'v3'|'fx'|'ca'| $dyn)  { super.$$link(1, value) } 
//set 'latent_dst'(value : 'v1'|'xl'|'v3'| $dyn)  { super.$$link(2, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.samples
		 * @param opts.latent_src
		 * @param opts.latent_dst}
        */
        constructor(opts:{
            'samples': LATENT,'latent_src': 'v1'|'xl'|'v3'|'fx'|'ca'| $dyn,'latent_dst': 'v1'|'xl'|'v3'| $dyn
        }){
            super(ctx);

            super.$$link("samples", opts['samples'])
super.$$link("latent_src", opts['latent_src'])
super.$$link("latent_dst", opts['latent_dst'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "LatentInterposer"
        }
},

    /**
     * Load AnimateDiff LoRA 🎭🅐🅓 from Animate Diff 🎭🅐🅓
     * @desc 
    */
    "ADE_AnimateDiffLoRALoader" : class extends Node{
        //Setters
        //set 'name'(value : 'v2_lora_PanLeft.ckpt'|'v2_lora_PanRight.ckpt'|'v2_lora_RollingAnticlockwise.ckpt'|'v2_lora_RollingClockwise.ckpt'|'v2_lora_TiltDown.ckpt'|'v2_lora_TiltUp.ckpt'|'v2_lora_ZoomIn.ckpt'|'v2_lora_ZoomOut.ckpt'| $dyn)  { super.$$link(0, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(1, value) } 
//set 'prev_motion_lora'(value : MOTION_LORA)  { super.$$link(2, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(3, value) } 

        //Getters
        get 'MOTION_LORA'() : MOTION_LORA { return [this.$uid.toString(), 0]  as unknown as MOTION_LORA; }

        /**
          * Constructor
		 * @param opts.name
		 * @param opts.strength default: 1 step: 0.001
		 * @param opts.prev_motion_lora
		 * @param opts.autosize}
        */
        constructor(opts:{
            'name': 'v2_lora_PanLeft.ckpt'|'v2_lora_PanRight.ckpt'|'v2_lora_RollingAnticlockwise.ckpt'|'v2_lora_RollingClockwise.ckpt'|'v2_lora_TiltDown.ckpt'|'v2_lora_TiltUp.ckpt'|'v2_lora_ZoomIn.ckpt'|'v2_lora_ZoomOut.ckpt'| $dyn,'strength'?: FLOAT,'prev_motion_lora'?: MOTION_LORA,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("name", opts['name'])
super.$$link("strength", opts['strength']??tmp["ADE_AnimateDiffLoRALoader"].defaults['strength'])
super.$$link("prev_motion_lora", opts['prev_motion_lora'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'strength':  1
}
        protected override $$type(){
            return "ADE_AnimateDiffLoRALoader"
        }
},

    /**
     * Sample Settings 🎭🅐🅓 from Animate Diff 🎭🅐🅓
     * @desc 
    */
    "ADE_AnimateDiffSamplingSettings" : class extends Node{
        //Setters
        //set 'batch_offset'(value : INT)  { super.$$link(0, value) } 
//set 'noise_type'(value : 'default'|'constant'|'empty'|'repeated_context'|'FreeNoise'| $dyn)  { super.$$link(1, value) } 
//set 'seed_gen'(value : 'comfy'|'comfy [gpu]'|'auto1111'|'auto1111 [gpu]'| $dyn)  { super.$$link(2, value) } 
//set 'seed_offset'(value : INT)  { super.$$link(3, value) } 
//set 'noise_layers'(value : NOISE_LAYERS)  { super.$$link(4, value) } 
//set 'iteration_opts'(value : ITERATION_OPTS)  { super.$$link(5, value) } 
//set 'seed_override'(value : INT)  { super.$$link(6, value) } 
//set 'adapt_denoise_steps'(value : BOOLEAN)  { super.$$link(7, value) } 
//set 'custom_cfg'(value : CUSTOM_CFG)  { super.$$link(8, value) } 
//set 'sigma_schedule'(value : SIGMA_SCHEDULE)  { super.$$link(9, value) } 
//set 'image_inject'(value : IMAGE_INJECT)  { super.$$link(10, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(11, value) } 

        //Getters
        get 'settings'() : SAMPLE_SETTINGS { return [this.$uid.toString(), 0]  as unknown as SAMPLE_SETTINGS; }

        /**
          * Constructor
		 * @param opts.batch_offset
		 * @param opts.noise_type
		 * @param opts.seed_gen
		 * @param opts.seed_offset max: 9007199254740991 min: -9007199254740991
		 * @param opts.noise_layers
		 * @param opts.iteration_opts
		 * @param opts.seed_override
		 * @param opts.adapt_denoise_steps
		 * @param opts.custom_cfg
		 * @param opts.sigma_schedule
		 * @param opts.image_inject
		 * @param opts.autosize}
        */
        constructor(opts:{
            'batch_offset'?: INT,'noise_type': 'default'|'constant'|'empty'|'repeated_context'|'FreeNoise'| $dyn,'seed_gen': 'comfy'|'comfy [gpu]'|'auto1111'|'auto1111 [gpu]'| $dyn,'seed_offset'?: INT,'noise_layers'?: NOISE_LAYERS,'iteration_opts'?: ITERATION_OPTS,'seed_override'?: INT,'adapt_denoise_steps'?: BOOLEAN,'custom_cfg'?: CUSTOM_CFG,'sigma_schedule'?: SIGMA_SCHEDULE,'image_inject'?: IMAGE_INJECT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("batch_offset", opts['batch_offset']??tmp["ADE_AnimateDiffSamplingSettings"].defaults['batch_offset'])
super.$$link("noise_type", opts['noise_type'])
super.$$link("seed_gen", opts['seed_gen'])
super.$$link("seed_offset", opts['seed_offset']??tmp["ADE_AnimateDiffSamplingSettings"].defaults['seed_offset'])
super.$$link("noise_layers", opts['noise_layers'])
super.$$link("iteration_opts", opts['iteration_opts'])
super.$$link("seed_override", opts['seed_override']??tmp["ADE_AnimateDiffSamplingSettings"].defaults['seed_override'])
super.$$link("adapt_denoise_steps", opts['adapt_denoise_steps']??tmp["ADE_AnimateDiffSamplingSettings"].defaults['adapt_denoise_steps'])
super.$$link("custom_cfg", opts['custom_cfg'])
super.$$link("sigma_schedule", opts['sigma_schedule'])
super.$$link("image_inject", opts['image_inject'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'batch_offset':  0,
'seed_offset':  0,
'seed_override':  0,
'adapt_denoise_steps':  false
}
        protected override $$type(){
            return "ADE_AnimateDiffSamplingSettings"
        }
},

    /**
     * AnimateDiff Keyframe 🎭🅐🅓 from Animate Diff 🎭🅐🅓
     * @desc 
    */
    "ADE_AnimateDiffKeyframe" : class extends Node{
        //Setters
        //set 'start_percent'(value : FLOAT)  { super.$$link(0, value) } 
//set 'prev_ad_keyframes'(value : AD_KEYFRAMES)  { super.$$link(1, value) } 
//set 'scale_multival'(value : MULTIVAL)  { super.$$link(2, value) } 
//set 'effect_multival'(value : MULTIVAL)  { super.$$link(3, value) } 
//set 'inherit_missing'(value : BOOLEAN)  { super.$$link(4, value) } 
//set 'guarantee_steps'(value : INT)  { super.$$link(5, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(6, value) } 

        //Getters
        get 'AD_KEYFRAMES'() : AD_KEYFRAMES { return [this.$uid.toString(), 0]  as unknown as AD_KEYFRAMES; }

        /**
          * Constructor
		 * @param opts.start_percent step: 0.001
		 * @param opts.prev_ad_keyframes
		 * @param opts.scale_multival
		 * @param opts.effect_multival
		 * @param opts.inherit_missing default: true
		 * @param opts.guarantee_steps default: 1
		 * @param opts.autosize}
        */
        constructor(opts:{
            'start_percent'?: FLOAT,'prev_ad_keyframes'?: AD_KEYFRAMES,'scale_multival'?: MULTIVAL,'effect_multival'?: MULTIVAL,'inherit_missing'?: BOOLEAN,'guarantee_steps'?: INT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("start_percent", opts['start_percent']??tmp["ADE_AnimateDiffKeyframe"].defaults['start_percent'])
super.$$link("prev_ad_keyframes", opts['prev_ad_keyframes'])
super.$$link("scale_multival", opts['scale_multival'])
super.$$link("effect_multival", opts['effect_multival'])
super.$$link("inherit_missing", opts['inherit_missing']??tmp["ADE_AnimateDiffKeyframe"].defaults['inherit_missing'])
super.$$link("guarantee_steps", opts['guarantee_steps']??tmp["ADE_AnimateDiffKeyframe"].defaults['guarantee_steps'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'start_percent':  0,
'inherit_missing':  true,
'guarantee_steps':  1
}
        protected override $$type(){
            return "ADE_AnimateDiffKeyframe"
        }
},

    /**
     * Multival 🎭🅐🅓 from Animate Diff 🎭🅐🅓/multival
     * @desc 
    */
    "ADE_MultivalDynamic" : class extends Node{
        //Setters
        //set 'float_val'(value : FLOAT)  { super.$$link(0, value) } 
//set 'mask_optional'(value : MASK)  { super.$$link(1, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(2, value) } 

        //Getters
        get 'MULTIVAL'() : MULTIVAL { return [this.$uid.toString(), 0]  as unknown as MULTIVAL; }

        /**
          * Constructor
		 * @param opts.float_val default: 1 step: 0.001
		 * @param opts.mask_optional
		 * @param opts.autosize}
        */
        constructor(opts:{
            'float_val'?: FLOAT,'mask_optional'?: MASK,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("float_val", opts['float_val']??tmp["ADE_MultivalDynamic"].defaults['float_val'])
super.$$link("mask_optional", opts['mask_optional'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'float_val':  1
}
        protected override $$type(){
            return "ADE_MultivalDynamic"
        }
},

    /**
     * Multival [Float List] 🎭🅐🅓 from Animate Diff 🎭🅐🅓/multival
     * @desc 
    */
    "ADE_MultivalDynamicFloatInput" : class extends Node{
        //Setters
        //set 'float_val'(value : FLOAT)  { super.$$link(0, value) } 
//set 'mask_optional'(value : MASK)  { super.$$link(1, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(2, value) } 

        //Getters
        get 'MULTIVAL'() : MULTIVAL { return [this.$uid.toString(), 0]  as unknown as MULTIVAL; }

        /**
          * Constructor
		 * @param opts.float_val default: 1 step: 0.001
		 * @param opts.mask_optional
		 * @param opts.autosize}
        */
        constructor(opts:{
            'float_val'?: FLOAT,'mask_optional'?: MASK,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("float_val", opts['float_val']??tmp["ADE_MultivalDynamicFloatInput"].defaults['float_val'])
super.$$link("mask_optional", opts['mask_optional'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'float_val':  1
}
        protected override $$type(){
            return "ADE_MultivalDynamicFloatInput"
        }
},

    /**
     * Multival Scaled Mask 🎭🅐🅓 from Animate Diff 🎭🅐🅓/multival
     * @desc 
    */
    "ADE_MultivalScaledMask" : class extends Node{
        //Setters
        //set 'min_float_val'(value : FLOAT)  { super.$$link(0, value) } 
//set 'max_float_val'(value : FLOAT)  { super.$$link(1, value) } 
//set 'mask'(value : MASK)  { super.$$link(2, value) } 
//set 'scaling'(value : 'absolute'|'relative'| $dyn)  { super.$$link(3, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(4, value) } 

        //Getters
        get 'MULTIVAL'() : MULTIVAL { return [this.$uid.toString(), 0]  as unknown as MULTIVAL; }

        /**
          * Constructor
		 * @param opts.min_float_val step: 0.001
		 * @param opts.max_float_val default: 1 step: 0.001
		 * @param opts.mask
		 * @param opts.scaling
		 * @param opts.autosize}
        */
        constructor(opts:{
            'min_float_val'?: FLOAT,'max_float_val'?: FLOAT,'mask': MASK,'scaling'?: 'absolute'|'relative'| $dyn,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("min_float_val", opts['min_float_val']??tmp["ADE_MultivalScaledMask"].defaults['min_float_val'])
super.$$link("max_float_val", opts['max_float_val']??tmp["ADE_MultivalScaledMask"].defaults['max_float_val'])
super.$$link("mask", opts['mask'])
super.$$link("scaling", opts['scaling'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'min_float_val':  0,
'max_float_val':  1
}
        protected override $$type(){
            return "ADE_MultivalScaledMask"
        }
},

    /**
     * Multival to Mask 🎭🅐🅓 from Animate Diff 🎭🅐🅓/multival
     * @desc 
    */
    "ADE_MultivalConvertToMask" : class extends Node{
        //Setters
        //set 'multival'(value : MULTIVAL)  { super.$$link(0, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(1, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.multival
		 * @param opts.autosize}
        */
        constructor(opts:{
            'multival': MULTIVAL,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("multival", opts['multival'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ADE_MultivalConvertToMask"
        }
},

    /**
     * Context Options◆Standard Static 🎭🅐🅓 from Animate Diff 🎭🅐🅓/context opts
     * @desc 
    */
    "ADE_StandardStaticContextOptions" : class extends Node{
        //Setters
        //set 'context_length'(value : INT)  { super.$$link(0, value) } 
//set 'context_overlap'(value : INT)  { super.$$link(1, value) } 
//set 'fuse_method'(value : 'pyramid'|'relative'|'flat'|'delayed reverse sawtooth'|'pyramid-sigma'|'pyramid-sigma inverse'|'gauss-sigma'|'gauss-sigma inverse'|'random'| $dyn)  { super.$$link(2, value) } 
//set 'use_on_equal_length'(value : BOOLEAN)  { super.$$link(3, value) } 
//set 'start_percent'(value : FLOAT)  { super.$$link(4, value) } 
//set 'guarantee_steps'(value : INT)  { super.$$link(5, value) } 
//set 'prev_context'(value : CONTEXT_OPTIONS)  { super.$$link(6, value) } 
//set 'view_opts'(value : VIEW_OPTS)  { super.$$link(7, value) } 

        //Getters
        get 'CONTEXT_OPTS'() : CONTEXT_OPTIONS { return [this.$uid.toString(), 0]  as unknown as CONTEXT_OPTIONS; }

        /**
          * Constructor
		 * @param opts.context_length default: 16 max: 128 min: 1
		 * @param opts.context_overlap default: 4
		 * @param opts.fuse_method
		 * @param opts.use_on_equal_length
		 * @param opts.start_percent step: 0.001
		 * @param opts.guarantee_steps default: 1
		 * @param opts.prev_context
		 * @param opts.view_opts}
        */
        constructor(opts:{
            'context_length'?: INT,'context_overlap'?: INT,'fuse_method'?: 'pyramid'|'relative'|'flat'|'delayed reverse sawtooth'|'pyramid-sigma'|'pyramid-sigma inverse'|'gauss-sigma'|'gauss-sigma inverse'|'random'| $dyn,'use_on_equal_length'?: BOOLEAN,'start_percent'?: FLOAT,'guarantee_steps'?: INT,'prev_context'?: CONTEXT_OPTIONS,'view_opts'?: VIEW_OPTS
        }){
            super(ctx);

            super.$$link("context_length", opts['context_length']??tmp["ADE_StandardStaticContextOptions"].defaults['context_length'])
super.$$link("context_overlap", opts['context_overlap']??tmp["ADE_StandardStaticContextOptions"].defaults['context_overlap'])
super.$$link("fuse_method", opts['fuse_method'])
super.$$link("use_on_equal_length", opts['use_on_equal_length']??tmp["ADE_StandardStaticContextOptions"].defaults['use_on_equal_length'])
super.$$link("start_percent", opts['start_percent']??tmp["ADE_StandardStaticContextOptions"].defaults['start_percent'])
super.$$link("guarantee_steps", opts['guarantee_steps']??tmp["ADE_StandardStaticContextOptions"].defaults['guarantee_steps'])
super.$$link("prev_context", opts['prev_context'])
super.$$link("view_opts", opts['view_opts'])
}

        static defaults = {
    'context_length':  16,
'context_overlap':  4,
'use_on_equal_length':  false,
'start_percent':  0,
'guarantee_steps':  1
}
        protected override $$type(){
            return "ADE_StandardStaticContextOptions"
        }
},

    /**
     * Context Options◆Standard Uniform 🎭🅐🅓 from Animate Diff 🎭🅐🅓/context opts
     * @desc 
    */
    "ADE_StandardUniformContextOptions" : class extends Node{
        //Setters
        //set 'context_length'(value : INT)  { super.$$link(0, value) } 
//set 'context_stride'(value : INT)  { super.$$link(1, value) } 
//set 'context_overlap'(value : INT)  { super.$$link(2, value) } 
//set 'fuse_method'(value : 'pyramid'|'flat'|'delayed reverse sawtooth'|'pyramid-sigma'|'pyramid-sigma inverse'|'gauss-sigma'|'gauss-sigma inverse'|'random'| $dyn)  { super.$$link(3, value) } 
//set 'use_on_equal_length'(value : BOOLEAN)  { super.$$link(4, value) } 
//set 'start_percent'(value : FLOAT)  { super.$$link(5, value) } 
//set 'guarantee_steps'(value : INT)  { super.$$link(6, value) } 
//set 'prev_context'(value : CONTEXT_OPTIONS)  { super.$$link(7, value) } 
//set 'view_opts'(value : VIEW_OPTS)  { super.$$link(8, value) } 

        //Getters
        get 'CONTEXT_OPTS'() : CONTEXT_OPTIONS { return [this.$uid.toString(), 0]  as unknown as CONTEXT_OPTIONS; }

        /**
          * Constructor
		 * @param opts.context_length default: 16 max: 128 min: 1
		 * @param opts.context_stride default: 1 max: 32 min: 1
		 * @param opts.context_overlap default: 4
		 * @param opts.fuse_method
		 * @param opts.use_on_equal_length
		 * @param opts.start_percent step: 0.001
		 * @param opts.guarantee_steps default: 1
		 * @param opts.prev_context
		 * @param opts.view_opts}
        */
        constructor(opts:{
            'context_length'?: INT,'context_stride'?: INT,'context_overlap'?: INT,'fuse_method'?: 'pyramid'|'flat'|'delayed reverse sawtooth'|'pyramid-sigma'|'pyramid-sigma inverse'|'gauss-sigma'|'gauss-sigma inverse'|'random'| $dyn,'use_on_equal_length'?: BOOLEAN,'start_percent'?: FLOAT,'guarantee_steps'?: INT,'prev_context'?: CONTEXT_OPTIONS,'view_opts'?: VIEW_OPTS
        }){
            super(ctx);

            super.$$link("context_length", opts['context_length']??tmp["ADE_StandardUniformContextOptions"].defaults['context_length'])
super.$$link("context_stride", opts['context_stride']??tmp["ADE_StandardUniformContextOptions"].defaults['context_stride'])
super.$$link("context_overlap", opts['context_overlap']??tmp["ADE_StandardUniformContextOptions"].defaults['context_overlap'])
super.$$link("fuse_method", opts['fuse_method'])
super.$$link("use_on_equal_length", opts['use_on_equal_length']??tmp["ADE_StandardUniformContextOptions"].defaults['use_on_equal_length'])
super.$$link("start_percent", opts['start_percent']??tmp["ADE_StandardUniformContextOptions"].defaults['start_percent'])
super.$$link("guarantee_steps", opts['guarantee_steps']??tmp["ADE_StandardUniformContextOptions"].defaults['guarantee_steps'])
super.$$link("prev_context", opts['prev_context'])
super.$$link("view_opts", opts['view_opts'])
}

        static defaults = {
    'context_length':  16,
'context_stride':  1,
'context_overlap':  4,
'use_on_equal_length':  false,
'start_percent':  0,
'guarantee_steps':  1
}
        protected override $$type(){
            return "ADE_StandardUniformContextOptions"
        }
},

    /**
     * Context Options◆Looped Uniform 🎭🅐🅓 from Animate Diff 🎭🅐🅓/context opts
     * @desc 
    */
    "ADE_LoopedUniformContextOptions" : class extends Node{
        //Setters
        //set 'context_length'(value : INT)  { super.$$link(0, value) } 
//set 'context_stride'(value : INT)  { super.$$link(1, value) } 
//set 'context_overlap'(value : INT)  { super.$$link(2, value) } 
//set 'closed_loop'(value : BOOLEAN)  { super.$$link(3, value) } 
//set 'fuse_method'(value : 'pyramid'|'flat'|'delayed reverse sawtooth'|'pyramid-sigma'|'pyramid-sigma inverse'|'gauss-sigma'|'gauss-sigma inverse'|'random'| $dyn)  { super.$$link(4, value) } 
//set 'use_on_equal_length'(value : BOOLEAN)  { super.$$link(5, value) } 
//set 'start_percent'(value : FLOAT)  { super.$$link(6, value) } 
//set 'guarantee_steps'(value : INT)  { super.$$link(7, value) } 
//set 'prev_context'(value : CONTEXT_OPTIONS)  { super.$$link(8, value) } 
//set 'view_opts'(value : VIEW_OPTS)  { super.$$link(9, value) } 

        //Getters
        get 'CONTEXT_OPTS'() : CONTEXT_OPTIONS { return [this.$uid.toString(), 0]  as unknown as CONTEXT_OPTIONS; }

        /**
          * Constructor
		 * @param opts.context_length default: 16 max: 128 min: 1
		 * @param opts.context_stride default: 1 max: 32 min: 1
		 * @param opts.context_overlap default: 4
		 * @param opts.closed_loop
		 * @param opts.fuse_method
		 * @param opts.use_on_equal_length
		 * @param opts.start_percent step: 0.001
		 * @param opts.guarantee_steps default: 1
		 * @param opts.prev_context
		 * @param opts.view_opts}
        */
        constructor(opts:{
            'context_length'?: INT,'context_stride'?: INT,'context_overlap'?: INT,'closed_loop'?: BOOLEAN,'fuse_method'?: 'pyramid'|'flat'|'delayed reverse sawtooth'|'pyramid-sigma'|'pyramid-sigma inverse'|'gauss-sigma'|'gauss-sigma inverse'|'random'| $dyn,'use_on_equal_length'?: BOOLEAN,'start_percent'?: FLOAT,'guarantee_steps'?: INT,'prev_context'?: CONTEXT_OPTIONS,'view_opts'?: VIEW_OPTS
        }){
            super(ctx);

            super.$$link("context_length", opts['context_length']??tmp["ADE_LoopedUniformContextOptions"].defaults['context_length'])
super.$$link("context_stride", opts['context_stride']??tmp["ADE_LoopedUniformContextOptions"].defaults['context_stride'])
super.$$link("context_overlap", opts['context_overlap']??tmp["ADE_LoopedUniformContextOptions"].defaults['context_overlap'])
super.$$link("closed_loop", opts['closed_loop']??tmp["ADE_LoopedUniformContextOptions"].defaults['closed_loop'])
super.$$link("fuse_method", opts['fuse_method'])
super.$$link("use_on_equal_length", opts['use_on_equal_length']??tmp["ADE_LoopedUniformContextOptions"].defaults['use_on_equal_length'])
super.$$link("start_percent", opts['start_percent']??tmp["ADE_LoopedUniformContextOptions"].defaults['start_percent'])
super.$$link("guarantee_steps", opts['guarantee_steps']??tmp["ADE_LoopedUniformContextOptions"].defaults['guarantee_steps'])
super.$$link("prev_context", opts['prev_context'])
super.$$link("view_opts", opts['view_opts'])
}

        static defaults = {
    'context_length':  16,
'context_stride':  1,
'context_overlap':  4,
'closed_loop':  false,
'use_on_equal_length':  false,
'start_percent':  0,
'guarantee_steps':  1
}
        protected override $$type(){
            return "ADE_LoopedUniformContextOptions"
        }
},

    /**
     * Context Options◆Views Only [VRAM⇈] 🎭🅐🅓 from Animate Diff 🎭🅐🅓/context opts
     * @desc 
    */
    "ADE_ViewsOnlyContextOptions" : class extends Node{
        //Setters
        //set 'view_opts_req'(value : VIEW_OPTS)  { super.$$link(0, value) } 
//set 'start_percent'(value : FLOAT)  { super.$$link(1, value) } 
//set 'guarantee_steps'(value : INT)  { super.$$link(2, value) } 
//set 'prev_context'(value : CONTEXT_OPTIONS)  { super.$$link(3, value) } 

        //Getters
        get 'CONTEXT_OPTS'() : CONTEXT_OPTIONS { return [this.$uid.toString(), 0]  as unknown as CONTEXT_OPTIONS; }

        /**
          * Constructor
		 * @param opts.view_opts_req
		 * @param opts.start_percent step: 0.001
		 * @param opts.guarantee_steps default: 1
		 * @param opts.prev_context}
        */
        constructor(opts:{
            'view_opts_req': VIEW_OPTS,'start_percent'?: FLOAT,'guarantee_steps'?: INT,'prev_context'?: CONTEXT_OPTIONS
        }){
            super(ctx);

            super.$$link("view_opts_req", opts['view_opts_req'])
super.$$link("start_percent", opts['start_percent']??tmp["ADE_ViewsOnlyContextOptions"].defaults['start_percent'])
super.$$link("guarantee_steps", opts['guarantee_steps']??tmp["ADE_ViewsOnlyContextOptions"].defaults['guarantee_steps'])
super.$$link("prev_context", opts['prev_context'])
}

        static defaults = {
    'start_percent':  0,
'guarantee_steps':  1
}
        protected override $$type(){
            return "ADE_ViewsOnlyContextOptions"
        }
},

    /**
     * Context Options◆Batched [Non-AD] 🎭🅐🅓 from Animate Diff 🎭🅐🅓/context opts
     * @desc 
    */
    "ADE_BatchedContextOptions" : class extends Node{
        //Setters
        //set 'context_length'(value : INT)  { super.$$link(0, value) } 
//set 'start_percent'(value : FLOAT)  { super.$$link(1, value) } 
//set 'guarantee_steps'(value : INT)  { super.$$link(2, value) } 
//set 'prev_context'(value : CONTEXT_OPTIONS)  { super.$$link(3, value) } 

        //Getters
        get 'CONTEXT_OPTS'() : CONTEXT_OPTIONS { return [this.$uid.toString(), 0]  as unknown as CONTEXT_OPTIONS; }

        /**
          * Constructor
		 * @param opts.context_length default: 16 max: 128 min: 1
		 * @param opts.start_percent step: 0.001
		 * @param opts.guarantee_steps default: 1
		 * @param opts.prev_context}
        */
        constructor(opts:{
            'context_length'?: INT,'start_percent'?: FLOAT,'guarantee_steps'?: INT,'prev_context'?: CONTEXT_OPTIONS
        }){
            super(ctx);

            super.$$link("context_length", opts['context_length']??tmp["ADE_BatchedContextOptions"].defaults['context_length'])
super.$$link("start_percent", opts['start_percent']??tmp["ADE_BatchedContextOptions"].defaults['start_percent'])
super.$$link("guarantee_steps", opts['guarantee_steps']??tmp["ADE_BatchedContextOptions"].defaults['guarantee_steps'])
super.$$link("prev_context", opts['prev_context'])
}

        static defaults = {
    'context_length':  16,
'start_percent':  0,
'guarantee_steps':  1
}
        protected override $$type(){
            return "ADE_BatchedContextOptions"
        }
},

    /**
     * Context Options◆Looped Uniform 🎭🅐🅓 from 
     * @desc 
    */
    "ADE_AnimateDiffUniformContextOptions" : class extends Node{
        //Setters
        //set 'context_length'(value : INT)  { super.$$link(0, value) } 
//set 'context_stride'(value : INT)  { super.$$link(1, value) } 
//set 'context_overlap'(value : INT)  { super.$$link(2, value) } 
//set 'context_schedule'(value : 'uniform'| $dyn)  { super.$$link(3, value) } 
//set 'closed_loop'(value : BOOLEAN)  { super.$$link(4, value) } 
//set 'fuse_method'(value : 'pyramid'|'flat'|'delayed reverse sawtooth'|'pyramid-sigma'|'pyramid-sigma inverse'|'gauss-sigma'|'gauss-sigma inverse'|'random'| $dyn)  { super.$$link(5, value) } 
//set 'use_on_equal_length'(value : BOOLEAN)  { super.$$link(6, value) } 
//set 'start_percent'(value : FLOAT)  { super.$$link(7, value) } 
//set 'guarantee_steps'(value : INT)  { super.$$link(8, value) } 
//set 'prev_context'(value : CONTEXT_OPTIONS)  { super.$$link(9, value) } 
//set 'view_opts'(value : VIEW_OPTS)  { super.$$link(10, value) } 
//set 'deprecation_warning'(value : ADEWARN)  { super.$$link(11, value) } 

        //Getters
        get 'CONTEXT_OPTS'() : CONTEXT_OPTIONS { return [this.$uid.toString(), 0]  as unknown as CONTEXT_OPTIONS; }

        /**
          * Constructor
		 * @param opts.context_length default: 16 max: 128 min: 1
		 * @param opts.context_stride default: 1 max: 32 min: 1
		 * @param opts.context_overlap default: 4
		 * @param opts.context_schedule
		 * @param opts.closed_loop
		 * @param opts.fuse_method default: "flat"
		 * @param opts.use_on_equal_length
		 * @param opts.start_percent step: 0.001
		 * @param opts.guarantee_steps default: 1
		 * @param opts.prev_context
		 * @param opts.view_opts
		 * @param opts.deprecation_warning}
        */
        constructor(opts:{
            'context_length'?: INT,'context_stride'?: INT,'context_overlap'?: INT,'context_schedule': 'uniform'| $dyn,'closed_loop'?: BOOLEAN,'fuse_method'?: 'pyramid'|'flat'|'delayed reverse sawtooth'|'pyramid-sigma'|'pyramid-sigma inverse'|'gauss-sigma'|'gauss-sigma inverse'|'random'| $dyn,'use_on_equal_length'?: BOOLEAN,'start_percent'?: FLOAT,'guarantee_steps'?: INT,'prev_context'?: CONTEXT_OPTIONS,'view_opts'?: VIEW_OPTS,'deprecation_warning'?: ADEWARN
        }){
            super(ctx);

            super.$$link("context_length", opts['context_length']??tmp["ADE_AnimateDiffUniformContextOptions"].defaults['context_length'])
super.$$link("context_stride", opts['context_stride']??tmp["ADE_AnimateDiffUniformContextOptions"].defaults['context_stride'])
super.$$link("context_overlap", opts['context_overlap']??tmp["ADE_AnimateDiffUniformContextOptions"].defaults['context_overlap'])
super.$$link("context_schedule", opts['context_schedule'])
super.$$link("closed_loop", opts['closed_loop']??tmp["ADE_AnimateDiffUniformContextOptions"].defaults['closed_loop'])
super.$$link("fuse_method", opts['fuse_method']??tmp["ADE_AnimateDiffUniformContextOptions"].defaults['fuse_method'])
super.$$link("use_on_equal_length", opts['use_on_equal_length']??tmp["ADE_AnimateDiffUniformContextOptions"].defaults['use_on_equal_length'])
super.$$link("start_percent", opts['start_percent']??tmp["ADE_AnimateDiffUniformContextOptions"].defaults['start_percent'])
super.$$link("guarantee_steps", opts['guarantee_steps']??tmp["ADE_AnimateDiffUniformContextOptions"].defaults['guarantee_steps'])
super.$$link("prev_context", opts['prev_context'])
super.$$link("view_opts", opts['view_opts'])
super.$$link("deprecation_warning", opts['deprecation_warning'])
}

        static defaults = {
    'context_length':  16,
'context_stride':  1,
'context_overlap':  4,
'closed_loop':  false,
'fuse_method':  "flat",
'use_on_equal_length':  false,
'start_percent':  0,
'guarantee_steps':  1
}
        protected override $$type(){
            return "ADE_AnimateDiffUniformContextOptions"
        }
},

    /**
     * Visualize Context Options (K.) 🎭🅐🅓 from Animate Diff 🎭🅐🅓/context opts/visualize
     * @desc 
    */
    "ADE_VisualizeContextOptionsK" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'context_opts'(value : CONTEXT_OPTIONS)  { super.$$link(1, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(2, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn)  { super.$$link(3, value) } 
//set 'visual_width'(value : INT)  { super.$$link(4, value) } 
//set 'latents_length'(value : INT)  { super.$$link(5, value) } 
//set 'steps'(value : INT)  { super.$$link(6, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(7, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.context_opts
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.visual_width default: 1440 max: 16384 min: 32
		 * @param opts.latents_length default: 32 max: 9007199254740991 min: 1
		 * @param opts.steps default: 20
		 * @param opts.denoise default: 1 step: 0.01}
        */
        constructor(opts:{
            'model': MODEL,'context_opts': CONTEXT_OPTIONS,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn,'visual_width'?: INT,'latents_length'?: INT,'steps'?: INT,'denoise'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("context_opts", opts['context_opts'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("visual_width", opts['visual_width']??tmp["ADE_VisualizeContextOptionsK"].defaults['visual_width'])
super.$$link("latents_length", opts['latents_length']??tmp["ADE_VisualizeContextOptionsK"].defaults['latents_length'])
super.$$link("steps", opts['steps']??tmp["ADE_VisualizeContextOptionsK"].defaults['steps'])
super.$$link("denoise", opts['denoise']??tmp["ADE_VisualizeContextOptionsK"].defaults['denoise'])
}

        static defaults = {
    'visual_width':  1440,
'latents_length':  32,
'steps':  20,
'denoise':  1
}
        protected override $$type(){
            return "ADE_VisualizeContextOptionsK"
        }
},

    /**
     * Visualize Context Options (K.Adv.) 🎭🅐🅓 from Animate Diff 🎭🅐🅓/context opts/visualize
     * @desc 
    */
    "ADE_VisualizeContextOptionsKAdv" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'context_opts'(value : CONTEXT_OPTIONS)  { super.$$link(1, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(2, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn)  { super.$$link(3, value) } 
//set 'visual_width'(value : INT)  { super.$$link(4, value) } 
//set 'latents_length'(value : INT)  { super.$$link(5, value) } 
//set 'steps'(value : INT)  { super.$$link(6, value) } 
//set 'start_step'(value : INT)  { super.$$link(7, value) } 
//set 'end_step'(value : INT)  { super.$$link(8, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.context_opts
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.visual_width default: 1440 max: 16384 min: 32
		 * @param opts.latents_length default: 32 max: 9007199254740991 min: 1
		 * @param opts.steps default: 20
		 * @param opts.start_step
		 * @param opts.end_step default: 20 max: 9007199254740991 min: 1}
        */
        constructor(opts:{
            'model': MODEL,'context_opts': CONTEXT_OPTIONS,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn,'visual_width'?: INT,'latents_length'?: INT,'steps'?: INT,'start_step'?: INT,'end_step'?: INT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("context_opts", opts['context_opts'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("visual_width", opts['visual_width']??tmp["ADE_VisualizeContextOptionsKAdv"].defaults['visual_width'])
super.$$link("latents_length", opts['latents_length']??tmp["ADE_VisualizeContextOptionsKAdv"].defaults['latents_length'])
super.$$link("steps", opts['steps']??tmp["ADE_VisualizeContextOptionsKAdv"].defaults['steps'])
super.$$link("start_step", opts['start_step']??tmp["ADE_VisualizeContextOptionsKAdv"].defaults['start_step'])
super.$$link("end_step", opts['end_step']??tmp["ADE_VisualizeContextOptionsKAdv"].defaults['end_step'])
}

        static defaults = {
    'visual_width':  1440,
'latents_length':  32,
'steps':  20,
'start_step':  0,
'end_step':  20
}
        protected override $$type(){
            return "ADE_VisualizeContextOptionsKAdv"
        }
},

    /**
     * Visualize Context Options (S.Cus.) 🎭🅐🅓 from Animate Diff 🎭🅐🅓/context opts/visualize
     * @desc 
    */
    "ADE_VisualizeContextOptionsSCustom" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'context_opts'(value : CONTEXT_OPTIONS)  { super.$$link(1, value) } 
//set 'sigmas'(value : SIGMAS)  { super.$$link(2, value) } 
//set 'visual_width'(value : INT)  { super.$$link(3, value) } 
//set 'latents_length'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.context_opts
		 * @param opts.sigmas
		 * @param opts.visual_width default: 1440 max: 16384 min: 32
		 * @param opts.latents_length default: 32 max: 9007199254740991 min: 1}
        */
        constructor(opts:{
            'model': MODEL,'context_opts': CONTEXT_OPTIONS,'sigmas': SIGMAS,'visual_width'?: INT,'latents_length'?: INT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("context_opts", opts['context_opts'])
super.$$link("sigmas", opts['sigmas'])
super.$$link("visual_width", opts['visual_width']??tmp["ADE_VisualizeContextOptionsSCustom"].defaults['visual_width'])
super.$$link("latents_length", opts['latents_length']??tmp["ADE_VisualizeContextOptionsSCustom"].defaults['latents_length'])
}

        static defaults = {
    'visual_width':  1440,
'latents_length':  32
}
        protected override $$type(){
            return "ADE_VisualizeContextOptionsSCustom"
        }
},

    /**
     * View Options◆Standard Static 🎭🅐🅓 from Animate Diff 🎭🅐🅓/context opts/view opts
     * @desc 
    */
    "ADE_StandardStaticViewOptions" : class extends Node{
        //Setters
        //set 'view_length'(value : INT)  { super.$$link(0, value) } 
//set 'view_overlap'(value : INT)  { super.$$link(1, value) } 
//set 'fuse_method'(value : 'pyramid'|'flat'|'delayed reverse sawtooth'|'pyramid-sigma'|'pyramid-sigma inverse'|'gauss-sigma'|'gauss-sigma inverse'|'random'| $dyn)  { super.$$link(2, value) } 

        //Getters
        get 'VIEW_OPTS'() : VIEW_OPTS { return [this.$uid.toString(), 0]  as unknown as VIEW_OPTS; }

        /**
          * Constructor
		 * @param opts.view_length default: 16 max: 128 min: 1
		 * @param opts.view_overlap default: 4
		 * @param opts.fuse_method}
        */
        constructor(opts:{
            'view_length'?: INT,'view_overlap'?: INT,'fuse_method'?: 'pyramid'|'flat'|'delayed reverse sawtooth'|'pyramid-sigma'|'pyramid-sigma inverse'|'gauss-sigma'|'gauss-sigma inverse'|'random'| $dyn
        }){
            super(ctx);

            super.$$link("view_length", opts['view_length']??tmp["ADE_StandardStaticViewOptions"].defaults['view_length'])
super.$$link("view_overlap", opts['view_overlap']??tmp["ADE_StandardStaticViewOptions"].defaults['view_overlap'])
super.$$link("fuse_method", opts['fuse_method'])
}

        static defaults = {
    'view_length':  16,
'view_overlap':  4
}
        protected override $$type(){
            return "ADE_StandardStaticViewOptions"
        }
},

    /**
     * View Options◆Standard Uniform 🎭🅐🅓 from Animate Diff 🎭🅐🅓/context opts/view opts
     * @desc 
    */
    "ADE_StandardUniformViewOptions" : class extends Node{
        //Setters
        //set 'view_length'(value : INT)  { super.$$link(0, value) } 
//set 'view_stride'(value : INT)  { super.$$link(1, value) } 
//set 'view_overlap'(value : INT)  { super.$$link(2, value) } 
//set 'fuse_method'(value : 'pyramid'|'flat'|'delayed reverse sawtooth'|'pyramid-sigma'|'pyramid-sigma inverse'|'gauss-sigma'|'gauss-sigma inverse'|'random'| $dyn)  { super.$$link(3, value) } 

        //Getters
        get 'VIEW_OPTS'() : VIEW_OPTS { return [this.$uid.toString(), 0]  as unknown as VIEW_OPTS; }

        /**
          * Constructor
		 * @param opts.view_length default: 16 max: 128 min: 1
		 * @param opts.view_stride default: 1 max: 32 min: 1
		 * @param opts.view_overlap default: 4
		 * @param opts.fuse_method}
        */
        constructor(opts:{
            'view_length'?: INT,'view_stride'?: INT,'view_overlap'?: INT,'fuse_method'?: 'pyramid'|'flat'|'delayed reverse sawtooth'|'pyramid-sigma'|'pyramid-sigma inverse'|'gauss-sigma'|'gauss-sigma inverse'|'random'| $dyn
        }){
            super(ctx);

            super.$$link("view_length", opts['view_length']??tmp["ADE_StandardUniformViewOptions"].defaults['view_length'])
super.$$link("view_stride", opts['view_stride']??tmp["ADE_StandardUniformViewOptions"].defaults['view_stride'])
super.$$link("view_overlap", opts['view_overlap']??tmp["ADE_StandardUniformViewOptions"].defaults['view_overlap'])
super.$$link("fuse_method", opts['fuse_method'])
}

        static defaults = {
    'view_length':  16,
'view_stride':  1,
'view_overlap':  4
}
        protected override $$type(){
            return "ADE_StandardUniformViewOptions"
        }
},

    /**
     * View Options◆Looped Uniform 🎭🅐🅓 from Animate Diff 🎭🅐🅓/context opts/view opts
     * @desc 
    */
    "ADE_LoopedUniformViewOptions" : class extends Node{
        //Setters
        //set 'view_length'(value : INT)  { super.$$link(0, value) } 
//set 'view_stride'(value : INT)  { super.$$link(1, value) } 
//set 'view_overlap'(value : INT)  { super.$$link(2, value) } 
//set 'closed_loop'(value : BOOLEAN)  { super.$$link(3, value) } 
//set 'fuse_method'(value : 'pyramid'|'flat'|'delayed reverse sawtooth'|'pyramid-sigma'|'pyramid-sigma inverse'|'gauss-sigma'|'gauss-sigma inverse'|'random'| $dyn)  { super.$$link(4, value) } 
//set 'use_on_equal_length'(value : BOOLEAN)  { super.$$link(5, value) } 

        //Getters
        get 'VIEW_OPTS'() : VIEW_OPTS { return [this.$uid.toString(), 0]  as unknown as VIEW_OPTS; }

        /**
          * Constructor
		 * @param opts.view_length default: 16 max: 128 min: 1
		 * @param opts.view_stride default: 1 max: 32 min: 1
		 * @param opts.view_overlap default: 4
		 * @param opts.closed_loop
		 * @param opts.fuse_method
		 * @param opts.use_on_equal_length}
        */
        constructor(opts:{
            'view_length'?: INT,'view_stride'?: INT,'view_overlap'?: INT,'closed_loop'?: BOOLEAN,'fuse_method'?: 'pyramid'|'flat'|'delayed reverse sawtooth'|'pyramid-sigma'|'pyramid-sigma inverse'|'gauss-sigma'|'gauss-sigma inverse'|'random'| $dyn,'use_on_equal_length'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("view_length", opts['view_length']??tmp["ADE_LoopedUniformViewOptions"].defaults['view_length'])
super.$$link("view_stride", opts['view_stride']??tmp["ADE_LoopedUniformViewOptions"].defaults['view_stride'])
super.$$link("view_overlap", opts['view_overlap']??tmp["ADE_LoopedUniformViewOptions"].defaults['view_overlap'])
super.$$link("closed_loop", opts['closed_loop']??tmp["ADE_LoopedUniformViewOptions"].defaults['closed_loop'])
super.$$link("fuse_method", opts['fuse_method'])
super.$$link("use_on_equal_length", opts['use_on_equal_length']??tmp["ADE_LoopedUniformViewOptions"].defaults['use_on_equal_length'])
}

        static defaults = {
    'view_length':  16,
'view_stride':  1,
'view_overlap':  4,
'closed_loop':  false,
'use_on_equal_length':  false
}
        protected override $$type(){
            return "ADE_LoopedUniformViewOptions"
        }
},

    /**
     * Set Context Extras 🎭🅐🅓 from Animate Diff 🎭🅐🅓/context opts/context extras
     * @desc 
    */
    "ADE_ContextExtras_Set" : class extends Node{
        //Setters
        //set 'context_opts'(value : CONTEXT_OPTIONS)  { super.$$link(0, value) } 
//set 'context_extras'(value : CONTEXT_EXTRAS)  { super.$$link(1, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(2, value) } 

        //Getters
        get 'CONTEXT_OPTS'() : CONTEXT_OPTIONS { return [this.$uid.toString(), 0]  as unknown as CONTEXT_OPTIONS; }

        /**
          * Constructor
		 * @param opts.context_opts
		 * @param opts.context_extras
		 * @param opts.autosize}
        */
        constructor(opts:{
            'context_opts': CONTEXT_OPTIONS,'context_extras': CONTEXT_EXTRAS,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("context_opts", opts['context_opts'])
super.$$link("context_extras", opts['context_extras'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ADE_ContextExtras_Set"
        }
},

    /**
     * Context Extras◆ContextRef 🎭🅐🅓 from Animate Diff 🎭🅐🅓/context opts/context extras
     * @desc 
    */
    "ADE_ContextExtras_ContextRef" : class extends Node{
        //Setters
        //set 'prev_extras'(value : CONTEXT_EXTRAS)  { super.$$link(0, value) } 
//set 'strength_multival'(value : MULTIVAL)  { super.$$link(1, value) } 
//set 'contextref_mode'(value : CONTEXTREF_MODE)  { super.$$link(2, value) } 
//set 'contextref_tune'(value : CONTEXTREF_TUNE)  { super.$$link(3, value) } 
//set 'contextref_kf'(value : CONTEXTREF_KEYFRAME)  { super.$$link(4, value) } 
//set 'start_percent'(value : FLOAT)  { super.$$link(5, value) } 
//set 'end_percent'(value : FLOAT)  { super.$$link(6, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(7, value) } 

        //Getters
        get 'CONTEXT_EXTRAS'() : CONTEXT_EXTRAS { return [this.$uid.toString(), 0]  as unknown as CONTEXT_EXTRAS; }

        /**
          * Constructor
		 * @param opts.prev_extras
		 * @param opts.strength_multival
		 * @param opts.contextref_mode
		 * @param opts.contextref_tune
		 * @param opts.contextref_kf
		 * @param opts.start_percent step: 0.001
		 * @param opts.end_percent default: 0.25 step: 0.001
		 * @param opts.autosize}
        */
        constructor(opts:{
            'prev_extras'?: CONTEXT_EXTRAS,'strength_multival'?: MULTIVAL,'contextref_mode'?: CONTEXTREF_MODE,'contextref_tune'?: CONTEXTREF_TUNE,'contextref_kf'?: CONTEXTREF_KEYFRAME,'start_percent'?: FLOAT,'end_percent'?: FLOAT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("prev_extras", opts['prev_extras'])
super.$$link("strength_multival", opts['strength_multival'])
super.$$link("contextref_mode", opts['contextref_mode'])
super.$$link("contextref_tune", opts['contextref_tune'])
super.$$link("contextref_kf", opts['contextref_kf'])
super.$$link("start_percent", opts['start_percent']??tmp["ADE_ContextExtras_ContextRef"].defaults['start_percent'])
super.$$link("end_percent", opts['end_percent']??tmp["ADE_ContextExtras_ContextRef"].defaults['end_percent'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'start_percent':  0,
'end_percent':  0.25
}
        protected override $$type(){
            return "ADE_ContextExtras_ContextRef"
        }
},

    /**
     * ContextRef Mode◆First 🎭🅐🅓 from Animate Diff 🎭🅐🅓/context opts/context extras/contextref
     * @desc 
    */
    "ADE_ContextExtras_ContextRef_ModeFirst" : class extends Node{
        //Setters
        //set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(0, value) } 

        //Getters
        get 'CONTEXTREF_MODE'() : CONTEXTREF_MODE { return [this.$uid.toString(), 0]  as unknown as CONTEXTREF_MODE; }

        /**
          * Constructor
		 * @param opts.autosize}
        */
        constructor(opts:{
            'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ADE_ContextExtras_ContextRef_ModeFirst"
        }
},

    /**
     * ContextRef Mode◆Sliding 🎭🅐🅓 from Animate Diff 🎭🅐🅓/context opts/context extras/contextref
     * @desc 
    */
    "ADE_ContextExtras_ContextRef_ModeSliding" : class extends Node{
        //Setters
        //set 'sliding_width'(value : INT)  { super.$$link(0, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(1, value) } 

        //Getters
        get 'CONTEXTREF_MODE'() : CONTEXTREF_MODE { return [this.$uid.toString(), 0]  as unknown as CONTEXTREF_MODE; }

        /**
          * Constructor
		 * @param opts.sliding_width default: 2 max: 9007199254740991 min: 2 step: 1
		 * @param opts.autosize}
        */
        constructor(opts:{
            'sliding_width'?: INT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("sliding_width", opts['sliding_width']??tmp["ADE_ContextExtras_ContextRef_ModeSliding"].defaults['sliding_width'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'sliding_width':  2
}
        protected override $$type(){
            return "ADE_ContextExtras_ContextRef_ModeSliding"
        }
},

    /**
     * ContextRef Mode◆Indexes 🎭🅐🅓 from Animate Diff 🎭🅐🅓/context opts/context extras/contextref
     * @desc 
    */
    "ADE_ContextExtras_ContextRef_ModeIndexes" : class extends Node{
        //Setters
        //set 'switch_on_idxs'(value : STRING)  { super.$$link(0, value) } 
//set 'always_include_0'(value : BOOLEAN)  { super.$$link(1, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(2, value) } 

        //Getters
        get 'CONTEXTREF_MODE'() : CONTEXTREF_MODE { return [this.$uid.toString(), 0]  as unknown as CONTEXTREF_MODE; }

        /**
          * Constructor
		 * @param opts.switch_on_idxs
		 * @param opts.always_include_0 default: true
		 * @param opts.autosize}
        */
        constructor(opts:{
            'switch_on_idxs'?: STRING,'always_include_0'?: BOOLEAN,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("switch_on_idxs", opts['switch_on_idxs']??tmp["ADE_ContextExtras_ContextRef_ModeIndexes"].defaults['switch_on_idxs'])
super.$$link("always_include_0", opts['always_include_0']??tmp["ADE_ContextExtras_ContextRef_ModeIndexes"].defaults['always_include_0'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'switch_on_idxs':  "",
'always_include_0':  true
}
        protected override $$type(){
            return "ADE_ContextExtras_ContextRef_ModeIndexes"
        }
},

    /**
     * ContextRef Tune◆Attn 🎭🅐🅓 from Animate Diff 🎭🅐🅓/context opts/context extras/contextref
     * @desc 
    */
    "ADE_ContextExtras_ContextRef_TuneAttn" : class extends Node{
        //Setters
        //set 'attn_style_fidelity'(value : FLOAT)  { super.$$link(0, value) } 
//set 'attn_ref_weight'(value : FLOAT)  { super.$$link(1, value) } 
//set 'attn_strength'(value : FLOAT)  { super.$$link(2, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(3, value) } 

        //Getters
        get 'CONTEXTREF_TUNE'() : CONTEXTREF_TUNE { return [this.$uid.toString(), 0]  as unknown as CONTEXTREF_TUNE; }

        /**
          * Constructor
		 * @param opts.attn_style_fidelity default: 1 step: 0.01
		 * @param opts.attn_ref_weight default: 1 step: 0.01
		 * @param opts.attn_strength default: 1 step: 0.01
		 * @param opts.autosize}
        */
        constructor(opts:{
            'attn_style_fidelity'?: FLOAT,'attn_ref_weight'?: FLOAT,'attn_strength'?: FLOAT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("attn_style_fidelity", opts['attn_style_fidelity']??tmp["ADE_ContextExtras_ContextRef_TuneAttn"].defaults['attn_style_fidelity'])
super.$$link("attn_ref_weight", opts['attn_ref_weight']??tmp["ADE_ContextExtras_ContextRef_TuneAttn"].defaults['attn_ref_weight'])
super.$$link("attn_strength", opts['attn_strength']??tmp["ADE_ContextExtras_ContextRef_TuneAttn"].defaults['attn_strength'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'attn_style_fidelity':  1,
'attn_ref_weight':  1,
'attn_strength':  1
}
        protected override $$type(){
            return "ADE_ContextExtras_ContextRef_TuneAttn"
        }
},

    /**
     * ContextRef Tune◆Attn+Adain 🎭🅐🅓 from Animate Diff 🎭🅐🅓/context opts/context extras/contextref
     * @desc 
    */
    "ADE_ContextExtras_ContextRef_TuneAttnAdain" : class extends Node{
        //Setters
        //set 'attn_style_fidelity'(value : FLOAT)  { super.$$link(0, value) } 
//set 'attn_ref_weight'(value : FLOAT)  { super.$$link(1, value) } 
//set 'attn_strength'(value : FLOAT)  { super.$$link(2, value) } 
//set 'adain_style_fidelity'(value : FLOAT)  { super.$$link(3, value) } 
//set 'adain_ref_weight'(value : FLOAT)  { super.$$link(4, value) } 
//set 'adain_strength'(value : FLOAT)  { super.$$link(5, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(6, value) } 

        //Getters
        get 'CONTEXTREF_TUNE'() : CONTEXTREF_TUNE { return [this.$uid.toString(), 0]  as unknown as CONTEXTREF_TUNE; }

        /**
          * Constructor
		 * @param opts.attn_style_fidelity default: 1 step: 0.01
		 * @param opts.attn_ref_weight default: 1 step: 0.01
		 * @param opts.attn_strength default: 1 step: 0.01
		 * @param opts.adain_style_fidelity default: 1 step: 0.01
		 * @param opts.adain_ref_weight default: 1 step: 0.01
		 * @param opts.adain_strength default: 1 step: 0.01
		 * @param opts.autosize}
        */
        constructor(opts:{
            'attn_style_fidelity'?: FLOAT,'attn_ref_weight'?: FLOAT,'attn_strength'?: FLOAT,'adain_style_fidelity'?: FLOAT,'adain_ref_weight'?: FLOAT,'adain_strength'?: FLOAT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("attn_style_fidelity", opts['attn_style_fidelity']??tmp["ADE_ContextExtras_ContextRef_TuneAttnAdain"].defaults['attn_style_fidelity'])
super.$$link("attn_ref_weight", opts['attn_ref_weight']??tmp["ADE_ContextExtras_ContextRef_TuneAttnAdain"].defaults['attn_ref_weight'])
super.$$link("attn_strength", opts['attn_strength']??tmp["ADE_ContextExtras_ContextRef_TuneAttnAdain"].defaults['attn_strength'])
super.$$link("adain_style_fidelity", opts['adain_style_fidelity']??tmp["ADE_ContextExtras_ContextRef_TuneAttnAdain"].defaults['adain_style_fidelity'])
super.$$link("adain_ref_weight", opts['adain_ref_weight']??tmp["ADE_ContextExtras_ContextRef_TuneAttnAdain"].defaults['adain_ref_weight'])
super.$$link("adain_strength", opts['adain_strength']??tmp["ADE_ContextExtras_ContextRef_TuneAttnAdain"].defaults['adain_strength'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'attn_style_fidelity':  1,
'attn_ref_weight':  1,
'attn_strength':  1,
'adain_style_fidelity':  1,
'adain_ref_weight':  1,
'adain_strength':  1
}
        protected override $$type(){
            return "ADE_ContextExtras_ContextRef_TuneAttnAdain"
        }
},

    /**
     * ContextRef Keyframe 🎭🅐🅓 from Animate Diff 🎭🅐🅓/context opts/context extras/contextref
     * @desc 
    */
    "ADE_ContextExtras_ContextRef_Keyframe" : class extends Node{
        //Setters
        //set 'prev_kf'(value : CONTEXTREF_KEYFRAME)  { super.$$link(0, value) } 
//set 'mult_multival'(value : MULTIVAL)  { super.$$link(1, value) } 
//set 'mode_replace'(value : CONTEXTREF_MODE)  { super.$$link(2, value) } 
//set 'tune_replace'(value : CONTEXTREF_TUNE)  { super.$$link(3, value) } 
//set 'mult'(value : FLOAT)  { super.$$link(4, value) } 
//set 'start_percent'(value : FLOAT)  { super.$$link(5, value) } 
//set 'guarantee_steps'(value : INT)  { super.$$link(6, value) } 
//set 'inherit_missing'(value : BOOLEAN)  { super.$$link(7, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(8, value) } 

        //Getters
        get 'CONTEXTREF_KF'() : CONTEXTREF_KEYFRAME { return [this.$uid.toString(), 0]  as unknown as CONTEXTREF_KEYFRAME; }

        /**
          * Constructor
		 * @param opts.prev_kf
		 * @param opts.mult_multival
		 * @param opts.mode_replace
		 * @param opts.tune_replace
		 * @param opts.mult default: 1 step: 0.001
		 * @param opts.start_percent step: 0.001
		 * @param opts.guarantee_steps default: 1
		 * @param opts.inherit_missing default: true
		 * @param opts.autosize}
        */
        constructor(opts:{
            'prev_kf'?: CONTEXTREF_KEYFRAME,'mult_multival'?: MULTIVAL,'mode_replace'?: CONTEXTREF_MODE,'tune_replace'?: CONTEXTREF_TUNE,'mult'?: FLOAT,'start_percent'?: FLOAT,'guarantee_steps'?: INT,'inherit_missing'?: BOOLEAN,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("prev_kf", opts['prev_kf'])
super.$$link("mult_multival", opts['mult_multival'])
super.$$link("mode_replace", opts['mode_replace'])
super.$$link("tune_replace", opts['tune_replace'])
super.$$link("mult", opts['mult']??tmp["ADE_ContextExtras_ContextRef_Keyframe"].defaults['mult'])
super.$$link("start_percent", opts['start_percent']??tmp["ADE_ContextExtras_ContextRef_Keyframe"].defaults['start_percent'])
super.$$link("guarantee_steps", opts['guarantee_steps']??tmp["ADE_ContextExtras_ContextRef_Keyframe"].defaults['guarantee_steps'])
super.$$link("inherit_missing", opts['inherit_missing']??tmp["ADE_ContextExtras_ContextRef_Keyframe"].defaults['inherit_missing'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'mult':  1,
'start_percent':  0,
'guarantee_steps':  1,
'inherit_missing':  true
}
        protected override $$type(){
            return "ADE_ContextExtras_ContextRef_Keyframe"
        }
},

    /**
     * ContextRef Keyframes Interp. 🎭🅐🅓 from Animate Diff 🎭🅐🅓/context opts/context extras/contextref
     * @desc 
    */
    "ADE_ContextExtras_ContextRef_KeyframeInterpolation" : class extends Node{
        //Setters
        //set 'start_percent'(value : FLOAT)  { super.$$link(0, value) } 
//set 'end_percent'(value : FLOAT)  { super.$$link(1, value) } 
//set 'mult_start'(value : FLOAT)  { super.$$link(2, value) } 
//set 'mult_end'(value : FLOAT)  { super.$$link(3, value) } 
//set 'interpolation'(value : 'linear'|'ease_in'|'ease_out'|'ease_in_out'| $dyn)  { super.$$link(4, value) } 
//set 'intervals'(value : INT)  { super.$$link(5, value) } 
//set 'inherit_missing'(value : BOOLEAN)  { super.$$link(6, value) } 
//set 'print_keyframes'(value : BOOLEAN)  { super.$$link(7, value) } 
//set 'prev_kf'(value : CONTEXTREF_KEYFRAME)  { super.$$link(8, value) } 
//set 'mult_multival'(value : MULTIVAL)  { super.$$link(9, value) } 
//set 'mode_replace'(value : CONTEXTREF_MODE)  { super.$$link(10, value) } 
//set 'tune_replace'(value : CONTEXTREF_TUNE)  { super.$$link(11, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(12, value) } 

        //Getters
        get 'CONTEXTREF_KF'() : CONTEXTREF_KEYFRAME { return [this.$uid.toString(), 0]  as unknown as CONTEXTREF_KEYFRAME; }

        /**
          * Constructor
		 * @param opts.start_percent step: 0.001
		 * @param opts.end_percent default: 1 step: 0.001
		 * @param opts.mult_start default: 1 step: 0.001
		 * @param opts.mult_end default: 1 step: 0.001
		 * @param opts.interpolation
		 * @param opts.intervals default: 50 max: 100 min: 2 step: 1
		 * @param opts.inherit_missing default: true
		 * @param opts.print_keyframes
		 * @param opts.prev_kf
		 * @param opts.mult_multival
		 * @param opts.mode_replace
		 * @param opts.tune_replace
		 * @param opts.autosize}
        */
        constructor(opts:{
            'start_percent'?: FLOAT,'end_percent'?: FLOAT,'mult_start'?: FLOAT,'mult_end'?: FLOAT,'interpolation': 'linear'|'ease_in'|'ease_out'|'ease_in_out'| $dyn,'intervals'?: INT,'inherit_missing'?: BOOLEAN,'print_keyframes'?: BOOLEAN,'prev_kf'?: CONTEXTREF_KEYFRAME,'mult_multival'?: MULTIVAL,'mode_replace'?: CONTEXTREF_MODE,'tune_replace'?: CONTEXTREF_TUNE,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("start_percent", opts['start_percent']??tmp["ADE_ContextExtras_ContextRef_KeyframeInterpolation"].defaults['start_percent'])
super.$$link("end_percent", opts['end_percent']??tmp["ADE_ContextExtras_ContextRef_KeyframeInterpolation"].defaults['end_percent'])
super.$$link("mult_start", opts['mult_start']??tmp["ADE_ContextExtras_ContextRef_KeyframeInterpolation"].defaults['mult_start'])
super.$$link("mult_end", opts['mult_end']??tmp["ADE_ContextExtras_ContextRef_KeyframeInterpolation"].defaults['mult_end'])
super.$$link("interpolation", opts['interpolation'])
super.$$link("intervals", opts['intervals']??tmp["ADE_ContextExtras_ContextRef_KeyframeInterpolation"].defaults['intervals'])
super.$$link("inherit_missing", opts['inherit_missing']??tmp["ADE_ContextExtras_ContextRef_KeyframeInterpolation"].defaults['inherit_missing'])
super.$$link("print_keyframes", opts['print_keyframes']??tmp["ADE_ContextExtras_ContextRef_KeyframeInterpolation"].defaults['print_keyframes'])
super.$$link("prev_kf", opts['prev_kf'])
super.$$link("mult_multival", opts['mult_multival'])
super.$$link("mode_replace", opts['mode_replace'])
super.$$link("tune_replace", opts['tune_replace'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'start_percent':  0,
'end_percent':  1,
'mult_start':  1,
'mult_end':  1,
'intervals':  50,
'inherit_missing':  true,
'print_keyframes':  false
}
        protected override $$type(){
            return "ADE_ContextExtras_ContextRef_KeyframeInterpolation"
        }
},

    /**
     * ContextRef Keyframes From List 🎭🅐🅓 from Animate Diff 🎭🅐🅓/context opts/context extras/contextref
     * @desc 
    */
    "ADE_ContextExtras_ContextRef_KeyframeFromList" : class extends Node{
        //Setters
        //set 'mults_float'(value : FLOAT)  { super.$$link(0, value) } 
//set 'start_percent'(value : FLOAT)  { super.$$link(1, value) } 
//set 'end_percent'(value : FLOAT)  { super.$$link(2, value) } 
//set 'inherit_missing'(value : BOOLEAN)  { super.$$link(3, value) } 
//set 'print_keyframes'(value : BOOLEAN)  { super.$$link(4, value) } 
//set 'prev_kf'(value : CONTEXTREF_KEYFRAME)  { super.$$link(5, value) } 
//set 'mult_multival'(value : MULTIVAL)  { super.$$link(6, value) } 
//set 'mode_replace'(value : CONTEXTREF_MODE)  { super.$$link(7, value) } 
//set 'tune_replace'(value : CONTEXTREF_TUNE)  { super.$$link(8, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(9, value) } 

        //Getters
        get 'CONTEXTREF_KF'() : CONTEXTREF_KEYFRAME { return [this.$uid.toString(), 0]  as unknown as CONTEXTREF_KEYFRAME; }

        /**
          * Constructor
		 * @param opts.mults_float default: -1 max: undefined min: -1 step: 0.001
		 * @param opts.start_percent step: 0.001
		 * @param opts.end_percent default: 1 step: 0.001
		 * @param opts.inherit_missing default: true
		 * @param opts.print_keyframes
		 * @param opts.prev_kf
		 * @param opts.mult_multival
		 * @param opts.mode_replace
		 * @param opts.tune_replace
		 * @param opts.autosize}
        */
        constructor(opts:{
            'mults_float'?: FLOAT,'start_percent'?: FLOAT,'end_percent'?: FLOAT,'inherit_missing'?: BOOLEAN,'print_keyframes'?: BOOLEAN,'prev_kf'?: CONTEXTREF_KEYFRAME,'mult_multival'?: MULTIVAL,'mode_replace'?: CONTEXTREF_MODE,'tune_replace'?: CONTEXTREF_TUNE,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("mults_float", opts['mults_float']??tmp["ADE_ContextExtras_ContextRef_KeyframeFromList"].defaults['mults_float'])
super.$$link("start_percent", opts['start_percent']??tmp["ADE_ContextExtras_ContextRef_KeyframeFromList"].defaults['start_percent'])
super.$$link("end_percent", opts['end_percent']??tmp["ADE_ContextExtras_ContextRef_KeyframeFromList"].defaults['end_percent'])
super.$$link("inherit_missing", opts['inherit_missing']??tmp["ADE_ContextExtras_ContextRef_KeyframeFromList"].defaults['inherit_missing'])
super.$$link("print_keyframes", opts['print_keyframes']??tmp["ADE_ContextExtras_ContextRef_KeyframeFromList"].defaults['print_keyframes'])
super.$$link("prev_kf", opts['prev_kf'])
super.$$link("mult_multival", opts['mult_multival'])
super.$$link("mode_replace", opts['mode_replace'])
super.$$link("tune_replace", opts['tune_replace'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'mults_float':  -1,
'start_percent':  0,
'end_percent':  1,
'inherit_missing':  true,
'print_keyframes':  false
}
        protected override $$type(){
            return "ADE_ContextExtras_ContextRef_KeyframeFromList"
        }
},

    /**
     * Context Extras◆NaiveReuse 🎭🅐🅓 from Animate Diff 🎭🅐🅓/context opts/context extras
     * @desc 
    */
    "ADE_ContextExtras_NaiveReuse" : class extends Node{
        //Setters
        //set 'prev_extras'(value : CONTEXT_EXTRAS)  { super.$$link(0, value) } 
//set 'strength_multival'(value : MULTIVAL)  { super.$$link(1, value) } 
//set 'naivereuse_kf'(value : NAIVEREUSE_KEYFRAME)  { super.$$link(2, value) } 
//set 'start_percent'(value : FLOAT)  { super.$$link(3, value) } 
//set 'end_percent'(value : FLOAT)  { super.$$link(4, value) } 
//set 'weighted_mean'(value : FLOAT)  { super.$$link(5, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(6, value) } 

        //Getters
        get 'CONTEXT_EXTRAS'() : CONTEXT_EXTRAS { return [this.$uid.toString(), 0]  as unknown as CONTEXT_EXTRAS; }

        /**
          * Constructor
		 * @param opts.prev_extras
		 * @param opts.strength_multival
		 * @param opts.naivereuse_kf
		 * @param opts.start_percent step: 0.001
		 * @param opts.end_percent default: 0.15 step: 0.001
		 * @param opts.weighted_mean default: 0.95 step: 0.001
		 * @param opts.autosize}
        */
        constructor(opts:{
            'prev_extras'?: CONTEXT_EXTRAS,'strength_multival'?: MULTIVAL,'naivereuse_kf'?: NAIVEREUSE_KEYFRAME,'start_percent'?: FLOAT,'end_percent'?: FLOAT,'weighted_mean'?: FLOAT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("prev_extras", opts['prev_extras'])
super.$$link("strength_multival", opts['strength_multival'])
super.$$link("naivereuse_kf", opts['naivereuse_kf'])
super.$$link("start_percent", opts['start_percent']??tmp["ADE_ContextExtras_NaiveReuse"].defaults['start_percent'])
super.$$link("end_percent", opts['end_percent']??tmp["ADE_ContextExtras_NaiveReuse"].defaults['end_percent'])
super.$$link("weighted_mean", opts['weighted_mean']??tmp["ADE_ContextExtras_NaiveReuse"].defaults['weighted_mean'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'start_percent':  0,
'end_percent':  0.15,
'weighted_mean':  0.95
}
        protected override $$type(){
            return "ADE_ContextExtras_NaiveReuse"
        }
},

    /**
     * NaiveReuse Keyframe 🎭🅐🅓 from Animate Diff 🎭🅐🅓/context opts/context extras/naivereuse
     * @desc 
    */
    "ADE_ContextExtras_NaiveReuse_Keyframe" : class extends Node{
        //Setters
        //set 'prev_kf'(value : NAIVEREUSE_KEYFRAME)  { super.$$link(0, value) } 
//set 'mult_multival'(value : MULTIVAL)  { super.$$link(1, value) } 
//set 'mult'(value : FLOAT)  { super.$$link(2, value) } 
//set 'start_percent'(value : FLOAT)  { super.$$link(3, value) } 
//set 'guarantee_steps'(value : INT)  { super.$$link(4, value) } 
//set 'inherit_missing'(value : BOOLEAN)  { super.$$link(5, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(6, value) } 

        //Getters
        get 'NAIVEREUSE_KF'() : NAIVEREUSE_KEYFRAME { return [this.$uid.toString(), 0]  as unknown as NAIVEREUSE_KEYFRAME; }

        /**
          * Constructor
		 * @param opts.prev_kf
		 * @param opts.mult_multival
		 * @param opts.mult default: 1 step: 0.001
		 * @param opts.start_percent step: 0.001
		 * @param opts.guarantee_steps default: 1
		 * @param opts.inherit_missing default: true
		 * @param opts.autosize}
        */
        constructor(opts:{
            'prev_kf'?: NAIVEREUSE_KEYFRAME,'mult_multival'?: MULTIVAL,'mult'?: FLOAT,'start_percent'?: FLOAT,'guarantee_steps'?: INT,'inherit_missing'?: BOOLEAN,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("prev_kf", opts['prev_kf'])
super.$$link("mult_multival", opts['mult_multival'])
super.$$link("mult", opts['mult']??tmp["ADE_ContextExtras_NaiveReuse_Keyframe"].defaults['mult'])
super.$$link("start_percent", opts['start_percent']??tmp["ADE_ContextExtras_NaiveReuse_Keyframe"].defaults['start_percent'])
super.$$link("guarantee_steps", opts['guarantee_steps']??tmp["ADE_ContextExtras_NaiveReuse_Keyframe"].defaults['guarantee_steps'])
super.$$link("inherit_missing", opts['inherit_missing']??tmp["ADE_ContextExtras_NaiveReuse_Keyframe"].defaults['inherit_missing'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'mult':  1,
'start_percent':  0,
'guarantee_steps':  1,
'inherit_missing':  true
}
        protected override $$type(){
            return "ADE_ContextExtras_NaiveReuse_Keyframe"
        }
},

    /**
     * NaiveReuse Keyframes Interp. 🎭🅐🅓 from Animate Diff 🎭🅐🅓/context opts/context extras/naivereuse
     * @desc 
    */
    "ADE_ContextExtras_NaiveReuse_KeyframeInterpolation" : class extends Node{
        //Setters
        //set 'start_percent'(value : FLOAT)  { super.$$link(0, value) } 
//set 'end_percent'(value : FLOAT)  { super.$$link(1, value) } 
//set 'mult_start'(value : FLOAT)  { super.$$link(2, value) } 
//set 'mult_end'(value : FLOAT)  { super.$$link(3, value) } 
//set 'interpolation'(value : 'linear'|'ease_in'|'ease_out'|'ease_in_out'| $dyn)  { super.$$link(4, value) } 
//set 'intervals'(value : INT)  { super.$$link(5, value) } 
//set 'inherit_missing'(value : BOOLEAN)  { super.$$link(6, value) } 
//set 'print_keyframes'(value : BOOLEAN)  { super.$$link(7, value) } 
//set 'prev_kf'(value : NAIVEREUSE_KEYFRAME)  { super.$$link(8, value) } 
//set 'mult_multival'(value : MULTIVAL)  { super.$$link(9, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(10, value) } 

        //Getters
        get 'NAIVEREUSE_KF'() : NAIVEREUSE_KEYFRAME { return [this.$uid.toString(), 0]  as unknown as NAIVEREUSE_KEYFRAME; }

        /**
          * Constructor
		 * @param opts.start_percent step: 0.001
		 * @param opts.end_percent default: 1 step: 0.001
		 * @param opts.mult_start default: 1 step: 0.001
		 * @param opts.mult_end default: 1 step: 0.001
		 * @param opts.interpolation
		 * @param opts.intervals default: 50 max: 100 min: 2 step: 1
		 * @param opts.inherit_missing default: true
		 * @param opts.print_keyframes
		 * @param opts.prev_kf
		 * @param opts.mult_multival
		 * @param opts.autosize}
        */
        constructor(opts:{
            'start_percent'?: FLOAT,'end_percent'?: FLOAT,'mult_start'?: FLOAT,'mult_end'?: FLOAT,'interpolation': 'linear'|'ease_in'|'ease_out'|'ease_in_out'| $dyn,'intervals'?: INT,'inherit_missing'?: BOOLEAN,'print_keyframes'?: BOOLEAN,'prev_kf'?: NAIVEREUSE_KEYFRAME,'mult_multival'?: MULTIVAL,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("start_percent", opts['start_percent']??tmp["ADE_ContextExtras_NaiveReuse_KeyframeInterpolation"].defaults['start_percent'])
super.$$link("end_percent", opts['end_percent']??tmp["ADE_ContextExtras_NaiveReuse_KeyframeInterpolation"].defaults['end_percent'])
super.$$link("mult_start", opts['mult_start']??tmp["ADE_ContextExtras_NaiveReuse_KeyframeInterpolation"].defaults['mult_start'])
super.$$link("mult_end", opts['mult_end']??tmp["ADE_ContextExtras_NaiveReuse_KeyframeInterpolation"].defaults['mult_end'])
super.$$link("interpolation", opts['interpolation'])
super.$$link("intervals", opts['intervals']??tmp["ADE_ContextExtras_NaiveReuse_KeyframeInterpolation"].defaults['intervals'])
super.$$link("inherit_missing", opts['inherit_missing']??tmp["ADE_ContextExtras_NaiveReuse_KeyframeInterpolation"].defaults['inherit_missing'])
super.$$link("print_keyframes", opts['print_keyframes']??tmp["ADE_ContextExtras_NaiveReuse_KeyframeInterpolation"].defaults['print_keyframes'])
super.$$link("prev_kf", opts['prev_kf'])
super.$$link("mult_multival", opts['mult_multival'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'start_percent':  0,
'end_percent':  1,
'mult_start':  1,
'mult_end':  1,
'intervals':  50,
'inherit_missing':  true,
'print_keyframes':  false
}
        protected override $$type(){
            return "ADE_ContextExtras_NaiveReuse_KeyframeInterpolation"
        }
},

    /**
     * NaiveReuse Keyframes From List 🎭🅐🅓 from Animate Diff 🎭🅐🅓/context opts/context extras/naivereuse
     * @desc 
    */
    "ADE_ContextExtras_NaiveReuse_KeyframeFromList" : class extends Node{
        //Setters
        //set 'mults_float'(value : FLOAT)  { super.$$link(0, value) } 
//set 'start_percent'(value : FLOAT)  { super.$$link(1, value) } 
//set 'end_percent'(value : FLOAT)  { super.$$link(2, value) } 
//set 'inherit_missing'(value : BOOLEAN)  { super.$$link(3, value) } 
//set 'print_keyframes'(value : BOOLEAN)  { super.$$link(4, value) } 
//set 'prev_kf'(value : NAIVEREUSE_KEYFRAME)  { super.$$link(5, value) } 
//set 'mult_multival'(value : MULTIVAL)  { super.$$link(6, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(7, value) } 

        //Getters
        get 'NAIVEREUSE_KF'() : NAIVEREUSE_KEYFRAME { return [this.$uid.toString(), 0]  as unknown as NAIVEREUSE_KEYFRAME; }

        /**
          * Constructor
		 * @param opts.mults_float default: -1 max: undefined min: -1 step: 0.001
		 * @param opts.start_percent step: 0.001
		 * @param opts.end_percent default: 1 step: 0.001
		 * @param opts.inherit_missing default: true
		 * @param opts.print_keyframes
		 * @param opts.prev_kf
		 * @param opts.mult_multival
		 * @param opts.autosize}
        */
        constructor(opts:{
            'mults_float'?: FLOAT,'start_percent'?: FLOAT,'end_percent'?: FLOAT,'inherit_missing'?: BOOLEAN,'print_keyframes'?: BOOLEAN,'prev_kf'?: NAIVEREUSE_KEYFRAME,'mult_multival'?: MULTIVAL,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("mults_float", opts['mults_float']??tmp["ADE_ContextExtras_NaiveReuse_KeyframeFromList"].defaults['mults_float'])
super.$$link("start_percent", opts['start_percent']??tmp["ADE_ContextExtras_NaiveReuse_KeyframeFromList"].defaults['start_percent'])
super.$$link("end_percent", opts['end_percent']??tmp["ADE_ContextExtras_NaiveReuse_KeyframeFromList"].defaults['end_percent'])
super.$$link("inherit_missing", opts['inherit_missing']??tmp["ADE_ContextExtras_NaiveReuse_KeyframeFromList"].defaults['inherit_missing'])
super.$$link("print_keyframes", opts['print_keyframes']??tmp["ADE_ContextExtras_NaiveReuse_KeyframeFromList"].defaults['print_keyframes'])
super.$$link("prev_kf", opts['prev_kf'])
super.$$link("mult_multival", opts['mult_multival'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'mults_float':  -1,
'start_percent':  0,
'end_percent':  1,
'inherit_missing':  true,
'print_keyframes':  false
}
        protected override $$type(){
            return "ADE_ContextExtras_NaiveReuse_KeyframeFromList"
        }
},

    /**
     * Default Iteration Options 🎭🅐🅓 from Animate Diff 🎭🅐🅓/iteration opts
     * @desc 
    */
    "ADE_IterationOptsDefault" : class extends Node{
        //Setters
        //set 'iterations'(value : INT)  { super.$$link(0, value) } 
//set 'iter_batch_offset'(value : INT)  { super.$$link(1, value) } 
//set 'iter_seed_offset'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'ITERATION_OPTS'() : ITERATION_OPTS { return [this.$uid.toString(), 0]  as unknown as ITERATION_OPTS; }

        /**
          * Constructor
		 * @param opts.iterations default: 1 max: undefined min: 1
		 * @param opts.iter_batch_offset
		 * @param opts.iter_seed_offset max: 9007199254740991 min: -9007199254740991}
        */
        constructor(opts:{
            'iterations'?: INT,'iter_batch_offset'?: INT,'iter_seed_offset'?: INT
        }){
            super(ctx);

            super.$$link("iterations", opts['iterations']??tmp["ADE_IterationOptsDefault"].defaults['iterations'])
super.$$link("iter_batch_offset", opts['iter_batch_offset']??tmp["ADE_IterationOptsDefault"].defaults['iter_batch_offset'])
super.$$link("iter_seed_offset", opts['iter_seed_offset']??tmp["ADE_IterationOptsDefault"].defaults['iter_seed_offset'])
}

        static defaults = {
    'iterations':  1,
'iter_batch_offset':  0,
'iter_seed_offset':  0
}
        protected override $$type(){
            return "ADE_IterationOptsDefault"
        }
},

    /**
     * FreeInit Iteration Options 🎭🅐🅓 from Animate Diff 🎭🅐🅓/iteration opts
     * @desc 
    */
    "ADE_IterationOptsFreeInit" : class extends Node{
        //Setters
        //set 'iterations'(value : INT)  { super.$$link(0, value) } 
//set 'filter'(value : 'gaussian'|'butterworth'|'ideal'|'box'| $dyn)  { super.$$link(1, value) } 
//set 'd_s'(value : FLOAT)  { super.$$link(2, value) } 
//set 'd_t'(value : FLOAT)  { super.$$link(3, value) } 
//set 'n_butterworth'(value : INT)  { super.$$link(4, value) } 
//set 'sigma_step'(value : INT)  { super.$$link(5, value) } 
//set 'apply_to_1st_iter'(value : BOOLEAN)  { super.$$link(6, value) } 
//set 'init_type'(value : 'FreeInit [sampler sigma]'|'FreeInit [model sigma]'|'DinkInit_v1'| $dyn)  { super.$$link(7, value) } 
//set 'iter_batch_offset'(value : INT)  { super.$$link(8, value) } 
//set 'iter_seed_offset'(value : INT)  { super.$$link(9, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(10, value) } 

        //Getters
        get 'ITERATION_OPTS'() : ITERATION_OPTS { return [this.$uid.toString(), 0]  as unknown as ITERATION_OPTS; }

        /**
          * Constructor
		 * @param opts.iterations default: 2 max: undefined min: 1
		 * @param opts.filter
		 * @param opts.d_s default: 0.25 step: 0.001
		 * @param opts.d_t default: 0.25 step: 0.001
		 * @param opts.n_butterworth default: 4 max: 100 min: 1
		 * @param opts.sigma_step default: 999 max: 999 min: 1
		 * @param opts.apply_to_1st_iter
		 * @param opts.init_type
		 * @param opts.iter_batch_offset
		 * @param opts.iter_seed_offset default: 1 max: 9007199254740991 min: -9007199254740991
		 * @param opts.autosize}
        */
        constructor(opts:{
            'iterations'?: INT,'filter': 'gaussian'|'butterworth'|'ideal'|'box'| $dyn,'d_s'?: FLOAT,'d_t'?: FLOAT,'n_butterworth'?: INT,'sigma_step'?: INT,'apply_to_1st_iter'?: BOOLEAN,'init_type': 'FreeInit [sampler sigma]'|'FreeInit [model sigma]'|'DinkInit_v1'| $dyn,'iter_batch_offset'?: INT,'iter_seed_offset'?: INT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("iterations", opts['iterations']??tmp["ADE_IterationOptsFreeInit"].defaults['iterations'])
super.$$link("filter", opts['filter'])
super.$$link("d_s", opts['d_s']??tmp["ADE_IterationOptsFreeInit"].defaults['d_s'])
super.$$link("d_t", opts['d_t']??tmp["ADE_IterationOptsFreeInit"].defaults['d_t'])
super.$$link("n_butterworth", opts['n_butterworth']??tmp["ADE_IterationOptsFreeInit"].defaults['n_butterworth'])
super.$$link("sigma_step", opts['sigma_step']??tmp["ADE_IterationOptsFreeInit"].defaults['sigma_step'])
super.$$link("apply_to_1st_iter", opts['apply_to_1st_iter']??tmp["ADE_IterationOptsFreeInit"].defaults['apply_to_1st_iter'])
super.$$link("init_type", opts['init_type'])
super.$$link("iter_batch_offset", opts['iter_batch_offset']??tmp["ADE_IterationOptsFreeInit"].defaults['iter_batch_offset'])
super.$$link("iter_seed_offset", opts['iter_seed_offset']??tmp["ADE_IterationOptsFreeInit"].defaults['iter_seed_offset'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'iterations':  2,
'd_s':  0.25,
'd_t':  0.25,
'n_butterworth':  4,
'sigma_step':  999,
'apply_to_1st_iter':  false,
'iter_batch_offset':  0,
'iter_seed_offset':  1
}
        protected override $$type(){
            return "ADE_IterationOptsFreeInit"
        }
},

    /**
     * Register LoRA Hook 🎭🅐🅓 from Animate Diff 🎭🅐🅓/conditioning/register lora hooks
     * @desc 
    */
    "ADE_RegisterLoraHook" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'clip'(value : CLIP)  { super.$$link(1, value) } 
//set 'lora_name'(value : 'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(2, value) } 
//set 'strength_model'(value : FLOAT)  { super.$$link(3, value) } 
//set 'strength_clip'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this.$uid.toString(), 1]  as unknown as CLIP; }
get 'LORA_HOOK'() : LORA_HOOK { return [this.$uid.toString(), 2]  as unknown as LORA_HOOK; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.clip
		 * @param opts.lora_name
		 * @param opts.strength_model default: 1 max: 20 min: -20 step: 0.01
		 * @param opts.strength_clip default: 1 max: 20 min: -20 step: 0.01}
        */
        constructor(opts:{
            'model': MODEL,'clip': CLIP,'lora_name': 'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'strength_model'?: FLOAT,'strength_clip'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("clip", opts['clip'])
super.$$link("lora_name", opts['lora_name'])
super.$$link("strength_model", opts['strength_model']??tmp["ADE_RegisterLoraHook"].defaults['strength_model'])
super.$$link("strength_clip", opts['strength_clip']??tmp["ADE_RegisterLoraHook"].defaults['strength_clip'])
}

        static defaults = {
    'strength_model':  1,
'strength_clip':  1
}
        protected override $$type(){
            return "ADE_RegisterLoraHook"
        }
},

    /**
     * Register LoRA Hook (Model Only) 🎭🅐🅓 from Animate Diff 🎭🅐🅓/conditioning/register lora hooks
     * @desc 
    */
    "ADE_RegisterLoraHookModelOnly" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'lora_name'(value : 'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(1, value) } 
//set 'strength_model'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'LORA_HOOK'() : LORA_HOOK { return [this.$uid.toString(), 1]  as unknown as LORA_HOOK; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.lora_name
		 * @param opts.strength_model default: 1 max: 20 min: -20 step: 0.01}
        */
        constructor(opts:{
            'model': MODEL,'lora_name': 'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'strength_model'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("lora_name", opts['lora_name'])
super.$$link("strength_model", opts['strength_model']??tmp["ADE_RegisterLoraHookModelOnly"].defaults['strength_model'])
}

        static defaults = {
    'strength_model':  1
}
        protected override $$type(){
            return "ADE_RegisterLoraHookModelOnly"
        }
},

    /**
     * Register Model as LoRA Hook 🎭🅐🅓 from Animate Diff 🎭🅐🅓/conditioning/register lora hooks
     * @desc 
    */
    "ADE_RegisterModelAsLoraHook" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'clip'(value : CLIP)  { super.$$link(1, value) } 
//set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(2, value) } 
//set 'strength_model'(value : FLOAT)  { super.$$link(3, value) } 
//set 'strength_clip'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this.$uid.toString(), 1]  as unknown as CLIP; }
get 'LORA_HOOK'() : LORA_HOOK { return [this.$uid.toString(), 2]  as unknown as LORA_HOOK; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.clip
		 * @param opts.ckpt_name
		 * @param opts.strength_model default: 1 max: 20 min: -20 step: 0.01
		 * @param opts.strength_clip default: 1 max: 20 min: -20 step: 0.01}
        */
        constructor(opts:{
            'model': MODEL,'clip': CLIP,'ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'strength_model'?: FLOAT,'strength_clip'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("clip", opts['clip'])
super.$$link("ckpt_name", opts['ckpt_name'])
super.$$link("strength_model", opts['strength_model']??tmp["ADE_RegisterModelAsLoraHook"].defaults['strength_model'])
super.$$link("strength_clip", opts['strength_clip']??tmp["ADE_RegisterModelAsLoraHook"].defaults['strength_clip'])
}

        static defaults = {
    'strength_model':  1,
'strength_clip':  1
}
        protected override $$type(){
            return "ADE_RegisterModelAsLoraHook"
        }
},

    /**
     * Register Model as LoRA Hook (MO) 🎭🅐🅓 from Animate Diff 🎭🅐🅓/conditioning/register lora hooks
     * @desc 
    */
    "ADE_RegisterModelAsLoraHookModelOnly" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(1, value) } 
//set 'strength_model'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'LORA_HOOK'() : LORA_HOOK { return [this.$uid.toString(), 1]  as unknown as LORA_HOOK; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.ckpt_name
		 * @param opts.strength_model default: 1 max: 20 min: -20 step: 0.01}
        */
        constructor(opts:{
            'model': MODEL,'ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'strength_model'?: FLOAT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("ckpt_name", opts['ckpt_name'])
super.$$link("strength_model", opts['strength_model']??tmp["ADE_RegisterModelAsLoraHookModelOnly"].defaults['strength_model'])
}

        static defaults = {
    'strength_model':  1
}
        protected override $$type(){
            return "ADE_RegisterModelAsLoraHookModelOnly"
        }
},

    /**
     * Combine LoRA Hooks [2] 🎭🅐🅓 from Animate Diff 🎭🅐🅓/conditioning/combine lora hooks
     * @desc 
    */
    "ADE_CombineLoraHooks" : class extends Node{
        //Setters
        //set 'lora_hook_A'(value : LORA_HOOK)  { super.$$link(0, value) } 
//set 'lora_hook_B'(value : LORA_HOOK)  { super.$$link(1, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(2, value) } 

        //Getters
        get 'LORA_HOOK'() : LORA_HOOK { return [this.$uid.toString(), 0]  as unknown as LORA_HOOK; }

        /**
          * Constructor
		 * @param opts.lora_hook_A
		 * @param opts.lora_hook_B
		 * @param opts.autosize}
        */
        constructor(opts:{
            'lora_hook_A'?: LORA_HOOK,'lora_hook_B'?: LORA_HOOK,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("lora_hook_A", opts['lora_hook_A'])
super.$$link("lora_hook_B", opts['lora_hook_B'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ADE_CombineLoraHooks"
        }
},

    /**
     * Combine LoRA Hooks [4] 🎭🅐🅓 from Animate Diff 🎭🅐🅓/conditioning/combine lora hooks
     * @desc 
    */
    "ADE_CombineLoraHooksFour" : class extends Node{
        //Setters
        //set 'lora_hook_A'(value : LORA_HOOK)  { super.$$link(0, value) } 
//set 'lora_hook_B'(value : LORA_HOOK)  { super.$$link(1, value) } 
//set 'lora_hook_C'(value : LORA_HOOK)  { super.$$link(2, value) } 
//set 'lora_hook_D'(value : LORA_HOOK)  { super.$$link(3, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(4, value) } 

        //Getters
        get 'LORA_HOOK'() : LORA_HOOK { return [this.$uid.toString(), 0]  as unknown as LORA_HOOK; }

        /**
          * Constructor
		 * @param opts.lora_hook_A
		 * @param opts.lora_hook_B
		 * @param opts.lora_hook_C
		 * @param opts.lora_hook_D
		 * @param opts.autosize}
        */
        constructor(opts:{
            'lora_hook_A'?: LORA_HOOK,'lora_hook_B'?: LORA_HOOK,'lora_hook_C'?: LORA_HOOK,'lora_hook_D'?: LORA_HOOK,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("lora_hook_A", opts['lora_hook_A'])
super.$$link("lora_hook_B", opts['lora_hook_B'])
super.$$link("lora_hook_C", opts['lora_hook_C'])
super.$$link("lora_hook_D", opts['lora_hook_D'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ADE_CombineLoraHooksFour"
        }
},

    /**
     * Combine LoRA Hooks [8] 🎭🅐🅓 from Animate Diff 🎭🅐🅓/conditioning/combine lora hooks
     * @desc 
    */
    "ADE_CombineLoraHooksEight" : class extends Node{
        //Setters
        //set 'lora_hook_A'(value : LORA_HOOK)  { super.$$link(0, value) } 
//set 'lora_hook_B'(value : LORA_HOOK)  { super.$$link(1, value) } 
//set 'lora_hook_C'(value : LORA_HOOK)  { super.$$link(2, value) } 
//set 'lora_hook_D'(value : LORA_HOOK)  { super.$$link(3, value) } 
//set 'lora_hook_E'(value : LORA_HOOK)  { super.$$link(4, value) } 
//set 'lora_hook_F'(value : LORA_HOOK)  { super.$$link(5, value) } 
//set 'lora_hook_G'(value : LORA_HOOK)  { super.$$link(6, value) } 
//set 'lora_hook_H'(value : LORA_HOOK)  { super.$$link(7, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(8, value) } 

        //Getters
        get 'LORA_HOOK'() : LORA_HOOK { return [this.$uid.toString(), 0]  as unknown as LORA_HOOK; }

        /**
          * Constructor
		 * @param opts.lora_hook_A
		 * @param opts.lora_hook_B
		 * @param opts.lora_hook_C
		 * @param opts.lora_hook_D
		 * @param opts.lora_hook_E
		 * @param opts.lora_hook_F
		 * @param opts.lora_hook_G
		 * @param opts.lora_hook_H
		 * @param opts.autosize}
        */
        constructor(opts:{
            'lora_hook_A'?: LORA_HOOK,'lora_hook_B'?: LORA_HOOK,'lora_hook_C'?: LORA_HOOK,'lora_hook_D'?: LORA_HOOK,'lora_hook_E'?: LORA_HOOK,'lora_hook_F'?: LORA_HOOK,'lora_hook_G'?: LORA_HOOK,'lora_hook_H'?: LORA_HOOK,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("lora_hook_A", opts['lora_hook_A'])
super.$$link("lora_hook_B", opts['lora_hook_B'])
super.$$link("lora_hook_C", opts['lora_hook_C'])
super.$$link("lora_hook_D", opts['lora_hook_D'])
super.$$link("lora_hook_E", opts['lora_hook_E'])
super.$$link("lora_hook_F", opts['lora_hook_F'])
super.$$link("lora_hook_G", opts['lora_hook_G'])
super.$$link("lora_hook_H", opts['lora_hook_H'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ADE_CombineLoraHooksEight"
        }
},

    /**
     * Set LoRA Hook Keyframes 🎭🅐🅓 from Animate Diff 🎭🅐🅓/conditioning
     * @desc 
    */
    "ADE_SetLoraHookKeyframe" : class extends Node{
        //Setters
        //set 'lora_hook'(value : LORA_HOOK)  { super.$$link(0, value) } 
//set 'hook_kf'(value : LORA_HOOK_KEYFRAMES)  { super.$$link(1, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(2, value) } 

        //Getters
        get 'LORA_HOOK'() : LORA_HOOK { return [this.$uid.toString(), 0]  as unknown as LORA_HOOK; }

        /**
          * Constructor
		 * @param opts.lora_hook
		 * @param opts.hook_kf
		 * @param opts.autosize}
        */
        constructor(opts:{
            'lora_hook': LORA_HOOK,'hook_kf': LORA_HOOK_KEYFRAMES,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("lora_hook", opts['lora_hook'])
super.$$link("hook_kf", opts['hook_kf'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ADE_SetLoraHookKeyframe"
        }
},

    /**
     * Set CLIP LoRA Hook 🎭🅐🅓 from Animate Diff 🎭🅐🅓/conditioning
     * @desc 
    */
    "ADE_AttachLoraHookToCLIP" : class extends Node{
        //Setters
        //set 'clip'(value : CLIP)  { super.$$link(0, value) } 
//set 'lora_hook'(value : LORA_HOOK)  { super.$$link(1, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(2, value) } 

        //Getters
        get 'hook_CLIP'() : CLIP { return [this.$uid.toString(), 0]  as unknown as CLIP; }

        /**
          * Constructor
		 * @param opts.clip
		 * @param opts.lora_hook
		 * @param opts.autosize}
        */
        constructor(opts:{
            'clip': CLIP,'lora_hook': LORA_HOOK,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("clip", opts['clip'])
super.$$link("lora_hook", opts['lora_hook'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ADE_AttachLoraHookToCLIP"
        }
},

    /**
     * LoRA Hook Keyframe 🎭🅐🅓 from Animate Diff 🎭🅐🅓/conditioning/schedule lora hooks
     * @desc 
    */
    "ADE_LoraHookKeyframe" : class extends Node{
        //Setters
        //set 'strength_model'(value : FLOAT)  { super.$$link(0, value) } 
//set 'start_percent'(value : FLOAT)  { super.$$link(1, value) } 
//set 'guarantee_steps'(value : INT)  { super.$$link(2, value) } 
//set 'prev_hook_kf'(value : LORA_HOOK_KEYFRAMES)  { super.$$link(3, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(4, value) } 

        //Getters
        get 'HOOK_KF'() : LORA_HOOK_KEYFRAMES { return [this.$uid.toString(), 0]  as unknown as LORA_HOOK_KEYFRAMES; }

        /**
          * Constructor
		 * @param opts.strength_model default: 1 max: 20 min: -20 step: 0.01
		 * @param opts.start_percent step: 0.001
		 * @param opts.guarantee_steps default: 1
		 * @param opts.prev_hook_kf
		 * @param opts.autosize}
        */
        constructor(opts:{
            'strength_model'?: FLOAT,'start_percent'?: FLOAT,'guarantee_steps'?: INT,'prev_hook_kf'?: LORA_HOOK_KEYFRAMES,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("strength_model", opts['strength_model']??tmp["ADE_LoraHookKeyframe"].defaults['strength_model'])
super.$$link("start_percent", opts['start_percent']??tmp["ADE_LoraHookKeyframe"].defaults['start_percent'])
super.$$link("guarantee_steps", opts['guarantee_steps']??tmp["ADE_LoraHookKeyframe"].defaults['guarantee_steps'])
super.$$link("prev_hook_kf", opts['prev_hook_kf'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'strength_model':  1,
'start_percent':  0,
'guarantee_steps':  1
}
        protected override $$type(){
            return "ADE_LoraHookKeyframe"
        }
},

    /**
     * LoRA Hook Keyframes Interp. 🎭🅐🅓 from Animate Diff 🎭🅐🅓/conditioning/schedule lora hooks
     * @desc 
    */
    "ADE_LoraHookKeyframeInterpolation" : class extends Node{
        //Setters
        //set 'start_percent'(value : FLOAT)  { super.$$link(0, value) } 
//set 'end_percent'(value : FLOAT)  { super.$$link(1, value) } 
//set 'strength_start'(value : FLOAT)  { super.$$link(2, value) } 
//set 'strength_end'(value : FLOAT)  { super.$$link(3, value) } 
//set 'interpolation'(value : 'linear'|'ease_in'|'ease_out'|'ease_in_out'| $dyn)  { super.$$link(4, value) } 
//set 'intervals'(value : INT)  { super.$$link(5, value) } 
//set 'print_keyframes'(value : BOOLEAN)  { super.$$link(6, value) } 
//set 'prev_hook_kf'(value : LORA_HOOK_KEYFRAMES)  { super.$$link(7, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(8, value) } 

        //Getters
        get 'HOOK_KF'() : LORA_HOOK_KEYFRAMES { return [this.$uid.toString(), 0]  as unknown as LORA_HOOK_KEYFRAMES; }

        /**
          * Constructor
		 * @param opts.start_percent step: 0.001
		 * @param opts.end_percent default: 1 step: 0.001
		 * @param opts.strength_start default: 1 step: 0.001
		 * @param opts.strength_end default: 1 step: 0.001
		 * @param opts.interpolation
		 * @param opts.intervals default: 5 max: 100 min: 2 step: 1
		 * @param opts.print_keyframes
		 * @param opts.prev_hook_kf
		 * @param opts.autosize}
        */
        constructor(opts:{
            'start_percent'?: FLOAT,'end_percent'?: FLOAT,'strength_start'?: FLOAT,'strength_end'?: FLOAT,'interpolation': 'linear'|'ease_in'|'ease_out'|'ease_in_out'| $dyn,'intervals'?: INT,'print_keyframes'?: BOOLEAN,'prev_hook_kf'?: LORA_HOOK_KEYFRAMES,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("start_percent", opts['start_percent']??tmp["ADE_LoraHookKeyframeInterpolation"].defaults['start_percent'])
super.$$link("end_percent", opts['end_percent']??tmp["ADE_LoraHookKeyframeInterpolation"].defaults['end_percent'])
super.$$link("strength_start", opts['strength_start']??tmp["ADE_LoraHookKeyframeInterpolation"].defaults['strength_start'])
super.$$link("strength_end", opts['strength_end']??tmp["ADE_LoraHookKeyframeInterpolation"].defaults['strength_end'])
super.$$link("interpolation", opts['interpolation'])
super.$$link("intervals", opts['intervals']??tmp["ADE_LoraHookKeyframeInterpolation"].defaults['intervals'])
super.$$link("print_keyframes", opts['print_keyframes']??tmp["ADE_LoraHookKeyframeInterpolation"].defaults['print_keyframes'])
super.$$link("prev_hook_kf", opts['prev_hook_kf'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'start_percent':  0,
'end_percent':  1,
'strength_start':  1,
'strength_end':  1,
'intervals':  5,
'print_keyframes':  false
}
        protected override $$type(){
            return "ADE_LoraHookKeyframeInterpolation"
        }
},

    /**
     * LoRA Hook Keyframes From List 🎭🅐🅓 from Animate Diff 🎭🅐🅓/conditioning/schedule lora hooks
     * @desc 
    */
    "ADE_LoraHookKeyframeFromStrengthList" : class extends Node{
        //Setters
        //set 'strengths_float'(value : FLOAT)  { super.$$link(0, value) } 
//set 'start_percent'(value : FLOAT)  { super.$$link(1, value) } 
//set 'end_percent'(value : FLOAT)  { super.$$link(2, value) } 
//set 'print_keyframes'(value : BOOLEAN)  { super.$$link(3, value) } 
//set 'prev_hook_kf'(value : LORA_HOOK_KEYFRAMES)  { super.$$link(4, value) } 

        //Getters
        get 'HOOK_KF'() : LORA_HOOK_KEYFRAMES { return [this.$uid.toString(), 0]  as unknown as LORA_HOOK_KEYFRAMES; }

        /**
          * Constructor
		 * @param opts.strengths_float default: -1 max: undefined min: -1 step: 0.001
		 * @param opts.start_percent step: 0.001
		 * @param opts.end_percent default: 1 step: 0.001
		 * @param opts.print_keyframes
		 * @param opts.prev_hook_kf}
        */
        constructor(opts:{
            'strengths_float'?: FLOAT,'start_percent'?: FLOAT,'end_percent'?: FLOAT,'print_keyframes'?: BOOLEAN,'prev_hook_kf'?: LORA_HOOK_KEYFRAMES
        }){
            super(ctx);

            super.$$link("strengths_float", opts['strengths_float']??tmp["ADE_LoraHookKeyframeFromStrengthList"].defaults['strengths_float'])
super.$$link("start_percent", opts['start_percent']??tmp["ADE_LoraHookKeyframeFromStrengthList"].defaults['start_percent'])
super.$$link("end_percent", opts['end_percent']??tmp["ADE_LoraHookKeyframeFromStrengthList"].defaults['end_percent'])
super.$$link("print_keyframes", opts['print_keyframes']??tmp["ADE_LoraHookKeyframeFromStrengthList"].defaults['print_keyframes'])
super.$$link("prev_hook_kf", opts['prev_hook_kf'])
}

        static defaults = {
    'strengths_float':  -1,
'start_percent':  0,
'end_percent':  1,
'print_keyframes':  false
}
        protected override $$type(){
            return "ADE_LoraHookKeyframeFromStrengthList"
        }
},

    /**
     * Set Model LoRA Hook 🎭🅐🅓 from Animate Diff 🎭🅐🅓/conditioning/single cond ops
     * @desc 
    */
    "ADE_AttachLoraHookToConditioning" : class extends Node{
        //Setters
        //set 'conditioning'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'lora_hook'(value : LORA_HOOK)  { super.$$link(1, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(2, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.conditioning
		 * @param opts.lora_hook
		 * @param opts.autosize}
        */
        constructor(opts:{
            'conditioning': CONDITIONING,'lora_hook': LORA_HOOK,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("conditioning", opts['conditioning'])
super.$$link("lora_hook", opts['lora_hook'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ADE_AttachLoraHookToConditioning"
        }
},

    /**
     * Set Props on Conds 🎭🅐🅓 from Animate Diff 🎭🅐🅓/conditioning
     * @desc 
    */
    "ADE_PairedConditioningSetMask" : class extends Node{
        //Setters
        //set 'positive_ADD'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'negative_ADD'(value : CONDITIONING)  { super.$$link(1, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(2, value) } 
//set 'set_cond_area'(value : 'default'|'mask bounds'| $dyn)  { super.$$link(3, value) } 
//set 'opt_mask'(value : MASK)  { super.$$link(4, value) } 
//set 'opt_lora_hook'(value : LORA_HOOK)  { super.$$link(5, value) } 
//set 'opt_timesteps'(value : TIMESTEPS_COND)  { super.$$link(6, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(7, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this.$uid.toString(), 1]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.positive_ADD
		 * @param opts.negative_ADD
		 * @param opts.strength default: 1 step: 0.01
		 * @param opts.set_cond_area
		 * @param opts.opt_mask
		 * @param opts.opt_lora_hook
		 * @param opts.opt_timesteps
		 * @param opts.autosize}
        */
        constructor(opts:{
            'positive_ADD': CONDITIONING,'negative_ADD': CONDITIONING,'strength'?: FLOAT,'set_cond_area': 'default'|'mask bounds'| $dyn,'opt_mask'?: MASK,'opt_lora_hook'?: LORA_HOOK,'opt_timesteps'?: TIMESTEPS_COND,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("positive_ADD", opts['positive_ADD'])
super.$$link("negative_ADD", opts['negative_ADD'])
super.$$link("strength", opts['strength']??tmp["ADE_PairedConditioningSetMask"].defaults['strength'])
super.$$link("set_cond_area", opts['set_cond_area'])
super.$$link("opt_mask", opts['opt_mask'])
super.$$link("opt_lora_hook", opts['opt_lora_hook'])
super.$$link("opt_timesteps", opts['opt_timesteps'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'strength':  1
}
        protected override $$type(){
            return "ADE_PairedConditioningSetMask"
        }
},

    /**
     * Set Props on Cond 🎭🅐🅓 from Animate Diff 🎭🅐🅓/conditioning/single cond ops
     * @desc 
    */
    "ADE_ConditioningSetMask" : class extends Node{
        //Setters
        //set 'cond_ADD'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(1, value) } 
//set 'set_cond_area'(value : 'default'|'mask bounds'| $dyn)  { super.$$link(2, value) } 
//set 'opt_mask'(value : MASK)  { super.$$link(3, value) } 
//set 'opt_lora_hook'(value : LORA_HOOK)  { super.$$link(4, value) } 
//set 'opt_timesteps'(value : TIMESTEPS_COND)  { super.$$link(5, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(6, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.cond_ADD
		 * @param opts.strength default: 1 step: 0.01
		 * @param opts.set_cond_area
		 * @param opts.opt_mask
		 * @param opts.opt_lora_hook
		 * @param opts.opt_timesteps
		 * @param opts.autosize}
        */
        constructor(opts:{
            'cond_ADD': CONDITIONING,'strength'?: FLOAT,'set_cond_area': 'default'|'mask bounds'| $dyn,'opt_mask'?: MASK,'opt_lora_hook'?: LORA_HOOK,'opt_timesteps'?: TIMESTEPS_COND,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("cond_ADD", opts['cond_ADD'])
super.$$link("strength", opts['strength']??tmp["ADE_ConditioningSetMask"].defaults['strength'])
super.$$link("set_cond_area", opts['set_cond_area'])
super.$$link("opt_mask", opts['opt_mask'])
super.$$link("opt_lora_hook", opts['opt_lora_hook'])
super.$$link("opt_timesteps", opts['opt_timesteps'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'strength':  1
}
        protected override $$type(){
            return "ADE_ConditioningSetMask"
        }
},

    /**
     * Set Props and Combine Conds 🎭🅐🅓 from Animate Diff 🎭🅐🅓/conditioning
     * @desc 
    */
    "ADE_PairedConditioningSetMaskAndCombine" : class extends Node{
        //Setters
        //set 'positive'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(1, value) } 
//set 'positive_ADD'(value : CONDITIONING)  { super.$$link(2, value) } 
//set 'negative_ADD'(value : CONDITIONING)  { super.$$link(3, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(4, value) } 
//set 'set_cond_area'(value : 'default'|'mask bounds'| $dyn)  { super.$$link(5, value) } 
//set 'opt_mask'(value : MASK)  { super.$$link(6, value) } 
//set 'opt_lora_hook'(value : LORA_HOOK)  { super.$$link(7, value) } 
//set 'opt_timesteps'(value : TIMESTEPS_COND)  { super.$$link(8, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(9, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this.$uid.toString(), 1]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.positive_ADD
		 * @param opts.negative_ADD
		 * @param opts.strength default: 1 step: 0.01
		 * @param opts.set_cond_area
		 * @param opts.opt_mask
		 * @param opts.opt_lora_hook
		 * @param opts.opt_timesteps
		 * @param opts.autosize}
        */
        constructor(opts:{
            'positive': CONDITIONING,'negative': CONDITIONING,'positive_ADD': CONDITIONING,'negative_ADD': CONDITIONING,'strength'?: FLOAT,'set_cond_area': 'default'|'mask bounds'| $dyn,'opt_mask'?: MASK,'opt_lora_hook'?: LORA_HOOK,'opt_timesteps'?: TIMESTEPS_COND,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("positive_ADD", opts['positive_ADD'])
super.$$link("negative_ADD", opts['negative_ADD'])
super.$$link("strength", opts['strength']??tmp["ADE_PairedConditioningSetMaskAndCombine"].defaults['strength'])
super.$$link("set_cond_area", opts['set_cond_area'])
super.$$link("opt_mask", opts['opt_mask'])
super.$$link("opt_lora_hook", opts['opt_lora_hook'])
super.$$link("opt_timesteps", opts['opt_timesteps'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'strength':  1
}
        protected override $$type(){
            return "ADE_PairedConditioningSetMaskAndCombine"
        }
},

    /**
     * Set Props and Combine Cond 🎭🅐🅓 from Animate Diff 🎭🅐🅓/conditioning/single cond ops
     * @desc 
    */
    "ADE_ConditioningSetMaskAndCombine" : class extends Node{
        //Setters
        //set 'cond'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'cond_ADD'(value : CONDITIONING)  { super.$$link(1, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(2, value) } 
//set 'set_cond_area'(value : 'default'|'mask bounds'| $dyn)  { super.$$link(3, value) } 
//set 'opt_mask'(value : MASK)  { super.$$link(4, value) } 
//set 'opt_lora_hook'(value : LORA_HOOK)  { super.$$link(5, value) } 
//set 'opt_timesteps'(value : TIMESTEPS_COND)  { super.$$link(6, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(7, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.cond
		 * @param opts.cond_ADD
		 * @param opts.strength default: 1 step: 0.01
		 * @param opts.set_cond_area
		 * @param opts.opt_mask
		 * @param opts.opt_lora_hook
		 * @param opts.opt_timesteps
		 * @param opts.autosize}
        */
        constructor(opts:{
            'cond': CONDITIONING,'cond_ADD': CONDITIONING,'strength'?: FLOAT,'set_cond_area': 'default'|'mask bounds'| $dyn,'opt_mask'?: MASK,'opt_lora_hook'?: LORA_HOOK,'opt_timesteps'?: TIMESTEPS_COND,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("cond", opts['cond'])
super.$$link("cond_ADD", opts['cond_ADD'])
super.$$link("strength", opts['strength']??tmp["ADE_ConditioningSetMaskAndCombine"].defaults['strength'])
super.$$link("set_cond_area", opts['set_cond_area'])
super.$$link("opt_mask", opts['opt_mask'])
super.$$link("opt_lora_hook", opts['opt_lora_hook'])
super.$$link("opt_timesteps", opts['opt_timesteps'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'strength':  1
}
        protected override $$type(){
            return "ADE_ConditioningSetMaskAndCombine"
        }
},

    /**
     * Set Unmasked Conds 🎭🅐🅓 from Animate Diff 🎭🅐🅓/conditioning
     * @desc 
    */
    "ADE_PairedConditioningSetUnmaskedAndCombine" : class extends Node{
        //Setters
        //set 'positive'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(1, value) } 
//set 'positive_DEFAULT'(value : CONDITIONING)  { super.$$link(2, value) } 
//set 'negative_DEFAULT'(value : CONDITIONING)  { super.$$link(3, value) } 
//set 'opt_lora_hook'(value : LORA_HOOK)  { super.$$link(4, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(5, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this.$uid.toString(), 1]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.positive_DEFAULT
		 * @param opts.negative_DEFAULT
		 * @param opts.opt_lora_hook
		 * @param opts.autosize}
        */
        constructor(opts:{
            'positive': CONDITIONING,'negative': CONDITIONING,'positive_DEFAULT': CONDITIONING,'negative_DEFAULT': CONDITIONING,'opt_lora_hook'?: LORA_HOOK,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("positive_DEFAULT", opts['positive_DEFAULT'])
super.$$link("negative_DEFAULT", opts['negative_DEFAULT'])
super.$$link("opt_lora_hook", opts['opt_lora_hook'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ADE_PairedConditioningSetUnmaskedAndCombine"
        }
},

    /**
     * Set Unmasked Cond 🎭🅐🅓 from Animate Diff 🎭🅐🅓/conditioning/single cond ops
     * @desc 
    */
    "ADE_ConditioningSetUnmaskedAndCombine" : class extends Node{
        //Setters
        //set 'cond'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'cond_DEFAULT'(value : CONDITIONING)  { super.$$link(1, value) } 
//set 'opt_lora_hook'(value : LORA_HOOK)  { super.$$link(2, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(3, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.cond
		 * @param opts.cond_DEFAULT
		 * @param opts.opt_lora_hook
		 * @param opts.autosize}
        */
        constructor(opts:{
            'cond': CONDITIONING,'cond_DEFAULT': CONDITIONING,'opt_lora_hook'?: LORA_HOOK,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("cond", opts['cond'])
super.$$link("cond_DEFAULT", opts['cond_DEFAULT'])
super.$$link("opt_lora_hook", opts['opt_lora_hook'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ADE_ConditioningSetUnmaskedAndCombine"
        }
},

    /**
     * Manual Combine Conds 🎭🅐🅓 from Animate Diff 🎭🅐🅓/conditioning
     * @desc 
    */
    "ADE_PairedConditioningCombine" : class extends Node{
        //Setters
        //set 'positive_A'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'negative_A'(value : CONDITIONING)  { super.$$link(1, value) } 
//set 'positive_B'(value : CONDITIONING)  { super.$$link(2, value) } 
//set 'negative_B'(value : CONDITIONING)  { super.$$link(3, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this.$uid.toString(), 1]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.positive_A
		 * @param opts.negative_A
		 * @param opts.positive_B
		 * @param opts.negative_B}
        */
        constructor(opts:{
            'positive_A': CONDITIONING,'negative_A': CONDITIONING,'positive_B': CONDITIONING,'negative_B': CONDITIONING
        }){
            super(ctx);

            super.$$link("positive_A", opts['positive_A'])
super.$$link("negative_A", opts['negative_A'])
super.$$link("positive_B", opts['positive_B'])
super.$$link("negative_B", opts['negative_B'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ADE_PairedConditioningCombine"
        }
},

    /**
     * Manual Combine Cond 🎭🅐🅓 from Animate Diff 🎭🅐🅓/conditioning/single cond ops
     * @desc 
    */
    "ADE_ConditioningCombine" : class extends Node{
        //Setters
        //set 'cond_A'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'cond_B'(value : CONDITIONING)  { super.$$link(1, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.cond_A
		 * @param opts.cond_B}
        */
        constructor(opts:{
            'cond_A': CONDITIONING,'cond_B': CONDITIONING
        }){
            super(ctx);

            super.$$link("cond_A", opts['cond_A'])
super.$$link("cond_B", opts['cond_B'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ADE_ConditioningCombine"
        }
},

    /**
     * Timesteps Conditioning 🎭🅐🅓 from Animate Diff 🎭🅐🅓/conditioning
     * @desc 
    */
    "ADE_TimestepsConditioning" : class extends Node{
        //Setters
        //set 'start_percent'(value : FLOAT)  { super.$$link(0, value) } 
//set 'end_percent'(value : FLOAT)  { super.$$link(1, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(2, value) } 

        //Getters
        get 'TIMESTEPS_COND'() : TIMESTEPS_COND { return [this.$uid.toString(), 0]  as unknown as TIMESTEPS_COND; }

        /**
          * Constructor
		 * @param opts.start_percent step: 0.001
		 * @param opts.end_percent default: 1 step: 0.001
		 * @param opts.autosize}
        */
        constructor(opts:{
            'start_percent'?: FLOAT,'end_percent'?: FLOAT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("start_percent", opts['start_percent']??tmp["ADE_TimestepsConditioning"].defaults['start_percent'])
super.$$link("end_percent", opts['end_percent']??tmp["ADE_TimestepsConditioning"].defaults['end_percent'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'start_percent':  0,
'end_percent':  1
}
        protected override $$type(){
            return "ADE_TimestepsConditioning"
        }
},

    /**
     * Noise Layer [Add] 🎭🅐🅓 from Animate Diff 🎭🅐🅓/noise layers
     * @desc 
    */
    "ADE_NoiseLayerAdd" : class extends Node{
        //Setters
        //set 'batch_offset'(value : INT)  { super.$$link(0, value) } 
//set 'noise_type'(value : 'default'|'constant'|'empty'|'repeated_context'|'FreeNoise'| $dyn)  { super.$$link(1, value) } 
//set 'seed_gen_override'(value : 'use existing'|'comfy'|'comfy [gpu]'|'auto1111'|'auto1111 [gpu]'| $dyn)  { super.$$link(2, value) } 
//set 'seed_offset'(value : INT)  { super.$$link(3, value) } 
//set 'noise_weight'(value : FLOAT)  { super.$$link(4, value) } 
//set 'prev_noise_layers'(value : NOISE_LAYERS)  { super.$$link(5, value) } 
//set 'mask_optional'(value : MASK)  { super.$$link(6, value) } 
//set 'seed_override'(value : INT)  { super.$$link(7, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(8, value) } 

        //Getters
        get 'NOISE_LAYERS'() : NOISE_LAYERS { return [this.$uid.toString(), 0]  as unknown as NOISE_LAYERS; }

        /**
          * Constructor
		 * @param opts.batch_offset
		 * @param opts.noise_type
		 * @param opts.seed_gen_override
		 * @param opts.seed_offset max: 9007199254740991 min: -9007199254740991
		 * @param opts.noise_weight default: 0.5 step: 0.001
		 * @param opts.prev_noise_layers
		 * @param opts.mask_optional
		 * @param opts.seed_override
		 * @param opts.autosize}
        */
        constructor(opts:{
            'batch_offset'?: INT,'noise_type': 'default'|'constant'|'empty'|'repeated_context'|'FreeNoise'| $dyn,'seed_gen_override': 'use existing'|'comfy'|'comfy [gpu]'|'auto1111'|'auto1111 [gpu]'| $dyn,'seed_offset'?: INT,'noise_weight'?: FLOAT,'prev_noise_layers'?: NOISE_LAYERS,'mask_optional'?: MASK,'seed_override'?: INT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("batch_offset", opts['batch_offset']??tmp["ADE_NoiseLayerAdd"].defaults['batch_offset'])
super.$$link("noise_type", opts['noise_type'])
super.$$link("seed_gen_override", opts['seed_gen_override'])
super.$$link("seed_offset", opts['seed_offset']??tmp["ADE_NoiseLayerAdd"].defaults['seed_offset'])
super.$$link("noise_weight", opts['noise_weight']??tmp["ADE_NoiseLayerAdd"].defaults['noise_weight'])
super.$$link("prev_noise_layers", opts['prev_noise_layers'])
super.$$link("mask_optional", opts['mask_optional'])
super.$$link("seed_override", opts['seed_override']??tmp["ADE_NoiseLayerAdd"].defaults['seed_override'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'batch_offset':  0,
'seed_offset':  0,
'noise_weight':  0.5,
'seed_override':  0
}
        protected override $$type(){
            return "ADE_NoiseLayerAdd"
        }
},

    /**
     * Noise Layer [Add Weighted] 🎭🅐🅓 from Animate Diff 🎭🅐🅓/noise layers
     * @desc 
    */
    "ADE_NoiseLayerAddWeighted" : class extends Node{
        //Setters
        //set 'batch_offset'(value : INT)  { super.$$link(0, value) } 
//set 'noise_type'(value : 'default'|'constant'|'empty'|'repeated_context'|'FreeNoise'| $dyn)  { super.$$link(1, value) } 
//set 'seed_gen_override'(value : 'use existing'|'comfy'|'comfy [gpu]'|'auto1111'|'auto1111 [gpu]'| $dyn)  { super.$$link(2, value) } 
//set 'seed_offset'(value : INT)  { super.$$link(3, value) } 
//set 'noise_weight'(value : FLOAT)  { super.$$link(4, value) } 
//set 'balance_multiplier'(value : FLOAT)  { super.$$link(5, value) } 
//set 'prev_noise_layers'(value : NOISE_LAYERS)  { super.$$link(6, value) } 
//set 'mask_optional'(value : MASK)  { super.$$link(7, value) } 
//set 'seed_override'(value : INT)  { super.$$link(8, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(9, value) } 

        //Getters
        get 'NOISE_LAYERS'() : NOISE_LAYERS { return [this.$uid.toString(), 0]  as unknown as NOISE_LAYERS; }

        /**
          * Constructor
		 * @param opts.batch_offset
		 * @param opts.noise_type
		 * @param opts.seed_gen_override
		 * @param opts.seed_offset max: 9007199254740991 min: -9007199254740991
		 * @param opts.noise_weight default: 0.5 step: 0.001
		 * @param opts.balance_multiplier default: 1 step: 0.001
		 * @param opts.prev_noise_layers
		 * @param opts.mask_optional
		 * @param opts.seed_override
		 * @param opts.autosize}
        */
        constructor(opts:{
            'batch_offset'?: INT,'noise_type': 'default'|'constant'|'empty'|'repeated_context'|'FreeNoise'| $dyn,'seed_gen_override': 'use existing'|'comfy'|'comfy [gpu]'|'auto1111'|'auto1111 [gpu]'| $dyn,'seed_offset'?: INT,'noise_weight'?: FLOAT,'balance_multiplier'?: FLOAT,'prev_noise_layers'?: NOISE_LAYERS,'mask_optional'?: MASK,'seed_override'?: INT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("batch_offset", opts['batch_offset']??tmp["ADE_NoiseLayerAddWeighted"].defaults['batch_offset'])
super.$$link("noise_type", opts['noise_type'])
super.$$link("seed_gen_override", opts['seed_gen_override'])
super.$$link("seed_offset", opts['seed_offset']??tmp["ADE_NoiseLayerAddWeighted"].defaults['seed_offset'])
super.$$link("noise_weight", opts['noise_weight']??tmp["ADE_NoiseLayerAddWeighted"].defaults['noise_weight'])
super.$$link("balance_multiplier", opts['balance_multiplier']??tmp["ADE_NoiseLayerAddWeighted"].defaults['balance_multiplier'])
super.$$link("prev_noise_layers", opts['prev_noise_layers'])
super.$$link("mask_optional", opts['mask_optional'])
super.$$link("seed_override", opts['seed_override']??tmp["ADE_NoiseLayerAddWeighted"].defaults['seed_override'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'batch_offset':  0,
'seed_offset':  0,
'noise_weight':  0.5,
'balance_multiplier':  1,
'seed_override':  0
}
        protected override $$type(){
            return "ADE_NoiseLayerAddWeighted"
        }
},

    /**
     * Noise Layer [Replace] 🎭🅐🅓 from Animate Diff 🎭🅐🅓/noise layers
     * @desc 
    */
    "ADE_NoiseLayerReplace" : class extends Node{
        //Setters
        //set 'batch_offset'(value : INT)  { super.$$link(0, value) } 
//set 'noise_type'(value : 'default'|'constant'|'empty'|'repeated_context'|'FreeNoise'| $dyn)  { super.$$link(1, value) } 
//set 'seed_gen_override'(value : 'use existing'|'comfy'|'comfy [gpu]'|'auto1111'|'auto1111 [gpu]'| $dyn)  { super.$$link(2, value) } 
//set 'seed_offset'(value : INT)  { super.$$link(3, value) } 
//set 'prev_noise_layers'(value : NOISE_LAYERS)  { super.$$link(4, value) } 
//set 'mask_optional'(value : MASK)  { super.$$link(5, value) } 
//set 'seed_override'(value : INT)  { super.$$link(6, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(7, value) } 

        //Getters
        get 'NOISE_LAYERS'() : NOISE_LAYERS { return [this.$uid.toString(), 0]  as unknown as NOISE_LAYERS; }

        /**
          * Constructor
		 * @param opts.batch_offset
		 * @param opts.noise_type
		 * @param opts.seed_gen_override
		 * @param opts.seed_offset max: 9007199254740991 min: -9007199254740991
		 * @param opts.prev_noise_layers
		 * @param opts.mask_optional
		 * @param opts.seed_override
		 * @param opts.autosize}
        */
        constructor(opts:{
            'batch_offset'?: INT,'noise_type': 'default'|'constant'|'empty'|'repeated_context'|'FreeNoise'| $dyn,'seed_gen_override': 'use existing'|'comfy'|'comfy [gpu]'|'auto1111'|'auto1111 [gpu]'| $dyn,'seed_offset'?: INT,'prev_noise_layers'?: NOISE_LAYERS,'mask_optional'?: MASK,'seed_override'?: INT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("batch_offset", opts['batch_offset']??tmp["ADE_NoiseLayerReplace"].defaults['batch_offset'])
super.$$link("noise_type", opts['noise_type'])
super.$$link("seed_gen_override", opts['seed_gen_override'])
super.$$link("seed_offset", opts['seed_offset']??tmp["ADE_NoiseLayerReplace"].defaults['seed_offset'])
super.$$link("prev_noise_layers", opts['prev_noise_layers'])
super.$$link("mask_optional", opts['mask_optional'])
super.$$link("seed_override", opts['seed_override']??tmp["ADE_NoiseLayerReplace"].defaults['seed_override'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'batch_offset':  0,
'seed_offset':  0,
'seed_override':  0
}
        protected override $$type(){
            return "ADE_NoiseLayerReplace"
        }
},

    /**
     * AnimateDiff Settings 🎭🅐🅓 from Animate Diff 🎭🅐🅓/ad settings
     * @desc 
    */
    "ADE_AnimateDiffSettings" : class extends Node{
        //Setters
        //set 'pe_adjust'(value : PE_ADJUST)  { super.$$link(0, value) } 
//set 'weight_adjust'(value : WEIGHT_ADJUST)  { super.$$link(1, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(2, value) } 

        //Getters
        get 'AD_SETTINGS'() : AD_SETTINGS { return [this.$uid.toString(), 0]  as unknown as AD_SETTINGS; }

        /**
          * Constructor
		 * @param opts.pe_adjust
		 * @param opts.weight_adjust
		 * @param opts.autosize}
        */
        constructor(opts:{
            'pe_adjust'?: PE_ADJUST,'weight_adjust'?: WEIGHT_ADJUST,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("pe_adjust", opts['pe_adjust'])
super.$$link("weight_adjust", opts['weight_adjust'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ADE_AnimateDiffSettings"
        }
},

    /**
     * Adjust PE [Sweetspot] 🎭🅐🅓 from Animate Diff 🎭🅐🅓/ad settings/pe adjust
     * @desc 
    */
    "ADE_AdjustPESweetspotStretch" : class extends Node{
        //Setters
        //set 'sweetspot'(value : INT)  { super.$$link(0, value) } 
//set 'new_sweetspot'(value : INT)  { super.$$link(1, value) } 
//set 'print_adjustment'(value : BOOLEAN)  { super.$$link(2, value) } 
//set 'prev_pe_adjust'(value : PE_ADJUST)  { super.$$link(3, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(4, value) } 

        //Getters
        get 'PE_ADJUST'() : PE_ADJUST { return [this.$uid.toString(), 0]  as unknown as PE_ADJUST; }

        /**
          * Constructor
		 * @param opts.sweetspot default: 16
		 * @param opts.new_sweetspot default: 16
		 * @param opts.print_adjustment
		 * @param opts.prev_pe_adjust
		 * @param opts.autosize}
        */
        constructor(opts:{
            'sweetspot'?: INT,'new_sweetspot'?: INT,'print_adjustment'?: BOOLEAN,'prev_pe_adjust'?: PE_ADJUST,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("sweetspot", opts['sweetspot']??tmp["ADE_AdjustPESweetspotStretch"].defaults['sweetspot'])
super.$$link("new_sweetspot", opts['new_sweetspot']??tmp["ADE_AdjustPESweetspotStretch"].defaults['new_sweetspot'])
super.$$link("print_adjustment", opts['print_adjustment']??tmp["ADE_AdjustPESweetspotStretch"].defaults['print_adjustment'])
super.$$link("prev_pe_adjust", opts['prev_pe_adjust'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'sweetspot':  16,
'new_sweetspot':  16,
'print_adjustment':  false
}
        protected override $$type(){
            return "ADE_AdjustPESweetspotStretch"
        }
},

    /**
     * Adjust PE [Full Stretch] 🎭🅐🅓 from Animate Diff 🎭🅐🅓/ad settings/pe adjust
     * @desc 
    */
    "ADE_AdjustPEFullStretch" : class extends Node{
        //Setters
        //set 'pe_stretch'(value : INT)  { super.$$link(0, value) } 
//set 'print_adjustment'(value : BOOLEAN)  { super.$$link(1, value) } 
//set 'prev_pe_adjust'(value : PE_ADJUST)  { super.$$link(2, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(3, value) } 

        //Getters
        get 'PE_ADJUST'() : PE_ADJUST { return [this.$uid.toString(), 0]  as unknown as PE_ADJUST; }

        /**
          * Constructor
		 * @param opts.pe_stretch
		 * @param opts.print_adjustment
		 * @param opts.prev_pe_adjust
		 * @param opts.autosize}
        */
        constructor(opts:{
            'pe_stretch'?: INT,'print_adjustment'?: BOOLEAN,'prev_pe_adjust'?: PE_ADJUST,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("pe_stretch", opts['pe_stretch']??tmp["ADE_AdjustPEFullStretch"].defaults['pe_stretch'])
super.$$link("print_adjustment", opts['print_adjustment']??tmp["ADE_AdjustPEFullStretch"].defaults['print_adjustment'])
super.$$link("prev_pe_adjust", opts['prev_pe_adjust'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'pe_stretch':  0,
'print_adjustment':  false
}
        protected override $$type(){
            return "ADE_AdjustPEFullStretch"
        }
},

    /**
     * Adjust PE [Manual] 🎭🅐🅓 from Animate Diff 🎭🅐🅓/ad settings/pe adjust
     * @desc 
    */
    "ADE_AdjustPEManual" : class extends Node{
        //Setters
        //set 'cap_initial_pe_length'(value : INT)  { super.$$link(0, value) } 
//set 'interpolate_pe_to_length'(value : INT)  { super.$$link(1, value) } 
//set 'initial_pe_idx_offset'(value : INT)  { super.$$link(2, value) } 
//set 'final_pe_idx_offset'(value : INT)  { super.$$link(3, value) } 
//set 'print_adjustment'(value : BOOLEAN)  { super.$$link(4, value) } 
//set 'prev_pe_adjust'(value : PE_ADJUST)  { super.$$link(5, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(6, value) } 

        //Getters
        get 'PE_ADJUST'() : PE_ADJUST { return [this.$uid.toString(), 0]  as unknown as PE_ADJUST; }

        /**
          * Constructor
		 * @param opts.cap_initial_pe_length step: 1
		 * @param opts.interpolate_pe_to_length step: 1
		 * @param opts.initial_pe_idx_offset step: 1
		 * @param opts.final_pe_idx_offset step: 1
		 * @param opts.print_adjustment
		 * @param opts.prev_pe_adjust
		 * @param opts.autosize}
        */
        constructor(opts:{
            'cap_initial_pe_length'?: INT,'interpolate_pe_to_length'?: INT,'initial_pe_idx_offset'?: INT,'final_pe_idx_offset'?: INT,'print_adjustment'?: BOOLEAN,'prev_pe_adjust'?: PE_ADJUST,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("cap_initial_pe_length", opts['cap_initial_pe_length']??tmp["ADE_AdjustPEManual"].defaults['cap_initial_pe_length'])
super.$$link("interpolate_pe_to_length", opts['interpolate_pe_to_length']??tmp["ADE_AdjustPEManual"].defaults['interpolate_pe_to_length'])
super.$$link("initial_pe_idx_offset", opts['initial_pe_idx_offset']??tmp["ADE_AdjustPEManual"].defaults['initial_pe_idx_offset'])
super.$$link("final_pe_idx_offset", opts['final_pe_idx_offset']??tmp["ADE_AdjustPEManual"].defaults['final_pe_idx_offset'])
super.$$link("print_adjustment", opts['print_adjustment']??tmp["ADE_AdjustPEManual"].defaults['print_adjustment'])
super.$$link("prev_pe_adjust", opts['prev_pe_adjust'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'cap_initial_pe_length':  0,
'interpolate_pe_to_length':  0,
'initial_pe_idx_offset':  0,
'final_pe_idx_offset':  0,
'print_adjustment':  false
}
        protected override $$type(){
            return "ADE_AdjustPEManual"
        }
},

    /**
     * Adjust Weight [All◆Add] 🎭🅐🅓 from Animate Diff 🎭🅐🅓/ad settings/weight adjust
     * @desc 
    */
    "ADE_AdjustWeightAllAdd" : class extends Node{
        //Setters
        //set 'all_ADD'(value : FLOAT)  { super.$$link(0, value) } 
//set 'print_adjustment'(value : BOOLEAN)  { super.$$link(1, value) } 
//set 'prev_weight_adjust'(value : WEIGHT_ADJUST)  { super.$$link(2, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(3, value) } 

        //Getters
        get 'WEIGHT_ADJUST'() : WEIGHT_ADJUST { return [this.$uid.toString(), 0]  as unknown as WEIGHT_ADJUST; }

        /**
          * Constructor
		 * @param opts.all_ADD max: 2 min: -2 step: 0.000001
		 * @param opts.print_adjustment
		 * @param opts.prev_weight_adjust
		 * @param opts.autosize}
        */
        constructor(opts:{
            'all_ADD'?: FLOAT,'print_adjustment'?: BOOLEAN,'prev_weight_adjust'?: WEIGHT_ADJUST,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("all_ADD", opts['all_ADD']??tmp["ADE_AdjustWeightAllAdd"].defaults['all_ADD'])
super.$$link("print_adjustment", opts['print_adjustment']??tmp["ADE_AdjustWeightAllAdd"].defaults['print_adjustment'])
super.$$link("prev_weight_adjust", opts['prev_weight_adjust'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'all_ADD':  0,
'print_adjustment':  false
}
        protected override $$type(){
            return "ADE_AdjustWeightAllAdd"
        }
},

    /**
     * Adjust Weight [All◆Mult] 🎭🅐🅓 from Animate Diff 🎭🅐🅓/ad settings/weight adjust
     * @desc 
    */
    "ADE_AdjustWeightAllMult" : class extends Node{
        //Setters
        //set 'all_MULT'(value : FLOAT)  { super.$$link(0, value) } 
//set 'print_adjustment'(value : BOOLEAN)  { super.$$link(1, value) } 
//set 'prev_weight_adjust'(value : WEIGHT_ADJUST)  { super.$$link(2, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(3, value) } 

        //Getters
        get 'WEIGHT_ADJUST'() : WEIGHT_ADJUST { return [this.$uid.toString(), 0]  as unknown as WEIGHT_ADJUST; }

        /**
          * Constructor
		 * @param opts.all_MULT default: 1 step: 0.000001
		 * @param opts.print_adjustment
		 * @param opts.prev_weight_adjust
		 * @param opts.autosize}
        */
        constructor(opts:{
            'all_MULT'?: FLOAT,'print_adjustment'?: BOOLEAN,'prev_weight_adjust'?: WEIGHT_ADJUST,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("all_MULT", opts['all_MULT']??tmp["ADE_AdjustWeightAllMult"].defaults['all_MULT'])
super.$$link("print_adjustment", opts['print_adjustment']??tmp["ADE_AdjustWeightAllMult"].defaults['print_adjustment'])
super.$$link("prev_weight_adjust", opts['prev_weight_adjust'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'all_MULT':  1,
'print_adjustment':  false
}
        protected override $$type(){
            return "ADE_AdjustWeightAllMult"
        }
},

    /**
     * Adjust Weight [Indiv◆Add] 🎭🅐🅓 from Animate Diff 🎭🅐🅓/ad settings/weight adjust
     * @desc 
    */
    "ADE_AdjustWeightIndivAdd" : class extends Node{
        //Setters
        //set 'pe_ADD'(value : FLOAT)  { super.$$link(0, value) } 
//set 'attn_ADD'(value : FLOAT)  { super.$$link(1, value) } 
//set 'other_ADD'(value : FLOAT)  { super.$$link(2, value) } 
//set 'print_adjustment'(value : BOOLEAN)  { super.$$link(3, value) } 
//set 'prev_weight_adjust'(value : WEIGHT_ADJUST)  { super.$$link(4, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(5, value) } 

        //Getters
        get 'WEIGHT_ADJUST'() : WEIGHT_ADJUST { return [this.$uid.toString(), 0]  as unknown as WEIGHT_ADJUST; }

        /**
          * Constructor
		 * @param opts.pe_ADD max: 2 min: -2 step: 0.000001
		 * @param opts.attn_ADD max: 2 min: -2 step: 0.000001
		 * @param opts.other_ADD max: 2 min: -2 step: 0.000001
		 * @param opts.print_adjustment
		 * @param opts.prev_weight_adjust
		 * @param opts.autosize}
        */
        constructor(opts:{
            'pe_ADD'?: FLOAT,'attn_ADD'?: FLOAT,'other_ADD'?: FLOAT,'print_adjustment'?: BOOLEAN,'prev_weight_adjust'?: WEIGHT_ADJUST,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("pe_ADD", opts['pe_ADD']??tmp["ADE_AdjustWeightIndivAdd"].defaults['pe_ADD'])
super.$$link("attn_ADD", opts['attn_ADD']??tmp["ADE_AdjustWeightIndivAdd"].defaults['attn_ADD'])
super.$$link("other_ADD", opts['other_ADD']??tmp["ADE_AdjustWeightIndivAdd"].defaults['other_ADD'])
super.$$link("print_adjustment", opts['print_adjustment']??tmp["ADE_AdjustWeightIndivAdd"].defaults['print_adjustment'])
super.$$link("prev_weight_adjust", opts['prev_weight_adjust'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'pe_ADD':  0,
'attn_ADD':  0,
'other_ADD':  0,
'print_adjustment':  false
}
        protected override $$type(){
            return "ADE_AdjustWeightIndivAdd"
        }
},

    /**
     * Adjust Weight [Indiv◆Mult] 🎭🅐🅓 from Animate Diff 🎭🅐🅓/ad settings/weight adjust
     * @desc 
    */
    "ADE_AdjustWeightIndivMult" : class extends Node{
        //Setters
        //set 'pe_MULT'(value : FLOAT)  { super.$$link(0, value) } 
//set 'attn_MULT'(value : FLOAT)  { super.$$link(1, value) } 
//set 'other_MULT'(value : FLOAT)  { super.$$link(2, value) } 
//set 'print_adjustment'(value : BOOLEAN)  { super.$$link(3, value) } 
//set 'prev_weight_adjust'(value : WEIGHT_ADJUST)  { super.$$link(4, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(5, value) } 

        //Getters
        get 'WEIGHT_ADJUST'() : WEIGHT_ADJUST { return [this.$uid.toString(), 0]  as unknown as WEIGHT_ADJUST; }

        /**
          * Constructor
		 * @param opts.pe_MULT default: 1 step: 0.000001
		 * @param opts.attn_MULT default: 1 step: 0.000001
		 * @param opts.other_MULT default: 1 step: 0.000001
		 * @param opts.print_adjustment
		 * @param opts.prev_weight_adjust
		 * @param opts.autosize}
        */
        constructor(opts:{
            'pe_MULT'?: FLOAT,'attn_MULT'?: FLOAT,'other_MULT'?: FLOAT,'print_adjustment'?: BOOLEAN,'prev_weight_adjust'?: WEIGHT_ADJUST,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("pe_MULT", opts['pe_MULT']??tmp["ADE_AdjustWeightIndivMult"].defaults['pe_MULT'])
super.$$link("attn_MULT", opts['attn_MULT']??tmp["ADE_AdjustWeightIndivMult"].defaults['attn_MULT'])
super.$$link("other_MULT", opts['other_MULT']??tmp["ADE_AdjustWeightIndivMult"].defaults['other_MULT'])
super.$$link("print_adjustment", opts['print_adjustment']??tmp["ADE_AdjustWeightIndivMult"].defaults['print_adjustment'])
super.$$link("prev_weight_adjust", opts['prev_weight_adjust'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'pe_MULT':  1,
'attn_MULT':  1,
'other_MULT':  1,
'print_adjustment':  false
}
        protected override $$type(){
            return "ADE_AdjustWeightIndivMult"
        }
},

    /**
     * Adjust Weight [Indiv-Attn◆Add] 🎭🅐🅓 from Animate Diff 🎭🅐🅓/ad settings/weight adjust
     * @desc 
    */
    "ADE_AdjustWeightIndivAttnAdd" : class extends Node{
        //Setters
        //set 'pe_ADD'(value : FLOAT)  { super.$$link(0, value) } 
//set 'attn_ADD'(value : FLOAT)  { super.$$link(1, value) } 
//set 'attn_q_ADD'(value : FLOAT)  { super.$$link(2, value) } 
//set 'attn_k_ADD'(value : FLOAT)  { super.$$link(3, value) } 
//set 'attn_v_ADD'(value : FLOAT)  { super.$$link(4, value) } 
//set 'attn_out_weight_ADD'(value : FLOAT)  { super.$$link(5, value) } 
//set 'attn_out_bias_ADD'(value : FLOAT)  { super.$$link(6, value) } 
//set 'other_ADD'(value : FLOAT)  { super.$$link(7, value) } 
//set 'print_adjustment'(value : BOOLEAN)  { super.$$link(8, value) } 
//set 'prev_weight_adjust'(value : WEIGHT_ADJUST)  { super.$$link(9, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(10, value) } 

        //Getters
        get 'WEIGHT_ADJUST'() : WEIGHT_ADJUST { return [this.$uid.toString(), 0]  as unknown as WEIGHT_ADJUST; }

        /**
          * Constructor
		 * @param opts.pe_ADD max: 2 min: -2 step: 0.000001
		 * @param opts.attn_ADD max: 2 min: -2 step: 0.000001
		 * @param opts.attn_q_ADD max: 2 min: -2 step: 0.000001
		 * @param opts.attn_k_ADD max: 2 min: -2 step: 0.000001
		 * @param opts.attn_v_ADD max: 2 min: -2 step: 0.000001
		 * @param opts.attn_out_weight_ADD max: 2 min: -2 step: 0.000001
		 * @param opts.attn_out_bias_ADD max: 2 min: -2 step: 0.000001
		 * @param opts.other_ADD max: 2 min: -2 step: 0.000001
		 * @param opts.print_adjustment
		 * @param opts.prev_weight_adjust
		 * @param opts.autosize}
        */
        constructor(opts:{
            'pe_ADD'?: FLOAT,'attn_ADD'?: FLOAT,'attn_q_ADD'?: FLOAT,'attn_k_ADD'?: FLOAT,'attn_v_ADD'?: FLOAT,'attn_out_weight_ADD'?: FLOAT,'attn_out_bias_ADD'?: FLOAT,'other_ADD'?: FLOAT,'print_adjustment'?: BOOLEAN,'prev_weight_adjust'?: WEIGHT_ADJUST,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("pe_ADD", opts['pe_ADD']??tmp["ADE_AdjustWeightIndivAttnAdd"].defaults['pe_ADD'])
super.$$link("attn_ADD", opts['attn_ADD']??tmp["ADE_AdjustWeightIndivAttnAdd"].defaults['attn_ADD'])
super.$$link("attn_q_ADD", opts['attn_q_ADD']??tmp["ADE_AdjustWeightIndivAttnAdd"].defaults['attn_q_ADD'])
super.$$link("attn_k_ADD", opts['attn_k_ADD']??tmp["ADE_AdjustWeightIndivAttnAdd"].defaults['attn_k_ADD'])
super.$$link("attn_v_ADD", opts['attn_v_ADD']??tmp["ADE_AdjustWeightIndivAttnAdd"].defaults['attn_v_ADD'])
super.$$link("attn_out_weight_ADD", opts['attn_out_weight_ADD']??tmp["ADE_AdjustWeightIndivAttnAdd"].defaults['attn_out_weight_ADD'])
super.$$link("attn_out_bias_ADD", opts['attn_out_bias_ADD']??tmp["ADE_AdjustWeightIndivAttnAdd"].defaults['attn_out_bias_ADD'])
super.$$link("other_ADD", opts['other_ADD']??tmp["ADE_AdjustWeightIndivAttnAdd"].defaults['other_ADD'])
super.$$link("print_adjustment", opts['print_adjustment']??tmp["ADE_AdjustWeightIndivAttnAdd"].defaults['print_adjustment'])
super.$$link("prev_weight_adjust", opts['prev_weight_adjust'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'pe_ADD':  0,
'attn_ADD':  0,
'attn_q_ADD':  0,
'attn_k_ADD':  0,
'attn_v_ADD':  0,
'attn_out_weight_ADD':  0,
'attn_out_bias_ADD':  0,
'other_ADD':  0,
'print_adjustment':  false
}
        protected override $$type(){
            return "ADE_AdjustWeightIndivAttnAdd"
        }
},

    /**
     * Adjust Weight [Indiv-Attn◆Mult] 🎭🅐🅓 from Animate Diff 🎭🅐🅓/ad settings/weight adjust
     * @desc 
    */
    "ADE_AdjustWeightIndivAttnMult" : class extends Node{
        //Setters
        //set 'pe_MULT'(value : FLOAT)  { super.$$link(0, value) } 
//set 'attn_MULT'(value : FLOAT)  { super.$$link(1, value) } 
//set 'attn_q_MULT'(value : FLOAT)  { super.$$link(2, value) } 
//set 'attn_k_MULT'(value : FLOAT)  { super.$$link(3, value) } 
//set 'attn_v_MULT'(value : FLOAT)  { super.$$link(4, value) } 
//set 'attn_out_weight_MULT'(value : FLOAT)  { super.$$link(5, value) } 
//set 'attn_out_bias_MULT'(value : FLOAT)  { super.$$link(6, value) } 
//set 'other_MULT'(value : FLOAT)  { super.$$link(7, value) } 
//set 'print_adjustment'(value : BOOLEAN)  { super.$$link(8, value) } 
//set 'prev_weight_adjust'(value : WEIGHT_ADJUST)  { super.$$link(9, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(10, value) } 

        //Getters
        get 'WEIGHT_ADJUST'() : WEIGHT_ADJUST { return [this.$uid.toString(), 0]  as unknown as WEIGHT_ADJUST; }

        /**
          * Constructor
		 * @param opts.pe_MULT default: 1 step: 0.000001
		 * @param opts.attn_MULT default: 1 step: 0.000001
		 * @param opts.attn_q_MULT default: 1 step: 0.000001
		 * @param opts.attn_k_MULT default: 1 step: 0.000001
		 * @param opts.attn_v_MULT default: 1 step: 0.000001
		 * @param opts.attn_out_weight_MULT default: 1 step: 0.000001
		 * @param opts.attn_out_bias_MULT default: 1 step: 0.000001
		 * @param opts.other_MULT default: 1 step: 0.000001
		 * @param opts.print_adjustment
		 * @param opts.prev_weight_adjust
		 * @param opts.autosize}
        */
        constructor(opts:{
            'pe_MULT'?: FLOAT,'attn_MULT'?: FLOAT,'attn_q_MULT'?: FLOAT,'attn_k_MULT'?: FLOAT,'attn_v_MULT'?: FLOAT,'attn_out_weight_MULT'?: FLOAT,'attn_out_bias_MULT'?: FLOAT,'other_MULT'?: FLOAT,'print_adjustment'?: BOOLEAN,'prev_weight_adjust'?: WEIGHT_ADJUST,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("pe_MULT", opts['pe_MULT']??tmp["ADE_AdjustWeightIndivAttnMult"].defaults['pe_MULT'])
super.$$link("attn_MULT", opts['attn_MULT']??tmp["ADE_AdjustWeightIndivAttnMult"].defaults['attn_MULT'])
super.$$link("attn_q_MULT", opts['attn_q_MULT']??tmp["ADE_AdjustWeightIndivAttnMult"].defaults['attn_q_MULT'])
super.$$link("attn_k_MULT", opts['attn_k_MULT']??tmp["ADE_AdjustWeightIndivAttnMult"].defaults['attn_k_MULT'])
super.$$link("attn_v_MULT", opts['attn_v_MULT']??tmp["ADE_AdjustWeightIndivAttnMult"].defaults['attn_v_MULT'])
super.$$link("attn_out_weight_MULT", opts['attn_out_weight_MULT']??tmp["ADE_AdjustWeightIndivAttnMult"].defaults['attn_out_weight_MULT'])
super.$$link("attn_out_bias_MULT", opts['attn_out_bias_MULT']??tmp["ADE_AdjustWeightIndivAttnMult"].defaults['attn_out_bias_MULT'])
super.$$link("other_MULT", opts['other_MULT']??tmp["ADE_AdjustWeightIndivAttnMult"].defaults['other_MULT'])
super.$$link("print_adjustment", opts['print_adjustment']??tmp["ADE_AdjustWeightIndivAttnMult"].defaults['print_adjustment'])
super.$$link("prev_weight_adjust", opts['prev_weight_adjust'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'pe_MULT':  1,
'attn_MULT':  1,
'attn_q_MULT':  1,
'attn_k_MULT':  1,
'attn_v_MULT':  1,
'attn_out_weight_MULT':  1,
'attn_out_bias_MULT':  1,
'other_MULT':  1,
'print_adjustment':  false
}
        protected override $$type(){
            return "ADE_AdjustWeightIndivAttnMult"
        }
},

    /**
     * Custom CFG 🎭🅐🅓 from Animate Diff 🎭🅐🅓/sample settings/custom cfg
     * @desc 
    */
    "ADE_CustomCFGSimple" : class extends Node{
        //Setters
        //set 'cfg'(value : FLOAT)  { super.$$link(0, value) } 
//set 'cfg_extras'(value : CFG_EXTRAS)  { super.$$link(1, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(2, value) } 

        //Getters
        get 'CUSTOM_CFG'() : CUSTOM_CFG { return [this.$uid.toString(), 0]  as unknown as CUSTOM_CFG; }

        /**
          * Constructor
		 * @param opts.cfg default: 8 step: 0.1
		 * @param opts.cfg_extras
		 * @param opts.autosize}
        */
        constructor(opts:{
            'cfg'?: FLOAT,'cfg_extras'?: CFG_EXTRAS,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("cfg", opts['cfg']??tmp["ADE_CustomCFGSimple"].defaults['cfg'])
super.$$link("cfg_extras", opts['cfg_extras'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'cfg':  8
}
        protected override $$type(){
            return "ADE_CustomCFGSimple"
        }
},

    /**
     * Custom CFG [Multival] 🎭🅐🅓 from Animate Diff 🎭🅐🅓/sample settings/custom cfg
     * @desc 
    */
    "ADE_CustomCFG" : class extends Node{
        //Setters
        //set 'cfg_multival'(value : MULTIVAL)  { super.$$link(0, value) } 
//set 'cfg_extras'(value : CFG_EXTRAS)  { super.$$link(1, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(2, value) } 

        //Getters
        get 'CUSTOM_CFG'() : CUSTOM_CFG { return [this.$uid.toString(), 0]  as unknown as CUSTOM_CFG; }

        /**
          * Constructor
		 * @param opts.cfg_multival
		 * @param opts.cfg_extras
		 * @param opts.autosize}
        */
        constructor(opts:{
            'cfg_multival': MULTIVAL,'cfg_extras'?: CFG_EXTRAS,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("cfg_multival", opts['cfg_multival'])
super.$$link("cfg_extras", opts['cfg_extras'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ADE_CustomCFG"
        }
},

    /**
     * Custom CFG Keyframe 🎭🅐🅓 from Animate Diff 🎭🅐🅓/sample settings/custom cfg
     * @desc 
    */
    "ADE_CustomCFGKeyframeSimple" : class extends Node{
        //Setters
        //set 'cfg'(value : FLOAT)  { super.$$link(0, value) } 
//set 'start_percent'(value : FLOAT)  { super.$$link(1, value) } 
//set 'guarantee_steps'(value : INT)  { super.$$link(2, value) } 
//set 'prev_custom_cfg'(value : CUSTOM_CFG)  { super.$$link(3, value) } 
//set 'cfg_extras'(value : CFG_EXTRAS)  { super.$$link(4, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(5, value) } 

        //Getters
        get 'CUSTOM_CFG'() : CUSTOM_CFG { return [this.$uid.toString(), 0]  as unknown as CUSTOM_CFG; }

        /**
          * Constructor
		 * @param opts.cfg default: 8 step: 0.1
		 * @param opts.start_percent step: 0.001
		 * @param opts.guarantee_steps default: 1
		 * @param opts.prev_custom_cfg
		 * @param opts.cfg_extras
		 * @param opts.autosize}
        */
        constructor(opts:{
            'cfg'?: FLOAT,'start_percent'?: FLOAT,'guarantee_steps'?: INT,'prev_custom_cfg'?: CUSTOM_CFG,'cfg_extras'?: CFG_EXTRAS,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("cfg", opts['cfg']??tmp["ADE_CustomCFGKeyframeSimple"].defaults['cfg'])
super.$$link("start_percent", opts['start_percent']??tmp["ADE_CustomCFGKeyframeSimple"].defaults['start_percent'])
super.$$link("guarantee_steps", opts['guarantee_steps']??tmp["ADE_CustomCFGKeyframeSimple"].defaults['guarantee_steps'])
super.$$link("prev_custom_cfg", opts['prev_custom_cfg'])
super.$$link("cfg_extras", opts['cfg_extras'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'cfg':  8,
'start_percent':  0,
'guarantee_steps':  1
}
        protected override $$type(){
            return "ADE_CustomCFGKeyframeSimple"
        }
},

    /**
     * Custom CFG Keyframe [Multival] 🎭🅐🅓 from Animate Diff 🎭🅐🅓/sample settings/custom cfg
     * @desc 
    */
    "ADE_CustomCFGKeyframe" : class extends Node{
        //Setters
        //set 'cfg_multival'(value : MULTIVAL)  { super.$$link(0, value) } 
//set 'start_percent'(value : FLOAT)  { super.$$link(1, value) } 
//set 'guarantee_steps'(value : INT)  { super.$$link(2, value) } 
//set 'prev_custom_cfg'(value : CUSTOM_CFG)  { super.$$link(3, value) } 
//set 'cfg_extras'(value : CFG_EXTRAS)  { super.$$link(4, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(5, value) } 

        //Getters
        get 'CUSTOM_CFG'() : CUSTOM_CFG { return [this.$uid.toString(), 0]  as unknown as CUSTOM_CFG; }

        /**
          * Constructor
		 * @param opts.cfg_multival
		 * @param opts.start_percent step: 0.001
		 * @param opts.guarantee_steps default: 1
		 * @param opts.prev_custom_cfg
		 * @param opts.cfg_extras
		 * @param opts.autosize}
        */
        constructor(opts:{
            'cfg_multival': MULTIVAL,'start_percent'?: FLOAT,'guarantee_steps'?: INT,'prev_custom_cfg'?: CUSTOM_CFG,'cfg_extras'?: CFG_EXTRAS,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("cfg_multival", opts['cfg_multival'])
super.$$link("start_percent", opts['start_percent']??tmp["ADE_CustomCFGKeyframe"].defaults['start_percent'])
super.$$link("guarantee_steps", opts['guarantee_steps']??tmp["ADE_CustomCFGKeyframe"].defaults['guarantee_steps'])
super.$$link("prev_custom_cfg", opts['prev_custom_cfg'])
super.$$link("cfg_extras", opts['cfg_extras'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'start_percent':  0,
'guarantee_steps':  1
}
        protected override $$type(){
            return "ADE_CustomCFGKeyframe"
        }
},

    /**
     * Custom CFG Keyframes Interp. 🎭🅐🅓 from Animate Diff 🎭🅐🅓/sample settings/custom cfg
     * @desc 
    */
    "ADE_CustomCFGKeyframeInterpolation" : class extends Node{
        //Setters
        //set 'start_percent'(value : FLOAT)  { super.$$link(0, value) } 
//set 'end_percent'(value : FLOAT)  { super.$$link(1, value) } 
//set 'cfg_start'(value : FLOAT)  { super.$$link(2, value) } 
//set 'cfg_end'(value : FLOAT)  { super.$$link(3, value) } 
//set 'interpolation'(value : 'linear'|'ease_in'|'ease_out'|'ease_in_out'| $dyn)  { super.$$link(4, value) } 
//set 'intervals'(value : INT)  { super.$$link(5, value) } 
//set 'print_keyframes'(value : BOOLEAN)  { super.$$link(6, value) } 
//set 'prev_custom_cfg'(value : CUSTOM_CFG)  { super.$$link(7, value) } 
//set 'cfg_extras'(value : CFG_EXTRAS)  { super.$$link(8, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(9, value) } 

        //Getters
        get 'CUSTOM_CFG'() : CUSTOM_CFG { return [this.$uid.toString(), 0]  as unknown as CUSTOM_CFG; }

        /**
          * Constructor
		 * @param opts.start_percent step: 0.001
		 * @param opts.end_percent default: 1 step: 0.001
		 * @param opts.cfg_start default: 8 step: 0.1
		 * @param opts.cfg_end default: 8 step: 0.1
		 * @param opts.interpolation
		 * @param opts.intervals default: 50 max: 100 min: 2 step: 1
		 * @param opts.print_keyframes
		 * @param opts.prev_custom_cfg
		 * @param opts.cfg_extras
		 * @param opts.autosize}
        */
        constructor(opts:{
            'start_percent'?: FLOAT,'end_percent'?: FLOAT,'cfg_start'?: FLOAT,'cfg_end'?: FLOAT,'interpolation': 'linear'|'ease_in'|'ease_out'|'ease_in_out'| $dyn,'intervals'?: INT,'print_keyframes'?: BOOLEAN,'prev_custom_cfg'?: CUSTOM_CFG,'cfg_extras'?: CFG_EXTRAS,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("start_percent", opts['start_percent']??tmp["ADE_CustomCFGKeyframeInterpolation"].defaults['start_percent'])
super.$$link("end_percent", opts['end_percent']??tmp["ADE_CustomCFGKeyframeInterpolation"].defaults['end_percent'])
super.$$link("cfg_start", opts['cfg_start']??tmp["ADE_CustomCFGKeyframeInterpolation"].defaults['cfg_start'])
super.$$link("cfg_end", opts['cfg_end']??tmp["ADE_CustomCFGKeyframeInterpolation"].defaults['cfg_end'])
super.$$link("interpolation", opts['interpolation'])
super.$$link("intervals", opts['intervals']??tmp["ADE_CustomCFGKeyframeInterpolation"].defaults['intervals'])
super.$$link("print_keyframes", opts['print_keyframes']??tmp["ADE_CustomCFGKeyframeInterpolation"].defaults['print_keyframes'])
super.$$link("prev_custom_cfg", opts['prev_custom_cfg'])
super.$$link("cfg_extras", opts['cfg_extras'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'start_percent':  0,
'end_percent':  1,
'cfg_start':  8,
'cfg_end':  8,
'intervals':  50,
'print_keyframes':  false
}
        protected override $$type(){
            return "ADE_CustomCFGKeyframeInterpolation"
        }
},

    /**
     * Custom CFG Keyframes From List 🎭🅐🅓 from Animate Diff 🎭🅐🅓/sample settings/custom cfg
     * @desc 
    */
    "ADE_CustomCFGKeyframeFromList" : class extends Node{
        //Setters
        //set 'cfgs_float'(value : FLOAT)  { super.$$link(0, value) } 
//set 'start_percent'(value : FLOAT)  { super.$$link(1, value) } 
//set 'end_percent'(value : FLOAT)  { super.$$link(2, value) } 
//set 'print_keyframes'(value : BOOLEAN)  { super.$$link(3, value) } 
//set 'prev_custom_cfg'(value : CUSTOM_CFG)  { super.$$link(4, value) } 
//set 'cfg_extras'(value : CFG_EXTRAS)  { super.$$link(5, value) } 

        //Getters
        get 'CUSTOM_CFG'() : CUSTOM_CFG { return [this.$uid.toString(), 0]  as unknown as CUSTOM_CFG; }

        /**
          * Constructor
		 * @param opts.cfgs_float default: -1 max: undefined min: -1 step: 0.001
		 * @param opts.start_percent step: 0.001
		 * @param opts.end_percent default: 1 step: 0.001
		 * @param opts.print_keyframes
		 * @param opts.prev_custom_cfg
		 * @param opts.cfg_extras}
        */
        constructor(opts:{
            'cfgs_float'?: FLOAT,'start_percent'?: FLOAT,'end_percent'?: FLOAT,'print_keyframes'?: BOOLEAN,'prev_custom_cfg'?: CUSTOM_CFG,'cfg_extras'?: CFG_EXTRAS
        }){
            super(ctx);

            super.$$link("cfgs_float", opts['cfgs_float']??tmp["ADE_CustomCFGKeyframeFromList"].defaults['cfgs_float'])
super.$$link("start_percent", opts['start_percent']??tmp["ADE_CustomCFGKeyframeFromList"].defaults['start_percent'])
super.$$link("end_percent", opts['end_percent']??tmp["ADE_CustomCFGKeyframeFromList"].defaults['end_percent'])
super.$$link("print_keyframes", opts['print_keyframes']??tmp["ADE_CustomCFGKeyframeFromList"].defaults['print_keyframes'])
super.$$link("prev_custom_cfg", opts['prev_custom_cfg'])
super.$$link("cfg_extras", opts['cfg_extras'])
}

        static defaults = {
    'cfgs_float':  -1,
'start_percent':  0,
'end_percent':  1,
'print_keyframes':  false
}
        protected override $$type(){
            return "ADE_CustomCFGKeyframeFromList"
        }
},

    /**
     * CFG Extras◆PAG 🎭🅐🅓 from Animate Diff 🎭🅐🅓/sample settings/cfg extras
     * @desc 
    */
    "ADE_CFGExtrasPAGSimple" : class extends Node{
        //Setters
        //set 'scale'(value : FLOAT)  { super.$$link(0, value) } 
//set 'prev_extras'(value : CFG_EXTRAS)  { super.$$link(1, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(2, value) } 

        //Getters
        get 'CFG_EXTRAS'() : CFG_EXTRAS { return [this.$uid.toString(), 0]  as unknown as CFG_EXTRAS; }

        /**
          * Constructor
		 * @param opts.scale default: 3 step: 0.1
		 * @param opts.prev_extras
		 * @param opts.autosize}
        */
        constructor(opts:{
            'scale'?: FLOAT,'prev_extras'?: CFG_EXTRAS,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("scale", opts['scale']??tmp["ADE_CFGExtrasPAGSimple"].defaults['scale'])
super.$$link("prev_extras", opts['prev_extras'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'scale':  3
}
        protected override $$type(){
            return "ADE_CFGExtrasPAGSimple"
        }
},

    /**
     * CFG Extras◆PAG [Multival] 🎭🅐🅓 from Animate Diff 🎭🅐🅓/sample settings/cfg extras
     * @desc 
    */
    "ADE_CFGExtrasPAG" : class extends Node{
        //Setters
        //set 'scale_multival'(value : MULTIVAL)  { super.$$link(0, value) } 
//set 'prev_extras'(value : CFG_EXTRAS)  { super.$$link(1, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(2, value) } 

        //Getters
        get 'CFG_EXTRAS'() : CFG_EXTRAS { return [this.$uid.toString(), 0]  as unknown as CFG_EXTRAS; }

        /**
          * Constructor
		 * @param opts.scale_multival
		 * @param opts.prev_extras
		 * @param opts.autosize}
        */
        constructor(opts:{
            'scale_multival': MULTIVAL,'prev_extras'?: CFG_EXTRAS,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("scale_multival", opts['scale_multival'])
super.$$link("prev_extras", opts['prev_extras'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ADE_CFGExtrasPAG"
        }
},

    /**
     * CFG Extras◆RescaleCFG 🎭🅐🅓 from Animate Diff 🎭🅐🅓/sample settings/cfg extras
     * @desc 
    */
    "ADE_CFGExtrasRescaleCFGSimple" : class extends Node{
        //Setters
        //set 'multiplier'(value : FLOAT)  { super.$$link(0, value) } 
//set 'prev_extras'(value : CFG_EXTRAS)  { super.$$link(1, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(2, value) } 

        //Getters
        get 'CFG_EXTRAS'() : CFG_EXTRAS { return [this.$uid.toString(), 0]  as unknown as CFG_EXTRAS; }

        /**
          * Constructor
		 * @param opts.multiplier default: 0.7 step: 0.01
		 * @param opts.prev_extras
		 * @param opts.autosize}
        */
        constructor(opts:{
            'multiplier'?: FLOAT,'prev_extras'?: CFG_EXTRAS,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("multiplier", opts['multiplier']??tmp["ADE_CFGExtrasRescaleCFGSimple"].defaults['multiplier'])
super.$$link("prev_extras", opts['prev_extras'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'multiplier':  0.7
}
        protected override $$type(){
            return "ADE_CFGExtrasRescaleCFGSimple"
        }
},

    /**
     * CFG Extras◆RescaleCFG [Multival] 🎭🅐🅓 from Animate Diff 🎭🅐🅓/sample settings/cfg extras
     * @desc 
    */
    "ADE_CFGExtrasRescaleCFG" : class extends Node{
        //Setters
        //set 'mult_multival'(value : MULTIVAL)  { super.$$link(0, value) } 
//set 'prev_extras'(value : CFG_EXTRAS)  { super.$$link(1, value) } 

        //Getters
        get 'CFG_EXTRAS'() : CFG_EXTRAS { return [this.$uid.toString(), 0]  as unknown as CFG_EXTRAS; }

        /**
          * Constructor
		 * @param opts.mult_multival
		 * @param opts.prev_extras}
        */
        constructor(opts:{
            'mult_multival': MULTIVAL,'prev_extras'?: CFG_EXTRAS
        }){
            super(ctx);

            super.$$link("mult_multival", opts['mult_multival'])
super.$$link("prev_extras", opts['prev_extras'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ADE_CFGExtrasRescaleCFG"
        }
},

    /**
     * Create Sigma Schedule 🎭🅐🅓 from Animate Diff 🎭🅐🅓/sample settings/sigma schedule
     * @desc 
    */
    "ADE_SigmaSchedule" : class extends Node{
        //Setters
        //set 'beta_schedule'(value : 'sqrt_linear (AnimateDiff)'|'linear (AnimateDiff-SDXL)'|'linear (HotshotXL/default)'|'avg(sqrt_linear,linear)'|'lcm avg(sqrt_linear,linear)'|'lcm'|'lcm[100_ots]'|'lcm >> sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'SIGMA_SCHEDULE'() : SIGMA_SCHEDULE { return [this.$uid.toString(), 0]  as unknown as SIGMA_SCHEDULE; }

        /**
          * Constructor
		 * @param opts.beta_schedule}
        */
        constructor(opts:{
            'beta_schedule': 'sqrt_linear (AnimateDiff)'|'linear (AnimateDiff-SDXL)'|'linear (HotshotXL/default)'|'avg(sqrt_linear,linear)'|'lcm avg(sqrt_linear,linear)'|'lcm'|'lcm[100_ots]'|'lcm >> sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2'| $dyn
        }){
            super(ctx);

            super.$$link("beta_schedule", opts['beta_schedule'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ADE_SigmaSchedule"
        }
},

    /**
     * Create Raw Sigma Schedule 🎭🅐🅓 from Animate Diff 🎭🅐🅓/sample settings/sigma schedule
     * @desc 
    */
    "ADE_RawSigmaSchedule" : class extends Node{
        //Setters
        //set 'raw_beta_schedule'(value : 'linear'|'sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2'| $dyn)  { super.$$link(0, value) } 
//set 'linear_start'(value : FLOAT)  { super.$$link(1, value) } 
//set 'linear_end'(value : FLOAT)  { super.$$link(2, value) } 
//set 'sampling'(value : 'eps'|'v_prediction'|'lcm'| $dyn)  { super.$$link(3, value) } 
//set 'lcm_original_timesteps'(value : INT)  { super.$$link(4, value) } 
//set 'lcm_zsnr'(value : BOOLEAN)  { super.$$link(5, value) } 

        //Getters
        get 'SIGMA_SCHEDULE'() : SIGMA_SCHEDULE { return [this.$uid.toString(), 0]  as unknown as SIGMA_SCHEDULE; }

        /**
          * Constructor
		 * @param opts.raw_beta_schedule
		 * @param opts.linear_start default: 0.00085 step: 0.000001
		 * @param opts.linear_end default: 0.012 step: 0.000001
		 * @param opts.sampling
		 * @param opts.lcm_original_timesteps default: 50 max: 1000 min: 1
		 * @param opts.lcm_zsnr}
        */
        constructor(opts:{
            'raw_beta_schedule': 'linear'|'sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2'| $dyn,'linear_start'?: FLOAT,'linear_end'?: FLOAT,'sampling': 'eps'|'v_prediction'|'lcm'| $dyn,'lcm_original_timesteps'?: INT,'lcm_zsnr'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("raw_beta_schedule", opts['raw_beta_schedule'])
super.$$link("linear_start", opts['linear_start']??tmp["ADE_RawSigmaSchedule"].defaults['linear_start'])
super.$$link("linear_end", opts['linear_end']??tmp["ADE_RawSigmaSchedule"].defaults['linear_end'])
super.$$link("sampling", opts['sampling'])
super.$$link("lcm_original_timesteps", opts['lcm_original_timesteps']??tmp["ADE_RawSigmaSchedule"].defaults['lcm_original_timesteps'])
super.$$link("lcm_zsnr", opts['lcm_zsnr']??tmp["ADE_RawSigmaSchedule"].defaults['lcm_zsnr'])
}

        static defaults = {
    'linear_start':  0.00085,
'linear_end':  0.012,
'lcm_original_timesteps':  50,
'lcm_zsnr':  false
}
        protected override $$type(){
            return "ADE_RawSigmaSchedule"
        }
},

    /**
     * Sigma Schedule Weighted Mean 🎭🅐🅓 from Animate Diff 🎭🅐🅓/sample settings/sigma schedule
     * @desc 
    */
    "ADE_SigmaScheduleWeightedAverage" : class extends Node{
        //Setters
        //set 'schedule_A'(value : SIGMA_SCHEDULE)  { super.$$link(0, value) } 
//set 'schedule_B'(value : SIGMA_SCHEDULE)  { super.$$link(1, value) } 
//set 'weight_A'(value : FLOAT)  { super.$$link(2, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(3, value) } 

        //Getters
        get 'SIGMA_SCHEDULE'() : SIGMA_SCHEDULE { return [this.$uid.toString(), 0]  as unknown as SIGMA_SCHEDULE; }

        /**
          * Constructor
		 * @param opts.schedule_A
		 * @param opts.schedule_B
		 * @param opts.weight_A default: 0.5 step: 0.001
		 * @param opts.autosize}
        */
        constructor(opts:{
            'schedule_A': SIGMA_SCHEDULE,'schedule_B': SIGMA_SCHEDULE,'weight_A'?: FLOAT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("schedule_A", opts['schedule_A'])
super.$$link("schedule_B", opts['schedule_B'])
super.$$link("weight_A", opts['weight_A']??tmp["ADE_SigmaScheduleWeightedAverage"].defaults['weight_A'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'weight_A':  0.5
}
        protected override $$type(){
            return "ADE_SigmaScheduleWeightedAverage"
        }
},

    /**
     * Sigma Schedule Interp. Mean 🎭🅐🅓 from Animate Diff 🎭🅐🅓/sample settings/sigma schedule
     * @desc 
    */
    "ADE_SigmaScheduleWeightedAverageInterp" : class extends Node{
        //Setters
        //set 'schedule_A'(value : SIGMA_SCHEDULE)  { super.$$link(0, value) } 
//set 'schedule_B'(value : SIGMA_SCHEDULE)  { super.$$link(1, value) } 
//set 'weight_A_Start'(value : FLOAT)  { super.$$link(2, value) } 
//set 'weight_A_End'(value : FLOAT)  { super.$$link(3, value) } 
//set 'interpolation'(value : 'linear'|'ease_in'|'ease_out'|'ease_in_out'| $dyn)  { super.$$link(4, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(5, value) } 

        //Getters
        get 'SIGMA_SCHEDULE'() : SIGMA_SCHEDULE { return [this.$uid.toString(), 0]  as unknown as SIGMA_SCHEDULE; }

        /**
          * Constructor
		 * @param opts.schedule_A
		 * @param opts.schedule_B
		 * @param opts.weight_A_Start default: 0.5 step: 0.001
		 * @param opts.weight_A_End default: 0.5 step: 0.001
		 * @param opts.interpolation
		 * @param opts.autosize}
        */
        constructor(opts:{
            'schedule_A': SIGMA_SCHEDULE,'schedule_B': SIGMA_SCHEDULE,'weight_A_Start'?: FLOAT,'weight_A_End'?: FLOAT,'interpolation': 'linear'|'ease_in'|'ease_out'|'ease_in_out'| $dyn,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("schedule_A", opts['schedule_A'])
super.$$link("schedule_B", opts['schedule_B'])
super.$$link("weight_A_Start", opts['weight_A_Start']??tmp["ADE_SigmaScheduleWeightedAverageInterp"].defaults['weight_A_Start'])
super.$$link("weight_A_End", opts['weight_A_End']??tmp["ADE_SigmaScheduleWeightedAverageInterp"].defaults['weight_A_End'])
super.$$link("interpolation", opts['interpolation'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'weight_A_Start':  0.5,
'weight_A_End':  0.5
}
        protected override $$type(){
            return "ADE_SigmaScheduleWeightedAverageInterp"
        }
},

    /**
     * Sigma Schedule Split Combine 🎭🅐🅓 from Animate Diff 🎭🅐🅓/sample settings/sigma schedule
     * @desc 
    */
    "ADE_SigmaScheduleSplitAndCombine" : class extends Node{
        //Setters
        //set 'schedule_Start'(value : SIGMA_SCHEDULE)  { super.$$link(0, value) } 
//set 'schedule_End'(value : SIGMA_SCHEDULE)  { super.$$link(1, value) } 
//set 'idx_split_percent'(value : FLOAT)  { super.$$link(2, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(3, value) } 

        //Getters
        get 'SIGMA_SCHEDULE'() : SIGMA_SCHEDULE { return [this.$uid.toString(), 0]  as unknown as SIGMA_SCHEDULE; }

        /**
          * Constructor
		 * @param opts.schedule_Start
		 * @param opts.schedule_End
		 * @param opts.idx_split_percent default: 0.5 step: 0.001
		 * @param opts.autosize}
        */
        constructor(opts:{
            'schedule_Start': SIGMA_SCHEDULE,'schedule_End': SIGMA_SCHEDULE,'idx_split_percent'?: FLOAT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("schedule_Start", opts['schedule_Start'])
super.$$link("schedule_End", opts['schedule_End'])
super.$$link("idx_split_percent", opts['idx_split_percent']??tmp["ADE_SigmaScheduleSplitAndCombine"].defaults['idx_split_percent'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'idx_split_percent':  0.5
}
        protected override $$type(){
            return "ADE_SigmaScheduleSplitAndCombine"
        }
},

    /**
     * Sigma Schedule To Sigmas 🎭🅐🅓 from Animate Diff 🎭🅐🅓/sample settings/sigma schedule
     * @desc 
    */
    "ADE_SigmaScheduleToSigmas" : class extends Node{
        //Setters
        //set 'sigma_schedule'(value : SIGMA_SCHEDULE)  { super.$$link(0, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn)  { super.$$link(1, value) } 
//set 'steps'(value : INT)  { super.$$link(2, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(3, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(4, value) } 

        //Getters
        get 'SIGMAS'() : SIGMAS { return [this.$uid.toString(), 0]  as unknown as SIGMAS; }

        /**
          * Constructor
		 * @param opts.sigma_schedule
		 * @param opts.scheduler
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.denoise default: 1 step: 0.01
		 * @param opts.autosize}
        */
        constructor(opts:{
            'sigma_schedule': SIGMA_SCHEDULE,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn,'steps'?: INT,'denoise'?: FLOAT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("sigma_schedule", opts['sigma_schedule'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("steps", opts['steps']??tmp["ADE_SigmaScheduleToSigmas"].defaults['steps'])
super.$$link("denoise", opts['denoise']??tmp["ADE_SigmaScheduleToSigmas"].defaults['denoise'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'steps':  20,
'denoise':  1
}
        protected override $$type(){
            return "ADE_SigmaScheduleToSigmas"
        }
},

    /**
     * Image Injection 🎭🅐🅓 from Animate Diff 🎭🅐🅓/sample settings/image inject
     * @desc 
    */
    "ADE_NoisedImageInjection" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'vae'(value : VAE)  { super.$$link(1, value) } 
//set 'mask_opt'(value : MASK)  { super.$$link(2, value) } 
//set 'invert_mask'(value : BOOLEAN)  { super.$$link(3, value) } 
//set 'resize_image'(value : BOOLEAN)  { super.$$link(4, value) } 
//set 'start_percent'(value : FLOAT)  { super.$$link(5, value) } 
//set 'guarantee_steps'(value : INT)  { super.$$link(6, value) } 
//set 'img_inject_opts'(value : IMAGE_INJECT_OPTIONS)  { super.$$link(7, value) } 
//set 'strength_multival'(value : MULTIVAL)  { super.$$link(8, value) } 
//set 'prev_image_inject'(value : IMAGE_INJECT)  { super.$$link(9, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(10, value) } 

        //Getters
        get 'IMAGE_INJECT'() : IMAGE_INJECT { return [this.$uid.toString(), 0]  as unknown as IMAGE_INJECT; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.vae
		 * @param opts.mask_opt
		 * @param opts.invert_mask
		 * @param opts.resize_image default: true
		 * @param opts.start_percent step: 0.001
		 * @param opts.guarantee_steps default: 1 max: 9007199254740991 min: 1
		 * @param opts.img_inject_opts
		 * @param opts.strength_multival
		 * @param opts.prev_image_inject
		 * @param opts.autosize}
        */
        constructor(opts:{
            'image': IMAGE,'vae': VAE,'mask_opt'?: MASK,'invert_mask'?: BOOLEAN,'resize_image'?: BOOLEAN,'start_percent'?: FLOAT,'guarantee_steps'?: INT,'img_inject_opts'?: IMAGE_INJECT_OPTIONS,'strength_multival'?: MULTIVAL,'prev_image_inject'?: IMAGE_INJECT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("vae", opts['vae'])
super.$$link("mask_opt", opts['mask_opt'])
super.$$link("invert_mask", opts['invert_mask']??tmp["ADE_NoisedImageInjection"].defaults['invert_mask'])
super.$$link("resize_image", opts['resize_image']??tmp["ADE_NoisedImageInjection"].defaults['resize_image'])
super.$$link("start_percent", opts['start_percent']??tmp["ADE_NoisedImageInjection"].defaults['start_percent'])
super.$$link("guarantee_steps", opts['guarantee_steps']??tmp["ADE_NoisedImageInjection"].defaults['guarantee_steps'])
super.$$link("img_inject_opts", opts['img_inject_opts'])
super.$$link("strength_multival", opts['strength_multival'])
super.$$link("prev_image_inject", opts['prev_image_inject'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'invert_mask':  false,
'resize_image':  true,
'start_percent':  0,
'guarantee_steps':  1
}
        protected override $$type(){
            return "ADE_NoisedImageInjection"
        }
},

    /**
     * Image Injection Options 🎭🅐🅓 from Animate Diff 🎭🅐🅓/sample settings/image inject
     * @desc 
    */
    "ADE_NoisedImageInjectOptions" : class extends Node{
        //Setters
        //set 'composite_x'(value : INT)  { super.$$link(0, value) } 
//set 'composite_y'(value : INT)  { super.$$link(1, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(2, value) } 

        //Getters
        get 'IMG_INJECT_OPTS'() : IMAGE_INJECT_OPTIONS { return [this.$uid.toString(), 0]  as unknown as IMAGE_INJECT_OPTIONS; }

        /**
          * Constructor
		 * @param opts.composite_x step: 1
		 * @param opts.composite_y step: 1
		 * @param opts.autosize}
        */
        constructor(opts:{
            'composite_x'?: INT,'composite_y'?: INT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("composite_x", opts['composite_x']??tmp["ADE_NoisedImageInjectOptions"].defaults['composite_x'])
super.$$link("composite_y", opts['composite_y']??tmp["ADE_NoisedImageInjectOptions"].defaults['composite_y'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'composite_x':  0,
'composite_y':  0
}
        protected override $$type(){
            return "ADE_NoisedImageInjectOptions"
        }
},

    /**
     * AnimateDiff Unload 🎭🅐🅓 from Animate Diff 🎭🅐🅓/extras
     * @desc 
    */
    "ADE_AnimateDiffUnload" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model}
        */
        constructor(opts:{
            'model': MODEL
        }){
            super(ctx);

            super.$$link("model", opts['model'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ADE_AnimateDiffUnload"
        }
},

    /**
     * Empty Latent Image (Big Batch) 🎭🅐🅓 from Animate Diff 🎭🅐🅓/extras
     * @desc 
    */
    "ADE_EmptyLatentImageLarge" : class extends Node{
        //Setters
        //set 'width'(value : INT)  { super.$$link(0, value) } 
//set 'height'(value : INT)  { super.$$link(1, value) } 
//set 'batch_size'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.width default: 512 max: 16384 min: 64 step: 8
		 * @param opts.height default: 512 max: 16384 min: 64 step: 8
		 * @param opts.batch_size default: 1 max: 262144 min: 1}
        */
        constructor(opts:{
            'width'?: INT,'height'?: INT,'batch_size'?: INT
        }){
            super(ctx);

            super.$$link("width", opts['width']??tmp["ADE_EmptyLatentImageLarge"].defaults['width'])
super.$$link("height", opts['height']??tmp["ADE_EmptyLatentImageLarge"].defaults['height'])
super.$$link("batch_size", opts['batch_size']??tmp["ADE_EmptyLatentImageLarge"].defaults['batch_size'])
}

        static defaults = {
    'width':  512,
'height':  512,
'batch_size':  1
}
        protected override $$type(){
            return "ADE_EmptyLatentImageLarge"
        }
},

    /**
     * Load Checkpoint w/ Noise Select 🎭🅐🅓 from Animate Diff 🎭🅐🅓/extras
     * @desc 
    */
    "CheckpointLoaderSimpleWithNoiseSelect" : class extends Node{
        //Setters
        //set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn)  { super.$$link(0, value) } 
//set 'beta_schedule'(value : 'autoselect'|'use existing'|'sqrt_linear (AnimateDiff)'|'linear (AnimateDiff-SDXL)'|'linear (HotshotXL/default)'|'avg(sqrt_linear,linear)'|'lcm avg(sqrt_linear,linear)'|'lcm'|'lcm[100_ots]'|'lcm >> sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2'| $dyn)  { super.$$link(1, value) } 
//set 'use_custom_scale_factor'(value : BOOLEAN)  { super.$$link(2, value) } 
//set 'scale_factor'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this.$uid.toString(), 1]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this.$uid.toString(), 2]  as unknown as VAE; }

        /**
          * Constructor
		 * @param opts.ckpt_name
		 * @param opts.beta_schedule default: "use existing"
		 * @param opts.use_custom_scale_factor
		 * @param opts.scale_factor default: 0.18215 step: 0.00001}
        */
        constructor(opts:{
            'ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'flux1-dev-bnb-nf4-v2.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'| $dyn,'beta_schedule'?: 'autoselect'|'use existing'|'sqrt_linear (AnimateDiff)'|'linear (AnimateDiff-SDXL)'|'linear (HotshotXL/default)'|'avg(sqrt_linear,linear)'|'lcm avg(sqrt_linear,linear)'|'lcm'|'lcm[100_ots]'|'lcm >> sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2'| $dyn,'use_custom_scale_factor'?: BOOLEAN,'scale_factor'?: FLOAT
        }){
            super(ctx);

            super.$$link("ckpt_name", opts['ckpt_name'])
super.$$link("beta_schedule", opts['beta_schedule']??tmp["CheckpointLoaderSimpleWithNoiseSelect"].defaults['beta_schedule'])
super.$$link("use_custom_scale_factor", opts['use_custom_scale_factor']??tmp["CheckpointLoaderSimpleWithNoiseSelect"].defaults['use_custom_scale_factor'])
super.$$link("scale_factor", opts['scale_factor']??tmp["CheckpointLoaderSimpleWithNoiseSelect"].defaults['scale_factor'])
}

        static defaults = {
    'beta_schedule':  "use existing",
'use_custom_scale_factor':  false,
'scale_factor':  0.18215
}
        protected override $$type(){
            return "CheckpointLoaderSimpleWithNoiseSelect"
        }
},

    /**
     * PerturbedAttnGuide [Multival] 🎭🅐🅓 from Animate Diff 🎭🅐🅓/extras
     * @desc 
    */
    "ADE_PerturbedAttentionGuidanceMultival" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'scale_multival'(value : MULTIVAL)  { super.$$link(1, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.scale_multival}
        */
        constructor(opts:{
            'model': MODEL,'scale_multival': MULTIVAL
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("scale_multival", opts['scale_multival'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ADE_PerturbedAttentionGuidanceMultival"
        }
},

    /**
     * RescaleCFG [Multival] 🎭🅐🅓 from Animate Diff 🎭🅐🅓/extras
     * @desc 
    */
    "ADE_RescaleCFGMultival" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'mult_multival'(value : MULTIVAL)  { super.$$link(1, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.mult_multival}
        */
        constructor(opts:{
            'model': MODEL,'mult_multival': MULTIVAL
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("mult_multival", opts['mult_multival'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ADE_RescaleCFGMultival"
        }
},

    /**
     * AnimateDiff Loader 🎭🅐🅓① from Animate Diff 🎭🅐🅓/① Gen1 nodes ①
     * @desc 
    */
    "ADE_AnimateDiffLoaderGen1" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'model_name'(value : 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt'| $dyn)  { super.$$link(1, value) } 
//set 'beta_schedule'(value : 'autoselect'|'use existing'|'sqrt_linear (AnimateDiff)'|'linear (AnimateDiff-SDXL)'|'linear (HotshotXL/default)'|'avg(sqrt_linear,linear)'|'lcm avg(sqrt_linear,linear)'|'lcm'|'lcm[100_ots]'|'lcm >> sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2'| $dyn)  { super.$$link(2, value) } 
//set 'context_options'(value : CONTEXT_OPTIONS)  { super.$$link(3, value) } 
//set 'motion_lora'(value : MOTION_LORA)  { super.$$link(4, value) } 
//set 'ad_settings'(value : AD_SETTINGS)  { super.$$link(5, value) } 
//set 'ad_keyframes'(value : AD_KEYFRAMES)  { super.$$link(6, value) } 
//set 'sample_settings'(value : SAMPLE_SETTINGS)  { super.$$link(7, value) } 
//set 'scale_multival'(value : MULTIVAL)  { super.$$link(8, value) } 
//set 'effect_multival'(value : MULTIVAL)  { super.$$link(9, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.model_name
		 * @param opts.beta_schedule default: "autoselect"
		 * @param opts.context_options
		 * @param opts.motion_lora
		 * @param opts.ad_settings
		 * @param opts.ad_keyframes
		 * @param opts.sample_settings
		 * @param opts.scale_multival
		 * @param opts.effect_multival}
        */
        constructor(opts:{
            'model': MODEL,'model_name': 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt'| $dyn,'beta_schedule'?: 'autoselect'|'use existing'|'sqrt_linear (AnimateDiff)'|'linear (AnimateDiff-SDXL)'|'linear (HotshotXL/default)'|'avg(sqrt_linear,linear)'|'lcm avg(sqrt_linear,linear)'|'lcm'|'lcm[100_ots]'|'lcm >> sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2'| $dyn,'context_options'?: CONTEXT_OPTIONS,'motion_lora'?: MOTION_LORA,'ad_settings'?: AD_SETTINGS,'ad_keyframes'?: AD_KEYFRAMES,'sample_settings'?: SAMPLE_SETTINGS,'scale_multival'?: MULTIVAL,'effect_multival'?: MULTIVAL
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("model_name", opts['model_name'])
super.$$link("beta_schedule", opts['beta_schedule']??tmp["ADE_AnimateDiffLoaderGen1"].defaults['beta_schedule'])
super.$$link("context_options", opts['context_options'])
super.$$link("motion_lora", opts['motion_lora'])
super.$$link("ad_settings", opts['ad_settings'])
super.$$link("ad_keyframes", opts['ad_keyframes'])
super.$$link("sample_settings", opts['sample_settings'])
super.$$link("scale_multival", opts['scale_multival'])
super.$$link("effect_multival", opts['effect_multival'])
}

        static defaults = {
    'beta_schedule':  "autoselect"
}
        protected override $$type(){
            return "ADE_AnimateDiffLoaderGen1"
        }
},

    /**
     * AnimateDiff Loader [Legacy] 🎭🅐🅓① from Animate Diff 🎭🅐🅓/① Gen1 nodes ①
     * @desc 
    */
    "ADE_AnimateDiffLoaderWithContext" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'model_name'(value : 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt'| $dyn)  { super.$$link(1, value) } 
//set 'beta_schedule'(value : 'autoselect'|'use existing'|'sqrt_linear (AnimateDiff)'|'linear (AnimateDiff-SDXL)'|'linear (HotshotXL/default)'|'avg(sqrt_linear,linear)'|'lcm avg(sqrt_linear,linear)'|'lcm'|'lcm[100_ots]'|'lcm >> sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2'| $dyn)  { super.$$link(2, value) } 
//set 'context_options'(value : CONTEXT_OPTIONS)  { super.$$link(3, value) } 
//set 'motion_lora'(value : MOTION_LORA)  { super.$$link(4, value) } 
//set 'ad_settings'(value : AD_SETTINGS)  { super.$$link(5, value) } 
//set 'sample_settings'(value : SAMPLE_SETTINGS)  { super.$$link(6, value) } 
//set 'motion_scale'(value : FLOAT)  { super.$$link(7, value) } 
//set 'apply_v2_models_properly'(value : BOOLEAN)  { super.$$link(8, value) } 
//set 'ad_keyframes'(value : AD_KEYFRAMES)  { super.$$link(9, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.model_name
		 * @param opts.beta_schedule default: "autoselect"
		 * @param opts.context_options
		 * @param opts.motion_lora
		 * @param opts.ad_settings
		 * @param opts.sample_settings
		 * @param opts.motion_scale default: 1 step: 0.001
		 * @param opts.apply_v2_models_properly default: true
		 * @param opts.ad_keyframes}
        */
        constructor(opts:{
            'model': MODEL,'model_name': 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt'| $dyn,'beta_schedule'?: 'autoselect'|'use existing'|'sqrt_linear (AnimateDiff)'|'linear (AnimateDiff-SDXL)'|'linear (HotshotXL/default)'|'avg(sqrt_linear,linear)'|'lcm avg(sqrt_linear,linear)'|'lcm'|'lcm[100_ots]'|'lcm >> sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2'| $dyn,'context_options'?: CONTEXT_OPTIONS,'motion_lora'?: MOTION_LORA,'ad_settings'?: AD_SETTINGS,'sample_settings'?: SAMPLE_SETTINGS,'motion_scale'?: FLOAT,'apply_v2_models_properly'?: BOOLEAN,'ad_keyframes'?: AD_KEYFRAMES
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("model_name", opts['model_name'])
super.$$link("beta_schedule", opts['beta_schedule']??tmp["ADE_AnimateDiffLoaderWithContext"].defaults['beta_schedule'])
super.$$link("context_options", opts['context_options'])
super.$$link("motion_lora", opts['motion_lora'])
super.$$link("ad_settings", opts['ad_settings'])
super.$$link("sample_settings", opts['sample_settings'])
super.$$link("motion_scale", opts['motion_scale']??tmp["ADE_AnimateDiffLoaderWithContext"].defaults['motion_scale'])
super.$$link("apply_v2_models_properly", opts['apply_v2_models_properly']??tmp["ADE_AnimateDiffLoaderWithContext"].defaults['apply_v2_models_properly'])
super.$$link("ad_keyframes", opts['ad_keyframes'])
}

        static defaults = {
    'beta_schedule':  "autoselect",
'motion_scale':  1,
'apply_v2_models_properly':  true
}
        protected override $$type(){
            return "ADE_AnimateDiffLoaderWithContext"
        }
},

    /**
     * Use Evolved Sampling 🎭🅐🅓② from Animate Diff 🎭🅐🅓/② Gen2 nodes ②
     * @desc 
    */
    "ADE_UseEvolvedSampling" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'beta_schedule'(value : 'autoselect'|'use existing'|'sqrt_linear (AnimateDiff)'|'linear (AnimateDiff-SDXL)'|'linear (HotshotXL/default)'|'avg(sqrt_linear,linear)'|'lcm avg(sqrt_linear,linear)'|'lcm'|'lcm[100_ots]'|'lcm >> sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2'| $dyn)  { super.$$link(1, value) } 
//set 'm_models'(value : M_MODELS)  { super.$$link(2, value) } 
//set 'context_options'(value : CONTEXT_OPTIONS)  { super.$$link(3, value) } 
//set 'sample_settings'(value : SAMPLE_SETTINGS)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.beta_schedule default: "autoselect"
		 * @param opts.m_models
		 * @param opts.context_options
		 * @param opts.sample_settings}
        */
        constructor(opts:{
            'model': MODEL,'beta_schedule'?: 'autoselect'|'use existing'|'sqrt_linear (AnimateDiff)'|'linear (AnimateDiff-SDXL)'|'linear (HotshotXL/default)'|'avg(sqrt_linear,linear)'|'lcm avg(sqrt_linear,linear)'|'lcm'|'lcm[100_ots]'|'lcm >> sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2'| $dyn,'m_models'?: M_MODELS,'context_options'?: CONTEXT_OPTIONS,'sample_settings'?: SAMPLE_SETTINGS
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("beta_schedule", opts['beta_schedule']??tmp["ADE_UseEvolvedSampling"].defaults['beta_schedule'])
super.$$link("m_models", opts['m_models'])
super.$$link("context_options", opts['context_options'])
super.$$link("sample_settings", opts['sample_settings'])
}

        static defaults = {
    'beta_schedule':  "autoselect"
}
        protected override $$type(){
            return "ADE_UseEvolvedSampling"
        }
},

    /**
     * Apply AnimateDiff Model 🎭🅐🅓② from Animate Diff 🎭🅐🅓/② Gen2 nodes ②
     * @desc 
    */
    "ADE_ApplyAnimateDiffModelSimple" : class extends Node{
        //Setters
        //set 'motion_model'(value : MOTION_MODEL_ADE)  { super.$$link(0, value) } 
//set 'motion_lora'(value : MOTION_LORA)  { super.$$link(1, value) } 
//set 'scale_multival'(value : MULTIVAL)  { super.$$link(2, value) } 
//set 'effect_multival'(value : MULTIVAL)  { super.$$link(3, value) } 
//set 'ad_keyframes'(value : AD_KEYFRAMES)  { super.$$link(4, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(5, value) } 

        //Getters
        get 'M_MODELS'() : M_MODELS { return [this.$uid.toString(), 0]  as unknown as M_MODELS; }

        /**
          * Constructor
		 * @param opts.motion_model
		 * @param opts.motion_lora
		 * @param opts.scale_multival
		 * @param opts.effect_multival
		 * @param opts.ad_keyframes
		 * @param opts.autosize}
        */
        constructor(opts:{
            'motion_model': MOTION_MODEL_ADE,'motion_lora'?: MOTION_LORA,'scale_multival'?: MULTIVAL,'effect_multival'?: MULTIVAL,'ad_keyframes'?: AD_KEYFRAMES,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("motion_model", opts['motion_model'])
super.$$link("motion_lora", opts['motion_lora'])
super.$$link("scale_multival", opts['scale_multival'])
super.$$link("effect_multival", opts['effect_multival'])
super.$$link("ad_keyframes", opts['ad_keyframes'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ADE_ApplyAnimateDiffModelSimple"
        }
},

    /**
     * Apply AnimateDiff Model (Adv.) 🎭🅐🅓② from Animate Diff 🎭🅐🅓/② Gen2 nodes ②
     * @desc 
    */
    "ADE_ApplyAnimateDiffModel" : class extends Node{
        //Setters
        //set 'motion_model'(value : MOTION_MODEL_ADE)  { super.$$link(0, value) } 
//set 'start_percent'(value : FLOAT)  { super.$$link(1, value) } 
//set 'end_percent'(value : FLOAT)  { super.$$link(2, value) } 
//set 'motion_lora'(value : MOTION_LORA)  { super.$$link(3, value) } 
//set 'scale_multival'(value : MULTIVAL)  { super.$$link(4, value) } 
//set 'effect_multival'(value : MULTIVAL)  { super.$$link(5, value) } 
//set 'ad_keyframes'(value : AD_KEYFRAMES)  { super.$$link(6, value) } 
//set 'prev_m_models'(value : M_MODELS)  { super.$$link(7, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(8, value) } 

        //Getters
        get 'M_MODELS'() : M_MODELS { return [this.$uid.toString(), 0]  as unknown as M_MODELS; }

        /**
          * Constructor
		 * @param opts.motion_model
		 * @param opts.start_percent step: 0.001
		 * @param opts.end_percent default: 1 step: 0.001
		 * @param opts.motion_lora
		 * @param opts.scale_multival
		 * @param opts.effect_multival
		 * @param opts.ad_keyframes
		 * @param opts.prev_m_models
		 * @param opts.autosize}
        */
        constructor(opts:{
            'motion_model': MOTION_MODEL_ADE,'start_percent'?: FLOAT,'end_percent'?: FLOAT,'motion_lora'?: MOTION_LORA,'scale_multival'?: MULTIVAL,'effect_multival'?: MULTIVAL,'ad_keyframes'?: AD_KEYFRAMES,'prev_m_models'?: M_MODELS,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("motion_model", opts['motion_model'])
super.$$link("start_percent", opts['start_percent']??tmp["ADE_ApplyAnimateDiffModel"].defaults['start_percent'])
super.$$link("end_percent", opts['end_percent']??tmp["ADE_ApplyAnimateDiffModel"].defaults['end_percent'])
super.$$link("motion_lora", opts['motion_lora'])
super.$$link("scale_multival", opts['scale_multival'])
super.$$link("effect_multival", opts['effect_multival'])
super.$$link("ad_keyframes", opts['ad_keyframes'])
super.$$link("prev_m_models", opts['prev_m_models'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'start_percent':  0,
'end_percent':  1
}
        protected override $$type(){
            return "ADE_ApplyAnimateDiffModel"
        }
},

    /**
     * Load AnimateDiff Model 🎭🅐🅓② from Animate Diff 🎭🅐🅓/② Gen2 nodes ②
     * @desc 
    */
    "ADE_LoadAnimateDiffModel" : class extends Node{
        //Setters
        //set 'model_name'(value : 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt'| $dyn)  { super.$$link(0, value) } 
//set 'ad_settings'(value : AD_SETTINGS)  { super.$$link(1, value) } 

        //Getters
        get 'MOTION_MODEL'() : MOTION_MODEL_ADE { return [this.$uid.toString(), 0]  as unknown as MOTION_MODEL_ADE; }

        /**
          * Constructor
		 * @param opts.model_name
		 * @param opts.ad_settings}
        */
        constructor(opts:{
            'model_name': 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt'| $dyn,'ad_settings'?: AD_SETTINGS
        }){
            super(ctx);

            super.$$link("model_name", opts['model_name'])
super.$$link("ad_settings", opts['ad_settings'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ADE_LoadAnimateDiffModel"
        }
},

    /**
     * Apply AnimateLCM-I2V Model 🎭🅐🅓② from Animate Diff 🎭🅐🅓/② Gen2 nodes ②/AnimateLCM-I2V
     * @desc 
    */
    "ADE_ApplyAnimateLCMI2VModel" : class extends Node{
        //Setters
        //set 'motion_model'(value : MOTION_MODEL_ADE)  { super.$$link(0, value) } 
//set 'ref_latent'(value : LATENT)  { super.$$link(1, value) } 
//set 'ref_drift'(value : FLOAT)  { super.$$link(2, value) } 
//set 'apply_ref_when_disabled'(value : BOOLEAN)  { super.$$link(3, value) } 
//set 'start_percent'(value : FLOAT)  { super.$$link(4, value) } 
//set 'end_percent'(value : FLOAT)  { super.$$link(5, value) } 
//set 'motion_lora'(value : MOTION_LORA)  { super.$$link(6, value) } 
//set 'scale_multival'(value : MULTIVAL)  { super.$$link(7, value) } 
//set 'effect_multival'(value : MULTIVAL)  { super.$$link(8, value) } 
//set 'ad_keyframes'(value : AD_KEYFRAMES)  { super.$$link(9, value) } 
//set 'prev_m_models'(value : M_MODELS)  { super.$$link(10, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(11, value) } 

        //Getters
        get 'M_MODELS'() : M_MODELS { return [this.$uid.toString(), 0]  as unknown as M_MODELS; }

        /**
          * Constructor
		 * @param opts.motion_model
		 * @param opts.ref_latent
		 * @param opts.ref_drift step: 0.001
		 * @param opts.apply_ref_when_disabled
		 * @param opts.start_percent step: 0.001
		 * @param opts.end_percent default: 1 step: 0.001
		 * @param opts.motion_lora
		 * @param opts.scale_multival
		 * @param opts.effect_multival
		 * @param opts.ad_keyframes
		 * @param opts.prev_m_models
		 * @param opts.autosize}
        */
        constructor(opts:{
            'motion_model': MOTION_MODEL_ADE,'ref_latent': LATENT,'ref_drift'?: FLOAT,'apply_ref_when_disabled'?: BOOLEAN,'start_percent'?: FLOAT,'end_percent'?: FLOAT,'motion_lora'?: MOTION_LORA,'scale_multival'?: MULTIVAL,'effect_multival'?: MULTIVAL,'ad_keyframes'?: AD_KEYFRAMES,'prev_m_models'?: M_MODELS,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("motion_model", opts['motion_model'])
super.$$link("ref_latent", opts['ref_latent'])
super.$$link("ref_drift", opts['ref_drift']??tmp["ADE_ApplyAnimateLCMI2VModel"].defaults['ref_drift'])
super.$$link("apply_ref_when_disabled", opts['apply_ref_when_disabled']??tmp["ADE_ApplyAnimateLCMI2VModel"].defaults['apply_ref_when_disabled'])
super.$$link("start_percent", opts['start_percent']??tmp["ADE_ApplyAnimateLCMI2VModel"].defaults['start_percent'])
super.$$link("end_percent", opts['end_percent']??tmp["ADE_ApplyAnimateLCMI2VModel"].defaults['end_percent'])
super.$$link("motion_lora", opts['motion_lora'])
super.$$link("scale_multival", opts['scale_multival'])
super.$$link("effect_multival", opts['effect_multival'])
super.$$link("ad_keyframes", opts['ad_keyframes'])
super.$$link("prev_m_models", opts['prev_m_models'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'ref_drift':  0,
'apply_ref_when_disabled':  false,
'start_percent':  0,
'end_percent':  1
}
        protected override $$type(){
            return "ADE_ApplyAnimateLCMI2VModel"
        }
},

    /**
     * Load AnimateLCM-I2V Model 🎭🅐🅓② from Animate Diff 🎭🅐🅓/② Gen2 nodes ②/AnimateLCM-I2V
     * @desc 
    */
    "ADE_LoadAnimateLCMI2VModel" : class extends Node{
        //Setters
        //set 'model_name'(value : 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt'| $dyn)  { super.$$link(0, value) } 
//set 'ad_settings'(value : AD_SETTINGS)  { super.$$link(1, value) } 

        //Getters
        get 'MOTION_MODEL'() : MOTION_MODEL_ADE { return [this.$uid.toString(), 0]  as unknown as MOTION_MODEL_ADE; }
get 'encoder_only'() : MOTION_MODEL_ADE { return [this.$uid.toString(), 1]  as unknown as MOTION_MODEL_ADE; }

        /**
          * Constructor
		 * @param opts.model_name
		 * @param opts.ad_settings}
        */
        constructor(opts:{
            'model_name': 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt'| $dyn,'ad_settings'?: AD_SETTINGS
        }){
            super(ctx);

            super.$$link("model_name", opts['model_name'])
super.$$link("ad_settings", opts['ad_settings'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ADE_LoadAnimateLCMI2VModel"
        }
},

    /**
     * Scale Ref Image and VAE Encode 🎭🅐🅓② from Animate Diff 🎭🅐🅓/② Gen2 nodes ②/AnimateLCM-I2V
     * @desc 
    */
    "ADE_UpscaleAndVAEEncode" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'vae'(value : VAE)  { super.$$link(1, value) } 
//set 'latent_size'(value : LATENT)  { super.$$link(2, value) } 
//set 'scale_method'(value : 'nearest-exact'|'bilinear'|'area'|'bicubic'|'lanczos'| $dyn)  { super.$$link(3, value) } 
//set 'crop'(value : 'disabled'|'center'| $dyn)  { super.$$link(4, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.vae
		 * @param opts.latent_size
		 * @param opts.scale_method
		 * @param opts.crop default: "center"}
        */
        constructor(opts:{
            'image': IMAGE,'vae': VAE,'latent_size': LATENT,'scale_method': 'nearest-exact'|'bilinear'|'area'|'bicubic'|'lanczos'| $dyn,'crop'?: 'disabled'|'center'| $dyn
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("vae", opts['vae'])
super.$$link("latent_size", opts['latent_size'])
super.$$link("scale_method", opts['scale_method'])
super.$$link("crop", opts['crop']??tmp["ADE_UpscaleAndVAEEncode"].defaults['crop'])
}

        static defaults = {
    'crop':  "center"
}
        protected override $$type(){
            return "ADE_UpscaleAndVAEEncode"
        }
},

    /**
     * 🧪Inject I2V into AnimateDiff Model 🎭🅐🅓② from Animate Diff 🎭🅐🅓/② Gen2 nodes ②/AnimateLCM-I2V/🧪experimental
     * @desc 
    */
    "ADE_InjectI2VIntoAnimateDiffModel" : class extends Node{
        //Setters
        //set 'model_name'(value : 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt'| $dyn)  { super.$$link(0, value) } 
//set 'motion_model'(value : MOTION_MODEL_ADE)  { super.$$link(1, value) } 
//set 'ad_settings'(value : AD_SETTINGS)  { super.$$link(2, value) } 
//set 'deprecation_warning'(value : ADEWARN)  { super.$$link(3, value) } 

        //Getters
        get 'MOTION_MODEL'() : MOTION_MODEL_ADE { return [this.$uid.toString(), 0]  as unknown as MOTION_MODEL_ADE; }

        /**
          * Constructor
		 * @param opts.model_name
		 * @param opts.motion_model
		 * @param opts.ad_settings
		 * @param opts.deprecation_warning}
        */
        constructor(opts:{
            'model_name': 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt'| $dyn,'motion_model': MOTION_MODEL_ADE,'ad_settings'?: AD_SETTINGS,'deprecation_warning'?: ADEWARN
        }){
            super(ctx);

            super.$$link("model_name", opts['model_name'])
super.$$link("motion_model", opts['motion_model'])
super.$$link("ad_settings", opts['ad_settings'])
super.$$link("deprecation_warning", opts['deprecation_warning'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ADE_InjectI2VIntoAnimateDiffModel"
        }
},

    /**
     * Apply AnimateDiff+CameraCtrl Model 🎭🅐🅓② from Animate Diff 🎭🅐🅓/② Gen2 nodes ②/CameraCtrl
     * @desc 
    */
    "ADE_ApplyAnimateDiffModelWithCameraCtrl" : class extends Node{
        //Setters
        //set 'motion_model'(value : MOTION_MODEL_ADE)  { super.$$link(0, value) } 
//set 'cameractrl_poses'(value : CAMERACTRL_POSES)  { super.$$link(1, value) } 
//set 'start_percent'(value : FLOAT)  { super.$$link(2, value) } 
//set 'end_percent'(value : FLOAT)  { super.$$link(3, value) } 
//set 'motion_lora'(value : MOTION_LORA)  { super.$$link(4, value) } 
//set 'scale_multival'(value : MULTIVAL)  { super.$$link(5, value) } 
//set 'effect_multival'(value : MULTIVAL)  { super.$$link(6, value) } 
//set 'cameractrl_multival'(value : MULTIVAL)  { super.$$link(7, value) } 
//set 'ad_keyframes'(value : AD_KEYFRAMES)  { super.$$link(8, value) } 
//set 'prev_m_models'(value : M_MODELS)  { super.$$link(9, value) } 

        //Getters
        get 'M_MODELS'() : M_MODELS { return [this.$uid.toString(), 0]  as unknown as M_MODELS; }

        /**
          * Constructor
		 * @param opts.motion_model
		 * @param opts.cameractrl_poses
		 * @param opts.start_percent step: 0.001
		 * @param opts.end_percent default: 1 step: 0.001
		 * @param opts.motion_lora
		 * @param opts.scale_multival
		 * @param opts.effect_multival
		 * @param opts.cameractrl_multival
		 * @param opts.ad_keyframes
		 * @param opts.prev_m_models}
        */
        constructor(opts:{
            'motion_model': MOTION_MODEL_ADE,'cameractrl_poses': CAMERACTRL_POSES,'start_percent'?: FLOAT,'end_percent'?: FLOAT,'motion_lora'?: MOTION_LORA,'scale_multival'?: MULTIVAL,'effect_multival'?: MULTIVAL,'cameractrl_multival'?: MULTIVAL,'ad_keyframes'?: AD_KEYFRAMES,'prev_m_models'?: M_MODELS
        }){
            super(ctx);

            super.$$link("motion_model", opts['motion_model'])
super.$$link("cameractrl_poses", opts['cameractrl_poses'])
super.$$link("start_percent", opts['start_percent']??tmp["ADE_ApplyAnimateDiffModelWithCameraCtrl"].defaults['start_percent'])
super.$$link("end_percent", opts['end_percent']??tmp["ADE_ApplyAnimateDiffModelWithCameraCtrl"].defaults['end_percent'])
super.$$link("motion_lora", opts['motion_lora'])
super.$$link("scale_multival", opts['scale_multival'])
super.$$link("effect_multival", opts['effect_multival'])
super.$$link("cameractrl_multival", opts['cameractrl_multival'])
super.$$link("ad_keyframes", opts['ad_keyframes'])
super.$$link("prev_m_models", opts['prev_m_models'])
}

        static defaults = {
    'start_percent':  0,
'end_percent':  1
}
        protected override $$type(){
            return "ADE_ApplyAnimateDiffModelWithCameraCtrl"
        }
},

    /**
     * Load AnimateDiff+CameraCtrl Model 🎭🅐🅓② from Animate Diff 🎭🅐🅓/② Gen2 nodes ②/CameraCtrl
     * @desc 
    */
    "ADE_LoadAnimateDiffModelWithCameraCtrl" : class extends Node{
        //Setters
        //set 'model_name'(value : 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt'| $dyn)  { super.$$link(0, value) } 
//set 'camera_ctrl'(value : 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt'| $dyn)  { super.$$link(1, value) } 
//set 'ad_settings'(value : AD_SETTINGS)  { super.$$link(2, value) } 

        //Getters
        get 'MOTION_MODEL'() : MOTION_MODEL_ADE { return [this.$uid.toString(), 0]  as unknown as MOTION_MODEL_ADE; }

        /**
          * Constructor
		 * @param opts.model_name
		 * @param opts.camera_ctrl
		 * @param opts.ad_settings}
        */
        constructor(opts:{
            'model_name': 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt'| $dyn,'camera_ctrl': 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt'| $dyn,'ad_settings'?: AD_SETTINGS
        }){
            super(ctx);

            super.$$link("model_name", opts['model_name'])
super.$$link("camera_ctrl", opts['camera_ctrl'])
super.$$link("ad_settings", opts['ad_settings'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ADE_LoadAnimateDiffModelWithCameraCtrl"
        }
},

    /**
     * AnimateDiff+CameraCtrl Keyframe 🎭🅐🅓 from Animate Diff 🎭🅐🅓/② Gen2 nodes ②/CameraCtrl
     * @desc 
    */
    "ADE_CameraCtrlAnimateDiffKeyframe" : class extends Node{
        //Setters
        //set 'start_percent'(value : FLOAT)  { super.$$link(0, value) } 
//set 'prev_ad_keyframes'(value : AD_KEYFRAMES)  { super.$$link(1, value) } 
//set 'scale_multival'(value : MULTIVAL)  { super.$$link(2, value) } 
//set 'effect_multival'(value : MULTIVAL)  { super.$$link(3, value) } 
//set 'cameractrl_multival'(value : MULTIVAL)  { super.$$link(4, value) } 
//set 'inherit_missing'(value : BOOLEAN)  { super.$$link(5, value) } 
//set 'guarantee_steps'(value : INT)  { super.$$link(6, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(7, value) } 

        //Getters
        get 'AD_KEYFRAMES'() : AD_KEYFRAMES { return [this.$uid.toString(), 0]  as unknown as AD_KEYFRAMES; }

        /**
          * Constructor
		 * @param opts.start_percent step: 0.001
		 * @param opts.prev_ad_keyframes
		 * @param opts.scale_multival
		 * @param opts.effect_multival
		 * @param opts.cameractrl_multival
		 * @param opts.inherit_missing default: true
		 * @param opts.guarantee_steps default: 1
		 * @param opts.autosize}
        */
        constructor(opts:{
            'start_percent'?: FLOAT,'prev_ad_keyframes'?: AD_KEYFRAMES,'scale_multival'?: MULTIVAL,'effect_multival'?: MULTIVAL,'cameractrl_multival'?: MULTIVAL,'inherit_missing'?: BOOLEAN,'guarantee_steps'?: INT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("start_percent", opts['start_percent']??tmp["ADE_CameraCtrlAnimateDiffKeyframe"].defaults['start_percent'])
super.$$link("prev_ad_keyframes", opts['prev_ad_keyframes'])
super.$$link("scale_multival", opts['scale_multival'])
super.$$link("effect_multival", opts['effect_multival'])
super.$$link("cameractrl_multival", opts['cameractrl_multival'])
super.$$link("inherit_missing", opts['inherit_missing']??tmp["ADE_CameraCtrlAnimateDiffKeyframe"].defaults['inherit_missing'])
super.$$link("guarantee_steps", opts['guarantee_steps']??tmp["ADE_CameraCtrlAnimateDiffKeyframe"].defaults['guarantee_steps'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'start_percent':  0,
'inherit_missing':  true,
'guarantee_steps':  1
}
        protected override $$type(){
            return "ADE_CameraCtrlAnimateDiffKeyframe"
        }
},

    /**
     * Load CameraCtrl Poses (File) 🎭🅐🅓② from Animate Diff 🎭🅐🅓/② Gen2 nodes ②/CameraCtrl/poses
     * @desc 
    */
    "ADE_LoadCameraPoses" : class extends Node{
        //Setters
        //set 'pose_filename'(value : void)  { super.$$link(0, value) } 

        //Getters
        get 'CAMERACTRL_POSES'() : CAMERACTRL_POSES { return [this.$uid.toString(), 0]  as unknown as CAMERACTRL_POSES; }

        /**
          * Constructor
		 * @param opts.pose_filename}
        */
        constructor(opts:{
            'pose_filename': void
        }){
            super(ctx);

            super.$$link("pose_filename", opts['pose_filename'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ADE_LoadCameraPoses"
        }
},

    /**
     * Load CameraCtrl Poses (Path) 🎭🅐🅓② from Animate Diff 🎭🅐🅓/② Gen2 nodes ②/CameraCtrl/poses
     * @desc 
    */
    "ADE_LoadCameraPosesFromPath" : class extends Node{
        //Setters
        //set 'file_path'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'CAMERACTRL_POSES'() : CAMERACTRL_POSES { return [this.$uid.toString(), 0]  as unknown as CAMERACTRL_POSES; }

        /**
          * Constructor
		 * @param opts.file_path default: "X://path/to/pose_file.txt"}
        */
        constructor(opts:{
            'file_path'?: STRING
        }){
            super(ctx);

            super.$$link("file_path", opts['file_path']??tmp["ADE_LoadCameraPosesFromPath"].defaults['file_path'])
}

        static defaults = {
    'file_path':  "X://path/to/pose_file.txt"
}
        protected override $$type(){
            return "ADE_LoadCameraPosesFromPath"
        }
},

    /**
     * Create CameraCtrl Poses 🎭🅐🅓② from Animate Diff 🎭🅐🅓/② Gen2 nodes ②/CameraCtrl/poses
     * @desc 
    */
    "ADE_CameraPoseBasic" : class extends Node{
        //Setters
        //set 'motion_type'(value : 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right'| $dyn)  { super.$$link(0, value) } 
//set 'speed'(value : FLOAT)  { super.$$link(1, value) } 
//set 'frame_length'(value : INT)  { super.$$link(2, value) } 
//set 'prev_poses'(value : CAMERACTRL_POSES)  { super.$$link(3, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(4, value) } 

        //Getters
        get 'CAMERACTRL_POSES'() : CAMERACTRL_POSES { return [this.$uid.toString(), 0]  as unknown as CAMERACTRL_POSES; }

        /**
          * Constructor
		 * @param opts.motion_type
		 * @param opts.speed default: 1 max: 100 min: -100 step: 0.01
		 * @param opts.frame_length default: 16
		 * @param opts.prev_poses
		 * @param opts.autosize}
        */
        constructor(opts:{
            'motion_type': 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right'| $dyn,'speed'?: FLOAT,'frame_length'?: INT,'prev_poses'?: CAMERACTRL_POSES,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("motion_type", opts['motion_type'])
super.$$link("speed", opts['speed']??tmp["ADE_CameraPoseBasic"].defaults['speed'])
super.$$link("frame_length", opts['frame_length']??tmp["ADE_CameraPoseBasic"].defaults['frame_length'])
super.$$link("prev_poses", opts['prev_poses'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'speed':  1,
'frame_length':  16
}
        protected override $$type(){
            return "ADE_CameraPoseBasic"
        }
},

    /**
     * Create CameraCtrl Poses (Combo) 🎭🅐🅓② from Animate Diff 🎭🅐🅓/② Gen2 nodes ②/CameraCtrl/poses
     * @desc 
    */
    "ADE_CameraPoseCombo" : class extends Node{
        //Setters
        //set 'motion_type1'(value : 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right'| $dyn)  { super.$$link(0, value) } 
//set 'motion_type2'(value : 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right'| $dyn)  { super.$$link(1, value) } 
//set 'motion_type3'(value : 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right'| $dyn)  { super.$$link(2, value) } 
//set 'motion_type4'(value : 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right'| $dyn)  { super.$$link(3, value) } 
//set 'motion_type5'(value : 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right'| $dyn)  { super.$$link(4, value) } 
//set 'motion_type6'(value : 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right'| $dyn)  { super.$$link(5, value) } 
//set 'speed'(value : FLOAT)  { super.$$link(6, value) } 
//set 'frame_length'(value : INT)  { super.$$link(7, value) } 
//set 'prev_poses'(value : CAMERACTRL_POSES)  { super.$$link(8, value) } 

        //Getters
        get 'CAMERACTRL_POSES'() : CAMERACTRL_POSES { return [this.$uid.toString(), 0]  as unknown as CAMERACTRL_POSES; }

        /**
          * Constructor
		 * @param opts.motion_type1
		 * @param opts.motion_type2
		 * @param opts.motion_type3
		 * @param opts.motion_type4
		 * @param opts.motion_type5
		 * @param opts.motion_type6
		 * @param opts.speed default: 1 max: 100 min: -100 step: 0.01
		 * @param opts.frame_length default: 16
		 * @param opts.prev_poses}
        */
        constructor(opts:{
            'motion_type1': 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right'| $dyn,'motion_type2': 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right'| $dyn,'motion_type3': 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right'| $dyn,'motion_type4': 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right'| $dyn,'motion_type5': 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right'| $dyn,'motion_type6': 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right'| $dyn,'speed'?: FLOAT,'frame_length'?: INT,'prev_poses'?: CAMERACTRL_POSES
        }){
            super(ctx);

            super.$$link("motion_type1", opts['motion_type1'])
super.$$link("motion_type2", opts['motion_type2'])
super.$$link("motion_type3", opts['motion_type3'])
super.$$link("motion_type4", opts['motion_type4'])
super.$$link("motion_type5", opts['motion_type5'])
super.$$link("motion_type6", opts['motion_type6'])
super.$$link("speed", opts['speed']??tmp["ADE_CameraPoseCombo"].defaults['speed'])
super.$$link("frame_length", opts['frame_length']??tmp["ADE_CameraPoseCombo"].defaults['frame_length'])
super.$$link("prev_poses", opts['prev_poses'])
}

        static defaults = {
    'speed':  1,
'frame_length':  16
}
        protected override $$type(){
            return "ADE_CameraPoseCombo"
        }
},

    /**
     * Create CameraCtrl Poses (Adv.) 🎭🅐🅓② from Animate Diff 🎭🅐🅓/② Gen2 nodes ②/CameraCtrl/poses
     * @desc 
    */
    "ADE_CameraPoseAdvanced" : class extends Node{
        //Setters
        //set 'motion_type1'(value : 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right'| $dyn)  { super.$$link(0, value) } 
//set 'strength1'(value : FLOAT)  { super.$$link(1, value) } 
//set 'motion_type2'(value : 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right'| $dyn)  { super.$$link(2, value) } 
//set 'strength2'(value : FLOAT)  { super.$$link(3, value) } 
//set 'motion_type3'(value : 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right'| $dyn)  { super.$$link(4, value) } 
//set 'strength3'(value : FLOAT)  { super.$$link(5, value) } 
//set 'motion_type4'(value : 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right'| $dyn)  { super.$$link(6, value) } 
//set 'strength4'(value : FLOAT)  { super.$$link(7, value) } 
//set 'motion_type5'(value : 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right'| $dyn)  { super.$$link(8, value) } 
//set 'strength5'(value : FLOAT)  { super.$$link(9, value) } 
//set 'motion_type6'(value : 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right'| $dyn)  { super.$$link(10, value) } 
//set 'strength6'(value : FLOAT)  { super.$$link(11, value) } 
//set 'speed'(value : FLOAT)  { super.$$link(12, value) } 
//set 'frame_length'(value : INT)  { super.$$link(13, value) } 
//set 'prev_poses'(value : CAMERACTRL_POSES)  { super.$$link(14, value) } 

        //Getters
        get 'CAMERACTRL_POSES'() : CAMERACTRL_POSES { return [this.$uid.toString(), 0]  as unknown as CAMERACTRL_POSES; }

        /**
          * Constructor
		 * @param opts.motion_type1
		 * @param opts.strength1 default: 1 step: 0.01
		 * @param opts.motion_type2
		 * @param opts.strength2 default: 1 step: 0.01
		 * @param opts.motion_type3
		 * @param opts.strength3 default: 1 step: 0.01
		 * @param opts.motion_type4
		 * @param opts.strength4 default: 1 step: 0.01
		 * @param opts.motion_type5
		 * @param opts.strength5 default: 1 step: 0.01
		 * @param opts.motion_type6
		 * @param opts.strength6 default: 1 step: 0.01
		 * @param opts.speed default: 1 max: 100 min: -100 step: 0.01
		 * @param opts.frame_length default: 16
		 * @param opts.prev_poses}
        */
        constructor(opts:{
            'motion_type1': 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right'| $dyn,'strength1'?: FLOAT,'motion_type2': 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right'| $dyn,'strength2'?: FLOAT,'motion_type3': 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right'| $dyn,'strength3'?: FLOAT,'motion_type4': 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right'| $dyn,'strength4'?: FLOAT,'motion_type5': 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right'| $dyn,'strength5'?: FLOAT,'motion_type6': 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right'| $dyn,'strength6'?: FLOAT,'speed'?: FLOAT,'frame_length'?: INT,'prev_poses'?: CAMERACTRL_POSES
        }){
            super(ctx);

            super.$$link("motion_type1", opts['motion_type1'])
super.$$link("strength1", opts['strength1']??tmp["ADE_CameraPoseAdvanced"].defaults['strength1'])
super.$$link("motion_type2", opts['motion_type2'])
super.$$link("strength2", opts['strength2']??tmp["ADE_CameraPoseAdvanced"].defaults['strength2'])
super.$$link("motion_type3", opts['motion_type3'])
super.$$link("strength3", opts['strength3']??tmp["ADE_CameraPoseAdvanced"].defaults['strength3'])
super.$$link("motion_type4", opts['motion_type4'])
super.$$link("strength4", opts['strength4']??tmp["ADE_CameraPoseAdvanced"].defaults['strength4'])
super.$$link("motion_type5", opts['motion_type5'])
super.$$link("strength5", opts['strength5']??tmp["ADE_CameraPoseAdvanced"].defaults['strength5'])
super.$$link("motion_type6", opts['motion_type6'])
super.$$link("strength6", opts['strength6']??tmp["ADE_CameraPoseAdvanced"].defaults['strength6'])
super.$$link("speed", opts['speed']??tmp["ADE_CameraPoseAdvanced"].defaults['speed'])
super.$$link("frame_length", opts['frame_length']??tmp["ADE_CameraPoseAdvanced"].defaults['frame_length'])
super.$$link("prev_poses", opts['prev_poses'])
}

        static defaults = {
    'strength1':  1,
'strength2':  1,
'strength3':  1,
'strength4':  1,
'strength5':  1,
'strength6':  1,
'speed':  1,
'frame_length':  16
}
        protected override $$type(){
            return "ADE_CameraPoseAdvanced"
        }
},

    /**
     * Manual Append CameraCtrl Poses 🎭🅐🅓② from Animate Diff 🎭🅐🅓/② Gen2 nodes ②/CameraCtrl/poses
     * @desc 
    */
    "ADE_CameraManualPoseAppend" : class extends Node{
        //Setters
        //set 'poses_first'(value : CAMERACTRL_POSES)  { super.$$link(0, value) } 
//set 'poses_last'(value : CAMERACTRL_POSES)  { super.$$link(1, value) } 

        //Getters
        get 'CAMERACTRL_POSES'() : CAMERACTRL_POSES { return [this.$uid.toString(), 0]  as unknown as CAMERACTRL_POSES; }

        /**
          * Constructor
		 * @param opts.poses_first
		 * @param opts.poses_last}
        */
        constructor(opts:{
            'poses_first': CAMERACTRL_POSES,'poses_last': CAMERACTRL_POSES
        }){
            super(ctx);

            super.$$link("poses_first", opts['poses_first'])
super.$$link("poses_last", opts['poses_last'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ADE_CameraManualPoseAppend"
        }
},

    /**
     * Replace Camera Parameters 🎭🅐🅓② from Animate Diff 🎭🅐🅓/② Gen2 nodes ②/CameraCtrl/poses
     * @desc 
    */
    "ADE_ReplaceCameraParameters" : class extends Node{
        //Setters
        //set 'poses'(value : CAMERACTRL_POSES)  { super.$$link(0, value) } 
//set 'fx'(value : FLOAT)  { super.$$link(1, value) } 
//set 'fy'(value : FLOAT)  { super.$$link(2, value) } 
//set 'cx'(value : FLOAT)  { super.$$link(3, value) } 
//set 'cy'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'CAMERACTRL_POSES'() : CAMERACTRL_POSES { return [this.$uid.toString(), 0]  as unknown as CAMERACTRL_POSES; }

        /**
          * Constructor
		 * @param opts.poses
		 * @param opts.fx default: 0.474812461 step: 1e-9
		 * @param opts.fy default: 0.844111024 step: 1e-9
		 * @param opts.cx default: 0.5 step: 0.01
		 * @param opts.cy default: 0.5 step: 0.01}
        */
        constructor(opts:{
            'poses': CAMERACTRL_POSES,'fx'?: FLOAT,'fy'?: FLOAT,'cx'?: FLOAT,'cy'?: FLOAT
        }){
            super(ctx);

            super.$$link("poses", opts['poses'])
super.$$link("fx", opts['fx']??tmp["ADE_ReplaceCameraParameters"].defaults['fx'])
super.$$link("fy", opts['fy']??tmp["ADE_ReplaceCameraParameters"].defaults['fy'])
super.$$link("cx", opts['cx']??tmp["ADE_ReplaceCameraParameters"].defaults['cx'])
super.$$link("cy", opts['cy']??tmp["ADE_ReplaceCameraParameters"].defaults['cy'])
}

        static defaults = {
    'fx':  0.474812461,
'fy':  0.844111024,
'cx':  0.5,
'cy':  0.5
}
        protected override $$type(){
            return "ADE_ReplaceCameraParameters"
        }
},

    /**
     * Replace Orig. Pose Aspect Ratio 🎭🅐🅓② from Animate Diff 🎭🅐🅓/② Gen2 nodes ②/CameraCtrl/poses
     * @desc 
    */
    "ADE_ReplaceOriginalPoseAspectRatio" : class extends Node{
        //Setters
        //set 'poses'(value : CAMERACTRL_POSES)  { super.$$link(0, value) } 
//set 'orig_pose_width'(value : INT)  { super.$$link(1, value) } 
//set 'orig_pose_height'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'CAMERACTRL_POSES'() : CAMERACTRL_POSES { return [this.$uid.toString(), 0]  as unknown as CAMERACTRL_POSES; }

        /**
          * Constructor
		 * @param opts.poses
		 * @param opts.orig_pose_width default: 1280 max: 9007199254740991 min: 1
		 * @param opts.orig_pose_height default: 720 max: 9007199254740991 min: 1}
        */
        constructor(opts:{
            'poses': CAMERACTRL_POSES,'orig_pose_width'?: INT,'orig_pose_height'?: INT
        }){
            super(ctx);

            super.$$link("poses", opts['poses'])
super.$$link("orig_pose_width", opts['orig_pose_width']??tmp["ADE_ReplaceOriginalPoseAspectRatio"].defaults['orig_pose_width'])
super.$$link("orig_pose_height", opts['orig_pose_height']??tmp["ADE_ReplaceOriginalPoseAspectRatio"].defaults['orig_pose_height'])
}

        static defaults = {
    'orig_pose_width':  1280,
'orig_pose_height':  720
}
        protected override $$type(){
            return "ADE_ReplaceOriginalPoseAspectRatio"
        }
},

    /**
     * Apply AnimateDiff-PIA Model 🎭🅐🅓② from Animate Diff 🎭🅐🅓/② Gen2 nodes ②/PIA
     * @desc 
    */
    "ADE_ApplyAnimateDiffModelWithPIA" : class extends Node{
        //Setters
        //set 'motion_model'(value : MOTION_MODEL_ADE)  { super.$$link(0, value) } 
//set 'image'(value : IMAGE)  { super.$$link(1, value) } 
//set 'vae'(value : VAE)  { super.$$link(2, value) } 
//set 'start_percent'(value : FLOAT)  { super.$$link(3, value) } 
//set 'end_percent'(value : FLOAT)  { super.$$link(4, value) } 
//set 'pia_input'(value : PIA_INPUT)  { super.$$link(5, value) } 
//set 'motion_lora'(value : MOTION_LORA)  { super.$$link(6, value) } 
//set 'scale_multival'(value : MULTIVAL)  { super.$$link(7, value) } 
//set 'effect_multival'(value : MULTIVAL)  { super.$$link(8, value) } 
//set 'ad_keyframes'(value : AD_KEYFRAMES)  { super.$$link(9, value) } 
//set 'prev_m_models'(value : M_MODELS)  { super.$$link(10, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(11, value) } 

        //Getters
        get 'M_MODELS'() : M_MODELS { return [this.$uid.toString(), 0]  as unknown as M_MODELS; }

        /**
          * Constructor
		 * @param opts.motion_model
		 * @param opts.image
		 * @param opts.vae
		 * @param opts.start_percent step: 0.001
		 * @param opts.end_percent default: 1 step: 0.001
		 * @param opts.pia_input
		 * @param opts.motion_lora
		 * @param opts.scale_multival
		 * @param opts.effect_multival
		 * @param opts.ad_keyframes
		 * @param opts.prev_m_models
		 * @param opts.autosize}
        */
        constructor(opts:{
            'motion_model': MOTION_MODEL_ADE,'image': IMAGE,'vae': VAE,'start_percent'?: FLOAT,'end_percent'?: FLOAT,'pia_input'?: PIA_INPUT,'motion_lora'?: MOTION_LORA,'scale_multival'?: MULTIVAL,'effect_multival'?: MULTIVAL,'ad_keyframes'?: AD_KEYFRAMES,'prev_m_models'?: M_MODELS,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("motion_model", opts['motion_model'])
super.$$link("image", opts['image'])
super.$$link("vae", opts['vae'])
super.$$link("start_percent", opts['start_percent']??tmp["ADE_ApplyAnimateDiffModelWithPIA"].defaults['start_percent'])
super.$$link("end_percent", opts['end_percent']??tmp["ADE_ApplyAnimateDiffModelWithPIA"].defaults['end_percent'])
super.$$link("pia_input", opts['pia_input'])
super.$$link("motion_lora", opts['motion_lora'])
super.$$link("scale_multival", opts['scale_multival'])
super.$$link("effect_multival", opts['effect_multival'])
super.$$link("ad_keyframes", opts['ad_keyframes'])
super.$$link("prev_m_models", opts['prev_m_models'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'start_percent':  0,
'end_percent':  1
}
        protected override $$type(){
            return "ADE_ApplyAnimateDiffModelWithPIA"
        }
},

    /**
     * PIA Input [Multival] 🎭🅐🅓② from Animate Diff 🎭🅐🅓/② Gen2 nodes ②/PIA
     * @desc 
    */
    "ADE_InputPIA_Multival" : class extends Node{
        //Setters
        //set 'multival'(value : MULTIVAL)  { super.$$link(0, value) } 

        //Getters
        get 'PIA_INPUT'() : PIA_INPUT { return [this.$uid.toString(), 0]  as unknown as PIA_INPUT; }

        /**
          * Constructor
		 * @param opts.multival}
        */
        constructor(opts:{
            'multival': MULTIVAL
        }){
            super(ctx);

            super.$$link("multival", opts['multival'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ADE_InputPIA_Multival"
        }
},

    /**
     * PIA Input [Paper Presets] 🎭🅐🅓② from Animate Diff 🎭🅐🅓/② Gen2 nodes ②/PIA
     * @desc 
    */
    "ADE_InputPIA_PaperPresets" : class extends Node{
        //Setters
        //set 'preset'(value : 'Animation (Small Motion)'|'Animation (Medium Motion)'|'Animation (Large Motion)'|'Loop (Small Motion)'|'Loop (Medium Motion)'|'Loop (Large Motion)'|'Style Transfer (Small Motion)'|'Style Transfer (Medium Motion)'|'Style Transfer (Large Motion)'| $dyn)  { super.$$link(0, value) } 
//set 'batch_index'(value : INT)  { super.$$link(1, value) } 
//set 'mult_multival'(value : MULTIVAL)  { super.$$link(2, value) } 
//set 'print_values'(value : BOOLEAN)  { super.$$link(3, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(4, value) } 

        //Getters
        get 'PIA_INPUT'() : PIA_INPUT { return [this.$uid.toString(), 0]  as unknown as PIA_INPUT; }

        /**
          * Constructor
		 * @param opts.preset
		 * @param opts.batch_index max: 9007199254740991 min: -9007199254740991 step: 1
		 * @param opts.mult_multival
		 * @param opts.print_values
		 * @param opts.autosize}
        */
        constructor(opts:{
            'preset': 'Animation (Small Motion)'|'Animation (Medium Motion)'|'Animation (Large Motion)'|'Loop (Small Motion)'|'Loop (Medium Motion)'|'Loop (Large Motion)'|'Style Transfer (Small Motion)'|'Style Transfer (Medium Motion)'|'Style Transfer (Large Motion)'| $dyn,'batch_index'?: INT,'mult_multival'?: MULTIVAL,'print_values'?: BOOLEAN,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("preset", opts['preset'])
super.$$link("batch_index", opts['batch_index']??tmp["ADE_InputPIA_PaperPresets"].defaults['batch_index'])
super.$$link("mult_multival", opts['mult_multival'])
super.$$link("print_values", opts['print_values']??tmp["ADE_InputPIA_PaperPresets"].defaults['print_values'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'batch_index':  0,
'print_values':  false
}
        protected override $$type(){
            return "ADE_InputPIA_PaperPresets"
        }
},

    /**
     * AnimateDiff-PIA Keyframe 🎭🅐🅓 from Animate Diff 🎭🅐🅓/② Gen2 nodes ②/PIA
     * @desc 
    */
    "ADE_PIA_AnimateDiffKeyframe" : class extends Node{
        //Setters
        //set 'start_percent'(value : FLOAT)  { super.$$link(0, value) } 
//set 'prev_ad_keyframes'(value : AD_KEYFRAMES)  { super.$$link(1, value) } 
//set 'scale_multival'(value : MULTIVAL)  { super.$$link(2, value) } 
//set 'effect_multival'(value : MULTIVAL)  { super.$$link(3, value) } 
//set 'pia_input'(value : PIA_INPUT)  { super.$$link(4, value) } 
//set 'inherit_missing'(value : BOOLEAN)  { super.$$link(5, value) } 
//set 'guarantee_steps'(value : INT)  { super.$$link(6, value) } 
//set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(7, value) } 

        //Getters
        get 'AD_KEYFRAMES'() : AD_KEYFRAMES { return [this.$uid.toString(), 0]  as unknown as AD_KEYFRAMES; }

        /**
          * Constructor
		 * @param opts.start_percent step: 0.001
		 * @param opts.prev_ad_keyframes
		 * @param opts.scale_multival
		 * @param opts.effect_multival
		 * @param opts.pia_input
		 * @param opts.inherit_missing default: true
		 * @param opts.guarantee_steps default: 1
		 * @param opts.autosize}
        */
        constructor(opts:{
            'start_percent'?: FLOAT,'prev_ad_keyframes'?: AD_KEYFRAMES,'scale_multival'?: MULTIVAL,'effect_multival'?: MULTIVAL,'pia_input'?: PIA_INPUT,'inherit_missing'?: BOOLEAN,'guarantee_steps'?: INT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            super.$$link("start_percent", opts['start_percent']??tmp["ADE_PIA_AnimateDiffKeyframe"].defaults['start_percent'])
super.$$link("prev_ad_keyframes", opts['prev_ad_keyframes'])
super.$$link("scale_multival", opts['scale_multival'])
super.$$link("effect_multival", opts['effect_multival'])
super.$$link("pia_input", opts['pia_input'])
super.$$link("inherit_missing", opts['inherit_missing']??tmp["ADE_PIA_AnimateDiffKeyframe"].defaults['inherit_missing'])
super.$$link("guarantee_steps", opts['guarantee_steps']??tmp["ADE_PIA_AnimateDiffKeyframe"].defaults['guarantee_steps'])
super.$$link("autosize", opts['autosize'])
}

        static defaults = {
    'start_percent':  0,
'inherit_missing':  true,
'guarantee_steps':  1
}
        protected override $$type(){
            return "ADE_PIA_AnimateDiffKeyframe"
        }
},

    /**
     * 🧪Inject PIA into AnimateDiff Model 🎭🅐🅓② from Animate Diff 🎭🅐🅓/② Gen2 nodes ②/PIA/🧪experimental
     * @desc 
    */
    "ADE_InjectPIAIntoAnimateDiffModel" : class extends Node{
        //Setters
        //set 'model_name'(value : 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt'| $dyn)  { super.$$link(0, value) } 
//set 'motion_model'(value : MOTION_MODEL_ADE)  { super.$$link(1, value) } 
//set 'ad_settings'(value : AD_SETTINGS)  { super.$$link(2, value) } 
//set 'deprecation_warning'(value : ADEWARN)  { super.$$link(3, value) } 

        //Getters
        get 'MOTION_MODEL'() : MOTION_MODEL_ADE { return [this.$uid.toString(), 0]  as unknown as MOTION_MODEL_ADE; }

        /**
          * Constructor
		 * @param opts.model_name
		 * @param opts.motion_model
		 * @param opts.ad_settings
		 * @param opts.deprecation_warning}
        */
        constructor(opts:{
            'model_name': 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt'| $dyn,'motion_model': MOTION_MODEL_ADE,'ad_settings'?: AD_SETTINGS,'deprecation_warning'?: ADEWARN
        }){
            super(ctx);

            super.$$link("model_name", opts['model_name'])
super.$$link("motion_model", opts['motion_model'])
super.$$link("ad_settings", opts['ad_settings'])
super.$$link("deprecation_warning", opts['deprecation_warning'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ADE_InjectPIAIntoAnimateDiffModel"
        }
},

    /**
     * 🚫AnimateDiff Loader [DEPRECATED] 🎭🅐🅓 from 
     * @desc 
    */
    "AnimateDiffLoaderV1" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'latents'(value : LATENT)  { super.$$link(1, value) } 
//set 'model_name'(value : 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt'| $dyn)  { super.$$link(2, value) } 
//set 'unlimited_area_hack'(value : BOOLEAN)  { super.$$link(3, value) } 
//set 'beta_schedule'(value : 'sqrt_linear (AnimateDiff)'|'use existing'|'autoselect'|'linear (AnimateDiff-SDXL)'|'linear (HotshotXL/default)'|'avg(sqrt_linear,linear)'|'lcm avg(sqrt_linear,linear)'|'lcm'|'lcm[100_ots]'|'lcm >> sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2'| $dyn)  { super.$$link(4, value) } 
//set 'deprecation_warning'(value : ADEWARN)  { super.$$link(5, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'LATENT'() : LATENT { return [this.$uid.toString(), 1]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.latents
		 * @param opts.model_name
		 * @param opts.unlimited_area_hack
		 * @param opts.beta_schedule
		 * @param opts.deprecation_warning}
        */
        constructor(opts:{
            'model': MODEL,'latents': LATENT,'model_name': 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt'| $dyn,'unlimited_area_hack'?: BOOLEAN,'beta_schedule': 'sqrt_linear (AnimateDiff)'|'use existing'|'autoselect'|'linear (AnimateDiff-SDXL)'|'linear (HotshotXL/default)'|'avg(sqrt_linear,linear)'|'lcm avg(sqrt_linear,linear)'|'lcm'|'lcm[100_ots]'|'lcm >> sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2'| $dyn,'deprecation_warning'?: ADEWARN
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("latents", opts['latents'])
super.$$link("model_name", opts['model_name'])
super.$$link("unlimited_area_hack", opts['unlimited_area_hack']??tmp["AnimateDiffLoaderV1"].defaults['unlimited_area_hack'])
super.$$link("beta_schedule", opts['beta_schedule'])
super.$$link("deprecation_warning", opts['deprecation_warning'])
}

        static defaults = {
    'unlimited_area_hack':  false
}
        protected override $$type(){
            return "AnimateDiffLoaderV1"
        }
},

    /**
     * 🚫AnimateDiff Loader (Advanced) [DEPRECATED] 🎭🅐🅓 from 
     * @desc 
    */
    "ADE_AnimateDiffLoaderV1Advanced" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'latents'(value : LATENT)  { super.$$link(1, value) } 
//set 'model_name'(value : 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt'| $dyn)  { super.$$link(2, value) } 
//set 'unlimited_area_hack'(value : BOOLEAN)  { super.$$link(3, value) } 
//set 'context_length'(value : INT)  { super.$$link(4, value) } 
//set 'context_stride'(value : INT)  { super.$$link(5, value) } 
//set 'context_overlap'(value : INT)  { super.$$link(6, value) } 
//set 'context_schedule'(value : 'uniform'| $dyn)  { super.$$link(7, value) } 
//set 'closed_loop'(value : BOOLEAN)  { super.$$link(8, value) } 
//set 'beta_schedule'(value : 'sqrt_linear (AnimateDiff)'|'use existing'|'autoselect'|'linear (AnimateDiff-SDXL)'|'linear (HotshotXL/default)'|'avg(sqrt_linear,linear)'|'lcm avg(sqrt_linear,linear)'|'lcm'|'lcm[100_ots]'|'lcm >> sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2'| $dyn)  { super.$$link(9, value) } 
//set 'deprecation_warning'(value : ADEWARN)  { super.$$link(10, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'LATENT'() : LATENT { return [this.$uid.toString(), 1]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.latents
		 * @param opts.model_name
		 * @param opts.unlimited_area_hack
		 * @param opts.context_length default: 16
		 * @param opts.context_stride default: 1 max: 1000 min: 1
		 * @param opts.context_overlap default: 4
		 * @param opts.context_schedule
		 * @param opts.closed_loop
		 * @param opts.beta_schedule
		 * @param opts.deprecation_warning}
        */
        constructor(opts:{
            'model': MODEL,'latents': LATENT,'model_name': 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt'| $dyn,'unlimited_area_hack'?: BOOLEAN,'context_length'?: INT,'context_stride'?: INT,'context_overlap'?: INT,'context_schedule': 'uniform'| $dyn,'closed_loop'?: BOOLEAN,'beta_schedule': 'sqrt_linear (AnimateDiff)'|'use existing'|'autoselect'|'linear (AnimateDiff-SDXL)'|'linear (HotshotXL/default)'|'avg(sqrt_linear,linear)'|'lcm avg(sqrt_linear,linear)'|'lcm'|'lcm[100_ots]'|'lcm >> sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2'| $dyn,'deprecation_warning'?: ADEWARN
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("latents", opts['latents'])
super.$$link("model_name", opts['model_name'])
super.$$link("unlimited_area_hack", opts['unlimited_area_hack']??tmp["ADE_AnimateDiffLoaderV1Advanced"].defaults['unlimited_area_hack'])
super.$$link("context_length", opts['context_length']??tmp["ADE_AnimateDiffLoaderV1Advanced"].defaults['context_length'])
super.$$link("context_stride", opts['context_stride']??tmp["ADE_AnimateDiffLoaderV1Advanced"].defaults['context_stride'])
super.$$link("context_overlap", opts['context_overlap']??tmp["ADE_AnimateDiffLoaderV1Advanced"].defaults['context_overlap'])
super.$$link("context_schedule", opts['context_schedule'])
super.$$link("closed_loop", opts['closed_loop']??tmp["ADE_AnimateDiffLoaderV1Advanced"].defaults['closed_loop'])
super.$$link("beta_schedule", opts['beta_schedule'])
super.$$link("deprecation_warning", opts['deprecation_warning'])
}

        static defaults = {
    'unlimited_area_hack':  false,
'context_length':  16,
'context_stride':  1,
'context_overlap':  4,
'closed_loop':  false
}
        protected override $$type(){
            return "ADE_AnimateDiffLoaderV1Advanced"
        }
},

    /**
     * 🚫AnimateDiff Combine [DEPRECATED, Use Video Combine (VHS) Instead!] 🎭🅐🅓 from 
     * @desc 
    */
    "ADE_AnimateDiffCombine" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'frame_rate'(value : INT)  { super.$$link(1, value) } 
//set 'loop_count'(value : INT)  { super.$$link(2, value) } 
//set 'filename_prefix'(value : STRING)  { super.$$link(3, value) } 
//set 'format'(value : 'image/gif'|'image/webp'|'video/av1-webm'|'video/h264-mp4'|'video/h265-mp4'|'video/webm'| $dyn)  { super.$$link(4, value) } 
//set 'pingpong'(value : BOOLEAN)  { super.$$link(5, value) } 
//set 'save_image'(value : BOOLEAN)  { super.$$link(6, value) } 
//set 'deprecation_warning'(value : ADEWARN)  { super.$$link(7, value) } 

        //Getters
        get 'GIF'() : GIF { return [this.$uid.toString(), 0]  as unknown as GIF; }

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.frame_rate default: 8 max: 24 min: 1 step: 1
		 * @param opts.loop_count step: 1
		 * @param opts.filename_prefix default: "AnimateDiff"
		 * @param opts.format
		 * @param opts.pingpong
		 * @param opts.save_image default: true
		 * @param opts.deprecation_warning}
        */
        constructor(opts:{
            'images': IMAGE,'frame_rate'?: INT,'loop_count'?: INT,'filename_prefix'?: STRING,'format': 'image/gif'|'image/webp'|'video/av1-webm'|'video/h264-mp4'|'video/h265-mp4'|'video/webm'| $dyn,'pingpong'?: BOOLEAN,'save_image'?: BOOLEAN,'deprecation_warning'?: ADEWARN
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("frame_rate", opts['frame_rate']??tmp["ADE_AnimateDiffCombine"].defaults['frame_rate'])
super.$$link("loop_count", opts['loop_count']??tmp["ADE_AnimateDiffCombine"].defaults['loop_count'])
super.$$link("filename_prefix", opts['filename_prefix']??tmp["ADE_AnimateDiffCombine"].defaults['filename_prefix'])
super.$$link("format", opts['format'])
super.$$link("pingpong", opts['pingpong']??tmp["ADE_AnimateDiffCombine"].defaults['pingpong'])
super.$$link("save_image", opts['save_image']??tmp["ADE_AnimateDiffCombine"].defaults['save_image'])
super.$$link("deprecation_warning", opts['deprecation_warning'])
}

        static defaults = {
    'frame_rate':  8,
'loop_count':  0,
'filename_prefix':  "AnimateDiff",
'pingpong':  false,
'save_image':  true
}
        protected override $$type(){
            return "ADE_AnimateDiffCombine"
        }
},

    /**
     * 🚫[DEPR] Motion Model Settings 🎭🅐🅓① from 
     * @desc 
    */
    "ADE_AnimateDiffModelSettings_Release" : class extends Node{
        //Setters
        //set 'min_motion_scale'(value : FLOAT)  { super.$$link(0, value) } 
//set 'max_motion_scale'(value : FLOAT)  { super.$$link(1, value) } 
//set 'mask_motion_scale'(value : MASK)  { super.$$link(2, value) } 
//set 'deprecation_warning'(value : ADEWARN)  { super.$$link(3, value) } 

        //Getters
        get 'AD_SETTINGS'() : AD_SETTINGS { return [this.$uid.toString(), 0]  as unknown as AD_SETTINGS; }

        /**
          * Constructor
		 * @param opts.min_motion_scale default: 1 step: 0.001
		 * @param opts.max_motion_scale default: 1 step: 0.001
		 * @param opts.mask_motion_scale
		 * @param opts.deprecation_warning}
        */
        constructor(opts:{
            'min_motion_scale'?: FLOAT,'max_motion_scale'?: FLOAT,'mask_motion_scale'?: MASK,'deprecation_warning'?: ADEWARN
        }){
            super(ctx);

            super.$$link("min_motion_scale", opts['min_motion_scale']??tmp["ADE_AnimateDiffModelSettings_Release"].defaults['min_motion_scale'])
super.$$link("max_motion_scale", opts['max_motion_scale']??tmp["ADE_AnimateDiffModelSettings_Release"].defaults['max_motion_scale'])
super.$$link("mask_motion_scale", opts['mask_motion_scale'])
super.$$link("deprecation_warning", opts['deprecation_warning'])
}

        static defaults = {
    'min_motion_scale':  1,
'max_motion_scale':  1
}
        protected override $$type(){
            return "ADE_AnimateDiffModelSettings_Release"
        }
},

    /**
     * 🚫[DEPR] Motion Model Settings (Simple) 🎭🅐🅓① from 
     * @desc 
    */
    "ADE_AnimateDiffModelSettingsSimple" : class extends Node{
        //Setters
        //set 'motion_pe_stretch'(value : INT)  { super.$$link(0, value) } 
//set 'mask_motion_scale'(value : MASK)  { super.$$link(1, value) } 
//set 'min_motion_scale'(value : FLOAT)  { super.$$link(2, value) } 
//set 'max_motion_scale'(value : FLOAT)  { super.$$link(3, value) } 
//set 'deprecation_warning'(value : ADEWARN)  { super.$$link(4, value) } 

        //Getters
        get 'AD_SETTINGS'() : AD_SETTINGS { return [this.$uid.toString(), 0]  as unknown as AD_SETTINGS; }

        /**
          * Constructor
		 * @param opts.motion_pe_stretch step: 1
		 * @param opts.mask_motion_scale
		 * @param opts.min_motion_scale default: 1 step: 0.001
		 * @param opts.max_motion_scale default: 1 step: 0.001
		 * @param opts.deprecation_warning}
        */
        constructor(opts:{
            'motion_pe_stretch'?: INT,'mask_motion_scale'?: MASK,'min_motion_scale'?: FLOAT,'max_motion_scale'?: FLOAT,'deprecation_warning'?: ADEWARN
        }){
            super(ctx);

            super.$$link("motion_pe_stretch", opts['motion_pe_stretch']??tmp["ADE_AnimateDiffModelSettingsSimple"].defaults['motion_pe_stretch'])
super.$$link("mask_motion_scale", opts['mask_motion_scale'])
super.$$link("min_motion_scale", opts['min_motion_scale']??tmp["ADE_AnimateDiffModelSettingsSimple"].defaults['min_motion_scale'])
super.$$link("max_motion_scale", opts['max_motion_scale']??tmp["ADE_AnimateDiffModelSettingsSimple"].defaults['max_motion_scale'])
super.$$link("deprecation_warning", opts['deprecation_warning'])
}

        static defaults = {
    'motion_pe_stretch':  0,
'min_motion_scale':  1,
'max_motion_scale':  1
}
        protected override $$type(){
            return "ADE_AnimateDiffModelSettingsSimple"
        }
},

    /**
     * 🚫[DEPR] Motion Model Settings (Advanced) 🎭🅐🅓① from 
     * @desc 
    */
    "ADE_AnimateDiffModelSettings" : class extends Node{
        //Setters
        //set 'pe_strength'(value : FLOAT)  { super.$$link(0, value) } 
//set 'attn_strength'(value : FLOAT)  { super.$$link(1, value) } 
//set 'other_strength'(value : FLOAT)  { super.$$link(2, value) } 
//set 'motion_pe_stretch'(value : INT)  { super.$$link(3, value) } 
//set 'cap_initial_pe_length'(value : INT)  { super.$$link(4, value) } 
//set 'interpolate_pe_to_length'(value : INT)  { super.$$link(5, value) } 
//set 'initial_pe_idx_offset'(value : INT)  { super.$$link(6, value) } 
//set 'final_pe_idx_offset'(value : INT)  { super.$$link(7, value) } 
//set 'mask_motion_scale'(value : MASK)  { super.$$link(8, value) } 
//set 'min_motion_scale'(value : FLOAT)  { super.$$link(9, value) } 
//set 'max_motion_scale'(value : FLOAT)  { super.$$link(10, value) } 
//set 'deprecation_warning'(value : ADEWARN)  { super.$$link(11, value) } 

        //Getters
        get 'AD_SETTINGS'() : AD_SETTINGS { return [this.$uid.toString(), 0]  as unknown as AD_SETTINGS; }

        /**
          * Constructor
		 * @param opts.pe_strength default: 1 step: 0.0001
		 * @param opts.attn_strength default: 1 step: 0.0001
		 * @param opts.other_strength default: 1 step: 0.0001
		 * @param opts.motion_pe_stretch step: 1
		 * @param opts.cap_initial_pe_length step: 1
		 * @param opts.interpolate_pe_to_length step: 1
		 * @param opts.initial_pe_idx_offset step: 1
		 * @param opts.final_pe_idx_offset step: 1
		 * @param opts.mask_motion_scale
		 * @param opts.min_motion_scale default: 1 step: 0.001
		 * @param opts.max_motion_scale default: 1 step: 0.001
		 * @param opts.deprecation_warning}
        */
        constructor(opts:{
            'pe_strength'?: FLOAT,'attn_strength'?: FLOAT,'other_strength'?: FLOAT,'motion_pe_stretch'?: INT,'cap_initial_pe_length'?: INT,'interpolate_pe_to_length'?: INT,'initial_pe_idx_offset'?: INT,'final_pe_idx_offset'?: INT,'mask_motion_scale'?: MASK,'min_motion_scale'?: FLOAT,'max_motion_scale'?: FLOAT,'deprecation_warning'?: ADEWARN
        }){
            super(ctx);

            super.$$link("pe_strength", opts['pe_strength']??tmp["ADE_AnimateDiffModelSettings"].defaults['pe_strength'])
super.$$link("attn_strength", opts['attn_strength']??tmp["ADE_AnimateDiffModelSettings"].defaults['attn_strength'])
super.$$link("other_strength", opts['other_strength']??tmp["ADE_AnimateDiffModelSettings"].defaults['other_strength'])
super.$$link("motion_pe_stretch", opts['motion_pe_stretch']??tmp["ADE_AnimateDiffModelSettings"].defaults['motion_pe_stretch'])
super.$$link("cap_initial_pe_length", opts['cap_initial_pe_length']??tmp["ADE_AnimateDiffModelSettings"].defaults['cap_initial_pe_length'])
super.$$link("interpolate_pe_to_length", opts['interpolate_pe_to_length']??tmp["ADE_AnimateDiffModelSettings"].defaults['interpolate_pe_to_length'])
super.$$link("initial_pe_idx_offset", opts['initial_pe_idx_offset']??tmp["ADE_AnimateDiffModelSettings"].defaults['initial_pe_idx_offset'])
super.$$link("final_pe_idx_offset", opts['final_pe_idx_offset']??tmp["ADE_AnimateDiffModelSettings"].defaults['final_pe_idx_offset'])
super.$$link("mask_motion_scale", opts['mask_motion_scale'])
super.$$link("min_motion_scale", opts['min_motion_scale']??tmp["ADE_AnimateDiffModelSettings"].defaults['min_motion_scale'])
super.$$link("max_motion_scale", opts['max_motion_scale']??tmp["ADE_AnimateDiffModelSettings"].defaults['max_motion_scale'])
super.$$link("deprecation_warning", opts['deprecation_warning'])
}

        static defaults = {
    'pe_strength':  1,
'attn_strength':  1,
'other_strength':  1,
'motion_pe_stretch':  0,
'cap_initial_pe_length':  0,
'interpolate_pe_to_length':  0,
'initial_pe_idx_offset':  0,
'final_pe_idx_offset':  0,
'min_motion_scale':  1,
'max_motion_scale':  1
}
        protected override $$type(){
            return "ADE_AnimateDiffModelSettings"
        }
},

    /**
     * 🚫[DEPR] Motion Model Settings (Adv. Attn) 🎭🅐🅓① from 
     * @desc 
    */
    "ADE_AnimateDiffModelSettingsAdvancedAttnStrengths" : class extends Node{
        //Setters
        //set 'pe_strength'(value : FLOAT)  { super.$$link(0, value) } 
//set 'attn_strength'(value : FLOAT)  { super.$$link(1, value) } 
//set 'attn_q_strength'(value : FLOAT)  { super.$$link(2, value) } 
//set 'attn_k_strength'(value : FLOAT)  { super.$$link(3, value) } 
//set 'attn_v_strength'(value : FLOAT)  { super.$$link(4, value) } 
//set 'attn_out_weight_strength'(value : FLOAT)  { super.$$link(5, value) } 
//set 'attn_out_bias_strength'(value : FLOAT)  { super.$$link(6, value) } 
//set 'other_strength'(value : FLOAT)  { super.$$link(7, value) } 
//set 'motion_pe_stretch'(value : INT)  { super.$$link(8, value) } 
//set 'cap_initial_pe_length'(value : INT)  { super.$$link(9, value) } 
//set 'interpolate_pe_to_length'(value : INT)  { super.$$link(10, value) } 
//set 'initial_pe_idx_offset'(value : INT)  { super.$$link(11, value) } 
//set 'final_pe_idx_offset'(value : INT)  { super.$$link(12, value) } 
//set 'mask_motion_scale'(value : MASK)  { super.$$link(13, value) } 
//set 'min_motion_scale'(value : FLOAT)  { super.$$link(14, value) } 
//set 'max_motion_scale'(value : FLOAT)  { super.$$link(15, value) } 
//set 'deprecation_warning'(value : ADEWARN)  { super.$$link(16, value) } 

        //Getters
        get 'AD_SETTINGS'() : AD_SETTINGS { return [this.$uid.toString(), 0]  as unknown as AD_SETTINGS; }

        /**
          * Constructor
		 * @param opts.pe_strength default: 1 step: 0.0001
		 * @param opts.attn_strength default: 1 step: 0.0001
		 * @param opts.attn_q_strength default: 1 step: 0.0001
		 * @param opts.attn_k_strength default: 1 step: 0.0001
		 * @param opts.attn_v_strength default: 1 step: 0.0001
		 * @param opts.attn_out_weight_strength default: 1 step: 0.0001
		 * @param opts.attn_out_bias_strength default: 1 step: 0.0001
		 * @param opts.other_strength default: 1 step: 0.0001
		 * @param opts.motion_pe_stretch step: 1
		 * @param opts.cap_initial_pe_length step: 1
		 * @param opts.interpolate_pe_to_length step: 1
		 * @param opts.initial_pe_idx_offset step: 1
		 * @param opts.final_pe_idx_offset step: 1
		 * @param opts.mask_motion_scale
		 * @param opts.min_motion_scale default: 1 step: 0.001
		 * @param opts.max_motion_scale default: 1 step: 0.001
		 * @param opts.deprecation_warning}
        */
        constructor(opts:{
            'pe_strength'?: FLOAT,'attn_strength'?: FLOAT,'attn_q_strength'?: FLOAT,'attn_k_strength'?: FLOAT,'attn_v_strength'?: FLOAT,'attn_out_weight_strength'?: FLOAT,'attn_out_bias_strength'?: FLOAT,'other_strength'?: FLOAT,'motion_pe_stretch'?: INT,'cap_initial_pe_length'?: INT,'interpolate_pe_to_length'?: INT,'initial_pe_idx_offset'?: INT,'final_pe_idx_offset'?: INT,'mask_motion_scale'?: MASK,'min_motion_scale'?: FLOAT,'max_motion_scale'?: FLOAT,'deprecation_warning'?: ADEWARN
        }){
            super(ctx);

            super.$$link("pe_strength", opts['pe_strength']??tmp["ADE_AnimateDiffModelSettingsAdvancedAttnStrengths"].defaults['pe_strength'])
super.$$link("attn_strength", opts['attn_strength']??tmp["ADE_AnimateDiffModelSettingsAdvancedAttnStrengths"].defaults['attn_strength'])
super.$$link("attn_q_strength", opts['attn_q_strength']??tmp["ADE_AnimateDiffModelSettingsAdvancedAttnStrengths"].defaults['attn_q_strength'])
super.$$link("attn_k_strength", opts['attn_k_strength']??tmp["ADE_AnimateDiffModelSettingsAdvancedAttnStrengths"].defaults['attn_k_strength'])
super.$$link("attn_v_strength", opts['attn_v_strength']??tmp["ADE_AnimateDiffModelSettingsAdvancedAttnStrengths"].defaults['attn_v_strength'])
super.$$link("attn_out_weight_strength", opts['attn_out_weight_strength']??tmp["ADE_AnimateDiffModelSettingsAdvancedAttnStrengths"].defaults['attn_out_weight_strength'])
super.$$link("attn_out_bias_strength", opts['attn_out_bias_strength']??tmp["ADE_AnimateDiffModelSettingsAdvancedAttnStrengths"].defaults['attn_out_bias_strength'])
super.$$link("other_strength", opts['other_strength']??tmp["ADE_AnimateDiffModelSettingsAdvancedAttnStrengths"].defaults['other_strength'])
super.$$link("motion_pe_stretch", opts['motion_pe_stretch']??tmp["ADE_AnimateDiffModelSettingsAdvancedAttnStrengths"].defaults['motion_pe_stretch'])
super.$$link("cap_initial_pe_length", opts['cap_initial_pe_length']??tmp["ADE_AnimateDiffModelSettingsAdvancedAttnStrengths"].defaults['cap_initial_pe_length'])
super.$$link("interpolate_pe_to_length", opts['interpolate_pe_to_length']??tmp["ADE_AnimateDiffModelSettingsAdvancedAttnStrengths"].defaults['interpolate_pe_to_length'])
super.$$link("initial_pe_idx_offset", opts['initial_pe_idx_offset']??tmp["ADE_AnimateDiffModelSettingsAdvancedAttnStrengths"].defaults['initial_pe_idx_offset'])
super.$$link("final_pe_idx_offset", opts['final_pe_idx_offset']??tmp["ADE_AnimateDiffModelSettingsAdvancedAttnStrengths"].defaults['final_pe_idx_offset'])
super.$$link("mask_motion_scale", opts['mask_motion_scale'])
super.$$link("min_motion_scale", opts['min_motion_scale']??tmp["ADE_AnimateDiffModelSettingsAdvancedAttnStrengths"].defaults['min_motion_scale'])
super.$$link("max_motion_scale", opts['max_motion_scale']??tmp["ADE_AnimateDiffModelSettingsAdvancedAttnStrengths"].defaults['max_motion_scale'])
super.$$link("deprecation_warning", opts['deprecation_warning'])
}

        static defaults = {
    'pe_strength':  1,
'attn_strength':  1,
'attn_q_strength':  1,
'attn_k_strength':  1,
'attn_v_strength':  1,
'attn_out_weight_strength':  1,
'attn_out_bias_strength':  1,
'other_strength':  1,
'motion_pe_stretch':  0,
'cap_initial_pe_length':  0,
'interpolate_pe_to_length':  0,
'initial_pe_idx_offset':  0,
'final_pe_idx_offset':  0,
'min_motion_scale':  1,
'max_motion_scale':  1
}
        protected override $$type(){
            return "ADE_AnimateDiffModelSettingsAdvancedAttnStrengths"
        }
},

    /**
     * SAMLoader (Impact) from ImpactPack
     * @desc 
    */
    "SAMLoader" : class extends Node{
        //Setters
        //set 'model_name'(value : 'mobile_sam.pt'|'sam_vit_b_01ec64.pth'|'sam_vit_h_4b8939.pth'|'ESAM'| $dyn)  { super.$$link(0, value) } 
//set 'device_mode'(value : 'AUTO'|'Prefer GPU'|'CPU'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'SAM_MODEL'() : SAM_MODEL { return [this.$uid.toString(), 0]  as unknown as SAM_MODEL; }

        /**
          * Constructor
		 * @param opts.model_name
		 * @param opts.device_mode}
        */
        constructor(opts:{
            'model_name': 'mobile_sam.pt'|'sam_vit_b_01ec64.pth'|'sam_vit_h_4b8939.pth'|'ESAM'| $dyn,'device_mode': 'AUTO'|'Prefer GPU'|'CPU'| $dyn
        }){
            super(ctx);

            super.$$link("model_name", opts['model_name'])
super.$$link("device_mode", opts['device_mode'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "SAMLoader"
        }
},

    /**
     * CLIPSegDetectorProvider from ImpactPack/Util
     * @desc 
    */
    "CLIPSegDetectorProvider" : class extends Node{
        //Setters
        //set 'text'(value : STRING)  { super.$$link(0, value) } 
//set 'blur'(value : FLOAT)  { super.$$link(1, value) } 
//set 'threshold'(value : FLOAT)  { super.$$link(2, value) } 
//set 'dilation_factor'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'BBOX_DETECTOR'() : BBOX_DETECTOR { return [this.$uid.toString(), 0]  as unknown as BBOX_DETECTOR; }

        /**
          * Constructor
		 * @param opts.text
		 * @param opts.blur default: 7 step: 0.1
		 * @param opts.threshold default: 0.4 step: 0.05
		 * @param opts.dilation_factor default: 4 step: 1}
        */
        constructor(opts:{
            'text': STRING,'blur'?: FLOAT,'threshold'?: FLOAT,'dilation_factor'?: INT
        }){
            super(ctx);

            super.$$link("text", opts['text'])
super.$$link("blur", opts['blur']??tmp["CLIPSegDetectorProvider"].defaults['blur'])
super.$$link("threshold", opts['threshold']??tmp["CLIPSegDetectorProvider"].defaults['threshold'])
super.$$link("dilation_factor", opts['dilation_factor']??tmp["CLIPSegDetectorProvider"].defaults['dilation_factor'])
}

        static defaults = {
    'blur':  7,
'threshold':  0.4,
'dilation_factor':  4
}
        protected override $$type(){
            return "CLIPSegDetectorProvider"
        }
},

    /**
     * ONNXDetectorProvider from ImpactPack
     * @desc 
    */
    "ONNXDetectorProvider" : class extends Node{
        //Setters
        //set 'model_name'(value : void)  { super.$$link(0, value) } 

        //Getters
        get 'BBOX_DETECTOR'() : BBOX_DETECTOR { return [this.$uid.toString(), 0]  as unknown as BBOX_DETECTOR; }

        /**
          * Constructor
		 * @param opts.model_name}
        */
        constructor(opts:{
            'model_name': void
        }){
            super(ctx);

            super.$$link("model_name", opts['model_name'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ONNXDetectorProvider"
        }
},

    /**
     * Pixelwise(SEGS & SEGS) from ImpactPack/Operation
     * @desc 
    */
    "BitwiseAndMaskForEach" : class extends Node{
        //Setters
        //set 'base_segs'(value : SEGS)  { super.$$link(0, value) } 
//set 'mask_segs'(value : SEGS)  { super.$$link(1, value) } 

        //Getters
        get 'SEGS'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }

        /**
          * Constructor
		 * @param opts.base_segs
		 * @param opts.mask_segs}
        */
        constructor(opts:{
            'base_segs': SEGS,'mask_segs': SEGS
        }){
            super(ctx);

            super.$$link("base_segs", opts['base_segs'])
super.$$link("mask_segs", opts['mask_segs'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "BitwiseAndMaskForEach"
        }
},

    /**
     * Pixelwise(SEGS - SEGS) from ImpactPack/Operation
     * @desc 
    */
    "SubtractMaskForEach" : class extends Node{
        //Setters
        //set 'base_segs'(value : SEGS)  { super.$$link(0, value) } 
//set 'mask_segs'(value : SEGS)  { super.$$link(1, value) } 

        //Getters
        get 'SEGS'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }

        /**
          * Constructor
		 * @param opts.base_segs
		 * @param opts.mask_segs}
        */
        constructor(opts:{
            'base_segs': SEGS,'mask_segs': SEGS
        }){
            super(ctx);

            super.$$link("base_segs", opts['base_segs'])
super.$$link("mask_segs", opts['mask_segs'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "SubtractMaskForEach"
        }
},

    /**
     * Detailer (SEGS) from ImpactPack/Detailer
     * @desc 
    */
    "DetailerForEach" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'segs'(value : SEGS)  { super.$$link(1, value) } 
//set 'model'(value : MODEL)  { super.$$link(2, value) } 
//set 'clip'(value : CLIP)  { super.$$link(3, value) } 
//set 'vae'(value : VAE)  { super.$$link(4, value) } 
//set 'guide_size'(value : FLOAT)  { super.$$link(5, value) } 
//set 'guide_size_for'(value : BOOLEAN)  { super.$$link(6, value) } 
//set 'max_size'(value : FLOAT)  { super.$$link(7, value) } 
//set 'seed'(value : INT)  { super.$$link(8, value) } 
//set 'steps'(value : INT)  { super.$$link(9, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(10, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(11, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn)  { super.$$link(12, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(13, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(14, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(15, value) } 
//set 'feather'(value : INT)  { super.$$link(16, value) } 
//set 'noise_mask'(value : BOOLEAN)  { super.$$link(17, value) } 
//set 'force_inpaint'(value : BOOLEAN)  { super.$$link(18, value) } 
//set 'wildcard'(value : STRING)  { super.$$link(19, value) } 
//set 'cycle'(value : INT)  { super.$$link(20, value) } 
//set 'detailer_hook'(value : DETAILER_HOOK)  { super.$$link(21, value) } 
//set 'inpaint_model'(value : BOOLEAN)  { super.$$link(22, value) } 
//set 'noise_mask_feather'(value : INT)  { super.$$link(23, value) } 
//set 'scheduler_func_opt'(value : SCHEDULER_FUNC)  { super.$$link(24, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.segs
		 * @param opts.model
		 * @param opts.clip
		 * @param opts.vae
		 * @param opts.guide_size default: 512 max: 16384 min: 64 step: 8
		 * @param opts.guide_size_for default: true
		 * @param opts.max_size default: 1024 max: 16384 min: 64 step: 8
		 * @param opts.seed
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.cfg default: 8
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.denoise default: 0.5 max: 1 min: 0.0001 step: 0.01
		 * @param opts.feather default: 5 step: 1
		 * @param opts.noise_mask default: true
		 * @param opts.force_inpaint default: true
		 * @param opts.wildcard
		 * @param opts.cycle default: 1 max: 10 min: 1 step: 1
		 * @param opts.detailer_hook
		 * @param opts.inpaint_model
		 * @param opts.noise_mask_feather default: 20 step: 1
		 * @param opts.scheduler_func_opt}
        */
        constructor(opts:{
            'image': IMAGE,'segs': SEGS,'model': MODEL,'clip': CLIP,'vae': VAE,'guide_size'?: FLOAT,'guide_size_for'?: BOOLEAN,'max_size'?: FLOAT,'seed'?: INT,'steps'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn,'positive': CONDITIONING,'negative': CONDITIONING,'denoise'?: FLOAT,'feather'?: INT,'noise_mask'?: BOOLEAN,'force_inpaint'?: BOOLEAN,'wildcard': STRING,'cycle'?: INT,'detailer_hook'?: DETAILER_HOOK,'inpaint_model'?: BOOLEAN,'noise_mask_feather'?: INT,'scheduler_func_opt'?: SCHEDULER_FUNC
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("segs", opts['segs'])
super.$$link("model", opts['model'])
super.$$link("clip", opts['clip'])
super.$$link("vae", opts['vae'])
super.$$link("guide_size", opts['guide_size']??tmp["DetailerForEach"].defaults['guide_size'])
super.$$link("guide_size_for", opts['guide_size_for']??tmp["DetailerForEach"].defaults['guide_size_for'])
super.$$link("max_size", opts['max_size']??tmp["DetailerForEach"].defaults['max_size'])
super.$$link("seed", opts['seed']??tmp["DetailerForEach"].defaults['seed'])
super.$$link("steps", opts['steps']??tmp["DetailerForEach"].defaults['steps'])
super.$$link("cfg", opts['cfg']??tmp["DetailerForEach"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("denoise", opts['denoise']??tmp["DetailerForEach"].defaults['denoise'])
super.$$link("feather", opts['feather']??tmp["DetailerForEach"].defaults['feather'])
super.$$link("noise_mask", opts['noise_mask']??tmp["DetailerForEach"].defaults['noise_mask'])
super.$$link("force_inpaint", opts['force_inpaint']??tmp["DetailerForEach"].defaults['force_inpaint'])
super.$$link("wildcard", opts['wildcard'])
super.$$link("cycle", opts['cycle']??tmp["DetailerForEach"].defaults['cycle'])
super.$$link("detailer_hook", opts['detailer_hook'])
super.$$link("inpaint_model", opts['inpaint_model']??tmp["DetailerForEach"].defaults['inpaint_model'])
super.$$link("noise_mask_feather", opts['noise_mask_feather']??tmp["DetailerForEach"].defaults['noise_mask_feather'])
super.$$link("scheduler_func_opt", opts['scheduler_func_opt'])
}

        static defaults = {
    'guide_size':  512,
'guide_size_for':  true,
'max_size':  1024,
'seed':  0,
'steps':  20,
'cfg':  8,
'denoise':  0.5,
'feather':  5,
'noise_mask':  true,
'force_inpaint':  true,
'cycle':  1,
'inpaint_model':  false,
'noise_mask_feather':  20
}
        protected override $$type(){
            return "DetailerForEach"
        }
},

    /**
     * DetailerDebug (SEGS) from ImpactPack/Detailer
     * @desc 
    */
    "DetailerForEachDebug" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'segs'(value : SEGS)  { super.$$link(1, value) } 
//set 'model'(value : MODEL)  { super.$$link(2, value) } 
//set 'clip'(value : CLIP)  { super.$$link(3, value) } 
//set 'vae'(value : VAE)  { super.$$link(4, value) } 
//set 'guide_size'(value : FLOAT)  { super.$$link(5, value) } 
//set 'guide_size_for'(value : BOOLEAN)  { super.$$link(6, value) } 
//set 'max_size'(value : FLOAT)  { super.$$link(7, value) } 
//set 'seed'(value : INT)  { super.$$link(8, value) } 
//set 'steps'(value : INT)  { super.$$link(9, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(10, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(11, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn)  { super.$$link(12, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(13, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(14, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(15, value) } 
//set 'feather'(value : INT)  { super.$$link(16, value) } 
//set 'noise_mask'(value : BOOLEAN)  { super.$$link(17, value) } 
//set 'force_inpaint'(value : BOOLEAN)  { super.$$link(18, value) } 
//set 'wildcard'(value : STRING)  { super.$$link(19, value) } 
//set 'cycle'(value : INT)  { super.$$link(20, value) } 
//set 'detailer_hook'(value : DETAILER_HOOK)  { super.$$link(21, value) } 
//set 'inpaint_model'(value : BOOLEAN)  { super.$$link(22, value) } 
//set 'noise_mask_feather'(value : INT)  { super.$$link(23, value) } 
//set 'scheduler_func_opt'(value : SCHEDULER_FUNC)  { super.$$link(24, value) } 

        //Getters
        get 'image'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'cropped'() : IMAGE { return [this.$uid.toString(), 1]  as unknown as IMAGE; }
get 'cropped_refined'() : IMAGE { return [this.$uid.toString(), 2]  as unknown as IMAGE; }
get 'cropped_refined_alpha'() : IMAGE { return [this.$uid.toString(), 3]  as unknown as IMAGE; }
get 'cnet_images'() : IMAGE { return [this.$uid.toString(), 4]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.segs
		 * @param opts.model
		 * @param opts.clip
		 * @param opts.vae
		 * @param opts.guide_size default: 512 max: 16384 min: 64 step: 8
		 * @param opts.guide_size_for default: true
		 * @param opts.max_size default: 1024 max: 16384 min: 64 step: 8
		 * @param opts.seed
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.cfg default: 8
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.denoise default: 0.5 max: 1 min: 0.0001 step: 0.01
		 * @param opts.feather default: 5 step: 1
		 * @param opts.noise_mask default: true
		 * @param opts.force_inpaint default: true
		 * @param opts.wildcard
		 * @param opts.cycle default: 1 max: 10 min: 1 step: 1
		 * @param opts.detailer_hook
		 * @param opts.inpaint_model
		 * @param opts.noise_mask_feather default: 20 step: 1
		 * @param opts.scheduler_func_opt}
        */
        constructor(opts:{
            'image': IMAGE,'segs': SEGS,'model': MODEL,'clip': CLIP,'vae': VAE,'guide_size'?: FLOAT,'guide_size_for'?: BOOLEAN,'max_size'?: FLOAT,'seed'?: INT,'steps'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn,'positive': CONDITIONING,'negative': CONDITIONING,'denoise'?: FLOAT,'feather'?: INT,'noise_mask'?: BOOLEAN,'force_inpaint'?: BOOLEAN,'wildcard': STRING,'cycle'?: INT,'detailer_hook'?: DETAILER_HOOK,'inpaint_model'?: BOOLEAN,'noise_mask_feather'?: INT,'scheduler_func_opt'?: SCHEDULER_FUNC
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("segs", opts['segs'])
super.$$link("model", opts['model'])
super.$$link("clip", opts['clip'])
super.$$link("vae", opts['vae'])
super.$$link("guide_size", opts['guide_size']??tmp["DetailerForEachDebug"].defaults['guide_size'])
super.$$link("guide_size_for", opts['guide_size_for']??tmp["DetailerForEachDebug"].defaults['guide_size_for'])
super.$$link("max_size", opts['max_size']??tmp["DetailerForEachDebug"].defaults['max_size'])
super.$$link("seed", opts['seed']??tmp["DetailerForEachDebug"].defaults['seed'])
super.$$link("steps", opts['steps']??tmp["DetailerForEachDebug"].defaults['steps'])
super.$$link("cfg", opts['cfg']??tmp["DetailerForEachDebug"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("denoise", opts['denoise']??tmp["DetailerForEachDebug"].defaults['denoise'])
super.$$link("feather", opts['feather']??tmp["DetailerForEachDebug"].defaults['feather'])
super.$$link("noise_mask", opts['noise_mask']??tmp["DetailerForEachDebug"].defaults['noise_mask'])
super.$$link("force_inpaint", opts['force_inpaint']??tmp["DetailerForEachDebug"].defaults['force_inpaint'])
super.$$link("wildcard", opts['wildcard'])
super.$$link("cycle", opts['cycle']??tmp["DetailerForEachDebug"].defaults['cycle'])
super.$$link("detailer_hook", opts['detailer_hook'])
super.$$link("inpaint_model", opts['inpaint_model']??tmp["DetailerForEachDebug"].defaults['inpaint_model'])
super.$$link("noise_mask_feather", opts['noise_mask_feather']??tmp["DetailerForEachDebug"].defaults['noise_mask_feather'])
super.$$link("scheduler_func_opt", opts['scheduler_func_opt'])
}

        static defaults = {
    'guide_size':  512,
'guide_size_for':  true,
'max_size':  1024,
'seed':  0,
'steps':  20,
'cfg':  8,
'denoise':  0.5,
'feather':  5,
'noise_mask':  true,
'force_inpaint':  true,
'cycle':  1,
'inpaint_model':  false,
'noise_mask_feather':  20
}
        protected override $$type(){
            return "DetailerForEachDebug"
        }
},

    /**
     * Detailer (SEGS/pipe) from ImpactPack/Detailer
     * @desc 
    */
    "DetailerForEachPipe" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'segs'(value : SEGS)  { super.$$link(1, value) } 
//set 'guide_size'(value : FLOAT)  { super.$$link(2, value) } 
//set 'guide_size_for'(value : BOOLEAN)  { super.$$link(3, value) } 
//set 'max_size'(value : FLOAT)  { super.$$link(4, value) } 
//set 'seed'(value : INT)  { super.$$link(5, value) } 
//set 'steps'(value : INT)  { super.$$link(6, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(7, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(8, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn)  { super.$$link(9, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(10, value) } 
//set 'feather'(value : INT)  { super.$$link(11, value) } 
//set 'noise_mask'(value : BOOLEAN)  { super.$$link(12, value) } 
//set 'force_inpaint'(value : BOOLEAN)  { super.$$link(13, value) } 
//set 'basic_pipe'(value : BASIC_PIPE)  { super.$$link(14, value) } 
//set 'wildcard'(value : STRING)  { super.$$link(15, value) } 
//set 'refiner_ratio'(value : FLOAT)  { super.$$link(16, value) } 
//set 'cycle'(value : INT)  { super.$$link(17, value) } 
//set 'detailer_hook'(value : DETAILER_HOOK)  { super.$$link(18, value) } 
//set 'refiner_basic_pipe_opt'(value : BASIC_PIPE)  { super.$$link(19, value) } 
//set 'inpaint_model'(value : BOOLEAN)  { super.$$link(20, value) } 
//set 'noise_mask_feather'(value : INT)  { super.$$link(21, value) } 
//set 'scheduler_func_opt'(value : SCHEDULER_FUNC)  { super.$$link(22, value) } 

        //Getters
        get 'image'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'segs'() : SEGS { return [this.$uid.toString(), 1]  as unknown as SEGS; }
get 'basic_pipe'() : BASIC_PIPE { return [this.$uid.toString(), 2]  as unknown as BASIC_PIPE; }
get 'cnet_images'() : IMAGE { return [this.$uid.toString(), 3]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.segs
		 * @param opts.guide_size default: 512 max: 16384 min: 64 step: 8
		 * @param opts.guide_size_for default: true
		 * @param opts.max_size default: 1024 max: 16384 min: 64 step: 8
		 * @param opts.seed
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.cfg default: 8
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.denoise default: 0.5 max: 1 min: 0.0001 step: 0.01
		 * @param opts.feather default: 5 step: 1
		 * @param opts.noise_mask default: true
		 * @param opts.force_inpaint default: true
		 * @param opts.basic_pipe
		 * @param opts.wildcard
		 * @param opts.refiner_ratio default: 0.2
		 * @param opts.cycle default: 1 max: 10 min: 1 step: 1
		 * @param opts.detailer_hook
		 * @param opts.refiner_basic_pipe_opt
		 * @param opts.inpaint_model
		 * @param opts.noise_mask_feather default: 20 step: 1
		 * @param opts.scheduler_func_opt}
        */
        constructor(opts:{
            'image': IMAGE,'segs': SEGS,'guide_size'?: FLOAT,'guide_size_for'?: BOOLEAN,'max_size'?: FLOAT,'seed'?: INT,'steps'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn,'denoise'?: FLOAT,'feather'?: INT,'noise_mask'?: BOOLEAN,'force_inpaint'?: BOOLEAN,'basic_pipe': BASIC_PIPE,'wildcard': STRING,'refiner_ratio'?: FLOAT,'cycle'?: INT,'detailer_hook'?: DETAILER_HOOK,'refiner_basic_pipe_opt'?: BASIC_PIPE,'inpaint_model'?: BOOLEAN,'noise_mask_feather'?: INT,'scheduler_func_opt'?: SCHEDULER_FUNC
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("segs", opts['segs'])
super.$$link("guide_size", opts['guide_size']??tmp["DetailerForEachPipe"].defaults['guide_size'])
super.$$link("guide_size_for", opts['guide_size_for']??tmp["DetailerForEachPipe"].defaults['guide_size_for'])
super.$$link("max_size", opts['max_size']??tmp["DetailerForEachPipe"].defaults['max_size'])
super.$$link("seed", opts['seed']??tmp["DetailerForEachPipe"].defaults['seed'])
super.$$link("steps", opts['steps']??tmp["DetailerForEachPipe"].defaults['steps'])
super.$$link("cfg", opts['cfg']??tmp["DetailerForEachPipe"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("denoise", opts['denoise']??tmp["DetailerForEachPipe"].defaults['denoise'])
super.$$link("feather", opts['feather']??tmp["DetailerForEachPipe"].defaults['feather'])
super.$$link("noise_mask", opts['noise_mask']??tmp["DetailerForEachPipe"].defaults['noise_mask'])
super.$$link("force_inpaint", opts['force_inpaint']??tmp["DetailerForEachPipe"].defaults['force_inpaint'])
super.$$link("basic_pipe", opts['basic_pipe'])
super.$$link("wildcard", opts['wildcard'])
super.$$link("refiner_ratio", opts['refiner_ratio']??tmp["DetailerForEachPipe"].defaults['refiner_ratio'])
super.$$link("cycle", opts['cycle']??tmp["DetailerForEachPipe"].defaults['cycle'])
super.$$link("detailer_hook", opts['detailer_hook'])
super.$$link("refiner_basic_pipe_opt", opts['refiner_basic_pipe_opt'])
super.$$link("inpaint_model", opts['inpaint_model']??tmp["DetailerForEachPipe"].defaults['inpaint_model'])
super.$$link("noise_mask_feather", opts['noise_mask_feather']??tmp["DetailerForEachPipe"].defaults['noise_mask_feather'])
super.$$link("scheduler_func_opt", opts['scheduler_func_opt'])
}

        static defaults = {
    'guide_size':  512,
'guide_size_for':  true,
'max_size':  1024,
'seed':  0,
'steps':  20,
'cfg':  8,
'denoise':  0.5,
'feather':  5,
'noise_mask':  true,
'force_inpaint':  true,
'refiner_ratio':  0.2,
'cycle':  1,
'inpaint_model':  false,
'noise_mask_feather':  20
}
        protected override $$type(){
            return "DetailerForEachPipe"
        }
},

    /**
     * DetailerDebug (SEGS/pipe) from ImpactPack/Detailer
     * @desc 
    */
    "DetailerForEachDebugPipe" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'segs'(value : SEGS)  { super.$$link(1, value) } 
//set 'guide_size'(value : FLOAT)  { super.$$link(2, value) } 
//set 'guide_size_for'(value : BOOLEAN)  { super.$$link(3, value) } 
//set 'max_size'(value : FLOAT)  { super.$$link(4, value) } 
//set 'seed'(value : INT)  { super.$$link(5, value) } 
//set 'steps'(value : INT)  { super.$$link(6, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(7, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(8, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn)  { super.$$link(9, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(10, value) } 
//set 'feather'(value : INT)  { super.$$link(11, value) } 
//set 'noise_mask'(value : BOOLEAN)  { super.$$link(12, value) } 
//set 'force_inpaint'(value : BOOLEAN)  { super.$$link(13, value) } 
//set 'basic_pipe'(value : BASIC_PIPE)  { super.$$link(14, value) } 
//set 'wildcard'(value : STRING)  { super.$$link(15, value) } 
//set 'refiner_ratio'(value : FLOAT)  { super.$$link(16, value) } 
//set 'cycle'(value : INT)  { super.$$link(17, value) } 
//set 'detailer_hook'(value : DETAILER_HOOK)  { super.$$link(18, value) } 
//set 'refiner_basic_pipe_opt'(value : BASIC_PIPE)  { super.$$link(19, value) } 
//set 'inpaint_model'(value : BOOLEAN)  { super.$$link(20, value) } 
//set 'noise_mask_feather'(value : INT)  { super.$$link(21, value) } 
//set 'scheduler_func_opt'(value : SCHEDULER_FUNC)  { super.$$link(22, value) } 

        //Getters
        get 'image'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'segs'() : SEGS { return [this.$uid.toString(), 1]  as unknown as SEGS; }
get 'basic_pipe'() : BASIC_PIPE { return [this.$uid.toString(), 2]  as unknown as BASIC_PIPE; }
get 'cropped'() : IMAGE { return [this.$uid.toString(), 3]  as unknown as IMAGE; }
get 'cropped_refined'() : IMAGE { return [this.$uid.toString(), 4]  as unknown as IMAGE; }
get 'cropped_refined_alpha'() : IMAGE { return [this.$uid.toString(), 5]  as unknown as IMAGE; }
get 'cnet_images'() : IMAGE { return [this.$uid.toString(), 6]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.segs
		 * @param opts.guide_size default: 512 max: 16384 min: 64 step: 8
		 * @param opts.guide_size_for default: true
		 * @param opts.max_size default: 1024 max: 16384 min: 64 step: 8
		 * @param opts.seed
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.cfg default: 8
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.denoise default: 0.5 max: 1 min: 0.0001 step: 0.01
		 * @param opts.feather default: 5 step: 1
		 * @param opts.noise_mask default: true
		 * @param opts.force_inpaint default: true
		 * @param opts.basic_pipe
		 * @param opts.wildcard
		 * @param opts.refiner_ratio default: 0.2
		 * @param opts.cycle default: 1 max: 10 min: 1 step: 1
		 * @param opts.detailer_hook
		 * @param opts.refiner_basic_pipe_opt
		 * @param opts.inpaint_model
		 * @param opts.noise_mask_feather default: 20 step: 1
		 * @param opts.scheduler_func_opt}
        */
        constructor(opts:{
            'image': IMAGE,'segs': SEGS,'guide_size'?: FLOAT,'guide_size_for'?: BOOLEAN,'max_size'?: FLOAT,'seed'?: INT,'steps'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn,'denoise'?: FLOAT,'feather'?: INT,'noise_mask'?: BOOLEAN,'force_inpaint'?: BOOLEAN,'basic_pipe': BASIC_PIPE,'wildcard': STRING,'refiner_ratio'?: FLOAT,'cycle'?: INT,'detailer_hook'?: DETAILER_HOOK,'refiner_basic_pipe_opt'?: BASIC_PIPE,'inpaint_model'?: BOOLEAN,'noise_mask_feather'?: INT,'scheduler_func_opt'?: SCHEDULER_FUNC
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("segs", opts['segs'])
super.$$link("guide_size", opts['guide_size']??tmp["DetailerForEachDebugPipe"].defaults['guide_size'])
super.$$link("guide_size_for", opts['guide_size_for']??tmp["DetailerForEachDebugPipe"].defaults['guide_size_for'])
super.$$link("max_size", opts['max_size']??tmp["DetailerForEachDebugPipe"].defaults['max_size'])
super.$$link("seed", opts['seed']??tmp["DetailerForEachDebugPipe"].defaults['seed'])
super.$$link("steps", opts['steps']??tmp["DetailerForEachDebugPipe"].defaults['steps'])
super.$$link("cfg", opts['cfg']??tmp["DetailerForEachDebugPipe"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("denoise", opts['denoise']??tmp["DetailerForEachDebugPipe"].defaults['denoise'])
super.$$link("feather", opts['feather']??tmp["DetailerForEachDebugPipe"].defaults['feather'])
super.$$link("noise_mask", opts['noise_mask']??tmp["DetailerForEachDebugPipe"].defaults['noise_mask'])
super.$$link("force_inpaint", opts['force_inpaint']??tmp["DetailerForEachDebugPipe"].defaults['force_inpaint'])
super.$$link("basic_pipe", opts['basic_pipe'])
super.$$link("wildcard", opts['wildcard'])
super.$$link("refiner_ratio", opts['refiner_ratio']??tmp["DetailerForEachDebugPipe"].defaults['refiner_ratio'])
super.$$link("cycle", opts['cycle']??tmp["DetailerForEachDebugPipe"].defaults['cycle'])
super.$$link("detailer_hook", opts['detailer_hook'])
super.$$link("refiner_basic_pipe_opt", opts['refiner_basic_pipe_opt'])
super.$$link("inpaint_model", opts['inpaint_model']??tmp["DetailerForEachDebugPipe"].defaults['inpaint_model'])
super.$$link("noise_mask_feather", opts['noise_mask_feather']??tmp["DetailerForEachDebugPipe"].defaults['noise_mask_feather'])
super.$$link("scheduler_func_opt", opts['scheduler_func_opt'])
}

        static defaults = {
    'guide_size':  512,
'guide_size_for':  true,
'max_size':  1024,
'seed':  0,
'steps':  20,
'cfg':  8,
'denoise':  0.5,
'feather':  5,
'noise_mask':  true,
'force_inpaint':  true,
'refiner_ratio':  0.2,
'cycle':  1,
'inpaint_model':  false,
'noise_mask_feather':  20
}
        protected override $$type(){
            return "DetailerForEachDebugPipe"
        }
},

    /**
     * Detailer For AnimateDiff (SEGS/pipe) from ImpactPack/Detailer
     * @desc 
    */
    "DetailerForEachPipeForAnimateDiff" : class extends Node{
        //Setters
        //set 'image_frames'(value : IMAGE)  { super.$$link(0, value) } 
//set 'segs'(value : SEGS)  { super.$$link(1, value) } 
//set 'guide_size'(value : FLOAT)  { super.$$link(2, value) } 
//set 'guide_size_for'(value : BOOLEAN)  { super.$$link(3, value) } 
//set 'max_size'(value : FLOAT)  { super.$$link(4, value) } 
//set 'seed'(value : INT)  { super.$$link(5, value) } 
//set 'steps'(value : INT)  { super.$$link(6, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(7, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(8, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn)  { super.$$link(9, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(10, value) } 
//set 'feather'(value : INT)  { super.$$link(11, value) } 
//set 'basic_pipe'(value : BASIC_PIPE)  { super.$$link(12, value) } 
//set 'refiner_ratio'(value : FLOAT)  { super.$$link(13, value) } 
//set 'detailer_hook'(value : DETAILER_HOOK)  { super.$$link(14, value) } 
//set 'refiner_basic_pipe_opt'(value : BASIC_PIPE)  { super.$$link(15, value) } 
//set 'noise_mask_feather'(value : INT)  { super.$$link(16, value) } 
//set 'scheduler_func_opt'(value : SCHEDULER_FUNC)  { super.$$link(17, value) } 

        //Getters
        get 'image'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'segs'() : SEGS { return [this.$uid.toString(), 1]  as unknown as SEGS; }
get 'basic_pipe'() : BASIC_PIPE { return [this.$uid.toString(), 2]  as unknown as BASIC_PIPE; }
get 'cnet_images'() : IMAGE { return [this.$uid.toString(), 3]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image_frames
		 * @param opts.segs
		 * @param opts.guide_size default: 512 max: 16384 min: 64 step: 8
		 * @param opts.guide_size_for default: true
		 * @param opts.max_size default: 1024 max: 16384 min: 64 step: 8
		 * @param opts.seed
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.cfg default: 8
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.denoise default: 0.5 max: 1 min: 0.0001 step: 0.01
		 * @param opts.feather default: 5 step: 1
		 * @param opts.basic_pipe
		 * @param opts.refiner_ratio default: 0.2
		 * @param opts.detailer_hook
		 * @param opts.refiner_basic_pipe_opt
		 * @param opts.noise_mask_feather default: 20 step: 1
		 * @param opts.scheduler_func_opt}
        */
        constructor(opts:{
            'image_frames': IMAGE,'segs': SEGS,'guide_size'?: FLOAT,'guide_size_for'?: BOOLEAN,'max_size'?: FLOAT,'seed'?: INT,'steps'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn,'denoise'?: FLOAT,'feather'?: INT,'basic_pipe': BASIC_PIPE,'refiner_ratio'?: FLOAT,'detailer_hook'?: DETAILER_HOOK,'refiner_basic_pipe_opt'?: BASIC_PIPE,'noise_mask_feather'?: INT,'scheduler_func_opt'?: SCHEDULER_FUNC
        }){
            super(ctx);

            super.$$link("image_frames", opts['image_frames'])
super.$$link("segs", opts['segs'])
super.$$link("guide_size", opts['guide_size']??tmp["DetailerForEachPipeForAnimateDiff"].defaults['guide_size'])
super.$$link("guide_size_for", opts['guide_size_for']??tmp["DetailerForEachPipeForAnimateDiff"].defaults['guide_size_for'])
super.$$link("max_size", opts['max_size']??tmp["DetailerForEachPipeForAnimateDiff"].defaults['max_size'])
super.$$link("seed", opts['seed']??tmp["DetailerForEachPipeForAnimateDiff"].defaults['seed'])
super.$$link("steps", opts['steps']??tmp["DetailerForEachPipeForAnimateDiff"].defaults['steps'])
super.$$link("cfg", opts['cfg']??tmp["DetailerForEachPipeForAnimateDiff"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("denoise", opts['denoise']??tmp["DetailerForEachPipeForAnimateDiff"].defaults['denoise'])
super.$$link("feather", opts['feather']??tmp["DetailerForEachPipeForAnimateDiff"].defaults['feather'])
super.$$link("basic_pipe", opts['basic_pipe'])
super.$$link("refiner_ratio", opts['refiner_ratio']??tmp["DetailerForEachPipeForAnimateDiff"].defaults['refiner_ratio'])
super.$$link("detailer_hook", opts['detailer_hook'])
super.$$link("refiner_basic_pipe_opt", opts['refiner_basic_pipe_opt'])
super.$$link("noise_mask_feather", opts['noise_mask_feather']??tmp["DetailerForEachPipeForAnimateDiff"].defaults['noise_mask_feather'])
super.$$link("scheduler_func_opt", opts['scheduler_func_opt'])
}

        static defaults = {
    'guide_size':  512,
'guide_size_for':  true,
'max_size':  1024,
'seed':  0,
'steps':  20,
'cfg':  8,
'denoise':  0.5,
'feather':  5,
'refiner_ratio':  0.2,
'noise_mask_feather':  20
}
        protected override $$type(){
            return "DetailerForEachPipeForAnimateDiff"
        }
},

    /**
     * SAMDetector (combined) from ImpactPack/Detector
     * @desc 
    */
    "SAMDetectorCombined" : class extends Node{
        //Setters
        //set 'sam_model'(value : SAM_MODEL)  { super.$$link(0, value) } 
//set 'segs'(value : SEGS)  { super.$$link(1, value) } 
//set 'image'(value : IMAGE)  { super.$$link(2, value) } 
//set 'detection_hint'(value : 'center-1'|'horizontal-2'|'vertical-2'|'rect-4'|'diamond-4'|'mask-area'|'mask-points'|'mask-point-bbox'|'none'| $dyn)  { super.$$link(3, value) } 
//set 'dilation'(value : INT)  { super.$$link(4, value) } 
//set 'threshold'(value : FLOAT)  { super.$$link(5, value) } 
//set 'bbox_expansion'(value : INT)  { super.$$link(6, value) } 
//set 'mask_hint_threshold'(value : FLOAT)  { super.$$link(7, value) } 
//set 'mask_hint_use_negative'(value : 'False'|'Small'|'Outter'| $dyn)  { super.$$link(8, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.sam_model
		 * @param opts.segs
		 * @param opts.image
		 * @param opts.detection_hint
		 * @param opts.dilation max: 512 min: -512 step: 1
		 * @param opts.threshold default: 0.93 step: 0.01
		 * @param opts.bbox_expansion step: 1
		 * @param opts.mask_hint_threshold default: 0.7 step: 0.01
		 * @param opts.mask_hint_use_negative}
        */
        constructor(opts:{
            'sam_model': SAM_MODEL,'segs': SEGS,'image': IMAGE,'detection_hint': 'center-1'|'horizontal-2'|'vertical-2'|'rect-4'|'diamond-4'|'mask-area'|'mask-points'|'mask-point-bbox'|'none'| $dyn,'dilation'?: INT,'threshold'?: FLOAT,'bbox_expansion'?: INT,'mask_hint_threshold'?: FLOAT,'mask_hint_use_negative': 'False'|'Small'|'Outter'| $dyn
        }){
            super(ctx);

            super.$$link("sam_model", opts['sam_model'])
super.$$link("segs", opts['segs'])
super.$$link("image", opts['image'])
super.$$link("detection_hint", opts['detection_hint'])
super.$$link("dilation", opts['dilation']??tmp["SAMDetectorCombined"].defaults['dilation'])
super.$$link("threshold", opts['threshold']??tmp["SAMDetectorCombined"].defaults['threshold'])
super.$$link("bbox_expansion", opts['bbox_expansion']??tmp["SAMDetectorCombined"].defaults['bbox_expansion'])
super.$$link("mask_hint_threshold", opts['mask_hint_threshold']??tmp["SAMDetectorCombined"].defaults['mask_hint_threshold'])
super.$$link("mask_hint_use_negative", opts['mask_hint_use_negative'])
}

        static defaults = {
    'dilation':  0,
'threshold':  0.93,
'bbox_expansion':  0,
'mask_hint_threshold':  0.7
}
        protected override $$type(){
            return "SAMDetectorCombined"
        }
},

    /**
     * SAMDetector (segmented) from ImpactPack/Detector
     * @desc 
    */
    "SAMDetectorSegmented" : class extends Node{
        //Setters
        //set 'sam_model'(value : SAM_MODEL)  { super.$$link(0, value) } 
//set 'segs'(value : SEGS)  { super.$$link(1, value) } 
//set 'image'(value : IMAGE)  { super.$$link(2, value) } 
//set 'detection_hint'(value : 'center-1'|'horizontal-2'|'vertical-2'|'rect-4'|'diamond-4'|'mask-area'|'mask-points'|'mask-point-bbox'|'none'| $dyn)  { super.$$link(3, value) } 
//set 'dilation'(value : INT)  { super.$$link(4, value) } 
//set 'threshold'(value : FLOAT)  { super.$$link(5, value) } 
//set 'bbox_expansion'(value : INT)  { super.$$link(6, value) } 
//set 'mask_hint_threshold'(value : FLOAT)  { super.$$link(7, value) } 
//set 'mask_hint_use_negative'(value : 'False'|'Small'|'Outter'| $dyn)  { super.$$link(8, value) } 

        //Getters
        get 'combined_mask'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }
get 'batch_masks'() : MASK { return [this.$uid.toString(), 1]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.sam_model
		 * @param opts.segs
		 * @param opts.image
		 * @param opts.detection_hint
		 * @param opts.dilation max: 512 min: -512 step: 1
		 * @param opts.threshold default: 0.93 step: 0.01
		 * @param opts.bbox_expansion step: 1
		 * @param opts.mask_hint_threshold default: 0.7 step: 0.01
		 * @param opts.mask_hint_use_negative}
        */
        constructor(opts:{
            'sam_model': SAM_MODEL,'segs': SEGS,'image': IMAGE,'detection_hint': 'center-1'|'horizontal-2'|'vertical-2'|'rect-4'|'diamond-4'|'mask-area'|'mask-points'|'mask-point-bbox'|'none'| $dyn,'dilation'?: INT,'threshold'?: FLOAT,'bbox_expansion'?: INT,'mask_hint_threshold'?: FLOAT,'mask_hint_use_negative': 'False'|'Small'|'Outter'| $dyn
        }){
            super(ctx);

            super.$$link("sam_model", opts['sam_model'])
super.$$link("segs", opts['segs'])
super.$$link("image", opts['image'])
super.$$link("detection_hint", opts['detection_hint'])
super.$$link("dilation", opts['dilation']??tmp["SAMDetectorSegmented"].defaults['dilation'])
super.$$link("threshold", opts['threshold']??tmp["SAMDetectorSegmented"].defaults['threshold'])
super.$$link("bbox_expansion", opts['bbox_expansion']??tmp["SAMDetectorSegmented"].defaults['bbox_expansion'])
super.$$link("mask_hint_threshold", opts['mask_hint_threshold']??tmp["SAMDetectorSegmented"].defaults['mask_hint_threshold'])
super.$$link("mask_hint_use_negative", opts['mask_hint_use_negative'])
}

        static defaults = {
    'dilation':  0,
'threshold':  0.93,
'bbox_expansion':  0,
'mask_hint_threshold':  0.7
}
        protected override $$type(){
            return "SAMDetectorSegmented"
        }
},

    /**
     * FaceDetailer from ImpactPack/Simple
     * @desc 
    */
    "FaceDetailer" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'model'(value : MODEL)  { super.$$link(1, value) } 
//set 'clip'(value : CLIP)  { super.$$link(2, value) } 
//set 'vae'(value : VAE)  { super.$$link(3, value) } 
//set 'guide_size'(value : FLOAT)  { super.$$link(4, value) } 
//set 'guide_size_for'(value : BOOLEAN)  { super.$$link(5, value) } 
//set 'max_size'(value : FLOAT)  { super.$$link(6, value) } 
//set 'seed'(value : INT)  { super.$$link(7, value) } 
//set 'steps'(value : INT)  { super.$$link(8, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(9, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(10, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn)  { super.$$link(11, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(12, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(13, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(14, value) } 
//set 'feather'(value : INT)  { super.$$link(15, value) } 
//set 'noise_mask'(value : BOOLEAN)  { super.$$link(16, value) } 
//set 'force_inpaint'(value : BOOLEAN)  { super.$$link(17, value) } 
//set 'bbox_threshold'(value : FLOAT)  { super.$$link(18, value) } 
//set 'bbox_dilation'(value : INT)  { super.$$link(19, value) } 
//set 'bbox_crop_factor'(value : FLOAT)  { super.$$link(20, value) } 
//set 'sam_detection_hint'(value : 'center-1'|'horizontal-2'|'vertical-2'|'rect-4'|'diamond-4'|'mask-area'|'mask-points'|'mask-point-bbox'|'none'| $dyn)  { super.$$link(21, value) } 
//set 'sam_dilation'(value : INT)  { super.$$link(22, value) } 
//set 'sam_threshold'(value : FLOAT)  { super.$$link(23, value) } 
//set 'sam_bbox_expansion'(value : INT)  { super.$$link(24, value) } 
//set 'sam_mask_hint_threshold'(value : FLOAT)  { super.$$link(25, value) } 
//set 'sam_mask_hint_use_negative'(value : 'False'|'Small'|'Outter'| $dyn)  { super.$$link(26, value) } 
//set 'drop_size'(value : INT)  { super.$$link(27, value) } 
//set 'bbox_detector'(value : BBOX_DETECTOR)  { super.$$link(28, value) } 
//set 'wildcard'(value : STRING)  { super.$$link(29, value) } 
//set 'cycle'(value : INT)  { super.$$link(30, value) } 
//set 'sam_model_opt'(value : SAM_MODEL)  { super.$$link(31, value) } 
//set 'segm_detector_opt'(value : SEGM_DETECTOR)  { super.$$link(32, value) } 
//set 'detailer_hook'(value : DETAILER_HOOK)  { super.$$link(33, value) } 
//set 'inpaint_model'(value : BOOLEAN)  { super.$$link(34, value) } 
//set 'noise_mask_feather'(value : INT)  { super.$$link(35, value) } 
//set 'scheduler_func_opt'(value : SCHEDULER_FUNC)  { super.$$link(36, value) } 

        //Getters
        get 'image'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'cropped_refined'() : IMAGE { return [this.$uid.toString(), 1]  as unknown as IMAGE; }
get 'cropped_enhanced_alpha'() : IMAGE { return [this.$uid.toString(), 2]  as unknown as IMAGE; }
get 'mask'() : MASK { return [this.$uid.toString(), 3]  as unknown as MASK; }
get 'detailer_pipe'() : DETAILER_PIPE { return [this.$uid.toString(), 4]  as unknown as DETAILER_PIPE; }
get 'cnet_images'() : IMAGE { return [this.$uid.toString(), 5]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.model
		 * @param opts.clip
		 * @param opts.vae
		 * @param opts.guide_size default: 512 max: 16384 min: 64 step: 8
		 * @param opts.guide_size_for default: true
		 * @param opts.max_size default: 1024 max: 16384 min: 64 step: 8
		 * @param opts.seed
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.cfg default: 8
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.denoise default: 0.5 max: 1 min: 0.0001 step: 0.01
		 * @param opts.feather default: 5 step: 1
		 * @param opts.noise_mask default: true
		 * @param opts.force_inpaint default: true
		 * @param opts.bbox_threshold default: 0.5 step: 0.01
		 * @param opts.bbox_dilation default: 10 max: 512 min: -512 step: 1
		 * @param opts.bbox_crop_factor default: 3 max: 10 min: 1 step: 0.1
		 * @param opts.sam_detection_hint
		 * @param opts.sam_dilation max: 512 min: -512 step: 1
		 * @param opts.sam_threshold default: 0.93 step: 0.01
		 * @param opts.sam_bbox_expansion step: 1
		 * @param opts.sam_mask_hint_threshold default: 0.7 step: 0.01
		 * @param opts.sam_mask_hint_use_negative
		 * @param opts.drop_size default: 10 max: 16384 min: 1 step: 1
		 * @param opts.bbox_detector
		 * @param opts.wildcard
		 * @param opts.cycle default: 1 max: 10 min: 1 step: 1
		 * @param opts.sam_model_opt
		 * @param opts.segm_detector_opt
		 * @param opts.detailer_hook
		 * @param opts.inpaint_model
		 * @param opts.noise_mask_feather default: 20 step: 1
		 * @param opts.scheduler_func_opt}
        */
        constructor(opts:{
            'image': IMAGE,'model': MODEL,'clip': CLIP,'vae': VAE,'guide_size'?: FLOAT,'guide_size_for'?: BOOLEAN,'max_size'?: FLOAT,'seed'?: INT,'steps'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn,'positive': CONDITIONING,'negative': CONDITIONING,'denoise'?: FLOAT,'feather'?: INT,'noise_mask'?: BOOLEAN,'force_inpaint'?: BOOLEAN,'bbox_threshold'?: FLOAT,'bbox_dilation'?: INT,'bbox_crop_factor'?: FLOAT,'sam_detection_hint': 'center-1'|'horizontal-2'|'vertical-2'|'rect-4'|'diamond-4'|'mask-area'|'mask-points'|'mask-point-bbox'|'none'| $dyn,'sam_dilation'?: INT,'sam_threshold'?: FLOAT,'sam_bbox_expansion'?: INT,'sam_mask_hint_threshold'?: FLOAT,'sam_mask_hint_use_negative': 'False'|'Small'|'Outter'| $dyn,'drop_size'?: INT,'bbox_detector': BBOX_DETECTOR,'wildcard': STRING,'cycle'?: INT,'sam_model_opt'?: SAM_MODEL,'segm_detector_opt'?: SEGM_DETECTOR,'detailer_hook'?: DETAILER_HOOK,'inpaint_model'?: BOOLEAN,'noise_mask_feather'?: INT,'scheduler_func_opt'?: SCHEDULER_FUNC
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("model", opts['model'])
super.$$link("clip", opts['clip'])
super.$$link("vae", opts['vae'])
super.$$link("guide_size", opts['guide_size']??tmp["FaceDetailer"].defaults['guide_size'])
super.$$link("guide_size_for", opts['guide_size_for']??tmp["FaceDetailer"].defaults['guide_size_for'])
super.$$link("max_size", opts['max_size']??tmp["FaceDetailer"].defaults['max_size'])
super.$$link("seed", opts['seed']??tmp["FaceDetailer"].defaults['seed'])
super.$$link("steps", opts['steps']??tmp["FaceDetailer"].defaults['steps'])
super.$$link("cfg", opts['cfg']??tmp["FaceDetailer"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("denoise", opts['denoise']??tmp["FaceDetailer"].defaults['denoise'])
super.$$link("feather", opts['feather']??tmp["FaceDetailer"].defaults['feather'])
super.$$link("noise_mask", opts['noise_mask']??tmp["FaceDetailer"].defaults['noise_mask'])
super.$$link("force_inpaint", opts['force_inpaint']??tmp["FaceDetailer"].defaults['force_inpaint'])
super.$$link("bbox_threshold", opts['bbox_threshold']??tmp["FaceDetailer"].defaults['bbox_threshold'])
super.$$link("bbox_dilation", opts['bbox_dilation']??tmp["FaceDetailer"].defaults['bbox_dilation'])
super.$$link("bbox_crop_factor", opts['bbox_crop_factor']??tmp["FaceDetailer"].defaults['bbox_crop_factor'])
super.$$link("sam_detection_hint", opts['sam_detection_hint'])
super.$$link("sam_dilation", opts['sam_dilation']??tmp["FaceDetailer"].defaults['sam_dilation'])
super.$$link("sam_threshold", opts['sam_threshold']??tmp["FaceDetailer"].defaults['sam_threshold'])
super.$$link("sam_bbox_expansion", opts['sam_bbox_expansion']??tmp["FaceDetailer"].defaults['sam_bbox_expansion'])
super.$$link("sam_mask_hint_threshold", opts['sam_mask_hint_threshold']??tmp["FaceDetailer"].defaults['sam_mask_hint_threshold'])
super.$$link("sam_mask_hint_use_negative", opts['sam_mask_hint_use_negative'])
super.$$link("drop_size", opts['drop_size']??tmp["FaceDetailer"].defaults['drop_size'])
super.$$link("bbox_detector", opts['bbox_detector'])
super.$$link("wildcard", opts['wildcard'])
super.$$link("cycle", opts['cycle']??tmp["FaceDetailer"].defaults['cycle'])
super.$$link("sam_model_opt", opts['sam_model_opt'])
super.$$link("segm_detector_opt", opts['segm_detector_opt'])
super.$$link("detailer_hook", opts['detailer_hook'])
super.$$link("inpaint_model", opts['inpaint_model']??tmp["FaceDetailer"].defaults['inpaint_model'])
super.$$link("noise_mask_feather", opts['noise_mask_feather']??tmp["FaceDetailer"].defaults['noise_mask_feather'])
super.$$link("scheduler_func_opt", opts['scheduler_func_opt'])
}

        static defaults = {
    'guide_size':  512,
'guide_size_for':  true,
'max_size':  1024,
'seed':  0,
'steps':  20,
'cfg':  8,
'denoise':  0.5,
'feather':  5,
'noise_mask':  true,
'force_inpaint':  true,
'bbox_threshold':  0.5,
'bbox_dilation':  10,
'bbox_crop_factor':  3,
'sam_dilation':  0,
'sam_threshold':  0.93,
'sam_bbox_expansion':  0,
'sam_mask_hint_threshold':  0.7,
'drop_size':  10,
'cycle':  1,
'inpaint_model':  false,
'noise_mask_feather':  20
}
        protected override $$type(){
            return "FaceDetailer"
        }
},

    /**
     * FaceDetailer (pipe) from ImpactPack/Simple
     * @desc 
    */
    "FaceDetailerPipe" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'detailer_pipe'(value : DETAILER_PIPE)  { super.$$link(1, value) } 
//set 'guide_size'(value : FLOAT)  { super.$$link(2, value) } 
//set 'guide_size_for'(value : BOOLEAN)  { super.$$link(3, value) } 
//set 'max_size'(value : FLOAT)  { super.$$link(4, value) } 
//set 'seed'(value : INT)  { super.$$link(5, value) } 
//set 'steps'(value : INT)  { super.$$link(6, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(7, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(8, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn)  { super.$$link(9, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(10, value) } 
//set 'feather'(value : INT)  { super.$$link(11, value) } 
//set 'noise_mask'(value : BOOLEAN)  { super.$$link(12, value) } 
//set 'force_inpaint'(value : BOOLEAN)  { super.$$link(13, value) } 
//set 'bbox_threshold'(value : FLOAT)  { super.$$link(14, value) } 
//set 'bbox_dilation'(value : INT)  { super.$$link(15, value) } 
//set 'bbox_crop_factor'(value : FLOAT)  { super.$$link(16, value) } 
//set 'sam_detection_hint'(value : 'center-1'|'horizontal-2'|'vertical-2'|'rect-4'|'diamond-4'|'mask-area'|'mask-points'|'mask-point-bbox'|'none'| $dyn)  { super.$$link(17, value) } 
//set 'sam_dilation'(value : INT)  { super.$$link(18, value) } 
//set 'sam_threshold'(value : FLOAT)  { super.$$link(19, value) } 
//set 'sam_bbox_expansion'(value : INT)  { super.$$link(20, value) } 
//set 'sam_mask_hint_threshold'(value : FLOAT)  { super.$$link(21, value) } 
//set 'sam_mask_hint_use_negative'(value : 'False'|'Small'|'Outter'| $dyn)  { super.$$link(22, value) } 
//set 'drop_size'(value : INT)  { super.$$link(23, value) } 
//set 'refiner_ratio'(value : FLOAT)  { super.$$link(24, value) } 
//set 'cycle'(value : INT)  { super.$$link(25, value) } 
//set 'inpaint_model'(value : BOOLEAN)  { super.$$link(26, value) } 
//set 'noise_mask_feather'(value : INT)  { super.$$link(27, value) } 
//set 'scheduler_func_opt'(value : SCHEDULER_FUNC)  { super.$$link(28, value) } 

        //Getters
        get 'image'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'cropped_refined'() : IMAGE { return [this.$uid.toString(), 1]  as unknown as IMAGE; }
get 'cropped_enhanced_alpha'() : IMAGE { return [this.$uid.toString(), 2]  as unknown as IMAGE; }
get 'mask'() : MASK { return [this.$uid.toString(), 3]  as unknown as MASK; }
get 'detailer_pipe'() : DETAILER_PIPE { return [this.$uid.toString(), 4]  as unknown as DETAILER_PIPE; }
get 'cnet_images'() : IMAGE { return [this.$uid.toString(), 5]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.detailer_pipe
		 * @param opts.guide_size default: 512 max: 16384 min: 64 step: 8
		 * @param opts.guide_size_for default: true
		 * @param opts.max_size default: 1024 max: 16384 min: 64 step: 8
		 * @param opts.seed
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.cfg default: 8
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.denoise default: 0.5 max: 1 min: 0.0001 step: 0.01
		 * @param opts.feather default: 5 step: 1
		 * @param opts.noise_mask default: true
		 * @param opts.force_inpaint default: true
		 * @param opts.bbox_threshold default: 0.5 step: 0.01
		 * @param opts.bbox_dilation default: 10 max: 512 min: -512 step: 1
		 * @param opts.bbox_crop_factor default: 3 max: 10 min: 1 step: 0.1
		 * @param opts.sam_detection_hint
		 * @param opts.sam_dilation max: 512 min: -512 step: 1
		 * @param opts.sam_threshold default: 0.93 step: 0.01
		 * @param opts.sam_bbox_expansion step: 1
		 * @param opts.sam_mask_hint_threshold default: 0.7 step: 0.01
		 * @param opts.sam_mask_hint_use_negative
		 * @param opts.drop_size default: 10 max: 16384 min: 1 step: 1
		 * @param opts.refiner_ratio default: 0.2
		 * @param opts.cycle default: 1 max: 10 min: 1 step: 1
		 * @param opts.inpaint_model
		 * @param opts.noise_mask_feather default: 20 step: 1
		 * @param opts.scheduler_func_opt}
        */
        constructor(opts:{
            'image': IMAGE,'detailer_pipe': DETAILER_PIPE,'guide_size'?: FLOAT,'guide_size_for'?: BOOLEAN,'max_size'?: FLOAT,'seed'?: INT,'steps'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn,'denoise'?: FLOAT,'feather'?: INT,'noise_mask'?: BOOLEAN,'force_inpaint'?: BOOLEAN,'bbox_threshold'?: FLOAT,'bbox_dilation'?: INT,'bbox_crop_factor'?: FLOAT,'sam_detection_hint': 'center-1'|'horizontal-2'|'vertical-2'|'rect-4'|'diamond-4'|'mask-area'|'mask-points'|'mask-point-bbox'|'none'| $dyn,'sam_dilation'?: INT,'sam_threshold'?: FLOAT,'sam_bbox_expansion'?: INT,'sam_mask_hint_threshold'?: FLOAT,'sam_mask_hint_use_negative': 'False'|'Small'|'Outter'| $dyn,'drop_size'?: INT,'refiner_ratio'?: FLOAT,'cycle'?: INT,'inpaint_model'?: BOOLEAN,'noise_mask_feather'?: INT,'scheduler_func_opt'?: SCHEDULER_FUNC
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("detailer_pipe", opts['detailer_pipe'])
super.$$link("guide_size", opts['guide_size']??tmp["FaceDetailerPipe"].defaults['guide_size'])
super.$$link("guide_size_for", opts['guide_size_for']??tmp["FaceDetailerPipe"].defaults['guide_size_for'])
super.$$link("max_size", opts['max_size']??tmp["FaceDetailerPipe"].defaults['max_size'])
super.$$link("seed", opts['seed']??tmp["FaceDetailerPipe"].defaults['seed'])
super.$$link("steps", opts['steps']??tmp["FaceDetailerPipe"].defaults['steps'])
super.$$link("cfg", opts['cfg']??tmp["FaceDetailerPipe"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("denoise", opts['denoise']??tmp["FaceDetailerPipe"].defaults['denoise'])
super.$$link("feather", opts['feather']??tmp["FaceDetailerPipe"].defaults['feather'])
super.$$link("noise_mask", opts['noise_mask']??tmp["FaceDetailerPipe"].defaults['noise_mask'])
super.$$link("force_inpaint", opts['force_inpaint']??tmp["FaceDetailerPipe"].defaults['force_inpaint'])
super.$$link("bbox_threshold", opts['bbox_threshold']??tmp["FaceDetailerPipe"].defaults['bbox_threshold'])
super.$$link("bbox_dilation", opts['bbox_dilation']??tmp["FaceDetailerPipe"].defaults['bbox_dilation'])
super.$$link("bbox_crop_factor", opts['bbox_crop_factor']??tmp["FaceDetailerPipe"].defaults['bbox_crop_factor'])
super.$$link("sam_detection_hint", opts['sam_detection_hint'])
super.$$link("sam_dilation", opts['sam_dilation']??tmp["FaceDetailerPipe"].defaults['sam_dilation'])
super.$$link("sam_threshold", opts['sam_threshold']??tmp["FaceDetailerPipe"].defaults['sam_threshold'])
super.$$link("sam_bbox_expansion", opts['sam_bbox_expansion']??tmp["FaceDetailerPipe"].defaults['sam_bbox_expansion'])
super.$$link("sam_mask_hint_threshold", opts['sam_mask_hint_threshold']??tmp["FaceDetailerPipe"].defaults['sam_mask_hint_threshold'])
super.$$link("sam_mask_hint_use_negative", opts['sam_mask_hint_use_negative'])
super.$$link("drop_size", opts['drop_size']??tmp["FaceDetailerPipe"].defaults['drop_size'])
super.$$link("refiner_ratio", opts['refiner_ratio']??tmp["FaceDetailerPipe"].defaults['refiner_ratio'])
super.$$link("cycle", opts['cycle']??tmp["FaceDetailerPipe"].defaults['cycle'])
super.$$link("inpaint_model", opts['inpaint_model']??tmp["FaceDetailerPipe"].defaults['inpaint_model'])
super.$$link("noise_mask_feather", opts['noise_mask_feather']??tmp["FaceDetailerPipe"].defaults['noise_mask_feather'])
super.$$link("scheduler_func_opt", opts['scheduler_func_opt'])
}

        static defaults = {
    'guide_size':  512,
'guide_size_for':  true,
'max_size':  1024,
'seed':  0,
'steps':  20,
'cfg':  8,
'denoise':  0.5,
'feather':  5,
'noise_mask':  true,
'force_inpaint':  true,
'bbox_threshold':  0.5,
'bbox_dilation':  10,
'bbox_crop_factor':  3,
'sam_dilation':  0,
'sam_threshold':  0.93,
'sam_bbox_expansion':  0,
'sam_mask_hint_threshold':  0.7,
'drop_size':  10,
'refiner_ratio':  0.2,
'cycle':  1,
'inpaint_model':  false,
'noise_mask_feather':  20
}
        protected override $$type(){
            return "FaceDetailerPipe"
        }
},

    /**
     * MaskDetailer (pipe) from ImpactPack/Detailer
     * @desc 
    */
    "MaskDetailerPipe" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'mask'(value : MASK)  { super.$$link(1, value) } 
//set 'basic_pipe'(value : BASIC_PIPE)  { super.$$link(2, value) } 
//set 'guide_size'(value : FLOAT)  { super.$$link(3, value) } 
//set 'guide_size_for'(value : BOOLEAN)  { super.$$link(4, value) } 
//set 'max_size'(value : FLOAT)  { super.$$link(5, value) } 
//set 'mask_mode'(value : BOOLEAN)  { super.$$link(6, value) } 
//set 'seed'(value : INT)  { super.$$link(7, value) } 
//set 'steps'(value : INT)  { super.$$link(8, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(9, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(10, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn)  { super.$$link(11, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(12, value) } 
//set 'feather'(value : INT)  { super.$$link(13, value) } 
//set 'crop_factor'(value : FLOAT)  { super.$$link(14, value) } 
//set 'drop_size'(value : INT)  { super.$$link(15, value) } 
//set 'refiner_ratio'(value : FLOAT)  { super.$$link(16, value) } 
//set 'batch_size'(value : INT)  { super.$$link(17, value) } 
//set 'cycle'(value : INT)  { super.$$link(18, value) } 
//set 'refiner_basic_pipe_opt'(value : BASIC_PIPE)  { super.$$link(19, value) } 
//set 'detailer_hook'(value : DETAILER_HOOK)  { super.$$link(20, value) } 
//set 'inpaint_model'(value : BOOLEAN)  { super.$$link(21, value) } 
//set 'noise_mask_feather'(value : INT)  { super.$$link(22, value) } 
//set 'bbox_fill'(value : BOOLEAN)  { super.$$link(23, value) } 
//set 'contour_fill'(value : BOOLEAN)  { super.$$link(24, value) } 
//set 'scheduler_func_opt'(value : SCHEDULER_FUNC)  { super.$$link(25, value) } 

        //Getters
        get 'image'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'cropped_refined'() : IMAGE { return [this.$uid.toString(), 1]  as unknown as IMAGE; }
get 'cropped_enhanced_alpha'() : IMAGE { return [this.$uid.toString(), 2]  as unknown as IMAGE; }
get 'basic_pipe'() : BASIC_PIPE { return [this.$uid.toString(), 3]  as unknown as BASIC_PIPE; }
get 'refiner_basic_pipe_opt'() : BASIC_PIPE { return [this.$uid.toString(), 4]  as unknown as BASIC_PIPE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.mask
		 * @param opts.basic_pipe
		 * @param opts.guide_size default: 512 max: 16384 min: 64 step: 8
		 * @param opts.guide_size_for default: true
		 * @param opts.max_size default: 1024 max: 16384 min: 64 step: 8
		 * @param opts.mask_mode default: true
		 * @param opts.seed
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.cfg default: 8
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.denoise default: 0.5 max: 1 min: 0.0001 step: 0.01
		 * @param opts.feather default: 5 step: 1
		 * @param opts.crop_factor default: 3 max: 10 min: 1 step: 0.1
		 * @param opts.drop_size default: 10 max: 16384 min: 1 step: 1
		 * @param opts.refiner_ratio default: 0.2
		 * @param opts.batch_size default: 1 max: 100 min: 1
		 * @param opts.cycle default: 1 max: 10 min: 1 step: 1
		 * @param opts.refiner_basic_pipe_opt
		 * @param opts.detailer_hook
		 * @param opts.inpaint_model
		 * @param opts.noise_mask_feather default: 20 step: 1
		 * @param opts.bbox_fill
		 * @param opts.contour_fill default: true
		 * @param opts.scheduler_func_opt}
        */
        constructor(opts:{
            'image': IMAGE,'mask': MASK,'basic_pipe': BASIC_PIPE,'guide_size'?: FLOAT,'guide_size_for'?: BOOLEAN,'max_size'?: FLOAT,'mask_mode'?: BOOLEAN,'seed'?: INT,'steps'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn,'denoise'?: FLOAT,'feather'?: INT,'crop_factor'?: FLOAT,'drop_size'?: INT,'refiner_ratio'?: FLOAT,'batch_size'?: INT,'cycle'?: INT,'refiner_basic_pipe_opt'?: BASIC_PIPE,'detailer_hook'?: DETAILER_HOOK,'inpaint_model'?: BOOLEAN,'noise_mask_feather'?: INT,'bbox_fill'?: BOOLEAN,'contour_fill'?: BOOLEAN,'scheduler_func_opt'?: SCHEDULER_FUNC
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("mask", opts['mask'])
super.$$link("basic_pipe", opts['basic_pipe'])
super.$$link("guide_size", opts['guide_size']??tmp["MaskDetailerPipe"].defaults['guide_size'])
super.$$link("guide_size_for", opts['guide_size_for']??tmp["MaskDetailerPipe"].defaults['guide_size_for'])
super.$$link("max_size", opts['max_size']??tmp["MaskDetailerPipe"].defaults['max_size'])
super.$$link("mask_mode", opts['mask_mode']??tmp["MaskDetailerPipe"].defaults['mask_mode'])
super.$$link("seed", opts['seed']??tmp["MaskDetailerPipe"].defaults['seed'])
super.$$link("steps", opts['steps']??tmp["MaskDetailerPipe"].defaults['steps'])
super.$$link("cfg", opts['cfg']??tmp["MaskDetailerPipe"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("denoise", opts['denoise']??tmp["MaskDetailerPipe"].defaults['denoise'])
super.$$link("feather", opts['feather']??tmp["MaskDetailerPipe"].defaults['feather'])
super.$$link("crop_factor", opts['crop_factor']??tmp["MaskDetailerPipe"].defaults['crop_factor'])
super.$$link("drop_size", opts['drop_size']??tmp["MaskDetailerPipe"].defaults['drop_size'])
super.$$link("refiner_ratio", opts['refiner_ratio']??tmp["MaskDetailerPipe"].defaults['refiner_ratio'])
super.$$link("batch_size", opts['batch_size']??tmp["MaskDetailerPipe"].defaults['batch_size'])
super.$$link("cycle", opts['cycle']??tmp["MaskDetailerPipe"].defaults['cycle'])
super.$$link("refiner_basic_pipe_opt", opts['refiner_basic_pipe_opt'])
super.$$link("detailer_hook", opts['detailer_hook'])
super.$$link("inpaint_model", opts['inpaint_model']??tmp["MaskDetailerPipe"].defaults['inpaint_model'])
super.$$link("noise_mask_feather", opts['noise_mask_feather']??tmp["MaskDetailerPipe"].defaults['noise_mask_feather'])
super.$$link("bbox_fill", opts['bbox_fill']??tmp["MaskDetailerPipe"].defaults['bbox_fill'])
super.$$link("contour_fill", opts['contour_fill']??tmp["MaskDetailerPipe"].defaults['contour_fill'])
super.$$link("scheduler_func_opt", opts['scheduler_func_opt'])
}

        static defaults = {
    'guide_size':  512,
'guide_size_for':  true,
'max_size':  1024,
'mask_mode':  true,
'seed':  0,
'steps':  20,
'cfg':  8,
'denoise':  0.5,
'feather':  5,
'crop_factor':  3,
'drop_size':  10,
'refiner_ratio':  0.2,
'batch_size':  1,
'cycle':  1,
'inpaint_model':  false,
'noise_mask_feather':  20,
'bbox_fill':  false,
'contour_fill':  true
}
        protected override $$type(){
            return "MaskDetailerPipe"
        }
},

    /**
     * ToDetailerPipe from ImpactPack/Pipe
     * @desc 
    */
    "ToDetailerPipe" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'clip'(value : CLIP)  { super.$$link(1, value) } 
//set 'vae'(value : VAE)  { super.$$link(2, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(3, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(4, value) } 
//set 'bbox_detector'(value : BBOX_DETECTOR)  { super.$$link(5, value) } 
//set 'wildcard'(value : STRING)  { super.$$link(6, value) } 
//set 'Select to add LoRA'(value : 'Select the LoRA to add to the text'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(7, value) } 
//set 'Select to add Wildcard'(value : 'Select the Wildcard to add to the text'| $dyn)  { super.$$link(8, value) } 
//set 'sam_model_opt'(value : SAM_MODEL)  { super.$$link(9, value) } 
//set 'segm_detector_opt'(value : SEGM_DETECTOR)  { super.$$link(10, value) } 
//set 'detailer_hook'(value : DETAILER_HOOK)  { super.$$link(11, value) } 

        //Getters
        get 'detailer_pipe'() : DETAILER_PIPE { return [this.$uid.toString(), 0]  as unknown as DETAILER_PIPE; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.clip
		 * @param opts.vae
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.bbox_detector
		 * @param opts.wildcard
		 * @param opts.Select to add LoRA
		 * @param opts.Select to add Wildcard
		 * @param opts.sam_model_opt
		 * @param opts.segm_detector_opt
		 * @param opts.detailer_hook}
        */
        constructor(opts:{
            'model': MODEL,'clip': CLIP,'vae': VAE,'positive': CONDITIONING,'negative': CONDITIONING,'bbox_detector': BBOX_DETECTOR,'wildcard': STRING,'Select to add LoRA': 'Select the LoRA to add to the text'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'Select to add Wildcard': 'Select the Wildcard to add to the text'| $dyn,'sam_model_opt'?: SAM_MODEL,'segm_detector_opt'?: SEGM_DETECTOR,'detailer_hook'?: DETAILER_HOOK
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("clip", opts['clip'])
super.$$link("vae", opts['vae'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("bbox_detector", opts['bbox_detector'])
super.$$link("wildcard", opts['wildcard'])
super.$$link("Select to add LoRA", opts['Select to add LoRA'])
super.$$link("Select to add Wildcard", opts['Select to add Wildcard'])
super.$$link("sam_model_opt", opts['sam_model_opt'])
super.$$link("segm_detector_opt", opts['segm_detector_opt'])
super.$$link("detailer_hook", opts['detailer_hook'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ToDetailerPipe"
        }
},

    /**
     * ToDetailerPipeSDXL from ImpactPack/Pipe
     * @desc 
    */
    "ToDetailerPipeSDXL" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'clip'(value : CLIP)  { super.$$link(1, value) } 
//set 'vae'(value : VAE)  { super.$$link(2, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(3, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(4, value) } 
//set 'refiner_model'(value : MODEL)  { super.$$link(5, value) } 
//set 'refiner_clip'(value : CLIP)  { super.$$link(6, value) } 
//set 'refiner_positive'(value : CONDITIONING)  { super.$$link(7, value) } 
//set 'refiner_negative'(value : CONDITIONING)  { super.$$link(8, value) } 
//set 'bbox_detector'(value : BBOX_DETECTOR)  { super.$$link(9, value) } 
//set 'wildcard'(value : STRING)  { super.$$link(10, value) } 
//set 'Select to add LoRA'(value : 'Select the LoRA to add to the text'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(11, value) } 
//set 'Select to add Wildcard'(value : 'Select the Wildcard to add to the text'| $dyn)  { super.$$link(12, value) } 
//set 'sam_model_opt'(value : SAM_MODEL)  { super.$$link(13, value) } 
//set 'segm_detector_opt'(value : SEGM_DETECTOR)  { super.$$link(14, value) } 
//set 'detailer_hook'(value : DETAILER_HOOK)  { super.$$link(15, value) } 

        //Getters
        get 'detailer_pipe'() : DETAILER_PIPE { return [this.$uid.toString(), 0]  as unknown as DETAILER_PIPE; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.clip
		 * @param opts.vae
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.refiner_model
		 * @param opts.refiner_clip
		 * @param opts.refiner_positive
		 * @param opts.refiner_negative
		 * @param opts.bbox_detector
		 * @param opts.wildcard
		 * @param opts.Select to add LoRA
		 * @param opts.Select to add Wildcard
		 * @param opts.sam_model_opt
		 * @param opts.segm_detector_opt
		 * @param opts.detailer_hook}
        */
        constructor(opts:{
            'model': MODEL,'clip': CLIP,'vae': VAE,'positive': CONDITIONING,'negative': CONDITIONING,'refiner_model': MODEL,'refiner_clip': CLIP,'refiner_positive': CONDITIONING,'refiner_negative': CONDITIONING,'bbox_detector': BBOX_DETECTOR,'wildcard': STRING,'Select to add LoRA': 'Select the LoRA to add to the text'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'Select to add Wildcard': 'Select the Wildcard to add to the text'| $dyn,'sam_model_opt'?: SAM_MODEL,'segm_detector_opt'?: SEGM_DETECTOR,'detailer_hook'?: DETAILER_HOOK
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("clip", opts['clip'])
super.$$link("vae", opts['vae'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("refiner_model", opts['refiner_model'])
super.$$link("refiner_clip", opts['refiner_clip'])
super.$$link("refiner_positive", opts['refiner_positive'])
super.$$link("refiner_negative", opts['refiner_negative'])
super.$$link("bbox_detector", opts['bbox_detector'])
super.$$link("wildcard", opts['wildcard'])
super.$$link("Select to add LoRA", opts['Select to add LoRA'])
super.$$link("Select to add Wildcard", opts['Select to add Wildcard'])
super.$$link("sam_model_opt", opts['sam_model_opt'])
super.$$link("segm_detector_opt", opts['segm_detector_opt'])
super.$$link("detailer_hook", opts['detailer_hook'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ToDetailerPipeSDXL"
        }
},

    /**
     * FromDetailerPipe from ImpactPack/Pipe
     * @desc 
    */
    "FromDetailerPipe" : class extends Node{
        //Setters
        //set 'detailer_pipe'(value : DETAILER_PIPE)  { super.$$link(0, value) } 

        //Getters
        get 'model'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'clip'() : CLIP { return [this.$uid.toString(), 1]  as unknown as CLIP; }
get 'vae'() : VAE { return [this.$uid.toString(), 2]  as unknown as VAE; }
get 'positive'() : CONDITIONING { return [this.$uid.toString(), 3]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this.$uid.toString(), 4]  as unknown as CONDITIONING; }
get 'bbox_detector'() : BBOX_DETECTOR { return [this.$uid.toString(), 5]  as unknown as BBOX_DETECTOR; }
get 'sam_model_opt'() : SAM_MODEL { return [this.$uid.toString(), 6]  as unknown as SAM_MODEL; }
get 'segm_detector_opt'() : SEGM_DETECTOR { return [this.$uid.toString(), 7]  as unknown as SEGM_DETECTOR; }
get 'detailer_hook'() : DETAILER_HOOK { return [this.$uid.toString(), 8]  as unknown as DETAILER_HOOK; }

        /**
          * Constructor
		 * @param opts.detailer_pipe}
        */
        constructor(opts:{
            'detailer_pipe': DETAILER_PIPE
        }){
            super(ctx);

            super.$$link("detailer_pipe", opts['detailer_pipe'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "FromDetailerPipe"
        }
},

    /**
     * FromDetailerPipe_v2 from ImpactPack/Pipe
     * @desc 
    */
    "FromDetailerPipe_v2" : class extends Node{
        //Setters
        //set 'detailer_pipe'(value : DETAILER_PIPE)  { super.$$link(0, value) } 

        //Getters
        get 'detailer_pipe'() : DETAILER_PIPE { return [this.$uid.toString(), 0]  as unknown as DETAILER_PIPE; }
get 'model'() : MODEL { return [this.$uid.toString(), 1]  as unknown as MODEL; }
get 'clip'() : CLIP { return [this.$uid.toString(), 2]  as unknown as CLIP; }
get 'vae'() : VAE { return [this.$uid.toString(), 3]  as unknown as VAE; }
get 'positive'() : CONDITIONING { return [this.$uid.toString(), 4]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this.$uid.toString(), 5]  as unknown as CONDITIONING; }
get 'bbox_detector'() : BBOX_DETECTOR { return [this.$uid.toString(), 6]  as unknown as BBOX_DETECTOR; }
get 'sam_model_opt'() : SAM_MODEL { return [this.$uid.toString(), 7]  as unknown as SAM_MODEL; }
get 'segm_detector_opt'() : SEGM_DETECTOR { return [this.$uid.toString(), 8]  as unknown as SEGM_DETECTOR; }
get 'detailer_hook'() : DETAILER_HOOK { return [this.$uid.toString(), 9]  as unknown as DETAILER_HOOK; }

        /**
          * Constructor
		 * @param opts.detailer_pipe}
        */
        constructor(opts:{
            'detailer_pipe': DETAILER_PIPE
        }){
            super(ctx);

            super.$$link("detailer_pipe", opts['detailer_pipe'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "FromDetailerPipe_v2"
        }
},

    /**
     * FromDetailer (SDXL/pipe) from ImpactPack/Pipe
     * @desc 
    */
    "FromDetailerPipeSDXL" : class extends Node{
        //Setters
        //set 'detailer_pipe'(value : DETAILER_PIPE)  { super.$$link(0, value) } 

        //Getters
        get 'detailer_pipe'() : DETAILER_PIPE { return [this.$uid.toString(), 0]  as unknown as DETAILER_PIPE; }
get 'model'() : MODEL { return [this.$uid.toString(), 1]  as unknown as MODEL; }
get 'clip'() : CLIP { return [this.$uid.toString(), 2]  as unknown as CLIP; }
get 'vae'() : VAE { return [this.$uid.toString(), 3]  as unknown as VAE; }
get 'positive'() : CONDITIONING { return [this.$uid.toString(), 4]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this.$uid.toString(), 5]  as unknown as CONDITIONING; }
get 'bbox_detector'() : BBOX_DETECTOR { return [this.$uid.toString(), 6]  as unknown as BBOX_DETECTOR; }
get 'sam_model_opt'() : SAM_MODEL { return [this.$uid.toString(), 7]  as unknown as SAM_MODEL; }
get 'segm_detector_opt'() : SEGM_DETECTOR { return [this.$uid.toString(), 8]  as unknown as SEGM_DETECTOR; }
get 'detailer_hook'() : DETAILER_HOOK { return [this.$uid.toString(), 9]  as unknown as DETAILER_HOOK; }
get 'refiner_model'() : MODEL { return [this.$uid.toString(), 10]  as unknown as MODEL; }
get 'refiner_clip'() : CLIP { return [this.$uid.toString(), 11]  as unknown as CLIP; }
get 'refiner_positive'() : CONDITIONING { return [this.$uid.toString(), 12]  as unknown as CONDITIONING; }
get 'refiner_negative'() : CONDITIONING { return [this.$uid.toString(), 13]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.detailer_pipe}
        */
        constructor(opts:{
            'detailer_pipe': DETAILER_PIPE
        }){
            super(ctx);

            super.$$link("detailer_pipe", opts['detailer_pipe'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "FromDetailerPipeSDXL"
        }
},

    /**
     * ToBasicPipe from ImpactPack/Pipe
     * @desc 
    */
    "ToBasicPipe" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'clip'(value : CLIP)  { super.$$link(1, value) } 
//set 'vae'(value : VAE)  { super.$$link(2, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(3, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(4, value) } 

        //Getters
        get 'basic_pipe'() : BASIC_PIPE { return [this.$uid.toString(), 0]  as unknown as BASIC_PIPE; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.clip
		 * @param opts.vae
		 * @param opts.positive
		 * @param opts.negative}
        */
        constructor(opts:{
            'model': MODEL,'clip': CLIP,'vae': VAE,'positive': CONDITIONING,'negative': CONDITIONING
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("clip", opts['clip'])
super.$$link("vae", opts['vae'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ToBasicPipe"
        }
},

    /**
     * FromBasicPipe from ImpactPack/Pipe
     * @desc 
    */
    "FromBasicPipe" : class extends Node{
        //Setters
        //set 'basic_pipe'(value : BASIC_PIPE)  { super.$$link(0, value) } 

        //Getters
        get 'model'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'clip'() : CLIP { return [this.$uid.toString(), 1]  as unknown as CLIP; }
get 'vae'() : VAE { return [this.$uid.toString(), 2]  as unknown as VAE; }
get 'positive'() : CONDITIONING { return [this.$uid.toString(), 3]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this.$uid.toString(), 4]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.basic_pipe}
        */
        constructor(opts:{
            'basic_pipe': BASIC_PIPE
        }){
            super(ctx);

            super.$$link("basic_pipe", opts['basic_pipe'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "FromBasicPipe"
        }
},

    /**
     * FromBasicPipe_v2 from ImpactPack/Pipe
     * @desc 
    */
    "FromBasicPipe_v2" : class extends Node{
        //Setters
        //set 'basic_pipe'(value : BASIC_PIPE)  { super.$$link(0, value) } 

        //Getters
        get 'basic_pipe'() : BASIC_PIPE { return [this.$uid.toString(), 0]  as unknown as BASIC_PIPE; }
get 'model'() : MODEL { return [this.$uid.toString(), 1]  as unknown as MODEL; }
get 'clip'() : CLIP { return [this.$uid.toString(), 2]  as unknown as CLIP; }
get 'vae'() : VAE { return [this.$uid.toString(), 3]  as unknown as VAE; }
get 'positive'() : CONDITIONING { return [this.$uid.toString(), 4]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this.$uid.toString(), 5]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.basic_pipe}
        */
        constructor(opts:{
            'basic_pipe': BASIC_PIPE
        }){
            super(ctx);

            super.$$link("basic_pipe", opts['basic_pipe'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "FromBasicPipe_v2"
        }
},

    /**
     * BasicPipe -> DetailerPipe from ImpactPack/Pipe
     * @desc 
    */
    "BasicPipeToDetailerPipe" : class extends Node{
        //Setters
        //set 'basic_pipe'(value : BASIC_PIPE)  { super.$$link(0, value) } 
//set 'bbox_detector'(value : BBOX_DETECTOR)  { super.$$link(1, value) } 
//set 'wildcard'(value : STRING)  { super.$$link(2, value) } 
//set 'Select to add LoRA'(value : 'Select the LoRA to add to the text'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(3, value) } 
//set 'Select to add Wildcard'(value : 'Select the Wildcard to add to the text'| $dyn)  { super.$$link(4, value) } 
//set 'sam_model_opt'(value : SAM_MODEL)  { super.$$link(5, value) } 
//set 'segm_detector_opt'(value : SEGM_DETECTOR)  { super.$$link(6, value) } 
//set 'detailer_hook'(value : DETAILER_HOOK)  { super.$$link(7, value) } 

        //Getters
        get 'detailer_pipe'() : DETAILER_PIPE { return [this.$uid.toString(), 0]  as unknown as DETAILER_PIPE; }

        /**
          * Constructor
		 * @param opts.basic_pipe
		 * @param opts.bbox_detector
		 * @param opts.wildcard
		 * @param opts.Select to add LoRA
		 * @param opts.Select to add Wildcard
		 * @param opts.sam_model_opt
		 * @param opts.segm_detector_opt
		 * @param opts.detailer_hook}
        */
        constructor(opts:{
            'basic_pipe': BASIC_PIPE,'bbox_detector': BBOX_DETECTOR,'wildcard': STRING,'Select to add LoRA': 'Select the LoRA to add to the text'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'Select to add Wildcard': 'Select the Wildcard to add to the text'| $dyn,'sam_model_opt'?: SAM_MODEL,'segm_detector_opt'?: SEGM_DETECTOR,'detailer_hook'?: DETAILER_HOOK
        }){
            super(ctx);

            super.$$link("basic_pipe", opts['basic_pipe'])
super.$$link("bbox_detector", opts['bbox_detector'])
super.$$link("wildcard", opts['wildcard'])
super.$$link("Select to add LoRA", opts['Select to add LoRA'])
super.$$link("Select to add Wildcard", opts['Select to add Wildcard'])
super.$$link("sam_model_opt", opts['sam_model_opt'])
super.$$link("segm_detector_opt", opts['segm_detector_opt'])
super.$$link("detailer_hook", opts['detailer_hook'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "BasicPipeToDetailerPipe"
        }
},

    /**
     * BasicPipe -> DetailerPipe (SDXL) from ImpactPack/Pipe
     * @desc 
    */
    "BasicPipeToDetailerPipeSDXL" : class extends Node{
        //Setters
        //set 'base_basic_pipe'(value : BASIC_PIPE)  { super.$$link(0, value) } 
//set 'refiner_basic_pipe'(value : BASIC_PIPE)  { super.$$link(1, value) } 
//set 'bbox_detector'(value : BBOX_DETECTOR)  { super.$$link(2, value) } 
//set 'wildcard'(value : STRING)  { super.$$link(3, value) } 
//set 'Select to add LoRA'(value : 'Select the LoRA to add to the text'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(4, value) } 
//set 'Select to add Wildcard'(value : 'Select the Wildcard to add to the text'| $dyn)  { super.$$link(5, value) } 
//set 'sam_model_opt'(value : SAM_MODEL)  { super.$$link(6, value) } 
//set 'segm_detector_opt'(value : SEGM_DETECTOR)  { super.$$link(7, value) } 
//set 'detailer_hook'(value : DETAILER_HOOK)  { super.$$link(8, value) } 

        //Getters
        get 'detailer_pipe'() : DETAILER_PIPE { return [this.$uid.toString(), 0]  as unknown as DETAILER_PIPE; }

        /**
          * Constructor
		 * @param opts.base_basic_pipe
		 * @param opts.refiner_basic_pipe
		 * @param opts.bbox_detector
		 * @param opts.wildcard
		 * @param opts.Select to add LoRA
		 * @param opts.Select to add Wildcard
		 * @param opts.sam_model_opt
		 * @param opts.segm_detector_opt
		 * @param opts.detailer_hook}
        */
        constructor(opts:{
            'base_basic_pipe': BASIC_PIPE,'refiner_basic_pipe': BASIC_PIPE,'bbox_detector': BBOX_DETECTOR,'wildcard': STRING,'Select to add LoRA': 'Select the LoRA to add to the text'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'Select to add Wildcard': 'Select the Wildcard to add to the text'| $dyn,'sam_model_opt'?: SAM_MODEL,'segm_detector_opt'?: SEGM_DETECTOR,'detailer_hook'?: DETAILER_HOOK
        }){
            super(ctx);

            super.$$link("base_basic_pipe", opts['base_basic_pipe'])
super.$$link("refiner_basic_pipe", opts['refiner_basic_pipe'])
super.$$link("bbox_detector", opts['bbox_detector'])
super.$$link("wildcard", opts['wildcard'])
super.$$link("Select to add LoRA", opts['Select to add LoRA'])
super.$$link("Select to add Wildcard", opts['Select to add Wildcard'])
super.$$link("sam_model_opt", opts['sam_model_opt'])
super.$$link("segm_detector_opt", opts['segm_detector_opt'])
super.$$link("detailer_hook", opts['detailer_hook'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "BasicPipeToDetailerPipeSDXL"
        }
},

    /**
     * DetailerPipe -> BasicPipe from ImpactPack/Pipe
     * @desc 
    */
    "DetailerPipeToBasicPipe" : class extends Node{
        //Setters
        //set 'detailer_pipe'(value : DETAILER_PIPE)  { super.$$link(0, value) } 

        //Getters
        get 'base_basic_pipe'() : BASIC_PIPE { return [this.$uid.toString(), 0]  as unknown as BASIC_PIPE; }
get 'refiner_basic_pipe'() : BASIC_PIPE { return [this.$uid.toString(), 1]  as unknown as BASIC_PIPE; }

        /**
          * Constructor
		 * @param opts.detailer_pipe}
        */
        constructor(opts:{
            'detailer_pipe': DETAILER_PIPE
        }){
            super(ctx);

            super.$$link("detailer_pipe", opts['detailer_pipe'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "DetailerPipeToBasicPipe"
        }
},

    /**
     * Edit BasicPipe from ImpactPack/Pipe
     * @desc 
    */
    "EditBasicPipe" : class extends Node{
        //Setters
        //set 'basic_pipe'(value : BASIC_PIPE)  { super.$$link(0, value) } 
//set 'model'(value : MODEL)  { super.$$link(1, value) } 
//set 'clip'(value : CLIP)  { super.$$link(2, value) } 
//set 'vae'(value : VAE)  { super.$$link(3, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(4, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(5, value) } 

        //Getters
        get 'basic_pipe'() : BASIC_PIPE { return [this.$uid.toString(), 0]  as unknown as BASIC_PIPE; }

        /**
          * Constructor
		 * @param opts.basic_pipe
		 * @param opts.model
		 * @param opts.clip
		 * @param opts.vae
		 * @param opts.positive
		 * @param opts.negative}
        */
        constructor(opts:{
            'basic_pipe': BASIC_PIPE,'model'?: MODEL,'clip'?: CLIP,'vae'?: VAE,'positive'?: CONDITIONING,'negative'?: CONDITIONING
        }){
            super(ctx);

            super.$$link("basic_pipe", opts['basic_pipe'])
super.$$link("model", opts['model'])
super.$$link("clip", opts['clip'])
super.$$link("vae", opts['vae'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "EditBasicPipe"
        }
},

    /**
     * Edit DetailerPipe from ImpactPack/Pipe
     * @desc 
    */
    "EditDetailerPipe" : class extends Node{
        //Setters
        //set 'detailer_pipe'(value : DETAILER_PIPE)  { super.$$link(0, value) } 
//set 'wildcard'(value : STRING)  { super.$$link(1, value) } 
//set 'Select to add LoRA'(value : 'Select the LoRA to add to the text'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(2, value) } 
//set 'Select to add Wildcard'(value : 'Select the Wildcard to add to the text'| $dyn)  { super.$$link(3, value) } 
//set 'model'(value : MODEL)  { super.$$link(4, value) } 
//set 'clip'(value : CLIP)  { super.$$link(5, value) } 
//set 'vae'(value : VAE)  { super.$$link(6, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(7, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(8, value) } 
//set 'bbox_detector'(value : BBOX_DETECTOR)  { super.$$link(9, value) } 
//set 'sam_model'(value : SAM_MODEL)  { super.$$link(10, value) } 
//set 'segm_detector'(value : SEGM_DETECTOR)  { super.$$link(11, value) } 
//set 'detailer_hook'(value : DETAILER_HOOK)  { super.$$link(12, value) } 

        //Getters
        get 'detailer_pipe'() : DETAILER_PIPE { return [this.$uid.toString(), 0]  as unknown as DETAILER_PIPE; }

        /**
          * Constructor
		 * @param opts.detailer_pipe
		 * @param opts.wildcard
		 * @param opts.Select to add LoRA
		 * @param opts.Select to add Wildcard
		 * @param opts.model
		 * @param opts.clip
		 * @param opts.vae
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.bbox_detector
		 * @param opts.sam_model
		 * @param opts.segm_detector
		 * @param opts.detailer_hook}
        */
        constructor(opts:{
            'detailer_pipe': DETAILER_PIPE,'wildcard': STRING,'Select to add LoRA': 'Select the LoRA to add to the text'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'Select to add Wildcard': 'Select the Wildcard to add to the text'| $dyn,'model'?: MODEL,'clip'?: CLIP,'vae'?: VAE,'positive'?: CONDITIONING,'negative'?: CONDITIONING,'bbox_detector'?: BBOX_DETECTOR,'sam_model'?: SAM_MODEL,'segm_detector'?: SEGM_DETECTOR,'detailer_hook'?: DETAILER_HOOK
        }){
            super(ctx);

            super.$$link("detailer_pipe", opts['detailer_pipe'])
super.$$link("wildcard", opts['wildcard'])
super.$$link("Select to add LoRA", opts['Select to add LoRA'])
super.$$link("Select to add Wildcard", opts['Select to add Wildcard'])
super.$$link("model", opts['model'])
super.$$link("clip", opts['clip'])
super.$$link("vae", opts['vae'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("bbox_detector", opts['bbox_detector'])
super.$$link("sam_model", opts['sam_model'])
super.$$link("segm_detector", opts['segm_detector'])
super.$$link("detailer_hook", opts['detailer_hook'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "EditDetailerPipe"
        }
},

    /**
     * Edit DetailerPipe (SDXL) from ImpactPack/Pipe
     * @desc 
    */
    "EditDetailerPipeSDXL" : class extends Node{
        //Setters
        //set 'detailer_pipe'(value : DETAILER_PIPE)  { super.$$link(0, value) } 
//set 'wildcard'(value : STRING)  { super.$$link(1, value) } 
//set 'Select to add LoRA'(value : 'Select the LoRA to add to the text'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(2, value) } 
//set 'Select to add Wildcard'(value : 'Select the Wildcard to add to the text'| $dyn)  { super.$$link(3, value) } 
//set 'model'(value : MODEL)  { super.$$link(4, value) } 
//set 'clip'(value : CLIP)  { super.$$link(5, value) } 
//set 'vae'(value : VAE)  { super.$$link(6, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(7, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(8, value) } 
//set 'refiner_model'(value : MODEL)  { super.$$link(9, value) } 
//set 'refiner_clip'(value : CLIP)  { super.$$link(10, value) } 
//set 'refiner_positive'(value : CONDITIONING)  { super.$$link(11, value) } 
//set 'refiner_negative'(value : CONDITIONING)  { super.$$link(12, value) } 
//set 'bbox_detector'(value : BBOX_DETECTOR)  { super.$$link(13, value) } 
//set 'sam_model'(value : SAM_MODEL)  { super.$$link(14, value) } 
//set 'segm_detector'(value : SEGM_DETECTOR)  { super.$$link(15, value) } 
//set 'detailer_hook'(value : DETAILER_HOOK)  { super.$$link(16, value) } 

        //Getters
        get 'detailer_pipe'() : DETAILER_PIPE { return [this.$uid.toString(), 0]  as unknown as DETAILER_PIPE; }

        /**
          * Constructor
		 * @param opts.detailer_pipe
		 * @param opts.wildcard
		 * @param opts.Select to add LoRA
		 * @param opts.Select to add Wildcard
		 * @param opts.model
		 * @param opts.clip
		 * @param opts.vae
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.refiner_model
		 * @param opts.refiner_clip
		 * @param opts.refiner_positive
		 * @param opts.refiner_negative
		 * @param opts.bbox_detector
		 * @param opts.sam_model
		 * @param opts.segm_detector
		 * @param opts.detailer_hook}
        */
        constructor(opts:{
            'detailer_pipe': DETAILER_PIPE,'wildcard': STRING,'Select to add LoRA': 'Select the LoRA to add to the text'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'Select to add Wildcard': 'Select the Wildcard to add to the text'| $dyn,'model'?: MODEL,'clip'?: CLIP,'vae'?: VAE,'positive'?: CONDITIONING,'negative'?: CONDITIONING,'refiner_model'?: MODEL,'refiner_clip'?: CLIP,'refiner_positive'?: CONDITIONING,'refiner_negative'?: CONDITIONING,'bbox_detector'?: BBOX_DETECTOR,'sam_model'?: SAM_MODEL,'segm_detector'?: SEGM_DETECTOR,'detailer_hook'?: DETAILER_HOOK
        }){
            super(ctx);

            super.$$link("detailer_pipe", opts['detailer_pipe'])
super.$$link("wildcard", opts['wildcard'])
super.$$link("Select to add LoRA", opts['Select to add LoRA'])
super.$$link("Select to add Wildcard", opts['Select to add Wildcard'])
super.$$link("model", opts['model'])
super.$$link("clip", opts['clip'])
super.$$link("vae", opts['vae'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("refiner_model", opts['refiner_model'])
super.$$link("refiner_clip", opts['refiner_clip'])
super.$$link("refiner_positive", opts['refiner_positive'])
super.$$link("refiner_negative", opts['refiner_negative'])
super.$$link("bbox_detector", opts['bbox_detector'])
super.$$link("sam_model", opts['sam_model'])
super.$$link("segm_detector", opts['segm_detector'])
super.$$link("detailer_hook", opts['detailer_hook'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "EditDetailerPipeSDXL"
        }
},

    /**
     * Latent Scale (on Pixel Space) from ImpactPack/Upscale
     * @desc 
    */
    "LatentPixelScale" : class extends Node{
        //Setters
        //set 'samples'(value : LATENT)  { super.$$link(0, value) } 
//set 'scale_method'(value : 'nearest-exact'|'bilinear'|'lanczos'|'area'| $dyn)  { super.$$link(1, value) } 
//set 'scale_factor'(value : FLOAT)  { super.$$link(2, value) } 
//set 'vae'(value : VAE)  { super.$$link(3, value) } 
//set 'use_tiled_vae'(value : BOOLEAN)  { super.$$link(4, value) } 
//set 'upscale_model_opt'(value : UPSCALE_MODEL)  { super.$$link(5, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }
get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 1]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.samples
		 * @param opts.scale_method
		 * @param opts.scale_factor default: 1.5 max: 10000 min: 0.1 step: 0.1
		 * @param opts.vae
		 * @param opts.use_tiled_vae
		 * @param opts.upscale_model_opt}
        */
        constructor(opts:{
            'samples': LATENT,'scale_method': 'nearest-exact'|'bilinear'|'lanczos'|'area'| $dyn,'scale_factor'?: FLOAT,'vae': VAE,'use_tiled_vae'?: BOOLEAN,'upscale_model_opt'?: UPSCALE_MODEL
        }){
            super(ctx);

            super.$$link("samples", opts['samples'])
super.$$link("scale_method", opts['scale_method'])
super.$$link("scale_factor", opts['scale_factor']??tmp["LatentPixelScale"].defaults['scale_factor'])
super.$$link("vae", opts['vae'])
super.$$link("use_tiled_vae", opts['use_tiled_vae']??tmp["LatentPixelScale"].defaults['use_tiled_vae'])
super.$$link("upscale_model_opt", opts['upscale_model_opt'])
}

        static defaults = {
    'scale_factor':  1.5,
'use_tiled_vae':  false
}
        protected override $$type(){
            return "LatentPixelScale"
        }
},

    /**
     * PixelKSampleUpscalerProvider from ImpactPack/Upscale
     * @desc 
    */
    "PixelKSampleUpscalerProvider" : class extends Node{
        //Setters
        //set 'scale_method'(value : 'nearest-exact'|'bilinear'|'lanczos'|'area'| $dyn)  { super.$$link(0, value) } 
//set 'model'(value : MODEL)  { super.$$link(1, value) } 
//set 'vae'(value : VAE)  { super.$$link(2, value) } 
//set 'seed'(value : INT)  { super.$$link(3, value) } 
//set 'steps'(value : INT)  { super.$$link(4, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(5, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(6, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn)  { super.$$link(7, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(8, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(9, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(10, value) } 
//set 'use_tiled_vae'(value : BOOLEAN)  { super.$$link(11, value) } 
//set 'tile_size'(value : INT)  { super.$$link(12, value) } 
//set 'upscale_model_opt'(value : UPSCALE_MODEL)  { super.$$link(13, value) } 
//set 'pk_hook_opt'(value : PK_HOOK)  { super.$$link(14, value) } 
//set 'scheduler_func_opt'(value : SCHEDULER_FUNC)  { super.$$link(15, value) } 

        //Getters
        get 'UPSCALER'() : UPSCALER { return [this.$uid.toString(), 0]  as unknown as UPSCALER; }

        /**
          * Constructor
		 * @param opts.scale_method
		 * @param opts.model
		 * @param opts.vae
		 * @param opts.seed
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.cfg default: 8
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.denoise default: 1 step: 0.01
		 * @param opts.use_tiled_vae
		 * @param opts.tile_size default: 512 max: 4096 min: 320 step: 64
		 * @param opts.upscale_model_opt
		 * @param opts.pk_hook_opt
		 * @param opts.scheduler_func_opt}
        */
        constructor(opts:{
            'scale_method': 'nearest-exact'|'bilinear'|'lanczos'|'area'| $dyn,'model': MODEL,'vae': VAE,'seed'?: INT,'steps'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn,'positive': CONDITIONING,'negative': CONDITIONING,'denoise'?: FLOAT,'use_tiled_vae'?: BOOLEAN,'tile_size'?: INT,'upscale_model_opt'?: UPSCALE_MODEL,'pk_hook_opt'?: PK_HOOK,'scheduler_func_opt'?: SCHEDULER_FUNC
        }){
            super(ctx);

            super.$$link("scale_method", opts['scale_method'])
super.$$link("model", opts['model'])
super.$$link("vae", opts['vae'])
super.$$link("seed", opts['seed']??tmp["PixelKSampleUpscalerProvider"].defaults['seed'])
super.$$link("steps", opts['steps']??tmp["PixelKSampleUpscalerProvider"].defaults['steps'])
super.$$link("cfg", opts['cfg']??tmp["PixelKSampleUpscalerProvider"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("denoise", opts['denoise']??tmp["PixelKSampleUpscalerProvider"].defaults['denoise'])
super.$$link("use_tiled_vae", opts['use_tiled_vae']??tmp["PixelKSampleUpscalerProvider"].defaults['use_tiled_vae'])
super.$$link("tile_size", opts['tile_size']??tmp["PixelKSampleUpscalerProvider"].defaults['tile_size'])
super.$$link("upscale_model_opt", opts['upscale_model_opt'])
super.$$link("pk_hook_opt", opts['pk_hook_opt'])
super.$$link("scheduler_func_opt", opts['scheduler_func_opt'])
}

        static defaults = {
    'seed':  0,
'steps':  20,
'cfg':  8,
'denoise':  1,
'use_tiled_vae':  false,
'tile_size':  512
}
        protected override $$type(){
            return "PixelKSampleUpscalerProvider"
        }
},

    /**
     * PixelKSampleUpscalerProviderPipe from ImpactPack/Upscale
     * @desc 
    */
    "PixelKSampleUpscalerProviderPipe" : class extends Node{
        //Setters
        //set 'scale_method'(value : 'nearest-exact'|'bilinear'|'lanczos'|'area'| $dyn)  { super.$$link(0, value) } 
//set 'seed'(value : INT)  { super.$$link(1, value) } 
//set 'steps'(value : INT)  { super.$$link(2, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(3, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(4, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn)  { super.$$link(5, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(6, value) } 
//set 'use_tiled_vae'(value : BOOLEAN)  { super.$$link(7, value) } 
//set 'basic_pipe'(value : BASIC_PIPE)  { super.$$link(8, value) } 
//set 'tile_size'(value : INT)  { super.$$link(9, value) } 
//set 'upscale_model_opt'(value : UPSCALE_MODEL)  { super.$$link(10, value) } 
//set 'pk_hook_opt'(value : PK_HOOK)  { super.$$link(11, value) } 
//set 'scheduler_func_opt'(value : SCHEDULER_FUNC)  { super.$$link(12, value) } 
//set 'tile_cnet_opt'(value : CONTROL_NET)  { super.$$link(13, value) } 
//set 'tile_cnet_strength'(value : FLOAT)  { super.$$link(14, value) } 

        //Getters
        get 'UPSCALER'() : UPSCALER { return [this.$uid.toString(), 0]  as unknown as UPSCALER; }

        /**
          * Constructor
		 * @param opts.scale_method
		 * @param opts.seed
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.cfg default: 8
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.denoise default: 1 step: 0.01
		 * @param opts.use_tiled_vae
		 * @param opts.basic_pipe
		 * @param opts.tile_size default: 512 max: 4096 min: 320 step: 64
		 * @param opts.upscale_model_opt
		 * @param opts.pk_hook_opt
		 * @param opts.scheduler_func_opt
		 * @param opts.tile_cnet_opt
		 * @param opts.tile_cnet_strength default: 1 step: 0.01}
        */
        constructor(opts:{
            'scale_method': 'nearest-exact'|'bilinear'|'lanczos'|'area'| $dyn,'seed'?: INT,'steps'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn,'denoise'?: FLOAT,'use_tiled_vae'?: BOOLEAN,'basic_pipe': BASIC_PIPE,'tile_size'?: INT,'upscale_model_opt'?: UPSCALE_MODEL,'pk_hook_opt'?: PK_HOOK,'scheduler_func_opt'?: SCHEDULER_FUNC,'tile_cnet_opt'?: CONTROL_NET,'tile_cnet_strength'?: FLOAT
        }){
            super(ctx);

            super.$$link("scale_method", opts['scale_method'])
super.$$link("seed", opts['seed']??tmp["PixelKSampleUpscalerProviderPipe"].defaults['seed'])
super.$$link("steps", opts['steps']??tmp["PixelKSampleUpscalerProviderPipe"].defaults['steps'])
super.$$link("cfg", opts['cfg']??tmp["PixelKSampleUpscalerProviderPipe"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("denoise", opts['denoise']??tmp["PixelKSampleUpscalerProviderPipe"].defaults['denoise'])
super.$$link("use_tiled_vae", opts['use_tiled_vae']??tmp["PixelKSampleUpscalerProviderPipe"].defaults['use_tiled_vae'])
super.$$link("basic_pipe", opts['basic_pipe'])
super.$$link("tile_size", opts['tile_size']??tmp["PixelKSampleUpscalerProviderPipe"].defaults['tile_size'])
super.$$link("upscale_model_opt", opts['upscale_model_opt'])
super.$$link("pk_hook_opt", opts['pk_hook_opt'])
super.$$link("scheduler_func_opt", opts['scheduler_func_opt'])
super.$$link("tile_cnet_opt", opts['tile_cnet_opt'])
super.$$link("tile_cnet_strength", opts['tile_cnet_strength']??tmp["PixelKSampleUpscalerProviderPipe"].defaults['tile_cnet_strength'])
}

        static defaults = {
    'seed':  0,
'steps':  20,
'cfg':  8,
'denoise':  1,
'use_tiled_vae':  false,
'tile_size':  512,
'tile_cnet_strength':  1
}
        protected override $$type(){
            return "PixelKSampleUpscalerProviderPipe"
        }
},

    /**
     * Iterative Upscale (Latent/on Pixel Space) from ImpactPack/Upscale
     * @desc 
    */
    "IterativeLatentUpscale" : class extends Node{
        //Setters
        //set 'samples'(value : LATENT)  { super.$$link(0, value) } 
//set 'upscale_factor'(value : FLOAT)  { super.$$link(1, value) } 
//set 'steps'(value : INT)  { super.$$link(2, value) } 
//set 'temp_prefix'(value : STRING)  { super.$$link(3, value) } 
//set 'upscaler'(value : UPSCALER)  { super.$$link(4, value) } 
//set 'step_mode'(value : 'simple'|'geometric'| $dyn)  { super.$$link(5, value) } 

        //Getters
        get 'latent'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }
get 'vae'() : VAE { return [this.$uid.toString(), 1]  as unknown as VAE; }

        /**
          * Constructor
		 * @param opts.samples
		 * @param opts.upscale_factor default: 1.5 max: 10000 min: 1 step: 0.1
		 * @param opts.steps default: 3 max: 10000 min: 1 step: 1
		 * @param opts.temp_prefix
		 * @param opts.upscaler
		 * @param opts.step_mode default: "simple"}
        */
        constructor(opts:{
            'samples': LATENT,'upscale_factor'?: FLOAT,'steps'?: INT,'temp_prefix'?: STRING,'upscaler': UPSCALER,'step_mode'?: 'simple'|'geometric'| $dyn
        }){
            super(ctx);

            super.$$link("samples", opts['samples'])
super.$$link("upscale_factor", opts['upscale_factor']??tmp["IterativeLatentUpscale"].defaults['upscale_factor'])
super.$$link("steps", opts['steps']??tmp["IterativeLatentUpscale"].defaults['steps'])
super.$$link("temp_prefix", opts['temp_prefix']??tmp["IterativeLatentUpscale"].defaults['temp_prefix'])
super.$$link("upscaler", opts['upscaler'])
super.$$link("step_mode", opts['step_mode']??tmp["IterativeLatentUpscale"].defaults['step_mode'])
}

        static defaults = {
    'upscale_factor':  1.5,
'steps':  3,
'temp_prefix':  "",
'step_mode':  "simple"
}
        protected override $$type(){
            return "IterativeLatentUpscale"
        }
},

    /**
     * Iterative Upscale (Image) from ImpactPack/Upscale
     * @desc 
    */
    "IterativeImageUpscale" : class extends Node{
        //Setters
        //set 'pixels'(value : IMAGE)  { super.$$link(0, value) } 
//set 'upscale_factor'(value : FLOAT)  { super.$$link(1, value) } 
//set 'steps'(value : INT)  { super.$$link(2, value) } 
//set 'temp_prefix'(value : STRING)  { super.$$link(3, value) } 
//set 'upscaler'(value : UPSCALER)  { super.$$link(4, value) } 
//set 'vae'(value : VAE)  { super.$$link(5, value) } 
//set 'step_mode'(value : 'simple'|'geometric'| $dyn)  { super.$$link(6, value) } 

        //Getters
        get 'image'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.pixels
		 * @param opts.upscale_factor default: 1.5 max: 10000 min: 1 step: 0.1
		 * @param opts.steps default: 3 max: 10000 min: 1 step: 1
		 * @param opts.temp_prefix
		 * @param opts.upscaler
		 * @param opts.vae
		 * @param opts.step_mode default: "simple"}
        */
        constructor(opts:{
            'pixels': IMAGE,'upscale_factor'?: FLOAT,'steps'?: INT,'temp_prefix'?: STRING,'upscaler': UPSCALER,'vae': VAE,'step_mode'?: 'simple'|'geometric'| $dyn
        }){
            super(ctx);

            super.$$link("pixels", opts['pixels'])
super.$$link("upscale_factor", opts['upscale_factor']??tmp["IterativeImageUpscale"].defaults['upscale_factor'])
super.$$link("steps", opts['steps']??tmp["IterativeImageUpscale"].defaults['steps'])
super.$$link("temp_prefix", opts['temp_prefix']??tmp["IterativeImageUpscale"].defaults['temp_prefix'])
super.$$link("upscaler", opts['upscaler'])
super.$$link("vae", opts['vae'])
super.$$link("step_mode", opts['step_mode']??tmp["IterativeImageUpscale"].defaults['step_mode'])
}

        static defaults = {
    'upscale_factor':  1.5,
'steps':  3,
'temp_prefix':  "",
'step_mode':  "simple"
}
        protected override $$type(){
            return "IterativeImageUpscale"
        }
},

    /**
     * PixelTiledKSampleUpscalerProvider from ImpactPack/Upscale
     * @desc 
    */
    "PixelTiledKSampleUpscalerProvider" : class extends Node{
        //Setters
        //set 'scale_method'(value : 'nearest-exact'|'bilinear'|'lanczos'|'area'| $dyn)  { super.$$link(0, value) } 
//set 'model'(value : MODEL)  { super.$$link(1, value) } 
//set 'vae'(value : VAE)  { super.$$link(2, value) } 
//set 'seed'(value : INT)  { super.$$link(3, value) } 
//set 'steps'(value : INT)  { super.$$link(4, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(5, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(6, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn)  { super.$$link(7, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(8, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(9, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(10, value) } 
//set 'tile_width'(value : INT)  { super.$$link(11, value) } 
//set 'tile_height'(value : INT)  { super.$$link(12, value) } 
//set 'tiling_strategy'(value : 'random'|'padded'|'simple'| $dyn)  { super.$$link(13, value) } 
//set 'upscale_model_opt'(value : UPSCALE_MODEL)  { super.$$link(14, value) } 
//set 'pk_hook_opt'(value : PK_HOOK)  { super.$$link(15, value) } 
//set 'tile_cnet_opt'(value : CONTROL_NET)  { super.$$link(16, value) } 
//set 'tile_cnet_strength'(value : FLOAT)  { super.$$link(17, value) } 

        //Getters
        get 'UPSCALER'() : UPSCALER { return [this.$uid.toString(), 0]  as unknown as UPSCALER; }

        /**
          * Constructor
		 * @param opts.scale_method
		 * @param opts.model
		 * @param opts.vae
		 * @param opts.seed
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.cfg default: 8
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.denoise default: 1 step: 0.01
		 * @param opts.tile_width default: 512 max: 16384 min: 320 step: 64
		 * @param opts.tile_height default: 512 max: 16384 min: 320 step: 64
		 * @param opts.tiling_strategy
		 * @param opts.upscale_model_opt
		 * @param opts.pk_hook_opt
		 * @param opts.tile_cnet_opt
		 * @param opts.tile_cnet_strength default: 1 step: 0.01}
        */
        constructor(opts:{
            'scale_method': 'nearest-exact'|'bilinear'|'lanczos'|'area'| $dyn,'model': MODEL,'vae': VAE,'seed'?: INT,'steps'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn,'positive': CONDITIONING,'negative': CONDITIONING,'denoise'?: FLOAT,'tile_width'?: INT,'tile_height'?: INT,'tiling_strategy': 'random'|'padded'|'simple'| $dyn,'upscale_model_opt'?: UPSCALE_MODEL,'pk_hook_opt'?: PK_HOOK,'tile_cnet_opt'?: CONTROL_NET,'tile_cnet_strength'?: FLOAT
        }){
            super(ctx);

            super.$$link("scale_method", opts['scale_method'])
super.$$link("model", opts['model'])
super.$$link("vae", opts['vae'])
super.$$link("seed", opts['seed']??tmp["PixelTiledKSampleUpscalerProvider"].defaults['seed'])
super.$$link("steps", opts['steps']??tmp["PixelTiledKSampleUpscalerProvider"].defaults['steps'])
super.$$link("cfg", opts['cfg']??tmp["PixelTiledKSampleUpscalerProvider"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("denoise", opts['denoise']??tmp["PixelTiledKSampleUpscalerProvider"].defaults['denoise'])
super.$$link("tile_width", opts['tile_width']??tmp["PixelTiledKSampleUpscalerProvider"].defaults['tile_width'])
super.$$link("tile_height", opts['tile_height']??tmp["PixelTiledKSampleUpscalerProvider"].defaults['tile_height'])
super.$$link("tiling_strategy", opts['tiling_strategy'])
super.$$link("upscale_model_opt", opts['upscale_model_opt'])
super.$$link("pk_hook_opt", opts['pk_hook_opt'])
super.$$link("tile_cnet_opt", opts['tile_cnet_opt'])
super.$$link("tile_cnet_strength", opts['tile_cnet_strength']??tmp["PixelTiledKSampleUpscalerProvider"].defaults['tile_cnet_strength'])
}

        static defaults = {
    'seed':  0,
'steps':  20,
'cfg':  8,
'denoise':  1,
'tile_width':  512,
'tile_height':  512,
'tile_cnet_strength':  1
}
        protected override $$type(){
            return "PixelTiledKSampleUpscalerProvider"
        }
},

    /**
     * PixelTiledKSampleUpscalerProviderPipe from ImpactPack/Upscale
     * @desc 
    */
    "PixelTiledKSampleUpscalerProviderPipe" : class extends Node{
        //Setters
        //set 'scale_method'(value : 'nearest-exact'|'bilinear'|'lanczos'|'area'| $dyn)  { super.$$link(0, value) } 
//set 'seed'(value : INT)  { super.$$link(1, value) } 
//set 'steps'(value : INT)  { super.$$link(2, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(3, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(4, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn)  { super.$$link(5, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(6, value) } 
//set 'tile_width'(value : INT)  { super.$$link(7, value) } 
//set 'tile_height'(value : INT)  { super.$$link(8, value) } 
//set 'tiling_strategy'(value : 'random'|'padded'|'simple'| $dyn)  { super.$$link(9, value) } 
//set 'basic_pipe'(value : BASIC_PIPE)  { super.$$link(10, value) } 
//set 'upscale_model_opt'(value : UPSCALE_MODEL)  { super.$$link(11, value) } 
//set 'pk_hook_opt'(value : PK_HOOK)  { super.$$link(12, value) } 
//set 'tile_cnet_opt'(value : CONTROL_NET)  { super.$$link(13, value) } 
//set 'tile_cnet_strength'(value : FLOAT)  { super.$$link(14, value) } 

        //Getters
        get 'UPSCALER'() : UPSCALER { return [this.$uid.toString(), 0]  as unknown as UPSCALER; }

        /**
          * Constructor
		 * @param opts.scale_method
		 * @param opts.seed
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.cfg default: 8
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.denoise default: 1 step: 0.01
		 * @param opts.tile_width default: 512 max: 16384 min: 320 step: 64
		 * @param opts.tile_height default: 512 max: 16384 min: 320 step: 64
		 * @param opts.tiling_strategy
		 * @param opts.basic_pipe
		 * @param opts.upscale_model_opt
		 * @param opts.pk_hook_opt
		 * @param opts.tile_cnet_opt
		 * @param opts.tile_cnet_strength default: 1 step: 0.01}
        */
        constructor(opts:{
            'scale_method': 'nearest-exact'|'bilinear'|'lanczos'|'area'| $dyn,'seed'?: INT,'steps'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn,'denoise'?: FLOAT,'tile_width'?: INT,'tile_height'?: INT,'tiling_strategy': 'random'|'padded'|'simple'| $dyn,'basic_pipe': BASIC_PIPE,'upscale_model_opt'?: UPSCALE_MODEL,'pk_hook_opt'?: PK_HOOK,'tile_cnet_opt'?: CONTROL_NET,'tile_cnet_strength'?: FLOAT
        }){
            super(ctx);

            super.$$link("scale_method", opts['scale_method'])
super.$$link("seed", opts['seed']??tmp["PixelTiledKSampleUpscalerProviderPipe"].defaults['seed'])
super.$$link("steps", opts['steps']??tmp["PixelTiledKSampleUpscalerProviderPipe"].defaults['steps'])
super.$$link("cfg", opts['cfg']??tmp["PixelTiledKSampleUpscalerProviderPipe"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("denoise", opts['denoise']??tmp["PixelTiledKSampleUpscalerProviderPipe"].defaults['denoise'])
super.$$link("tile_width", opts['tile_width']??tmp["PixelTiledKSampleUpscalerProviderPipe"].defaults['tile_width'])
super.$$link("tile_height", opts['tile_height']??tmp["PixelTiledKSampleUpscalerProviderPipe"].defaults['tile_height'])
super.$$link("tiling_strategy", opts['tiling_strategy'])
super.$$link("basic_pipe", opts['basic_pipe'])
super.$$link("upscale_model_opt", opts['upscale_model_opt'])
super.$$link("pk_hook_opt", opts['pk_hook_opt'])
super.$$link("tile_cnet_opt", opts['tile_cnet_opt'])
super.$$link("tile_cnet_strength", opts['tile_cnet_strength']??tmp["PixelTiledKSampleUpscalerProviderPipe"].defaults['tile_cnet_strength'])
}

        static defaults = {
    'seed':  0,
'steps':  20,
'cfg':  8,
'denoise':  1,
'tile_width':  512,
'tile_height':  512,
'tile_cnet_strength':  1
}
        protected override $$type(){
            return "PixelTiledKSampleUpscalerProviderPipe"
        }
},

    /**
     * TwoSamplersForMask Upscaler Provider from ImpactPack/Upscale
     * @desc 
    */
    "TwoSamplersForMaskUpscalerProvider" : class extends Node{
        //Setters
        //set 'scale_method'(value : 'nearest-exact'|'bilinear'|'lanczos'|'area'| $dyn)  { super.$$link(0, value) } 
//set 'full_sample_schedule'(value : 'none'|'interleave1'|'interleave2'|'interleave3'|'last1'|'last2'|'interleave1+last1'|'interleave2+last1'|'interleave3+last1'| $dyn)  { super.$$link(1, value) } 
//set 'use_tiled_vae'(value : BOOLEAN)  { super.$$link(2, value) } 
//set 'base_sampler'(value : KSAMPLER)  { super.$$link(3, value) } 
//set 'mask_sampler'(value : KSAMPLER)  { super.$$link(4, value) } 
//set 'mask'(value : MASK)  { super.$$link(5, value) } 
//set 'vae'(value : VAE)  { super.$$link(6, value) } 
//set 'tile_size'(value : INT)  { super.$$link(7, value) } 
//set 'full_sampler_opt'(value : KSAMPLER)  { super.$$link(8, value) } 
//set 'upscale_model_opt'(value : UPSCALE_MODEL)  { super.$$link(9, value) } 
//set 'pk_hook_base_opt'(value : PK_HOOK)  { super.$$link(10, value) } 
//set 'pk_hook_mask_opt'(value : PK_HOOK)  { super.$$link(11, value) } 
//set 'pk_hook_full_opt'(value : PK_HOOK)  { super.$$link(12, value) } 

        //Getters
        get 'UPSCALER'() : UPSCALER { return [this.$uid.toString(), 0]  as unknown as UPSCALER; }

        /**
          * Constructor
		 * @param opts.scale_method
		 * @param opts.full_sample_schedule
		 * @param opts.use_tiled_vae
		 * @param opts.base_sampler
		 * @param opts.mask_sampler
		 * @param opts.mask
		 * @param opts.vae
		 * @param opts.tile_size default: 512 max: 4096 min: 320 step: 64
		 * @param opts.full_sampler_opt
		 * @param opts.upscale_model_opt
		 * @param opts.pk_hook_base_opt
		 * @param opts.pk_hook_mask_opt
		 * @param opts.pk_hook_full_opt}
        */
        constructor(opts:{
            'scale_method': 'nearest-exact'|'bilinear'|'lanczos'|'area'| $dyn,'full_sample_schedule': 'none'|'interleave1'|'interleave2'|'interleave3'|'last1'|'last2'|'interleave1+last1'|'interleave2+last1'|'interleave3+last1'| $dyn,'use_tiled_vae'?: BOOLEAN,'base_sampler': KSAMPLER,'mask_sampler': KSAMPLER,'mask': MASK,'vae': VAE,'tile_size'?: INT,'full_sampler_opt'?: KSAMPLER,'upscale_model_opt'?: UPSCALE_MODEL,'pk_hook_base_opt'?: PK_HOOK,'pk_hook_mask_opt'?: PK_HOOK,'pk_hook_full_opt'?: PK_HOOK
        }){
            super(ctx);

            super.$$link("scale_method", opts['scale_method'])
super.$$link("full_sample_schedule", opts['full_sample_schedule'])
super.$$link("use_tiled_vae", opts['use_tiled_vae']??tmp["TwoSamplersForMaskUpscalerProvider"].defaults['use_tiled_vae'])
super.$$link("base_sampler", opts['base_sampler'])
super.$$link("mask_sampler", opts['mask_sampler'])
super.$$link("mask", opts['mask'])
super.$$link("vae", opts['vae'])
super.$$link("tile_size", opts['tile_size']??tmp["TwoSamplersForMaskUpscalerProvider"].defaults['tile_size'])
super.$$link("full_sampler_opt", opts['full_sampler_opt'])
super.$$link("upscale_model_opt", opts['upscale_model_opt'])
super.$$link("pk_hook_base_opt", opts['pk_hook_base_opt'])
super.$$link("pk_hook_mask_opt", opts['pk_hook_mask_opt'])
super.$$link("pk_hook_full_opt", opts['pk_hook_full_opt'])
}

        static defaults = {
    'use_tiled_vae':  false,
'tile_size':  512
}
        protected override $$type(){
            return "TwoSamplersForMaskUpscalerProvider"
        }
},

    /**
     * TwoSamplersForMask Upscaler Provider (pipe) from ImpactPack/Upscale
     * @desc 
    */
    "TwoSamplersForMaskUpscalerProviderPipe" : class extends Node{
        //Setters
        //set 'scale_method'(value : 'nearest-exact'|'bilinear'|'lanczos'|'area'| $dyn)  { super.$$link(0, value) } 
//set 'full_sample_schedule'(value : 'none'|'interleave1'|'interleave2'|'interleave3'|'last1'|'last2'|'interleave1+last1'|'interleave2+last1'|'interleave3+last1'| $dyn)  { super.$$link(1, value) } 
//set 'use_tiled_vae'(value : BOOLEAN)  { super.$$link(2, value) } 
//set 'base_sampler'(value : KSAMPLER)  { super.$$link(3, value) } 
//set 'mask_sampler'(value : KSAMPLER)  { super.$$link(4, value) } 
//set 'mask'(value : MASK)  { super.$$link(5, value) } 
//set 'basic_pipe'(value : BASIC_PIPE)  { super.$$link(6, value) } 
//set 'tile_size'(value : INT)  { super.$$link(7, value) } 
//set 'full_sampler_opt'(value : KSAMPLER)  { super.$$link(8, value) } 
//set 'upscale_model_opt'(value : UPSCALE_MODEL)  { super.$$link(9, value) } 
//set 'pk_hook_base_opt'(value : PK_HOOK)  { super.$$link(10, value) } 
//set 'pk_hook_mask_opt'(value : PK_HOOK)  { super.$$link(11, value) } 
//set 'pk_hook_full_opt'(value : PK_HOOK)  { super.$$link(12, value) } 

        //Getters
        get 'UPSCALER'() : UPSCALER { return [this.$uid.toString(), 0]  as unknown as UPSCALER; }

        /**
          * Constructor
		 * @param opts.scale_method
		 * @param opts.full_sample_schedule
		 * @param opts.use_tiled_vae
		 * @param opts.base_sampler
		 * @param opts.mask_sampler
		 * @param opts.mask
		 * @param opts.basic_pipe
		 * @param opts.tile_size default: 512 max: 4096 min: 320 step: 64
		 * @param opts.full_sampler_opt
		 * @param opts.upscale_model_opt
		 * @param opts.pk_hook_base_opt
		 * @param opts.pk_hook_mask_opt
		 * @param opts.pk_hook_full_opt}
        */
        constructor(opts:{
            'scale_method': 'nearest-exact'|'bilinear'|'lanczos'|'area'| $dyn,'full_sample_schedule': 'none'|'interleave1'|'interleave2'|'interleave3'|'last1'|'last2'|'interleave1+last1'|'interleave2+last1'|'interleave3+last1'| $dyn,'use_tiled_vae'?: BOOLEAN,'base_sampler': KSAMPLER,'mask_sampler': KSAMPLER,'mask': MASK,'basic_pipe': BASIC_PIPE,'tile_size'?: INT,'full_sampler_opt'?: KSAMPLER,'upscale_model_opt'?: UPSCALE_MODEL,'pk_hook_base_opt'?: PK_HOOK,'pk_hook_mask_opt'?: PK_HOOK,'pk_hook_full_opt'?: PK_HOOK
        }){
            super(ctx);

            super.$$link("scale_method", opts['scale_method'])
super.$$link("full_sample_schedule", opts['full_sample_schedule'])
super.$$link("use_tiled_vae", opts['use_tiled_vae']??tmp["TwoSamplersForMaskUpscalerProviderPipe"].defaults['use_tiled_vae'])
super.$$link("base_sampler", opts['base_sampler'])
super.$$link("mask_sampler", opts['mask_sampler'])
super.$$link("mask", opts['mask'])
super.$$link("basic_pipe", opts['basic_pipe'])
super.$$link("tile_size", opts['tile_size']??tmp["TwoSamplersForMaskUpscalerProviderPipe"].defaults['tile_size'])
super.$$link("full_sampler_opt", opts['full_sampler_opt'])
super.$$link("upscale_model_opt", opts['upscale_model_opt'])
super.$$link("pk_hook_base_opt", opts['pk_hook_base_opt'])
super.$$link("pk_hook_mask_opt", opts['pk_hook_mask_opt'])
super.$$link("pk_hook_full_opt", opts['pk_hook_full_opt'])
}

        static defaults = {
    'use_tiled_vae':  false,
'tile_size':  512
}
        protected override $$type(){
            return "TwoSamplersForMaskUpscalerProviderPipe"
        }
},

    /**
     * PixelKSampleHookCombine from ImpactPack/Upscale
     * @desc 
    */
    "PixelKSampleHookCombine" : class extends Node{
        //Setters
        //set 'hook1'(value : PK_HOOK)  { super.$$link(0, value) } 
//set 'hook2'(value : PK_HOOK)  { super.$$link(1, value) } 

        //Getters
        get 'PK_HOOK'() : PK_HOOK { return [this.$uid.toString(), 0]  as unknown as PK_HOOK; }

        /**
          * Constructor
		 * @param opts.hook1
		 * @param opts.hook2}
        */
        constructor(opts:{
            'hook1': PK_HOOK,'hook2': PK_HOOK
        }){
            super(ctx);

            super.$$link("hook1", opts['hook1'])
super.$$link("hook2", opts['hook2'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "PixelKSampleHookCombine"
        }
},

    /**
     * DenoiseScheduleHookProvider from ImpactPack/Upscale
     * @desc 
    */
    "DenoiseScheduleHookProvider" : class extends Node{
        //Setters
        //set 'schedule_for_iteration'(value : 'simple'| $dyn)  { super.$$link(0, value) } 
//set 'target_denoise'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'PK_HOOK'() : PK_HOOK { return [this.$uid.toString(), 0]  as unknown as PK_HOOK; }

        /**
          * Constructor
		 * @param opts.schedule_for_iteration
		 * @param opts.target_denoise default: 0.2 step: 0.01}
        */
        constructor(opts:{
            'schedule_for_iteration': 'simple'| $dyn,'target_denoise'?: FLOAT
        }){
            super(ctx);

            super.$$link("schedule_for_iteration", opts['schedule_for_iteration'])
super.$$link("target_denoise", opts['target_denoise']??tmp["DenoiseScheduleHookProvider"].defaults['target_denoise'])
}

        static defaults = {
    'target_denoise':  0.2
}
        protected override $$type(){
            return "DenoiseScheduleHookProvider"
        }
},

    /**
     * StepsScheduleHookProvider from ImpactPack/Upscale
     * @desc 
    */
    "StepsScheduleHookProvider" : class extends Node{
        //Setters
        //set 'schedule_for_iteration'(value : 'simple'| $dyn)  { super.$$link(0, value) } 
//set 'target_steps'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'PK_HOOK'() : PK_HOOK { return [this.$uid.toString(), 0]  as unknown as PK_HOOK; }

        /**
          * Constructor
		 * @param opts.schedule_for_iteration
		 * @param opts.target_steps default: 20 max: 10000 min: 1}
        */
        constructor(opts:{
            'schedule_for_iteration': 'simple'| $dyn,'target_steps'?: INT
        }){
            super(ctx);

            super.$$link("schedule_for_iteration", opts['schedule_for_iteration'])
super.$$link("target_steps", opts['target_steps']??tmp["StepsScheduleHookProvider"].defaults['target_steps'])
}

        static defaults = {
    'target_steps':  20
}
        protected override $$type(){
            return "StepsScheduleHookProvider"
        }
},

    /**
     * CfgScheduleHookProvider from ImpactPack/Upscale
     * @desc 
    */
    "CfgScheduleHookProvider" : class extends Node{
        //Setters
        //set 'schedule_for_iteration'(value : 'simple'| $dyn)  { super.$$link(0, value) } 
//set 'target_cfg'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'PK_HOOK'() : PK_HOOK { return [this.$uid.toString(), 0]  as unknown as PK_HOOK; }

        /**
          * Constructor
		 * @param opts.schedule_for_iteration
		 * @param opts.target_cfg default: 3}
        */
        constructor(opts:{
            'schedule_for_iteration': 'simple'| $dyn,'target_cfg'?: FLOAT
        }){
            super(ctx);

            super.$$link("schedule_for_iteration", opts['schedule_for_iteration'])
super.$$link("target_cfg", opts['target_cfg']??tmp["CfgScheduleHookProvider"].defaults['target_cfg'])
}

        static defaults = {
    'target_cfg':  3
}
        protected override $$type(){
            return "CfgScheduleHookProvider"
        }
},

    /**
     * NoiseInjectionHookProvider from ImpactPack/Upscale
     * @desc 
    */
    "NoiseInjectionHookProvider" : class extends Node{
        //Setters
        //set 'schedule_for_iteration'(value : 'simple'| $dyn)  { super.$$link(0, value) } 
//set 'source'(value : 'CPU'|'GPU'| $dyn)  { super.$$link(1, value) } 
//set 'seed'(value : INT)  { super.$$link(2, value) } 
//set 'start_strength'(value : FLOAT)  { super.$$link(3, value) } 
//set 'end_strength'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'PK_HOOK'() : PK_HOOK { return [this.$uid.toString(), 0]  as unknown as PK_HOOK; }

        /**
          * Constructor
		 * @param opts.schedule_for_iteration
		 * @param opts.source
		 * @param opts.seed
		 * @param opts.start_strength default: 1 step: 0.01
		 * @param opts.end_strength default: 1 step: 0.01}
        */
        constructor(opts:{
            'schedule_for_iteration': 'simple'| $dyn,'source': 'CPU'|'GPU'| $dyn,'seed'?: INT,'start_strength'?: FLOAT,'end_strength'?: FLOAT
        }){
            super(ctx);

            super.$$link("schedule_for_iteration", opts['schedule_for_iteration'])
super.$$link("source", opts['source'])
super.$$link("seed", opts['seed']??tmp["NoiseInjectionHookProvider"].defaults['seed'])
super.$$link("start_strength", opts['start_strength']??tmp["NoiseInjectionHookProvider"].defaults['start_strength'])
super.$$link("end_strength", opts['end_strength']??tmp["NoiseInjectionHookProvider"].defaults['end_strength'])
}

        static defaults = {
    'seed':  0,
'start_strength':  1,
'end_strength':  1
}
        protected override $$type(){
            return "NoiseInjectionHookProvider"
        }
},

    /**
     * UnsamplerHookProvider from ImpactPack/Upscale
     * @desc 
    */
    "UnsamplerHookProvider" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'steps'(value : INT)  { super.$$link(1, value) } 
//set 'start_end_at_step'(value : INT)  { super.$$link(2, value) } 
//set 'end_end_at_step'(value : INT)  { super.$$link(3, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(4, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(5, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn)  { super.$$link(6, value) } 
//set 'normalize'(value : 'disable'|'enable'| $dyn)  { super.$$link(7, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(8, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(9, value) } 
//set 'schedule_for_iteration'(value : 'simple'| $dyn)  { super.$$link(10, value) } 

        //Getters
        get 'PK_HOOK'() : PK_HOOK { return [this.$uid.toString(), 0]  as unknown as PK_HOOK; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.steps default: 25 max: 10000 min: 1
		 * @param opts.start_end_at_step default: 21
		 * @param opts.end_end_at_step default: 24
		 * @param opts.cfg default: 1
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.normalize
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.schedule_for_iteration}
        */
        constructor(opts:{
            'model': MODEL,'steps'?: INT,'start_end_at_step'?: INT,'end_end_at_step'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn,'normalize': 'disable'|'enable'| $dyn,'positive': CONDITIONING,'negative': CONDITIONING,'schedule_for_iteration': 'simple'| $dyn
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("steps", opts['steps']??tmp["UnsamplerHookProvider"].defaults['steps'])
super.$$link("start_end_at_step", opts['start_end_at_step']??tmp["UnsamplerHookProvider"].defaults['start_end_at_step'])
super.$$link("end_end_at_step", opts['end_end_at_step']??tmp["UnsamplerHookProvider"].defaults['end_end_at_step'])
super.$$link("cfg", opts['cfg']??tmp["UnsamplerHookProvider"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("normalize", opts['normalize'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("schedule_for_iteration", opts['schedule_for_iteration'])
}

        static defaults = {
    'steps':  25,
'start_end_at_step':  21,
'end_end_at_step':  24,
'cfg':  1
}
        protected override $$type(){
            return "UnsamplerHookProvider"
        }
},

    /**
     * CoreMLDetailerHookProvider from ImpactPack/Detailer
     * @desc 
    */
    "CoreMLDetailerHookProvider" : class extends Node{
        //Setters
        //set 'mode'(value : '512x512'|'768x768'|'512x768'|'768x512'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'DETAILER_HOOK'() : DETAILER_HOOK { return [this.$uid.toString(), 0]  as unknown as DETAILER_HOOK; }

        /**
          * Constructor
		 * @param opts.mode}
        */
        constructor(opts:{
            'mode': '512x512'|'768x768'|'512x768'|'768x512'| $dyn
        }){
            super(ctx);

            super.$$link("mode", opts['mode'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "CoreMLDetailerHookProvider"
        }
},

    /**
     * PreviewDetailerHookProvider from ImpactPack/Util
     * @desc 
    */
    "PreviewDetailerHookProvider" : class extends Node{
        //Setters
        //set 'quality'(value : INT)  { super.$$link(0, value) } 

        //Getters
        get 'DETAILER_HOOK'() : DETAILER_HOOK { return [this.$uid.toString(), 0]  as unknown as DETAILER_HOOK; }
get 'UPSCALER_HOOK'() : UPSCALER_HOOK { return [this.$uid.toString(), 1]  as unknown as UPSCALER_HOOK; }

        /**
          * Constructor
		 * @param opts.quality default: 95 max: 100 min: 20}
        */
        constructor(opts:{
            'quality'?: INT
        }){
            super(ctx);

            super.$$link("quality", opts['quality']??tmp["PreviewDetailerHookProvider"].defaults['quality'])
}

        static defaults = {
    'quality':  95
}
        protected override $$type(){
            return "PreviewDetailerHookProvider"
        }
},

    /**
     * DetailerHookCombine from ImpactPack/Upscale
     * @desc 
    */
    "DetailerHookCombine" : class extends Node{
        //Setters
        //set 'hook1'(value : DETAILER_HOOK)  { super.$$link(0, value) } 
//set 'hook2'(value : DETAILER_HOOK)  { super.$$link(1, value) } 

        //Getters
        get 'DETAILER_HOOK'() : DETAILER_HOOK { return [this.$uid.toString(), 0]  as unknown as DETAILER_HOOK; }

        /**
          * Constructor
		 * @param opts.hook1
		 * @param opts.hook2}
        */
        constructor(opts:{
            'hook1': DETAILER_HOOK,'hook2': DETAILER_HOOK
        }){
            super(ctx);

            super.$$link("hook1", opts['hook1'])
super.$$link("hook2", opts['hook2'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "DetailerHookCombine"
        }
},

    /**
     * NoiseInjectionDetailerHookProvider from ImpactPack/Detailer
     * @desc 
    */
    "NoiseInjectionDetailerHookProvider" : class extends Node{
        //Setters
        //set 'schedule_for_cycle'(value : 'skip_start'|'from_start'| $dyn)  { super.$$link(0, value) } 
//set 'source'(value : 'CPU'|'GPU'| $dyn)  { super.$$link(1, value) } 
//set 'seed'(value : INT)  { super.$$link(2, value) } 
//set 'start_strength'(value : FLOAT)  { super.$$link(3, value) } 
//set 'end_strength'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'DETAILER_HOOK'() : DETAILER_HOOK { return [this.$uid.toString(), 0]  as unknown as DETAILER_HOOK; }

        /**
          * Constructor
		 * @param opts.schedule_for_cycle
		 * @param opts.source
		 * @param opts.seed
		 * @param opts.start_strength default: 2 step: 0.01
		 * @param opts.end_strength default: 1 step: 0.01}
        */
        constructor(opts:{
            'schedule_for_cycle': 'skip_start'|'from_start'| $dyn,'source': 'CPU'|'GPU'| $dyn,'seed'?: INT,'start_strength'?: FLOAT,'end_strength'?: FLOAT
        }){
            super(ctx);

            super.$$link("schedule_for_cycle", opts['schedule_for_cycle'])
super.$$link("source", opts['source'])
super.$$link("seed", opts['seed']??tmp["NoiseInjectionDetailerHookProvider"].defaults['seed'])
super.$$link("start_strength", opts['start_strength']??tmp["NoiseInjectionDetailerHookProvider"].defaults['start_strength'])
super.$$link("end_strength", opts['end_strength']??tmp["NoiseInjectionDetailerHookProvider"].defaults['end_strength'])
}

        static defaults = {
    'seed':  0,
'start_strength':  2,
'end_strength':  1
}
        protected override $$type(){
            return "NoiseInjectionDetailerHookProvider"
        }
},

    /**
     * UnsamplerDetailerHookProvider from ImpactPack/Detailer
     * @desc 
    */
    "UnsamplerDetailerHookProvider" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'steps'(value : INT)  { super.$$link(1, value) } 
//set 'start_end_at_step'(value : INT)  { super.$$link(2, value) } 
//set 'end_end_at_step'(value : INT)  { super.$$link(3, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(4, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(5, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn)  { super.$$link(6, value) } 
//set 'normalize'(value : 'disable'|'enable'| $dyn)  { super.$$link(7, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(8, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(9, value) } 
//set 'schedule_for_cycle'(value : 'skip_start'|'from_start'| $dyn)  { super.$$link(10, value) } 

        //Getters
        get 'DETAILER_HOOK'() : DETAILER_HOOK { return [this.$uid.toString(), 0]  as unknown as DETAILER_HOOK; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.steps default: 25 max: 10000 min: 1
		 * @param opts.start_end_at_step default: 21
		 * @param opts.end_end_at_step default: 24
		 * @param opts.cfg default: 1
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.normalize
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.schedule_for_cycle}
        */
        constructor(opts:{
            'model': MODEL,'steps'?: INT,'start_end_at_step'?: INT,'end_end_at_step'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn,'normalize': 'disable'|'enable'| $dyn,'positive': CONDITIONING,'negative': CONDITIONING,'schedule_for_cycle': 'skip_start'|'from_start'| $dyn
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("steps", opts['steps']??tmp["UnsamplerDetailerHookProvider"].defaults['steps'])
super.$$link("start_end_at_step", opts['start_end_at_step']??tmp["UnsamplerDetailerHookProvider"].defaults['start_end_at_step'])
super.$$link("end_end_at_step", opts['end_end_at_step']??tmp["UnsamplerDetailerHookProvider"].defaults['end_end_at_step'])
super.$$link("cfg", opts['cfg']??tmp["UnsamplerDetailerHookProvider"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("normalize", opts['normalize'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("schedule_for_cycle", opts['schedule_for_cycle'])
}

        static defaults = {
    'steps':  25,
'start_end_at_step':  21,
'end_end_at_step':  24,
'cfg':  1
}
        protected override $$type(){
            return "UnsamplerDetailerHookProvider"
        }
},

    /**
     * DenoiseSchedulerDetailerHookProvider from ImpactPack/Detailer
     * @desc 
    */
    "DenoiseSchedulerDetailerHookProvider" : class extends Node{
        //Setters
        //set 'schedule_for_cycle'(value : 'simple'| $dyn)  { super.$$link(0, value) } 
//set 'target_denoise'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'DETAILER_HOOK'() : DETAILER_HOOK { return [this.$uid.toString(), 0]  as unknown as DETAILER_HOOK; }

        /**
          * Constructor
		 * @param opts.schedule_for_cycle
		 * @param opts.target_denoise default: 0.3 step: 0.01}
        */
        constructor(opts:{
            'schedule_for_cycle': 'simple'| $dyn,'target_denoise'?: FLOAT
        }){
            super(ctx);

            super.$$link("schedule_for_cycle", opts['schedule_for_cycle'])
super.$$link("target_denoise", opts['target_denoise']??tmp["DenoiseSchedulerDetailerHookProvider"].defaults['target_denoise'])
}

        static defaults = {
    'target_denoise':  0.3
}
        protected override $$type(){
            return "DenoiseSchedulerDetailerHookProvider"
        }
},

    /**
     * SEGSOrderedFilterDetailerHookProvider from ImpactPack/Util
     * @desc 
    */
    "SEGSOrderedFilterDetailerHookProvider" : class extends Node{
        //Setters
        //set 'target'(value : 'area(=w*h)'|'width'|'height'|'x1'|'y1'|'x2'|'y2'| $dyn)  { super.$$link(0, value) } 
//set 'order'(value : BOOLEAN)  { super.$$link(1, value) } 
//set 'take_start'(value : INT)  { super.$$link(2, value) } 
//set 'take_count'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'DETAILER_HOOK'() : DETAILER_HOOK { return [this.$uid.toString(), 0]  as unknown as DETAILER_HOOK; }

        /**
          * Constructor
		 * @param opts.target
		 * @param opts.order default: true
		 * @param opts.take_start step: 1
		 * @param opts.take_count default: 1 step: 1}
        */
        constructor(opts:{
            'target': 'area(=w*h)'|'width'|'height'|'x1'|'y1'|'x2'|'y2'| $dyn,'order'?: BOOLEAN,'take_start'?: INT,'take_count'?: INT
        }){
            super(ctx);

            super.$$link("target", opts['target'])
super.$$link("order", opts['order']??tmp["SEGSOrderedFilterDetailerHookProvider"].defaults['order'])
super.$$link("take_start", opts['take_start']??tmp["SEGSOrderedFilterDetailerHookProvider"].defaults['take_start'])
super.$$link("take_count", opts['take_count']??tmp["SEGSOrderedFilterDetailerHookProvider"].defaults['take_count'])
}

        static defaults = {
    'order':  true,
'take_start':  0,
'take_count':  1
}
        protected override $$type(){
            return "SEGSOrderedFilterDetailerHookProvider"
        }
},

    /**
     * SEGSRangeFilterDetailerHookProvider from ImpactPack/Util
     * @desc 
    */
    "SEGSRangeFilterDetailerHookProvider" : class extends Node{
        //Setters
        //set 'target'(value : 'area(=w*h)'|'width'|'height'|'x1'|'y1'|'x2'|'y2'|'length_percent'| $dyn)  { super.$$link(0, value) } 
//set 'mode'(value : BOOLEAN)  { super.$$link(1, value) } 
//set 'min_value'(value : INT)  { super.$$link(2, value) } 
//set 'max_value'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'DETAILER_HOOK'() : DETAILER_HOOK { return [this.$uid.toString(), 0]  as unknown as DETAILER_HOOK; }

        /**
          * Constructor
		 * @param opts.target
		 * @param opts.mode default: true
		 * @param opts.min_value step: 1
		 * @param opts.max_value default: 67108864 step: 1}
        */
        constructor(opts:{
            'target': 'area(=w*h)'|'width'|'height'|'x1'|'y1'|'x2'|'y2'|'length_percent'| $dyn,'mode'?: BOOLEAN,'min_value'?: INT,'max_value'?: INT
        }){
            super(ctx);

            super.$$link("target", opts['target'])
super.$$link("mode", opts['mode']??tmp["SEGSRangeFilterDetailerHookProvider"].defaults['mode'])
super.$$link("min_value", opts['min_value']??tmp["SEGSRangeFilterDetailerHookProvider"].defaults['min_value'])
super.$$link("max_value", opts['max_value']??tmp["SEGSRangeFilterDetailerHookProvider"].defaults['max_value'])
}

        static defaults = {
    'mode':  true,
'min_value':  0,
'max_value':  67108864
}
        protected override $$type(){
            return "SEGSRangeFilterDetailerHookProvider"
        }
},

    /**
     * SEGSLabelFilterDetailerHookProvider from ImpactPack/Util
     * @desc 
    */
    "SEGSLabelFilterDetailerHookProvider" : class extends Node{
        //Setters
        //set 'segs'(value : SEGS)  { super.$$link(0, value) } 
//set 'preset'(value : 'all'|'hand'|'face'|'mouth'|'eyes'|'eyebrows'|'pupils'|'left_eyebrow'|'left_eye'|'left_pupil'|'right_eyebrow'|'right_eye'|'right_pupil'|'short_sleeved_shirt'|'long_sleeved_shirt'|'short_sleeved_outwear'|'long_sleeved_outwear'|'vest'|'sling'|'shorts'|'trousers'|'skirt'|'short_sleeved_dress'|'long_sleeved_dress'|'vest_dress'|'sling_dress'|'person'|'bicycle'|'car'|'motorcycle'|'airplane'|'bus'|'train'|'truck'|'boat'|'traffic light'|'fire hydrant'|'stop sign'|'parking meter'|'bench'|'bird'|'cat'|'dog'|'horse'|'sheep'|'cow'|'elephant'|'bear'|'zebra'|'giraffe'|'backpack'|'umbrella'|'handbag'|'tie'|'suitcase'|'frisbee'|'skis'|'snowboard'|'sports ball'|'kite'|'baseball bat'|'baseball glove'|'skateboard'|'surfboard'|'tennis racket'|'bottle'|'wine glass'|'cup'|'fork'|'knife'|'spoon'|'bowl'|'banana'|'apple'|'sandwich'|'orange'|'broccoli'|'carrot'|'hot dog'|'pizza'|'donut'|'cake'|'chair'|'couch'|'potted plant'|'bed'|'dining table'|'toilet'|'tv'|'laptop'|'mouse'|'remote'|'keyboard'|'cell phone'|'microwave'|'oven'|'toaster'|'sink'|'refrigerator'|'book'|'clock'|'vase'|'scissors'|'teddy bear'|'hair drier'|'toothbrush'| $dyn)  { super.$$link(1, value) } 
//set 'labels'(value : STRING)  { super.$$link(2, value) } 

        //Getters
        get 'DETAILER_HOOK'() : DETAILER_HOOK { return [this.$uid.toString(), 0]  as unknown as DETAILER_HOOK; }

        /**
          * Constructor
		 * @param opts.segs
		 * @param opts.preset
		 * @param opts.labels}
        */
        constructor(opts:{
            'segs': SEGS,'preset': 'all'|'hand'|'face'|'mouth'|'eyes'|'eyebrows'|'pupils'|'left_eyebrow'|'left_eye'|'left_pupil'|'right_eyebrow'|'right_eye'|'right_pupil'|'short_sleeved_shirt'|'long_sleeved_shirt'|'short_sleeved_outwear'|'long_sleeved_outwear'|'vest'|'sling'|'shorts'|'trousers'|'skirt'|'short_sleeved_dress'|'long_sleeved_dress'|'vest_dress'|'sling_dress'|'person'|'bicycle'|'car'|'motorcycle'|'airplane'|'bus'|'train'|'truck'|'boat'|'traffic light'|'fire hydrant'|'stop sign'|'parking meter'|'bench'|'bird'|'cat'|'dog'|'horse'|'sheep'|'cow'|'elephant'|'bear'|'zebra'|'giraffe'|'backpack'|'umbrella'|'handbag'|'tie'|'suitcase'|'frisbee'|'skis'|'snowboard'|'sports ball'|'kite'|'baseball bat'|'baseball glove'|'skateboard'|'surfboard'|'tennis racket'|'bottle'|'wine glass'|'cup'|'fork'|'knife'|'spoon'|'bowl'|'banana'|'apple'|'sandwich'|'orange'|'broccoli'|'carrot'|'hot dog'|'pizza'|'donut'|'cake'|'chair'|'couch'|'potted plant'|'bed'|'dining table'|'toilet'|'tv'|'laptop'|'mouse'|'remote'|'keyboard'|'cell phone'|'microwave'|'oven'|'toaster'|'sink'|'refrigerator'|'book'|'clock'|'vase'|'scissors'|'teddy bear'|'hair drier'|'toothbrush'| $dyn,'labels': STRING
        }){
            super(ctx);

            super.$$link("segs", opts['segs'])
super.$$link("preset", opts['preset'])
super.$$link("labels", opts['labels'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "SEGSLabelFilterDetailerHookProvider"
        }
},

    /**
     * VariationNoiseDetailerHookProvider from ImpactPack/Detailer
     * @desc 
    */
    "VariationNoiseDetailerHookProvider" : class extends Node{
        //Setters
        //set 'seed'(value : INT)  { super.$$link(0, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'DETAILER_HOOK'() : DETAILER_HOOK { return [this.$uid.toString(), 0]  as unknown as DETAILER_HOOK; }

        /**
          * Constructor
		 * @param opts.seed
		 * @param opts.strength step: 0.01}
        */
        constructor(opts:{
            'seed'?: INT,'strength'?: FLOAT
        }){
            super(ctx);

            super.$$link("seed", opts['seed']??tmp["VariationNoiseDetailerHookProvider"].defaults['seed'])
super.$$link("strength", opts['strength']??tmp["VariationNoiseDetailerHookProvider"].defaults['strength'])
}

        static defaults = {
    'seed':  0,
'strength':  0
}
        protected override $$type(){
            return "VariationNoiseDetailerHookProvider"
        }
},

    /**
     * Pixelwise(MASK & MASK) from ImpactPack/Operation
     * @desc 
    */
    "BitwiseAndMask" : class extends Node{
        //Setters
        //set 'mask1'(value : MASK)  { super.$$link(0, value) } 
//set 'mask2'(value : MASK)  { super.$$link(1, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.mask1
		 * @param opts.mask2}
        */
        constructor(opts:{
            'mask1': MASK,'mask2': MASK
        }){
            super(ctx);

            super.$$link("mask1", opts['mask1'])
super.$$link("mask2", opts['mask2'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "BitwiseAndMask"
        }
},

    /**
     * Pixelwise(MASK - MASK) from ImpactPack/Operation
     * @desc 
    */
    "SubtractMask" : class extends Node{
        //Setters
        //set 'mask1'(value : MASK)  { super.$$link(0, value) } 
//set 'mask2'(value : MASK)  { super.$$link(1, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.mask1
		 * @param opts.mask2}
        */
        constructor(opts:{
            'mask1': MASK,'mask2': MASK
        }){
            super(ctx);

            super.$$link("mask1", opts['mask1'])
super.$$link("mask2", opts['mask2'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "SubtractMask"
        }
},

    /**
     * Pixelwise(MASK + MASK) from ImpactPack/Operation
     * @desc 
    */
    "AddMask" : class extends Node{
        //Setters
        //set 'mask1'(value : MASK)  { super.$$link(0, value) } 
//set 'mask2'(value : MASK)  { super.$$link(1, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.mask1
		 * @param opts.mask2}
        */
        constructor(opts:{
            'mask1': MASK,'mask2': MASK
        }){
            super(ctx);

            super.$$link("mask1", opts['mask1'])
super.$$link("mask2", opts['mask2'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "AddMask"
        }
},

    /**
     * Pixelwise(SEGS & MASK) from ImpactPack/Operation
     * @desc 
    */
    "ImpactSegsAndMask" : class extends Node{
        //Setters
        //set 'segs'(value : SEGS)  { super.$$link(0, value) } 
//set 'mask'(value : MASK)  { super.$$link(1, value) } 

        //Getters
        get 'SEGS'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }

        /**
          * Constructor
		 * @param opts.segs
		 * @param opts.mask}
        */
        constructor(opts:{
            'segs': SEGS,'mask': MASK
        }){
            super(ctx);

            super.$$link("segs", opts['segs'])
super.$$link("mask", opts['mask'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactSegsAndMask"
        }
},

    /**
     * Pixelwise(SEGS & MASKS ForEach) from ImpactPack/Operation
     * @desc 
    */
    "ImpactSegsAndMaskForEach" : class extends Node{
        //Setters
        //set 'segs'(value : SEGS)  { super.$$link(0, value) } 
//set 'masks'(value : MASK)  { super.$$link(1, value) } 

        //Getters
        get 'SEGS'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }

        /**
          * Constructor
		 * @param opts.segs
		 * @param opts.masks}
        */
        constructor(opts:{
            'segs': SEGS,'masks': MASK
        }){
            super(ctx);

            super.$$link("segs", opts['segs'])
super.$$link("masks", opts['masks'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactSegsAndMaskForEach"
        }
},

    /**
     * EmptySegs from ImpactPack/Util
     * @desc 
    */
    "EmptySegs" : class extends Node{
        //Setters
        

        //Getters
        get 'SEGS'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }

        /**
          * Constructor
}
        */
        constructor(opts:{
            
        }){
            super(ctx);

            
}

        static defaults = {
    
}
        protected override $$type(){
            return "EmptySegs"
        }
},

    /**
     * MediaPipe FaceMesh to SEGS from ImpactPack/Operation
     * @desc 
    */
    "MediaPipeFaceMeshToSEGS" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'crop_factor'(value : FLOAT)  { super.$$link(1, value) } 
//set 'bbox_fill'(value : BOOLEAN)  { super.$$link(2, value) } 
//set 'crop_min_size'(value : INT)  { super.$$link(3, value) } 
//set 'drop_size'(value : INT)  { super.$$link(4, value) } 
//set 'dilation'(value : INT)  { super.$$link(5, value) } 
//set 'face'(value : BOOLEAN)  { super.$$link(6, value) } 
//set 'mouth'(value : BOOLEAN)  { super.$$link(7, value) } 
//set 'left_eyebrow'(value : BOOLEAN)  { super.$$link(8, value) } 
//set 'left_eye'(value : BOOLEAN)  { super.$$link(9, value) } 
//set 'left_pupil'(value : BOOLEAN)  { super.$$link(10, value) } 
//set 'right_eyebrow'(value : BOOLEAN)  { super.$$link(11, value) } 
//set 'right_eye'(value : BOOLEAN)  { super.$$link(12, value) } 
//set 'right_pupil'(value : BOOLEAN)  { super.$$link(13, value) } 

        //Getters
        get 'SEGS'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.crop_factor default: 3 max: 100 min: 1 step: 0.1
		 * @param opts.bbox_fill
		 * @param opts.crop_min_size default: 50 max: 16384 min: 10 step: 1
		 * @param opts.drop_size default: 1 max: 16384 min: 1 step: 1
		 * @param opts.dilation max: 512 min: -512 step: 1
		 * @param opts.face default: true
		 * @param opts.mouth
		 * @param opts.left_eyebrow
		 * @param opts.left_eye
		 * @param opts.left_pupil
		 * @param opts.right_eyebrow
		 * @param opts.right_eye
		 * @param opts.right_pupil}
        */
        constructor(opts:{
            'image': IMAGE,'crop_factor'?: FLOAT,'bbox_fill'?: BOOLEAN,'crop_min_size'?: INT,'drop_size'?: INT,'dilation'?: INT,'face'?: BOOLEAN,'mouth'?: BOOLEAN,'left_eyebrow'?: BOOLEAN,'left_eye'?: BOOLEAN,'left_pupil'?: BOOLEAN,'right_eyebrow'?: BOOLEAN,'right_eye'?: BOOLEAN,'right_pupil'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("crop_factor", opts['crop_factor']??tmp["MediaPipeFaceMeshToSEGS"].defaults['crop_factor'])
super.$$link("bbox_fill", opts['bbox_fill']??tmp["MediaPipeFaceMeshToSEGS"].defaults['bbox_fill'])
super.$$link("crop_min_size", opts['crop_min_size']??tmp["MediaPipeFaceMeshToSEGS"].defaults['crop_min_size'])
super.$$link("drop_size", opts['drop_size']??tmp["MediaPipeFaceMeshToSEGS"].defaults['drop_size'])
super.$$link("dilation", opts['dilation']??tmp["MediaPipeFaceMeshToSEGS"].defaults['dilation'])
super.$$link("face", opts['face']??tmp["MediaPipeFaceMeshToSEGS"].defaults['face'])
super.$$link("mouth", opts['mouth']??tmp["MediaPipeFaceMeshToSEGS"].defaults['mouth'])
super.$$link("left_eyebrow", opts['left_eyebrow']??tmp["MediaPipeFaceMeshToSEGS"].defaults['left_eyebrow'])
super.$$link("left_eye", opts['left_eye']??tmp["MediaPipeFaceMeshToSEGS"].defaults['left_eye'])
super.$$link("left_pupil", opts['left_pupil']??tmp["MediaPipeFaceMeshToSEGS"].defaults['left_pupil'])
super.$$link("right_eyebrow", opts['right_eyebrow']??tmp["MediaPipeFaceMeshToSEGS"].defaults['right_eyebrow'])
super.$$link("right_eye", opts['right_eye']??tmp["MediaPipeFaceMeshToSEGS"].defaults['right_eye'])
super.$$link("right_pupil", opts['right_pupil']??tmp["MediaPipeFaceMeshToSEGS"].defaults['right_pupil'])
}

        static defaults = {
    'crop_factor':  3,
'bbox_fill':  false,
'crop_min_size':  50,
'drop_size':  1,
'dilation':  0,
'face':  true,
'mouth':  false,
'left_eyebrow':  false,
'left_eye':  false,
'left_pupil':  false,
'right_eyebrow':  false,
'right_eye':  false,
'right_pupil':  false
}
        protected override $$type(){
            return "MediaPipeFaceMeshToSEGS"
        }
},

    /**
     * MASK to SEGS from ImpactPack/Operation
     * @desc 
    */
    "MaskToSEGS" : class extends Node{
        //Setters
        //set 'mask'(value : MASK)  { super.$$link(0, value) } 
//set 'combined'(value : BOOLEAN)  { super.$$link(1, value) } 
//set 'crop_factor'(value : FLOAT)  { super.$$link(2, value) } 
//set 'bbox_fill'(value : BOOLEAN)  { super.$$link(3, value) } 
//set 'drop_size'(value : INT)  { super.$$link(4, value) } 
//set 'contour_fill'(value : BOOLEAN)  { super.$$link(5, value) } 

        //Getters
        get 'SEGS'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }

        /**
          * Constructor
		 * @param opts.mask
		 * @param opts.combined
		 * @param opts.crop_factor default: 3 max: 100 min: 1 step: 0.1
		 * @param opts.bbox_fill
		 * @param opts.drop_size default: 10 max: 16384 min: 1 step: 1
		 * @param opts.contour_fill}
        */
        constructor(opts:{
            'mask': MASK,'combined'?: BOOLEAN,'crop_factor'?: FLOAT,'bbox_fill'?: BOOLEAN,'drop_size'?: INT,'contour_fill'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("mask", opts['mask'])
super.$$link("combined", opts['combined']??tmp["MaskToSEGS"].defaults['combined'])
super.$$link("crop_factor", opts['crop_factor']??tmp["MaskToSEGS"].defaults['crop_factor'])
super.$$link("bbox_fill", opts['bbox_fill']??tmp["MaskToSEGS"].defaults['bbox_fill'])
super.$$link("drop_size", opts['drop_size']??tmp["MaskToSEGS"].defaults['drop_size'])
super.$$link("contour_fill", opts['contour_fill']??tmp["MaskToSEGS"].defaults['contour_fill'])
}

        static defaults = {
    'combined':  false,
'crop_factor':  3,
'bbox_fill':  false,
'drop_size':  10,
'contour_fill':  false
}
        protected override $$type(){
            return "MaskToSEGS"
        }
},

    /**
     * MASK to SEGS for AnimateDiff from ImpactPack/Operation
     * @desc 
    */
    "MaskToSEGS_for_AnimateDiff" : class extends Node{
        //Setters
        //set 'mask'(value : MASK)  { super.$$link(0, value) } 
//set 'combined'(value : BOOLEAN)  { super.$$link(1, value) } 
//set 'crop_factor'(value : FLOAT)  { super.$$link(2, value) } 
//set 'bbox_fill'(value : BOOLEAN)  { super.$$link(3, value) } 
//set 'drop_size'(value : INT)  { super.$$link(4, value) } 
//set 'contour_fill'(value : BOOLEAN)  { super.$$link(5, value) } 

        //Getters
        get 'SEGS'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }

        /**
          * Constructor
		 * @param opts.mask
		 * @param opts.combined
		 * @param opts.crop_factor default: 3 max: 100 min: 1 step: 0.1
		 * @param opts.bbox_fill
		 * @param opts.drop_size default: 10 max: 16384 min: 1 step: 1
		 * @param opts.contour_fill}
        */
        constructor(opts:{
            'mask': MASK,'combined'?: BOOLEAN,'crop_factor'?: FLOAT,'bbox_fill'?: BOOLEAN,'drop_size'?: INT,'contour_fill'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("mask", opts['mask'])
super.$$link("combined", opts['combined']??tmp["MaskToSEGS_for_AnimateDiff"].defaults['combined'])
super.$$link("crop_factor", opts['crop_factor']??tmp["MaskToSEGS_for_AnimateDiff"].defaults['crop_factor'])
super.$$link("bbox_fill", opts['bbox_fill']??tmp["MaskToSEGS_for_AnimateDiff"].defaults['bbox_fill'])
super.$$link("drop_size", opts['drop_size']??tmp["MaskToSEGS_for_AnimateDiff"].defaults['drop_size'])
super.$$link("contour_fill", opts['contour_fill']??tmp["MaskToSEGS_for_AnimateDiff"].defaults['contour_fill'])
}

        static defaults = {
    'combined':  false,
'crop_factor':  3,
'bbox_fill':  false,
'drop_size':  10,
'contour_fill':  false
}
        protected override $$type(){
            return "MaskToSEGS_for_AnimateDiff"
        }
},

    /**
     * ToBinaryMask from ImpactPack/Operation
     * @desc 
    */
    "ToBinaryMask" : class extends Node{
        //Setters
        //set 'mask'(value : MASK)  { super.$$link(0, value) } 
//set 'threshold'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.mask
		 * @param opts.threshold default: 20 max: 255 min: 1}
        */
        constructor(opts:{
            'mask': MASK,'threshold'?: INT
        }){
            super(ctx);

            super.$$link("mask", opts['mask'])
super.$$link("threshold", opts['threshold']??tmp["ToBinaryMask"].defaults['threshold'])
}

        static defaults = {
    'threshold':  20
}
        protected override $$type(){
            return "ToBinaryMask"
        }
},

    /**
     * Masks to Mask List from ImpactPack/Operation
     * @desc 
    */
    "MasksToMaskList" : class extends Node{
        //Setters
        //set 'masks'(value : MASK)  { super.$$link(0, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.masks}
        */
        constructor(opts:{
            'masks': MASK
        }){
            super(ctx);

            super.$$link("masks", opts['masks'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "MasksToMaskList"
        }
},

    /**
     * Mask List to Masks from ImpactPack/Operation
     * @desc 
    */
    "MaskListToMaskBatch" : class extends Node{
        //Setters
        //set 'mask'(value : MASK)  { super.$$link(0, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.mask}
        */
        constructor(opts:{
            'mask': MASK
        }){
            super(ctx);

            super.$$link("mask", opts['mask'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "MaskListToMaskBatch"
        }
},

    /**
     * Image List to Image Batch from ImpactPack/Operation
     * @desc 
    */
    "ImageListToImageBatch" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.images}
        */
        constructor(opts:{
            'images': IMAGE
        }){
            super(ctx);

            super.$$link("images", opts['images'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImageListToImageBatch"
        }
},

    /**
     * Set Default Image for SEGS from ImpactPack/Util
     * @desc 
    */
    "SetDefaultImageForSEGS" : class extends Node{
        //Setters
        //set 'segs'(value : SEGS)  { super.$$link(0, value) } 
//set 'image'(value : IMAGE)  { super.$$link(1, value) } 
//set 'override'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'SEGS'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }

        /**
          * Constructor
		 * @param opts.segs
		 * @param opts.image
		 * @param opts.override default: true}
        */
        constructor(opts:{
            'segs': SEGS,'image': IMAGE,'override'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("segs", opts['segs'])
super.$$link("image", opts['image'])
super.$$link("override", opts['override']??tmp["SetDefaultImageForSEGS"].defaults['override'])
}

        static defaults = {
    'override':  true
}
        protected override $$type(){
            return "SetDefaultImageForSEGS"
        }
},

    /**
     * Remove Image from SEGS from ImpactPack/Util
     * @desc 
    */
    "RemoveImageFromSEGS" : class extends Node{
        //Setters
        //set 'segs'(value : SEGS)  { super.$$link(0, value) } 

        //Getters
        get 'SEGS'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }

        /**
          * Constructor
		 * @param opts.segs}
        */
        constructor(opts:{
            'segs': SEGS
        }){
            super(ctx);

            super.$$link("segs", opts['segs'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "RemoveImageFromSEGS"
        }
},

    /**
     * BBOX Detector (SEGS) from ImpactPack/Detector
     * @desc 
    */
    "BboxDetectorSEGS" : class extends Node{
        //Setters
        //set 'bbox_detector'(value : BBOX_DETECTOR)  { super.$$link(0, value) } 
//set 'image'(value : IMAGE)  { super.$$link(1, value) } 
//set 'threshold'(value : FLOAT)  { super.$$link(2, value) } 
//set 'dilation'(value : INT)  { super.$$link(3, value) } 
//set 'crop_factor'(value : FLOAT)  { super.$$link(4, value) } 
//set 'drop_size'(value : INT)  { super.$$link(5, value) } 
//set 'labels'(value : STRING)  { super.$$link(6, value) } 
//set 'detailer_hook'(value : DETAILER_HOOK)  { super.$$link(7, value) } 

        //Getters
        get 'SEGS'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }

        /**
          * Constructor
		 * @param opts.bbox_detector
		 * @param opts.image
		 * @param opts.threshold default: 0.5 step: 0.01
		 * @param opts.dilation default: 10 max: 512 min: -512 step: 1
		 * @param opts.crop_factor default: 3 max: 100 min: 1 step: 0.1
		 * @param opts.drop_size default: 10 max: 16384 min: 1 step: 1
		 * @param opts.labels default: "all"
		 * @param opts.detailer_hook}
        */
        constructor(opts:{
            'bbox_detector': BBOX_DETECTOR,'image': IMAGE,'threshold'?: FLOAT,'dilation'?: INT,'crop_factor'?: FLOAT,'drop_size'?: INT,'labels'?: STRING,'detailer_hook'?: DETAILER_HOOK
        }){
            super(ctx);

            super.$$link("bbox_detector", opts['bbox_detector'])
super.$$link("image", opts['image'])
super.$$link("threshold", opts['threshold']??tmp["BboxDetectorSEGS"].defaults['threshold'])
super.$$link("dilation", opts['dilation']??tmp["BboxDetectorSEGS"].defaults['dilation'])
super.$$link("crop_factor", opts['crop_factor']??tmp["BboxDetectorSEGS"].defaults['crop_factor'])
super.$$link("drop_size", opts['drop_size']??tmp["BboxDetectorSEGS"].defaults['drop_size'])
super.$$link("labels", opts['labels']??tmp["BboxDetectorSEGS"].defaults['labels'])
super.$$link("detailer_hook", opts['detailer_hook'])
}

        static defaults = {
    'threshold':  0.5,
'dilation':  10,
'crop_factor':  3,
'drop_size':  10,
'labels':  "all"
}
        protected override $$type(){
            return "BboxDetectorSEGS"
        }
},

    /**
     * SEGM Detector (SEGS) from ImpactPack/Detector
     * @desc 
    */
    "SegmDetectorSEGS" : class extends Node{
        //Setters
        //set 'segm_detector'(value : SEGM_DETECTOR)  { super.$$link(0, value) } 
//set 'image'(value : IMAGE)  { super.$$link(1, value) } 
//set 'threshold'(value : FLOAT)  { super.$$link(2, value) } 
//set 'dilation'(value : INT)  { super.$$link(3, value) } 
//set 'crop_factor'(value : FLOAT)  { super.$$link(4, value) } 
//set 'drop_size'(value : INT)  { super.$$link(5, value) } 
//set 'labels'(value : STRING)  { super.$$link(6, value) } 
//set 'detailer_hook'(value : DETAILER_HOOK)  { super.$$link(7, value) } 

        //Getters
        get 'SEGS'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }

        /**
          * Constructor
		 * @param opts.segm_detector
		 * @param opts.image
		 * @param opts.threshold default: 0.5 step: 0.01
		 * @param opts.dilation default: 10 max: 512 min: -512 step: 1
		 * @param opts.crop_factor default: 3 max: 100 min: 1 step: 0.1
		 * @param opts.drop_size default: 10 max: 16384 min: 1 step: 1
		 * @param opts.labels default: "all"
		 * @param opts.detailer_hook}
        */
        constructor(opts:{
            'segm_detector': SEGM_DETECTOR,'image': IMAGE,'threshold'?: FLOAT,'dilation'?: INT,'crop_factor'?: FLOAT,'drop_size'?: INT,'labels'?: STRING,'detailer_hook'?: DETAILER_HOOK
        }){
            super(ctx);

            super.$$link("segm_detector", opts['segm_detector'])
super.$$link("image", opts['image'])
super.$$link("threshold", opts['threshold']??tmp["SegmDetectorSEGS"].defaults['threshold'])
super.$$link("dilation", opts['dilation']??tmp["SegmDetectorSEGS"].defaults['dilation'])
super.$$link("crop_factor", opts['crop_factor']??tmp["SegmDetectorSEGS"].defaults['crop_factor'])
super.$$link("drop_size", opts['drop_size']??tmp["SegmDetectorSEGS"].defaults['drop_size'])
super.$$link("labels", opts['labels']??tmp["SegmDetectorSEGS"].defaults['labels'])
super.$$link("detailer_hook", opts['detailer_hook'])
}

        static defaults = {
    'threshold':  0.5,
'dilation':  10,
'crop_factor':  3,
'drop_size':  10,
'labels':  "all"
}
        protected override $$type(){
            return "SegmDetectorSEGS"
        }
},

    /**
     * ONNX Detector (SEGS/legacy) - use BBOXDetector from ImpactPack/Detector
     * @desc 
    */
    "ONNXDetectorSEGS" : class extends Node{
        //Setters
        //set 'bbox_detector'(value : BBOX_DETECTOR)  { super.$$link(0, value) } 
//set 'image'(value : IMAGE)  { super.$$link(1, value) } 
//set 'threshold'(value : FLOAT)  { super.$$link(2, value) } 
//set 'dilation'(value : INT)  { super.$$link(3, value) } 
//set 'crop_factor'(value : FLOAT)  { super.$$link(4, value) } 
//set 'drop_size'(value : INT)  { super.$$link(5, value) } 
//set 'labels'(value : STRING)  { super.$$link(6, value) } 
//set 'detailer_hook'(value : DETAILER_HOOK)  { super.$$link(7, value) } 

        //Getters
        get 'SEGS'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }

        /**
          * Constructor
		 * @param opts.bbox_detector
		 * @param opts.image
		 * @param opts.threshold default: 0.5 step: 0.01
		 * @param opts.dilation default: 10 max: 512 min: -512 step: 1
		 * @param opts.crop_factor default: 3 max: 100 min: 1 step: 0.1
		 * @param opts.drop_size default: 10 max: 16384 min: 1 step: 1
		 * @param opts.labels default: "all"
		 * @param opts.detailer_hook}
        */
        constructor(opts:{
            'bbox_detector': BBOX_DETECTOR,'image': IMAGE,'threshold'?: FLOAT,'dilation'?: INT,'crop_factor'?: FLOAT,'drop_size'?: INT,'labels'?: STRING,'detailer_hook'?: DETAILER_HOOK
        }){
            super(ctx);

            super.$$link("bbox_detector", opts['bbox_detector'])
super.$$link("image", opts['image'])
super.$$link("threshold", opts['threshold']??tmp["ONNXDetectorSEGS"].defaults['threshold'])
super.$$link("dilation", opts['dilation']??tmp["ONNXDetectorSEGS"].defaults['dilation'])
super.$$link("crop_factor", opts['crop_factor']??tmp["ONNXDetectorSEGS"].defaults['crop_factor'])
super.$$link("drop_size", opts['drop_size']??tmp["ONNXDetectorSEGS"].defaults['drop_size'])
super.$$link("labels", opts['labels']??tmp["ONNXDetectorSEGS"].defaults['labels'])
super.$$link("detailer_hook", opts['detailer_hook'])
}

        static defaults = {
    'threshold':  0.5,
'dilation':  10,
'crop_factor':  3,
'drop_size':  10,
'labels':  "all"
}
        protected override $$type(){
            return "ONNXDetectorSEGS"
        }
},

    /**
     * Simple Detector for AnimateDiff (SEGS) from ImpactPack/Detector
     * @desc 
    */
    "ImpactSimpleDetectorSEGS_for_AD" : class extends Node{
        //Setters
        //set 'bbox_detector'(value : BBOX_DETECTOR)  { super.$$link(0, value) } 
//set 'image_frames'(value : IMAGE)  { super.$$link(1, value) } 
//set 'bbox_threshold'(value : FLOAT)  { super.$$link(2, value) } 
//set 'bbox_dilation'(value : INT)  { super.$$link(3, value) } 
//set 'crop_factor'(value : FLOAT)  { super.$$link(4, value) } 
//set 'drop_size'(value : INT)  { super.$$link(5, value) } 
//set 'sub_threshold'(value : FLOAT)  { super.$$link(6, value) } 
//set 'sub_dilation'(value : INT)  { super.$$link(7, value) } 
//set 'sub_bbox_expansion'(value : INT)  { super.$$link(8, value) } 
//set 'sam_mask_hint_threshold'(value : FLOAT)  { super.$$link(9, value) } 
//set 'masking_mode'(value : 'Pivot SEGS'|'Combine neighboring frames'|'Don\'t combine'| $dyn)  { super.$$link(10, value) } 
//set 'segs_pivot'(value : 'Combined mask'|'1st frame mask'| $dyn)  { super.$$link(11, value) } 
//set 'sam_model_opt'(value : SAM_MODEL)  { super.$$link(12, value) } 
//set 'segm_detector_opt'(value : SEGM_DETECTOR)  { super.$$link(13, value) } 

        //Getters
        get 'SEGS'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }

        /**
          * Constructor
		 * @param opts.bbox_detector
		 * @param opts.image_frames
		 * @param opts.bbox_threshold default: 0.5 step: 0.01
		 * @param opts.bbox_dilation max: 255 min: -255 step: 1
		 * @param opts.crop_factor default: 3 max: 100 min: 1 step: 0.1
		 * @param opts.drop_size default: 10 max: 16384 min: 1 step: 1
		 * @param opts.sub_threshold default: 0.5 step: 0.01
		 * @param opts.sub_dilation max: 255 min: -255 step: 1
		 * @param opts.sub_bbox_expansion step: 1
		 * @param opts.sam_mask_hint_threshold default: 0.7 step: 0.01
		 * @param opts.masking_mode
		 * @param opts.segs_pivot
		 * @param opts.sam_model_opt
		 * @param opts.segm_detector_opt}
        */
        constructor(opts:{
            'bbox_detector': BBOX_DETECTOR,'image_frames': IMAGE,'bbox_threshold'?: FLOAT,'bbox_dilation'?: INT,'crop_factor'?: FLOAT,'drop_size'?: INT,'sub_threshold'?: FLOAT,'sub_dilation'?: INT,'sub_bbox_expansion'?: INT,'sam_mask_hint_threshold'?: FLOAT,'masking_mode'?: 'Pivot SEGS'|'Combine neighboring frames'|'Don\'t combine'| $dyn,'segs_pivot'?: 'Combined mask'|'1st frame mask'| $dyn,'sam_model_opt'?: SAM_MODEL,'segm_detector_opt'?: SEGM_DETECTOR
        }){
            super(ctx);

            super.$$link("bbox_detector", opts['bbox_detector'])
super.$$link("image_frames", opts['image_frames'])
super.$$link("bbox_threshold", opts['bbox_threshold']??tmp["ImpactSimpleDetectorSEGS_for_AD"].defaults['bbox_threshold'])
super.$$link("bbox_dilation", opts['bbox_dilation']??tmp["ImpactSimpleDetectorSEGS_for_AD"].defaults['bbox_dilation'])
super.$$link("crop_factor", opts['crop_factor']??tmp["ImpactSimpleDetectorSEGS_for_AD"].defaults['crop_factor'])
super.$$link("drop_size", opts['drop_size']??tmp["ImpactSimpleDetectorSEGS_for_AD"].defaults['drop_size'])
super.$$link("sub_threshold", opts['sub_threshold']??tmp["ImpactSimpleDetectorSEGS_for_AD"].defaults['sub_threshold'])
super.$$link("sub_dilation", opts['sub_dilation']??tmp["ImpactSimpleDetectorSEGS_for_AD"].defaults['sub_dilation'])
super.$$link("sub_bbox_expansion", opts['sub_bbox_expansion']??tmp["ImpactSimpleDetectorSEGS_for_AD"].defaults['sub_bbox_expansion'])
super.$$link("sam_mask_hint_threshold", opts['sam_mask_hint_threshold']??tmp["ImpactSimpleDetectorSEGS_for_AD"].defaults['sam_mask_hint_threshold'])
super.$$link("masking_mode", opts['masking_mode'])
super.$$link("segs_pivot", opts['segs_pivot'])
super.$$link("sam_model_opt", opts['sam_model_opt'])
super.$$link("segm_detector_opt", opts['segm_detector_opt'])
}

        static defaults = {
    'bbox_threshold':  0.5,
'bbox_dilation':  0,
'crop_factor':  3,
'drop_size':  10,
'sub_threshold':  0.5,
'sub_dilation':  0,
'sub_bbox_expansion':  0,
'sam_mask_hint_threshold':  0.7
}
        protected override $$type(){
            return "ImpactSimpleDetectorSEGS_for_AD"
        }
},

    /**
     * Simple Detector (SEGS) from ImpactPack/Detector
     * @desc 
    */
    "ImpactSimpleDetectorSEGS" : class extends Node{
        //Setters
        //set 'bbox_detector'(value : BBOX_DETECTOR)  { super.$$link(0, value) } 
//set 'image'(value : IMAGE)  { super.$$link(1, value) } 
//set 'bbox_threshold'(value : FLOAT)  { super.$$link(2, value) } 
//set 'bbox_dilation'(value : INT)  { super.$$link(3, value) } 
//set 'crop_factor'(value : FLOAT)  { super.$$link(4, value) } 
//set 'drop_size'(value : INT)  { super.$$link(5, value) } 
//set 'sub_threshold'(value : FLOAT)  { super.$$link(6, value) } 
//set 'sub_dilation'(value : INT)  { super.$$link(7, value) } 
//set 'sub_bbox_expansion'(value : INT)  { super.$$link(8, value) } 
//set 'sam_mask_hint_threshold'(value : FLOAT)  { super.$$link(9, value) } 
//set 'post_dilation'(value : INT)  { super.$$link(10, value) } 
//set 'sam_model_opt'(value : SAM_MODEL)  { super.$$link(11, value) } 
//set 'segm_detector_opt'(value : SEGM_DETECTOR)  { super.$$link(12, value) } 

        //Getters
        get 'SEGS'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }

        /**
          * Constructor
		 * @param opts.bbox_detector
		 * @param opts.image
		 * @param opts.bbox_threshold default: 0.5 step: 0.01
		 * @param opts.bbox_dilation max: 512 min: -512 step: 1
		 * @param opts.crop_factor default: 3 max: 100 min: 1 step: 0.1
		 * @param opts.drop_size default: 10 max: 16384 min: 1 step: 1
		 * @param opts.sub_threshold default: 0.5 step: 0.01
		 * @param opts.sub_dilation max: 512 min: -512 step: 1
		 * @param opts.sub_bbox_expansion step: 1
		 * @param opts.sam_mask_hint_threshold default: 0.7 step: 0.01
		 * @param opts.post_dilation max: 512 min: -512 step: 1
		 * @param opts.sam_model_opt
		 * @param opts.segm_detector_opt}
        */
        constructor(opts:{
            'bbox_detector': BBOX_DETECTOR,'image': IMAGE,'bbox_threshold'?: FLOAT,'bbox_dilation'?: INT,'crop_factor'?: FLOAT,'drop_size'?: INT,'sub_threshold'?: FLOAT,'sub_dilation'?: INT,'sub_bbox_expansion'?: INT,'sam_mask_hint_threshold'?: FLOAT,'post_dilation'?: INT,'sam_model_opt'?: SAM_MODEL,'segm_detector_opt'?: SEGM_DETECTOR
        }){
            super(ctx);

            super.$$link("bbox_detector", opts['bbox_detector'])
super.$$link("image", opts['image'])
super.$$link("bbox_threshold", opts['bbox_threshold']??tmp["ImpactSimpleDetectorSEGS"].defaults['bbox_threshold'])
super.$$link("bbox_dilation", opts['bbox_dilation']??tmp["ImpactSimpleDetectorSEGS"].defaults['bbox_dilation'])
super.$$link("crop_factor", opts['crop_factor']??tmp["ImpactSimpleDetectorSEGS"].defaults['crop_factor'])
super.$$link("drop_size", opts['drop_size']??tmp["ImpactSimpleDetectorSEGS"].defaults['drop_size'])
super.$$link("sub_threshold", opts['sub_threshold']??tmp["ImpactSimpleDetectorSEGS"].defaults['sub_threshold'])
super.$$link("sub_dilation", opts['sub_dilation']??tmp["ImpactSimpleDetectorSEGS"].defaults['sub_dilation'])
super.$$link("sub_bbox_expansion", opts['sub_bbox_expansion']??tmp["ImpactSimpleDetectorSEGS"].defaults['sub_bbox_expansion'])
super.$$link("sam_mask_hint_threshold", opts['sam_mask_hint_threshold']??tmp["ImpactSimpleDetectorSEGS"].defaults['sam_mask_hint_threshold'])
super.$$link("post_dilation", opts['post_dilation']??tmp["ImpactSimpleDetectorSEGS"].defaults['post_dilation'])
super.$$link("sam_model_opt", opts['sam_model_opt'])
super.$$link("segm_detector_opt", opts['segm_detector_opt'])
}

        static defaults = {
    'bbox_threshold':  0.5,
'bbox_dilation':  0,
'crop_factor':  3,
'drop_size':  10,
'sub_threshold':  0.5,
'sub_dilation':  0,
'sub_bbox_expansion':  0,
'sam_mask_hint_threshold':  0.7,
'post_dilation':  0
}
        protected override $$type(){
            return "ImpactSimpleDetectorSEGS"
        }
},

    /**
     * Simple Detector (SEGS/pipe) from ImpactPack/Detector
     * @desc 
    */
    "ImpactSimpleDetectorSEGSPipe" : class extends Node{
        //Setters
        //set 'detailer_pipe'(value : DETAILER_PIPE)  { super.$$link(0, value) } 
//set 'image'(value : IMAGE)  { super.$$link(1, value) } 
//set 'bbox_threshold'(value : FLOAT)  { super.$$link(2, value) } 
//set 'bbox_dilation'(value : INT)  { super.$$link(3, value) } 
//set 'crop_factor'(value : FLOAT)  { super.$$link(4, value) } 
//set 'drop_size'(value : INT)  { super.$$link(5, value) } 
//set 'sub_threshold'(value : FLOAT)  { super.$$link(6, value) } 
//set 'sub_dilation'(value : INT)  { super.$$link(7, value) } 
//set 'sub_bbox_expansion'(value : INT)  { super.$$link(8, value) } 
//set 'sam_mask_hint_threshold'(value : FLOAT)  { super.$$link(9, value) } 
//set 'post_dilation'(value : INT)  { super.$$link(10, value) } 

        //Getters
        get 'SEGS'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }

        /**
          * Constructor
		 * @param opts.detailer_pipe
		 * @param opts.image
		 * @param opts.bbox_threshold default: 0.5 step: 0.01
		 * @param opts.bbox_dilation max: 512 min: -512 step: 1
		 * @param opts.crop_factor default: 3 max: 100 min: 1 step: 0.1
		 * @param opts.drop_size default: 10 max: 16384 min: 1 step: 1
		 * @param opts.sub_threshold default: 0.5 step: 0.01
		 * @param opts.sub_dilation max: 512 min: -512 step: 1
		 * @param opts.sub_bbox_expansion step: 1
		 * @param opts.sam_mask_hint_threshold default: 0.7 step: 0.01
		 * @param opts.post_dilation max: 512 min: -512 step: 1}
        */
        constructor(opts:{
            'detailer_pipe': DETAILER_PIPE,'image': IMAGE,'bbox_threshold'?: FLOAT,'bbox_dilation'?: INT,'crop_factor'?: FLOAT,'drop_size'?: INT,'sub_threshold'?: FLOAT,'sub_dilation'?: INT,'sub_bbox_expansion'?: INT,'sam_mask_hint_threshold'?: FLOAT,'post_dilation'?: INT
        }){
            super(ctx);

            super.$$link("detailer_pipe", opts['detailer_pipe'])
super.$$link("image", opts['image'])
super.$$link("bbox_threshold", opts['bbox_threshold']??tmp["ImpactSimpleDetectorSEGSPipe"].defaults['bbox_threshold'])
super.$$link("bbox_dilation", opts['bbox_dilation']??tmp["ImpactSimpleDetectorSEGSPipe"].defaults['bbox_dilation'])
super.$$link("crop_factor", opts['crop_factor']??tmp["ImpactSimpleDetectorSEGSPipe"].defaults['crop_factor'])
super.$$link("drop_size", opts['drop_size']??tmp["ImpactSimpleDetectorSEGSPipe"].defaults['drop_size'])
super.$$link("sub_threshold", opts['sub_threshold']??tmp["ImpactSimpleDetectorSEGSPipe"].defaults['sub_threshold'])
super.$$link("sub_dilation", opts['sub_dilation']??tmp["ImpactSimpleDetectorSEGSPipe"].defaults['sub_dilation'])
super.$$link("sub_bbox_expansion", opts['sub_bbox_expansion']??tmp["ImpactSimpleDetectorSEGSPipe"].defaults['sub_bbox_expansion'])
super.$$link("sam_mask_hint_threshold", opts['sam_mask_hint_threshold']??tmp["ImpactSimpleDetectorSEGSPipe"].defaults['sam_mask_hint_threshold'])
super.$$link("post_dilation", opts['post_dilation']??tmp["ImpactSimpleDetectorSEGSPipe"].defaults['post_dilation'])
}

        static defaults = {
    'bbox_threshold':  0.5,
'bbox_dilation':  0,
'crop_factor':  3,
'drop_size':  10,
'sub_threshold':  0.5,
'sub_dilation':  0,
'sub_bbox_expansion':  0,
'sam_mask_hint_threshold':  0.7,
'post_dilation':  0
}
        protected override $$type(){
            return "ImpactSimpleDetectorSEGSPipe"
        }
},

    /**
     * ControlNetApply (SEGS) from ImpactPack/Util
     * @desc 
    */
    "ImpactControlNetApplySEGS" : class extends Node{
        //Setters
        //set 'segs'(value : SEGS)  { super.$$link(0, value) } 
//set 'control_net'(value : CONTROL_NET)  { super.$$link(1, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(2, value) } 
//set 'segs_preprocessor'(value : SEGS_PREPROCESSOR)  { super.$$link(3, value) } 
//set 'control_image'(value : IMAGE)  { super.$$link(4, value) } 

        //Getters
        get 'SEGS'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }

        /**
          * Constructor
		 * @param opts.segs
		 * @param opts.control_net
		 * @param opts.strength default: 1 step: 0.01
		 * @param opts.segs_preprocessor
		 * @param opts.control_image}
        */
        constructor(opts:{
            'segs': SEGS,'control_net': CONTROL_NET,'strength'?: FLOAT,'segs_preprocessor'?: SEGS_PREPROCESSOR,'control_image'?: IMAGE
        }){
            super(ctx);

            super.$$link("segs", opts['segs'])
super.$$link("control_net", opts['control_net'])
super.$$link("strength", opts['strength']??tmp["ImpactControlNetApplySEGS"].defaults['strength'])
super.$$link("segs_preprocessor", opts['segs_preprocessor'])
super.$$link("control_image", opts['control_image'])
}

        static defaults = {
    'strength':  1
}
        protected override $$type(){
            return "ImpactControlNetApplySEGS"
        }
},

    /**
     * ControlNetApplyAdvanced (SEGS) from ImpactPack/Util
     * @desc 
    */
    "ImpactControlNetApplyAdvancedSEGS" : class extends Node{
        //Setters
        //set 'segs'(value : SEGS)  { super.$$link(0, value) } 
//set 'control_net'(value : CONTROL_NET)  { super.$$link(1, value) } 
//set 'strength'(value : FLOAT)  { super.$$link(2, value) } 
//set 'start_percent'(value : FLOAT)  { super.$$link(3, value) } 
//set 'end_percent'(value : FLOAT)  { super.$$link(4, value) } 
//set 'segs_preprocessor'(value : SEGS_PREPROCESSOR)  { super.$$link(5, value) } 
//set 'control_image'(value : IMAGE)  { super.$$link(6, value) } 

        //Getters
        get 'SEGS'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }

        /**
          * Constructor
		 * @param opts.segs
		 * @param opts.control_net
		 * @param opts.strength default: 1 step: 0.01
		 * @param opts.start_percent step: 0.001
		 * @param opts.end_percent default: 1 step: 0.001
		 * @param opts.segs_preprocessor
		 * @param opts.control_image}
        */
        constructor(opts:{
            'segs': SEGS,'control_net': CONTROL_NET,'strength'?: FLOAT,'start_percent'?: FLOAT,'end_percent'?: FLOAT,'segs_preprocessor'?: SEGS_PREPROCESSOR,'control_image'?: IMAGE
        }){
            super(ctx);

            super.$$link("segs", opts['segs'])
super.$$link("control_net", opts['control_net'])
super.$$link("strength", opts['strength']??tmp["ImpactControlNetApplyAdvancedSEGS"].defaults['strength'])
super.$$link("start_percent", opts['start_percent']??tmp["ImpactControlNetApplyAdvancedSEGS"].defaults['start_percent'])
super.$$link("end_percent", opts['end_percent']??tmp["ImpactControlNetApplyAdvancedSEGS"].defaults['end_percent'])
super.$$link("segs_preprocessor", opts['segs_preprocessor'])
super.$$link("control_image", opts['control_image'])
}

        static defaults = {
    'strength':  1,
'start_percent':  0,
'end_percent':  1
}
        protected override $$type(){
            return "ImpactControlNetApplyAdvancedSEGS"
        }
},

    /**
     * ImpactControlNetClearSEGS from ImpactPack/Util
     * @desc 
    */
    "ImpactControlNetClearSEGS" : class extends Node{
        //Setters
        //set 'segs'(value : SEGS)  { super.$$link(0, value) } 

        //Getters
        get 'SEGS'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }

        /**
          * Constructor
		 * @param opts.segs}
        */
        constructor(opts:{
            'segs': SEGS
        }){
            super(ctx);

            super.$$link("segs", opts['segs'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactControlNetClearSEGS"
        }
},

    /**
     * IPAdapterApply (SEGS) from ImpactPack/Util
     * @desc 
    */
    "ImpactIPAdapterApplySEGS" : class extends Node{
        //Setters
        //set 'segs'(value : SEGS)  { super.$$link(0, value) } 
//set 'ipadapter_pipe'(value : IPADAPTER_PIPE)  { super.$$link(1, value) } 
//set 'weight'(value : FLOAT)  { super.$$link(2, value) } 
//set 'noise'(value : FLOAT)  { super.$$link(3, value) } 
//set 'weight_type'(value : 'original'|'linear'|'channel penalty'| $dyn)  { super.$$link(4, value) } 
//set 'start_at'(value : FLOAT)  { super.$$link(5, value) } 
//set 'end_at'(value : FLOAT)  { super.$$link(6, value) } 
//set 'unfold_batch'(value : BOOLEAN)  { super.$$link(7, value) } 
//set 'faceid_v2'(value : BOOLEAN)  { super.$$link(8, value) } 
//set 'weight_v2'(value : FLOAT)  { super.$$link(9, value) } 
//set 'context_crop_factor'(value : FLOAT)  { super.$$link(10, value) } 
//set 'reference_image'(value : IMAGE)  { super.$$link(11, value) } 
//set 'combine_embeds'(value : 'concat'|'add'|'subtract'|'average'|'norm average'| $dyn)  { super.$$link(12, value) } 
//set 'neg_image'(value : IMAGE)  { super.$$link(13, value) } 

        //Getters
        get 'SEGS'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }

        /**
          * Constructor
		 * @param opts.segs
		 * @param opts.ipadapter_pipe
		 * @param opts.weight default: 0.7 max: 3 min: -1 step: 0.05
		 * @param opts.noise default: 0.4 step: 0.01
		 * @param opts.weight_type default: "channel penalty"
		 * @param opts.start_at step: 0.001
		 * @param opts.end_at default: 0.9 step: 0.001
		 * @param opts.unfold_batch
		 * @param opts.faceid_v2
		 * @param opts.weight_v2 default: 1 max: 3 min: -1 step: 0.05
		 * @param opts.context_crop_factor default: 1.2 max: 100 min: 1 step: 0.1
		 * @param opts.reference_image
		 * @param opts.combine_embeds
		 * @param opts.neg_image}
        */
        constructor(opts:{
            'segs': SEGS,'ipadapter_pipe': IPADAPTER_PIPE,'weight'?: FLOAT,'noise'?: FLOAT,'weight_type'?: 'original'|'linear'|'channel penalty'| $dyn,'start_at'?: FLOAT,'end_at'?: FLOAT,'unfold_batch'?: BOOLEAN,'faceid_v2'?: BOOLEAN,'weight_v2'?: FLOAT,'context_crop_factor'?: FLOAT,'reference_image': IMAGE,'combine_embeds'?: 'concat'|'add'|'subtract'|'average'|'norm average'| $dyn,'neg_image'?: IMAGE
        }){
            super(ctx);

            super.$$link("segs", opts['segs'])
super.$$link("ipadapter_pipe", opts['ipadapter_pipe'])
super.$$link("weight", opts['weight']??tmp["ImpactIPAdapterApplySEGS"].defaults['weight'])
super.$$link("noise", opts['noise']??tmp["ImpactIPAdapterApplySEGS"].defaults['noise'])
super.$$link("weight_type", opts['weight_type']??tmp["ImpactIPAdapterApplySEGS"].defaults['weight_type'])
super.$$link("start_at", opts['start_at']??tmp["ImpactIPAdapterApplySEGS"].defaults['start_at'])
super.$$link("end_at", opts['end_at']??tmp["ImpactIPAdapterApplySEGS"].defaults['end_at'])
super.$$link("unfold_batch", opts['unfold_batch']??tmp["ImpactIPAdapterApplySEGS"].defaults['unfold_batch'])
super.$$link("faceid_v2", opts['faceid_v2']??tmp["ImpactIPAdapterApplySEGS"].defaults['faceid_v2'])
super.$$link("weight_v2", opts['weight_v2']??tmp["ImpactIPAdapterApplySEGS"].defaults['weight_v2'])
super.$$link("context_crop_factor", opts['context_crop_factor']??tmp["ImpactIPAdapterApplySEGS"].defaults['context_crop_factor'])
super.$$link("reference_image", opts['reference_image'])
super.$$link("combine_embeds", opts['combine_embeds'])
super.$$link("neg_image", opts['neg_image'])
}

        static defaults = {
    'weight':  0.7,
'noise':  0.4,
'weight_type':  "channel penalty",
'start_at':  0,
'end_at':  0.9,
'unfold_batch':  false,
'faceid_v2':  false,
'weight_v2':  1,
'context_crop_factor':  1.2
}
        protected override $$type(){
            return "ImpactIPAdapterApplySEGS"
        }
},

    /**
     * Decompose (SEGS) from ImpactPack/Util
     * @desc 
    */
    "ImpactDecomposeSEGS" : class extends Node{
        //Setters
        //set 'segs'(value : SEGS)  { super.$$link(0, value) } 

        //Getters
        get 'SEGS_HEADER'() : SEGS_HEADER { return [this.$uid.toString(), 0]  as unknown as SEGS_HEADER; }
get 'SEG_ELT'() : SEG_ELT { return [this.$uid.toString(), 1]  as unknown as SEG_ELT; }

        /**
          * Constructor
		 * @param opts.segs}
        */
        constructor(opts:{
            'segs': SEGS
        }){
            super(ctx);

            super.$$link("segs", opts['segs'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactDecomposeSEGS"
        }
},

    /**
     * Assemble (SEGS) from ImpactPack/Util
     * @desc 
    */
    "ImpactAssembleSEGS" : class extends Node{
        //Setters
        //set 'seg_header'(value : SEGS_HEADER)  { super.$$link(0, value) } 
//set 'seg_elt'(value : SEG_ELT)  { super.$$link(1, value) } 

        //Getters
        get 'SEGS'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }

        /**
          * Constructor
		 * @param opts.seg_header
		 * @param opts.seg_elt}
        */
        constructor(opts:{
            'seg_header': SEGS_HEADER,'seg_elt': SEG_ELT
        }){
            super(ctx);

            super.$$link("seg_header", opts['seg_header'])
super.$$link("seg_elt", opts['seg_elt'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactAssembleSEGS"
        }
},

    /**
     * From SEG_ELT from ImpactPack/Util
     * @desc 
    */
    "ImpactFrom_SEG_ELT" : class extends Node{
        //Setters
        //set 'seg_elt'(value : SEG_ELT)  { super.$$link(0, value) } 

        //Getters
        get 'seg_elt'() : SEG_ELT { return [this.$uid.toString(), 0]  as unknown as SEG_ELT; }
get 'cropped_image'() : IMAGE { return [this.$uid.toString(), 1]  as unknown as IMAGE; }
get 'cropped_mask'() : MASK { return [this.$uid.toString(), 2]  as unknown as MASK; }
get 'crop_region'() : SEG_ELT_crop_region { return [this.$uid.toString(), 3]  as unknown as SEG_ELT_crop_region; }
get 'bbox'() : SEG_ELT_bbox { return [this.$uid.toString(), 4]  as unknown as SEG_ELT_bbox; }
get 'control_net_wrapper'() : SEG_ELT_control_net_wrapper { return [this.$uid.toString(), 5]  as unknown as SEG_ELT_control_net_wrapper; }
get 'confidence'() : FLOAT { return [this.$uid.toString(), 6]  as unknown as FLOAT; }
get 'label'() : STRING { return [this.$uid.toString(), 7]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.seg_elt}
        */
        constructor(opts:{
            'seg_elt': SEG_ELT
        }){
            super(ctx);

            super.$$link("seg_elt", opts['seg_elt'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactFrom_SEG_ELT"
        }
},

    /**
     * Edit SEG_ELT from ImpactPack/Util
     * @desc 
    */
    "ImpactEdit_SEG_ELT" : class extends Node{
        //Setters
        //set 'seg_elt'(value : SEG_ELT)  { super.$$link(0, value) } 
//set 'cropped_image_opt'(value : IMAGE)  { super.$$link(1, value) } 
//set 'cropped_mask_opt'(value : MASK)  { super.$$link(2, value) } 
//set 'crop_region_opt'(value : SEG_ELT_crop_region)  { super.$$link(3, value) } 
//set 'bbox_opt'(value : SEG_ELT_bbox)  { super.$$link(4, value) } 
//set 'control_net_wrapper_opt'(value : SEG_ELT_control_net_wrapper)  { super.$$link(5, value) } 
//set 'confidence_opt'(value : FLOAT)  { super.$$link(6, value) } 
//set 'label_opt'(value : STRING)  { super.$$link(7, value) } 

        //Getters
        get 'SEG_ELT'() : SEG_ELT { return [this.$uid.toString(), 0]  as unknown as SEG_ELT; }

        /**
          * Constructor
		 * @param opts.seg_elt
		 * @param opts.cropped_image_opt
		 * @param opts.cropped_mask_opt
		 * @param opts.crop_region_opt
		 * @param opts.bbox_opt
		 * @param opts.control_net_wrapper_opt
		 * @param opts.confidence_opt step: 0.1
		 * @param opts.label_opt}
        */
        constructor(opts:{
            'seg_elt': SEG_ELT,'cropped_image_opt'?: IMAGE,'cropped_mask_opt'?: MASK,'crop_region_opt'?: SEG_ELT_crop_region,'bbox_opt'?: SEG_ELT_bbox,'control_net_wrapper_opt'?: SEG_ELT_control_net_wrapper,'confidence_opt'?: FLOAT,'label_opt'?: STRING
        }){
            super(ctx);

            super.$$link("seg_elt", opts['seg_elt'])
super.$$link("cropped_image_opt", opts['cropped_image_opt'])
super.$$link("cropped_mask_opt", opts['cropped_mask_opt'])
super.$$link("crop_region_opt", opts['crop_region_opt'])
super.$$link("bbox_opt", opts['bbox_opt'])
super.$$link("control_net_wrapper_opt", opts['control_net_wrapper_opt'])
super.$$link("confidence_opt", opts['confidence_opt'])
super.$$link("label_opt", opts['label_opt'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactEdit_SEG_ELT"
        }
},

    /**
     * Dilate Mask (SEG_ELT) from ImpactPack/Util
     * @desc 
    */
    "ImpactDilate_Mask_SEG_ELT" : class extends Node{
        //Setters
        //set 'seg_elt'(value : SEG_ELT)  { super.$$link(0, value) } 
//set 'dilation'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'SEG_ELT'() : SEG_ELT { return [this.$uid.toString(), 0]  as unknown as SEG_ELT; }

        /**
          * Constructor
		 * @param opts.seg_elt
		 * @param opts.dilation default: 10 max: 512 min: -512 step: 1}
        */
        constructor(opts:{
            'seg_elt': SEG_ELT,'dilation'?: INT
        }){
            super(ctx);

            super.$$link("seg_elt", opts['seg_elt'])
super.$$link("dilation", opts['dilation']??tmp["ImpactDilate_Mask_SEG_ELT"].defaults['dilation'])
}

        static defaults = {
    'dilation':  10
}
        protected override $$type(){
            return "ImpactDilate_Mask_SEG_ELT"
        }
},

    /**
     * Dilate Mask from ImpactPack/Util
     * @desc 
    */
    "ImpactDilateMask" : class extends Node{
        //Setters
        //set 'mask'(value : MASK)  { super.$$link(0, value) } 
//set 'dilation'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.mask
		 * @param opts.dilation default: 10 max: 512 min: -512 step: 1}
        */
        constructor(opts:{
            'mask': MASK,'dilation'?: INT
        }){
            super(ctx);

            super.$$link("mask", opts['mask'])
super.$$link("dilation", opts['dilation']??tmp["ImpactDilateMask"].defaults['dilation'])
}

        static defaults = {
    'dilation':  10
}
        protected override $$type(){
            return "ImpactDilateMask"
        }
},

    /**
     * Gaussian Blur Mask from ImpactPack/Util
     * @desc 
    */
    "ImpactGaussianBlurMask" : class extends Node{
        //Setters
        //set 'mask'(value : MASK)  { super.$$link(0, value) } 
//set 'kernel_size'(value : INT)  { super.$$link(1, value) } 
//set 'sigma'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.mask
		 * @param opts.kernel_size default: 10 step: 1
		 * @param opts.sigma default: 10 max: 100 min: 0.1 step: 0.1}
        */
        constructor(opts:{
            'mask': MASK,'kernel_size'?: INT,'sigma'?: FLOAT
        }){
            super(ctx);

            super.$$link("mask", opts['mask'])
super.$$link("kernel_size", opts['kernel_size']??tmp["ImpactGaussianBlurMask"].defaults['kernel_size'])
super.$$link("sigma", opts['sigma']??tmp["ImpactGaussianBlurMask"].defaults['sigma'])
}

        static defaults = {
    'kernel_size':  10,
'sigma':  10
}
        protected override $$type(){
            return "ImpactGaussianBlurMask"
        }
},

    /**
     * Dilate Mask (SEGS) from ImpactPack/Util
     * @desc 
    */
    "ImpactDilateMaskInSEGS" : class extends Node{
        //Setters
        //set 'segs'(value : SEGS)  { super.$$link(0, value) } 
//set 'dilation'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'SEGS'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }

        /**
          * Constructor
		 * @param opts.segs
		 * @param opts.dilation default: 10 max: 512 min: -512 step: 1}
        */
        constructor(opts:{
            'segs': SEGS,'dilation'?: INT
        }){
            super(ctx);

            super.$$link("segs", opts['segs'])
super.$$link("dilation", opts['dilation']??tmp["ImpactDilateMaskInSEGS"].defaults['dilation'])
}

        static defaults = {
    'dilation':  10
}
        protected override $$type(){
            return "ImpactDilateMaskInSEGS"
        }
},

    /**
     * Gaussian Blur Mask (SEGS) from ImpactPack/Util
     * @desc 
    */
    "ImpactGaussianBlurMaskInSEGS" : class extends Node{
        //Setters
        //set 'segs'(value : SEGS)  { super.$$link(0, value) } 
//set 'kernel_size'(value : INT)  { super.$$link(1, value) } 
//set 'sigma'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'SEGS'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }

        /**
          * Constructor
		 * @param opts.segs
		 * @param opts.kernel_size default: 10 step: 1
		 * @param opts.sigma default: 10 max: 100 min: 0.1 step: 0.1}
        */
        constructor(opts:{
            'segs': SEGS,'kernel_size'?: INT,'sigma'?: FLOAT
        }){
            super(ctx);

            super.$$link("segs", opts['segs'])
super.$$link("kernel_size", opts['kernel_size']??tmp["ImpactGaussianBlurMaskInSEGS"].defaults['kernel_size'])
super.$$link("sigma", opts['sigma']??tmp["ImpactGaussianBlurMaskInSEGS"].defaults['sigma'])
}

        static defaults = {
    'kernel_size':  10,
'sigma':  10
}
        protected override $$type(){
            return "ImpactGaussianBlurMaskInSEGS"
        }
},

    /**
     * ScaleBy BBOX (SEG_ELT) from ImpactPack/Util
     * @desc 
    */
    "ImpactScaleBy_BBOX_SEG_ELT" : class extends Node{
        //Setters
        //set 'seg'(value : SEG_ELT)  { super.$$link(0, value) } 
//set 'scale_by'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'SEG_ELT'() : SEG_ELT { return [this.$uid.toString(), 0]  as unknown as SEG_ELT; }

        /**
          * Constructor
		 * @param opts.seg
		 * @param opts.scale_by default: 1 max: 8 min: 0.01 step: 0.01}
        */
        constructor(opts:{
            'seg': SEG_ELT,'scale_by'?: FLOAT
        }){
            super(ctx);

            super.$$link("seg", opts['seg'])
super.$$link("scale_by", opts['scale_by']??tmp["ImpactScaleBy_BBOX_SEG_ELT"].defaults['scale_by'])
}

        static defaults = {
    'scale_by':  1
}
        protected override $$type(){
            return "ImpactScaleBy_BBOX_SEG_ELT"
        }
},

    /**
     * From SEG_ELT bbox from ImpactPack/Util
     * @desc 
    */
    "ImpactFrom_SEG_ELT_bbox" : class extends Node{
        //Setters
        //set 'bbox'(value : SEG_ELT_bbox)  { super.$$link(0, value) } 

        //Getters
        get 'left'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }
get 'top'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }
get 'right'() : INT { return [this.$uid.toString(), 2]  as unknown as INT; }
get 'bottom'() : INT { return [this.$uid.toString(), 3]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.bbox}
        */
        constructor(opts:{
            'bbox': SEG_ELT_bbox
        }){
            super(ctx);

            super.$$link("bbox", opts['bbox'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactFrom_SEG_ELT_bbox"
        }
},

    /**
     * From SEG_ELT crop_region from ImpactPack/Util
     * @desc 
    */
    "ImpactFrom_SEG_ELT_crop_region" : class extends Node{
        //Setters
        //set 'crop_region'(value : SEG_ELT_crop_region)  { super.$$link(0, value) } 

        //Getters
        get 'left'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }
get 'top'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }
get 'right'() : INT { return [this.$uid.toString(), 2]  as unknown as INT; }
get 'bottom'() : INT { return [this.$uid.toString(), 3]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.crop_region}
        */
        constructor(opts:{
            'crop_region': SEG_ELT_crop_region
        }){
            super(ctx);

            super.$$link("crop_region", opts['crop_region'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactFrom_SEG_ELT_crop_region"
        }
},

    /**
     * Count Elts in SEGS from ImpactPack/Util
     * @desc 
    */
    "ImpactCount_Elts_in_SEGS" : class extends Node{
        //Setters
        //set 'segs'(value : SEGS)  { super.$$link(0, value) } 

        //Getters
        get 'INT'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.segs}
        */
        constructor(opts:{
            'segs': SEGS
        }){
            super(ctx);

            super.$$link("segs", opts['segs'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactCount_Elts_in_SEGS"
        }
},

    /**
     * BBOX Detector (combined) from ImpactPack/Detector
     * @desc 
    */
    "BboxDetectorCombined_v2" : class extends Node{
        //Setters
        //set 'bbox_detector'(value : BBOX_DETECTOR)  { super.$$link(0, value) } 
//set 'image'(value : IMAGE)  { super.$$link(1, value) } 
//set 'threshold'(value : FLOAT)  { super.$$link(2, value) } 
//set 'dilation'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.bbox_detector
		 * @param opts.image
		 * @param opts.threshold default: 0.5 step: 0.01
		 * @param opts.dilation default: 4 max: 512 min: -512 step: 1}
        */
        constructor(opts:{
            'bbox_detector': BBOX_DETECTOR,'image': IMAGE,'threshold'?: FLOAT,'dilation'?: INT
        }){
            super(ctx);

            super.$$link("bbox_detector", opts['bbox_detector'])
super.$$link("image", opts['image'])
super.$$link("threshold", opts['threshold']??tmp["BboxDetectorCombined_v2"].defaults['threshold'])
super.$$link("dilation", opts['dilation']??tmp["BboxDetectorCombined_v2"].defaults['dilation'])
}

        static defaults = {
    'threshold':  0.5,
'dilation':  4
}
        protected override $$type(){
            return "BboxDetectorCombined_v2"
        }
},

    /**
     * SEGM Detector (combined) from ImpactPack/Detector
     * @desc 
    */
    "SegmDetectorCombined_v2" : class extends Node{
        //Setters
        //set 'segm_detector'(value : SEGM_DETECTOR)  { super.$$link(0, value) } 
//set 'image'(value : IMAGE)  { super.$$link(1, value) } 
//set 'threshold'(value : FLOAT)  { super.$$link(2, value) } 
//set 'dilation'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.segm_detector
		 * @param opts.image
		 * @param opts.threshold default: 0.5 step: 0.01
		 * @param opts.dilation max: 512 min: -512 step: 1}
        */
        constructor(opts:{
            'segm_detector': SEGM_DETECTOR,'image': IMAGE,'threshold'?: FLOAT,'dilation'?: INT
        }){
            super(ctx);

            super.$$link("segm_detector", opts['segm_detector'])
super.$$link("image", opts['image'])
super.$$link("threshold", opts['threshold']??tmp["SegmDetectorCombined_v2"].defaults['threshold'])
super.$$link("dilation", opts['dilation']??tmp["SegmDetectorCombined_v2"].defaults['dilation'])
}

        static defaults = {
    'threshold':  0.5,
'dilation':  0
}
        protected override $$type(){
            return "SegmDetectorCombined_v2"
        }
},

    /**
     * SEGS to MASK (combined) from ImpactPack/Operation
     * @desc 
    */
    "SegsToCombinedMask" : class extends Node{
        //Setters
        //set 'segs'(value : SEGS)  { super.$$link(0, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.segs}
        */
        constructor(opts:{
            'segs': SEGS
        }){
            super(ctx);

            super.$$link("segs", opts['segs'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "SegsToCombinedMask"
        }
},

    /**
     * KSamplerProvider from ImpactPack/Sampler
     * @desc 
    */
    "KSamplerProvider" : class extends Node{
        //Setters
        //set 'seed'(value : INT)  { super.$$link(0, value) } 
//set 'steps'(value : INT)  { super.$$link(1, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(2, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(3, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn)  { super.$$link(4, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(5, value) } 
//set 'basic_pipe'(value : BASIC_PIPE)  { super.$$link(6, value) } 
//set 'scheduler_func_opt'(value : SCHEDULER_FUNC)  { super.$$link(7, value) } 

        //Getters
        get 'KSAMPLER'() : KSAMPLER { return [this.$uid.toString(), 0]  as unknown as KSAMPLER; }

        /**
          * Constructor
		 * @param opts.seed
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.cfg default: 8
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.denoise default: 1 step: 0.01
		 * @param opts.basic_pipe
		 * @param opts.scheduler_func_opt}
        */
        constructor(opts:{
            'seed'?: INT,'steps'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn,'denoise'?: FLOAT,'basic_pipe': BASIC_PIPE,'scheduler_func_opt'?: SCHEDULER_FUNC
        }){
            super(ctx);

            super.$$link("seed", opts['seed']??tmp["KSamplerProvider"].defaults['seed'])
super.$$link("steps", opts['steps']??tmp["KSamplerProvider"].defaults['steps'])
super.$$link("cfg", opts['cfg']??tmp["KSamplerProvider"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("denoise", opts['denoise']??tmp["KSamplerProvider"].defaults['denoise'])
super.$$link("basic_pipe", opts['basic_pipe'])
super.$$link("scheduler_func_opt", opts['scheduler_func_opt'])
}

        static defaults = {
    'seed':  0,
'steps':  20,
'cfg':  8,
'denoise':  1
}
        protected override $$type(){
            return "KSamplerProvider"
        }
},

    /**
     * TwoSamplersForMask from ImpactPack/Sampler
     * @desc 
    */
    "TwoSamplersForMask" : class extends Node{
        //Setters
        //set 'latent_image'(value : LATENT)  { super.$$link(0, value) } 
//set 'base_sampler'(value : KSAMPLER)  { super.$$link(1, value) } 
//set 'mask_sampler'(value : KSAMPLER)  { super.$$link(2, value) } 
//set 'mask'(value : MASK)  { super.$$link(3, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.latent_image
		 * @param opts.base_sampler
		 * @param opts.mask_sampler
		 * @param opts.mask}
        */
        constructor(opts:{
            'latent_image': LATENT,'base_sampler': KSAMPLER,'mask_sampler': KSAMPLER,'mask': MASK
        }){
            super(ctx);

            super.$$link("latent_image", opts['latent_image'])
super.$$link("base_sampler", opts['base_sampler'])
super.$$link("mask_sampler", opts['mask_sampler'])
super.$$link("mask", opts['mask'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "TwoSamplersForMask"
        }
},

    /**
     * TiledKSamplerProvider from ImpactPack/Sampler
     * @desc 
    */
    "TiledKSamplerProvider" : class extends Node{
        //Setters
        //set 'seed'(value : INT)  { super.$$link(0, value) } 
//set 'steps'(value : INT)  { super.$$link(1, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(2, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(3, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn)  { super.$$link(4, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(5, value) } 
//set 'tile_width'(value : INT)  { super.$$link(6, value) } 
//set 'tile_height'(value : INT)  { super.$$link(7, value) } 
//set 'tiling_strategy'(value : 'random'|'padded'|'simple'| $dyn)  { super.$$link(8, value) } 
//set 'basic_pipe'(value : BASIC_PIPE)  { super.$$link(9, value) } 

        //Getters
        get 'KSAMPLER'() : KSAMPLER { return [this.$uid.toString(), 0]  as unknown as KSAMPLER; }

        /**
          * Constructor
		 * @param opts.seed
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.cfg default: 8
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.denoise default: 1 step: 0.01
		 * @param opts.tile_width default: 512 max: 16384 min: 320 step: 64
		 * @param opts.tile_height default: 512 max: 16384 min: 320 step: 64
		 * @param opts.tiling_strategy
		 * @param opts.basic_pipe}
        */
        constructor(opts:{
            'seed'?: INT,'steps'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn,'denoise'?: FLOAT,'tile_width'?: INT,'tile_height'?: INT,'tiling_strategy': 'random'|'padded'|'simple'| $dyn,'basic_pipe': BASIC_PIPE
        }){
            super(ctx);

            super.$$link("seed", opts['seed']??tmp["TiledKSamplerProvider"].defaults['seed'])
super.$$link("steps", opts['steps']??tmp["TiledKSamplerProvider"].defaults['steps'])
super.$$link("cfg", opts['cfg']??tmp["TiledKSamplerProvider"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("denoise", opts['denoise']??tmp["TiledKSamplerProvider"].defaults['denoise'])
super.$$link("tile_width", opts['tile_width']??tmp["TiledKSamplerProvider"].defaults['tile_width'])
super.$$link("tile_height", opts['tile_height']??tmp["TiledKSamplerProvider"].defaults['tile_height'])
super.$$link("tiling_strategy", opts['tiling_strategy'])
super.$$link("basic_pipe", opts['basic_pipe'])
}

        static defaults = {
    'seed':  0,
'steps':  20,
'cfg':  8,
'denoise':  1,
'tile_width':  512,
'tile_height':  512
}
        protected override $$type(){
            return "TiledKSamplerProvider"
        }
},

    /**
     * KSamplerAdvancedProvider from ImpactPack/Sampler
     * @desc 
    */
    "KSamplerAdvancedProvider" : class extends Node{
        //Setters
        //set 'cfg'(value : FLOAT)  { super.$$link(0, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(1, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn)  { super.$$link(2, value) } 
//set 'sigma_factor'(value : FLOAT)  { super.$$link(3, value) } 
//set 'basic_pipe'(value : BASIC_PIPE)  { super.$$link(4, value) } 
//set 'sampler_opt'(value : SAMPLER)  { super.$$link(5, value) } 
//set 'scheduler_func_opt'(value : SCHEDULER_FUNC)  { super.$$link(6, value) } 

        //Getters
        get 'KSAMPLER_ADVANCED'() : KSAMPLER_ADVANCED { return [this.$uid.toString(), 0]  as unknown as KSAMPLER_ADVANCED; }

        /**
          * Constructor
		 * @param opts.cfg default: 8
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.sigma_factor default: 1 step: 0.01
		 * @param opts.basic_pipe
		 * @param opts.sampler_opt
		 * @param opts.scheduler_func_opt}
        */
        constructor(opts:{
            'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn,'sigma_factor'?: FLOAT,'basic_pipe': BASIC_PIPE,'sampler_opt'?: SAMPLER,'scheduler_func_opt'?: SCHEDULER_FUNC
        }){
            super(ctx);

            super.$$link("cfg", opts['cfg']??tmp["KSamplerAdvancedProvider"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("sigma_factor", opts['sigma_factor']??tmp["KSamplerAdvancedProvider"].defaults['sigma_factor'])
super.$$link("basic_pipe", opts['basic_pipe'])
super.$$link("sampler_opt", opts['sampler_opt'])
super.$$link("scheduler_func_opt", opts['scheduler_func_opt'])
}

        static defaults = {
    'cfg':  8,
'sigma_factor':  1
}
        protected override $$type(){
            return "KSamplerAdvancedProvider"
        }
},

    /**
     * TwoAdvancedSamplersForMask from ImpactPack/Sampler
     * @desc 
    */
    "TwoAdvancedSamplersForMask" : class extends Node{
        //Setters
        //set 'seed'(value : INT)  { super.$$link(0, value) } 
//set 'steps'(value : INT)  { super.$$link(1, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(2, value) } 
//set 'samples'(value : LATENT)  { super.$$link(3, value) } 
//set 'base_sampler'(value : KSAMPLER_ADVANCED)  { super.$$link(4, value) } 
//set 'mask_sampler'(value : KSAMPLER_ADVANCED)  { super.$$link(5, value) } 
//set 'mask'(value : MASK)  { super.$$link(6, value) } 
//set 'overlap_factor'(value : INT)  { super.$$link(7, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.seed
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.denoise default: 1 step: 0.01
		 * @param opts.samples
		 * @param opts.base_sampler
		 * @param opts.mask_sampler
		 * @param opts.mask
		 * @param opts.overlap_factor default: 10}
        */
        constructor(opts:{
            'seed'?: INT,'steps'?: INT,'denoise'?: FLOAT,'samples': LATENT,'base_sampler': KSAMPLER_ADVANCED,'mask_sampler': KSAMPLER_ADVANCED,'mask': MASK,'overlap_factor'?: INT
        }){
            super(ctx);

            super.$$link("seed", opts['seed']??tmp["TwoAdvancedSamplersForMask"].defaults['seed'])
super.$$link("steps", opts['steps']??tmp["TwoAdvancedSamplersForMask"].defaults['steps'])
super.$$link("denoise", opts['denoise']??tmp["TwoAdvancedSamplersForMask"].defaults['denoise'])
super.$$link("samples", opts['samples'])
super.$$link("base_sampler", opts['base_sampler'])
super.$$link("mask_sampler", opts['mask_sampler'])
super.$$link("mask", opts['mask'])
super.$$link("overlap_factor", opts['overlap_factor']??tmp["TwoAdvancedSamplersForMask"].defaults['overlap_factor'])
}

        static defaults = {
    'seed':  0,
'steps':  20,
'denoise':  1,
'overlap_factor':  10
}
        protected override $$type(){
            return "TwoAdvancedSamplersForMask"
        }
},

    /**
     * Negative Cond Placeholder from ImpactPack/sampling
     * @desc 
    */
    "ImpactNegativeConditioningPlaceholder" : class extends Node{
        //Setters
        

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
}
        */
        constructor(opts:{
            
        }){
            super(ctx);

            
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactNegativeConditioningPlaceholder"
        }
},

    /**
     * Preview Bridge (Image) from ImpactPack/Util
     * @desc 
    */
    "PreviewBridge" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'image'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'MASK'() : MASK { return [this.$uid.toString(), 1]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.image}
        */
        constructor(opts:{
            'images': IMAGE,'image'?: STRING
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("image", opts['image']??tmp["PreviewBridge"].defaults['image'])
}

        static defaults = {
    'image':  ""
}
        protected override $$type(){
            return "PreviewBridge"
        }
},

    /**
     * Preview Bridge (Latent) from ImpactPack/Util
     * @desc 
    */
    "PreviewBridgeLatent" : class extends Node{
        //Setters
        //set 'latent'(value : LATENT)  { super.$$link(0, value) } 
//set 'image'(value : STRING)  { super.$$link(1, value) } 
//set 'preview_method'(value : 'Latent2RGB-SD3'|'Latent2RGB-SDXL'|'Latent2RGB-SD15'|'Latent2RGB-SD-X4'|'Latent2RGB-Playground-2.5'|'Latent2RGB-SC-Prior'|'Latent2RGB-SC-B'|'Latent2RGB-FLUX.1'|'TAESD3'|'TAESDXL'|'TAESD15'| $dyn)  { super.$$link(2, value) } 
//set 'vae_opt'(value : VAE)  { super.$$link(3, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }
get 'MASK'() : MASK { return [this.$uid.toString(), 1]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.latent
		 * @param opts.image
		 * @param opts.preview_method
		 * @param opts.vae_opt}
        */
        constructor(opts:{
            'latent': LATENT,'image'?: STRING,'preview_method': 'Latent2RGB-SD3'|'Latent2RGB-SDXL'|'Latent2RGB-SD15'|'Latent2RGB-SD-X4'|'Latent2RGB-Playground-2.5'|'Latent2RGB-SC-Prior'|'Latent2RGB-SC-B'|'Latent2RGB-FLUX.1'|'TAESD3'|'TAESDXL'|'TAESD15'| $dyn,'vae_opt'?: VAE
        }){
            super(ctx);

            super.$$link("latent", opts['latent'])
super.$$link("image", opts['image']??tmp["PreviewBridgeLatent"].defaults['image'])
super.$$link("preview_method", opts['preview_method'])
super.$$link("vae_opt", opts['vae_opt'])
}

        static defaults = {
    'image':  ""
}
        protected override $$type(){
            return "PreviewBridgeLatent"
        }
},

    /**
     * Image Sender from ImpactPack/Util
     * @desc Saves the input images to your ComfyUI output directory.
    */
    "ImageSender" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'filename_prefix'(value : STRING)  { super.$$link(1, value) } 
//set 'link_id'(value : INT)  { super.$$link(2, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.filename_prefix default: "ImgSender"
		 * @param opts.link_id step: 1}
        */
        constructor(opts:{
            'images': IMAGE,'filename_prefix'?: STRING,'link_id'?: INT
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("filename_prefix", opts['filename_prefix']??tmp["ImageSender"].defaults['filename_prefix'])
super.$$link("link_id", opts['link_id']??tmp["ImageSender"].defaults['link_id'])
}

        static defaults = {
    'filename_prefix':  "ImgSender",
'link_id':  0
}
        protected override $$type(){
            return "ImageSender"
        }
},

    /**
     * Image Receiver from ImpactPack/Util
     * @desc 
    */
    "ImageReceiver" : class extends Node{
        //Setters
        //set 'image'(value : '00010-2274211228.png'|'1.png'|'13368745_041_0591.jpg'|'2019-12-13-more-velm.jpg'|'37756119_043_92ea.jpg'|'56162430_104_c181.jpg'|'56162430_111_453c.jpg'|'61635388_057_c911.jpg'|'61635388_068_b3ca (1).jpg'|'61635388_068_b3ca.jpg'|'61635388_077_aa9e.jpg'|'89918606_004_7c7a.jpg'|'9377545.png'|'Ashley_Meh.webp'|'ComfyUI_00135_.png'|'ComfyUI_temp_fkoyu_00029_.png'|'ComfyUI_temp_khmtq_00005_.png'|'ComfyUI_temp_khmtq_00005_2.png'|'ComfyUI_temp_mpmkr_00234_.png'|'ComfyUI_temp_mpmkr_00258_.png'|'ComfyUI_temp_mpmkr_00296_.png'|'ComfyUI_temp_mpmkr_00347_.png'|'ComfyUI_temp_mpmkr_00497_.png'|'ComfyUI_temp_mpmkr_00540_.png'|'ComfyUI_temp_mpmkr_00542_.png'|'ComfyUI_temp_mpmkr_00550_.png'|'ComfyUI_temp_mpmkr_00733_.png'|'ComfyUI_temp_onszj_00008_.png'|'ComfyUI_temp_otlbq_00049_.png'|'ComfyUI_temp_pxygj_00023_.png'|'DSCF6491.JPG'|'DSCF8216.JPG'|'DSCF8334.JPG'|'DSCF9566.JPG'|'FB_IMG_1671397597411.jpg'|'IMGP4666.JPG'|'IMGP4670.JPG'|'IMG_1913.JPG'|'Julia.webp'|'Julia2.webp'|'Mom.webp'|'QSCF8096.JPG'|'Screenshot from 2022-04-19 11-38-41.png'|'a837af5519f074782ae0b9c32eee12a7.jpg'|'aaa'|'asset.png'|'example-a.png'|'example.png'|'image (1).png'|'maegcgmdajglmcle-small.jpeg'|'testqr.png'| $dyn)  { super.$$link(0, value) } 
//set 'link_id'(value : INT)  { super.$$link(1, value) } 
//set 'save_to_workflow'(value : BOOLEAN)  { super.$$link(2, value) } 
//set 'image_data'(value : STRING)  { super.$$link(3, value) } 
//set 'trigger_always'(value : BOOLEAN)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'MASK'() : MASK { return [this.$uid.toString(), 1]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.link_id step: 1
		 * @param opts.save_to_workflow
		 * @param opts.image_data
		 * @param opts.trigger_always}
        */
        constructor(opts:{
            'image': '00010-2274211228.png'|'1.png'|'13368745_041_0591.jpg'|'2019-12-13-more-velm.jpg'|'37756119_043_92ea.jpg'|'56162430_104_c181.jpg'|'56162430_111_453c.jpg'|'61635388_057_c911.jpg'|'61635388_068_b3ca (1).jpg'|'61635388_068_b3ca.jpg'|'61635388_077_aa9e.jpg'|'89918606_004_7c7a.jpg'|'9377545.png'|'Ashley_Meh.webp'|'ComfyUI_00135_.png'|'ComfyUI_temp_fkoyu_00029_.png'|'ComfyUI_temp_khmtq_00005_.png'|'ComfyUI_temp_khmtq_00005_2.png'|'ComfyUI_temp_mpmkr_00234_.png'|'ComfyUI_temp_mpmkr_00258_.png'|'ComfyUI_temp_mpmkr_00296_.png'|'ComfyUI_temp_mpmkr_00347_.png'|'ComfyUI_temp_mpmkr_00497_.png'|'ComfyUI_temp_mpmkr_00540_.png'|'ComfyUI_temp_mpmkr_00542_.png'|'ComfyUI_temp_mpmkr_00550_.png'|'ComfyUI_temp_mpmkr_00733_.png'|'ComfyUI_temp_onszj_00008_.png'|'ComfyUI_temp_otlbq_00049_.png'|'ComfyUI_temp_pxygj_00023_.png'|'DSCF6491.JPG'|'DSCF8216.JPG'|'DSCF8334.JPG'|'DSCF9566.JPG'|'FB_IMG_1671397597411.jpg'|'IMGP4666.JPG'|'IMGP4670.JPG'|'IMG_1913.JPG'|'Julia.webp'|'Julia2.webp'|'Mom.webp'|'QSCF8096.JPG'|'Screenshot from 2022-04-19 11-38-41.png'|'a837af5519f074782ae0b9c32eee12a7.jpg'|'aaa'|'asset.png'|'example-a.png'|'example.png'|'image (1).png'|'maegcgmdajglmcle-small.jpeg'|'testqr.png'| $dyn,'link_id'?: INT,'save_to_workflow'?: BOOLEAN,'image_data': STRING,'trigger_always'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("link_id", opts['link_id']??tmp["ImageReceiver"].defaults['link_id'])
super.$$link("save_to_workflow", opts['save_to_workflow']??tmp["ImageReceiver"].defaults['save_to_workflow'])
super.$$link("image_data", opts['image_data'])
super.$$link("trigger_always", opts['trigger_always']??tmp["ImageReceiver"].defaults['trigger_always'])
}

        static defaults = {
    'link_id':  0,
'save_to_workflow':  false,
'trigger_always':  false
}
        protected override $$type(){
            return "ImageReceiver"
        }
},

    /**
     * LatentSender from ImpactPack/Util
     * @desc 
    */
    "LatentSender" : class extends Node{
        //Setters
        //set 'samples'(value : LATENT)  { super.$$link(0, value) } 
//set 'filename_prefix'(value : STRING)  { super.$$link(1, value) } 
//set 'link_id'(value : INT)  { super.$$link(2, value) } 
//set 'preview_method'(value : 'Latent2RGB-SDXL'|'Latent2RGB-SD15'|'TAESDXL'|'TAESD15'| $dyn)  { super.$$link(3, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.samples
		 * @param opts.filename_prefix default: "latents/LatentSender"
		 * @param opts.link_id step: 1
		 * @param opts.preview_method}
        */
        constructor(opts:{
            'samples': LATENT,'filename_prefix'?: STRING,'link_id'?: INT,'preview_method': 'Latent2RGB-SDXL'|'Latent2RGB-SD15'|'TAESDXL'|'TAESD15'| $dyn
        }){
            super(ctx);

            super.$$link("samples", opts['samples'])
super.$$link("filename_prefix", opts['filename_prefix']??tmp["LatentSender"].defaults['filename_prefix'])
super.$$link("link_id", opts['link_id']??tmp["LatentSender"].defaults['link_id'])
super.$$link("preview_method", opts['preview_method'])
}

        static defaults = {
    'filename_prefix':  "latents/LatentSender",
'link_id':  0
}
        protected override $$type(){
            return "LatentSender"
        }
},

    /**
     * LatentReceiver from ImpactPack/Util
     * @desc 
    */
    "LatentReceiver" : class extends Node{
        //Setters
        //set 'latent'(value : void)  { super.$$link(0, value) } 
//set 'link_id'(value : INT)  { super.$$link(1, value) } 
//set 'trigger_always'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.latent
		 * @param opts.link_id step: 1
		 * @param opts.trigger_always}
        */
        constructor(opts:{
            'latent': void,'link_id'?: INT,'trigger_always'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("latent", opts['latent'])
super.$$link("link_id", opts['link_id']??tmp["LatentReceiver"].defaults['link_id'])
super.$$link("trigger_always", opts['trigger_always']??tmp["LatentReceiver"].defaults['trigger_always'])
}

        static defaults = {
    'link_id':  0,
'trigger_always':  false
}
        protected override $$type(){
            return "LatentReceiver"
        }
},

    /**
     * Switch (images, mask) from ImpactPack/Util
     * @desc 
    */
    "ImageMaskSwitch" : class extends Node{
        //Setters
        //set 'select'(value : INT)  { super.$$link(0, value) } 
//set 'images1'(value : IMAGE)  { super.$$link(1, value) } 
//set 'mask1_opt'(value : MASK)  { super.$$link(2, value) } 
//set 'images2_opt'(value : IMAGE)  { super.$$link(3, value) } 
//set 'mask2_opt'(value : MASK)  { super.$$link(4, value) } 
//set 'images3_opt'(value : IMAGE)  { super.$$link(5, value) } 
//set 'mask3_opt'(value : MASK)  { super.$$link(6, value) } 
//set 'images4_opt'(value : IMAGE)  { super.$$link(7, value) } 
//set 'mask4_opt'(value : MASK)  { super.$$link(8, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }
get 'MASK'() : MASK { return [this.$uid.toString(), 1]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.select default: 1 max: 4 min: 1 step: 1
		 * @param opts.images1
		 * @param opts.mask1_opt
		 * @param opts.images2_opt
		 * @param opts.mask2_opt
		 * @param opts.images3_opt
		 * @param opts.mask3_opt
		 * @param opts.images4_opt
		 * @param opts.mask4_opt}
        */
        constructor(opts:{
            'select'?: INT,'images1': IMAGE,'mask1_opt'?: MASK,'images2_opt'?: IMAGE,'mask2_opt'?: MASK,'images3_opt'?: IMAGE,'mask3_opt'?: MASK,'images4_opt'?: IMAGE,'mask4_opt'?: MASK
        }){
            super(ctx);

            super.$$link("select", opts['select']??tmp["ImageMaskSwitch"].defaults['select'])
super.$$link("images1", opts['images1'])
super.$$link("mask1_opt", opts['mask1_opt'])
super.$$link("images2_opt", opts['images2_opt'])
super.$$link("mask2_opt", opts['mask2_opt'])
super.$$link("images3_opt", opts['images3_opt'])
super.$$link("mask3_opt", opts['mask3_opt'])
super.$$link("images4_opt", opts['images4_opt'])
super.$$link("mask4_opt", opts['mask4_opt'])
}

        static defaults = {
    'select':  1
}
        protected override $$type(){
            return "ImageMaskSwitch"
        }
},

    /**
     * Switch (latent/legacy) from ImpactPack/Util
     * @desc 
    */
    "LatentSwitch" : class extends Node{
        //Setters
        //set 'select'(value : INT)  { super.$$link(0, value) } 
//set 'sel_mode'(value : BOOLEAN)  { super.$$link(1, value) } 
//set 'input1'(value : ANY)  { super.$$link(2, value) } 

        //Getters
        get 'selected_value'() : ANY { return [this.$uid.toString(), 0]  as unknown as ANY; }
get 'selected_label'() : STRING { return [this.$uid.toString(), 1]  as unknown as STRING; }
get 'selected_index'() : INT { return [this.$uid.toString(), 2]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.select default: 1 max: 999999 min: 1 step: 1
		 * @param opts.sel_mode default: true
		 * @param opts.input1}
        */
        constructor(opts:{
            'select'?: INT,'sel_mode'?: BOOLEAN,'input1'?: ANY
        }){
            super(ctx);

            super.$$link("select", opts['select']??tmp["LatentSwitch"].defaults['select'])
super.$$link("sel_mode", opts['sel_mode']??tmp["LatentSwitch"].defaults['sel_mode'])
super.$$link("input1", opts['input1'])
}

        static defaults = {
    'select':  1,
'sel_mode':  true
}
        protected override $$type(){
            return "LatentSwitch"
        }
},

    /**
     * Switch (SEGS/legacy) from ImpactPack/Util
     * @desc 
    */
    "SEGSSwitch" : class extends Node{
        //Setters
        //set 'select'(value : INT)  { super.$$link(0, value) } 
//set 'sel_mode'(value : BOOLEAN)  { super.$$link(1, value) } 
//set 'input1'(value : ANY)  { super.$$link(2, value) } 

        //Getters
        get 'selected_value'() : ANY { return [this.$uid.toString(), 0]  as unknown as ANY; }
get 'selected_label'() : STRING { return [this.$uid.toString(), 1]  as unknown as STRING; }
get 'selected_index'() : INT { return [this.$uid.toString(), 2]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.select default: 1 max: 999999 min: 1 step: 1
		 * @param opts.sel_mode default: true
		 * @param opts.input1}
        */
        constructor(opts:{
            'select'?: INT,'sel_mode'?: BOOLEAN,'input1'?: ANY
        }){
            super(ctx);

            super.$$link("select", opts['select']??tmp["SEGSSwitch"].defaults['select'])
super.$$link("sel_mode", opts['sel_mode']??tmp["SEGSSwitch"].defaults['sel_mode'])
super.$$link("input1", opts['input1'])
}

        static defaults = {
    'select':  1,
'sel_mode':  true
}
        protected override $$type(){
            return "SEGSSwitch"
        }
},

    /**
     * Switch (Any) from ImpactPack/Util
     * @desc 
    */
    "ImpactSwitch" : class extends Node{
        //Setters
        //set 'select'(value : INT)  { super.$$link(0, value) } 
//set 'sel_mode'(value : BOOLEAN)  { super.$$link(1, value) } 
//set 'input1'(value : ANY)  { super.$$link(2, value) } 

        //Getters
        get 'selected_value'() : ANY { return [this.$uid.toString(), 0]  as unknown as ANY; }
get 'selected_label'() : STRING { return [this.$uid.toString(), 1]  as unknown as STRING; }
get 'selected_index'() : INT { return [this.$uid.toString(), 2]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.select default: 1 max: 999999 min: 1 step: 1
		 * @param opts.sel_mode default: true
		 * @param opts.input1}
        */
        constructor(opts:{
            'select'?: INT,'sel_mode'?: BOOLEAN,'input1'?: ANY
        }){
            super(ctx);

            super.$$link("select", opts['select']??tmp["ImpactSwitch"].defaults['select'])
super.$$link("sel_mode", opts['sel_mode']??tmp["ImpactSwitch"].defaults['sel_mode'])
super.$$link("input1", opts['input1'])
}

        static defaults = {
    'select':  1,
'sel_mode':  true
}
        protected override $$type(){
            return "ImpactSwitch"
        }
},

    /**
     * Inversed Switch (Any) from ImpactPack/Util
     * @desc 
    */
    "ImpactInversedSwitch" : class extends Node{
        //Setters
        //set 'select'(value : INT)  { super.$$link(0, value) } 
//set 'input'(value : ANY)  { super.$$link(1, value) } 

        //Getters
        get '*'() : ANY { return [this.$uid.toString(), 0]  as unknown as ANY; }

        /**
          * Constructor
		 * @param opts.select default: 1 max: 999999 min: 1 step: 1
		 * @param opts.input}
        */
        constructor(opts:{
            'select'?: INT,'input': ANY
        }){
            super(ctx);

            super.$$link("select", opts['select']??tmp["ImpactInversedSwitch"].defaults['select'])
super.$$link("input", opts['input'])
}

        static defaults = {
    'select':  1
}
        protected override $$type(){
            return "ImpactInversedSwitch"
        }
},

    /**
     * ImpactWildcardProcessor from ImpactPack/Prompt
     * @desc 
    */
    "ImpactWildcardProcessor" : class extends Node{
        //Setters
        //set 'wildcard_text'(value : STRING)  { super.$$link(0, value) } 
//set 'populated_text'(value : STRING)  { super.$$link(1, value) } 
//set 'mode'(value : BOOLEAN)  { super.$$link(2, value) } 
//set 'seed'(value : INT)  { super.$$link(3, value) } 
//set 'Select to add Wildcard'(value : 'Select the Wildcard to add to the text'| $dyn)  { super.$$link(4, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.wildcard_text
		 * @param opts.populated_text
		 * @param opts.mode default: true
		 * @param opts.seed
		 * @param opts.Select to add Wildcard}
        */
        constructor(opts:{
            'wildcard_text': STRING,'populated_text': STRING,'mode'?: BOOLEAN,'seed'?: INT,'Select to add Wildcard': 'Select the Wildcard to add to the text'| $dyn
        }){
            super(ctx);

            super.$$link("wildcard_text", opts['wildcard_text'])
super.$$link("populated_text", opts['populated_text'])
super.$$link("mode", opts['mode']??tmp["ImpactWildcardProcessor"].defaults['mode'])
super.$$link("seed", opts['seed']??tmp["ImpactWildcardProcessor"].defaults['seed'])
super.$$link("Select to add Wildcard", opts['Select to add Wildcard'])
}

        static defaults = {
    'mode':  true,
'seed':  0
}
        protected override $$type(){
            return "ImpactWildcardProcessor"
        }
},

    /**
     * ImpactWildcardEncode from ImpactPack/Prompt
     * @desc 
    */
    "ImpactWildcardEncode" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'clip'(value : CLIP)  { super.$$link(1, value) } 
//set 'wildcard_text'(value : STRING)  { super.$$link(2, value) } 
//set 'populated_text'(value : STRING)  { super.$$link(3, value) } 
//set 'mode'(value : BOOLEAN)  { super.$$link(4, value) } 
//set 'Select to add LoRA'(value : 'Select the LoRA to add to the text'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn)  { super.$$link(5, value) } 
//set 'Select to add Wildcard'(value : 'Select the Wildcard to add to the text'| $dyn)  { super.$$link(6, value) } 
//set 'seed'(value : INT)  { super.$$link(7, value) } 

        //Getters
        get 'model'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }
get 'clip'() : CLIP { return [this.$uid.toString(), 1]  as unknown as CLIP; }
get 'conditioning'() : CONDITIONING { return [this.$uid.toString(), 2]  as unknown as CONDITIONING; }
get 'populated_text'() : STRING { return [this.$uid.toString(), 3]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.clip
		 * @param opts.wildcard_text
		 * @param opts.populated_text
		 * @param opts.mode default: true
		 * @param opts.Select to add LoRA
		 * @param opts.Select to add Wildcard
		 * @param opts.seed}
        */
        constructor(opts:{
            'model': MODEL,'clip': CLIP,'wildcard_text': STRING,'populated_text': STRING,'mode'?: BOOLEAN,'Select to add LoRA': 'Select the LoRA to add to the text'|'SDXL-Lightning/sdxl_lightning_2step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_4step_lora.safetensors'|'SDXL-Lightning/sdxl_lightning_8step_lora.safetensors'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt'| $dyn,'Select to add Wildcard': 'Select the Wildcard to add to the text'| $dyn,'seed'?: INT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("clip", opts['clip'])
super.$$link("wildcard_text", opts['wildcard_text'])
super.$$link("populated_text", opts['populated_text'])
super.$$link("mode", opts['mode']??tmp["ImpactWildcardEncode"].defaults['mode'])
super.$$link("Select to add LoRA", opts['Select to add LoRA'])
super.$$link("Select to add Wildcard", opts['Select to add Wildcard'])
super.$$link("seed", opts['seed']??tmp["ImpactWildcardEncode"].defaults['seed'])
}

        static defaults = {
    'mode':  true,
'seed':  0
}
        protected override $$type(){
            return "ImpactWildcardEncode"
        }
},

    /**
     * Upscaler (SEGS) from ImpactPack/Upscale
     * @desc 
    */
    "SEGSUpscaler" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'segs'(value : SEGS)  { super.$$link(1, value) } 
//set 'model'(value : MODEL)  { super.$$link(2, value) } 
//set 'clip'(value : CLIP)  { super.$$link(3, value) } 
//set 'vae'(value : VAE)  { super.$$link(4, value) } 
//set 'rescale_factor'(value : FLOAT)  { super.$$link(5, value) } 
//set 'resampling_method'(value : 'lanczos'|'nearest'|'bilinear'|'bicubic'| $dyn)  { super.$$link(6, value) } 
//set 'supersample'(value : 'true'|'false'| $dyn)  { super.$$link(7, value) } 
//set 'rounding_modulus'(value : INT)  { super.$$link(8, value) } 
//set 'seed'(value : INT)  { super.$$link(9, value) } 
//set 'steps'(value : INT)  { super.$$link(10, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(11, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(12, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn)  { super.$$link(13, value) } 
//set 'positive'(value : CONDITIONING)  { super.$$link(14, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(15, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(16, value) } 
//set 'feather'(value : INT)  { super.$$link(17, value) } 
//set 'inpaint_model'(value : BOOLEAN)  { super.$$link(18, value) } 
//set 'noise_mask_feather'(value : INT)  { super.$$link(19, value) } 
//set 'upscale_model_opt'(value : UPSCALE_MODEL)  { super.$$link(20, value) } 
//set 'upscaler_hook_opt'(value : UPSCALER_HOOK)  { super.$$link(21, value) } 
//set 'scheduler_func_opt'(value : SCHEDULER_FUNC)  { super.$$link(22, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.segs
		 * @param opts.model
		 * @param opts.clip
		 * @param opts.vae
		 * @param opts.rescale_factor default: 2 max: 100 min: 0.01 step: 0.01
		 * @param opts.resampling_method
		 * @param opts.supersample
		 * @param opts.rounding_modulus default: 8 max: 1024 min: 8 step: 8
		 * @param opts.seed
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.cfg default: 8
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.denoise default: 0.5 max: 1 min: 0.0001 step: 0.01
		 * @param opts.feather default: 5 step: 1
		 * @param opts.inpaint_model
		 * @param opts.noise_mask_feather default: 20 step: 1
		 * @param opts.upscale_model_opt
		 * @param opts.upscaler_hook_opt
		 * @param opts.scheduler_func_opt}
        */
        constructor(opts:{
            'image': IMAGE,'segs': SEGS,'model': MODEL,'clip': CLIP,'vae': VAE,'rescale_factor'?: FLOAT,'resampling_method': 'lanczos'|'nearest'|'bilinear'|'bicubic'| $dyn,'supersample': 'true'|'false'| $dyn,'rounding_modulus'?: INT,'seed'?: INT,'steps'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn,'positive': CONDITIONING,'negative': CONDITIONING,'denoise'?: FLOAT,'feather'?: INT,'inpaint_model'?: BOOLEAN,'noise_mask_feather'?: INT,'upscale_model_opt'?: UPSCALE_MODEL,'upscaler_hook_opt'?: UPSCALER_HOOK,'scheduler_func_opt'?: SCHEDULER_FUNC
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("segs", opts['segs'])
super.$$link("model", opts['model'])
super.$$link("clip", opts['clip'])
super.$$link("vae", opts['vae'])
super.$$link("rescale_factor", opts['rescale_factor']??tmp["SEGSUpscaler"].defaults['rescale_factor'])
super.$$link("resampling_method", opts['resampling_method'])
super.$$link("supersample", opts['supersample'])
super.$$link("rounding_modulus", opts['rounding_modulus']??tmp["SEGSUpscaler"].defaults['rounding_modulus'])
super.$$link("seed", opts['seed']??tmp["SEGSUpscaler"].defaults['seed'])
super.$$link("steps", opts['steps']??tmp["SEGSUpscaler"].defaults['steps'])
super.$$link("cfg", opts['cfg']??tmp["SEGSUpscaler"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("denoise", opts['denoise']??tmp["SEGSUpscaler"].defaults['denoise'])
super.$$link("feather", opts['feather']??tmp["SEGSUpscaler"].defaults['feather'])
super.$$link("inpaint_model", opts['inpaint_model']??tmp["SEGSUpscaler"].defaults['inpaint_model'])
super.$$link("noise_mask_feather", opts['noise_mask_feather']??tmp["SEGSUpscaler"].defaults['noise_mask_feather'])
super.$$link("upscale_model_opt", opts['upscale_model_opt'])
super.$$link("upscaler_hook_opt", opts['upscaler_hook_opt'])
super.$$link("scheduler_func_opt", opts['scheduler_func_opt'])
}

        static defaults = {
    'rescale_factor':  2,
'rounding_modulus':  8,
'seed':  0,
'steps':  20,
'cfg':  8,
'denoise':  0.5,
'feather':  5,
'inpaint_model':  false,
'noise_mask_feather':  20
}
        protected override $$type(){
            return "SEGSUpscaler"
        }
},

    /**
     * Upscaler (SEGS/pipe) from ImpactPack/Upscale
     * @desc 
    */
    "SEGSUpscalerPipe" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'segs'(value : SEGS)  { super.$$link(1, value) } 
//set 'basic_pipe'(value : BASIC_PIPE)  { super.$$link(2, value) } 
//set 'rescale_factor'(value : FLOAT)  { super.$$link(3, value) } 
//set 'resampling_method'(value : 'lanczos'|'nearest'|'bilinear'|'bicubic'| $dyn)  { super.$$link(4, value) } 
//set 'supersample'(value : 'true'|'false'| $dyn)  { super.$$link(5, value) } 
//set 'rounding_modulus'(value : INT)  { super.$$link(6, value) } 
//set 'seed'(value : INT)  { super.$$link(7, value) } 
//set 'steps'(value : INT)  { super.$$link(8, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(9, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(10, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn)  { super.$$link(11, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(12, value) } 
//set 'feather'(value : INT)  { super.$$link(13, value) } 
//set 'inpaint_model'(value : BOOLEAN)  { super.$$link(14, value) } 
//set 'noise_mask_feather'(value : INT)  { super.$$link(15, value) } 
//set 'upscale_model_opt'(value : UPSCALE_MODEL)  { super.$$link(16, value) } 
//set 'upscaler_hook_opt'(value : UPSCALER_HOOK)  { super.$$link(17, value) } 
//set 'scheduler_func_opt'(value : SCHEDULER_FUNC)  { super.$$link(18, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.segs
		 * @param opts.basic_pipe
		 * @param opts.rescale_factor default: 2 max: 100 min: 0.01 step: 0.01
		 * @param opts.resampling_method
		 * @param opts.supersample
		 * @param opts.rounding_modulus default: 8 max: 1024 min: 8 step: 8
		 * @param opts.seed
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.cfg default: 8
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.denoise default: 0.5 max: 1 min: 0.0001 step: 0.01
		 * @param opts.feather default: 5 step: 1
		 * @param opts.inpaint_model
		 * @param opts.noise_mask_feather default: 20 step: 1
		 * @param opts.upscale_model_opt
		 * @param opts.upscaler_hook_opt
		 * @param opts.scheduler_func_opt}
        */
        constructor(opts:{
            'image': IMAGE,'segs': SEGS,'basic_pipe': BASIC_PIPE,'rescale_factor'?: FLOAT,'resampling_method': 'lanczos'|'nearest'|'bilinear'|'bicubic'| $dyn,'supersample': 'true'|'false'| $dyn,'rounding_modulus'?: INT,'seed'?: INT,'steps'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn,'denoise'?: FLOAT,'feather'?: INT,'inpaint_model'?: BOOLEAN,'noise_mask_feather'?: INT,'upscale_model_opt'?: UPSCALE_MODEL,'upscaler_hook_opt'?: UPSCALER_HOOK,'scheduler_func_opt'?: SCHEDULER_FUNC
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("segs", opts['segs'])
super.$$link("basic_pipe", opts['basic_pipe'])
super.$$link("rescale_factor", opts['rescale_factor']??tmp["SEGSUpscalerPipe"].defaults['rescale_factor'])
super.$$link("resampling_method", opts['resampling_method'])
super.$$link("supersample", opts['supersample'])
super.$$link("rounding_modulus", opts['rounding_modulus']??tmp["SEGSUpscalerPipe"].defaults['rounding_modulus'])
super.$$link("seed", opts['seed']??tmp["SEGSUpscalerPipe"].defaults['seed'])
super.$$link("steps", opts['steps']??tmp["SEGSUpscalerPipe"].defaults['steps'])
super.$$link("cfg", opts['cfg']??tmp["SEGSUpscalerPipe"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("denoise", opts['denoise']??tmp["SEGSUpscalerPipe"].defaults['denoise'])
super.$$link("feather", opts['feather']??tmp["SEGSUpscalerPipe"].defaults['feather'])
super.$$link("inpaint_model", opts['inpaint_model']??tmp["SEGSUpscalerPipe"].defaults['inpaint_model'])
super.$$link("noise_mask_feather", opts['noise_mask_feather']??tmp["SEGSUpscalerPipe"].defaults['noise_mask_feather'])
super.$$link("upscale_model_opt", opts['upscale_model_opt'])
super.$$link("upscaler_hook_opt", opts['upscaler_hook_opt'])
super.$$link("scheduler_func_opt", opts['scheduler_func_opt'])
}

        static defaults = {
    'rescale_factor':  2,
'rounding_modulus':  8,
'seed':  0,
'steps':  20,
'cfg':  8,
'denoise':  0.5,
'feather':  5,
'inpaint_model':  false,
'noise_mask_feather':  20
}
        protected override $$type(){
            return "SEGSUpscalerPipe"
        }
},

    /**
     * SEGSDetailer from ImpactPack/Detailer
     * @desc 
    */
    "SEGSDetailer" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'segs'(value : SEGS)  { super.$$link(1, value) } 
//set 'guide_size'(value : FLOAT)  { super.$$link(2, value) } 
//set 'guide_size_for'(value : BOOLEAN)  { super.$$link(3, value) } 
//set 'max_size'(value : FLOAT)  { super.$$link(4, value) } 
//set 'seed'(value : INT)  { super.$$link(5, value) } 
//set 'steps'(value : INT)  { super.$$link(6, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(7, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(8, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn)  { super.$$link(9, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(10, value) } 
//set 'noise_mask'(value : BOOLEAN)  { super.$$link(11, value) } 
//set 'force_inpaint'(value : BOOLEAN)  { super.$$link(12, value) } 
//set 'basic_pipe'(value : BASIC_PIPE)  { super.$$link(13, value) } 
//set 'refiner_ratio'(value : FLOAT)  { super.$$link(14, value) } 
//set 'batch_size'(value : INT)  { super.$$link(15, value) } 
//set 'cycle'(value : INT)  { super.$$link(16, value) } 
//set 'refiner_basic_pipe_opt'(value : BASIC_PIPE)  { super.$$link(17, value) } 
//set 'inpaint_model'(value : BOOLEAN)  { super.$$link(18, value) } 
//set 'noise_mask_feather'(value : INT)  { super.$$link(19, value) } 
//set 'scheduler_func_opt'(value : SCHEDULER_FUNC)  { super.$$link(20, value) } 

        //Getters
        get 'segs'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }
get 'cnet_images'() : IMAGE { return [this.$uid.toString(), 1]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.segs
		 * @param opts.guide_size default: 512 max: 16384 min: 64 step: 8
		 * @param opts.guide_size_for default: true
		 * @param opts.max_size default: 768 max: 16384 min: 64 step: 8
		 * @param opts.seed
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.cfg default: 8
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.denoise default: 0.5 max: 1 min: 0.0001 step: 0.01
		 * @param opts.noise_mask default: true
		 * @param opts.force_inpaint default: true
		 * @param opts.basic_pipe
		 * @param opts.refiner_ratio default: 0.2
		 * @param opts.batch_size default: 1 max: 100 min: 1
		 * @param opts.cycle default: 1 max: 10 min: 1 step: 1
		 * @param opts.refiner_basic_pipe_opt
		 * @param opts.inpaint_model
		 * @param opts.noise_mask_feather default: 20 step: 1
		 * @param opts.scheduler_func_opt}
        */
        constructor(opts:{
            'image': IMAGE,'segs': SEGS,'guide_size'?: FLOAT,'guide_size_for'?: BOOLEAN,'max_size'?: FLOAT,'seed'?: INT,'steps'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn,'denoise'?: FLOAT,'noise_mask'?: BOOLEAN,'force_inpaint'?: BOOLEAN,'basic_pipe': BASIC_PIPE,'refiner_ratio'?: FLOAT,'batch_size'?: INT,'cycle'?: INT,'refiner_basic_pipe_opt'?: BASIC_PIPE,'inpaint_model'?: BOOLEAN,'noise_mask_feather'?: INT,'scheduler_func_opt'?: SCHEDULER_FUNC
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("segs", opts['segs'])
super.$$link("guide_size", opts['guide_size']??tmp["SEGSDetailer"].defaults['guide_size'])
super.$$link("guide_size_for", opts['guide_size_for']??tmp["SEGSDetailer"].defaults['guide_size_for'])
super.$$link("max_size", opts['max_size']??tmp["SEGSDetailer"].defaults['max_size'])
super.$$link("seed", opts['seed']??tmp["SEGSDetailer"].defaults['seed'])
super.$$link("steps", opts['steps']??tmp["SEGSDetailer"].defaults['steps'])
super.$$link("cfg", opts['cfg']??tmp["SEGSDetailer"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("denoise", opts['denoise']??tmp["SEGSDetailer"].defaults['denoise'])
super.$$link("noise_mask", opts['noise_mask']??tmp["SEGSDetailer"].defaults['noise_mask'])
super.$$link("force_inpaint", opts['force_inpaint']??tmp["SEGSDetailer"].defaults['force_inpaint'])
super.$$link("basic_pipe", opts['basic_pipe'])
super.$$link("refiner_ratio", opts['refiner_ratio']??tmp["SEGSDetailer"].defaults['refiner_ratio'])
super.$$link("batch_size", opts['batch_size']??tmp["SEGSDetailer"].defaults['batch_size'])
super.$$link("cycle", opts['cycle']??tmp["SEGSDetailer"].defaults['cycle'])
super.$$link("refiner_basic_pipe_opt", opts['refiner_basic_pipe_opt'])
super.$$link("inpaint_model", opts['inpaint_model']??tmp["SEGSDetailer"].defaults['inpaint_model'])
super.$$link("noise_mask_feather", opts['noise_mask_feather']??tmp["SEGSDetailer"].defaults['noise_mask_feather'])
super.$$link("scheduler_func_opt", opts['scheduler_func_opt'])
}

        static defaults = {
    'guide_size':  512,
'guide_size_for':  true,
'max_size':  768,
'seed':  0,
'steps':  20,
'cfg':  8,
'denoise':  0.5,
'noise_mask':  true,
'force_inpaint':  true,
'refiner_ratio':  0.2,
'batch_size':  1,
'cycle':  1,
'inpaint_model':  false,
'noise_mask_feather':  20
}
        protected override $$type(){
            return "SEGSDetailer"
        }
},

    /**
     * SEGSPaste from ImpactPack/Detailer
     * @desc 
    */
    "SEGSPaste" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'segs'(value : SEGS)  { super.$$link(1, value) } 
//set 'feather'(value : INT)  { super.$$link(2, value) } 
//set 'alpha'(value : INT)  { super.$$link(3, value) } 
//set 'ref_image_opt'(value : IMAGE)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.segs
		 * @param opts.feather default: 5 step: 1
		 * @param opts.alpha default: 255 step: 1
		 * @param opts.ref_image_opt}
        */
        constructor(opts:{
            'image': IMAGE,'segs': SEGS,'feather'?: INT,'alpha'?: INT,'ref_image_opt'?: IMAGE
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("segs", opts['segs'])
super.$$link("feather", opts['feather']??tmp["SEGSPaste"].defaults['feather'])
super.$$link("alpha", opts['alpha']??tmp["SEGSPaste"].defaults['alpha'])
super.$$link("ref_image_opt", opts['ref_image_opt'])
}

        static defaults = {
    'feather':  5,
'alpha':  255
}
        protected override $$type(){
            return "SEGSPaste"
        }
},

    /**
     * SEGSPreview from ImpactPack/Util
     * @desc 
    */
    "SEGSPreview" : class extends Node{
        //Setters
        //set 'segs'(value : SEGS)  { super.$$link(0, value) } 
//set 'alpha_mode'(value : BOOLEAN)  { super.$$link(1, value) } 
//set 'min_alpha'(value : FLOAT)  { super.$$link(2, value) } 
//set 'fallback_image_opt'(value : IMAGE)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.segs
		 * @param opts.alpha_mode default: true
		 * @param opts.min_alpha default: 0.2 step: 0.01
		 * @param opts.fallback_image_opt}
        */
        constructor(opts:{
            'segs': SEGS,'alpha_mode'?: BOOLEAN,'min_alpha'?: FLOAT,'fallback_image_opt'?: IMAGE
        }){
            super(ctx);

            super.$$link("segs", opts['segs'])
super.$$link("alpha_mode", opts['alpha_mode']??tmp["SEGSPreview"].defaults['alpha_mode'])
super.$$link("min_alpha", opts['min_alpha']??tmp["SEGSPreview"].defaults['min_alpha'])
super.$$link("fallback_image_opt", opts['fallback_image_opt'])
}

        static defaults = {
    'alpha_mode':  true,
'min_alpha':  0.2
}
        protected override $$type(){
            return "SEGSPreview"
        }
},

    /**
     * SEGSPreview (CNET Image) from ImpactPack/Util
     * @desc 
    */
    "SEGSPreviewCNet" : class extends Node{
        //Setters
        //set 'segs'(value : SEGS)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.segs}
        */
        constructor(opts:{
            'segs': SEGS
        }){
            super(ctx);

            super.$$link("segs", opts['segs'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "SEGSPreviewCNet"
        }
},

    /**
     * SEGSToImageList from ImpactPack/Util
     * @desc 
    */
    "SEGSToImageList" : class extends Node{
        //Setters
        //set 'segs'(value : SEGS)  { super.$$link(0, value) } 
//set 'fallback_image_opt'(value : IMAGE)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.segs
		 * @param opts.fallback_image_opt}
        */
        constructor(opts:{
            'segs': SEGS,'fallback_image_opt'?: IMAGE
        }){
            super(ctx);

            super.$$link("segs", opts['segs'])
super.$$link("fallback_image_opt", opts['fallback_image_opt'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "SEGSToImageList"
        }
},

    /**
     * SEGS to Mask List from ImpactPack/Util
     * @desc 
    */
    "ImpactSEGSToMaskList" : class extends Node{
        //Setters
        //set 'segs'(value : SEGS)  { super.$$link(0, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.segs}
        */
        constructor(opts:{
            'segs': SEGS
        }){
            super(ctx);

            super.$$link("segs", opts['segs'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactSEGSToMaskList"
        }
},

    /**
     * SEGS to Mask Batch from ImpactPack/Util
     * @desc 
    */
    "ImpactSEGSToMaskBatch" : class extends Node{
        //Setters
        //set 'segs'(value : SEGS)  { super.$$link(0, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.segs}
        */
        constructor(opts:{
            'segs': SEGS
        }){
            super(ctx);

            super.$$link("segs", opts['segs'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactSEGSToMaskBatch"
        }
},

    /**
     * SEGS Concat from ImpactPack/Util
     * @desc 
    */
    "ImpactSEGSConcat" : class extends Node{
        //Setters
        //set 'segs1'(value : SEGS)  { super.$$link(0, value) } 

        //Getters
        get 'SEGS'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }

        /**
          * Constructor
		 * @param opts.segs1}
        */
        constructor(opts:{
            'segs1': SEGS
        }){
            super(ctx);

            super.$$link("segs1", opts['segs1'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactSEGSConcat"
        }
},

    /**
     * Picker (SEGS) from ImpactPack/Util
     * @desc 
    */
    "ImpactSEGSPicker" : class extends Node{
        //Setters
        //set 'picks'(value : STRING)  { super.$$link(0, value) } 
//set 'segs'(value : SEGS)  { super.$$link(1, value) } 
//set 'fallback_image_opt'(value : IMAGE)  { super.$$link(2, value) } 

        //Getters
        get 'SEGS'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }

        /**
          * Constructor
		 * @param opts.picks
		 * @param opts.segs
		 * @param opts.fallback_image_opt}
        */
        constructor(opts:{
            'picks': STRING,'segs': SEGS,'fallback_image_opt'?: IMAGE
        }){
            super(ctx);

            super.$$link("picks", opts['picks'])
super.$$link("segs", opts['segs'])
super.$$link("fallback_image_opt", opts['fallback_image_opt'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactSEGSPicker"
        }
},

    /**
     * Make Tile SEGS from ImpactPack/__for_testing
     * @desc 
    */
    "ImpactMakeTileSEGS" : class extends Node{
        //Setters
        //set 'images'(value : IMAGE)  { super.$$link(0, value) } 
//set 'bbox_size'(value : INT)  { super.$$link(1, value) } 
//set 'crop_factor'(value : FLOAT)  { super.$$link(2, value) } 
//set 'min_overlap'(value : INT)  { super.$$link(3, value) } 
//set 'filter_segs_dilation'(value : INT)  { super.$$link(4, value) } 
//set 'mask_irregularity'(value : FLOAT)  { super.$$link(5, value) } 
//set 'irregular_mask_mode'(value : 'Reuse fast'|'Reuse quality'|'All random fast'|'All random quality'| $dyn)  { super.$$link(6, value) } 
//set 'filter_in_segs_opt'(value : SEGS)  { super.$$link(7, value) } 
//set 'filter_out_segs_opt'(value : SEGS)  { super.$$link(8, value) } 

        //Getters
        get 'SEGS'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }

        /**
          * Constructor
		 * @param opts.images
		 * @param opts.bbox_size default: 512 max: 4096 min: 64 step: 8
		 * @param opts.crop_factor default: 3 max: 10 min: 1 step: 0.01
		 * @param opts.min_overlap default: 5 step: 1
		 * @param opts.filter_segs_dilation default: 20 max: 255 min: -255 step: 1
		 * @param opts.mask_irregularity step: 0.01
		 * @param opts.irregular_mask_mode
		 * @param opts.filter_in_segs_opt
		 * @param opts.filter_out_segs_opt}
        */
        constructor(opts:{
            'images': IMAGE,'bbox_size'?: INT,'crop_factor'?: FLOAT,'min_overlap'?: INT,'filter_segs_dilation'?: INT,'mask_irregularity'?: FLOAT,'irregular_mask_mode': 'Reuse fast'|'Reuse quality'|'All random fast'|'All random quality'| $dyn,'filter_in_segs_opt'?: SEGS,'filter_out_segs_opt'?: SEGS
        }){
            super(ctx);

            super.$$link("images", opts['images'])
super.$$link("bbox_size", opts['bbox_size']??tmp["ImpactMakeTileSEGS"].defaults['bbox_size'])
super.$$link("crop_factor", opts['crop_factor']??tmp["ImpactMakeTileSEGS"].defaults['crop_factor'])
super.$$link("min_overlap", opts['min_overlap']??tmp["ImpactMakeTileSEGS"].defaults['min_overlap'])
super.$$link("filter_segs_dilation", opts['filter_segs_dilation']??tmp["ImpactMakeTileSEGS"].defaults['filter_segs_dilation'])
super.$$link("mask_irregularity", opts['mask_irregularity']??tmp["ImpactMakeTileSEGS"].defaults['mask_irregularity'])
super.$$link("irregular_mask_mode", opts['irregular_mask_mode'])
super.$$link("filter_in_segs_opt", opts['filter_in_segs_opt'])
super.$$link("filter_out_segs_opt", opts['filter_out_segs_opt'])
}

        static defaults = {
    'bbox_size':  512,
'crop_factor':  3,
'min_overlap':  5,
'filter_segs_dilation':  20,
'mask_irregularity':  0
}
        protected override $$type(){
            return "ImpactMakeTileSEGS"
        }
},

    /**
     * SEGSDetailer For AnimateDiff (SEGS/pipe) from ImpactPack/Detailer
     * @desc 
    */
    "SEGSDetailerForAnimateDiff" : class extends Node{
        //Setters
        //set 'image_frames'(value : IMAGE)  { super.$$link(0, value) } 
//set 'segs'(value : SEGS)  { super.$$link(1, value) } 
//set 'guide_size'(value : FLOAT)  { super.$$link(2, value) } 
//set 'guide_size_for'(value : BOOLEAN)  { super.$$link(3, value) } 
//set 'max_size'(value : FLOAT)  { super.$$link(4, value) } 
//set 'seed'(value : INT)  { super.$$link(5, value) } 
//set 'steps'(value : INT)  { super.$$link(6, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(7, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(8, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn)  { super.$$link(9, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(10, value) } 
//set 'basic_pipe'(value : BASIC_PIPE)  { super.$$link(11, value) } 
//set 'refiner_ratio'(value : FLOAT)  { super.$$link(12, value) } 
//set 'refiner_basic_pipe_opt'(value : BASIC_PIPE)  { super.$$link(13, value) } 
//set 'noise_mask_feather'(value : INT)  { super.$$link(14, value) } 
//set 'scheduler_func_opt'(value : SCHEDULER_FUNC)  { super.$$link(15, value) } 

        //Getters
        get 'segs'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }
get 'cnet_images'() : IMAGE { return [this.$uid.toString(), 1]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image_frames
		 * @param opts.segs
		 * @param opts.guide_size default: 512 max: 16384 min: 64 step: 8
		 * @param opts.guide_size_for default: true
		 * @param opts.max_size default: 768 max: 16384 min: 64 step: 8
		 * @param opts.seed
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.cfg default: 8
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.denoise default: 0.5 max: 1 min: 0.0001 step: 0.01
		 * @param opts.basic_pipe
		 * @param opts.refiner_ratio default: 0.2
		 * @param opts.refiner_basic_pipe_opt
		 * @param opts.noise_mask_feather default: 20 step: 1
		 * @param opts.scheduler_func_opt}
        */
        constructor(opts:{
            'image_frames': IMAGE,'segs': SEGS,'guide_size'?: FLOAT,'guide_size_for'?: BOOLEAN,'max_size'?: FLOAT,'seed'?: INT,'steps'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn,'denoise'?: FLOAT,'basic_pipe': BASIC_PIPE,'refiner_ratio'?: FLOAT,'refiner_basic_pipe_opt'?: BASIC_PIPE,'noise_mask_feather'?: INT,'scheduler_func_opt'?: SCHEDULER_FUNC
        }){
            super(ctx);

            super.$$link("image_frames", opts['image_frames'])
super.$$link("segs", opts['segs'])
super.$$link("guide_size", opts['guide_size']??tmp["SEGSDetailerForAnimateDiff"].defaults['guide_size'])
super.$$link("guide_size_for", opts['guide_size_for']??tmp["SEGSDetailerForAnimateDiff"].defaults['guide_size_for'])
super.$$link("max_size", opts['max_size']??tmp["SEGSDetailerForAnimateDiff"].defaults['max_size'])
super.$$link("seed", opts['seed']??tmp["SEGSDetailerForAnimateDiff"].defaults['seed'])
super.$$link("steps", opts['steps']??tmp["SEGSDetailerForAnimateDiff"].defaults['steps'])
super.$$link("cfg", opts['cfg']??tmp["SEGSDetailerForAnimateDiff"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("denoise", opts['denoise']??tmp["SEGSDetailerForAnimateDiff"].defaults['denoise'])
super.$$link("basic_pipe", opts['basic_pipe'])
super.$$link("refiner_ratio", opts['refiner_ratio']??tmp["SEGSDetailerForAnimateDiff"].defaults['refiner_ratio'])
super.$$link("refiner_basic_pipe_opt", opts['refiner_basic_pipe_opt'])
super.$$link("noise_mask_feather", opts['noise_mask_feather']??tmp["SEGSDetailerForAnimateDiff"].defaults['noise_mask_feather'])
super.$$link("scheduler_func_opt", opts['scheduler_func_opt'])
}

        static defaults = {
    'guide_size':  512,
'guide_size_for':  true,
'max_size':  768,
'seed':  0,
'steps':  20,
'cfg':  8,
'denoise':  0.5,
'refiner_ratio':  0.2,
'noise_mask_feather':  20
}
        protected override $$type(){
            return "SEGSDetailerForAnimateDiff"
        }
},

    /**
     * KSampler (pipe) from ImpactPack/sampling
     * @desc 
    */
    "ImpactKSamplerBasicPipe" : class extends Node{
        //Setters
        //set 'basic_pipe'(value : BASIC_PIPE)  { super.$$link(0, value) } 
//set 'seed'(value : INT)  { super.$$link(1, value) } 
//set 'steps'(value : INT)  { super.$$link(2, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(3, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(4, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn)  { super.$$link(5, value) } 
//set 'latent_image'(value : LATENT)  { super.$$link(6, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(7, value) } 
//set 'scheduler_func_opt'(value : SCHEDULER_FUNC)  { super.$$link(8, value) } 

        //Getters
        get 'BASIC_PIPE'() : BASIC_PIPE { return [this.$uid.toString(), 0]  as unknown as BASIC_PIPE; }
get 'LATENT'() : LATENT { return [this.$uid.toString(), 1]  as unknown as LATENT; }
get 'VAE'() : VAE { return [this.$uid.toString(), 2]  as unknown as VAE; }

        /**
          * Constructor
		 * @param opts.basic_pipe
		 * @param opts.seed
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.cfg default: 8
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.latent_image
		 * @param opts.denoise default: 1 step: 0.01
		 * @param opts.scheduler_func_opt}
        */
        constructor(opts:{
            'basic_pipe': BASIC_PIPE,'seed'?: INT,'steps'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn,'latent_image': LATENT,'denoise'?: FLOAT,'scheduler_func_opt'?: SCHEDULER_FUNC
        }){
            super(ctx);

            super.$$link("basic_pipe", opts['basic_pipe'])
super.$$link("seed", opts['seed']??tmp["ImpactKSamplerBasicPipe"].defaults['seed'])
super.$$link("steps", opts['steps']??tmp["ImpactKSamplerBasicPipe"].defaults['steps'])
super.$$link("cfg", opts['cfg']??tmp["ImpactKSamplerBasicPipe"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("latent_image", opts['latent_image'])
super.$$link("denoise", opts['denoise']??tmp["ImpactKSamplerBasicPipe"].defaults['denoise'])
super.$$link("scheduler_func_opt", opts['scheduler_func_opt'])
}

        static defaults = {
    'seed':  0,
'steps':  20,
'cfg':  8,
'denoise':  1
}
        protected override $$type(){
            return "ImpactKSamplerBasicPipe"
        }
},

    /**
     * KSampler (Advanced/pipe) from ImpactPack/sampling
     * @desc 
    */
    "ImpactKSamplerAdvancedBasicPipe" : class extends Node{
        //Setters
        //set 'basic_pipe'(value : BASIC_PIPE)  { super.$$link(0, value) } 
//set 'add_noise'(value : BOOLEAN)  { super.$$link(1, value) } 
//set 'noise_seed'(value : INT)  { super.$$link(2, value) } 
//set 'steps'(value : INT)  { super.$$link(3, value) } 
//set 'cfg'(value : FLOAT)  { super.$$link(4, value) } 
//set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn)  { super.$$link(5, value) } 
//set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn)  { super.$$link(6, value) } 
//set 'latent_image'(value : LATENT)  { super.$$link(7, value) } 
//set 'start_at_step'(value : INT)  { super.$$link(8, value) } 
//set 'end_at_step'(value : INT)  { super.$$link(9, value) } 
//set 'return_with_leftover_noise'(value : BOOLEAN)  { super.$$link(10, value) } 
//set 'scheduler_func_opt'(value : SCHEDULER_FUNC)  { super.$$link(11, value) } 

        //Getters
        get 'BASIC_PIPE'() : BASIC_PIPE { return [this.$uid.toString(), 0]  as unknown as BASIC_PIPE; }
get 'LATENT'() : LATENT { return [this.$uid.toString(), 1]  as unknown as LATENT; }
get 'VAE'() : VAE { return [this.$uid.toString(), 2]  as unknown as VAE; }

        /**
          * Constructor
		 * @param opts.basic_pipe
		 * @param opts.add_noise default: true
		 * @param opts.noise_seed
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.cfg default: 8
		 * @param opts.sampler_name
		 * @param opts.scheduler
		 * @param opts.latent_image
		 * @param opts.start_at_step
		 * @param opts.end_at_step default: 10000
		 * @param opts.return_with_leftover_noise
		 * @param opts.scheduler_func_opt}
        */
        constructor(opts:{
            'basic_pipe': BASIC_PIPE,'add_noise'?: BOOLEAN,'noise_seed'?: INT,'steps'?: INT,'cfg'?: FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'| $dyn,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn,'latent_image': LATENT,'start_at_step'?: INT,'end_at_step'?: INT,'return_with_leftover_noise'?: BOOLEAN,'scheduler_func_opt'?: SCHEDULER_FUNC
        }){
            super(ctx);

            super.$$link("basic_pipe", opts['basic_pipe'])
super.$$link("add_noise", opts['add_noise']??tmp["ImpactKSamplerAdvancedBasicPipe"].defaults['add_noise'])
super.$$link("noise_seed", opts['noise_seed']??tmp["ImpactKSamplerAdvancedBasicPipe"].defaults['noise_seed'])
super.$$link("steps", opts['steps']??tmp["ImpactKSamplerAdvancedBasicPipe"].defaults['steps'])
super.$$link("cfg", opts['cfg']??tmp["ImpactKSamplerAdvancedBasicPipe"].defaults['cfg'])
super.$$link("sampler_name", opts['sampler_name'])
super.$$link("scheduler", opts['scheduler'])
super.$$link("latent_image", opts['latent_image'])
super.$$link("start_at_step", opts['start_at_step']??tmp["ImpactKSamplerAdvancedBasicPipe"].defaults['start_at_step'])
super.$$link("end_at_step", opts['end_at_step']??tmp["ImpactKSamplerAdvancedBasicPipe"].defaults['end_at_step'])
super.$$link("return_with_leftover_noise", opts['return_with_leftover_noise']??tmp["ImpactKSamplerAdvancedBasicPipe"].defaults['return_with_leftover_noise'])
super.$$link("scheduler_func_opt", opts['scheduler_func_opt'])
}

        static defaults = {
    'add_noise':  true,
'noise_seed':  0,
'steps':  20,
'cfg':  8,
'start_at_step':  0,
'end_at_step':  10000,
'return_with_leftover_noise':  false
}
        protected override $$type(){
            return "ImpactKSamplerAdvancedBasicPipe"
        }
},

    /**
     * Reencode Latent from ImpactPack/Util
     * @desc 
    */
    "ReencodeLatent" : class extends Node{
        //Setters
        //set 'samples'(value : LATENT)  { super.$$link(0, value) } 
//set 'tile_mode'(value : 'None'|'Both'|'Decode(input) only'|'Encode(output) only'| $dyn)  { super.$$link(1, value) } 
//set 'input_vae'(value : VAE)  { super.$$link(2, value) } 
//set 'output_vae'(value : VAE)  { super.$$link(3, value) } 
//set 'tile_size'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.samples
		 * @param opts.tile_mode
		 * @param opts.input_vae
		 * @param opts.output_vae
		 * @param opts.tile_size default: 512 max: 4096 min: 320 step: 64}
        */
        constructor(opts:{
            'samples': LATENT,'tile_mode': 'None'|'Both'|'Decode(input) only'|'Encode(output) only'| $dyn,'input_vae': VAE,'output_vae': VAE,'tile_size'?: INT
        }){
            super(ctx);

            super.$$link("samples", opts['samples'])
super.$$link("tile_mode", opts['tile_mode'])
super.$$link("input_vae", opts['input_vae'])
super.$$link("output_vae", opts['output_vae'])
super.$$link("tile_size", opts['tile_size']??tmp["ReencodeLatent"].defaults['tile_size'])
}

        static defaults = {
    'tile_size':  512
}
        protected override $$type(){
            return "ReencodeLatent"
        }
},

    /**
     * Reencode Latent (pipe) from ImpactPack/Util
     * @desc 
    */
    "ReencodeLatentPipe" : class extends Node{
        //Setters
        //set 'samples'(value : LATENT)  { super.$$link(0, value) } 
//set 'tile_mode'(value : 'None'|'Both'|'Decode(input) only'|'Encode(output) only'| $dyn)  { super.$$link(1, value) } 
//set 'input_basic_pipe'(value : BASIC_PIPE)  { super.$$link(2, value) } 
//set 'output_basic_pipe'(value : BASIC_PIPE)  { super.$$link(3, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.samples
		 * @param opts.tile_mode
		 * @param opts.input_basic_pipe
		 * @param opts.output_basic_pipe}
        */
        constructor(opts:{
            'samples': LATENT,'tile_mode': 'None'|'Both'|'Decode(input) only'|'Encode(output) only'| $dyn,'input_basic_pipe': BASIC_PIPE,'output_basic_pipe': BASIC_PIPE
        }){
            super(ctx);

            super.$$link("samples", opts['samples'])
super.$$link("tile_mode", opts['tile_mode'])
super.$$link("input_basic_pipe", opts['input_basic_pipe'])
super.$$link("output_basic_pipe", opts['output_basic_pipe'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ReencodeLatentPipe"
        }
},

    /**
     * Image batch to Image List from ImpactPack/Util
     * @desc 
    */
    "ImpactImageBatchToImageList" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image}
        */
        constructor(opts:{
            'image': IMAGE
        }){
            super(ctx);

            super.$$link("image", opts['image'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactImageBatchToImageList"
        }
},

    /**
     * Make Image List from ImpactPack/Util
     * @desc 
    */
    "ImpactMakeImageList" : class extends Node{
        //Setters
        //set 'image1'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image1}
        */
        constructor(opts:{
            'image1': IMAGE
        }){
            super(ctx);

            super.$$link("image1", opts['image1'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactMakeImageList"
        }
},

    /**
     * Make Image Batch from ImpactPack/Util
     * @desc 
    */
    "ImpactMakeImageBatch" : class extends Node{
        //Setters
        //set 'image1'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image1}
        */
        constructor(opts:{
            'image1': IMAGE
        }){
            super(ctx);

            super.$$link("image1", opts['image1'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactMakeImageBatch"
        }
},

    /**
     * RegionalSampler from ImpactPack/Regional
     * @desc 
    */
    "RegionalSampler" : class extends Node{
        //Setters
        //set 'seed'(value : INT)  { super.$$link(0, value) } 
//set 'seed_2nd'(value : INT)  { super.$$link(1, value) } 
//set 'seed_2nd_mode'(value : 'ignore'|'fixed'|'seed+seed_2nd'|'seed-seed_2nd'|'increment'|'decrement'|'randomize'| $dyn)  { super.$$link(2, value) } 
//set 'steps'(value : INT)  { super.$$link(3, value) } 
//set 'base_only_steps'(value : INT)  { super.$$link(4, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(5, value) } 
//set 'samples'(value : LATENT)  { super.$$link(6, value) } 
//set 'base_sampler'(value : KSAMPLER_ADVANCED)  { super.$$link(7, value) } 
//set 'regional_prompts'(value : REGIONAL_PROMPTS)  { super.$$link(8, value) } 
//set 'overlap_factor'(value : INT)  { super.$$link(9, value) } 
//set 'restore_latent'(value : BOOLEAN)  { super.$$link(10, value) } 
//set 'additional_mode'(value : 'DISABLE'|'ratio additional'|'ratio between'| $dyn)  { super.$$link(11, value) } 
//set 'additional_sampler'(value : 'AUTO'|'euler'|'heun'|'heunpp2'|'dpm_2'|'dpm_fast'|'dpmpp_2m'|'ddpm'| $dyn)  { super.$$link(12, value) } 
//set 'additional_sigma_ratio'(value : FLOAT)  { super.$$link(13, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.seed
		 * @param opts.seed_2nd
		 * @param opts.seed_2nd_mode
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.base_only_steps default: 2
		 * @param opts.denoise default: 1 step: 0.01
		 * @param opts.samples
		 * @param opts.base_sampler
		 * @param opts.regional_prompts
		 * @param opts.overlap_factor default: 10
		 * @param opts.restore_latent default: true
		 * @param opts.additional_mode default: "ratio between"
		 * @param opts.additional_sampler
		 * @param opts.additional_sigma_ratio default: 0.3 step: 0.01}
        */
        constructor(opts:{
            'seed'?: INT,'seed_2nd'?: INT,'seed_2nd_mode': 'ignore'|'fixed'|'seed+seed_2nd'|'seed-seed_2nd'|'increment'|'decrement'|'randomize'| $dyn,'steps'?: INT,'base_only_steps'?: INT,'denoise'?: FLOAT,'samples': LATENT,'base_sampler': KSAMPLER_ADVANCED,'regional_prompts': REGIONAL_PROMPTS,'overlap_factor'?: INT,'restore_latent'?: BOOLEAN,'additional_mode'?: 'DISABLE'|'ratio additional'|'ratio between'| $dyn,'additional_sampler': 'AUTO'|'euler'|'heun'|'heunpp2'|'dpm_2'|'dpm_fast'|'dpmpp_2m'|'ddpm'| $dyn,'additional_sigma_ratio'?: FLOAT
        }){
            super(ctx);

            super.$$link("seed", opts['seed']??tmp["RegionalSampler"].defaults['seed'])
super.$$link("seed_2nd", opts['seed_2nd']??tmp["RegionalSampler"].defaults['seed_2nd'])
super.$$link("seed_2nd_mode", opts['seed_2nd_mode'])
super.$$link("steps", opts['steps']??tmp["RegionalSampler"].defaults['steps'])
super.$$link("base_only_steps", opts['base_only_steps']??tmp["RegionalSampler"].defaults['base_only_steps'])
super.$$link("denoise", opts['denoise']??tmp["RegionalSampler"].defaults['denoise'])
super.$$link("samples", opts['samples'])
super.$$link("base_sampler", opts['base_sampler'])
super.$$link("regional_prompts", opts['regional_prompts'])
super.$$link("overlap_factor", opts['overlap_factor']??tmp["RegionalSampler"].defaults['overlap_factor'])
super.$$link("restore_latent", opts['restore_latent']??tmp["RegionalSampler"].defaults['restore_latent'])
super.$$link("additional_mode", opts['additional_mode']??tmp["RegionalSampler"].defaults['additional_mode'])
super.$$link("additional_sampler", opts['additional_sampler'])
super.$$link("additional_sigma_ratio", opts['additional_sigma_ratio']??tmp["RegionalSampler"].defaults['additional_sigma_ratio'])
}

        static defaults = {
    'seed':  0,
'seed_2nd':  0,
'steps':  20,
'base_only_steps':  2,
'denoise':  1,
'overlap_factor':  10,
'restore_latent':  true,
'additional_mode':  "ratio between",
'additional_sigma_ratio':  0.3
}
        protected override $$type(){
            return "RegionalSampler"
        }
},

    /**
     * RegionalSamplerAdvanced from ImpactPack/Regional
     * @desc 
    */
    "RegionalSamplerAdvanced" : class extends Node{
        //Setters
        //set 'add_noise'(value : BOOLEAN)  { super.$$link(0, value) } 
//set 'noise_seed'(value : INT)  { super.$$link(1, value) } 
//set 'steps'(value : INT)  { super.$$link(2, value) } 
//set 'start_at_step'(value : INT)  { super.$$link(3, value) } 
//set 'end_at_step'(value : INT)  { super.$$link(4, value) } 
//set 'overlap_factor'(value : INT)  { super.$$link(5, value) } 
//set 'restore_latent'(value : BOOLEAN)  { super.$$link(6, value) } 
//set 'return_with_leftover_noise'(value : BOOLEAN)  { super.$$link(7, value) } 
//set 'latent_image'(value : LATENT)  { super.$$link(8, value) } 
//set 'base_sampler'(value : KSAMPLER_ADVANCED)  { super.$$link(9, value) } 
//set 'regional_prompts'(value : REGIONAL_PROMPTS)  { super.$$link(10, value) } 
//set 'additional_mode'(value : 'DISABLE'|'ratio additional'|'ratio between'| $dyn)  { super.$$link(11, value) } 
//set 'additional_sampler'(value : 'AUTO'|'euler'|'heun'|'heunpp2'|'dpm_2'|'dpm_fast'|'dpmpp_2m'|'ddpm'| $dyn)  { super.$$link(12, value) } 
//set 'additional_sigma_ratio'(value : FLOAT)  { super.$$link(13, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.add_noise default: true
		 * @param opts.noise_seed
		 * @param opts.steps default: 20 max: 10000 min: 1
		 * @param opts.start_at_step
		 * @param opts.end_at_step default: 10000
		 * @param opts.overlap_factor default: 10
		 * @param opts.restore_latent default: true
		 * @param opts.return_with_leftover_noise
		 * @param opts.latent_image
		 * @param opts.base_sampler
		 * @param opts.regional_prompts
		 * @param opts.additional_mode default: "ratio between"
		 * @param opts.additional_sampler
		 * @param opts.additional_sigma_ratio default: 0.3 step: 0.01}
        */
        constructor(opts:{
            'add_noise'?: BOOLEAN,'noise_seed'?: INT,'steps'?: INT,'start_at_step'?: INT,'end_at_step'?: INT,'overlap_factor'?: INT,'restore_latent'?: BOOLEAN,'return_with_leftover_noise'?: BOOLEAN,'latent_image': LATENT,'base_sampler': KSAMPLER_ADVANCED,'regional_prompts': REGIONAL_PROMPTS,'additional_mode'?: 'DISABLE'|'ratio additional'|'ratio between'| $dyn,'additional_sampler': 'AUTO'|'euler'|'heun'|'heunpp2'|'dpm_2'|'dpm_fast'|'dpmpp_2m'|'ddpm'| $dyn,'additional_sigma_ratio'?: FLOAT
        }){
            super(ctx);

            super.$$link("add_noise", opts['add_noise']??tmp["RegionalSamplerAdvanced"].defaults['add_noise'])
super.$$link("noise_seed", opts['noise_seed']??tmp["RegionalSamplerAdvanced"].defaults['noise_seed'])
super.$$link("steps", opts['steps']??tmp["RegionalSamplerAdvanced"].defaults['steps'])
super.$$link("start_at_step", opts['start_at_step']??tmp["RegionalSamplerAdvanced"].defaults['start_at_step'])
super.$$link("end_at_step", opts['end_at_step']??tmp["RegionalSamplerAdvanced"].defaults['end_at_step'])
super.$$link("overlap_factor", opts['overlap_factor']??tmp["RegionalSamplerAdvanced"].defaults['overlap_factor'])
super.$$link("restore_latent", opts['restore_latent']??tmp["RegionalSamplerAdvanced"].defaults['restore_latent'])
super.$$link("return_with_leftover_noise", opts['return_with_leftover_noise']??tmp["RegionalSamplerAdvanced"].defaults['return_with_leftover_noise'])
super.$$link("latent_image", opts['latent_image'])
super.$$link("base_sampler", opts['base_sampler'])
super.$$link("regional_prompts", opts['regional_prompts'])
super.$$link("additional_mode", opts['additional_mode']??tmp["RegionalSamplerAdvanced"].defaults['additional_mode'])
super.$$link("additional_sampler", opts['additional_sampler'])
super.$$link("additional_sigma_ratio", opts['additional_sigma_ratio']??tmp["RegionalSamplerAdvanced"].defaults['additional_sigma_ratio'])
}

        static defaults = {
    'add_noise':  true,
'noise_seed':  0,
'steps':  20,
'start_at_step':  0,
'end_at_step':  10000,
'overlap_factor':  10,
'restore_latent':  true,
'return_with_leftover_noise':  false,
'additional_mode':  "ratio between",
'additional_sigma_ratio':  0.3
}
        protected override $$type(){
            return "RegionalSamplerAdvanced"
        }
},

    /**
     * CombineRegionalPrompts from ImpactPack/Regional
     * @desc 
    */
    "CombineRegionalPrompts" : class extends Node{
        //Setters
        //set 'regional_prompts1'(value : REGIONAL_PROMPTS)  { super.$$link(0, value) } 

        //Getters
        get 'REGIONAL_PROMPTS'() : REGIONAL_PROMPTS { return [this.$uid.toString(), 0]  as unknown as REGIONAL_PROMPTS; }

        /**
          * Constructor
		 * @param opts.regional_prompts1}
        */
        constructor(opts:{
            'regional_prompts1': REGIONAL_PROMPTS
        }){
            super(ctx);

            super.$$link("regional_prompts1", opts['regional_prompts1'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "CombineRegionalPrompts"
        }
},

    /**
     * RegionalPrompt from ImpactPack/Regional
     * @desc 
    */
    "RegionalPrompt" : class extends Node{
        //Setters
        //set 'mask'(value : MASK)  { super.$$link(0, value) } 
//set 'advanced_sampler'(value : KSAMPLER_ADVANCED)  { super.$$link(1, value) } 
//set 'variation_seed'(value : INT)  { super.$$link(2, value) } 
//set 'variation_strength'(value : FLOAT)  { super.$$link(3, value) } 
//set 'variation_method'(value : 'linear'|'slerp'| $dyn)  { super.$$link(4, value) } 

        //Getters
        get 'REGIONAL_PROMPTS'() : REGIONAL_PROMPTS { return [this.$uid.toString(), 0]  as unknown as REGIONAL_PROMPTS; }

        /**
          * Constructor
		 * @param opts.mask
		 * @param opts.advanced_sampler
		 * @param opts.variation_seed
		 * @param opts.variation_strength step: 0.01
		 * @param opts.variation_method}
        */
        constructor(opts:{
            'mask': MASK,'advanced_sampler': KSAMPLER_ADVANCED,'variation_seed'?: INT,'variation_strength'?: FLOAT,'variation_method'?: 'linear'|'slerp'| $dyn
        }){
            super(ctx);

            super.$$link("mask", opts['mask'])
super.$$link("advanced_sampler", opts['advanced_sampler'])
super.$$link("variation_seed", opts['variation_seed']??tmp["RegionalPrompt"].defaults['variation_seed'])
super.$$link("variation_strength", opts['variation_strength']??tmp["RegionalPrompt"].defaults['variation_strength'])
super.$$link("variation_method", opts['variation_method'])
}

        static defaults = {
    'variation_seed':  0,
'variation_strength':  0
}
        protected override $$type(){
            return "RegionalPrompt"
        }
},

    /**
     * Combine Conditionings from ImpactPack/Util
     * @desc 
    */
    "ImpactCombineConditionings" : class extends Node{
        //Setters
        //set 'conditioning1'(value : CONDITIONING)  { super.$$link(0, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.conditioning1}
        */
        constructor(opts:{
            'conditioning1': CONDITIONING
        }){
            super(ctx);

            super.$$link("conditioning1", opts['conditioning1'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactCombineConditionings"
        }
},

    /**
     * Concat Conditionings from ImpactPack/Util
     * @desc 
    */
    "ImpactConcatConditionings" : class extends Node{
        //Setters
        //set 'conditioning1'(value : CONDITIONING)  { super.$$link(0, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }

        /**
          * Constructor
		 * @param opts.conditioning1}
        */
        constructor(opts:{
            'conditioning1': CONDITIONING
        }){
            super(ctx);

            super.$$link("conditioning1", opts['conditioning1'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactConcatConditionings"
        }
},

    /**
     * SEGS Assign (label) from ImpactPack/Util
     * @desc 
    */
    "ImpactSEGSLabelAssign" : class extends Node{
        //Setters
        //set 'segs'(value : SEGS)  { super.$$link(0, value) } 
//set 'labels'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'SEGS'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }

        /**
          * Constructor
		 * @param opts.segs
		 * @param opts.labels}
        */
        constructor(opts:{
            'segs': SEGS,'labels': STRING
        }){
            super(ctx);

            super.$$link("segs", opts['segs'])
super.$$link("labels", opts['labels'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactSEGSLabelAssign"
        }
},

    /**
     * SEGS Filter (label) from ImpactPack/Util
     * @desc 
    */
    "ImpactSEGSLabelFilter" : class extends Node{
        //Setters
        //set 'segs'(value : SEGS)  { super.$$link(0, value) } 
//set 'preset'(value : 'all'|'hand'|'face'|'mouth'|'eyes'|'eyebrows'|'pupils'|'left_eyebrow'|'left_eye'|'left_pupil'|'right_eyebrow'|'right_eye'|'right_pupil'|'short_sleeved_shirt'|'long_sleeved_shirt'|'short_sleeved_outwear'|'long_sleeved_outwear'|'vest'|'sling'|'shorts'|'trousers'|'skirt'|'short_sleeved_dress'|'long_sleeved_dress'|'vest_dress'|'sling_dress'|'person'|'bicycle'|'car'|'motorcycle'|'airplane'|'bus'|'train'|'truck'|'boat'|'traffic light'|'fire hydrant'|'stop sign'|'parking meter'|'bench'|'bird'|'cat'|'dog'|'horse'|'sheep'|'cow'|'elephant'|'bear'|'zebra'|'giraffe'|'backpack'|'umbrella'|'handbag'|'tie'|'suitcase'|'frisbee'|'skis'|'snowboard'|'sports ball'|'kite'|'baseball bat'|'baseball glove'|'skateboard'|'surfboard'|'tennis racket'|'bottle'|'wine glass'|'cup'|'fork'|'knife'|'spoon'|'bowl'|'banana'|'apple'|'sandwich'|'orange'|'broccoli'|'carrot'|'hot dog'|'pizza'|'donut'|'cake'|'chair'|'couch'|'potted plant'|'bed'|'dining table'|'toilet'|'tv'|'laptop'|'mouse'|'remote'|'keyboard'|'cell phone'|'microwave'|'oven'|'toaster'|'sink'|'refrigerator'|'book'|'clock'|'vase'|'scissors'|'teddy bear'|'hair drier'|'toothbrush'| $dyn)  { super.$$link(1, value) } 
//set 'labels'(value : STRING)  { super.$$link(2, value) } 

        //Getters
        get 'filtered_SEGS'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }
get 'remained_SEGS'() : SEGS { return [this.$uid.toString(), 1]  as unknown as SEGS; }

        /**
          * Constructor
		 * @param opts.segs
		 * @param opts.preset
		 * @param opts.labels}
        */
        constructor(opts:{
            'segs': SEGS,'preset': 'all'|'hand'|'face'|'mouth'|'eyes'|'eyebrows'|'pupils'|'left_eyebrow'|'left_eye'|'left_pupil'|'right_eyebrow'|'right_eye'|'right_pupil'|'short_sleeved_shirt'|'long_sleeved_shirt'|'short_sleeved_outwear'|'long_sleeved_outwear'|'vest'|'sling'|'shorts'|'trousers'|'skirt'|'short_sleeved_dress'|'long_sleeved_dress'|'vest_dress'|'sling_dress'|'person'|'bicycle'|'car'|'motorcycle'|'airplane'|'bus'|'train'|'truck'|'boat'|'traffic light'|'fire hydrant'|'stop sign'|'parking meter'|'bench'|'bird'|'cat'|'dog'|'horse'|'sheep'|'cow'|'elephant'|'bear'|'zebra'|'giraffe'|'backpack'|'umbrella'|'handbag'|'tie'|'suitcase'|'frisbee'|'skis'|'snowboard'|'sports ball'|'kite'|'baseball bat'|'baseball glove'|'skateboard'|'surfboard'|'tennis racket'|'bottle'|'wine glass'|'cup'|'fork'|'knife'|'spoon'|'bowl'|'banana'|'apple'|'sandwich'|'orange'|'broccoli'|'carrot'|'hot dog'|'pizza'|'donut'|'cake'|'chair'|'couch'|'potted plant'|'bed'|'dining table'|'toilet'|'tv'|'laptop'|'mouse'|'remote'|'keyboard'|'cell phone'|'microwave'|'oven'|'toaster'|'sink'|'refrigerator'|'book'|'clock'|'vase'|'scissors'|'teddy bear'|'hair drier'|'toothbrush'| $dyn,'labels': STRING
        }){
            super(ctx);

            super.$$link("segs", opts['segs'])
super.$$link("preset", opts['preset'])
super.$$link("labels", opts['labels'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactSEGSLabelFilter"
        }
},

    /**
     * SEGS Filter (range) from ImpactPack/Util
     * @desc 
    */
    "ImpactSEGSRangeFilter" : class extends Node{
        //Setters
        //set 'segs'(value : SEGS)  { super.$$link(0, value) } 
//set 'target'(value : 'area(=w*h)'|'width'|'height'|'x1'|'y1'|'x2'|'y2'|'length_percent'|'confidence(0-100)'| $dyn)  { super.$$link(1, value) } 
//set 'mode'(value : BOOLEAN)  { super.$$link(2, value) } 
//set 'min_value'(value : INT)  { super.$$link(3, value) } 
//set 'max_value'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'filtered_SEGS'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }
get 'remained_SEGS'() : SEGS { return [this.$uid.toString(), 1]  as unknown as SEGS; }

        /**
          * Constructor
		 * @param opts.segs
		 * @param opts.target
		 * @param opts.mode default: true
		 * @param opts.min_value step: 1
		 * @param opts.max_value default: 67108864 step: 1}
        */
        constructor(opts:{
            'segs': SEGS,'target': 'area(=w*h)'|'width'|'height'|'x1'|'y1'|'x2'|'y2'|'length_percent'|'confidence(0-100)'| $dyn,'mode'?: BOOLEAN,'min_value'?: INT,'max_value'?: INT
        }){
            super(ctx);

            super.$$link("segs", opts['segs'])
super.$$link("target", opts['target'])
super.$$link("mode", opts['mode']??tmp["ImpactSEGSRangeFilter"].defaults['mode'])
super.$$link("min_value", opts['min_value']??tmp["ImpactSEGSRangeFilter"].defaults['min_value'])
super.$$link("max_value", opts['max_value']??tmp["ImpactSEGSRangeFilter"].defaults['max_value'])
}

        static defaults = {
    'mode':  true,
'min_value':  0,
'max_value':  67108864
}
        protected override $$type(){
            return "ImpactSEGSRangeFilter"
        }
},

    /**
     * SEGS Filter (ordered) from ImpactPack/Util
     * @desc 
    */
    "ImpactSEGSOrderedFilter" : class extends Node{
        //Setters
        //set 'segs'(value : SEGS)  { super.$$link(0, value) } 
//set 'target'(value : 'area(=w*h)'|'width'|'height'|'x1'|'y1'|'x2'|'y2'|'confidence'| $dyn)  { super.$$link(1, value) } 
//set 'order'(value : BOOLEAN)  { super.$$link(2, value) } 
//set 'take_start'(value : INT)  { super.$$link(3, value) } 
//set 'take_count'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'filtered_SEGS'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }
get 'remained_SEGS'() : SEGS { return [this.$uid.toString(), 1]  as unknown as SEGS; }

        /**
          * Constructor
		 * @param opts.segs
		 * @param opts.target
		 * @param opts.order default: true
		 * @param opts.take_start step: 1
		 * @param opts.take_count default: 1 step: 1}
        */
        constructor(opts:{
            'segs': SEGS,'target': 'area(=w*h)'|'width'|'height'|'x1'|'y1'|'x2'|'y2'|'confidence'| $dyn,'order'?: BOOLEAN,'take_start'?: INT,'take_count'?: INT
        }){
            super(ctx);

            super.$$link("segs", opts['segs'])
super.$$link("target", opts['target'])
super.$$link("order", opts['order']??tmp["ImpactSEGSOrderedFilter"].defaults['order'])
super.$$link("take_start", opts['take_start']??tmp["ImpactSEGSOrderedFilter"].defaults['take_start'])
super.$$link("take_count", opts['take_count']??tmp["ImpactSEGSOrderedFilter"].defaults['take_count'])
}

        static defaults = {
    'order':  true,
'take_start':  0,
'take_count':  1
}
        protected override $$type(){
            return "ImpactSEGSOrderedFilter"
        }
},

    /**
     * ImpactCompare from ImpactPack/Logic
     * @desc 
    */
    "ImpactCompare" : class extends Node{
        //Setters
        //set 'cmp'(value : 'a = b'|'a <> b'|'a > b'|'a < b'|'a >= b'|'a <= b'|'tt'|'ff'| $dyn)  { super.$$link(0, value) } 
//set 'a'(value : ANY)  { super.$$link(1, value) } 
//set 'b'(value : ANY)  { super.$$link(2, value) } 

        //Getters
        get 'BOOLEAN'() : BOOLEAN { return [this.$uid.toString(), 0]  as unknown as BOOLEAN; }

        /**
          * Constructor
		 * @param opts.cmp
		 * @param opts.a
		 * @param opts.b}
        */
        constructor(opts:{
            'cmp': 'a = b'|'a <> b'|'a > b'|'a < b'|'a >= b'|'a <= b'|'tt'|'ff'| $dyn,'a': ANY,'b': ANY
        }){
            super(ctx);

            super.$$link("cmp", opts['cmp'])
super.$$link("a", opts['a'])
super.$$link("b", opts['b'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactCompare"
        }
},

    /**
     * ImpactConditionalBranch from ImpactPack/Logic
     * @desc 
    */
    "ImpactConditionalBranch" : class extends Node{
        //Setters
        //set 'cond'(value : BOOLEAN)  { super.$$link(0, value) } 
//set 'tt_value'(value : ANY)  { super.$$link(1, value) } 
//set 'ff_value'(value : ANY)  { super.$$link(2, value) } 

        //Getters
        get '*'() : ANY { return [this.$uid.toString(), 0]  as unknown as ANY; }

        /**
          * Constructor
		 * @param opts.cond
		 * @param opts.tt_value
		 * @param opts.ff_value}
        */
        constructor(opts:{
            'cond': BOOLEAN,'tt_value': ANY,'ff_value': ANY
        }){
            super(ctx);

            super.$$link("cond", opts['cond'])
super.$$link("tt_value", opts['tt_value'])
super.$$link("ff_value", opts['ff_value'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactConditionalBranch"
        }
},

    /**
     * ImpactConditionalBranchSelMode from ImpactPack/Logic
     * @desc 
    */
    "ImpactConditionalBranchSelMode" : class extends Node{
        //Setters
        //set 'cond'(value : BOOLEAN)  { super.$$link(0, value) } 
//set 'sel_mode'(value : BOOLEAN)  { super.$$link(1, value) } 
//set 'tt_value'(value : ANY)  { super.$$link(2, value) } 
//set 'ff_value'(value : ANY)  { super.$$link(3, value) } 

        //Getters
        get '*'() : ANY { return [this.$uid.toString(), 0]  as unknown as ANY; }

        /**
          * Constructor
		 * @param opts.cond
		 * @param opts.sel_mode default: true
		 * @param opts.tt_value
		 * @param opts.ff_value}
        */
        constructor(opts:{
            'cond': BOOLEAN,'sel_mode'?: BOOLEAN,'tt_value'?: ANY,'ff_value'?: ANY
        }){
            super(ctx);

            super.$$link("cond", opts['cond'])
super.$$link("sel_mode", opts['sel_mode']??tmp["ImpactConditionalBranchSelMode"].defaults['sel_mode'])
super.$$link("tt_value", opts['tt_value'])
super.$$link("ff_value", opts['ff_value'])
}

        static defaults = {
    'sel_mode':  true
}
        protected override $$type(){
            return "ImpactConditionalBranchSelMode"
        }
},

    /**
     * ImpactIfNone from ImpactPack/Logic
     * @desc 
    */
    "ImpactIfNone" : class extends Node{
        //Setters
        //set 'signal'(value : ANY)  { super.$$link(0, value) } 
//set 'any_input'(value : ANY)  { super.$$link(1, value) } 

        //Getters
        get 'signal_opt'() : ANY { return [this.$uid.toString(), 0]  as unknown as ANY; }
get 'bool'() : BOOLEAN { return [this.$uid.toString(), 1]  as unknown as BOOLEAN; }

        /**
          * Constructor
		 * @param opts.signal
		 * @param opts.any_input}
        */
        constructor(opts:{
            'signal'?: ANY,'any_input'?: ANY
        }){
            super(ctx);

            super.$$link("signal", opts['signal'])
super.$$link("any_input", opts['any_input'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactIfNone"
        }
},

    /**
     * ImpactConvertDataType from ImpactPack/Logic
     * @desc 
    */
    "ImpactConvertDataType" : class extends Node{
        //Setters
        //set 'value'(value : ANY)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }
get 'FLOAT'() : FLOAT { return [this.$uid.toString(), 1]  as unknown as FLOAT; }
get 'INT'() : INT { return [this.$uid.toString(), 2]  as unknown as INT; }
get 'BOOLEAN'() : BOOLEAN { return [this.$uid.toString(), 3]  as unknown as BOOLEAN; }

        /**
          * Constructor
		 * @param opts.value}
        */
        constructor(opts:{
            'value': ANY
        }){
            super(ctx);

            super.$$link("value", opts['value'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactConvertDataType"
        }
},

    /**
     * ImpactLogicalOperators from ImpactPack/Logic
     * @desc 
    */
    "ImpactLogicalOperators" : class extends Node{
        //Setters
        //set 'operator'(value : 'and'|'or'|'xor'| $dyn)  { super.$$link(0, value) } 
//set 'bool_a'(value : BOOLEAN)  { super.$$link(1, value) } 
//set 'bool_b'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'BOOLEAN'() : BOOLEAN { return [this.$uid.toString(), 0]  as unknown as BOOLEAN; }

        /**
          * Constructor
		 * @param opts.operator
		 * @param opts.bool_a
		 * @param opts.bool_b}
        */
        constructor(opts:{
            'operator': 'and'|'or'|'xor'| $dyn,'bool_a': BOOLEAN,'bool_b': BOOLEAN
        }){
            super(ctx);

            super.$$link("operator", opts['operator'])
super.$$link("bool_a", opts['bool_a'])
super.$$link("bool_b", opts['bool_b'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactLogicalOperators"
        }
},

    /**
     * ImpactInt from ImpactPack/Logic
     * @desc 
    */
    "ImpactInt" : class extends Node{
        //Setters
        //set 'value'(value : INT)  { super.$$link(0, value) } 

        //Getters
        get 'INT'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.value step: 1}
        */
        constructor(opts:{
            'value'?: INT
        }){
            super(ctx);

            super.$$link("value", opts['value']??tmp["ImpactInt"].defaults['value'])
}

        static defaults = {
    'value':  0
}
        protected override $$type(){
            return "ImpactInt"
        }
},

    /**
     * ImpactFloat from ImpactPack/Logic
     * @desc 
    */
    "ImpactFloat" : class extends Node{
        //Setters
        //set 'value'(value : FLOAT)  { super.$$link(0, value) } 

        //Getters
        get 'FLOAT'() : FLOAT { return [this.$uid.toString(), 0]  as unknown as FLOAT; }

        /**
          * Constructor
		 * @param opts.value default: 1 max: 3.402823466e+38 min: -3.402823466e+38}
        */
        constructor(opts:{
            'value'?: FLOAT
        }){
            super(ctx);

            super.$$link("value", opts['value']??tmp["ImpactFloat"].defaults['value'])
}

        static defaults = {
    'value':  1
}
        protected override $$type(){
            return "ImpactFloat"
        }
},

    /**
     * ImpactValueSender from ImpactPack/Logic
     * @desc 
    */
    "ImpactValueSender" : class extends Node{
        //Setters
        //set 'value'(value : ANY)  { super.$$link(0, value) } 
//set 'link_id'(value : INT)  { super.$$link(1, value) } 
//set 'signal_opt'(value : ANY)  { super.$$link(2, value) } 

        //Getters
        get 'signal'() : ANY { return [this.$uid.toString(), 0]  as unknown as ANY; }

        /**
          * Constructor
		 * @param opts.value
		 * @param opts.link_id step: 1
		 * @param opts.signal_opt}
        */
        constructor(opts:{
            'value': ANY,'link_id'?: INT,'signal_opt'?: ANY
        }){
            super(ctx);

            super.$$link("value", opts['value'])
super.$$link("link_id", opts['link_id']??tmp["ImpactValueSender"].defaults['link_id'])
super.$$link("signal_opt", opts['signal_opt'])
}

        static defaults = {
    'link_id':  0
}
        protected override $$type(){
            return "ImpactValueSender"
        }
},

    /**
     * ImpactValueReceiver from ImpactPack/Logic
     * @desc 
    */
    "ImpactValueReceiver" : class extends Node{
        //Setters
        //set 'typ'(value : 'STRING'|'INT'|'FLOAT'|'BOOLEAN'| $dyn)  { super.$$link(0, value) } 
//set 'value'(value : STRING)  { super.$$link(1, value) } 
//set 'link_id'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get '*'() : ANY { return [this.$uid.toString(), 0]  as unknown as ANY; }

        /**
          * Constructor
		 * @param opts.typ
		 * @param opts.value
		 * @param opts.link_id step: 1}
        */
        constructor(opts:{
            'typ': 'STRING'|'INT'|'FLOAT'|'BOOLEAN'| $dyn,'value'?: STRING,'link_id'?: INT
        }){
            super(ctx);

            super.$$link("typ", opts['typ'])
super.$$link("value", opts['value']??tmp["ImpactValueReceiver"].defaults['value'])
super.$$link("link_id", opts['link_id']??tmp["ImpactValueReceiver"].defaults['link_id'])
}

        static defaults = {
    'value':  "",
'link_id':  0
}
        protected override $$type(){
            return "ImpactValueReceiver"
        }
},

    /**
     * ImpactImageInfo from ImpactPack/Logic/_for_test
     * @desc 
    */
    "ImpactImageInfo" : class extends Node{
        //Setters
        //set 'value'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        get 'batch'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }
get 'height'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }
get 'width'() : INT { return [this.$uid.toString(), 2]  as unknown as INT; }
get 'channel'() : INT { return [this.$uid.toString(), 3]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.value}
        */
        constructor(opts:{
            'value': IMAGE
        }){
            super(ctx);

            super.$$link("value", opts['value'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactImageInfo"
        }
},

    /**
     * ImpactLatentInfo from ImpactPack/Logic/_for_test
     * @desc 
    */
    "ImpactLatentInfo" : class extends Node{
        //Setters
        //set 'value'(value : LATENT)  { super.$$link(0, value) } 

        //Getters
        get 'batch'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }
get 'height'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }
get 'width'() : INT { return [this.$uid.toString(), 2]  as unknown as INT; }
get 'channel'() : INT { return [this.$uid.toString(), 3]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.value}
        */
        constructor(opts:{
            'value': LATENT
        }){
            super(ctx);

            super.$$link("value", opts['value'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactLatentInfo"
        }
},

    /**
     * ImpactMinMax from ImpactPack/Logic/_for_test
     * @desc 
    */
    "ImpactMinMax" : class extends Node{
        //Setters
        //set 'mode'(value : BOOLEAN)  { super.$$link(0, value) } 
//set 'a'(value : ANY)  { super.$$link(1, value) } 
//set 'b'(value : ANY)  { super.$$link(2, value) } 

        //Getters
        get 'INT'() : INT { return [this.$uid.toString(), 0]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.mode default: true
		 * @param opts.a
		 * @param opts.b}
        */
        constructor(opts:{
            'mode'?: BOOLEAN,'a': ANY,'b': ANY
        }){
            super(ctx);

            super.$$link("mode", opts['mode']??tmp["ImpactMinMax"].defaults['mode'])
super.$$link("a", opts['a'])
super.$$link("b", opts['b'])
}

        static defaults = {
    'mode':  true
}
        protected override $$type(){
            return "ImpactMinMax"
        }
},

    /**
     * ImpactNeg from ImpactPack/Logic
     * @desc 
    */
    "ImpactNeg" : class extends Node{
        //Setters
        //set 'value'(value : BOOLEAN)  { super.$$link(0, value) } 

        //Getters
        get 'BOOLEAN'() : BOOLEAN { return [this.$uid.toString(), 0]  as unknown as BOOLEAN; }

        /**
          * Constructor
		 * @param opts.value}
        */
        constructor(opts:{
            'value': BOOLEAN
        }){
            super(ctx);

            super.$$link("value", opts['value'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactNeg"
        }
},

    /**
     * ImpactConditionalStopIteration from ImpactPack/Logic
     * @desc 
    */
    "ImpactConditionalStopIteration" : class extends Node{
        //Setters
        //set 'cond'(value : BOOLEAN)  { super.$$link(0, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.cond}
        */
        constructor(opts:{
            'cond': BOOLEAN
        }){
            super(ctx);

            super.$$link("cond", opts['cond'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactConditionalStopIteration"
        }
},

    /**
     * String Selector from ImpactPack/Util
     * @desc 
    */
    "ImpactStringSelector" : class extends Node{
        //Setters
        //set 'strings'(value : STRING)  { super.$$link(0, value) } 
//set 'multiline'(value : BOOLEAN)  { super.$$link(1, value) } 
//set 'select'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.strings
		 * @param opts.multiline
		 * @param opts.select step: 1}
        */
        constructor(opts:{
            'strings': STRING,'multiline'?: BOOLEAN,'select'?: INT
        }){
            super(ctx);

            super.$$link("strings", opts['strings'])
super.$$link("multiline", opts['multiline']??tmp["ImpactStringSelector"].defaults['multiline'])
super.$$link("select", opts['select']??tmp["ImpactStringSelector"].defaults['select'])
}

        static defaults = {
    'multiline':  false,
'select':  0
}
        protected override $$type(){
            return "ImpactStringSelector"
        }
},

    /**
     * String List to String from ImpactPack/Util
     * @desc 
    */
    "StringListToString" : class extends Node{
        //Setters
        //set 'join_with'(value : STRING)  { super.$$link(0, value) } 
//set 'string_list'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.join_with default: "\\n"
		 * @param opts.string_list}
        */
        constructor(opts:{
            'join_with'?: STRING,'string_list': STRING
        }){
            super(ctx);

            super.$$link("join_with", opts['join_with']??tmp["StringListToString"].defaults['join_with'])
super.$$link("string_list", opts['string_list'])
}

        static defaults = {
    'join_with':  "\\n"
}
        protected override $$type(){
            return "StringListToString"
        }
},

    /**
     * Wildcard Prompt from String from ImpactPack/Util
     * @desc 
    */
    "WildcardPromptFromString" : class extends Node{
        //Setters
        //set 'string'(value : STRING)  { super.$$link(0, value) } 
//set 'delimiter'(value : STRING)  { super.$$link(1, value) } 
//set 'prefix_all'(value : STRING)  { super.$$link(2, value) } 
//set 'postfix_all'(value : STRING)  { super.$$link(3, value) } 
//set 'restrict_to_tags'(value : STRING)  { super.$$link(4, value) } 
//set 'exclude_tags'(value : STRING)  { super.$$link(5, value) } 

        //Getters
        get 'wildcard'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }
get 'segs_labels'() : STRING { return [this.$uid.toString(), 1]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.string
		 * @param opts.delimiter default: "\\n"
		 * @param opts.prefix_all
		 * @param opts.postfix_all
		 * @param opts.restrict_to_tags
		 * @param opts.exclude_tags}
        */
        constructor(opts:{
            'string': STRING,'delimiter'?: STRING,'prefix_all': STRING,'postfix_all': STRING,'restrict_to_tags': STRING,'exclude_tags': STRING
        }){
            super(ctx);

            super.$$link("string", opts['string'])
super.$$link("delimiter", opts['delimiter']??tmp["WildcardPromptFromString"].defaults['delimiter'])
super.$$link("prefix_all", opts['prefix_all'])
super.$$link("postfix_all", opts['postfix_all'])
super.$$link("restrict_to_tags", opts['restrict_to_tags'])
super.$$link("exclude_tags", opts['exclude_tags'])
}

        static defaults = {
    'delimiter':  "\\n"
}
        protected override $$type(){
            return "WildcardPromptFromString"
        }
},

    /**
     * Execution Order Controller from ImpactPack/Util
     * @desc 
    */
    "ImpactExecutionOrderController" : class extends Node{
        //Setters
        //set 'signal'(value : ANY)  { super.$$link(0, value) } 
//set 'value'(value : ANY)  { super.$$link(1, value) } 

        //Getters
        get 'signal'() : ANY { return [this.$uid.toString(), 0]  as unknown as ANY; }
get 'value'() : ANY { return [this.$uid.toString(), 1]  as unknown as ANY; }

        /**
          * Constructor
		 * @param opts.signal
		 * @param opts.value}
        */
        constructor(opts:{
            'signal': ANY,'value': ANY
        }){
            super(ctx);

            super.$$link("signal", opts['signal'])
super.$$link("value", opts['value'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactExecutionOrderController"
        }
},

    /**
     * Remove Noise Mask from ImpactPack/Util
     * @desc 
    */
    "RemoveNoiseMask" : class extends Node{
        //Setters
        //set 'samples'(value : LATENT)  { super.$$link(0, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this.$uid.toString(), 0]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.samples}
        */
        constructor(opts:{
            'samples': LATENT
        }){
            super(ctx);

            super.$$link("samples", opts['samples'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "RemoveNoiseMask"
        }
},

    /**
     * ImpactLogger from ImpactPack/Debug
     * @desc 
    */
    "ImpactLogger" : class extends Node{
        //Setters
        //set 'data'(value : ANY)  { super.$$link(0, value) } 
//set 'text'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.data
		 * @param opts.text}
        */
        constructor(opts:{
            'data': ANY,'text': STRING
        }){
            super(ctx);

            super.$$link("data", opts['data'])
super.$$link("text", opts['text'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactLogger"
        }
},

    /**
     * ImpactDummyInput from ImpactPack/Debug
     * @desc 
    */
    "ImpactDummyInput" : class extends Node{
        //Setters
        

        //Getters
        get '*'() : ANY { return [this.$uid.toString(), 0]  as unknown as ANY; }

        /**
          * Constructor
}
        */
        constructor(opts:{
            
        }){
            super(ctx);

            
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactDummyInput"
        }
},

    /**
     * Queue Trigger from ImpactPack/Logic/_for_test
     * @desc 
    */
    "ImpactQueueTrigger" : class extends Node{
        //Setters
        //set 'signal'(value : ANY)  { super.$$link(0, value) } 
//set 'mode'(value : BOOLEAN)  { super.$$link(1, value) } 

        //Getters
        get 'signal_opt'() : ANY { return [this.$uid.toString(), 0]  as unknown as ANY; }

        /**
          * Constructor
		 * @param opts.signal
		 * @param opts.mode default: true}
        */
        constructor(opts:{
            'signal': ANY,'mode'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("signal", opts['signal'])
super.$$link("mode", opts['mode']??tmp["ImpactQueueTrigger"].defaults['mode'])
}

        static defaults = {
    'mode':  true
}
        protected override $$type(){
            return "ImpactQueueTrigger"
        }
},

    /**
     * Queue Trigger (Countdown) from ImpactPack/Logic/_for_test
     * @desc 
    */
    "ImpactQueueTriggerCountdown" : class extends Node{
        //Setters
        //set 'count'(value : INT)  { super.$$link(0, value) } 
//set 'total'(value : INT)  { super.$$link(1, value) } 
//set 'mode'(value : BOOLEAN)  { super.$$link(2, value) } 
//set 'signal'(value : ANY)  { super.$$link(3, value) } 

        //Getters
        get 'signal_opt'() : ANY { return [this.$uid.toString(), 0]  as unknown as ANY; }
get 'count'() : INT { return [this.$uid.toString(), 1]  as unknown as INT; }
get 'total'() : INT { return [this.$uid.toString(), 2]  as unknown as INT; }

        /**
          * Constructor
		 * @param opts.count
		 * @param opts.total default: 10 max: 18446744073709552000 min: 1
		 * @param opts.mode default: true
		 * @param opts.signal}
        */
        constructor(opts:{
            'count'?: INT,'total'?: INT,'mode'?: BOOLEAN,'signal'?: ANY
        }){
            super(ctx);

            super.$$link("count", opts['count']??tmp["ImpactQueueTriggerCountdown"].defaults['count'])
super.$$link("total", opts['total']??tmp["ImpactQueueTriggerCountdown"].defaults['total'])
super.$$link("mode", opts['mode']??tmp["ImpactQueueTriggerCountdown"].defaults['mode'])
super.$$link("signal", opts['signal'])
}

        static defaults = {
    'count':  0,
'total':  10,
'mode':  true
}
        protected override $$type(){
            return "ImpactQueueTriggerCountdown"
        }
},

    /**
     * Set Widget Value from ImpactPack/Logic/_for_test
     * @desc 
    */
    "ImpactSetWidgetValue" : class extends Node{
        //Setters
        //set 'signal'(value : ANY)  { super.$$link(0, value) } 
//set 'node_id'(value : INT)  { super.$$link(1, value) } 
//set 'widget_name'(value : STRING)  { super.$$link(2, value) } 
//set 'boolean_value'(value : BOOLEAN)  { super.$$link(3, value) } 
//set 'int_value'(value : INT)  { super.$$link(4, value) } 
//set 'float_value'(value : FLOAT)  { super.$$link(5, value) } 
//set 'string_value'(value : STRING)  { super.$$link(6, value) } 

        //Getters
        get 'signal_opt'() : ANY { return [this.$uid.toString(), 0]  as unknown as ANY; }

        /**
          * Constructor
		 * @param opts.signal
		 * @param opts.node_id
		 * @param opts.widget_name
		 * @param opts.boolean_value
		 * @param opts.int_value
		 * @param opts.float_value
		 * @param opts.string_value}
        */
        constructor(opts:{
            'signal': ANY,'node_id'?: INT,'widget_name': STRING,'boolean_value'?: BOOLEAN,'int_value'?: INT,'float_value'?: FLOAT,'string_value'?: STRING
        }){
            super(ctx);

            super.$$link("signal", opts['signal'])
super.$$link("node_id", opts['node_id']??tmp["ImpactSetWidgetValue"].defaults['node_id'])
super.$$link("widget_name", opts['widget_name'])
super.$$link("boolean_value", opts['boolean_value'])
super.$$link("int_value", opts['int_value'])
super.$$link("float_value", opts['float_value'])
super.$$link("string_value", opts['string_value'])
}

        static defaults = {
    'node_id':  0
}
        protected override $$type(){
            return "ImpactSetWidgetValue"
        }
},

    /**
     * Set Mute State from ImpactPack/Logic/_for_test
     * @desc 
    */
    "ImpactNodeSetMuteState" : class extends Node{
        //Setters
        //set 'signal'(value : ANY)  { super.$$link(0, value) } 
//set 'node_id'(value : INT)  { super.$$link(1, value) } 
//set 'set_state'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'signal_opt'() : ANY { return [this.$uid.toString(), 0]  as unknown as ANY; }

        /**
          * Constructor
		 * @param opts.signal
		 * @param opts.node_id
		 * @param opts.set_state default: true}
        */
        constructor(opts:{
            'signal': ANY,'node_id'?: INT,'set_state'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("signal", opts['signal'])
super.$$link("node_id", opts['node_id']??tmp["ImpactNodeSetMuteState"].defaults['node_id'])
super.$$link("set_state", opts['set_state']??tmp["ImpactNodeSetMuteState"].defaults['set_state'])
}

        static defaults = {
    'node_id':  0,
'set_state':  true
}
        protected override $$type(){
            return "ImpactNodeSetMuteState"
        }
},

    /**
     * Control Bridge from ImpactPack/Logic/_for_test
     * @desc 
    */
    "ImpactControlBridge" : class extends Node{
        //Setters
        //set 'value'(value : ANY)  { super.$$link(0, value) } 
//set 'mode'(value : BOOLEAN)  { super.$$link(1, value) } 
//set 'behavior'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'value'() : ANY { return [this.$uid.toString(), 0]  as unknown as ANY; }

        /**
          * Constructor
		 * @param opts.value
		 * @param opts.mode default: true
		 * @param opts.behavior default: true}
        */
        constructor(opts:{
            'value': ANY,'mode'?: BOOLEAN,'behavior'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("value", opts['value'])
super.$$link("mode", opts['mode']??tmp["ImpactControlBridge"].defaults['mode'])
super.$$link("behavior", opts['behavior']??tmp["ImpactControlBridge"].defaults['behavior'])
}

        static defaults = {
    'mode':  true,
'behavior':  true
}
        protected override $$type(){
            return "ImpactControlBridge"
        }
},

    /**
     * SEGS isn't Empty from ImpactPack/Logic
     * @desc 
    */
    "ImpactIsNotEmptySEGS" : class extends Node{
        //Setters
        //set 'segs'(value : SEGS)  { super.$$link(0, value) } 

        //Getters
        get 'BOOLEAN'() : BOOLEAN { return [this.$uid.toString(), 0]  as unknown as BOOLEAN; }

        /**
          * Constructor
		 * @param opts.segs}
        */
        constructor(opts:{
            'segs': SEGS
        }){
            super(ctx);

            super.$$link("segs", opts['segs'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactIsNotEmptySEGS"
        }
},

    /**
     * Sleep from ImpactPack/Logic/_for_test
     * @desc 
    */
    "ImpactSleep" : class extends Node{
        //Setters
        //set 'signal'(value : ANY)  { super.$$link(0, value) } 
//set 'seconds'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'signal_opt'() : ANY { return [this.$uid.toString(), 0]  as unknown as ANY; }

        /**
          * Constructor
		 * @param opts.signal
		 * @param opts.seconds default: 0.5}
        */
        constructor(opts:{
            'signal': ANY,'seconds'?: FLOAT
        }){
            super(ctx);

            super.$$link("signal", opts['signal'])
super.$$link("seconds", opts['seconds']??tmp["ImpactSleep"].defaults['seconds'])
}

        static defaults = {
    'seconds':  0.5
}
        protected override $$type(){
            return "ImpactSleep"
        }
},

    /**
     * Remote Boolean (on prompt) from ImpactPack/Logic/_for_test
     * @desc 
    */
    "ImpactRemoteBoolean" : class extends Node{
        //Setters
        //set 'node_id'(value : INT)  { super.$$link(0, value) } 
//set 'widget_name'(value : STRING)  { super.$$link(1, value) } 
//set 'value'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.node_id
		 * @param opts.widget_name
		 * @param opts.value default: true}
        */
        constructor(opts:{
            'node_id'?: INT,'widget_name': STRING,'value'?: BOOLEAN
        }){
            super(ctx);

            super.$$link("node_id", opts['node_id']??tmp["ImpactRemoteBoolean"].defaults['node_id'])
super.$$link("widget_name", opts['widget_name'])
super.$$link("value", opts['value']??tmp["ImpactRemoteBoolean"].defaults['value'])
}

        static defaults = {
    'node_id':  0,
'value':  true
}
        protected override $$type(){
            return "ImpactRemoteBoolean"
        }
},

    /**
     * Remote Int (on prompt) from ImpactPack/Logic/_for_test
     * @desc 
    */
    "ImpactRemoteInt" : class extends Node{
        //Setters
        //set 'node_id'(value : INT)  { super.$$link(0, value) } 
//set 'widget_name'(value : STRING)  { super.$$link(1, value) } 
//set 'value'(value : INT)  { super.$$link(2, value) } 

        //Getters
        

        /**
          * Constructor
		 * @param opts.node_id
		 * @param opts.widget_name
		 * @param opts.value max: 18446744073709552000 min: -18446744073709552000}
        */
        constructor(opts:{
            'node_id'?: INT,'widget_name': STRING,'value'?: INT
        }){
            super(ctx);

            super.$$link("node_id", opts['node_id']??tmp["ImpactRemoteInt"].defaults['node_id'])
super.$$link("widget_name", opts['widget_name'])
super.$$link("value", opts['value']??tmp["ImpactRemoteInt"].defaults['value'])
}

        static defaults = {
    'node_id':  0,
'value':  0
}
        protected override $$type(){
            return "ImpactRemoteInt"
        }
},

    /**
     * HF Transformers Classifier Provider from ImpactPack/HuggingFace
     * @desc 
    */
    "ImpactHFTransformersClassifierProvider" : class extends Node{
        //Setters
        //set 'preset_repo_id'(value : 'rizvandwiki/gender-classification-2'|'NTQAI/pedestrian_gender_recognition'|'Leilab/gender_class'|'ProjectPersonal/GenderClassifier'|'crangana/trained-gender'|'cledoux42/GenderNew_v002'|'ivensamdh/genderage2'|'Manual repo id'| $dyn)  { super.$$link(0, value) } 
//set 'manual_repo_id'(value : STRING)  { super.$$link(1, value) } 
//set 'device_mode'(value : 'AUTO'|'Prefer GPU'|'CPU'| $dyn)  { super.$$link(2, value) } 

        //Getters
        get 'TRANSFORMERS_CLASSIFIER'() : TRANSFORMERS_CLASSIFIER { return [this.$uid.toString(), 0]  as unknown as TRANSFORMERS_CLASSIFIER; }

        /**
          * Constructor
		 * @param opts.preset_repo_id
		 * @param opts.manual_repo_id
		 * @param opts.device_mode}
        */
        constructor(opts:{
            'preset_repo_id': 'rizvandwiki/gender-classification-2'|'NTQAI/pedestrian_gender_recognition'|'Leilab/gender_class'|'ProjectPersonal/GenderClassifier'|'crangana/trained-gender'|'cledoux42/GenderNew_v002'|'ivensamdh/genderage2'|'Manual repo id'| $dyn,'manual_repo_id': STRING,'device_mode': 'AUTO'|'Prefer GPU'|'CPU'| $dyn
        }){
            super(ctx);

            super.$$link("preset_repo_id", opts['preset_repo_id'])
super.$$link("manual_repo_id", opts['manual_repo_id'])
super.$$link("device_mode", opts['device_mode'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactHFTransformersClassifierProvider"
        }
},

    /**
     * SEGS Classify from ImpactPack/HuggingFace
     * @desc 
    */
    "ImpactSEGSClassify" : class extends Node{
        //Setters
        //set 'classifier'(value : TRANSFORMERS_CLASSIFIER)  { super.$$link(0, value) } 
//set 'segs'(value : SEGS)  { super.$$link(1, value) } 
//set 'preset_expr'(value : '#Female > #Male'|'#Female < #Male'|'female > 0.5'|'male > 0.5'|'Age16to25 > 0.1'|'Age50to69 > 0.1'|'Manual expr'| $dyn)  { super.$$link(2, value) } 
//set 'manual_expr'(value : STRING)  { super.$$link(3, value) } 
//set 'ref_image_opt'(value : IMAGE)  { super.$$link(4, value) } 

        //Getters
        get 'filtered_SEGS'() : SEGS { return [this.$uid.toString(), 0]  as unknown as SEGS; }
get 'remained_SEGS'() : SEGS { return [this.$uid.toString(), 1]  as unknown as SEGS; }
get 'detected_labels'() : STRING { return [this.$uid.toString(), 2]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.classifier
		 * @param opts.segs
		 * @param opts.preset_expr
		 * @param opts.manual_expr
		 * @param opts.ref_image_opt}
        */
        constructor(opts:{
            'classifier': TRANSFORMERS_CLASSIFIER,'segs': SEGS,'preset_expr': '#Female > #Male'|'#Female < #Male'|'female > 0.5'|'male > 0.5'|'Age16to25 > 0.1'|'Age50to69 > 0.1'|'Manual expr'| $dyn,'manual_expr': STRING,'ref_image_opt'?: IMAGE
        }){
            super(ctx);

            super.$$link("classifier", opts['classifier'])
super.$$link("segs", opts['segs'])
super.$$link("preset_expr", opts['preset_expr'])
super.$$link("manual_expr", opts['manual_expr'])
super.$$link("ref_image_opt", opts['ref_image_opt'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactSEGSClassify"
        }
},

    /**
     * Impact Scheduler Adapter from ImpactPack/Util
     * @desc 
    */
    "ImpactSchedulerAdapter" : class extends Node{
        //Setters
        //set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn)  { super.$$link(0, value) } 
//set 'extra_scheduler'(value : 'None'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'scheduler'() : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn { return [this.$uid.toString(), 0]  as unknown as 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn; }

        /**
          * Constructor
		 * @param opts.scheduler
		 * @param opts.extra_scheduler}
        */
        constructor(opts:{
            'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'beta'| $dyn,'extra_scheduler': 'None'|'AYS SDXL'|'AYS SD1'|'AYS SVD'|'GITS[coeff=1.2]'| $dyn
        }){
            super(ctx);

            super.$$link("scheduler", opts['scheduler'])
super.$$link("extra_scheduler", opts['extra_scheduler'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "ImpactSchedulerAdapter"
        }
},

    /**
     * GITSScheduler Func Provider from ImpactPack/sampling
     * @desc 
    */
    "GITSSchedulerFuncProvider" : class extends Node{
        //Setters
        //set 'coeff'(value : FLOAT)  { super.$$link(0, value) } 
//set 'denoise'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'SCHEDULER_FUNC'() : SCHEDULER_FUNC { return [this.$uid.toString(), 0]  as unknown as SCHEDULER_FUNC; }

        /**
          * Constructor
		 * @param opts.coeff default: 1.2 max: 1.5 min: 0.8 step: 0.05
		 * @param opts.denoise default: 1 step: 0.01}
        */
        constructor(opts:{
            'coeff'?: FLOAT,'denoise'?: FLOAT
        }){
            super(ctx);

            super.$$link("coeff", opts['coeff']??tmp["GITSSchedulerFuncProvider"].defaults['coeff'])
super.$$link("denoise", opts['denoise']??tmp["GITSSchedulerFuncProvider"].defaults['denoise'])
}

        static defaults = {
    'coeff':  1.2,
'denoise':  1
}
        protected override $$type(){
            return "GITSSchedulerFuncProvider"
        }
},

    /**
     * UltralyticsDetectorProvider from ImpactPack
     * @desc 
    */
    "UltralyticsDetectorProvider" : class extends Node{
        //Setters
        //set 'model_name'(value : 'bbox/face_yolov8m.pt'|'bbox/hand_yolov8s.pt'|'segm/person_yolov8m-seg.pt'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'BBOX_DETECTOR'() : BBOX_DETECTOR { return [this.$uid.toString(), 0]  as unknown as BBOX_DETECTOR; }
get 'SEGM_DETECTOR'() : SEGM_DETECTOR { return [this.$uid.toString(), 1]  as unknown as SEGM_DETECTOR; }

        /**
          * Constructor
		 * @param opts.model_name}
        */
        constructor(opts:{
            'model_name': 'bbox/face_yolov8m.pt'|'bbox/hand_yolov8s.pt'|'segm/person_yolov8m-seg.pt'| $dyn
        }){
            super(ctx);

            super.$$link("model_name", opts['model_name'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "UltralyticsDetectorProvider"
        }
},

    /**
     * FaceSwapNode from image/faceswap
     * @desc 
    */
    "FaceSwapNode" : class extends Node{
        //Setters
        //set 'face'(value : IMAGE)  { super.$$link(0, value) } 
//set 'image'(value : IMAGE)  { super.$$link(1, value) } 
//set 'source_face_index'(value : INT)  { super.$$link(2, value) } 
//set 'target_face_indices'(value : STRING)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.face
		 * @param opts.image
		 * @param opts.source_face_index step: 1
		 * @param opts.target_face_indices}
        */
        constructor(opts:{
            'face': IMAGE,'image': IMAGE,'source_face_index'?: INT,'target_face_indices': STRING
        }){
            super(ctx);

            super.$$link("face", opts['face'])
super.$$link("image", opts['image'])
super.$$link("source_face_index", opts['source_face_index']??tmp["FaceSwapNode"].defaults['source_face_index'])
super.$$link("target_face_indices", opts['target_face_indices'])
}

        static defaults = {
    'source_face_index':  0
}
        protected override $$type(){
            return "FaceSwapNode"
        }
},

    /**
     * Load Fooocus Inpaint from inpaint
     * @desc 
    */
    "INPAINT_LoadFooocusInpaint" : class extends Node{
        //Setters
        //set 'head'(value : 'fooocus_inpaint_head.pth'|'inpaint_v26.fooocus.patch'| $dyn)  { super.$$link(0, value) } 
//set 'patch'(value : 'fooocus_inpaint_head.pth'|'inpaint_v26.fooocus.patch'| $dyn)  { super.$$link(1, value) } 

        //Getters
        get 'INPAINT_PATCH'() : INPAINT_PATCH { return [this.$uid.toString(), 0]  as unknown as INPAINT_PATCH; }

        /**
          * Constructor
		 * @param opts.head
		 * @param opts.patch}
        */
        constructor(opts:{
            'head': 'fooocus_inpaint_head.pth'|'inpaint_v26.fooocus.patch'| $dyn,'patch': 'fooocus_inpaint_head.pth'|'inpaint_v26.fooocus.patch'| $dyn
        }){
            super(ctx);

            super.$$link("head", opts['head'])
super.$$link("patch", opts['patch'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "INPAINT_LoadFooocusInpaint"
        }
},

    /**
     * Apply Fooocus Inpaint from inpaint
     * @desc 
    */
    "INPAINT_ApplyFooocusInpaint" : class extends Node{
        //Setters
        //set 'model'(value : MODEL)  { super.$$link(0, value) } 
//set 'patch'(value : INPAINT_PATCH)  { super.$$link(1, value) } 
//set 'latent'(value : LATENT)  { super.$$link(2, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this.$uid.toString(), 0]  as unknown as MODEL; }

        /**
          * Constructor
		 * @param opts.model
		 * @param opts.patch
		 * @param opts.latent}
        */
        constructor(opts:{
            'model': MODEL,'patch': INPAINT_PATCH,'latent': LATENT
        }){
            super(ctx);

            super.$$link("model", opts['model'])
super.$$link("patch", opts['patch'])
super.$$link("latent", opts['latent'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "INPAINT_ApplyFooocusInpaint"
        }
},

    /**
     * VAE Encode & Inpaint Conditioning from inpaint
     * @desc 
    */
    "INPAINT_VAEEncodeInpaintConditioning" : class extends Node{
        //Setters
        //set 'positive'(value : CONDITIONING)  { super.$$link(0, value) } 
//set 'negative'(value : CONDITIONING)  { super.$$link(1, value) } 
//set 'vae'(value : VAE)  { super.$$link(2, value) } 
//set 'pixels'(value : IMAGE)  { super.$$link(3, value) } 
//set 'mask'(value : MASK)  { super.$$link(4, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this.$uid.toString(), 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this.$uid.toString(), 1]  as unknown as CONDITIONING; }
get 'latent_inpaint'() : LATENT { return [this.$uid.toString(), 2]  as unknown as LATENT; }
get 'latent_samples'() : LATENT { return [this.$uid.toString(), 3]  as unknown as LATENT; }

        /**
          * Constructor
		 * @param opts.positive
		 * @param opts.negative
		 * @param opts.vae
		 * @param opts.pixels
		 * @param opts.mask}
        */
        constructor(opts:{
            'positive': CONDITIONING,'negative': CONDITIONING,'vae': VAE,'pixels': IMAGE,'mask': MASK
        }){
            super(ctx);

            super.$$link("positive", opts['positive'])
super.$$link("negative", opts['negative'])
super.$$link("vae", opts['vae'])
super.$$link("pixels", opts['pixels'])
super.$$link("mask", opts['mask'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "INPAINT_VAEEncodeInpaintConditioning"
        }
},

    /**
     * Fill Masked Area from inpaint
     * @desc 
    */
    "INPAINT_MaskedFill" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'mask'(value : MASK)  { super.$$link(1, value) } 
//set 'fill'(value : 'neutral'|'telea'|'navier-stokes'| $dyn)  { super.$$link(2, value) } 
//set 'falloff'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.mask
		 * @param opts.fill
		 * @param opts.falloff step: 1}
        */
        constructor(opts:{
            'image': IMAGE,'mask': MASK,'fill': 'neutral'|'telea'|'navier-stokes'| $dyn,'falloff'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("mask", opts['mask'])
super.$$link("fill", opts['fill'])
super.$$link("falloff", opts['falloff']??tmp["INPAINT_MaskedFill"].defaults['falloff'])
}

        static defaults = {
    'falloff':  0
}
        protected override $$type(){
            return "INPAINT_MaskedFill"
        }
},

    /**
     * Blur Masked Area from inpaint
     * @desc 
    */
    "INPAINT_MaskedBlur" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'mask'(value : MASK)  { super.$$link(1, value) } 
//set 'blur'(value : INT)  { super.$$link(2, value) } 
//set 'falloff'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.mask
		 * @param opts.blur default: 255 max: 8191 min: 3 step: 1
		 * @param opts.falloff step: 1}
        */
        constructor(opts:{
            'image': IMAGE,'mask': MASK,'blur'?: INT,'falloff'?: INT
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("mask", opts['mask'])
super.$$link("blur", opts['blur']??tmp["INPAINT_MaskedBlur"].defaults['blur'])
super.$$link("falloff", opts['falloff']??tmp["INPAINT_MaskedBlur"].defaults['falloff'])
}

        static defaults = {
    'blur':  255,
'falloff':  0
}
        protected override $$type(){
            return "INPAINT_MaskedBlur"
        }
},

    /**
     * Load Inpaint Model from inpaint
     * @desc 
    */
    "INPAINT_LoadInpaintModel" : class extends Node{
        //Setters
        //set 'model_name'(value : 'fooocus_inpaint_head.pth'|'inpaint_v26.fooocus.patch'| $dyn)  { super.$$link(0, value) } 

        //Getters
        get 'INPAINT_MODEL'() : INPAINT_MODEL { return [this.$uid.toString(), 0]  as unknown as INPAINT_MODEL; }

        /**
          * Constructor
		 * @param opts.model_name}
        */
        constructor(opts:{
            'model_name': 'fooocus_inpaint_head.pth'|'inpaint_v26.fooocus.patch'| $dyn
        }){
            super(ctx);

            super.$$link("model_name", opts['model_name'])
}

        static defaults = {
    
}
        protected override $$type(){
            return "INPAINT_LoadInpaintModel"
        }
},

    /**
     * Inpaint (using Model) from inpaint
     * @desc 
    */
    "INPAINT_InpaintWithModel" : class extends Node{
        //Setters
        //set 'inpaint_model'(value : INPAINT_MODEL)  { super.$$link(0, value) } 
//set 'image'(value : IMAGE)  { super.$$link(1, value) } 
//set 'mask'(value : MASK)  { super.$$link(2, value) } 
//set 'seed'(value : INT)  { super.$$link(3, value) } 
//set 'optional_upscale_model'(value : UPSCALE_MODEL)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this.$uid.toString(), 0]  as unknown as IMAGE; }

        /**
          * Constructor
		 * @param opts.inpaint_model
		 * @param opts.image
		 * @param opts.mask
		 * @param opts.seed
		 * @param opts.optional_upscale_model}
        */
        constructor(opts:{
            'inpaint_model': INPAINT_MODEL,'image': IMAGE,'mask': MASK,'seed'?: INT,'optional_upscale_model'?: UPSCALE_MODEL
        }){
            super(ctx);

            super.$$link("inpaint_model", opts['inpaint_model'])
super.$$link("image", opts['image'])
super.$$link("mask", opts['mask'])
super.$$link("seed", opts['seed']??tmp["INPAINT_InpaintWithModel"].defaults['seed'])
super.$$link("optional_upscale_model", opts['optional_upscale_model'])
}

        static defaults = {
    'seed':  0
}
        protected override $$type(){
            return "INPAINT_InpaintWithModel"
        }
},

    /**
     * Expand Mask from inpaint
     * @desc 
    */
    "INPAINT_ExpandMask" : class extends Node{
        //Setters
        //set 'mask'(value : MASK)  { super.$$link(0, value) } 
//set 'grow'(value : INT)  { super.$$link(1, value) } 
//set 'blur'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.mask
		 * @param opts.grow default: 16 step: 1
		 * @param opts.blur default: 7 step: 1}
        */
        constructor(opts:{
            'mask': MASK,'grow'?: INT,'blur'?: INT
        }){
            super(ctx);

            super.$$link("mask", opts['mask'])
super.$$link("grow", opts['grow']??tmp["INPAINT_ExpandMask"].defaults['grow'])
super.$$link("blur", opts['blur']??tmp["INPAINT_ExpandMask"].defaults['blur'])
}

        static defaults = {
    'grow':  16,
'blur':  7
}
        protected override $$type(){
            return "INPAINT_ExpandMask"
        }
},

    /**
     * Denoise to Compositing Mask from inpaint
     * @desc 
    */
    "INPAINT_DenoiseToCompositingMask" : class extends Node{
        //Setters
        //set 'mask'(value : MASK)  { super.$$link(0, value) } 
//set 'offset'(value : FLOAT)  { super.$$link(1, value) } 
//set 'threshold'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'MASK'() : MASK { return [this.$uid.toString(), 0]  as unknown as MASK; }

        /**
          * Constructor
		 * @param opts.mask
		 * @param opts.offset default: 0.1 step: 0.01
		 * @param opts.threshold default: 0.2 max: 1 min: 0.01 step: 0.01}
        */
        constructor(opts:{
            'mask': MASK,'offset'?: FLOAT,'threshold'?: FLOAT
        }){
            super(ctx);

            super.$$link("mask", opts['mask'])
super.$$link("offset", opts['offset']??tmp["INPAINT_DenoiseToCompositingMask"].defaults['offset'])
super.$$link("threshold", opts['threshold']??tmp["INPAINT_DenoiseToCompositingMask"].defaults['threshold'])
}

        static defaults = {
    'offset':  0.1,
'threshold':  0.2
}
        protected override $$type(){
            return "INPAINT_DenoiseToCompositingMask"
        }
},

    /**
     * WD14 Tagger 🐍 from image
     * @desc 
    */
    "WD14Tagger|pysssss" : class extends Node{
        //Setters
        //set 'image'(value : IMAGE)  { super.$$link(0, value) } 
//set 'model'(value : 'wd-vit-tagger-v3'|'wd-swinv2-tagger-v3'|'wd-convnext-tagger-v3'|'wd-v1-4-moat-tagger-v2'|'wd-v1-4-convnextv2-tagger-v2'|'wd-v1-4-convnext-tagger-v2'|'wd-v1-4-convnext-tagger'|'wd-v1-4-vit-tagger-v2'|'wd-v1-4-swinv2-tagger-v2'|'wd-v1-4-vit-tagger'| $dyn)  { super.$$link(1, value) } 
//set 'threshold'(value : FLOAT)  { super.$$link(2, value) } 
//set 'character_threshold'(value : FLOAT)  { super.$$link(3, value) } 
//set 'replace_underscore'(value : BOOLEAN)  { super.$$link(4, value) } 
//set 'trailing_comma'(value : BOOLEAN)  { super.$$link(5, value) } 
//set 'exclude_tags'(value : STRING)  { super.$$link(6, value) } 

        //Getters
        get 'STRING'() : STRING { return [this.$uid.toString(), 0]  as unknown as STRING; }

        /**
          * Constructor
		 * @param opts.image
		 * @param opts.model default: "wd-v1-4-moat-tagger-v2"
		 * @param opts.threshold default: 0.35 step: 0.05
		 * @param opts.character_threshold default: 0.85 step: 0.05
		 * @param opts.replace_underscore
		 * @param opts.trailing_comma
		 * @param opts.exclude_tags}
        */
        constructor(opts:{
            'image': IMAGE,'model'?: 'wd-vit-tagger-v3'|'wd-swinv2-tagger-v3'|'wd-convnext-tagger-v3'|'wd-v1-4-moat-tagger-v2'|'wd-v1-4-convnextv2-tagger-v2'|'wd-v1-4-convnext-tagger-v2'|'wd-v1-4-convnext-tagger'|'wd-v1-4-vit-tagger-v2'|'wd-v1-4-swinv2-tagger-v2'|'wd-v1-4-vit-tagger'| $dyn,'threshold'?: FLOAT,'character_threshold'?: FLOAT,'replace_underscore'?: BOOLEAN,'trailing_comma'?: BOOLEAN,'exclude_tags'?: STRING
        }){
            super(ctx);

            super.$$link("image", opts['image'])
super.$$link("model", opts['model']??tmp["WD14Tagger|pysssss"].defaults['model'])
super.$$link("threshold", opts['threshold']??tmp["WD14Tagger|pysssss"].defaults['threshold'])
super.$$link("character_threshold", opts['character_threshold']??tmp["WD14Tagger|pysssss"].defaults['character_threshold'])
super.$$link("replace_underscore", opts['replace_underscore']??tmp["WD14Tagger|pysssss"].defaults['replace_underscore'])
super.$$link("trailing_comma", opts['trailing_comma']??tmp["WD14Tagger|pysssss"].defaults['trailing_comma'])
super.$$link("exclude_tags", opts['exclude_tags']??tmp["WD14Tagger|pysssss"].defaults['exclude_tags'])
}

        static defaults = {
    'model':  "wd-v1-4-moat-tagger-v2",
'threshold':  0.35,
'character_threshold':  0.85,
'replace_underscore':  false,
'trailing_comma':  false,
'exclude_tags':  ""
}
        protected override $$type(){
            return "WD14Tagger|pysssss"
        }
},
        $compile: async function (client_id:string) {
            return Node.CompileAll(ctx,client_id)
        }
    }

    return tmp;
    } 