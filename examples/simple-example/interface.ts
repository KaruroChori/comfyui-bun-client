
export class Node {
    constructor(ctx: Map<number, Node>) {
        //Register the node in the context map.
        ctx.set(ctx.size + 1, this);
    };

    $$link(slot: number, value: unknown) {
        //TODO: Implement linking.
    }
}

export type STRING = string;
export type INT<min = void, max = void> = number;
export type FLOAT<min = void, max = void> = number;
export type BOOLEAN = boolean;

type ANY = 'ANY';
type MODEL = 'MODEL'
type CONDITIONING = 'CONDITIONING'
type LATENT = 'LATENT'
type CLIP = 'CLIP'
type VAE = 'VAE'
type IMAGE = 'IMAGE'
type MASK = 'MASK'
type CLIP_VISION = 'CLIP_VISION'
type CLIP_VISION_OUTPUT = 'CLIP_VISION_OUTPUT'
type STYLE_MODEL = 'STYLE_MODEL'
type CONTROL_NET = 'CONTROL_NET'
type GLIGEN = 'GLIGEN'
type UPSCALE_MODEL = 'UPSCALE_MODEL'
type SAMPLER = 'SAMPLER'
type SIGMAS = 'SIGMAS'
type GUIDER = 'GUIDER'
type NOISE = 'NOISE'
type PHOTOMAKER = 'PHOTOMAKER'
type WEBCAM = 'WEBCAM'
type AUDIO = 'AUDIO'
type BLIP_MODEL = 'BLIP_MODEL'
type BUS = 'BUS'
type NUMBER = 'NUMBER'
type CLIPSEG_MODEL = 'CLIPSEG_MODEL'
type DICT = 'DICT'
type LIST = 'LIST'
type CROP_DATA = 'CROP_DATA'
type SEED = 'SEED'
type MIDAS_MODEL = 'MIDAS_MODEL'
type SAM_MODEL = 'SAM_MODEL'
type SAM_PARAMETERS = 'SAM_PARAMETERS'
type IMAGE_BOUNDS = 'IMAGE_BOUNDS'
type GROUNDING_DINO_MODEL = 'GROUNDING_DINO_MODEL'
type POSE_KEYPOINT = 'POSE_KEYPOINT'
type BBOX_DETECTOR = 'BBOX_DETECTOR'
type OPTICAL_FLOW = 'OPTICAL_FLOW'
type TRACKING = 'TRACKING'
type IPADAPTER = 'IPADAPTER'
type INSIGHTFACE = 'INSIGHTFACE'
type EMBEDS = 'EMBEDS'
type IPADAPTER_PARAMS = 'IPADAPTER_PARAMS'
type WEIGHTS_STRATEGY = 'WEIGHTS_STRATEGY'
type VHS_BatchManager = 'VHS_BatchManager'
type VHS_FILENAMES = 'VHS_FILENAMES'
type VHS_VIDEOINFO = 'VHS_VIDEOINFO'
type VHS_AUDIO = 'VHS_AUDIO'
type SCENE_VIDEO = 'SCENE_VIDEO'
type CROP_INFO = 'CROP_INFO'
type RGTHREE_CONTEXT = 'RGTHREE_CONTEXT'
type T5 = 'T5'
type FLOAT_LIST = 'FLOAT_LIST'
type STRING_LIST = 'STRING_LIST'
type INT_LIST = 'INT_LIST'
type GRID_ANNOTATION = 'GRID_ANNOTATION'
type CH_SETTINGS = 'CH_SETTINGS'
type PPF_SETTINGS = 'PPF_SETTINGS'
type SCRIPT = 'SCRIPT'
type SDXL_TUPLE = 'SDXL_TUPLE'
type LORA_STACK = 'LORA_STACK'
type CONTROL_NET_STACK = 'CONTROL_NET_STACK'
type DEPENDENCIES = 'DEPENDENCIES'
type XY = 'XY'
type LIVEPORTRAITPIPE = 'LIVEPORTRAITPIPE'
type INSTANTID = 'INSTANTID'
type FACEANALYSIS = 'FACEANALYSIS'
type FACE_EMBEDS = 'FACE_EMBEDS'
type ListString = 'ListString'
type CPipeAny = 'CPipeAny'
type JSON = 'JSON'
type METADATA_RAW = 'METADATA_RAW'
type TIMESTEP_KEYFRAME = 'TIMESTEP_KEYFRAME'
type CONTROL_NET_WEIGHTS = 'CONTROL_NET_WEIGHTS'
type LATENT_KEYFRAME = 'LATENT_KEYFRAME'
type ACNAUTOSIZE = 'ACNAUTOSIZE'
type CN_WEIGHTS_EXTRAS = 'CN_WEIGHTS_EXTRAS'
type SPARSE_METHOD = 'SPARSE_METHOD'
type PLUS_INPUT = 'PLUS_INPUT'
type MOTION_LORA = 'MOTION_LORA'
type ADEAUTOSIZE = 'ADEAUTOSIZE'
type NOISE_LAYERS = 'NOISE_LAYERS'
type ITERATION_OPTS = 'ITERATION_OPTS'
type CUSTOM_CFG = 'CUSTOM_CFG'
type SIGMA_SCHEDULE = 'SIGMA_SCHEDULE'
type IMAGE_INJECT = 'IMAGE_INJECT'
type SAMPLE_SETTINGS = 'SAMPLE_SETTINGS'
type AD_KEYFRAMES = 'AD_KEYFRAMES'
type MULTIVAL = 'MULTIVAL'
type CONTEXT_OPTIONS = 'CONTEXT_OPTIONS'
type VIEW_OPTS = 'VIEW_OPTS'
type ADEWARN = 'ADEWARN'
type LORA_HOOK = 'LORA_HOOK'
type LORA_HOOK_KEYFRAMES = 'LORA_HOOK_KEYFRAMES'
type TIMESTEPS_COND = 'TIMESTEPS_COND'
type PE_ADJUST = 'PE_ADJUST'
type WEIGHT_ADJUST = 'WEIGHT_ADJUST'
type AD_SETTINGS = 'AD_SETTINGS'
type CFG_EXTRAS = 'CFG_EXTRAS'
type IMAGE_INJECT_OPTIONS = 'IMAGE_INJECT_OPTIONS'
type M_MODELS = 'M_MODELS'
type MOTION_MODEL_ADE = 'MOTION_MODEL_ADE'
type CAMERACTRL_POSES = 'CAMERACTRL_POSES'
type PIA_INPUT = 'PIA_INPUT'
type GIF = 'GIF'
type INPAINT_PATCH = 'INPAINT_PATCH'
type INPAINT_MODEL = 'INPAINT_MODEL'
export const Workflow = () => {const ctx=new Map(); return { 

    /**
     * TODO Docs based on metadata
     */
    'KSampler' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'seed'(value : INT)  { super.$$link(1, value) } 
set 'steps'(value : INT)  { super.$$link(2, value) } 
set 'cfg'(value : FLOAT)  { super.$$link(3, value) } 
set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(4, value) } 
set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform')  { super.$$link(5, value) } 
set 'positive'(value : CONDITIONING)  { super.$$link(6, value) } 
set 'negative'(value : CONDITIONING)  { super.$$link(7, value) } 
set 'latent_image'(value : LATENT)  { super.$$link(8, value) } 
set 'denoise'(value : FLOAT)  { super.$$link(9, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'model': MODEL,'seed': INT,'steps': INT,'cfg': FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform','positive': CONDITIONING,'negative': CONDITIONING,'latent_image': LATENT,'denoise': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['seed'] = opts['seed'];
this['steps'] = opts['steps'];
this['cfg'] = opts['cfg'];
this['sampler_name'] = opts['sampler_name'];
this['scheduler'] = opts['scheduler'];
this['positive'] = opts['positive'];
this['negative'] = opts['negative'];
this['latent_image'] = opts['latent_image'];
this['denoise'] = opts['denoise']
            

        }

        static defaults = {
            'seed':  0,
'steps':  20,
'cfg':  8,
'denoise':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'CheckpointLoaderSimple' : class extends Node{
        //Setters
        set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(0, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this, 'CLIP', 1]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this, 'VAE', 2]  as unknown as VAE; }

        constructor(opts:{
            'ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'
        }){
            super(ctx);

            this['ckpt_name'] = opts['ckpt_name']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'CLIPTextEncode' : class extends Node{
        //Setters
        set 'text'(value : STRING)  { super.$$link(0, value) } 
set 'clip'(value : CLIP)  { super.$$link(1, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'text': STRING,'clip': CLIP
        }){
            super(ctx);

            this['text'] = opts['text'];
this['clip'] = opts['clip']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'CLIPSetLastLayer' : class extends Node{
        //Setters
        set 'clip'(value : CLIP)  { super.$$link(0, value) } 
set 'stop_at_clip_layer'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'CLIP'() : CLIP { return [this, 'CLIP', 0]  as unknown as CLIP; }

        constructor(opts:{
            'clip': CLIP,'stop_at_clip_layer': INT
        }){
            super(ctx);

            this['clip'] = opts['clip'];
this['stop_at_clip_layer'] = opts['stop_at_clip_layer']
            

        }

        static defaults = {
            'stop_at_clip_layer':  -1
}
},

    /**
     * TODO Docs based on metadata
     */
    'VAEDecode' : class extends Node{
        //Setters
        set 'samples'(value : LATENT)  { super.$$link(0, value) } 
set 'vae'(value : VAE)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'samples': LATENT,'vae': VAE
        }){
            super(ctx);

            this['samples'] = opts['samples'];
this['vae'] = opts['vae']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'VAEEncode' : class extends Node{
        //Setters
        set 'pixels'(value : IMAGE)  { super.$$link(0, value) } 
set 'vae'(value : VAE)  { super.$$link(1, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'pixels': IMAGE,'vae': VAE
        }){
            super(ctx);

            this['pixels'] = opts['pixels'];
this['vae'] = opts['vae']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'VAEEncodeForInpaint' : class extends Node{
        //Setters
        set 'pixels'(value : IMAGE)  { super.$$link(0, value) } 
set 'vae'(value : VAE)  { super.$$link(1, value) } 
set 'mask'(value : MASK)  { super.$$link(2, value) } 
set 'grow_mask_by'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'pixels': IMAGE,'vae': VAE,'mask': MASK,'grow_mask_by': INT
        }){
            super(ctx);

            this['pixels'] = opts['pixels'];
this['vae'] = opts['vae'];
this['mask'] = opts['mask'];
this['grow_mask_by'] = opts['grow_mask_by']
            

        }

        static defaults = {
            'grow_mask_by':  6
}
},

    /**
     * TODO Docs based on metadata
     */
    'VAELoader' : class extends Node{
        //Setters
        set 'vae_name'(value : 'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'|'taesd'|'taesdxl')  { super.$$link(0, value) } 

        //Getters
        get 'VAE'() : VAE { return [this, 'VAE', 0]  as unknown as VAE; }

        constructor(opts:{
            'vae_name': 'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'|'taesd'|'taesdxl'
        }){
            super(ctx);

            this['vae_name'] = opts['vae_name']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'EmptyLatentImage' : class extends Node{
        //Setters
        set 'width'(value : INT)  { super.$$link(0, value) } 
set 'height'(value : INT)  { super.$$link(1, value) } 
set 'batch_size'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'width': INT,'height': INT,'batch_size': INT
        }){
            super(ctx);

            this['width'] = opts['width'];
this['height'] = opts['height'];
this['batch_size'] = opts['batch_size']
            

        }

        static defaults = {
            'width':  512,
'height':  512,
'batch_size':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'LatentUpscale' : class extends Node{
        //Setters
        set 'samples'(value : LATENT)  { super.$$link(0, value) } 
set 'upscale_method'(value : 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp')  { super.$$link(1, value) } 
set 'width'(value : INT)  { super.$$link(2, value) } 
set 'height'(value : INT)  { super.$$link(3, value) } 
set 'crop'(value : 'disabled'|'center')  { super.$$link(4, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'samples': LATENT,'upscale_method': 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp','width': INT,'height': INT,'crop': 'disabled'|'center'
        }){
            super(ctx);

            this['samples'] = opts['samples'];
this['upscale_method'] = opts['upscale_method'];
this['width'] = opts['width'];
this['height'] = opts['height'];
this['crop'] = opts['crop']
            

        }

        static defaults = {
            'width':  512,
'height':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'LatentUpscaleBy' : class extends Node{
        //Setters
        set 'samples'(value : LATENT)  { super.$$link(0, value) } 
set 'upscale_method'(value : 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp')  { super.$$link(1, value) } 
set 'scale_by'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'samples': LATENT,'upscale_method': 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp','scale_by': FLOAT
        }){
            super(ctx);

            this['samples'] = opts['samples'];
this['upscale_method'] = opts['upscale_method'];
this['scale_by'] = opts['scale_by']
            

        }

        static defaults = {
            'scale_by':  1.5
}
},

    /**
     * TODO Docs based on metadata
     */
    'LatentFromBatch' : class extends Node{
        //Setters
        set 'samples'(value : LATENT)  { super.$$link(0, value) } 
set 'batch_index'(value : INT)  { super.$$link(1, value) } 
set 'length'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'samples': LATENT,'batch_index': INT,'length': INT
        }){
            super(ctx);

            this['samples'] = opts['samples'];
this['batch_index'] = opts['batch_index'];
this['length'] = opts['length']
            

        }

        static defaults = {
            'batch_index':  0,
'length':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'RepeatLatentBatch' : class extends Node{
        //Setters
        set 'samples'(value : LATENT)  { super.$$link(0, value) } 
set 'amount'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'samples': LATENT,'amount': INT
        }){
            super(ctx);

            this['samples'] = opts['samples'];
this['amount'] = opts['amount']
            

        }

        static defaults = {
            'amount':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'SaveImage' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'filename_prefix'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        

        constructor(opts:{
            'images': IMAGE,'filename_prefix': STRING
        }){
            super(ctx);

            this['images'] = opts['images'];
this['filename_prefix'] = opts['filename_prefix']
            

        }

        static defaults = {
            'filename_prefix':  "ComfyUI"
}
},

    /**
     * TODO Docs based on metadata
     */
    'PreviewImage' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        

        constructor(opts:{
            'images': IMAGE
        }){
            super(ctx);

            this['images'] = opts['images']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'LoadImage' : class extends Node{
        //Setters
        set 'image'(value : '00010-2274211228.png'|'1.png'|'13368745_041_0591.jpg'|'37756119_043_92ea.jpg'|'56162430_104_c181.jpg'|'56162430_111_453c.jpg'|'61635388_057_c911.jpg'|'61635388_068_b3ca (1).jpg'|'61635388_068_b3ca.jpg'|'61635388_077_aa9e.jpg'|'89918606_004_7c7a.jpg'|'9377545.png'|'Ashley_Meh.webp'|'ComfyUI_00135_.png'|'ComfyUI_temp_fkoyu_00029_.png'|'ComfyUI_temp_mpmkr_00234_.png'|'ComfyUI_temp_mpmkr_00258_.png'|'ComfyUI_temp_mpmkr_00296_.png'|'ComfyUI_temp_mpmkr_00347_.png'|'ComfyUI_temp_mpmkr_00497_.png'|'ComfyUI_temp_mpmkr_00540_.png'|'ComfyUI_temp_mpmkr_00542_.png'|'ComfyUI_temp_mpmkr_00550_.png'|'ComfyUI_temp_mpmkr_00733_.png'|'ComfyUI_temp_onszj_00008_.png'|'ComfyUI_temp_pxygj_00023_.png'|'DSCF6491.JPG'|'DSCF8216.JPG'|'DSCF8334.JPG'|'DSCF9566.JPG'|'FB_IMG_1671397597411.jpg'|'IMGP4666.JPG'|'IMGP4670.JPG'|'IMG_1913.JPG'|'Julia.webp'|'Julia2.webp'|'Mom.webp'|'QSCF8096.JPG'|'Screenshot from 2022-04-19 11-38-41.png'|'a837af5519f074782ae0b9c32eee12a7.jpg'|'aaa'|'asset.png'|'example-a.png'|'example.png'|'maegcgmdajglmcle-small.jpeg'|'testqr.png')  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }
get 'MASK'() : MASK { return [this, 'MASK', 1]  as unknown as MASK; }

        constructor(opts:{
            'image': '00010-2274211228.png'|'1.png'|'13368745_041_0591.jpg'|'37756119_043_92ea.jpg'|'56162430_104_c181.jpg'|'56162430_111_453c.jpg'|'61635388_057_c911.jpg'|'61635388_068_b3ca (1).jpg'|'61635388_068_b3ca.jpg'|'61635388_077_aa9e.jpg'|'89918606_004_7c7a.jpg'|'9377545.png'|'Ashley_Meh.webp'|'ComfyUI_00135_.png'|'ComfyUI_temp_fkoyu_00029_.png'|'ComfyUI_temp_mpmkr_00234_.png'|'ComfyUI_temp_mpmkr_00258_.png'|'ComfyUI_temp_mpmkr_00296_.png'|'ComfyUI_temp_mpmkr_00347_.png'|'ComfyUI_temp_mpmkr_00497_.png'|'ComfyUI_temp_mpmkr_00540_.png'|'ComfyUI_temp_mpmkr_00542_.png'|'ComfyUI_temp_mpmkr_00550_.png'|'ComfyUI_temp_mpmkr_00733_.png'|'ComfyUI_temp_onszj_00008_.png'|'ComfyUI_temp_pxygj_00023_.png'|'DSCF6491.JPG'|'DSCF8216.JPG'|'DSCF8334.JPG'|'DSCF9566.JPG'|'FB_IMG_1671397597411.jpg'|'IMGP4666.JPG'|'IMGP4670.JPG'|'IMG_1913.JPG'|'Julia.webp'|'Julia2.webp'|'Mom.webp'|'QSCF8096.JPG'|'Screenshot from 2022-04-19 11-38-41.png'|'a837af5519f074782ae0b9c32eee12a7.jpg'|'aaa'|'asset.png'|'example-a.png'|'example.png'|'maegcgmdajglmcle-small.jpeg'|'testqr.png'
        }){
            super(ctx);

            this['image'] = opts['image']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'LoadImageMask' : class extends Node{
        //Setters
        set 'image'(value : '00010-2274211228.png'|'1.png'|'13368745_041_0591.jpg'|'37756119_043_92ea.jpg'|'56162430_104_c181.jpg'|'56162430_111_453c.jpg'|'61635388_057_c911.jpg'|'61635388_068_b3ca (1).jpg'|'61635388_068_b3ca.jpg'|'61635388_077_aa9e.jpg'|'89918606_004_7c7a.jpg'|'9377545.png'|'Ashley_Meh.webp'|'ComfyUI_00135_.png'|'ComfyUI_temp_fkoyu_00029_.png'|'ComfyUI_temp_mpmkr_00234_.png'|'ComfyUI_temp_mpmkr_00258_.png'|'ComfyUI_temp_mpmkr_00296_.png'|'ComfyUI_temp_mpmkr_00347_.png'|'ComfyUI_temp_mpmkr_00497_.png'|'ComfyUI_temp_mpmkr_00540_.png'|'ComfyUI_temp_mpmkr_00542_.png'|'ComfyUI_temp_mpmkr_00550_.png'|'ComfyUI_temp_mpmkr_00733_.png'|'ComfyUI_temp_onszj_00008_.png'|'ComfyUI_temp_pxygj_00023_.png'|'DSCF6491.JPG'|'DSCF8216.JPG'|'DSCF8334.JPG'|'DSCF9566.JPG'|'FB_IMG_1671397597411.jpg'|'IMGP4666.JPG'|'IMGP4670.JPG'|'IMG_1913.JPG'|'Julia.webp'|'Julia2.webp'|'Mom.webp'|'QSCF8096.JPG'|'Screenshot from 2022-04-19 11-38-41.png'|'a837af5519f074782ae0b9c32eee12a7.jpg'|'aaa'|'asset.png'|'example-a.png'|'example.png'|'maegcgmdajglmcle-small.jpeg'|'testqr.png')  { super.$$link(0, value) } 
set 'channel'(value : 'alpha'|'red'|'green'|'blue')  { super.$$link(1, value) } 

        //Getters
        get 'MASK'() : MASK { return [this, 'MASK', 0]  as unknown as MASK; }

        constructor(opts:{
            'image': '00010-2274211228.png'|'1.png'|'13368745_041_0591.jpg'|'37756119_043_92ea.jpg'|'56162430_104_c181.jpg'|'56162430_111_453c.jpg'|'61635388_057_c911.jpg'|'61635388_068_b3ca (1).jpg'|'61635388_068_b3ca.jpg'|'61635388_077_aa9e.jpg'|'89918606_004_7c7a.jpg'|'9377545.png'|'Ashley_Meh.webp'|'ComfyUI_00135_.png'|'ComfyUI_temp_fkoyu_00029_.png'|'ComfyUI_temp_mpmkr_00234_.png'|'ComfyUI_temp_mpmkr_00258_.png'|'ComfyUI_temp_mpmkr_00296_.png'|'ComfyUI_temp_mpmkr_00347_.png'|'ComfyUI_temp_mpmkr_00497_.png'|'ComfyUI_temp_mpmkr_00540_.png'|'ComfyUI_temp_mpmkr_00542_.png'|'ComfyUI_temp_mpmkr_00550_.png'|'ComfyUI_temp_mpmkr_00733_.png'|'ComfyUI_temp_onszj_00008_.png'|'ComfyUI_temp_pxygj_00023_.png'|'DSCF6491.JPG'|'DSCF8216.JPG'|'DSCF8334.JPG'|'DSCF9566.JPG'|'FB_IMG_1671397597411.jpg'|'IMGP4666.JPG'|'IMGP4670.JPG'|'IMG_1913.JPG'|'Julia.webp'|'Julia2.webp'|'Mom.webp'|'QSCF8096.JPG'|'Screenshot from 2022-04-19 11-38-41.png'|'a837af5519f074782ae0b9c32eee12a7.jpg'|'aaa'|'asset.png'|'example-a.png'|'example.png'|'maegcgmdajglmcle-small.jpeg'|'testqr.png','channel': 'alpha'|'red'|'green'|'blue'
        }){
            super(ctx);

            this['image'] = opts['image'];
this['channel'] = opts['channel']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ImageScale' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'upscale_method'(value : 'nearest-exact'|'bilinear'|'area'|'bicubic'|'lanczos')  { super.$$link(1, value) } 
set 'width'(value : INT)  { super.$$link(2, value) } 
set 'height'(value : INT)  { super.$$link(3, value) } 
set 'crop'(value : 'disabled'|'center')  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'upscale_method': 'nearest-exact'|'bilinear'|'area'|'bicubic'|'lanczos','width': INT,'height': INT,'crop': 'disabled'|'center'
        }){
            super(ctx);

            this['image'] = opts['image'];
this['upscale_method'] = opts['upscale_method'];
this['width'] = opts['width'];
this['height'] = opts['height'];
this['crop'] = opts['crop']
            

        }

        static defaults = {
            'width':  512,
'height':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'ImageScaleBy' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'upscale_method'(value : 'nearest-exact'|'bilinear'|'area'|'bicubic'|'lanczos')  { super.$$link(1, value) } 
set 'scale_by'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'upscale_method': 'nearest-exact'|'bilinear'|'area'|'bicubic'|'lanczos','scale_by': FLOAT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['upscale_method'] = opts['upscale_method'];
this['scale_by'] = opts['scale_by']
            

        }

        static defaults = {
            'scale_by':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ImageInvert' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE
        }){
            super(ctx);

            this['image'] = opts['image']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ImageBatch' : class extends Node{
        //Setters
        set 'image1'(value : IMAGE)  { super.$$link(0, value) } 
set 'image2'(value : IMAGE)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image1': IMAGE,'image2': IMAGE
        }){
            super(ctx);

            this['image1'] = opts['image1'];
this['image2'] = opts['image2']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ImagePadForOutpaint' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'left'(value : INT)  { super.$$link(1, value) } 
set 'top'(value : INT)  { super.$$link(2, value) } 
set 'right'(value : INT)  { super.$$link(3, value) } 
set 'bottom'(value : INT)  { super.$$link(4, value) } 
set 'feathering'(value : INT)  { super.$$link(5, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }
get 'MASK'() : MASK { return [this, 'MASK', 1]  as unknown as MASK; }

        constructor(opts:{
            'image': IMAGE,'left': INT,'top': INT,'right': INT,'bottom': INT,'feathering': INT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['left'] = opts['left'];
this['top'] = opts['top'];
this['right'] = opts['right'];
this['bottom'] = opts['bottom'];
this['feathering'] = opts['feathering']
            

        }

        static defaults = {
            'left':  0,
'top':  0,
'right':  0,
'bottom':  0,
'feathering':  40
}
},

    /**
     * TODO Docs based on metadata
     */
    'EmptyImage' : class extends Node{
        //Setters
        set 'width'(value : INT)  { super.$$link(0, value) } 
set 'height'(value : INT)  { super.$$link(1, value) } 
set 'batch_size'(value : INT)  { super.$$link(2, value) } 
set 'color'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'width': INT,'height': INT,'batch_size': INT,'color': INT
        }){
            super(ctx);

            this['width'] = opts['width'];
this['height'] = opts['height'];
this['batch_size'] = opts['batch_size'];
this['color'] = opts['color']
            

        }

        static defaults = {
            'width':  512,
'height':  512,
'batch_size':  1,
'color':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'ConditioningAverage' : class extends Node{
        //Setters
        set 'conditioning_to'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'conditioning_from'(value : CONDITIONING)  { super.$$link(1, value) } 
set 'conditioning_to_strength'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'conditioning_to': CONDITIONING,'conditioning_from': CONDITIONING,'conditioning_to_strength': FLOAT
        }){
            super(ctx);

            this['conditioning_to'] = opts['conditioning_to'];
this['conditioning_from'] = opts['conditioning_from'];
this['conditioning_to_strength'] = opts['conditioning_to_strength']
            

        }

        static defaults = {
            'conditioning_to_strength':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ConditioningCombine' : class extends Node{
        //Setters
        set 'conditioning_1'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'conditioning_2'(value : CONDITIONING)  { super.$$link(1, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'conditioning_1': CONDITIONING,'conditioning_2': CONDITIONING
        }){
            super(ctx);

            this['conditioning_1'] = opts['conditioning_1'];
this['conditioning_2'] = opts['conditioning_2']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ConditioningConcat' : class extends Node{
        //Setters
        set 'conditioning_to'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'conditioning_from'(value : CONDITIONING)  { super.$$link(1, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'conditioning_to': CONDITIONING,'conditioning_from': CONDITIONING
        }){
            super(ctx);

            this['conditioning_to'] = opts['conditioning_to'];
this['conditioning_from'] = opts['conditioning_from']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ConditioningSetArea' : class extends Node{
        //Setters
        set 'conditioning'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'width'(value : INT)  { super.$$link(1, value) } 
set 'height'(value : INT)  { super.$$link(2, value) } 
set 'x'(value : INT)  { super.$$link(3, value) } 
set 'y'(value : INT)  { super.$$link(4, value) } 
set 'strength'(value : FLOAT)  { super.$$link(5, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'conditioning': CONDITIONING,'width': INT,'height': INT,'x': INT,'y': INT,'strength': FLOAT
        }){
            super(ctx);

            this['conditioning'] = opts['conditioning'];
this['width'] = opts['width'];
this['height'] = opts['height'];
this['x'] = opts['x'];
this['y'] = opts['y'];
this['strength'] = opts['strength']
            

        }

        static defaults = {
            'width':  64,
'height':  64,
'x':  0,
'y':  0,
'strength':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ConditioningSetAreaPercentage' : class extends Node{
        //Setters
        set 'conditioning'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'width'(value : FLOAT)  { super.$$link(1, value) } 
set 'height'(value : FLOAT)  { super.$$link(2, value) } 
set 'x'(value : FLOAT)  { super.$$link(3, value) } 
set 'y'(value : FLOAT)  { super.$$link(4, value) } 
set 'strength'(value : FLOAT)  { super.$$link(5, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'conditioning': CONDITIONING,'width': FLOAT,'height': FLOAT,'x': FLOAT,'y': FLOAT,'strength': FLOAT
        }){
            super(ctx);

            this['conditioning'] = opts['conditioning'];
this['width'] = opts['width'];
this['height'] = opts['height'];
this['x'] = opts['x'];
this['y'] = opts['y'];
this['strength'] = opts['strength']
            

        }

        static defaults = {
            'width':  1,
'height':  1,
'x':  0,
'y':  0,
'strength':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ConditioningSetAreaStrength' : class extends Node{
        //Setters
        set 'conditioning'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'strength'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'conditioning': CONDITIONING,'strength': FLOAT
        }){
            super(ctx);

            this['conditioning'] = opts['conditioning'];
this['strength'] = opts['strength']
            

        }

        static defaults = {
            'strength':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ConditioningSetMask' : class extends Node{
        //Setters
        set 'conditioning'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'mask'(value : MASK)  { super.$$link(1, value) } 
set 'strength'(value : FLOAT)  { super.$$link(2, value) } 
set 'set_cond_area'(value : 'default'|'mask bounds')  { super.$$link(3, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'conditioning': CONDITIONING,'mask': MASK,'strength': FLOAT,'set_cond_area': 'default'|'mask bounds'
        }){
            super(ctx);

            this['conditioning'] = opts['conditioning'];
this['mask'] = opts['mask'];
this['strength'] = opts['strength'];
this['set_cond_area'] = opts['set_cond_area']
            

        }

        static defaults = {
            'strength':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'KSamplerAdvanced' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'add_noise'(value : 'enable'|'disable')  { super.$$link(1, value) } 
set 'noise_seed'(value : INT)  { super.$$link(2, value) } 
set 'steps'(value : INT)  { super.$$link(3, value) } 
set 'cfg'(value : FLOAT)  { super.$$link(4, value) } 
set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(5, value) } 
set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform')  { super.$$link(6, value) } 
set 'positive'(value : CONDITIONING)  { super.$$link(7, value) } 
set 'negative'(value : CONDITIONING)  { super.$$link(8, value) } 
set 'latent_image'(value : LATENT)  { super.$$link(9, value) } 
set 'start_at_step'(value : INT)  { super.$$link(10, value) } 
set 'end_at_step'(value : INT)  { super.$$link(11, value) } 
set 'return_with_leftover_noise'(value : 'disable'|'enable')  { super.$$link(12, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'model': MODEL,'add_noise': 'enable'|'disable','noise_seed': INT,'steps': INT,'cfg': FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform','positive': CONDITIONING,'negative': CONDITIONING,'latent_image': LATENT,'start_at_step': INT,'end_at_step': INT,'return_with_leftover_noise': 'disable'|'enable'
        }){
            super(ctx);

            this['model'] = opts['model'];
this['add_noise'] = opts['add_noise'];
this['noise_seed'] = opts['noise_seed'];
this['steps'] = opts['steps'];
this['cfg'] = opts['cfg'];
this['sampler_name'] = opts['sampler_name'];
this['scheduler'] = opts['scheduler'];
this['positive'] = opts['positive'];
this['negative'] = opts['negative'];
this['latent_image'] = opts['latent_image'];
this['start_at_step'] = opts['start_at_step'];
this['end_at_step'] = opts['end_at_step'];
this['return_with_leftover_noise'] = opts['return_with_leftover_noise']
            

        }

        static defaults = {
            'noise_seed':  0,
'steps':  20,
'cfg':  8,
'start_at_step':  0,
'end_at_step':  10000
}
},

    /**
     * TODO Docs based on metadata
     */
    'SetLatentNoiseMask' : class extends Node{
        //Setters
        set 'samples'(value : LATENT)  { super.$$link(0, value) } 
set 'mask'(value : MASK)  { super.$$link(1, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'samples': LATENT,'mask': MASK
        }){
            super(ctx);

            this['samples'] = opts['samples'];
this['mask'] = opts['mask']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'LatentComposite' : class extends Node{
        //Setters
        set 'samples_to'(value : LATENT)  { super.$$link(0, value) } 
set 'samples_from'(value : LATENT)  { super.$$link(1, value) } 
set 'x'(value : INT)  { super.$$link(2, value) } 
set 'y'(value : INT)  { super.$$link(3, value) } 
set 'feather'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'samples_to': LATENT,'samples_from': LATENT,'x': INT,'y': INT,'feather': INT
        }){
            super(ctx);

            this['samples_to'] = opts['samples_to'];
this['samples_from'] = opts['samples_from'];
this['x'] = opts['x'];
this['y'] = opts['y'];
this['feather'] = opts['feather']
            

        }

        static defaults = {
            'x':  0,
'y':  0,
'feather':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'LatentBlend' : class extends Node{
        //Setters
        set 'samples1'(value : LATENT)  { super.$$link(0, value) } 
set 'samples2'(value : LATENT)  { super.$$link(1, value) } 
set 'blend_factor'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'samples1': LATENT,'samples2': LATENT,'blend_factor': FLOAT
        }){
            super(ctx);

            this['samples1'] = opts['samples1'];
this['samples2'] = opts['samples2'];
this['blend_factor'] = opts['blend_factor']
            

        }

        static defaults = {
            'blend_factor':  0.5
}
},

    /**
     * TODO Docs based on metadata
     */
    'LatentRotate' : class extends Node{
        //Setters
        set 'samples'(value : LATENT)  { super.$$link(0, value) } 
set 'rotation'(value : 'none'|'90 degrees'|'180 degrees'|'270 degrees')  { super.$$link(1, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'samples': LATENT,'rotation': 'none'|'90 degrees'|'180 degrees'|'270 degrees'
        }){
            super(ctx);

            this['samples'] = opts['samples'];
this['rotation'] = opts['rotation']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'LatentFlip' : class extends Node{
        //Setters
        set 'samples'(value : LATENT)  { super.$$link(0, value) } 
set 'flip_method'(value : 'x-axis: vertically'|'y-axis: horizontally')  { super.$$link(1, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'samples': LATENT,'flip_method': 'x-axis: vertically'|'y-axis: horizontally'
        }){
            super(ctx);

            this['samples'] = opts['samples'];
this['flip_method'] = opts['flip_method']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'LatentCrop' : class extends Node{
        //Setters
        set 'samples'(value : LATENT)  { super.$$link(0, value) } 
set 'width'(value : INT)  { super.$$link(1, value) } 
set 'height'(value : INT)  { super.$$link(2, value) } 
set 'x'(value : INT)  { super.$$link(3, value) } 
set 'y'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'samples': LATENT,'width': INT,'height': INT,'x': INT,'y': INT
        }){
            super(ctx);

            this['samples'] = opts['samples'];
this['width'] = opts['width'];
this['height'] = opts['height'];
this['x'] = opts['x'];
this['y'] = opts['y']
            

        }

        static defaults = {
            'width':  512,
'height':  512,
'x':  0,
'y':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'LoraLoader' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'clip'(value : CLIP)  { super.$$link(1, value) } 
set 'lora_name'(value : 'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(2, value) } 
set 'strength_model'(value : FLOAT)  { super.$$link(3, value) } 
set 'strength_clip'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this, 'CLIP', 1]  as unknown as CLIP; }

        constructor(opts:{
            'model': MODEL,'clip': CLIP,'lora_name': 'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','strength_model': FLOAT,'strength_clip': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['clip'] = opts['clip'];
this['lora_name'] = opts['lora_name'];
this['strength_model'] = opts['strength_model'];
this['strength_clip'] = opts['strength_clip']
            

        }

        static defaults = {
            'strength_model':  1,
'strength_clip':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'CLIPLoader' : class extends Node{
        //Setters
        set 'clip_name'(value : void)  { super.$$link(0, value) } 
set 'type'(value : 'stable_diffusion'|'stable_cascade'|'sd3'|'stable_audio')  { super.$$link(1, value) } 

        //Getters
        get 'CLIP'() : CLIP { return [this, 'CLIP', 0]  as unknown as CLIP; }

        constructor(opts:{
            'clip_name': void,'type': 'stable_diffusion'|'stable_cascade'|'sd3'|'stable_audio'
        }){
            super(ctx);

            this['clip_name'] = opts['clip_name'];
this['type'] = opts['type']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'UNETLoader' : class extends Node{
        //Setters
        set 'unet_name'(value : void)  { super.$$link(0, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'unet_name': void
        }){
            super(ctx);

            this['unet_name'] = opts['unet_name']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'DualCLIPLoader' : class extends Node{
        //Setters
        set 'clip_name1'(value : void)  { super.$$link(0, value) } 
set 'clip_name2'(value : void)  { super.$$link(1, value) } 
set 'type'(value : 'sdxl'|'sd3')  { super.$$link(2, value) } 

        //Getters
        get 'CLIP'() : CLIP { return [this, 'CLIP', 0]  as unknown as CLIP; }

        constructor(opts:{
            'clip_name1': void,'clip_name2': void,'type': 'sdxl'|'sd3'
        }){
            super(ctx);

            this['clip_name1'] = opts['clip_name1'];
this['clip_name2'] = opts['clip_name2'];
this['type'] = opts['type']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'CLIPVisionEncode' : class extends Node{
        //Setters
        set 'clip_vision'(value : CLIP_VISION)  { super.$$link(0, value) } 
set 'image'(value : IMAGE)  { super.$$link(1, value) } 

        //Getters
        get 'CLIP_VISION_OUTPUT'() : CLIP_VISION_OUTPUT { return [this, 'CLIP_VISION_OUTPUT', 0]  as unknown as CLIP_VISION_OUTPUT; }

        constructor(opts:{
            'clip_vision': CLIP_VISION,'image': IMAGE
        }){
            super(ctx);

            this['clip_vision'] = opts['clip_vision'];
this['image'] = opts['image']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'StyleModelApply' : class extends Node{
        //Setters
        set 'conditioning'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'style_model'(value : STYLE_MODEL)  { super.$$link(1, value) } 
set 'clip_vision_output'(value : CLIP_VISION_OUTPUT)  { super.$$link(2, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'conditioning': CONDITIONING,'style_model': STYLE_MODEL,'clip_vision_output': CLIP_VISION_OUTPUT
        }){
            super(ctx);

            this['conditioning'] = opts['conditioning'];
this['style_model'] = opts['style_model'];
this['clip_vision_output'] = opts['clip_vision_output']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'unCLIPConditioning' : class extends Node{
        //Setters
        set 'conditioning'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'clip_vision_output'(value : CLIP_VISION_OUTPUT)  { super.$$link(1, value) } 
set 'strength'(value : FLOAT)  { super.$$link(2, value) } 
set 'noise_augmentation'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'conditioning': CONDITIONING,'clip_vision_output': CLIP_VISION_OUTPUT,'strength': FLOAT,'noise_augmentation': FLOAT
        }){
            super(ctx);

            this['conditioning'] = opts['conditioning'];
this['clip_vision_output'] = opts['clip_vision_output'];
this['strength'] = opts['strength'];
this['noise_augmentation'] = opts['noise_augmentation']
            

        }

        static defaults = {
            'strength':  1,
'noise_augmentation':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'ControlNetApply' : class extends Node{
        //Setters
        set 'conditioning'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'control_net'(value : CONTROL_NET)  { super.$$link(1, value) } 
set 'image'(value : IMAGE)  { super.$$link(2, value) } 
set 'strength'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'conditioning': CONDITIONING,'control_net': CONTROL_NET,'image': IMAGE,'strength': FLOAT
        }){
            super(ctx);

            this['conditioning'] = opts['conditioning'];
this['control_net'] = opts['control_net'];
this['image'] = opts['image'];
this['strength'] = opts['strength']
            

        }

        static defaults = {
            'strength':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ControlNetApplyAdvanced' : class extends Node{
        //Setters
        set 'positive'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'negative'(value : CONDITIONING)  { super.$$link(1, value) } 
set 'control_net'(value : CONTROL_NET)  { super.$$link(2, value) } 
set 'image'(value : IMAGE)  { super.$$link(3, value) } 
set 'strength'(value : FLOAT)  { super.$$link(4, value) } 
set 'start_percent'(value : FLOAT)  { super.$$link(5, value) } 
set 'end_percent'(value : FLOAT)  { super.$$link(6, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this, 'positive', 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this, 'negative', 1]  as unknown as CONDITIONING; }

        constructor(opts:{
            'positive': CONDITIONING,'negative': CONDITIONING,'control_net': CONTROL_NET,'image': IMAGE,'strength': FLOAT,'start_percent': FLOAT,'end_percent': FLOAT
        }){
            super(ctx);

            this['positive'] = opts['positive'];
this['negative'] = opts['negative'];
this['control_net'] = opts['control_net'];
this['image'] = opts['image'];
this['strength'] = opts['strength'];
this['start_percent'] = opts['start_percent'];
this['end_percent'] = opts['end_percent']
            

        }

        static defaults = {
            'strength':  1,
'start_percent':  0,
'end_percent':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ControlNetLoader' : class extends Node{
        //Setters
        set 'control_net_name'(value : 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors')  { super.$$link(0, value) } 

        //Getters
        get 'CONTROL_NET'() : CONTROL_NET { return [this, 'CONTROL_NET', 0]  as unknown as CONTROL_NET; }

        constructor(opts:{
            'control_net_name': 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors'
        }){
            super(ctx);

            this['control_net_name'] = opts['control_net_name']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'DiffControlNetLoader' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'control_net_name'(value : 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors')  { super.$$link(1, value) } 

        //Getters
        get 'CONTROL_NET'() : CONTROL_NET { return [this, 'CONTROL_NET', 0]  as unknown as CONTROL_NET; }

        constructor(opts:{
            'model': MODEL,'control_net_name': 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors'
        }){
            super(ctx);

            this['model'] = opts['model'];
this['control_net_name'] = opts['control_net_name']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'StyleModelLoader' : class extends Node{
        //Setters
        set 'style_model_name'(value : void)  { super.$$link(0, value) } 

        //Getters
        get 'STYLE_MODEL'() : STYLE_MODEL { return [this, 'STYLE_MODEL', 0]  as unknown as STYLE_MODEL; }

        constructor(opts:{
            'style_model_name': void
        }){
            super(ctx);

            this['style_model_name'] = opts['style_model_name']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'CLIPVisionLoader' : class extends Node{
        //Setters
        set 'clip_name'(value : 'SD1.5/pytorch_model.bin'|'SDXL/pytorch_model.bin'|'clip_vision_vit_h.safetensors'|'model_base_caption_capfilt_large.pth')  { super.$$link(0, value) } 

        //Getters
        get 'CLIP_VISION'() : CLIP_VISION { return [this, 'CLIP_VISION', 0]  as unknown as CLIP_VISION; }

        constructor(opts:{
            'clip_name': 'SD1.5/pytorch_model.bin'|'SDXL/pytorch_model.bin'|'clip_vision_vit_h.safetensors'|'model_base_caption_capfilt_large.pth'
        }){
            super(ctx);

            this['clip_name'] = opts['clip_name']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'VAEDecodeTiled' : class extends Node{
        //Setters
        set 'samples'(value : LATENT)  { super.$$link(0, value) } 
set 'vae'(value : VAE)  { super.$$link(1, value) } 
set 'tile_size'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'samples': LATENT,'vae': VAE,'tile_size': INT
        }){
            super(ctx);

            this['samples'] = opts['samples'];
this['vae'] = opts['vae'];
this['tile_size'] = opts['tile_size']
            

        }

        static defaults = {
            'tile_size':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'VAEEncodeTiled' : class extends Node{
        //Setters
        set 'pixels'(value : IMAGE)  { super.$$link(0, value) } 
set 'vae'(value : VAE)  { super.$$link(1, value) } 
set 'tile_size'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'pixels': IMAGE,'vae': VAE,'tile_size': INT
        }){
            super(ctx);

            this['pixels'] = opts['pixels'];
this['vae'] = opts['vae'];
this['tile_size'] = opts['tile_size']
            

        }

        static defaults = {
            'tile_size':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'unCLIPCheckpointLoader' : class extends Node{
        //Setters
        set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(0, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this, 'CLIP', 1]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this, 'VAE', 2]  as unknown as VAE; }
get 'CLIP_VISION'() : CLIP_VISION { return [this, 'CLIP_VISION', 3]  as unknown as CLIP_VISION; }

        constructor(opts:{
            'ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'
        }){
            super(ctx);

            this['ckpt_name'] = opts['ckpt_name']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'GLIGENLoader' : class extends Node{
        //Setters
        set 'gligen_name'(value : void)  { super.$$link(0, value) } 

        //Getters
        get 'GLIGEN'() : GLIGEN { return [this, 'GLIGEN', 0]  as unknown as GLIGEN; }

        constructor(opts:{
            'gligen_name': void
        }){
            super(ctx);

            this['gligen_name'] = opts['gligen_name']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'GLIGENTextBoxApply' : class extends Node{
        //Setters
        set 'conditioning_to'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'clip'(value : CLIP)  { super.$$link(1, value) } 
set 'gligen_textbox_model'(value : GLIGEN)  { super.$$link(2, value) } 
set 'text'(value : STRING)  { super.$$link(3, value) } 
set 'width'(value : INT)  { super.$$link(4, value) } 
set 'height'(value : INT)  { super.$$link(5, value) } 
set 'x'(value : INT)  { super.$$link(6, value) } 
set 'y'(value : INT)  { super.$$link(7, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'conditioning_to': CONDITIONING,'clip': CLIP,'gligen_textbox_model': GLIGEN,'text': STRING,'width': INT,'height': INT,'x': INT,'y': INT
        }){
            super(ctx);

            this['conditioning_to'] = opts['conditioning_to'];
this['clip'] = opts['clip'];
this['gligen_textbox_model'] = opts['gligen_textbox_model'];
this['text'] = opts['text'];
this['width'] = opts['width'];
this['height'] = opts['height'];
this['x'] = opts['x'];
this['y'] = opts['y']
            

        }

        static defaults = {
            'width':  64,
'height':  64,
'x':  0,
'y':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'InpaintModelConditioning' : class extends Node{
        //Setters
        set 'positive'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'negative'(value : CONDITIONING)  { super.$$link(1, value) } 
set 'vae'(value : VAE)  { super.$$link(2, value) } 
set 'pixels'(value : IMAGE)  { super.$$link(3, value) } 
set 'mask'(value : MASK)  { super.$$link(4, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this, 'positive', 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this, 'negative', 1]  as unknown as CONDITIONING; }
get 'latent'() : LATENT { return [this, 'latent', 2]  as unknown as LATENT; }

        constructor(opts:{
            'positive': CONDITIONING,'negative': CONDITIONING,'vae': VAE,'pixels': IMAGE,'mask': MASK
        }){
            super(ctx);

            this['positive'] = opts['positive'];
this['negative'] = opts['negative'];
this['vae'] = opts['vae'];
this['pixels'] = opts['pixels'];
this['mask'] = opts['mask']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'CheckpointLoader' : class extends Node{
        //Setters
        set 'config_name'(value : 'anything_v3.yaml'|'v1-inference.yaml'|'v1-inference_clip_skip_2.yaml'|'v1-inference_clip_skip_2_fp16.yaml'|'v1-inference_fp16.yaml'|'v1-inpainting-inference.yaml'|'v2-inference-v.yaml'|'v2-inference-v_fp32.yaml'|'v2-inference.yaml'|'v2-inference_fp32.yaml'|'v2-inpainting-inference.yaml')  { super.$$link(0, value) } 
set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(1, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this, 'CLIP', 1]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this, 'VAE', 2]  as unknown as VAE; }

        constructor(opts:{
            'config_name': 'anything_v3.yaml'|'v1-inference.yaml'|'v1-inference_clip_skip_2.yaml'|'v1-inference_clip_skip_2_fp16.yaml'|'v1-inference_fp16.yaml'|'v1-inpainting-inference.yaml'|'v2-inference-v.yaml'|'v2-inference-v_fp32.yaml'|'v2-inference.yaml'|'v2-inference_fp32.yaml'|'v2-inpainting-inference.yaml','ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'
        }){
            super(ctx);

            this['config_name'] = opts['config_name'];
this['ckpt_name'] = opts['ckpt_name']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'DiffusersLoader' : class extends Node{
        //Setters
        set 'model_path'(value : void)  { super.$$link(0, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this, 'CLIP', 1]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this, 'VAE', 2]  as unknown as VAE; }

        constructor(opts:{
            'model_path': void
        }){
            super(ctx);

            this['model_path'] = opts['model_path']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'LoadLatent' : class extends Node{
        //Setters
        set 'latent'(value : void)  { super.$$link(0, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'latent': void
        }){
            super(ctx);

            this['latent'] = opts['latent']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'SaveLatent' : class extends Node{
        //Setters
        set 'samples'(value : LATENT)  { super.$$link(0, value) } 
set 'filename_prefix'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        

        constructor(opts:{
            'samples': LATENT,'filename_prefix': STRING
        }){
            super(ctx);

            this['samples'] = opts['samples'];
this['filename_prefix'] = opts['filename_prefix']
            

        }

        static defaults = {
            'filename_prefix':  "latents/ComfyUI"
}
},

    /**
     * TODO Docs based on metadata
     */
    'ConditioningZeroOut' : class extends Node{
        //Setters
        set 'conditioning'(value : CONDITIONING)  { super.$$link(0, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'conditioning': CONDITIONING
        }){
            super(ctx);

            this['conditioning'] = opts['conditioning']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ConditioningSetTimestepRange' : class extends Node{
        //Setters
        set 'conditioning'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'start'(value : FLOAT)  { super.$$link(1, value) } 
set 'end'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'conditioning': CONDITIONING,'start': FLOAT,'end': FLOAT
        }){
            super(ctx);

            this['conditioning'] = opts['conditioning'];
this['start'] = opts['start'];
this['end'] = opts['end']
            

        }

        static defaults = {
            'start':  0,
'end':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'LoraLoaderModelOnly' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'lora_name'(value : 'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(1, value) } 
set 'strength_model'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'lora_name': 'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','strength_model': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['lora_name'] = opts['lora_name'];
this['strength_model'] = opts['strength_model']
            

        }

        static defaults = {
            'strength_model':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'LatentAdd' : class extends Node{
        //Setters
        set 'samples1'(value : LATENT)  { super.$$link(0, value) } 
set 'samples2'(value : LATENT)  { super.$$link(1, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'samples1': LATENT,'samples2': LATENT
        }){
            super(ctx);

            this['samples1'] = opts['samples1'];
this['samples2'] = opts['samples2']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'LatentSubtract' : class extends Node{
        //Setters
        set 'samples1'(value : LATENT)  { super.$$link(0, value) } 
set 'samples2'(value : LATENT)  { super.$$link(1, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'samples1': LATENT,'samples2': LATENT
        }){
            super(ctx);

            this['samples1'] = opts['samples1'];
this['samples2'] = opts['samples2']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'LatentMultiply' : class extends Node{
        //Setters
        set 'samples'(value : LATENT)  { super.$$link(0, value) } 
set 'multiplier'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'samples': LATENT,'multiplier': FLOAT
        }){
            super(ctx);

            this['samples'] = opts['samples'];
this['multiplier'] = opts['multiplier']
            

        }

        static defaults = {
            'multiplier':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'LatentInterpolate' : class extends Node{
        //Setters
        set 'samples1'(value : LATENT)  { super.$$link(0, value) } 
set 'samples2'(value : LATENT)  { super.$$link(1, value) } 
set 'ratio'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'samples1': LATENT,'samples2': LATENT,'ratio': FLOAT
        }){
            super(ctx);

            this['samples1'] = opts['samples1'];
this['samples2'] = opts['samples2'];
this['ratio'] = opts['ratio']
            

        }

        static defaults = {
            'ratio':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'LatentBatch' : class extends Node{
        //Setters
        set 'samples1'(value : LATENT)  { super.$$link(0, value) } 
set 'samples2'(value : LATENT)  { super.$$link(1, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'samples1': LATENT,'samples2': LATENT
        }){
            super(ctx);

            this['samples1'] = opts['samples1'];
this['samples2'] = opts['samples2']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'LatentBatchSeedBehavior' : class extends Node{
        //Setters
        set 'samples'(value : LATENT)  { super.$$link(0, value) } 
set 'seed_behavior'(value : 'random'|'fixed')  { super.$$link(1, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'samples': LATENT,'seed_behavior': 'random'|'fixed'
        }){
            super(ctx);

            this['samples'] = opts['samples'];
this['seed_behavior'] = opts['seed_behavior']
            

        }

        static defaults = {
            'seed_behavior':  "fixed"
}
},

    /**
     * TODO Docs based on metadata
     */
    'HypernetworkLoader' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'hypernetwork_name'(value : void)  { super.$$link(1, value) } 
set 'strength'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'hypernetwork_name': void,'strength': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['hypernetwork_name'] = opts['hypernetwork_name'];
this['strength'] = opts['strength']
            

        }

        static defaults = {
            'strength':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'UpscaleModelLoader' : class extends Node{
        //Setters
        set 'model_name'(value : '4x_NMKD-Superscale-SP_178000_G.pth'|'HAT_SRx4_ImageNet-pretrain.pth'|'Real_HAT_GAN_sharper.pth')  { super.$$link(0, value) } 

        //Getters
        get 'UPSCALE_MODEL'() : UPSCALE_MODEL { return [this, 'UPSCALE_MODEL', 0]  as unknown as UPSCALE_MODEL; }

        constructor(opts:{
            'model_name': '4x_NMKD-Superscale-SP_178000_G.pth'|'HAT_SRx4_ImageNet-pretrain.pth'|'Real_HAT_GAN_sharper.pth'
        }){
            super(ctx);

            this['model_name'] = opts['model_name']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ImageUpscaleWithModel' : class extends Node{
        //Setters
        set 'upscale_model'(value : UPSCALE_MODEL)  { super.$$link(0, value) } 
set 'image'(value : IMAGE)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'upscale_model': UPSCALE_MODEL,'image': IMAGE
        }){
            super(ctx);

            this['upscale_model'] = opts['upscale_model'];
this['image'] = opts['image']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ImageBlend' : class extends Node{
        //Setters
        set 'image1'(value : IMAGE)  { super.$$link(0, value) } 
set 'image2'(value : IMAGE)  { super.$$link(1, value) } 
set 'blend_factor'(value : FLOAT)  { super.$$link(2, value) } 
set 'blend_mode'(value : 'normal'|'multiply'|'screen'|'overlay'|'soft_light'|'difference')  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image1': IMAGE,'image2': IMAGE,'blend_factor': FLOAT,'blend_mode': 'normal'|'multiply'|'screen'|'overlay'|'soft_light'|'difference'
        }){
            super(ctx);

            this['image1'] = opts['image1'];
this['image2'] = opts['image2'];
this['blend_factor'] = opts['blend_factor'];
this['blend_mode'] = opts['blend_mode']
            

        }

        static defaults = {
            'blend_factor':  0.5
}
},

    /**
     * TODO Docs based on metadata
     */
    'ImageBlur' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'blur_radius'(value : INT)  { super.$$link(1, value) } 
set 'sigma'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'blur_radius': INT,'sigma': FLOAT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['blur_radius'] = opts['blur_radius'];
this['sigma'] = opts['sigma']
            

        }

        static defaults = {
            'blur_radius':  1,
'sigma':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ImageQuantize' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'colors'(value : INT)  { super.$$link(1, value) } 
set 'dither'(value : 'none'|'floyd-steinberg'|'bayer-2'|'bayer-4'|'bayer-8'|'bayer-16')  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'colors': INT,'dither': 'none'|'floyd-steinberg'|'bayer-2'|'bayer-4'|'bayer-8'|'bayer-16'
        }){
            super(ctx);

            this['image'] = opts['image'];
this['colors'] = opts['colors'];
this['dither'] = opts['dither']
            

        }

        static defaults = {
            'colors':  256
}
},

    /**
     * TODO Docs based on metadata
     */
    'ImageSharpen' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'sharpen_radius'(value : INT)  { super.$$link(1, value) } 
set 'sigma'(value : FLOAT)  { super.$$link(2, value) } 
set 'alpha'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'sharpen_radius': INT,'sigma': FLOAT,'alpha': FLOAT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['sharpen_radius'] = opts['sharpen_radius'];
this['sigma'] = opts['sigma'];
this['alpha'] = opts['alpha']
            

        }

        static defaults = {
            'sharpen_radius':  1,
'sigma':  1,
'alpha':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ImageScaleToTotalPixels' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'upscale_method'(value : 'nearest-exact'|'bilinear'|'area'|'bicubic'|'lanczos')  { super.$$link(1, value) } 
set 'megapixels'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'upscale_method': 'nearest-exact'|'bilinear'|'area'|'bicubic'|'lanczos','megapixels': FLOAT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['upscale_method'] = opts['upscale_method'];
this['megapixels'] = opts['megapixels']
            

        }

        static defaults = {
            'megapixels':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'LatentCompositeMasked' : class extends Node{
        //Setters
        set 'destination'(value : LATENT)  { super.$$link(0, value) } 
set 'source'(value : LATENT)  { super.$$link(1, value) } 
set 'x'(value : INT)  { super.$$link(2, value) } 
set 'y'(value : INT)  { super.$$link(3, value) } 
set 'resize_source'(value : BOOLEAN)  { super.$$link(4, value) } 
set 'mask'(value : MASK)  { super.$$link(5, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'destination': LATENT,'source': LATENT,'x': INT,'y': INT,'resize_source': BOOLEAN,'mask'?: MASK
        }){
            super(ctx);

            this['destination'] = opts['destination'];
this['source'] = opts['source'];
this['x'] = opts['x'];
this['y'] = opts['y'];
this['resize_source'] = opts['resize_source']
            if(opts['mask']!==undefined) this['mask'] = opts['mask']

        }

        static defaults = {
            'x':  0,
'y':  0,
'resize_source':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'ImageCompositeMasked' : class extends Node{
        //Setters
        set 'destination'(value : IMAGE)  { super.$$link(0, value) } 
set 'source'(value : IMAGE)  { super.$$link(1, value) } 
set 'x'(value : INT)  { super.$$link(2, value) } 
set 'y'(value : INT)  { super.$$link(3, value) } 
set 'resize_source'(value : BOOLEAN)  { super.$$link(4, value) } 
set 'mask'(value : MASK)  { super.$$link(5, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'destination': IMAGE,'source': IMAGE,'x': INT,'y': INT,'resize_source': BOOLEAN,'mask'?: MASK
        }){
            super(ctx);

            this['destination'] = opts['destination'];
this['source'] = opts['source'];
this['x'] = opts['x'];
this['y'] = opts['y'];
this['resize_source'] = opts['resize_source']
            if(opts['mask']!==undefined) this['mask'] = opts['mask']

        }

        static defaults = {
            'x':  0,
'y':  0,
'resize_source':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'MaskToImage' : class extends Node{
        //Setters
        set 'mask'(value : MASK)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'mask': MASK
        }){
            super(ctx);

            this['mask'] = opts['mask']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ImageToMask' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'channel'(value : 'red'|'green'|'blue'|'alpha')  { super.$$link(1, value) } 

        //Getters
        get 'MASK'() : MASK { return [this, 'MASK', 0]  as unknown as MASK; }

        constructor(opts:{
            'image': IMAGE,'channel': 'red'|'green'|'blue'|'alpha'
        }){
            super(ctx);

            this['image'] = opts['image'];
this['channel'] = opts['channel']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ImageColorToMask' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'color'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'MASK'() : MASK { return [this, 'MASK', 0]  as unknown as MASK; }

        constructor(opts:{
            'image': IMAGE,'color': INT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['color'] = opts['color']
            

        }

        static defaults = {
            'color':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'SolidMask' : class extends Node{
        //Setters
        set 'value'(value : FLOAT)  { super.$$link(0, value) } 
set 'width'(value : INT)  { super.$$link(1, value) } 
set 'height'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'MASK'() : MASK { return [this, 'MASK', 0]  as unknown as MASK; }

        constructor(opts:{
            'value': FLOAT,'width': INT,'height': INT
        }){
            super(ctx);

            this['value'] = opts['value'];
this['width'] = opts['width'];
this['height'] = opts['height']
            

        }

        static defaults = {
            'value':  1,
'width':  512,
'height':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'InvertMask' : class extends Node{
        //Setters
        set 'mask'(value : MASK)  { super.$$link(0, value) } 

        //Getters
        get 'MASK'() : MASK { return [this, 'MASK', 0]  as unknown as MASK; }

        constructor(opts:{
            'mask': MASK
        }){
            super(ctx);

            this['mask'] = opts['mask']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'CropMask' : class extends Node{
        //Setters
        set 'mask'(value : MASK)  { super.$$link(0, value) } 
set 'x'(value : INT)  { super.$$link(1, value) } 
set 'y'(value : INT)  { super.$$link(2, value) } 
set 'width'(value : INT)  { super.$$link(3, value) } 
set 'height'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'MASK'() : MASK { return [this, 'MASK', 0]  as unknown as MASK; }

        constructor(opts:{
            'mask': MASK,'x': INT,'y': INT,'width': INT,'height': INT
        }){
            super(ctx);

            this['mask'] = opts['mask'];
this['x'] = opts['x'];
this['y'] = opts['y'];
this['width'] = opts['width'];
this['height'] = opts['height']
            

        }

        static defaults = {
            'x':  0,
'y':  0,
'width':  512,
'height':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'MaskComposite' : class extends Node{
        //Setters
        set 'destination'(value : MASK)  { super.$$link(0, value) } 
set 'source'(value : MASK)  { super.$$link(1, value) } 
set 'x'(value : INT)  { super.$$link(2, value) } 
set 'y'(value : INT)  { super.$$link(3, value) } 
set 'operation'(value : 'multiply'|'add'|'subtract'|'and'|'or'|'xor')  { super.$$link(4, value) } 

        //Getters
        get 'MASK'() : MASK { return [this, 'MASK', 0]  as unknown as MASK; }

        constructor(opts:{
            'destination': MASK,'source': MASK,'x': INT,'y': INT,'operation': 'multiply'|'add'|'subtract'|'and'|'or'|'xor'
        }){
            super(ctx);

            this['destination'] = opts['destination'];
this['source'] = opts['source'];
this['x'] = opts['x'];
this['y'] = opts['y'];
this['operation'] = opts['operation']
            

        }

        static defaults = {
            'x':  0,
'y':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'FeatherMask' : class extends Node{
        //Setters
        set 'mask'(value : MASK)  { super.$$link(0, value) } 
set 'left'(value : INT)  { super.$$link(1, value) } 
set 'top'(value : INT)  { super.$$link(2, value) } 
set 'right'(value : INT)  { super.$$link(3, value) } 
set 'bottom'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'MASK'() : MASK { return [this, 'MASK', 0]  as unknown as MASK; }

        constructor(opts:{
            'mask': MASK,'left': INT,'top': INT,'right': INT,'bottom': INT
        }){
            super(ctx);

            this['mask'] = opts['mask'];
this['left'] = opts['left'];
this['top'] = opts['top'];
this['right'] = opts['right'];
this['bottom'] = opts['bottom']
            

        }

        static defaults = {
            'left':  0,
'top':  0,
'right':  0,
'bottom':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'GrowMask' : class extends Node{
        //Setters
        set 'mask'(value : MASK)  { super.$$link(0, value) } 
set 'expand'(value : INT)  { super.$$link(1, value) } 
set 'tapered_corners'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'MASK'() : MASK { return [this, 'MASK', 0]  as unknown as MASK; }

        constructor(opts:{
            'mask': MASK,'expand': INT,'tapered_corners': BOOLEAN
        }){
            super(ctx);

            this['mask'] = opts['mask'];
this['expand'] = opts['expand'];
this['tapered_corners'] = opts['tapered_corners']
            

        }

        static defaults = {
            'expand':  0,
'tapered_corners':  true
}
},

    /**
     * TODO Docs based on metadata
     */
    'ThresholdMask' : class extends Node{
        //Setters
        set 'mask'(value : MASK)  { super.$$link(0, value) } 
set 'value'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'MASK'() : MASK { return [this, 'MASK', 0]  as unknown as MASK; }

        constructor(opts:{
            'mask': MASK,'value': FLOAT
        }){
            super(ctx);

            this['mask'] = opts['mask'];
this['value'] = opts['value']
            

        }

        static defaults = {
            'value':  0.5
}
},

    /**
     * TODO Docs based on metadata
     */
    'PorterDuffImageComposite' : class extends Node{
        //Setters
        set 'source'(value : IMAGE)  { super.$$link(0, value) } 
set 'source_alpha'(value : MASK)  { super.$$link(1, value) } 
set 'destination'(value : IMAGE)  { super.$$link(2, value) } 
set 'destination_alpha'(value : MASK)  { super.$$link(3, value) } 
set 'mode'(value : 'ADD'|'CLEAR'|'DARKEN'|'DST'|'DST_ATOP'|'DST_IN'|'DST_OUT'|'DST_OVER'|'LIGHTEN'|'MULTIPLY'|'OVERLAY'|'SCREEN'|'SRC'|'SRC_ATOP'|'SRC_IN'|'SRC_OUT'|'SRC_OVER'|'XOR')  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }
get 'MASK'() : MASK { return [this, 'MASK', 1]  as unknown as MASK; }

        constructor(opts:{
            'source': IMAGE,'source_alpha': MASK,'destination': IMAGE,'destination_alpha': MASK,'mode': 'ADD'|'CLEAR'|'DARKEN'|'DST'|'DST_ATOP'|'DST_IN'|'DST_OUT'|'DST_OVER'|'LIGHTEN'|'MULTIPLY'|'OVERLAY'|'SCREEN'|'SRC'|'SRC_ATOP'|'SRC_IN'|'SRC_OUT'|'SRC_OVER'|'XOR'
        }){
            super(ctx);

            this['source'] = opts['source'];
this['source_alpha'] = opts['source_alpha'];
this['destination'] = opts['destination'];
this['destination_alpha'] = opts['destination_alpha'];
this['mode'] = opts['mode']
            

        }

        static defaults = {
            'mode':  "DST"
}
},

    /**
     * TODO Docs based on metadata
     */
    'SplitImageWithAlpha' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }
get 'MASK'() : MASK { return [this, 'MASK', 1]  as unknown as MASK; }

        constructor(opts:{
            'image': IMAGE
        }){
            super(ctx);

            this['image'] = opts['image']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'JoinImageWithAlpha' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'alpha'(value : MASK)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'alpha': MASK
        }){
            super(ctx);

            this['image'] = opts['image'];
this['alpha'] = opts['alpha']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'RebatchLatents' : class extends Node{
        //Setters
        set 'latents'(value : LATENT)  { super.$$link(0, value) } 
set 'batch_size'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'latents': LATENT,'batch_size': INT
        }){
            super(ctx);

            this['latents'] = opts['latents'];
this['batch_size'] = opts['batch_size']
            

        }

        static defaults = {
            'batch_size':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'RebatchImages' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'batch_size'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'images': IMAGE,'batch_size': INT
        }){
            super(ctx);

            this['images'] = opts['images'];
this['batch_size'] = opts['batch_size']
            

        }

        static defaults = {
            'batch_size':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ModelMergeSimple' : class extends Node{
        //Setters
        set 'model1'(value : MODEL)  { super.$$link(0, value) } 
set 'model2'(value : MODEL)  { super.$$link(1, value) } 
set 'ratio'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model1': MODEL,'model2': MODEL,'ratio': FLOAT
        }){
            super(ctx);

            this['model1'] = opts['model1'];
this['model2'] = opts['model2'];
this['ratio'] = opts['ratio']
            

        }

        static defaults = {
            'ratio':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ModelMergeBlocks' : class extends Node{
        //Setters
        set 'model1'(value : MODEL)  { super.$$link(0, value) } 
set 'model2'(value : MODEL)  { super.$$link(1, value) } 
set 'input'(value : FLOAT)  { super.$$link(2, value) } 
set 'middle'(value : FLOAT)  { super.$$link(3, value) } 
set 'out'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model1': MODEL,'model2': MODEL,'input': FLOAT,'middle': FLOAT,'out': FLOAT
        }){
            super(ctx);

            this['model1'] = opts['model1'];
this['model2'] = opts['model2'];
this['input'] = opts['input'];
this['middle'] = opts['middle'];
this['out'] = opts['out']
            

        }

        static defaults = {
            'input':  1,
'middle':  1,
'out':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ModelMergeSubtract' : class extends Node{
        //Setters
        set 'model1'(value : MODEL)  { super.$$link(0, value) } 
set 'model2'(value : MODEL)  { super.$$link(1, value) } 
set 'multiplier'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model1': MODEL,'model2': MODEL,'multiplier': FLOAT
        }){
            super(ctx);

            this['model1'] = opts['model1'];
this['model2'] = opts['model2'];
this['multiplier'] = opts['multiplier']
            

        }

        static defaults = {
            'multiplier':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ModelMergeAdd' : class extends Node{
        //Setters
        set 'model1'(value : MODEL)  { super.$$link(0, value) } 
set 'model2'(value : MODEL)  { super.$$link(1, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model1': MODEL,'model2': MODEL
        }){
            super(ctx);

            this['model1'] = opts['model1'];
this['model2'] = opts['model2']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'CheckpointSave' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'clip'(value : CLIP)  { super.$$link(1, value) } 
set 'vae'(value : VAE)  { super.$$link(2, value) } 
set 'filename_prefix'(value : STRING)  { super.$$link(3, value) } 

        //Getters
        

        constructor(opts:{
            'model': MODEL,'clip': CLIP,'vae': VAE,'filename_prefix': STRING
        }){
            super(ctx);

            this['model'] = opts['model'];
this['clip'] = opts['clip'];
this['vae'] = opts['vae'];
this['filename_prefix'] = opts['filename_prefix']
            

        }

        static defaults = {
            'filename_prefix':  "checkpoints/ComfyUI"
}
},

    /**
     * TODO Docs based on metadata
     */
    'CLIPMergeSimple' : class extends Node{
        //Setters
        set 'clip1'(value : CLIP)  { super.$$link(0, value) } 
set 'clip2'(value : CLIP)  { super.$$link(1, value) } 
set 'ratio'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'CLIP'() : CLIP { return [this, 'CLIP', 0]  as unknown as CLIP; }

        constructor(opts:{
            'clip1': CLIP,'clip2': CLIP,'ratio': FLOAT
        }){
            super(ctx);

            this['clip1'] = opts['clip1'];
this['clip2'] = opts['clip2'];
this['ratio'] = opts['ratio']
            

        }

        static defaults = {
            'ratio':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'CLIPMergeSubtract' : class extends Node{
        //Setters
        set 'clip1'(value : CLIP)  { super.$$link(0, value) } 
set 'clip2'(value : CLIP)  { super.$$link(1, value) } 
set 'multiplier'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'CLIP'() : CLIP { return [this, 'CLIP', 0]  as unknown as CLIP; }

        constructor(opts:{
            'clip1': CLIP,'clip2': CLIP,'multiplier': FLOAT
        }){
            super(ctx);

            this['clip1'] = opts['clip1'];
this['clip2'] = opts['clip2'];
this['multiplier'] = opts['multiplier']
            

        }

        static defaults = {
            'multiplier':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'CLIPMergeAdd' : class extends Node{
        //Setters
        set 'clip1'(value : CLIP)  { super.$$link(0, value) } 
set 'clip2'(value : CLIP)  { super.$$link(1, value) } 

        //Getters
        get 'CLIP'() : CLIP { return [this, 'CLIP', 0]  as unknown as CLIP; }

        constructor(opts:{
            'clip1': CLIP,'clip2': CLIP
        }){
            super(ctx);

            this['clip1'] = opts['clip1'];
this['clip2'] = opts['clip2']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'CLIPSave' : class extends Node{
        //Setters
        set 'clip'(value : CLIP)  { super.$$link(0, value) } 
set 'filename_prefix'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        

        constructor(opts:{
            'clip': CLIP,'filename_prefix': STRING
        }){
            super(ctx);

            this['clip'] = opts['clip'];
this['filename_prefix'] = opts['filename_prefix']
            

        }

        static defaults = {
            'filename_prefix':  "clip/ComfyUI"
}
},

    /**
     * TODO Docs based on metadata
     */
    'VAESave' : class extends Node{
        //Setters
        set 'vae'(value : VAE)  { super.$$link(0, value) } 
set 'filename_prefix'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        

        constructor(opts:{
            'vae': VAE,'filename_prefix': STRING
        }){
            super(ctx);

            this['vae'] = opts['vae'];
this['filename_prefix'] = opts['filename_prefix']
            

        }

        static defaults = {
            'filename_prefix':  "vae/ComfyUI_vae"
}
},

    /**
     * TODO Docs based on metadata
     */
    'TomePatchModel' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'ratio'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'ratio': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['ratio'] = opts['ratio']
            

        }

        static defaults = {
            'ratio':  0.3
}
},

    /**
     * TODO Docs based on metadata
     */
    'CLIPTextEncodeSDXLRefiner' : class extends Node{
        //Setters
        set 'ascore'(value : FLOAT)  { super.$$link(0, value) } 
set 'width'(value : INT)  { super.$$link(1, value) } 
set 'height'(value : INT)  { super.$$link(2, value) } 
set 'text'(value : STRING)  { super.$$link(3, value) } 
set 'clip'(value : CLIP)  { super.$$link(4, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'ascore': FLOAT,'width': INT,'height': INT,'text': STRING,'clip': CLIP
        }){
            super(ctx);

            this['ascore'] = opts['ascore'];
this['width'] = opts['width'];
this['height'] = opts['height'];
this['text'] = opts['text'];
this['clip'] = opts['clip']
            

        }

        static defaults = {
            'ascore':  6,
'width':  1024,
'height':  1024
}
},

    /**
     * TODO Docs based on metadata
     */
    'CLIPTextEncodeSDXL' : class extends Node{
        //Setters
        set 'width'(value : INT)  { super.$$link(0, value) } 
set 'height'(value : INT)  { super.$$link(1, value) } 
set 'crop_w'(value : INT)  { super.$$link(2, value) } 
set 'crop_h'(value : INT)  { super.$$link(3, value) } 
set 'target_width'(value : INT)  { super.$$link(4, value) } 
set 'target_height'(value : INT)  { super.$$link(5, value) } 
set 'text_g'(value : STRING)  { super.$$link(6, value) } 
set 'clip'(value : CLIP)  { super.$$link(7, value) } 
set 'text_l'(value : STRING)  { super.$$link(8, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'width': INT,'height': INT,'crop_w': INT,'crop_h': INT,'target_width': INT,'target_height': INT,'text_g': STRING,'clip': CLIP,'text_l': STRING
        }){
            super(ctx);

            this['width'] = opts['width'];
this['height'] = opts['height'];
this['crop_w'] = opts['crop_w'];
this['crop_h'] = opts['crop_h'];
this['target_width'] = opts['target_width'];
this['target_height'] = opts['target_height'];
this['text_g'] = opts['text_g'];
this['clip'] = opts['clip'];
this['text_l'] = opts['text_l']
            

        }

        static defaults = {
            'width':  1024,
'height':  1024,
'crop_w':  0,
'crop_h':  0,
'target_width':  1024,
'target_height':  1024
}
},

    /**
     * TODO Docs based on metadata
     */
    'Canny' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'low_threshold'(value : FLOAT)  { super.$$link(1, value) } 
set 'high_threshold'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'low_threshold': FLOAT,'high_threshold': FLOAT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['low_threshold'] = opts['low_threshold'];
this['high_threshold'] = opts['high_threshold']
            

        }

        static defaults = {
            'low_threshold':  0.4,
'high_threshold':  0.8
}
},

    /**
     * TODO Docs based on metadata
     */
    'FreeU' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'b1'(value : FLOAT)  { super.$$link(1, value) } 
set 'b2'(value : FLOAT)  { super.$$link(2, value) } 
set 's1'(value : FLOAT)  { super.$$link(3, value) } 
set 's2'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'b1': FLOAT,'b2': FLOAT,'s1': FLOAT,'s2': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['b1'] = opts['b1'];
this['b2'] = opts['b2'];
this['s1'] = opts['s1'];
this['s2'] = opts['s2']
            

        }

        static defaults = {
            'b1':  1.1,
'b2':  1.2,
's1':  0.9,
's2':  0.2
}
},

    /**
     * TODO Docs based on metadata
     */
    'FreeU_V2' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'b1'(value : FLOAT)  { super.$$link(1, value) } 
set 'b2'(value : FLOAT)  { super.$$link(2, value) } 
set 's1'(value : FLOAT)  { super.$$link(3, value) } 
set 's2'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'b1': FLOAT,'b2': FLOAT,'s1': FLOAT,'s2': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['b1'] = opts['b1'];
this['b2'] = opts['b2'];
this['s1'] = opts['s1'];
this['s2'] = opts['s2']
            

        }

        static defaults = {
            'b1':  1.3,
'b2':  1.4,
's1':  0.9,
's2':  0.2
}
},

    /**
     * TODO Docs based on metadata
     */
    'SamplerCustom' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'add_noise'(value : BOOLEAN)  { super.$$link(1, value) } 
set 'noise_seed'(value : INT)  { super.$$link(2, value) } 
set 'cfg'(value : FLOAT)  { super.$$link(3, value) } 
set 'positive'(value : CONDITIONING)  { super.$$link(4, value) } 
set 'negative'(value : CONDITIONING)  { super.$$link(5, value) } 
set 'sampler'(value : SAMPLER)  { super.$$link(6, value) } 
set 'sigmas'(value : SIGMAS)  { super.$$link(7, value) } 
set 'latent_image'(value : LATENT)  { super.$$link(8, value) } 

        //Getters
        get 'output'() : LATENT { return [this, 'output', 0]  as unknown as LATENT; }
get 'denoised_output'() : LATENT { return [this, 'denoised_output', 1]  as unknown as LATENT; }

        constructor(opts:{
            'model': MODEL,'add_noise': BOOLEAN,'noise_seed': INT,'cfg': FLOAT,'positive': CONDITIONING,'negative': CONDITIONING,'sampler': SAMPLER,'sigmas': SIGMAS,'latent_image': LATENT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['add_noise'] = opts['add_noise'];
this['noise_seed'] = opts['noise_seed'];
this['cfg'] = opts['cfg'];
this['positive'] = opts['positive'];
this['negative'] = opts['negative'];
this['sampler'] = opts['sampler'];
this['sigmas'] = opts['sigmas'];
this['latent_image'] = opts['latent_image']
            

        }

        static defaults = {
            'add_noise':  true,
'noise_seed':  0,
'cfg':  8
}
},

    /**
     * TODO Docs based on metadata
     */
    'BasicScheduler' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform')  { super.$$link(1, value) } 
set 'steps'(value : INT)  { super.$$link(2, value) } 
set 'denoise'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'SIGMAS'() : SIGMAS { return [this, 'SIGMAS', 0]  as unknown as SIGMAS; }

        constructor(opts:{
            'model': MODEL,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform','steps': INT,'denoise': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['scheduler'] = opts['scheduler'];
this['steps'] = opts['steps'];
this['denoise'] = opts['denoise']
            

        }

        static defaults = {
            'steps':  20,
'denoise':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'KarrasScheduler' : class extends Node{
        //Setters
        set 'steps'(value : INT)  { super.$$link(0, value) } 
set 'sigma_max'(value : FLOAT)  { super.$$link(1, value) } 
set 'sigma_min'(value : FLOAT)  { super.$$link(2, value) } 
set 'rho'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'SIGMAS'() : SIGMAS { return [this, 'SIGMAS', 0]  as unknown as SIGMAS; }

        constructor(opts:{
            'steps': INT,'sigma_max': FLOAT,'sigma_min': FLOAT,'rho': FLOAT
        }){
            super(ctx);

            this['steps'] = opts['steps'];
this['sigma_max'] = opts['sigma_max'];
this['sigma_min'] = opts['sigma_min'];
this['rho'] = opts['rho']
            

        }

        static defaults = {
            'steps':  20,
'sigma_max':  14.614642,
'sigma_min':  0.0291675,
'rho':  7
}
},

    /**
     * TODO Docs based on metadata
     */
    'ExponentialScheduler' : class extends Node{
        //Setters
        set 'steps'(value : INT)  { super.$$link(0, value) } 
set 'sigma_max'(value : FLOAT)  { super.$$link(1, value) } 
set 'sigma_min'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'SIGMAS'() : SIGMAS { return [this, 'SIGMAS', 0]  as unknown as SIGMAS; }

        constructor(opts:{
            'steps': INT,'sigma_max': FLOAT,'sigma_min': FLOAT
        }){
            super(ctx);

            this['steps'] = opts['steps'];
this['sigma_max'] = opts['sigma_max'];
this['sigma_min'] = opts['sigma_min']
            

        }

        static defaults = {
            'steps':  20,
'sigma_max':  14.614642,
'sigma_min':  0.0291675
}
},

    /**
     * TODO Docs based on metadata
     */
    'PolyexponentialScheduler' : class extends Node{
        //Setters
        set 'steps'(value : INT)  { super.$$link(0, value) } 
set 'sigma_max'(value : FLOAT)  { super.$$link(1, value) } 
set 'sigma_min'(value : FLOAT)  { super.$$link(2, value) } 
set 'rho'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'SIGMAS'() : SIGMAS { return [this, 'SIGMAS', 0]  as unknown as SIGMAS; }

        constructor(opts:{
            'steps': INT,'sigma_max': FLOAT,'sigma_min': FLOAT,'rho': FLOAT
        }){
            super(ctx);

            this['steps'] = opts['steps'];
this['sigma_max'] = opts['sigma_max'];
this['sigma_min'] = opts['sigma_min'];
this['rho'] = opts['rho']
            

        }

        static defaults = {
            'steps':  20,
'sigma_max':  14.614642,
'sigma_min':  0.0291675,
'rho':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'VPScheduler' : class extends Node{
        //Setters
        set 'steps'(value : INT)  { super.$$link(0, value) } 
set 'beta_d'(value : FLOAT)  { super.$$link(1, value) } 
set 'beta_min'(value : FLOAT)  { super.$$link(2, value) } 
set 'eps_s'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'SIGMAS'() : SIGMAS { return [this, 'SIGMAS', 0]  as unknown as SIGMAS; }

        constructor(opts:{
            'steps': INT,'beta_d': FLOAT,'beta_min': FLOAT,'eps_s': FLOAT
        }){
            super(ctx);

            this['steps'] = opts['steps'];
this['beta_d'] = opts['beta_d'];
this['beta_min'] = opts['beta_min'];
this['eps_s'] = opts['eps_s']
            

        }

        static defaults = {
            'steps':  20,
'beta_d':  19.9,
'beta_min':  0.1,
'eps_s':  0.001
}
},

    /**
     * TODO Docs based on metadata
     */
    'SDTurboScheduler' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'steps'(value : INT)  { super.$$link(1, value) } 
set 'denoise'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'SIGMAS'() : SIGMAS { return [this, 'SIGMAS', 0]  as unknown as SIGMAS; }

        constructor(opts:{
            'model': MODEL,'steps': INT,'denoise': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['steps'] = opts['steps'];
this['denoise'] = opts['denoise']
            

        }

        static defaults = {
            'steps':  1,
'denoise':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'KSamplerSelect' : class extends Node{
        //Setters
        set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(0, value) } 

        //Getters
        get 'SAMPLER'() : SAMPLER { return [this, 'SAMPLER', 0]  as unknown as SAMPLER; }

        constructor(opts:{
            'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'
        }){
            super(ctx);

            this['sampler_name'] = opts['sampler_name']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'SamplerEulerAncestral' : class extends Node{
        //Setters
        set 'eta'(value : FLOAT)  { super.$$link(0, value) } 
set 's_noise'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'SAMPLER'() : SAMPLER { return [this, 'SAMPLER', 0]  as unknown as SAMPLER; }

        constructor(opts:{
            'eta': FLOAT,'s_noise': FLOAT
        }){
            super(ctx);

            this['eta'] = opts['eta'];
this['s_noise'] = opts['s_noise']
            

        }

        static defaults = {
            'eta':  1,
's_noise':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'SamplerEulerAncestralCFGPP' : class extends Node{
        //Setters
        set 'eta'(value : FLOAT)  { super.$$link(0, value) } 
set 's_noise'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'SAMPLER'() : SAMPLER { return [this, 'SAMPLER', 0]  as unknown as SAMPLER; }

        constructor(opts:{
            'eta': FLOAT,'s_noise': FLOAT
        }){
            super(ctx);

            this['eta'] = opts['eta'];
this['s_noise'] = opts['s_noise']
            

        }

        static defaults = {
            'eta':  1,
's_noise':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'SamplerLMS' : class extends Node{
        //Setters
        set 'order'(value : INT)  { super.$$link(0, value) } 

        //Getters
        get 'SAMPLER'() : SAMPLER { return [this, 'SAMPLER', 0]  as unknown as SAMPLER; }

        constructor(opts:{
            'order': INT
        }){
            super(ctx);

            this['order'] = opts['order']
            

        }

        static defaults = {
            'order':  4
}
},

    /**
     * TODO Docs based on metadata
     */
    'SamplerDPMPP_3M_SDE' : class extends Node{
        //Setters
        set 'eta'(value : FLOAT)  { super.$$link(0, value) } 
set 's_noise'(value : FLOAT)  { super.$$link(1, value) } 
set 'noise_device'(value : 'gpu'|'cpu')  { super.$$link(2, value) } 

        //Getters
        get 'SAMPLER'() : SAMPLER { return [this, 'SAMPLER', 0]  as unknown as SAMPLER; }

        constructor(opts:{
            'eta': FLOAT,'s_noise': FLOAT,'noise_device': 'gpu'|'cpu'
        }){
            super(ctx);

            this['eta'] = opts['eta'];
this['s_noise'] = opts['s_noise'];
this['noise_device'] = opts['noise_device']
            

        }

        static defaults = {
            'eta':  1,
's_noise':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'SamplerDPMPP_2M_SDE' : class extends Node{
        //Setters
        set 'solver_type'(value : 'midpoint'|'heun')  { super.$$link(0, value) } 
set 'eta'(value : FLOAT)  { super.$$link(1, value) } 
set 's_noise'(value : FLOAT)  { super.$$link(2, value) } 
set 'noise_device'(value : 'gpu'|'cpu')  { super.$$link(3, value) } 

        //Getters
        get 'SAMPLER'() : SAMPLER { return [this, 'SAMPLER', 0]  as unknown as SAMPLER; }

        constructor(opts:{
            'solver_type': 'midpoint'|'heun','eta': FLOAT,'s_noise': FLOAT,'noise_device': 'gpu'|'cpu'
        }){
            super(ctx);

            this['solver_type'] = opts['solver_type'];
this['eta'] = opts['eta'];
this['s_noise'] = opts['s_noise'];
this['noise_device'] = opts['noise_device']
            

        }

        static defaults = {
            'eta':  1,
's_noise':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'SamplerDPMPP_SDE' : class extends Node{
        //Setters
        set 'eta'(value : FLOAT)  { super.$$link(0, value) } 
set 's_noise'(value : FLOAT)  { super.$$link(1, value) } 
set 'r'(value : FLOAT)  { super.$$link(2, value) } 
set 'noise_device'(value : 'gpu'|'cpu')  { super.$$link(3, value) } 

        //Getters
        get 'SAMPLER'() : SAMPLER { return [this, 'SAMPLER', 0]  as unknown as SAMPLER; }

        constructor(opts:{
            'eta': FLOAT,'s_noise': FLOAT,'r': FLOAT,'noise_device': 'gpu'|'cpu'
        }){
            super(ctx);

            this['eta'] = opts['eta'];
this['s_noise'] = opts['s_noise'];
this['r'] = opts['r'];
this['noise_device'] = opts['noise_device']
            

        }

        static defaults = {
            'eta':  1,
's_noise':  1,
'r':  0.5
}
},

    /**
     * TODO Docs based on metadata
     */
    'SamplerDPMAdaptative' : class extends Node{
        //Setters
        set 'order'(value : INT)  { super.$$link(0, value) } 
set 'rtol'(value : FLOAT)  { super.$$link(1, value) } 
set 'atol'(value : FLOAT)  { super.$$link(2, value) } 
set 'h_init'(value : FLOAT)  { super.$$link(3, value) } 
set 'pcoeff'(value : FLOAT)  { super.$$link(4, value) } 
set 'icoeff'(value : FLOAT)  { super.$$link(5, value) } 
set 'dcoeff'(value : FLOAT)  { super.$$link(6, value) } 
set 'accept_safety'(value : FLOAT)  { super.$$link(7, value) } 
set 'eta'(value : FLOAT)  { super.$$link(8, value) } 
set 's_noise'(value : FLOAT)  { super.$$link(9, value) } 

        //Getters
        get 'SAMPLER'() : SAMPLER { return [this, 'SAMPLER', 0]  as unknown as SAMPLER; }

        constructor(opts:{
            'order': INT,'rtol': FLOAT,'atol': FLOAT,'h_init': FLOAT,'pcoeff': FLOAT,'icoeff': FLOAT,'dcoeff': FLOAT,'accept_safety': FLOAT,'eta': FLOAT,'s_noise': FLOAT
        }){
            super(ctx);

            this['order'] = opts['order'];
this['rtol'] = opts['rtol'];
this['atol'] = opts['atol'];
this['h_init'] = opts['h_init'];
this['pcoeff'] = opts['pcoeff'];
this['icoeff'] = opts['icoeff'];
this['dcoeff'] = opts['dcoeff'];
this['accept_safety'] = opts['accept_safety'];
this['eta'] = opts['eta'];
this['s_noise'] = opts['s_noise']
            

        }

        static defaults = {
            'order':  3,
'rtol':  0.05,
'atol':  0.0078,
'h_init':  0.05,
'pcoeff':  0,
'icoeff':  1,
'dcoeff':  0,
'accept_safety':  0.81,
'eta':  0,
's_noise':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'SplitSigmas' : class extends Node{
        //Setters
        set 'sigmas'(value : SIGMAS)  { super.$$link(0, value) } 
set 'step'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'high_sigmas'() : SIGMAS { return [this, 'high_sigmas', 0]  as unknown as SIGMAS; }
get 'low_sigmas'() : SIGMAS { return [this, 'low_sigmas', 1]  as unknown as SIGMAS; }

        constructor(opts:{
            'sigmas': SIGMAS,'step': INT
        }){
            super(ctx);

            this['sigmas'] = opts['sigmas'];
this['step'] = opts['step']
            

        }

        static defaults = {
            'step':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'SplitSigmasDenoise' : class extends Node{
        //Setters
        set 'sigmas'(value : SIGMAS)  { super.$$link(0, value) } 
set 'denoise'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'high_sigmas'() : SIGMAS { return [this, 'high_sigmas', 0]  as unknown as SIGMAS; }
get 'low_sigmas'() : SIGMAS { return [this, 'low_sigmas', 1]  as unknown as SIGMAS; }

        constructor(opts:{
            'sigmas': SIGMAS,'denoise': FLOAT
        }){
            super(ctx);

            this['sigmas'] = opts['sigmas'];
this['denoise'] = opts['denoise']
            

        }

        static defaults = {
            'denoise':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'FlipSigmas' : class extends Node{
        //Setters
        set 'sigmas'(value : SIGMAS)  { super.$$link(0, value) } 

        //Getters
        get 'SIGMAS'() : SIGMAS { return [this, 'SIGMAS', 0]  as unknown as SIGMAS; }

        constructor(opts:{
            'sigmas': SIGMAS
        }){
            super(ctx);

            this['sigmas'] = opts['sigmas']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'CFGGuider' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'positive'(value : CONDITIONING)  { super.$$link(1, value) } 
set 'negative'(value : CONDITIONING)  { super.$$link(2, value) } 
set 'cfg'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'GUIDER'() : GUIDER { return [this, 'GUIDER', 0]  as unknown as GUIDER; }

        constructor(opts:{
            'model': MODEL,'positive': CONDITIONING,'negative': CONDITIONING,'cfg': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['positive'] = opts['positive'];
this['negative'] = opts['negative'];
this['cfg'] = opts['cfg']
            

        }

        static defaults = {
            'cfg':  8
}
},

    /**
     * TODO Docs based on metadata
     */
    'DualCFGGuider' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'cond1'(value : CONDITIONING)  { super.$$link(1, value) } 
set 'cond2'(value : CONDITIONING)  { super.$$link(2, value) } 
set 'negative'(value : CONDITIONING)  { super.$$link(3, value) } 
set 'cfg_conds'(value : FLOAT)  { super.$$link(4, value) } 
set 'cfg_cond2_negative'(value : FLOAT)  { super.$$link(5, value) } 

        //Getters
        get 'GUIDER'() : GUIDER { return [this, 'GUIDER', 0]  as unknown as GUIDER; }

        constructor(opts:{
            'model': MODEL,'cond1': CONDITIONING,'cond2': CONDITIONING,'negative': CONDITIONING,'cfg_conds': FLOAT,'cfg_cond2_negative': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['cond1'] = opts['cond1'];
this['cond2'] = opts['cond2'];
this['negative'] = opts['negative'];
this['cfg_conds'] = opts['cfg_conds'];
this['cfg_cond2_negative'] = opts['cfg_cond2_negative']
            

        }

        static defaults = {
            'cfg_conds':  8,
'cfg_cond2_negative':  8
}
},

    /**
     * TODO Docs based on metadata
     */
    'BasicGuider' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'conditioning'(value : CONDITIONING)  { super.$$link(1, value) } 

        //Getters
        get 'GUIDER'() : GUIDER { return [this, 'GUIDER', 0]  as unknown as GUIDER; }

        constructor(opts:{
            'model': MODEL,'conditioning': CONDITIONING
        }){
            super(ctx);

            this['model'] = opts['model'];
this['conditioning'] = opts['conditioning']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'RandomNoise' : class extends Node{
        //Setters
        set 'noise_seed'(value : INT)  { super.$$link(0, value) } 

        //Getters
        get 'NOISE'() : NOISE { return [this, 'NOISE', 0]  as unknown as NOISE; }

        constructor(opts:{
            'noise_seed': INT
        }){
            super(ctx);

            this['noise_seed'] = opts['noise_seed']
            

        }

        static defaults = {
            'noise_seed':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'DisableNoise' : class extends Node{
        //Setters
        

        //Getters
        get 'NOISE'() : NOISE { return [this, 'NOISE', 0]  as unknown as NOISE; }

        constructor(opts:{
            
        }){
            super(ctx);

            
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'AddNoise' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'noise'(value : NOISE)  { super.$$link(1, value) } 
set 'sigmas'(value : SIGMAS)  { super.$$link(2, value) } 
set 'latent_image'(value : LATENT)  { super.$$link(3, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'model': MODEL,'noise': NOISE,'sigmas': SIGMAS,'latent_image': LATENT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['noise'] = opts['noise'];
this['sigmas'] = opts['sigmas'];
this['latent_image'] = opts['latent_image']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'SamplerCustomAdvanced' : class extends Node{
        //Setters
        set 'noise'(value : NOISE)  { super.$$link(0, value) } 
set 'guider'(value : GUIDER)  { super.$$link(1, value) } 
set 'sampler'(value : SAMPLER)  { super.$$link(2, value) } 
set 'sigmas'(value : SIGMAS)  { super.$$link(3, value) } 
set 'latent_image'(value : LATENT)  { super.$$link(4, value) } 

        //Getters
        get 'output'() : LATENT { return [this, 'output', 0]  as unknown as LATENT; }
get 'denoised_output'() : LATENT { return [this, 'denoised_output', 1]  as unknown as LATENT; }

        constructor(opts:{
            'noise': NOISE,'guider': GUIDER,'sampler': SAMPLER,'sigmas': SIGMAS,'latent_image': LATENT
        }){
            super(ctx);

            this['noise'] = opts['noise'];
this['guider'] = opts['guider'];
this['sampler'] = opts['sampler'];
this['sigmas'] = opts['sigmas'];
this['latent_image'] = opts['latent_image']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'HyperTile' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'tile_size'(value : INT)  { super.$$link(1, value) } 
set 'swap_size'(value : INT)  { super.$$link(2, value) } 
set 'max_depth'(value : INT)  { super.$$link(3, value) } 
set 'scale_depth'(value : BOOLEAN)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'tile_size': INT,'swap_size': INT,'max_depth': INT,'scale_depth': BOOLEAN
        }){
            super(ctx);

            this['model'] = opts['model'];
this['tile_size'] = opts['tile_size'];
this['swap_size'] = opts['swap_size'];
this['max_depth'] = opts['max_depth'];
this['scale_depth'] = opts['scale_depth']
            

        }

        static defaults = {
            'tile_size':  256,
'swap_size':  2,
'max_depth':  0,
'scale_depth':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'ModelSamplingDiscrete' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'sampling'(value : 'eps'|'v_prediction'|'lcm'|'x0')  { super.$$link(1, value) } 
set 'zsnr'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'sampling': 'eps'|'v_prediction'|'lcm'|'x0','zsnr': BOOLEAN
        }){
            super(ctx);

            this['model'] = opts['model'];
this['sampling'] = opts['sampling'];
this['zsnr'] = opts['zsnr']
            

        }

        static defaults = {
            'zsnr':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'ModelSamplingContinuousEDM' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'sampling'(value : 'v_prediction'|'edm_playground_v2.5'|'eps')  { super.$$link(1, value) } 
set 'sigma_max'(value : FLOAT)  { super.$$link(2, value) } 
set 'sigma_min'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'sampling': 'v_prediction'|'edm_playground_v2.5'|'eps','sigma_max': FLOAT,'sigma_min': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['sampling'] = opts['sampling'];
this['sigma_max'] = opts['sigma_max'];
this['sigma_min'] = opts['sigma_min']
            

        }

        static defaults = {
            'sigma_max':  120,
'sigma_min':  0.002
}
},

    /**
     * TODO Docs based on metadata
     */
    'ModelSamplingContinuousV' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'sampling'(value : 'v_prediction')  { super.$$link(1, value) } 
set 'sigma_max'(value : FLOAT)  { super.$$link(2, value) } 
set 'sigma_min'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'sampling': 'v_prediction','sigma_max': FLOAT,'sigma_min': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['sampling'] = opts['sampling'];
this['sigma_max'] = opts['sigma_max'];
this['sigma_min'] = opts['sigma_min']
            

        }

        static defaults = {
            'sigma_max':  500,
'sigma_min':  0.03
}
},

    /**
     * TODO Docs based on metadata
     */
    'ModelSamplingStableCascade' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'shift'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'shift': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['shift'] = opts['shift']
            

        }

        static defaults = {
            'shift':  2
}
},

    /**
     * TODO Docs based on metadata
     */
    'ModelSamplingSD3' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'shift'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'shift': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['shift'] = opts['shift']
            

        }

        static defaults = {
            'shift':  3
}
},

    /**
     * TODO Docs based on metadata
     */
    'ModelSamplingAuraFlow' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'shift'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'shift': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['shift'] = opts['shift']
            

        }

        static defaults = {
            'shift':  1.73
}
},

    /**
     * TODO Docs based on metadata
     */
    'RescaleCFG' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'multiplier'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'multiplier': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['multiplier'] = opts['multiplier']
            

        }

        static defaults = {
            'multiplier':  0.7
}
},

    /**
     * TODO Docs based on metadata
     */
    'PatchModelAddDownscale' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'block_number'(value : INT)  { super.$$link(1, value) } 
set 'downscale_factor'(value : FLOAT)  { super.$$link(2, value) } 
set 'start_percent'(value : FLOAT)  { super.$$link(3, value) } 
set 'end_percent'(value : FLOAT)  { super.$$link(4, value) } 
set 'downscale_after_skip'(value : BOOLEAN)  { super.$$link(5, value) } 
set 'downscale_method'(value : 'bicubic'|'nearest-exact'|'bilinear'|'area'|'bislerp')  { super.$$link(6, value) } 
set 'upscale_method'(value : 'bicubic'|'nearest-exact'|'bilinear'|'area'|'bislerp')  { super.$$link(7, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'block_number': INT,'downscale_factor': FLOAT,'start_percent': FLOAT,'end_percent': FLOAT,'downscale_after_skip': BOOLEAN,'downscale_method': 'bicubic'|'nearest-exact'|'bilinear'|'area'|'bislerp','upscale_method': 'bicubic'|'nearest-exact'|'bilinear'|'area'|'bislerp'
        }){
            super(ctx);

            this['model'] = opts['model'];
this['block_number'] = opts['block_number'];
this['downscale_factor'] = opts['downscale_factor'];
this['start_percent'] = opts['start_percent'];
this['end_percent'] = opts['end_percent'];
this['downscale_after_skip'] = opts['downscale_after_skip'];
this['downscale_method'] = opts['downscale_method'];
this['upscale_method'] = opts['upscale_method']
            

        }

        static defaults = {
            'block_number':  3,
'downscale_factor':  2,
'start_percent':  0,
'end_percent':  0.35,
'downscale_after_skip':  true
}
},

    /**
     * TODO Docs based on metadata
     */
    'ImageCrop' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'width'(value : INT)  { super.$$link(1, value) } 
set 'height'(value : INT)  { super.$$link(2, value) } 
set 'x'(value : INT)  { super.$$link(3, value) } 
set 'y'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'width': INT,'height': INT,'x': INT,'y': INT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['width'] = opts['width'];
this['height'] = opts['height'];
this['x'] = opts['x'];
this['y'] = opts['y']
            

        }

        static defaults = {
            'width':  512,
'height':  512,
'x':  0,
'y':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'RepeatImageBatch' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'amount'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'amount': INT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['amount'] = opts['amount']
            

        }

        static defaults = {
            'amount':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ImageFromBatch' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'batch_index'(value : INT)  { super.$$link(1, value) } 
set 'length'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'batch_index': INT,'length': INT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['batch_index'] = opts['batch_index'];
this['length'] = opts['length']
            

        }

        static defaults = {
            'batch_index':  0,
'length':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'SaveAnimatedWEBP' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'filename_prefix'(value : STRING)  { super.$$link(1, value) } 
set 'fps'(value : FLOAT)  { super.$$link(2, value) } 
set 'lossless'(value : BOOLEAN)  { super.$$link(3, value) } 
set 'quality'(value : INT)  { super.$$link(4, value) } 
set 'method'(value : 'default'|'fastest'|'slowest')  { super.$$link(5, value) } 

        //Getters
        

        constructor(opts:{
            'images': IMAGE,'filename_prefix': STRING,'fps': FLOAT,'lossless': BOOLEAN,'quality': INT,'method': 'default'|'fastest'|'slowest'
        }){
            super(ctx);

            this['images'] = opts['images'];
this['filename_prefix'] = opts['filename_prefix'];
this['fps'] = opts['fps'];
this['lossless'] = opts['lossless'];
this['quality'] = opts['quality'];
this['method'] = opts['method']
            

        }

        static defaults = {
            'filename_prefix':  "ComfyUI",
'fps':  6,
'lossless':  true,
'quality':  80
}
},

    /**
     * TODO Docs based on metadata
     */
    'SaveAnimatedPNG' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'filename_prefix'(value : STRING)  { super.$$link(1, value) } 
set 'fps'(value : FLOAT)  { super.$$link(2, value) } 
set 'compress_level'(value : INT)  { super.$$link(3, value) } 

        //Getters
        

        constructor(opts:{
            'images': IMAGE,'filename_prefix': STRING,'fps': FLOAT,'compress_level': INT
        }){
            super(ctx);

            this['images'] = opts['images'];
this['filename_prefix'] = opts['filename_prefix'];
this['fps'] = opts['fps'];
this['compress_level'] = opts['compress_level']
            

        }

        static defaults = {
            'filename_prefix':  "ComfyUI",
'fps':  6,
'compress_level':  4
}
},

    /**
     * TODO Docs based on metadata
     */
    'ImageOnlyCheckpointLoader' : class extends Node{
        //Setters
        set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(0, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'CLIP_VISION'() : CLIP_VISION { return [this, 'CLIP_VISION', 1]  as unknown as CLIP_VISION; }
get 'VAE'() : VAE { return [this, 'VAE', 2]  as unknown as VAE; }

        constructor(opts:{
            'ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'
        }){
            super(ctx);

            this['ckpt_name'] = opts['ckpt_name']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'SVD_img2vid_Conditioning' : class extends Node{
        //Setters
        set 'clip_vision'(value : CLIP_VISION)  { super.$$link(0, value) } 
set 'init_image'(value : IMAGE)  { super.$$link(1, value) } 
set 'vae'(value : VAE)  { super.$$link(2, value) } 
set 'width'(value : INT)  { super.$$link(3, value) } 
set 'height'(value : INT)  { super.$$link(4, value) } 
set 'video_frames'(value : INT)  { super.$$link(5, value) } 
set 'motion_bucket_id'(value : INT)  { super.$$link(6, value) } 
set 'fps'(value : INT)  { super.$$link(7, value) } 
set 'augmentation_level'(value : FLOAT)  { super.$$link(8, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this, 'positive', 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this, 'negative', 1]  as unknown as CONDITIONING; }
get 'latent'() : LATENT { return [this, 'latent', 2]  as unknown as LATENT; }

        constructor(opts:{
            'clip_vision': CLIP_VISION,'init_image': IMAGE,'vae': VAE,'width': INT,'height': INT,'video_frames': INT,'motion_bucket_id': INT,'fps': INT,'augmentation_level': FLOAT
        }){
            super(ctx);

            this['clip_vision'] = opts['clip_vision'];
this['init_image'] = opts['init_image'];
this['vae'] = opts['vae'];
this['width'] = opts['width'];
this['height'] = opts['height'];
this['video_frames'] = opts['video_frames'];
this['motion_bucket_id'] = opts['motion_bucket_id'];
this['fps'] = opts['fps'];
this['augmentation_level'] = opts['augmentation_level']
            

        }

        static defaults = {
            'width':  1024,
'height':  576,
'video_frames':  14,
'motion_bucket_id':  127,
'fps':  6,
'augmentation_level':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'VideoLinearCFGGuidance' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'min_cfg'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'min_cfg': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['min_cfg'] = opts['min_cfg']
            

        }

        static defaults = {
            'min_cfg':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'VideoTriangleCFGGuidance' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'min_cfg'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'min_cfg': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['min_cfg'] = opts['min_cfg']
            

        }

        static defaults = {
            'min_cfg':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ImageOnlyCheckpointSave' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'clip_vision'(value : CLIP_VISION)  { super.$$link(1, value) } 
set 'vae'(value : VAE)  { super.$$link(2, value) } 
set 'filename_prefix'(value : STRING)  { super.$$link(3, value) } 

        //Getters
        

        constructor(opts:{
            'model': MODEL,'clip_vision': CLIP_VISION,'vae': VAE,'filename_prefix': STRING
        }){
            super(ctx);

            this['model'] = opts['model'];
this['clip_vision'] = opts['clip_vision'];
this['vae'] = opts['vae'];
this['filename_prefix'] = opts['filename_prefix']
            

        }

        static defaults = {
            'filename_prefix':  "checkpoints/ComfyUI"
}
},

    /**
     * TODO Docs based on metadata
     */
    'SelfAttentionGuidance' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'scale'(value : FLOAT)  { super.$$link(1, value) } 
set 'blur_sigma'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'scale': FLOAT,'blur_sigma': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['scale'] = opts['scale'];
this['blur_sigma'] = opts['blur_sigma']
            

        }

        static defaults = {
            'scale':  0.5,
'blur_sigma':  2
}
},

    /**
     * TODO Docs based on metadata
     */
    'PerpNeg' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'empty_conditioning'(value : CONDITIONING)  { super.$$link(1, value) } 
set 'neg_scale'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'empty_conditioning': CONDITIONING,'neg_scale': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['empty_conditioning'] = opts['empty_conditioning'];
this['neg_scale'] = opts['neg_scale']
            

        }

        static defaults = {
            'neg_scale':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'PerpNegGuider' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'positive'(value : CONDITIONING)  { super.$$link(1, value) } 
set 'negative'(value : CONDITIONING)  { super.$$link(2, value) } 
set 'empty_conditioning'(value : CONDITIONING)  { super.$$link(3, value) } 
set 'cfg'(value : FLOAT)  { super.$$link(4, value) } 
set 'neg_scale'(value : FLOAT)  { super.$$link(5, value) } 

        //Getters
        get 'GUIDER'() : GUIDER { return [this, 'GUIDER', 0]  as unknown as GUIDER; }

        constructor(opts:{
            'model': MODEL,'positive': CONDITIONING,'negative': CONDITIONING,'empty_conditioning': CONDITIONING,'cfg': FLOAT,'neg_scale': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['positive'] = opts['positive'];
this['negative'] = opts['negative'];
this['empty_conditioning'] = opts['empty_conditioning'];
this['cfg'] = opts['cfg'];
this['neg_scale'] = opts['neg_scale']
            

        }

        static defaults = {
            'cfg':  8,
'neg_scale':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'StableZero123_Conditioning' : class extends Node{
        //Setters
        set 'clip_vision'(value : CLIP_VISION)  { super.$$link(0, value) } 
set 'init_image'(value : IMAGE)  { super.$$link(1, value) } 
set 'vae'(value : VAE)  { super.$$link(2, value) } 
set 'width'(value : INT)  { super.$$link(3, value) } 
set 'height'(value : INT)  { super.$$link(4, value) } 
set 'batch_size'(value : INT)  { super.$$link(5, value) } 
set 'elevation'(value : FLOAT)  { super.$$link(6, value) } 
set 'azimuth'(value : FLOAT)  { super.$$link(7, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this, 'positive', 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this, 'negative', 1]  as unknown as CONDITIONING; }
get 'latent'() : LATENT { return [this, 'latent', 2]  as unknown as LATENT; }

        constructor(opts:{
            'clip_vision': CLIP_VISION,'init_image': IMAGE,'vae': VAE,'width': INT,'height': INT,'batch_size': INT,'elevation': FLOAT,'azimuth': FLOAT
        }){
            super(ctx);

            this['clip_vision'] = opts['clip_vision'];
this['init_image'] = opts['init_image'];
this['vae'] = opts['vae'];
this['width'] = opts['width'];
this['height'] = opts['height'];
this['batch_size'] = opts['batch_size'];
this['elevation'] = opts['elevation'];
this['azimuth'] = opts['azimuth']
            

        }

        static defaults = {
            'width':  256,
'height':  256,
'batch_size':  1,
'elevation':  0,
'azimuth':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'StableZero123_Conditioning_Batched' : class extends Node{
        //Setters
        set 'clip_vision'(value : CLIP_VISION)  { super.$$link(0, value) } 
set 'init_image'(value : IMAGE)  { super.$$link(1, value) } 
set 'vae'(value : VAE)  { super.$$link(2, value) } 
set 'width'(value : INT)  { super.$$link(3, value) } 
set 'height'(value : INT)  { super.$$link(4, value) } 
set 'batch_size'(value : INT)  { super.$$link(5, value) } 
set 'elevation'(value : FLOAT)  { super.$$link(6, value) } 
set 'azimuth'(value : FLOAT)  { super.$$link(7, value) } 
set 'elevation_batch_increment'(value : FLOAT)  { super.$$link(8, value) } 
set 'azimuth_batch_increment'(value : FLOAT)  { super.$$link(9, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this, 'positive', 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this, 'negative', 1]  as unknown as CONDITIONING; }
get 'latent'() : LATENT { return [this, 'latent', 2]  as unknown as LATENT; }

        constructor(opts:{
            'clip_vision': CLIP_VISION,'init_image': IMAGE,'vae': VAE,'width': INT,'height': INT,'batch_size': INT,'elevation': FLOAT,'azimuth': FLOAT,'elevation_batch_increment': FLOAT,'azimuth_batch_increment': FLOAT
        }){
            super(ctx);

            this['clip_vision'] = opts['clip_vision'];
this['init_image'] = opts['init_image'];
this['vae'] = opts['vae'];
this['width'] = opts['width'];
this['height'] = opts['height'];
this['batch_size'] = opts['batch_size'];
this['elevation'] = opts['elevation'];
this['azimuth'] = opts['azimuth'];
this['elevation_batch_increment'] = opts['elevation_batch_increment'];
this['azimuth_batch_increment'] = opts['azimuth_batch_increment']
            

        }

        static defaults = {
            'width':  256,
'height':  256,
'batch_size':  1,
'elevation':  0,
'azimuth':  0,
'elevation_batch_increment':  0,
'azimuth_batch_increment':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'SV3D_Conditioning' : class extends Node{
        //Setters
        set 'clip_vision'(value : CLIP_VISION)  { super.$$link(0, value) } 
set 'init_image'(value : IMAGE)  { super.$$link(1, value) } 
set 'vae'(value : VAE)  { super.$$link(2, value) } 
set 'width'(value : INT)  { super.$$link(3, value) } 
set 'height'(value : INT)  { super.$$link(4, value) } 
set 'video_frames'(value : INT)  { super.$$link(5, value) } 
set 'elevation'(value : FLOAT)  { super.$$link(6, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this, 'positive', 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this, 'negative', 1]  as unknown as CONDITIONING; }
get 'latent'() : LATENT { return [this, 'latent', 2]  as unknown as LATENT; }

        constructor(opts:{
            'clip_vision': CLIP_VISION,'init_image': IMAGE,'vae': VAE,'width': INT,'height': INT,'video_frames': INT,'elevation': FLOAT
        }){
            super(ctx);

            this['clip_vision'] = opts['clip_vision'];
this['init_image'] = opts['init_image'];
this['vae'] = opts['vae'];
this['width'] = opts['width'];
this['height'] = opts['height'];
this['video_frames'] = opts['video_frames'];
this['elevation'] = opts['elevation']
            

        }

        static defaults = {
            'width':  576,
'height':  576,
'video_frames':  21,
'elevation':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'SD_4XUpscale_Conditioning' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'positive'(value : CONDITIONING)  { super.$$link(1, value) } 
set 'negative'(value : CONDITIONING)  { super.$$link(2, value) } 
set 'scale_ratio'(value : FLOAT)  { super.$$link(3, value) } 
set 'noise_augmentation'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this, 'positive', 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this, 'negative', 1]  as unknown as CONDITIONING; }
get 'latent'() : LATENT { return [this, 'latent', 2]  as unknown as LATENT; }

        constructor(opts:{
            'images': IMAGE,'positive': CONDITIONING,'negative': CONDITIONING,'scale_ratio': FLOAT,'noise_augmentation': FLOAT
        }){
            super(ctx);

            this['images'] = opts['images'];
this['positive'] = opts['positive'];
this['negative'] = opts['negative'];
this['scale_ratio'] = opts['scale_ratio'];
this['noise_augmentation'] = opts['noise_augmentation']
            

        }

        static defaults = {
            'scale_ratio':  4,
'noise_augmentation':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'PhotoMakerLoader' : class extends Node{
        //Setters
        set 'photomaker_model_name'(value : void)  { super.$$link(0, value) } 

        //Getters
        get 'PHOTOMAKER'() : PHOTOMAKER { return [this, 'PHOTOMAKER', 0]  as unknown as PHOTOMAKER; }

        constructor(opts:{
            'photomaker_model_name': void
        }){
            super(ctx);

            this['photomaker_model_name'] = opts['photomaker_model_name']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'PhotoMakerEncode' : class extends Node{
        //Setters
        set 'photomaker'(value : PHOTOMAKER)  { super.$$link(0, value) } 
set 'image'(value : IMAGE)  { super.$$link(1, value) } 
set 'clip'(value : CLIP)  { super.$$link(2, value) } 
set 'text'(value : STRING)  { super.$$link(3, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'photomaker': PHOTOMAKER,'image': IMAGE,'clip': CLIP,'text': STRING
        }){
            super(ctx);

            this['photomaker'] = opts['photomaker'];
this['image'] = opts['image'];
this['clip'] = opts['clip'];
this['text'] = opts['text']
            

        }

        static defaults = {
            'text':  "photograph of photomaker"
}
},

    /**
     * TODO Docs based on metadata
     */
    'CLIPTextEncodeControlnet' : class extends Node{
        //Setters
        set 'clip'(value : CLIP)  { super.$$link(0, value) } 
set 'conditioning'(value : CONDITIONING)  { super.$$link(1, value) } 
set 'text'(value : STRING)  { super.$$link(2, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'clip': CLIP,'conditioning': CONDITIONING,'text': STRING
        }){
            super(ctx);

            this['clip'] = opts['clip'];
this['conditioning'] = opts['conditioning'];
this['text'] = opts['text']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Morphology' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'operation'(value : 'erode'|'dilate'|'open'|'close'|'gradient'|'bottom_hat'|'top_hat')  { super.$$link(1, value) } 
set 'kernel_size'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'operation': 'erode'|'dilate'|'open'|'close'|'gradient'|'bottom_hat'|'top_hat','kernel_size': INT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['operation'] = opts['operation'];
this['kernel_size'] = opts['kernel_size']
            

        }

        static defaults = {
            'kernel_size':  3
}
},

    /**
     * TODO Docs based on metadata
     */
    'StableCascade_EmptyLatentImage' : class extends Node{
        //Setters
        set 'width'(value : INT)  { super.$$link(0, value) } 
set 'height'(value : INT)  { super.$$link(1, value) } 
set 'compression'(value : INT)  { super.$$link(2, value) } 
set 'batch_size'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'stage_c'() : LATENT { return [this, 'stage_c', 0]  as unknown as LATENT; }
get 'stage_b'() : LATENT { return [this, 'stage_b', 1]  as unknown as LATENT; }

        constructor(opts:{
            'width': INT,'height': INT,'compression': INT,'batch_size': INT
        }){
            super(ctx);

            this['width'] = opts['width'];
this['height'] = opts['height'];
this['compression'] = opts['compression'];
this['batch_size'] = opts['batch_size']
            

        }

        static defaults = {
            'width':  1024,
'height':  1024,
'compression':  42,
'batch_size':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'StableCascade_StageB_Conditioning' : class extends Node{
        //Setters
        set 'conditioning'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'stage_c'(value : LATENT)  { super.$$link(1, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'conditioning': CONDITIONING,'stage_c': LATENT
        }){
            super(ctx);

            this['conditioning'] = opts['conditioning'];
this['stage_c'] = opts['stage_c']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'StableCascade_StageC_VAEEncode' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'vae'(value : VAE)  { super.$$link(1, value) } 
set 'compression'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'stage_c'() : LATENT { return [this, 'stage_c', 0]  as unknown as LATENT; }
get 'stage_b'() : LATENT { return [this, 'stage_b', 1]  as unknown as LATENT; }

        constructor(opts:{
            'image': IMAGE,'vae': VAE,'compression': INT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['vae'] = opts['vae'];
this['compression'] = opts['compression']
            

        }

        static defaults = {
            'compression':  42
}
},

    /**
     * TODO Docs based on metadata
     */
    'StableCascade_SuperResolutionControlnet' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'vae'(value : VAE)  { super.$$link(1, value) } 

        //Getters
        get 'controlnet_input'() : IMAGE { return [this, 'controlnet_input', 0]  as unknown as IMAGE; }
get 'stage_c'() : LATENT { return [this, 'stage_c', 1]  as unknown as LATENT; }
get 'stage_b'() : LATENT { return [this, 'stage_b', 2]  as unknown as LATENT; }

        constructor(opts:{
            'image': IMAGE,'vae': VAE
        }){
            super(ctx);

            this['image'] = opts['image'];
this['vae'] = opts['vae']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'DifferentialDiffusion' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL
        }){
            super(ctx);

            this['model'] = opts['model']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'InstructPixToPixConditioning' : class extends Node{
        //Setters
        set 'positive'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'negative'(value : CONDITIONING)  { super.$$link(1, value) } 
set 'vae'(value : VAE)  { super.$$link(2, value) } 
set 'pixels'(value : IMAGE)  { super.$$link(3, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this, 'positive', 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this, 'negative', 1]  as unknown as CONDITIONING; }
get 'latent'() : LATENT { return [this, 'latent', 2]  as unknown as LATENT; }

        constructor(opts:{
            'positive': CONDITIONING,'negative': CONDITIONING,'vae': VAE,'pixels': IMAGE
        }){
            super(ctx);

            this['positive'] = opts['positive'];
this['negative'] = opts['negative'];
this['vae'] = opts['vae'];
this['pixels'] = opts['pixels']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ModelMergeSD1' : class extends Node{
        //Setters
        set 'model1'(value : MODEL)  { super.$$link(0, value) } 
set 'model2'(value : MODEL)  { super.$$link(1, value) } 
set 'time_embed.'(value : FLOAT)  { super.$$link(2, value) } 
set 'label_emb.'(value : FLOAT)  { super.$$link(3, value) } 
set 'input_blocks.0.'(value : FLOAT)  { super.$$link(4, value) } 
set 'input_blocks.1.'(value : FLOAT)  { super.$$link(5, value) } 
set 'input_blocks.2.'(value : FLOAT)  { super.$$link(6, value) } 
set 'input_blocks.3.'(value : FLOAT)  { super.$$link(7, value) } 
set 'input_blocks.4.'(value : FLOAT)  { super.$$link(8, value) } 
set 'input_blocks.5.'(value : FLOAT)  { super.$$link(9, value) } 
set 'input_blocks.6.'(value : FLOAT)  { super.$$link(10, value) } 
set 'input_blocks.7.'(value : FLOAT)  { super.$$link(11, value) } 
set 'input_blocks.8.'(value : FLOAT)  { super.$$link(12, value) } 
set 'input_blocks.9.'(value : FLOAT)  { super.$$link(13, value) } 
set 'input_blocks.10.'(value : FLOAT)  { super.$$link(14, value) } 
set 'input_blocks.11.'(value : FLOAT)  { super.$$link(15, value) } 
set 'middle_block.0.'(value : FLOAT)  { super.$$link(16, value) } 
set 'middle_block.1.'(value : FLOAT)  { super.$$link(17, value) } 
set 'middle_block.2.'(value : FLOAT)  { super.$$link(18, value) } 
set 'output_blocks.0.'(value : FLOAT)  { super.$$link(19, value) } 
set 'output_blocks.1.'(value : FLOAT)  { super.$$link(20, value) } 
set 'output_blocks.2.'(value : FLOAT)  { super.$$link(21, value) } 
set 'output_blocks.3.'(value : FLOAT)  { super.$$link(22, value) } 
set 'output_blocks.4.'(value : FLOAT)  { super.$$link(23, value) } 
set 'output_blocks.5.'(value : FLOAT)  { super.$$link(24, value) } 
set 'output_blocks.6.'(value : FLOAT)  { super.$$link(25, value) } 
set 'output_blocks.7.'(value : FLOAT)  { super.$$link(26, value) } 
set 'output_blocks.8.'(value : FLOAT)  { super.$$link(27, value) } 
set 'output_blocks.9.'(value : FLOAT)  { super.$$link(28, value) } 
set 'output_blocks.10.'(value : FLOAT)  { super.$$link(29, value) } 
set 'output_blocks.11.'(value : FLOAT)  { super.$$link(30, value) } 
set 'out.'(value : FLOAT)  { super.$$link(31, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model1': MODEL,'model2': MODEL,'time_embed.': FLOAT,'label_emb.': FLOAT,'input_blocks.0.': FLOAT,'input_blocks.1.': FLOAT,'input_blocks.2.': FLOAT,'input_blocks.3.': FLOAT,'input_blocks.4.': FLOAT,'input_blocks.5.': FLOAT,'input_blocks.6.': FLOAT,'input_blocks.7.': FLOAT,'input_blocks.8.': FLOAT,'input_blocks.9.': FLOAT,'input_blocks.10.': FLOAT,'input_blocks.11.': FLOAT,'middle_block.0.': FLOAT,'middle_block.1.': FLOAT,'middle_block.2.': FLOAT,'output_blocks.0.': FLOAT,'output_blocks.1.': FLOAT,'output_blocks.2.': FLOAT,'output_blocks.3.': FLOAT,'output_blocks.4.': FLOAT,'output_blocks.5.': FLOAT,'output_blocks.6.': FLOAT,'output_blocks.7.': FLOAT,'output_blocks.8.': FLOAT,'output_blocks.9.': FLOAT,'output_blocks.10.': FLOAT,'output_blocks.11.': FLOAT,'out.': FLOAT
        }){
            super(ctx);

            this['model1'] = opts['model1'];
this['model2'] = opts['model2'];
this['time_embed.'] = opts['time_embed.'];
this['label_emb.'] = opts['label_emb.'];
this['input_blocks.0.'] = opts['input_blocks.0.'];
this['input_blocks.1.'] = opts['input_blocks.1.'];
this['input_blocks.2.'] = opts['input_blocks.2.'];
this['input_blocks.3.'] = opts['input_blocks.3.'];
this['input_blocks.4.'] = opts['input_blocks.4.'];
this['input_blocks.5.'] = opts['input_blocks.5.'];
this['input_blocks.6.'] = opts['input_blocks.6.'];
this['input_blocks.7.'] = opts['input_blocks.7.'];
this['input_blocks.8.'] = opts['input_blocks.8.'];
this['input_blocks.9.'] = opts['input_blocks.9.'];
this['input_blocks.10.'] = opts['input_blocks.10.'];
this['input_blocks.11.'] = opts['input_blocks.11.'];
this['middle_block.0.'] = opts['middle_block.0.'];
this['middle_block.1.'] = opts['middle_block.1.'];
this['middle_block.2.'] = opts['middle_block.2.'];
this['output_blocks.0.'] = opts['output_blocks.0.'];
this['output_blocks.1.'] = opts['output_blocks.1.'];
this['output_blocks.2.'] = opts['output_blocks.2.'];
this['output_blocks.3.'] = opts['output_blocks.3.'];
this['output_blocks.4.'] = opts['output_blocks.4.'];
this['output_blocks.5.'] = opts['output_blocks.5.'];
this['output_blocks.6.'] = opts['output_blocks.6.'];
this['output_blocks.7.'] = opts['output_blocks.7.'];
this['output_blocks.8.'] = opts['output_blocks.8.'];
this['output_blocks.9.'] = opts['output_blocks.9.'];
this['output_blocks.10.'] = opts['output_blocks.10.'];
this['output_blocks.11.'] = opts['output_blocks.11.'];
this['out.'] = opts['out.']
            

        }

        static defaults = {
            'time_embed.':  1,
'label_emb.':  1,
'input_blocks.0.':  1,
'input_blocks.1.':  1,
'input_blocks.2.':  1,
'input_blocks.3.':  1,
'input_blocks.4.':  1,
'input_blocks.5.':  1,
'input_blocks.6.':  1,
'input_blocks.7.':  1,
'input_blocks.8.':  1,
'input_blocks.9.':  1,
'input_blocks.10.':  1,
'input_blocks.11.':  1,
'middle_block.0.':  1,
'middle_block.1.':  1,
'middle_block.2.':  1,
'output_blocks.0.':  1,
'output_blocks.1.':  1,
'output_blocks.2.':  1,
'output_blocks.3.':  1,
'output_blocks.4.':  1,
'output_blocks.5.':  1,
'output_blocks.6.':  1,
'output_blocks.7.':  1,
'output_blocks.8.':  1,
'output_blocks.9.':  1,
'output_blocks.10.':  1,
'output_blocks.11.':  1,
'out.':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ModelMergeSD2' : class extends Node{
        //Setters
        set 'model1'(value : MODEL)  { super.$$link(0, value) } 
set 'model2'(value : MODEL)  { super.$$link(1, value) } 
set 'time_embed.'(value : FLOAT)  { super.$$link(2, value) } 
set 'label_emb.'(value : FLOAT)  { super.$$link(3, value) } 
set 'input_blocks.0.'(value : FLOAT)  { super.$$link(4, value) } 
set 'input_blocks.1.'(value : FLOAT)  { super.$$link(5, value) } 
set 'input_blocks.2.'(value : FLOAT)  { super.$$link(6, value) } 
set 'input_blocks.3.'(value : FLOAT)  { super.$$link(7, value) } 
set 'input_blocks.4.'(value : FLOAT)  { super.$$link(8, value) } 
set 'input_blocks.5.'(value : FLOAT)  { super.$$link(9, value) } 
set 'input_blocks.6.'(value : FLOAT)  { super.$$link(10, value) } 
set 'input_blocks.7.'(value : FLOAT)  { super.$$link(11, value) } 
set 'input_blocks.8.'(value : FLOAT)  { super.$$link(12, value) } 
set 'input_blocks.9.'(value : FLOAT)  { super.$$link(13, value) } 
set 'input_blocks.10.'(value : FLOAT)  { super.$$link(14, value) } 
set 'input_blocks.11.'(value : FLOAT)  { super.$$link(15, value) } 
set 'middle_block.0.'(value : FLOAT)  { super.$$link(16, value) } 
set 'middle_block.1.'(value : FLOAT)  { super.$$link(17, value) } 
set 'middle_block.2.'(value : FLOAT)  { super.$$link(18, value) } 
set 'output_blocks.0.'(value : FLOAT)  { super.$$link(19, value) } 
set 'output_blocks.1.'(value : FLOAT)  { super.$$link(20, value) } 
set 'output_blocks.2.'(value : FLOAT)  { super.$$link(21, value) } 
set 'output_blocks.3.'(value : FLOAT)  { super.$$link(22, value) } 
set 'output_blocks.4.'(value : FLOAT)  { super.$$link(23, value) } 
set 'output_blocks.5.'(value : FLOAT)  { super.$$link(24, value) } 
set 'output_blocks.6.'(value : FLOAT)  { super.$$link(25, value) } 
set 'output_blocks.7.'(value : FLOAT)  { super.$$link(26, value) } 
set 'output_blocks.8.'(value : FLOAT)  { super.$$link(27, value) } 
set 'output_blocks.9.'(value : FLOAT)  { super.$$link(28, value) } 
set 'output_blocks.10.'(value : FLOAT)  { super.$$link(29, value) } 
set 'output_blocks.11.'(value : FLOAT)  { super.$$link(30, value) } 
set 'out.'(value : FLOAT)  { super.$$link(31, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model1': MODEL,'model2': MODEL,'time_embed.': FLOAT,'label_emb.': FLOAT,'input_blocks.0.': FLOAT,'input_blocks.1.': FLOAT,'input_blocks.2.': FLOAT,'input_blocks.3.': FLOAT,'input_blocks.4.': FLOAT,'input_blocks.5.': FLOAT,'input_blocks.6.': FLOAT,'input_blocks.7.': FLOAT,'input_blocks.8.': FLOAT,'input_blocks.9.': FLOAT,'input_blocks.10.': FLOAT,'input_blocks.11.': FLOAT,'middle_block.0.': FLOAT,'middle_block.1.': FLOAT,'middle_block.2.': FLOAT,'output_blocks.0.': FLOAT,'output_blocks.1.': FLOAT,'output_blocks.2.': FLOAT,'output_blocks.3.': FLOAT,'output_blocks.4.': FLOAT,'output_blocks.5.': FLOAT,'output_blocks.6.': FLOAT,'output_blocks.7.': FLOAT,'output_blocks.8.': FLOAT,'output_blocks.9.': FLOAT,'output_blocks.10.': FLOAT,'output_blocks.11.': FLOAT,'out.': FLOAT
        }){
            super(ctx);

            this['model1'] = opts['model1'];
this['model2'] = opts['model2'];
this['time_embed.'] = opts['time_embed.'];
this['label_emb.'] = opts['label_emb.'];
this['input_blocks.0.'] = opts['input_blocks.0.'];
this['input_blocks.1.'] = opts['input_blocks.1.'];
this['input_blocks.2.'] = opts['input_blocks.2.'];
this['input_blocks.3.'] = opts['input_blocks.3.'];
this['input_blocks.4.'] = opts['input_blocks.4.'];
this['input_blocks.5.'] = opts['input_blocks.5.'];
this['input_blocks.6.'] = opts['input_blocks.6.'];
this['input_blocks.7.'] = opts['input_blocks.7.'];
this['input_blocks.8.'] = opts['input_blocks.8.'];
this['input_blocks.9.'] = opts['input_blocks.9.'];
this['input_blocks.10.'] = opts['input_blocks.10.'];
this['input_blocks.11.'] = opts['input_blocks.11.'];
this['middle_block.0.'] = opts['middle_block.0.'];
this['middle_block.1.'] = opts['middle_block.1.'];
this['middle_block.2.'] = opts['middle_block.2.'];
this['output_blocks.0.'] = opts['output_blocks.0.'];
this['output_blocks.1.'] = opts['output_blocks.1.'];
this['output_blocks.2.'] = opts['output_blocks.2.'];
this['output_blocks.3.'] = opts['output_blocks.3.'];
this['output_blocks.4.'] = opts['output_blocks.4.'];
this['output_blocks.5.'] = opts['output_blocks.5.'];
this['output_blocks.6.'] = opts['output_blocks.6.'];
this['output_blocks.7.'] = opts['output_blocks.7.'];
this['output_blocks.8.'] = opts['output_blocks.8.'];
this['output_blocks.9.'] = opts['output_blocks.9.'];
this['output_blocks.10.'] = opts['output_blocks.10.'];
this['output_blocks.11.'] = opts['output_blocks.11.'];
this['out.'] = opts['out.']
            

        }

        static defaults = {
            'time_embed.':  1,
'label_emb.':  1,
'input_blocks.0.':  1,
'input_blocks.1.':  1,
'input_blocks.2.':  1,
'input_blocks.3.':  1,
'input_blocks.4.':  1,
'input_blocks.5.':  1,
'input_blocks.6.':  1,
'input_blocks.7.':  1,
'input_blocks.8.':  1,
'input_blocks.9.':  1,
'input_blocks.10.':  1,
'input_blocks.11.':  1,
'middle_block.0.':  1,
'middle_block.1.':  1,
'middle_block.2.':  1,
'output_blocks.0.':  1,
'output_blocks.1.':  1,
'output_blocks.2.':  1,
'output_blocks.3.':  1,
'output_blocks.4.':  1,
'output_blocks.5.':  1,
'output_blocks.6.':  1,
'output_blocks.7.':  1,
'output_blocks.8.':  1,
'output_blocks.9.':  1,
'output_blocks.10.':  1,
'output_blocks.11.':  1,
'out.':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ModelMergeSDXL' : class extends Node{
        //Setters
        set 'model1'(value : MODEL)  { super.$$link(0, value) } 
set 'model2'(value : MODEL)  { super.$$link(1, value) } 
set 'time_embed.'(value : FLOAT)  { super.$$link(2, value) } 
set 'label_emb.'(value : FLOAT)  { super.$$link(3, value) } 
set 'input_blocks.0'(value : FLOAT)  { super.$$link(4, value) } 
set 'input_blocks.1'(value : FLOAT)  { super.$$link(5, value) } 
set 'input_blocks.2'(value : FLOAT)  { super.$$link(6, value) } 
set 'input_blocks.3'(value : FLOAT)  { super.$$link(7, value) } 
set 'input_blocks.4'(value : FLOAT)  { super.$$link(8, value) } 
set 'input_blocks.5'(value : FLOAT)  { super.$$link(9, value) } 
set 'input_blocks.6'(value : FLOAT)  { super.$$link(10, value) } 
set 'input_blocks.7'(value : FLOAT)  { super.$$link(11, value) } 
set 'input_blocks.8'(value : FLOAT)  { super.$$link(12, value) } 
set 'middle_block.0'(value : FLOAT)  { super.$$link(13, value) } 
set 'middle_block.1'(value : FLOAT)  { super.$$link(14, value) } 
set 'middle_block.2'(value : FLOAT)  { super.$$link(15, value) } 
set 'output_blocks.0'(value : FLOAT)  { super.$$link(16, value) } 
set 'output_blocks.1'(value : FLOAT)  { super.$$link(17, value) } 
set 'output_blocks.2'(value : FLOAT)  { super.$$link(18, value) } 
set 'output_blocks.3'(value : FLOAT)  { super.$$link(19, value) } 
set 'output_blocks.4'(value : FLOAT)  { super.$$link(20, value) } 
set 'output_blocks.5'(value : FLOAT)  { super.$$link(21, value) } 
set 'output_blocks.6'(value : FLOAT)  { super.$$link(22, value) } 
set 'output_blocks.7'(value : FLOAT)  { super.$$link(23, value) } 
set 'output_blocks.8'(value : FLOAT)  { super.$$link(24, value) } 
set 'out.'(value : FLOAT)  { super.$$link(25, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model1': MODEL,'model2': MODEL,'time_embed.': FLOAT,'label_emb.': FLOAT,'input_blocks.0': FLOAT,'input_blocks.1': FLOAT,'input_blocks.2': FLOAT,'input_blocks.3': FLOAT,'input_blocks.4': FLOAT,'input_blocks.5': FLOAT,'input_blocks.6': FLOAT,'input_blocks.7': FLOAT,'input_blocks.8': FLOAT,'middle_block.0': FLOAT,'middle_block.1': FLOAT,'middle_block.2': FLOAT,'output_blocks.0': FLOAT,'output_blocks.1': FLOAT,'output_blocks.2': FLOAT,'output_blocks.3': FLOAT,'output_blocks.4': FLOAT,'output_blocks.5': FLOAT,'output_blocks.6': FLOAT,'output_blocks.7': FLOAT,'output_blocks.8': FLOAT,'out.': FLOAT
        }){
            super(ctx);

            this['model1'] = opts['model1'];
this['model2'] = opts['model2'];
this['time_embed.'] = opts['time_embed.'];
this['label_emb.'] = opts['label_emb.'];
this['input_blocks.0'] = opts['input_blocks.0'];
this['input_blocks.1'] = opts['input_blocks.1'];
this['input_blocks.2'] = opts['input_blocks.2'];
this['input_blocks.3'] = opts['input_blocks.3'];
this['input_blocks.4'] = opts['input_blocks.4'];
this['input_blocks.5'] = opts['input_blocks.5'];
this['input_blocks.6'] = opts['input_blocks.6'];
this['input_blocks.7'] = opts['input_blocks.7'];
this['input_blocks.8'] = opts['input_blocks.8'];
this['middle_block.0'] = opts['middle_block.0'];
this['middle_block.1'] = opts['middle_block.1'];
this['middle_block.2'] = opts['middle_block.2'];
this['output_blocks.0'] = opts['output_blocks.0'];
this['output_blocks.1'] = opts['output_blocks.1'];
this['output_blocks.2'] = opts['output_blocks.2'];
this['output_blocks.3'] = opts['output_blocks.3'];
this['output_blocks.4'] = opts['output_blocks.4'];
this['output_blocks.5'] = opts['output_blocks.5'];
this['output_blocks.6'] = opts['output_blocks.6'];
this['output_blocks.7'] = opts['output_blocks.7'];
this['output_blocks.8'] = opts['output_blocks.8'];
this['out.'] = opts['out.']
            

        }

        static defaults = {
            'time_embed.':  1,
'label_emb.':  1,
'input_blocks.0':  1,
'input_blocks.1':  1,
'input_blocks.2':  1,
'input_blocks.3':  1,
'input_blocks.4':  1,
'input_blocks.5':  1,
'input_blocks.6':  1,
'input_blocks.7':  1,
'input_blocks.8':  1,
'middle_block.0':  1,
'middle_block.1':  1,
'middle_block.2':  1,
'output_blocks.0':  1,
'output_blocks.1':  1,
'output_blocks.2':  1,
'output_blocks.3':  1,
'output_blocks.4':  1,
'output_blocks.5':  1,
'output_blocks.6':  1,
'output_blocks.7':  1,
'output_blocks.8':  1,
'out.':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ModelMergeSD3_2B' : class extends Node{
        //Setters
        set 'model1'(value : MODEL)  { super.$$link(0, value) } 
set 'model2'(value : MODEL)  { super.$$link(1, value) } 
set 'pos_embed.'(value : FLOAT)  { super.$$link(2, value) } 
set 'x_embedder.'(value : FLOAT)  { super.$$link(3, value) } 
set 'context_embedder.'(value : FLOAT)  { super.$$link(4, value) } 
set 'y_embedder.'(value : FLOAT)  { super.$$link(5, value) } 
set 't_embedder.'(value : FLOAT)  { super.$$link(6, value) } 
set 'joint_blocks.0.'(value : FLOAT)  { super.$$link(7, value) } 
set 'joint_blocks.1.'(value : FLOAT)  { super.$$link(8, value) } 
set 'joint_blocks.2.'(value : FLOAT)  { super.$$link(9, value) } 
set 'joint_blocks.3.'(value : FLOAT)  { super.$$link(10, value) } 
set 'joint_blocks.4.'(value : FLOAT)  { super.$$link(11, value) } 
set 'joint_blocks.5.'(value : FLOAT)  { super.$$link(12, value) } 
set 'joint_blocks.6.'(value : FLOAT)  { super.$$link(13, value) } 
set 'joint_blocks.7.'(value : FLOAT)  { super.$$link(14, value) } 
set 'joint_blocks.8.'(value : FLOAT)  { super.$$link(15, value) } 
set 'joint_blocks.9.'(value : FLOAT)  { super.$$link(16, value) } 
set 'joint_blocks.10.'(value : FLOAT)  { super.$$link(17, value) } 
set 'joint_blocks.11.'(value : FLOAT)  { super.$$link(18, value) } 
set 'joint_blocks.12.'(value : FLOAT)  { super.$$link(19, value) } 
set 'joint_blocks.13.'(value : FLOAT)  { super.$$link(20, value) } 
set 'joint_blocks.14.'(value : FLOAT)  { super.$$link(21, value) } 
set 'joint_blocks.15.'(value : FLOAT)  { super.$$link(22, value) } 
set 'joint_blocks.16.'(value : FLOAT)  { super.$$link(23, value) } 
set 'joint_blocks.17.'(value : FLOAT)  { super.$$link(24, value) } 
set 'joint_blocks.18.'(value : FLOAT)  { super.$$link(25, value) } 
set 'joint_blocks.19.'(value : FLOAT)  { super.$$link(26, value) } 
set 'joint_blocks.20.'(value : FLOAT)  { super.$$link(27, value) } 
set 'joint_blocks.21.'(value : FLOAT)  { super.$$link(28, value) } 
set 'joint_blocks.22.'(value : FLOAT)  { super.$$link(29, value) } 
set 'joint_blocks.23.'(value : FLOAT)  { super.$$link(30, value) } 
set 'final_layer.'(value : FLOAT)  { super.$$link(31, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model1': MODEL,'model2': MODEL,'pos_embed.': FLOAT,'x_embedder.': FLOAT,'context_embedder.': FLOAT,'y_embedder.': FLOAT,'t_embedder.': FLOAT,'joint_blocks.0.': FLOAT,'joint_blocks.1.': FLOAT,'joint_blocks.2.': FLOAT,'joint_blocks.3.': FLOAT,'joint_blocks.4.': FLOAT,'joint_blocks.5.': FLOAT,'joint_blocks.6.': FLOAT,'joint_blocks.7.': FLOAT,'joint_blocks.8.': FLOAT,'joint_blocks.9.': FLOAT,'joint_blocks.10.': FLOAT,'joint_blocks.11.': FLOAT,'joint_blocks.12.': FLOAT,'joint_blocks.13.': FLOAT,'joint_blocks.14.': FLOAT,'joint_blocks.15.': FLOAT,'joint_blocks.16.': FLOAT,'joint_blocks.17.': FLOAT,'joint_blocks.18.': FLOAT,'joint_blocks.19.': FLOAT,'joint_blocks.20.': FLOAT,'joint_blocks.21.': FLOAT,'joint_blocks.22.': FLOAT,'joint_blocks.23.': FLOAT,'final_layer.': FLOAT
        }){
            super(ctx);

            this['model1'] = opts['model1'];
this['model2'] = opts['model2'];
this['pos_embed.'] = opts['pos_embed.'];
this['x_embedder.'] = opts['x_embedder.'];
this['context_embedder.'] = opts['context_embedder.'];
this['y_embedder.'] = opts['y_embedder.'];
this['t_embedder.'] = opts['t_embedder.'];
this['joint_blocks.0.'] = opts['joint_blocks.0.'];
this['joint_blocks.1.'] = opts['joint_blocks.1.'];
this['joint_blocks.2.'] = opts['joint_blocks.2.'];
this['joint_blocks.3.'] = opts['joint_blocks.3.'];
this['joint_blocks.4.'] = opts['joint_blocks.4.'];
this['joint_blocks.5.'] = opts['joint_blocks.5.'];
this['joint_blocks.6.'] = opts['joint_blocks.6.'];
this['joint_blocks.7.'] = opts['joint_blocks.7.'];
this['joint_blocks.8.'] = opts['joint_blocks.8.'];
this['joint_blocks.9.'] = opts['joint_blocks.9.'];
this['joint_blocks.10.'] = opts['joint_blocks.10.'];
this['joint_blocks.11.'] = opts['joint_blocks.11.'];
this['joint_blocks.12.'] = opts['joint_blocks.12.'];
this['joint_blocks.13.'] = opts['joint_blocks.13.'];
this['joint_blocks.14.'] = opts['joint_blocks.14.'];
this['joint_blocks.15.'] = opts['joint_blocks.15.'];
this['joint_blocks.16.'] = opts['joint_blocks.16.'];
this['joint_blocks.17.'] = opts['joint_blocks.17.'];
this['joint_blocks.18.'] = opts['joint_blocks.18.'];
this['joint_blocks.19.'] = opts['joint_blocks.19.'];
this['joint_blocks.20.'] = opts['joint_blocks.20.'];
this['joint_blocks.21.'] = opts['joint_blocks.21.'];
this['joint_blocks.22.'] = opts['joint_blocks.22.'];
this['joint_blocks.23.'] = opts['joint_blocks.23.'];
this['final_layer.'] = opts['final_layer.']
            

        }

        static defaults = {
            'pos_embed.':  1,
'x_embedder.':  1,
'context_embedder.':  1,
'y_embedder.':  1,
't_embedder.':  1,
'joint_blocks.0.':  1,
'joint_blocks.1.':  1,
'joint_blocks.2.':  1,
'joint_blocks.3.':  1,
'joint_blocks.4.':  1,
'joint_blocks.5.':  1,
'joint_blocks.6.':  1,
'joint_blocks.7.':  1,
'joint_blocks.8.':  1,
'joint_blocks.9.':  1,
'joint_blocks.10.':  1,
'joint_blocks.11.':  1,
'joint_blocks.12.':  1,
'joint_blocks.13.':  1,
'joint_blocks.14.':  1,
'joint_blocks.15.':  1,
'joint_blocks.16.':  1,
'joint_blocks.17.':  1,
'joint_blocks.18.':  1,
'joint_blocks.19.':  1,
'joint_blocks.20.':  1,
'joint_blocks.21.':  1,
'joint_blocks.22.':  1,
'joint_blocks.23.':  1,
'final_layer.':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'PerturbedAttentionGuidance' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'scale'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'scale': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['scale'] = opts['scale']
            

        }

        static defaults = {
            'scale':  3
}
},

    /**
     * TODO Docs based on metadata
     */
    'AlignYourStepsScheduler' : class extends Node{
        //Setters
        set 'model_type'(value : 'SD1'|'SDXL'|'SVD')  { super.$$link(0, value) } 
set 'steps'(value : INT)  { super.$$link(1, value) } 
set 'denoise'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'SIGMAS'() : SIGMAS { return [this, 'SIGMAS', 0]  as unknown as SIGMAS; }

        constructor(opts:{
            'model_type': 'SD1'|'SDXL'|'SVD','steps': INT,'denoise': FLOAT
        }){
            super(ctx);

            this['model_type'] = opts['model_type'];
this['steps'] = opts['steps'];
this['denoise'] = opts['denoise']
            

        }

        static defaults = {
            'steps':  10,
'denoise':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'UNetSelfAttentionMultiply' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'q'(value : FLOAT)  { super.$$link(1, value) } 
set 'k'(value : FLOAT)  { super.$$link(2, value) } 
set 'v'(value : FLOAT)  { super.$$link(3, value) } 
set 'out'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'q': FLOAT,'k': FLOAT,'v': FLOAT,'out': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['q'] = opts['q'];
this['k'] = opts['k'];
this['v'] = opts['v'];
this['out'] = opts['out']
            

        }

        static defaults = {
            'q':  1,
'k':  1,
'v':  1,
'out':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'UNetCrossAttentionMultiply' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'q'(value : FLOAT)  { super.$$link(1, value) } 
set 'k'(value : FLOAT)  { super.$$link(2, value) } 
set 'v'(value : FLOAT)  { super.$$link(3, value) } 
set 'out'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'q': FLOAT,'k': FLOAT,'v': FLOAT,'out': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['q'] = opts['q'];
this['k'] = opts['k'];
this['v'] = opts['v'];
this['out'] = opts['out']
            

        }

        static defaults = {
            'q':  1,
'k':  1,
'v':  1,
'out':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'CLIPAttentionMultiply' : class extends Node{
        //Setters
        set 'clip'(value : CLIP)  { super.$$link(0, value) } 
set 'q'(value : FLOAT)  { super.$$link(1, value) } 
set 'k'(value : FLOAT)  { super.$$link(2, value) } 
set 'v'(value : FLOAT)  { super.$$link(3, value) } 
set 'out'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'CLIP'() : CLIP { return [this, 'CLIP', 0]  as unknown as CLIP; }

        constructor(opts:{
            'clip': CLIP,'q': FLOAT,'k': FLOAT,'v': FLOAT,'out': FLOAT
        }){
            super(ctx);

            this['clip'] = opts['clip'];
this['q'] = opts['q'];
this['k'] = opts['k'];
this['v'] = opts['v'];
this['out'] = opts['out']
            

        }

        static defaults = {
            'q':  1,
'k':  1,
'v':  1,
'out':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'UNetTemporalAttentionMultiply' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'self_structural'(value : FLOAT)  { super.$$link(1, value) } 
set 'self_temporal'(value : FLOAT)  { super.$$link(2, value) } 
set 'cross_structural'(value : FLOAT)  { super.$$link(3, value) } 
set 'cross_temporal'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'self_structural': FLOAT,'self_temporal': FLOAT,'cross_structural': FLOAT,'cross_temporal': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['self_structural'] = opts['self_structural'];
this['self_temporal'] = opts['self_temporal'];
this['cross_structural'] = opts['cross_structural'];
this['cross_temporal'] = opts['cross_temporal']
            

        }

        static defaults = {
            'self_structural':  1,
'self_temporal':  1,
'cross_structural':  1,
'cross_temporal':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'SamplerLCMUpscale' : class extends Node{
        //Setters
        set 'scale_ratio'(value : FLOAT)  { super.$$link(0, value) } 
set 'scale_steps'(value : INT)  { super.$$link(1, value) } 
set 'upscale_method'(value : 'bislerp'|'nearest-exact'|'bilinear'|'area'|'bicubic')  { super.$$link(2, value) } 

        //Getters
        get 'SAMPLER'() : SAMPLER { return [this, 'SAMPLER', 0]  as unknown as SAMPLER; }

        constructor(opts:{
            'scale_ratio': FLOAT,'scale_steps': INT,'upscale_method': 'bislerp'|'nearest-exact'|'bilinear'|'area'|'bicubic'
        }){
            super(ctx);

            this['scale_ratio'] = opts['scale_ratio'];
this['scale_steps'] = opts['scale_steps'];
this['upscale_method'] = opts['upscale_method']
            

        }

        static defaults = {
            'scale_ratio':  1,
'scale_steps':  -1
}
},

    /**
     * TODO Docs based on metadata
     */
    'SamplerEulerCFGpp' : class extends Node{
        //Setters
        set 'version'(value : 'regular'|'alternative')  { super.$$link(0, value) } 

        //Getters
        get 'SAMPLER'() : SAMPLER { return [this, 'SAMPLER', 0]  as unknown as SAMPLER; }

        constructor(opts:{
            'version': 'regular'|'alternative'
        }){
            super(ctx);

            this['version'] = opts['version']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'WebcamCapture' : class extends Node{
        //Setters
        set 'image'(value : WEBCAM)  { super.$$link(0, value) } 
set 'width'(value : INT)  { super.$$link(1, value) } 
set 'height'(value : INT)  { super.$$link(2, value) } 
set 'capture_on_queue'(value : BOOLEAN)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': WEBCAM,'width': INT,'height': INT,'capture_on_queue': BOOLEAN
        }){
            super(ctx);

            this['image'] = opts['image'];
this['width'] = opts['width'];
this['height'] = opts['height'];
this['capture_on_queue'] = opts['capture_on_queue']
            

        }

        static defaults = {
            'width':  0,
'height':  0,
'capture_on_queue':  true
}
},

    /**
     * TODO Docs based on metadata
     */
    'EmptyLatentAudio' : class extends Node{
        //Setters
        set 'seconds'(value : FLOAT)  { super.$$link(0, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'seconds': FLOAT
        }){
            super(ctx);

            this['seconds'] = opts['seconds']
            

        }

        static defaults = {
            'seconds':  47.6
}
},

    /**
     * TODO Docs based on metadata
     */
    'VAEEncodeAudio' : class extends Node{
        //Setters
        set 'audio'(value : AUDIO)  { super.$$link(0, value) } 
set 'vae'(value : VAE)  { super.$$link(1, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'audio': AUDIO,'vae': VAE
        }){
            super(ctx);

            this['audio'] = opts['audio'];
this['vae'] = opts['vae']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'VAEDecodeAudio' : class extends Node{
        //Setters
        set 'samples'(value : LATENT)  { super.$$link(0, value) } 
set 'vae'(value : VAE)  { super.$$link(1, value) } 

        //Getters
        get 'AUDIO'() : AUDIO { return [this, 'AUDIO', 0]  as unknown as AUDIO; }

        constructor(opts:{
            'samples': LATENT,'vae': VAE
        }){
            super(ctx);

            this['samples'] = opts['samples'];
this['vae'] = opts['vae']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'SaveAudio' : class extends Node{
        //Setters
        set 'audio'(value : AUDIO)  { super.$$link(0, value) } 
set 'filename_prefix'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        

        constructor(opts:{
            'audio': AUDIO,'filename_prefix': STRING
        }){
            super(ctx);

            this['audio'] = opts['audio'];
this['filename_prefix'] = opts['filename_prefix']
            

        }

        static defaults = {
            'filename_prefix':  "audio/ComfyUI"
}
},

    /**
     * TODO Docs based on metadata
     */
    'LoadAudio' : class extends Node{
        //Setters
        set 'audio'(value : void)  { super.$$link(0, value) } 

        //Getters
        get 'AUDIO'() : AUDIO { return [this, 'AUDIO', 0]  as unknown as AUDIO; }

        constructor(opts:{
            'audio': void
        }){
            super(ctx);

            this['audio'] = opts['audio']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'PreviewAudio' : class extends Node{
        //Setters
        set 'audio'(value : AUDIO)  { super.$$link(0, value) } 

        //Getters
        

        constructor(opts:{
            'audio': AUDIO
        }){
            super(ctx);

            this['audio'] = opts['audio']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'TripleCLIPLoader' : class extends Node{
        //Setters
        set 'clip_name1'(value : void)  { super.$$link(0, value) } 
set 'clip_name2'(value : void)  { super.$$link(1, value) } 
set 'clip_name3'(value : void)  { super.$$link(2, value) } 

        //Getters
        get 'CLIP'() : CLIP { return [this, 'CLIP', 0]  as unknown as CLIP; }

        constructor(opts:{
            'clip_name1': void,'clip_name2': void,'clip_name3': void
        }){
            super(ctx);

            this['clip_name1'] = opts['clip_name1'];
this['clip_name2'] = opts['clip_name2'];
this['clip_name3'] = opts['clip_name3']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'EmptySD3LatentImage' : class extends Node{
        //Setters
        set 'width'(value : INT)  { super.$$link(0, value) } 
set 'height'(value : INT)  { super.$$link(1, value) } 
set 'batch_size'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'width': INT,'height': INT,'batch_size': INT
        }){
            super(ctx);

            this['width'] = opts['width'];
this['height'] = opts['height'];
this['batch_size'] = opts['batch_size']
            

        }

        static defaults = {
            'width':  1024,
'height':  1024,
'batch_size':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'CLIPTextEncodeSD3' : class extends Node{
        //Setters
        set 'clip'(value : CLIP)  { super.$$link(0, value) } 
set 'clip_l'(value : STRING)  { super.$$link(1, value) } 
set 'clip_g'(value : STRING)  { super.$$link(2, value) } 
set 't5xxl'(value : STRING)  { super.$$link(3, value) } 
set 'empty_padding'(value : 'none'|'empty_prompt')  { super.$$link(4, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'clip': CLIP,'clip_l': STRING,'clip_g': STRING,'t5xxl': STRING,'empty_padding': 'none'|'empty_prompt'
        }){
            super(ctx);

            this['clip'] = opts['clip'];
this['clip_l'] = opts['clip_l'];
this['clip_g'] = opts['clip_g'];
this['t5xxl'] = opts['t5xxl'];
this['empty_padding'] = opts['empty_padding']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ControlNetApplySD3' : class extends Node{
        //Setters
        set 'positive'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'negative'(value : CONDITIONING)  { super.$$link(1, value) } 
set 'control_net'(value : CONTROL_NET)  { super.$$link(2, value) } 
set 'vae'(value : VAE)  { super.$$link(3, value) } 
set 'image'(value : IMAGE)  { super.$$link(4, value) } 
set 'strength'(value : FLOAT)  { super.$$link(5, value) } 
set 'start_percent'(value : FLOAT)  { super.$$link(6, value) } 
set 'end_percent'(value : FLOAT)  { super.$$link(7, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this, 'positive', 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this, 'negative', 1]  as unknown as CONDITIONING; }

        constructor(opts:{
            'positive': CONDITIONING,'negative': CONDITIONING,'control_net': CONTROL_NET,'vae': VAE,'image': IMAGE,'strength': FLOAT,'start_percent': FLOAT,'end_percent': FLOAT
        }){
            super(ctx);

            this['positive'] = opts['positive'];
this['negative'] = opts['negative'];
this['control_net'] = opts['control_net'];
this['vae'] = opts['vae'];
this['image'] = opts['image'];
this['strength'] = opts['strength'];
this['start_percent'] = opts['start_percent'];
this['end_percent'] = opts['end_percent']
            

        }

        static defaults = {
            'strength':  1,
'start_percent':  0,
'end_percent':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'GITSScheduler' : class extends Node{
        //Setters
        set 'coeff'(value : FLOAT)  { super.$$link(0, value) } 
set 'steps'(value : INT)  { super.$$link(1, value) } 
set 'denoise'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'SIGMAS'() : SIGMAS { return [this, 'SIGMAS', 0]  as unknown as SIGMAS; }

        constructor(opts:{
            'coeff': FLOAT,'steps': INT,'denoise': FLOAT
        }){
            super(ctx);

            this['coeff'] = opts['coeff'];
this['steps'] = opts['steps'];
this['denoise'] = opts['denoise']
            

        }

        static defaults = {
            'coeff':  1.2,
'steps':  10,
'denoise':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'SetUnionControlNetType' : class extends Node{
        //Setters
        set 'control_net'(value : CONTROL_NET)  { super.$$link(0, value) } 
set 'type'(value : 'auto'|'openpose'|'depth'|'hed/pidi/scribble/ted'|'canny/lineart/anime_lineart/mlsd'|'normal'|'segment'|'tile'|'repaint')  { super.$$link(1, value) } 

        //Getters
        get 'CONTROL_NET'() : CONTROL_NET { return [this, 'CONTROL_NET', 0]  as unknown as CONTROL_NET; }

        constructor(opts:{
            'control_net': CONTROL_NET,'type': 'auto'|'openpose'|'depth'|'hed/pidi/scribble/ted'|'canny/lineart/anime_lineart/mlsd'|'normal'|'segment'|'tile'|'repaint'
        }){
            super(ctx);

            this['control_net'] = opts['control_net'];
this['type'] = opts['type']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'BLIP Model Loader' : class extends Node{
        //Setters
        set 'blip_model'(value : STRING)  { super.$$link(0, value) } 
set 'vqa_model_id'(value : STRING)  { super.$$link(1, value) } 
set 'device'(value : 'cuda'|'cpu')  { super.$$link(2, value) } 

        //Getters
        get 'BLIP_MODEL'() : BLIP_MODEL { return [this, 'BLIP_MODEL', 0]  as unknown as BLIP_MODEL; }

        constructor(opts:{
            'blip_model': STRING,'vqa_model_id': STRING,'device': 'cuda'|'cpu'
        }){
            super(ctx);

            this['blip_model'] = opts['blip_model'];
this['vqa_model_id'] = opts['vqa_model_id'];
this['device'] = opts['device']
            

        }

        static defaults = {
            'blip_model':  "Salesforce/blip-image-captioning-base",
'vqa_model_id':  "Salesforce/blip-vqa-base"
}
},

    /**
     * TODO Docs based on metadata
     */
    'Blend Latents' : class extends Node{
        //Setters
        set 'latent_a'(value : LATENT)  { super.$$link(0, value) } 
set 'latent_b'(value : LATENT)  { super.$$link(1, value) } 
set 'operation'(value : 'add'|'multiply'|'divide'|'subtract'|'overlay'|'hard_light'|'soft_light'|'screen'|'linear_dodge'|'difference'|'exclusion'|'random')  { super.$$link(2, value) } 
set 'blend'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'latent_a': LATENT,'latent_b': LATENT,'operation': 'add'|'multiply'|'divide'|'subtract'|'overlay'|'hard_light'|'soft_light'|'screen'|'linear_dodge'|'difference'|'exclusion'|'random','blend': FLOAT
        }){
            super(ctx);

            this['latent_a'] = opts['latent_a'];
this['latent_b'] = opts['latent_b'];
this['operation'] = opts['operation'];
this['blend'] = opts['blend']
            

        }

        static defaults = {
            'blend':  0.5
}
},

    /**
     * TODO Docs based on metadata
     */
    'Bus Node' : class extends Node{
        //Setters
        set 'bus'(value : BUS)  { super.$$link(0, value) } 
set 'model'(value : MODEL)  { super.$$link(1, value) } 
set 'clip'(value : CLIP)  { super.$$link(2, value) } 
set 'vae'(value : VAE)  { super.$$link(3, value) } 
set 'positive'(value : CONDITIONING)  { super.$$link(4, value) } 
set 'negative'(value : CONDITIONING)  { super.$$link(5, value) } 

        //Getters
        get 'bus'() : BUS { return [this, 'bus', 0]  as unknown as BUS; }
get 'model'() : MODEL { return [this, 'model', 1]  as unknown as MODEL; }
get 'clip'() : CLIP { return [this, 'clip', 2]  as unknown as CLIP; }
get 'vae'() : VAE { return [this, 'vae', 3]  as unknown as VAE; }
get 'positive'() : CONDITIONING { return [this, 'positive', 4]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this, 'negative', 5]  as unknown as CONDITIONING; }

        constructor(opts:{
            'bus'?: BUS,'model'?: MODEL,'clip'?: CLIP,'vae'?: VAE,'positive'?: CONDITIONING,'negative'?: CONDITIONING
        }){
            super(ctx);

            
            if(opts['bus']!==undefined) this['bus'] = opts['bus'];
if(opts['model']!==undefined) this['model'] = opts['model'];
if(opts['clip']!==undefined) this['clip'] = opts['clip'];
if(opts['vae']!==undefined) this['vae'] = opts['vae'];
if(opts['positive']!==undefined) this['positive'] = opts['positive'];
if(opts['negative']!==undefined) this['negative'] = opts['negative']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Cache Node' : class extends Node{
        //Setters
        set 'latent_suffix'(value : STRING)  { super.$$link(0, value) } 
set 'image_suffix'(value : STRING)  { super.$$link(1, value) } 
set 'conditioning_suffix'(value : STRING)  { super.$$link(2, value) } 
set 'output_path'(value : STRING)  { super.$$link(3, value) } 
set 'latent'(value : LATENT)  { super.$$link(4, value) } 
set 'image'(value : IMAGE)  { super.$$link(5, value) } 
set 'conditioning'(value : CONDITIONING)  { super.$$link(6, value) } 

        //Getters
        get 'latent_filename'() : STRING { return [this, 'latent_filename', 0]  as unknown as STRING; }
get 'image_filename'() : STRING { return [this, 'image_filename', 1]  as unknown as STRING; }
get 'conditioning_filename'() : STRING { return [this, 'conditioning_filename', 2]  as unknown as STRING; }

        constructor(opts:{
            'latent_suffix': STRING,'image_suffix': STRING,'conditioning_suffix': STRING,'output_path'?: STRING,'latent'?: LATENT,'image'?: IMAGE,'conditioning'?: CONDITIONING
        }){
            super(ctx);

            this['latent_suffix'] = opts['latent_suffix'];
this['image_suffix'] = opts['image_suffix'];
this['conditioning_suffix'] = opts['conditioning_suffix']
            if(opts['output_path']!==undefined) this['output_path'] = opts['output_path'];
if(opts['latent']!==undefined) this['latent'] = opts['latent'];
if(opts['image']!==undefined) this['image'] = opts['image'];
if(opts['conditioning']!==undefined) this['conditioning'] = opts['conditioning']

        }

        static defaults = {
            'latent_suffix':  "39723380_cache",
'image_suffix':  "92684310_cache",
'conditioning_suffix':  "15880825_cache",
'output_path':  "/archive/shared/comfyui-krita/ComfyUI/custom_nodes/was-node-suite-comfyui/cache"
}
},

    /**
     * TODO Docs based on metadata
     */
    'Checkpoint Loader' : class extends Node{
        //Setters
        set 'config_name'(value : 'anything_v3.yaml'|'v1-inference.yaml'|'v1-inference_clip_skip_2.yaml'|'v1-inference_clip_skip_2_fp16.yaml'|'v1-inference_fp16.yaml'|'v1-inpainting-inference.yaml'|'v2-inference-v.yaml'|'v2-inference-v_fp32.yaml'|'v2-inference.yaml'|'v2-inference_fp32.yaml'|'v2-inpainting-inference.yaml')  { super.$$link(0, value) } 
set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(1, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this, 'CLIP', 1]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this, 'VAE', 2]  as unknown as VAE; }
get 'NAME_STRING'() : STRING { return [this, 'NAME_STRING', 3]  as unknown as STRING; }

        constructor(opts:{
            'config_name': 'anything_v3.yaml'|'v1-inference.yaml'|'v1-inference_clip_skip_2.yaml'|'v1-inference_clip_skip_2_fp16.yaml'|'v1-inference_fp16.yaml'|'v1-inpainting-inference.yaml'|'v2-inference-v.yaml'|'v2-inference-v_fp32.yaml'|'v2-inference.yaml'|'v2-inference_fp32.yaml'|'v2-inpainting-inference.yaml','ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'
        }){
            super(ctx);

            this['config_name'] = opts['config_name'];
this['ckpt_name'] = opts['ckpt_name']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Checkpoint Loader (Simple)' : class extends Node{
        //Setters
        set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(0, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this, 'CLIP', 1]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this, 'VAE', 2]  as unknown as VAE; }
get 'NAME_STRING'() : STRING { return [this, 'NAME_STRING', 3]  as unknown as STRING; }

        constructor(opts:{
            'ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'
        }){
            super(ctx);

            this['ckpt_name'] = opts['ckpt_name']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'CLIPTextEncode (NSP)' : class extends Node{
        //Setters
        set 'mode'(value : 'Noodle Soup Prompts'|'Wildcards')  { super.$$link(0, value) } 
set 'noodle_key'(value : STRING)  { super.$$link(1, value) } 
set 'seed'(value : INT)  { super.$$link(2, value) } 
set 'text'(value : STRING)  { super.$$link(3, value) } 
set 'clip'(value : CLIP)  { super.$$link(4, value) } 

        //Getters
        get 'conditioning'() : CONDITIONING { return [this, 'conditioning', 0]  as unknown as CONDITIONING; }
get 'parsed_text'() : STRING { return [this, 'parsed_text', 1]  as unknown as STRING; }
get 'raw_text'() : STRING { return [this, 'raw_text', 2]  as unknown as STRING; }

        constructor(opts:{
            'mode': 'Noodle Soup Prompts'|'Wildcards','noodle_key': STRING,'seed': INT,'text': STRING,'clip': CLIP
        }){
            super(ctx);

            this['mode'] = opts['mode'];
this['noodle_key'] = opts['noodle_key'];
this['seed'] = opts['seed'];
this['text'] = opts['text'];
this['clip'] = opts['clip']
            

        }

        static defaults = {
            'noodle_key':  "__",
'seed':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'CLIP Input Switch' : class extends Node{
        //Setters
        set 'clip_a'(value : CLIP)  { super.$$link(0, value) } 
set 'clip_b'(value : CLIP)  { super.$$link(1, value) } 
set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'CLIP'() : CLIP { return [this, 'CLIP', 0]  as unknown as CLIP; }

        constructor(opts:{
            'clip_a': CLIP,'clip_b': CLIP,'boolean': BOOLEAN
        }){
            super(ctx);

            this['clip_a'] = opts['clip_a'];
this['clip_b'] = opts['clip_b'];
this['boolean'] = opts['boolean']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'CLIP Vision Input Switch' : class extends Node{
        //Setters
        set 'clip_vision_a'(value : CLIP_VISION)  { super.$$link(0, value) } 
set 'clip_vision_b'(value : CLIP_VISION)  { super.$$link(1, value) } 
set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'CLIP_VISION'() : CLIP_VISION { return [this, 'CLIP_VISION', 0]  as unknown as CLIP_VISION; }

        constructor(opts:{
            'clip_vision_a': CLIP_VISION,'clip_vision_b': CLIP_VISION,'boolean': BOOLEAN
        }){
            super(ctx);

            this['clip_vision_a'] = opts['clip_vision_a'];
this['clip_vision_b'] = opts['clip_vision_b'];
this['boolean'] = opts['boolean']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Conditioning Input Switch' : class extends Node{
        //Setters
        set 'conditioning_a'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'conditioning_b'(value : CONDITIONING)  { super.$$link(1, value) } 
set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'conditioning_a': CONDITIONING,'conditioning_b': CONDITIONING,'boolean': BOOLEAN
        }){
            super(ctx);

            this['conditioning_a'] = opts['conditioning_a'];
this['conditioning_b'] = opts['conditioning_b'];
this['boolean'] = opts['boolean']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Constant Number' : class extends Node{
        //Setters
        set 'number_type'(value : 'integer'|'float'|'bool')  { super.$$link(0, value) } 
set 'number'(value : FLOAT)  { super.$$link(1, value) } 
set 'number_as_text'(value : STRING)  { super.$$link(2, value) } 

        //Getters
        get 'NUMBER'() : NUMBER { return [this, 'NUMBER', 0]  as unknown as NUMBER; }
get 'FLOAT'() : FLOAT { return [this, 'FLOAT', 1]  as unknown as FLOAT; }
get 'INT'() : INT { return [this, 'INT', 2]  as unknown as INT; }

        constructor(opts:{
            'number_type': 'integer'|'float'|'bool','number': FLOAT,'number_as_text'?: STRING
        }){
            super(ctx);

            this['number_type'] = opts['number_type'];
this['number'] = opts['number']
            if(opts['number_as_text']!==undefined) this['number_as_text'] = opts['number_as_text']

        }

        static defaults = {
            'number':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Create Grid Image' : class extends Node{
        //Setters
        set 'images_path'(value : STRING)  { super.$$link(0, value) } 
set 'pattern_glob'(value : STRING)  { super.$$link(1, value) } 
set 'include_subfolders'(value : 'false'|'true')  { super.$$link(2, value) } 
set 'border_width'(value : INT)  { super.$$link(3, value) } 
set 'number_of_columns'(value : INT)  { super.$$link(4, value) } 
set 'max_cell_size'(value : INT)  { super.$$link(5, value) } 
set 'border_red'(value : INT)  { super.$$link(6, value) } 
set 'border_green'(value : INT)  { super.$$link(7, value) } 
set 'border_blue'(value : INT)  { super.$$link(8, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'images_path': STRING,'pattern_glob': STRING,'include_subfolders': 'false'|'true','border_width': INT,'number_of_columns': INT,'max_cell_size': INT,'border_red': INT,'border_green': INT,'border_blue': INT
        }){
            super(ctx);

            this['images_path'] = opts['images_path'];
this['pattern_glob'] = opts['pattern_glob'];
this['include_subfolders'] = opts['include_subfolders'];
this['border_width'] = opts['border_width'];
this['number_of_columns'] = opts['number_of_columns'];
this['max_cell_size'] = opts['max_cell_size'];
this['border_red'] = opts['border_red'];
this['border_green'] = opts['border_green'];
this['border_blue'] = opts['border_blue']
            

        }

        static defaults = {
            'images_path':  "./ComfyUI/input/",
'pattern_glob':  "*",
'border_width':  3,
'number_of_columns':  6,
'max_cell_size':  256,
'border_red':  0,
'border_green':  0,
'border_blue':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Create Grid Image from Batch' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'border_width'(value : INT)  { super.$$link(1, value) } 
set 'number_of_columns'(value : INT)  { super.$$link(2, value) } 
set 'max_cell_size'(value : INT)  { super.$$link(3, value) } 
set 'border_red'(value : INT)  { super.$$link(4, value) } 
set 'border_green'(value : INT)  { super.$$link(5, value) } 
set 'border_blue'(value : INT)  { super.$$link(6, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'images': IMAGE,'border_width': INT,'number_of_columns': INT,'max_cell_size': INT,'border_red': INT,'border_green': INT,'border_blue': INT
        }){
            super(ctx);

            this['images'] = opts['images'];
this['border_width'] = opts['border_width'];
this['number_of_columns'] = opts['number_of_columns'];
this['max_cell_size'] = opts['max_cell_size'];
this['border_red'] = opts['border_red'];
this['border_green'] = opts['border_green'];
this['border_blue'] = opts['border_blue']
            

        }

        static defaults = {
            'border_width':  3,
'number_of_columns':  6,
'max_cell_size':  256,
'border_red':  0,
'border_green':  0,
'border_blue':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Create Morph Image' : class extends Node{
        //Setters
        set 'image_a'(value : IMAGE)  { super.$$link(0, value) } 
set 'image_b'(value : IMAGE)  { super.$$link(1, value) } 
set 'transition_frames'(value : INT)  { super.$$link(2, value) } 
set 'still_image_delay_ms'(value : FLOAT)  { super.$$link(3, value) } 
set 'duration_ms'(value : FLOAT)  { super.$$link(4, value) } 
set 'loops'(value : INT)  { super.$$link(5, value) } 
set 'max_size'(value : INT)  { super.$$link(6, value) } 
set 'output_path'(value : STRING)  { super.$$link(7, value) } 
set 'filename'(value : STRING)  { super.$$link(8, value) } 
set 'filetype'(value : 'GIF'|'APNG')  { super.$$link(9, value) } 

        //Getters
        get 'image_a_pass'() : IMAGE { return [this, 'image_a_pass', 0]  as unknown as IMAGE; }
get 'image_b_pass'() : IMAGE { return [this, 'image_b_pass', 1]  as unknown as IMAGE; }
get 'filepath_text'() : STRING { return [this, 'filepath_text', 2]  as unknown as STRING; }
get 'filename_text'() : STRING { return [this, 'filename_text', 3]  as unknown as STRING; }

        constructor(opts:{
            'image_a': IMAGE,'image_b': IMAGE,'transition_frames': INT,'still_image_delay_ms': FLOAT,'duration_ms': FLOAT,'loops': INT,'max_size': INT,'output_path': STRING,'filename': STRING,'filetype': 'GIF'|'APNG'
        }){
            super(ctx);

            this['image_a'] = opts['image_a'];
this['image_b'] = opts['image_b'];
this['transition_frames'] = opts['transition_frames'];
this['still_image_delay_ms'] = opts['still_image_delay_ms'];
this['duration_ms'] = opts['duration_ms'];
this['loops'] = opts['loops'];
this['max_size'] = opts['max_size'];
this['output_path'] = opts['output_path'];
this['filename'] = opts['filename'];
this['filetype'] = opts['filetype']
            

        }

        static defaults = {
            'transition_frames':  30,
'still_image_delay_ms':  2500,
'duration_ms':  0.1,
'loops':  0,
'max_size':  512,
'output_path':  "./ComfyUI/output",
'filename':  "morph"
}
},

    /**
     * TODO Docs based on metadata
     */
    'Create Morph Image from Path' : class extends Node{
        //Setters
        set 'transition_frames'(value : INT)  { super.$$link(0, value) } 
set 'still_image_delay_ms'(value : FLOAT)  { super.$$link(1, value) } 
set 'duration_ms'(value : FLOAT)  { super.$$link(2, value) } 
set 'loops'(value : INT)  { super.$$link(3, value) } 
set 'max_size'(value : INT)  { super.$$link(4, value) } 
set 'input_path'(value : STRING)  { super.$$link(5, value) } 
set 'input_pattern'(value : STRING)  { super.$$link(6, value) } 
set 'output_path'(value : STRING)  { super.$$link(7, value) } 
set 'filename'(value : STRING)  { super.$$link(8, value) } 
set 'filetype'(value : 'GIF'|'APNG')  { super.$$link(9, value) } 

        //Getters
        get 'filepath_text'() : STRING { return [this, 'filepath_text', 0]  as unknown as STRING; }
get 'filename_text'() : STRING { return [this, 'filename_text', 1]  as unknown as STRING; }

        constructor(opts:{
            'transition_frames': INT,'still_image_delay_ms': FLOAT,'duration_ms': FLOAT,'loops': INT,'max_size': INT,'input_path': STRING,'input_pattern': STRING,'output_path': STRING,'filename': STRING,'filetype': 'GIF'|'APNG'
        }){
            super(ctx);

            this['transition_frames'] = opts['transition_frames'];
this['still_image_delay_ms'] = opts['still_image_delay_ms'];
this['duration_ms'] = opts['duration_ms'];
this['loops'] = opts['loops'];
this['max_size'] = opts['max_size'];
this['input_path'] = opts['input_path'];
this['input_pattern'] = opts['input_pattern'];
this['output_path'] = opts['output_path'];
this['filename'] = opts['filename'];
this['filetype'] = opts['filetype']
            

        }

        static defaults = {
            'transition_frames':  30,
'still_image_delay_ms':  2500,
'duration_ms':  0.1,
'loops':  0,
'max_size':  512,
'input_path':  "./ComfyUI",
'input_pattern':  "*",
'output_path':  "./ComfyUI/output",
'filename':  "morph"
}
},

    /**
     * TODO Docs based on metadata
     */
    'Create Video from Path' : class extends Node{
        //Setters
        set 'transition_frames'(value : INT)  { super.$$link(0, value) } 
set 'image_delay_sec'(value : FLOAT)  { super.$$link(1, value) } 
set 'fps'(value : INT)  { super.$$link(2, value) } 
set 'max_size'(value : INT)  { super.$$link(3, value) } 
set 'input_path'(value : STRING)  { super.$$link(4, value) } 
set 'output_path'(value : STRING)  { super.$$link(5, value) } 
set 'filename'(value : STRING)  { super.$$link(6, value) } 
set 'codec'(value : 'AVC1'|'FFV1'|'H264'|'MP4V')  { super.$$link(7, value) } 

        //Getters
        get 'filepath_text'() : STRING { return [this, 'filepath_text', 0]  as unknown as STRING; }
get 'filename_text'() : STRING { return [this, 'filename_text', 1]  as unknown as STRING; }

        constructor(opts:{
            'transition_frames': INT,'image_delay_sec': FLOAT,'fps': INT,'max_size': INT,'input_path': STRING,'output_path': STRING,'filename': STRING,'codec': 'AVC1'|'FFV1'|'H264'|'MP4V'
        }){
            super(ctx);

            this['transition_frames'] = opts['transition_frames'];
this['image_delay_sec'] = opts['image_delay_sec'];
this['fps'] = opts['fps'];
this['max_size'] = opts['max_size'];
this['input_path'] = opts['input_path'];
this['output_path'] = opts['output_path'];
this['filename'] = opts['filename'];
this['codec'] = opts['codec']
            

        }

        static defaults = {
            'transition_frames':  30,
'image_delay_sec':  2.5,
'fps':  30,
'max_size':  512,
'input_path':  "./ComfyUI/input",
'output_path':  "./ComfyUI/output",
'filename':  "comfy_video"
}
},

    /**
     * TODO Docs based on metadata
     */
    'CLIPSeg Masking' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'text'(value : STRING)  { super.$$link(1, value) } 
set 'clipseg_model'(value : CLIPSEG_MODEL)  { super.$$link(2, value) } 

        //Getters
        get 'MASK'() : MASK { return [this, 'MASK', 0]  as unknown as MASK; }
get 'MASK_IMAGE'() : IMAGE { return [this, 'MASK_IMAGE', 1]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'text': STRING,'clipseg_model'?: CLIPSEG_MODEL
        }){
            super(ctx);

            this['image'] = opts['image'];
this['text'] = opts['text']
            if(opts['clipseg_model']!==undefined) this['clipseg_model'] = opts['clipseg_model']

        }

        static defaults = {
            'text':  ""
}
},

    /**
     * TODO Docs based on metadata
     */
    'CLIPSeg Model Loader' : class extends Node{
        //Setters
        set 'model'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'clipseg_model'() : CLIPSEG_MODEL { return [this, 'clipseg_model', 0]  as unknown as CLIPSEG_MODEL; }

        constructor(opts:{
            'model': STRING
        }){
            super(ctx);

            this['model'] = opts['model']
            

        }

        static defaults = {
            'model':  "CIDAS/clipseg-rd64-refined"
}
},

    /**
     * TODO Docs based on metadata
     */
    'CLIPSeg Batch Masking' : class extends Node{
        //Setters
        set 'image_a'(value : IMAGE)  { super.$$link(0, value) } 
set 'image_b'(value : IMAGE)  { super.$$link(1, value) } 
set 'text_a'(value : STRING)  { super.$$link(2, value) } 
set 'text_b'(value : STRING)  { super.$$link(3, value) } 
set 'image_c'(value : IMAGE)  { super.$$link(4, value) } 
set 'image_d'(value : IMAGE)  { super.$$link(5, value) } 
set 'image_e'(value : IMAGE)  { super.$$link(6, value) } 
set 'image_f'(value : IMAGE)  { super.$$link(7, value) } 
set 'text_c'(value : STRING)  { super.$$link(8, value) } 
set 'text_d'(value : STRING)  { super.$$link(9, value) } 
set 'text_e'(value : STRING)  { super.$$link(10, value) } 
set 'text_f'(value : STRING)  { super.$$link(11, value) } 

        //Getters
        get 'IMAGES_BATCH'() : IMAGE { return [this, 'IMAGES_BATCH', 0]  as unknown as IMAGE; }
get 'MASKS_BATCH'() : MASK { return [this, 'MASKS_BATCH', 1]  as unknown as MASK; }
get 'MASK_IMAGES_BATCH'() : IMAGE { return [this, 'MASK_IMAGES_BATCH', 2]  as unknown as IMAGE; }

        constructor(opts:{
            'image_a': IMAGE,'image_b': IMAGE,'text_a': STRING,'text_b': STRING,'image_c'?: IMAGE,'image_d'?: IMAGE,'image_e'?: IMAGE,'image_f'?: IMAGE,'text_c'?: STRING,'text_d'?: STRING,'text_e'?: STRING,'text_f'?: STRING
        }){
            super(ctx);

            this['image_a'] = opts['image_a'];
this['image_b'] = opts['image_b'];
this['text_a'] = opts['text_a'];
this['text_b'] = opts['text_b']
            if(opts['image_c']!==undefined) this['image_c'] = opts['image_c'];
if(opts['image_d']!==undefined) this['image_d'] = opts['image_d'];
if(opts['image_e']!==undefined) this['image_e'] = opts['image_e'];
if(opts['image_f']!==undefined) this['image_f'] = opts['image_f'];
if(opts['text_c']!==undefined) this['text_c'] = opts['text_c'];
if(opts['text_d']!==undefined) this['text_d'] = opts['text_d'];
if(opts['text_e']!==undefined) this['text_e'] = opts['text_e'];
if(opts['text_f']!==undefined) this['text_f'] = opts['text_f']

        }

        static defaults = {
            'text_a':  "",
'text_b':  "",
'text_c':  "",
'text_d':  "",
'text_e':  "",
'text_f':  ""
}
},

    /**
     * TODO Docs based on metadata
     */
    'Convert Masks to Images' : class extends Node{
        //Setters
        set 'masks'(value : MASK)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGES'() : IMAGE { return [this, 'IMAGES', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'masks': MASK
        }){
            super(ctx);

            this['masks'] = opts['masks']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Control Net Model Input Switch' : class extends Node{
        //Setters
        set 'control_net_a'(value : CONTROL_NET)  { super.$$link(0, value) } 
set 'control_net_b'(value : CONTROL_NET)  { super.$$link(1, value) } 
set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'CONTROL_NET'() : CONTROL_NET { return [this, 'CONTROL_NET', 0]  as unknown as CONTROL_NET; }

        constructor(opts:{
            'control_net_a': CONTROL_NET,'control_net_b': CONTROL_NET,'boolean': BOOLEAN
        }){
            super(ctx);

            this['control_net_a'] = opts['control_net_a'];
this['control_net_b'] = opts['control_net_b'];
this['boolean'] = opts['boolean']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Debug Number to Console' : class extends Node{
        //Setters
        set 'number'(value : NUMBER)  { super.$$link(0, value) } 
set 'label'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'NUMBER'() : NUMBER { return [this, 'NUMBER', 0]  as unknown as NUMBER; }

        constructor(opts:{
            'number': NUMBER,'label': STRING
        }){
            super(ctx);

            this['number'] = opts['number'];
this['label'] = opts['label']
            

        }

        static defaults = {
            'label':  "Debug to Console"
}
},

    /**
     * TODO Docs based on metadata
     */
    'Dictionary to Console' : class extends Node{
        //Setters
        set 'dictionary'(value : DICT)  { super.$$link(0, value) } 
set 'label'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'DICT'() : DICT { return [this, 'DICT', 0]  as unknown as DICT; }

        constructor(opts:{
            'dictionary': DICT,'label': STRING
        }){
            super(ctx);

            this['dictionary'] = opts['dictionary'];
this['label'] = opts['label']
            

        }

        static defaults = {
            'label':  "Dictionary Output"
}
},

    /**
     * TODO Docs based on metadata
     */
    'Diffusers Model Loader' : class extends Node{
        //Setters
        set 'model_path'(value : void)  { super.$$link(0, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this, 'CLIP', 1]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this, 'VAE', 2]  as unknown as VAE; }
get 'NAME_STRING'() : STRING { return [this, 'NAME_STRING', 3]  as unknown as STRING; }

        constructor(opts:{
            'model_path': void
        }){
            super(ctx);

            this['model_path'] = opts['model_path']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Diffusers Hub Model Down-Loader' : class extends Node{
        //Setters
        set 'repo_id'(value : STRING)  { super.$$link(0, value) } 
set 'revision'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this, 'CLIP', 1]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this, 'VAE', 2]  as unknown as VAE; }
get 'NAME_STRING'() : STRING { return [this, 'NAME_STRING', 3]  as unknown as STRING; }

        constructor(opts:{
            'repo_id': STRING,'revision': STRING
        }){
            super(ctx);

            this['repo_id'] = opts['repo_id'];
this['revision'] = opts['revision']
            

        }

        static defaults = {
            'revision':  "None"
}
},

    /**
     * TODO Docs based on metadata
     */
    'Export API' : class extends Node{
        //Setters
        set 'save_prompt_api'(value : 'true'|'true')  { super.$$link(0, value) } 
set 'output_path'(value : STRING)  { super.$$link(1, value) } 
set 'filename_prefix'(value : STRING)  { super.$$link(2, value) } 
set 'filename_delimiter'(value : STRING)  { super.$$link(3, value) } 
set 'filename_number_padding'(value : INT)  { super.$$link(4, value) } 
set 'parse_text_tokens'(value : BOOLEAN)  { super.$$link(5, value) } 

        //Getters
        

        constructor(opts:{
            'save_prompt_api': 'true'|'true','output_path': STRING,'filename_prefix': STRING,'filename_delimiter': STRING,'filename_number_padding': INT,'parse_text_tokens': BOOLEAN
        }){
            super(ctx);

            this['save_prompt_api'] = opts['save_prompt_api'];
this['output_path'] = opts['output_path'];
this['filename_prefix'] = opts['filename_prefix'];
this['filename_delimiter'] = opts['filename_delimiter'];
this['filename_number_padding'] = opts['filename_number_padding'];
this['parse_text_tokens'] = opts['parse_text_tokens']
            

        }

        static defaults = {
            'output_path':  "./ComfyUI/output/",
'filename_prefix':  "ComfyUI_Prompt",
'filename_delimiter':  "_",
'filename_number_padding':  4,
'parse_text_tokens':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'Latent Input Switch' : class extends Node{
        //Setters
        set 'latent_a'(value : LATENT)  { super.$$link(0, value) } 
set 'latent_b'(value : LATENT)  { super.$$link(1, value) } 
set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'latent_a': LATENT,'latent_b': LATENT,'boolean': BOOLEAN
        }){
            super(ctx);

            this['latent_a'] = opts['latent_a'];
this['latent_b'] = opts['latent_b'];
this['boolean'] = opts['boolean']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Load Cache' : class extends Node{
        //Setters
        set 'latent_path'(value : STRING)  { super.$$link(0, value) } 
set 'image_path'(value : STRING)  { super.$$link(1, value) } 
set 'conditioning_path'(value : STRING)  { super.$$link(2, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }
get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 1]  as unknown as IMAGE; }
get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 2]  as unknown as CONDITIONING; }

        constructor(opts:{
            'latent_path': STRING,'image_path': STRING,'conditioning_path': STRING
        }){
            super(ctx);

            this['latent_path'] = opts['latent_path'];
this['image_path'] = opts['image_path'];
this['conditioning_path'] = opts['conditioning_path']
            

        }

        static defaults = {
            'latent_path':  "",
'image_path':  "",
'conditioning_path':  ""
}
},

    /**
     * TODO Docs based on metadata
     */
    'Logic Boolean' : class extends Node{
        //Setters
        set 'boolean'(value : FLOAT)  { super.$$link(0, value) } 

        //Getters
        get 'BOOLEAN'() : BOOLEAN { return [this, 'BOOLEAN', 0]  as unknown as BOOLEAN; }
get 'NUMBER'() : NUMBER { return [this, 'NUMBER', 1]  as unknown as NUMBER; }
get 'INT'() : INT { return [this, 'INT', 2]  as unknown as INT; }
get 'FLOAT'() : FLOAT { return [this, 'FLOAT', 3]  as unknown as FLOAT; }

        constructor(opts:{
            'boolean': FLOAT
        }){
            super(ctx);

            this['boolean'] = opts['boolean']
            

        }

        static defaults = {
            'boolean':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'Logic Boolean Primitive' : class extends Node{
        //Setters
        set 'boolean'(value : BOOLEAN)  { super.$$link(0, value) } 

        //Getters
        get 'BOOLEAN'() : BOOLEAN { return [this, 'BOOLEAN', 0]  as unknown as BOOLEAN; }

        constructor(opts:{
            'boolean': BOOLEAN
        }){
            super(ctx);

            this['boolean'] = opts['boolean']
            

        }

        static defaults = {
            'boolean':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'Logic Comparison OR' : class extends Node{
        //Setters
        set 'boolean_a'(value : BOOLEAN)  { super.$$link(0, value) } 
set 'boolean_b'(value : BOOLEAN)  { super.$$link(1, value) } 

        //Getters
        get 'BOOLEAN'() : BOOLEAN { return [this, 'BOOLEAN', 0]  as unknown as BOOLEAN; }

        constructor(opts:{
            'boolean_a': BOOLEAN,'boolean_b': BOOLEAN
        }){
            super(ctx);

            this['boolean_a'] = opts['boolean_a'];
this['boolean_b'] = opts['boolean_b']
            

        }

        static defaults = {
            'boolean_a':  false,
'boolean_b':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'Logic Comparison AND' : class extends Node{
        //Setters
        set 'boolean_a'(value : BOOLEAN)  { super.$$link(0, value) } 
set 'boolean_b'(value : BOOLEAN)  { super.$$link(1, value) } 

        //Getters
        get 'BOOLEAN'() : BOOLEAN { return [this, 'BOOLEAN', 0]  as unknown as BOOLEAN; }

        constructor(opts:{
            'boolean_a': BOOLEAN,'boolean_b': BOOLEAN
        }){
            super(ctx);

            this['boolean_a'] = opts['boolean_a'];
this['boolean_b'] = opts['boolean_b']
            

        }

        static defaults = {
            'boolean_a':  false,
'boolean_b':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'Logic Comparison XOR' : class extends Node{
        //Setters
        set 'boolean_a'(value : BOOLEAN)  { super.$$link(0, value) } 
set 'boolean_b'(value : BOOLEAN)  { super.$$link(1, value) } 

        //Getters
        get 'BOOLEAN'() : BOOLEAN { return [this, 'BOOLEAN', 0]  as unknown as BOOLEAN; }

        constructor(opts:{
            'boolean_a': BOOLEAN,'boolean_b': BOOLEAN
        }){
            super(ctx);

            this['boolean_a'] = opts['boolean_a'];
this['boolean_b'] = opts['boolean_b']
            

        }

        static defaults = {
            'boolean_a':  false,
'boolean_b':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'Logic NOT' : class extends Node{
        //Setters
        set 'boolean'(value : BOOLEAN)  { super.$$link(0, value) } 

        //Getters
        get 'BOOLEAN'() : BOOLEAN { return [this, 'BOOLEAN', 0]  as unknown as BOOLEAN; }

        constructor(opts:{
            'boolean': BOOLEAN
        }){
            super(ctx);

            this['boolean'] = opts['boolean']
            

        }

        static defaults = {
            'boolean':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'Lora Loader' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'clip'(value : CLIP)  { super.$$link(1, value) } 
set 'lora_name'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(2, value) } 
set 'strength_model'(value : FLOAT)  { super.$$link(3, value) } 
set 'strength_clip'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this, 'CLIP', 1]  as unknown as CLIP; }
get 'NAME_STRING'() : STRING { return [this, 'NAME_STRING', 2]  as unknown as STRING; }

        constructor(opts:{
            'model': MODEL,'clip': CLIP,'lora_name': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','strength_model': FLOAT,'strength_clip': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['clip'] = opts['clip'];
this['lora_name'] = opts['lora_name'];
this['strength_model'] = opts['strength_model'];
this['strength_clip'] = opts['strength_clip']
            

        }

        static defaults = {
            'strength_model':  1,
'strength_clip':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'Hex to HSL' : class extends Node{
        //Setters
        set 'hex_color'(value : STRING)  { super.$$link(0, value) } 
set 'include_alpha'(value : BOOLEAN)  { super.$$link(1, value) } 

        //Getters
        get 'hue'() : INT { return [this, 'hue', 0]  as unknown as INT; }
get 'saturation'() : INT { return [this, 'saturation', 1]  as unknown as INT; }
get 'lightness'() : INT { return [this, 'lightness', 2]  as unknown as INT; }
get 'alpha'() : FLOAT { return [this, 'alpha', 3]  as unknown as FLOAT; }
get 'hsl'() : STRING { return [this, 'hsl', 4]  as unknown as STRING; }

        constructor(opts:{
            'hex_color': STRING,'include_alpha'?: BOOLEAN
        }){
            super(ctx);

            this['hex_color'] = opts['hex_color']
            if(opts['include_alpha']!==undefined) this['include_alpha'] = opts['include_alpha']

        }

        static defaults = {
            'hex_color':  "#FF0000",
'include_alpha':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'HSL to Hex' : class extends Node{
        //Setters
        set 'hsl_color'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'hex_color'() : STRING { return [this, 'hex_color', 0]  as unknown as STRING; }

        constructor(opts:{
            'hsl_color': STRING
        }){
            super(ctx);

            this['hsl_color'] = opts['hsl_color']
            

        }

        static defaults = {
            'hsl_color':  "hsl(0, 100%, 50%)"
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image SSAO (Ambient Occlusion)' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'depth_images'(value : IMAGE)  { super.$$link(1, value) } 
set 'strength'(value : FLOAT)  { super.$$link(2, value) } 
set 'radius'(value : FLOAT)  { super.$$link(3, value) } 
set 'ao_blur'(value : FLOAT)  { super.$$link(4, value) } 
set 'specular_threshold'(value : INT)  { super.$$link(5, value) } 
set 'enable_specular_masking'(value : 'True'|'False')  { super.$$link(6, value) } 
set 'tile_size'(value : INT)  { super.$$link(7, value) } 

        //Getters
        get 'composited_images'() : IMAGE { return [this, 'composited_images', 0]  as unknown as IMAGE; }
get 'ssao_images'() : IMAGE { return [this, 'ssao_images', 1]  as unknown as IMAGE; }
get 'specular_mask_images'() : IMAGE { return [this, 'specular_mask_images', 2]  as unknown as IMAGE; }

        constructor(opts:{
            'images': IMAGE,'depth_images': IMAGE,'strength': FLOAT,'radius': FLOAT,'ao_blur': FLOAT,'specular_threshold': INT,'enable_specular_masking': 'True'|'False','tile_size': INT
        }){
            super(ctx);

            this['images'] = opts['images'];
this['depth_images'] = opts['depth_images'];
this['strength'] = opts['strength'];
this['radius'] = opts['radius'];
this['ao_blur'] = opts['ao_blur'];
this['specular_threshold'] = opts['specular_threshold'];
this['enable_specular_masking'] = opts['enable_specular_masking'];
this['tile_size'] = opts['tile_size']
            

        }

        static defaults = {
            'strength':  1,
'radius':  30,
'ao_blur':  2.5,
'specular_threshold':  25,
'tile_size':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image SSDO (Direct Occlusion)' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'depth_images'(value : IMAGE)  { super.$$link(1, value) } 
set 'strength'(value : FLOAT)  { super.$$link(2, value) } 
set 'radius'(value : FLOAT)  { super.$$link(3, value) } 
set 'specular_threshold'(value : INT)  { super.$$link(4, value) } 
set 'colored_occlusion'(value : 'True'|'False')  { super.$$link(5, value) } 

        //Getters
        get 'composited_images'() : IMAGE { return [this, 'composited_images', 0]  as unknown as IMAGE; }
get 'ssdo_images'() : IMAGE { return [this, 'ssdo_images', 1]  as unknown as IMAGE; }
get 'ssdo_image_masks'() : IMAGE { return [this, 'ssdo_image_masks', 2]  as unknown as IMAGE; }
get 'light_source_image_masks'() : IMAGE { return [this, 'light_source_image_masks', 3]  as unknown as IMAGE; }

        constructor(opts:{
            'images': IMAGE,'depth_images': IMAGE,'strength': FLOAT,'radius': FLOAT,'specular_threshold': INT,'colored_occlusion': 'True'|'False'
        }){
            super(ctx);

            this['images'] = opts['images'];
this['depth_images'] = opts['depth_images'];
this['strength'] = opts['strength'];
this['radius'] = opts['radius'];
this['specular_threshold'] = opts['specular_threshold'];
this['colored_occlusion'] = opts['colored_occlusion']
            

        }

        static defaults = {
            'strength':  1,
'radius':  30,
'specular_threshold':  128
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Analyze' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'mode'(value : 'Black White Levels'|'RGB Levels')  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'mode': 'Black White Levels'|'RGB Levels'
        }){
            super(ctx);

            this['image'] = opts['image'];
this['mode'] = opts['mode']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Aspect Ratio' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'width'(value : NUMBER)  { super.$$link(1, value) } 
set 'height'(value : NUMBER)  { super.$$link(2, value) } 

        //Getters
        get 'aspect_number'() : NUMBER { return [this, 'aspect_number', 0]  as unknown as NUMBER; }
get 'aspect_float'() : FLOAT { return [this, 'aspect_float', 1]  as unknown as FLOAT; }
get 'is_landscape_bool'() : NUMBER { return [this, 'is_landscape_bool', 2]  as unknown as NUMBER; }
get 'aspect_ratio_common'() : STRING { return [this, 'aspect_ratio_common', 3]  as unknown as STRING; }
get 'aspect_type'() : STRING { return [this, 'aspect_type', 4]  as unknown as STRING; }

        constructor(opts:{
            'image'?: IMAGE,'width'?: NUMBER,'height'?: NUMBER
        }){
            super(ctx);

            
            if(opts['image']!==undefined) this['image'] = opts['image'];
if(opts['width']!==undefined) this['width'] = opts['width'];
if(opts['height']!==undefined) this['height'] = opts['height']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Batch' : class extends Node{
        //Setters
        set 'images_a'(value : IMAGE)  { super.$$link(0, value) } 
set 'images_b'(value : IMAGE)  { super.$$link(1, value) } 
set 'images_c'(value : IMAGE)  { super.$$link(2, value) } 
set 'images_d'(value : IMAGE)  { super.$$link(3, value) } 

        //Getters
        get 'image'() : IMAGE { return [this, 'image', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'images_a'?: IMAGE,'images_b'?: IMAGE,'images_c'?: IMAGE,'images_d'?: IMAGE
        }){
            super(ctx);

            
            if(opts['images_a']!==undefined) this['images_a'] = opts['images_a'];
if(opts['images_b']!==undefined) this['images_b'] = opts['images_b'];
if(opts['images_c']!==undefined) this['images_c'] = opts['images_c'];
if(opts['images_d']!==undefined) this['images_d'] = opts['images_d']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Blank' : class extends Node{
        //Setters
        set 'width'(value : INT)  { super.$$link(0, value) } 
set 'height'(value : INT)  { super.$$link(1, value) } 
set 'red'(value : INT)  { super.$$link(2, value) } 
set 'green'(value : INT)  { super.$$link(3, value) } 
set 'blue'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'width': INT,'height': INT,'red': INT,'green': INT,'blue': INT
        }){
            super(ctx);

            this['width'] = opts['width'];
this['height'] = opts['height'];
this['red'] = opts['red'];
this['green'] = opts['green'];
this['blue'] = opts['blue']
            

        }

        static defaults = {
            'width':  512,
'height':  512,
'red':  255,
'green':  255,
'blue':  255
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Blend by Mask' : class extends Node{
        //Setters
        set 'image_a'(value : IMAGE)  { super.$$link(0, value) } 
set 'image_b'(value : IMAGE)  { super.$$link(1, value) } 
set 'mask'(value : IMAGE)  { super.$$link(2, value) } 
set 'blend_percentage'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image_a': IMAGE,'image_b': IMAGE,'mask': IMAGE,'blend_percentage': FLOAT
        }){
            super(ctx);

            this['image_a'] = opts['image_a'];
this['image_b'] = opts['image_b'];
this['mask'] = opts['mask'];
this['blend_percentage'] = opts['blend_percentage']
            

        }

        static defaults = {
            'blend_percentage':  0.5
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Blend' : class extends Node{
        //Setters
        set 'image_a'(value : IMAGE)  { super.$$link(0, value) } 
set 'image_b'(value : IMAGE)  { super.$$link(1, value) } 
set 'blend_percentage'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'image'() : IMAGE { return [this, 'image', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image_a': IMAGE,'image_b': IMAGE,'blend_percentage': FLOAT
        }){
            super(ctx);

            this['image_a'] = opts['image_a'];
this['image_b'] = opts['image_b'];
this['blend_percentage'] = opts['blend_percentage']
            

        }

        static defaults = {
            'blend_percentage':  0.5
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Blending Mode' : class extends Node{
        //Setters
        set 'image_a'(value : IMAGE)  { super.$$link(0, value) } 
set 'image_b'(value : IMAGE)  { super.$$link(1, value) } 
set 'mode'(value : 'add'|'color'|'color_burn'|'color_dodge'|'darken'|'difference'|'exclusion'|'hard_light'|'hue'|'lighten'|'multiply'|'overlay'|'screen'|'soft_light')  { super.$$link(2, value) } 
set 'blend_percentage'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'image'() : IMAGE { return [this, 'image', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image_a': IMAGE,'image_b': IMAGE,'mode': 'add'|'color'|'color_burn'|'color_dodge'|'darken'|'difference'|'exclusion'|'hard_light'|'hue'|'lighten'|'multiply'|'overlay'|'screen'|'soft_light','blend_percentage': FLOAT
        }){
            super(ctx);

            this['image_a'] = opts['image_a'];
this['image_b'] = opts['image_b'];
this['mode'] = opts['mode'];
this['blend_percentage'] = opts['blend_percentage']
            

        }

        static defaults = {
            'blend_percentage':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Bloom Filter' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'radius'(value : FLOAT)  { super.$$link(1, value) } 
set 'intensity'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'radius': FLOAT,'intensity': FLOAT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['radius'] = opts['radius'];
this['intensity'] = opts['intensity']
            

        }

        static defaults = {
            'radius':  10,
'intensity':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Canny Filter' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'enable_threshold'(value : 'false'|'true')  { super.$$link(1, value) } 
set 'threshold_low'(value : FLOAT)  { super.$$link(2, value) } 
set 'threshold_high'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'images'() : IMAGE { return [this, 'images', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'images': IMAGE,'enable_threshold': 'false'|'true','threshold_low': FLOAT,'threshold_high': FLOAT
        }){
            super(ctx);

            this['images'] = opts['images'];
this['enable_threshold'] = opts['enable_threshold'];
this['threshold_low'] = opts['threshold_low'];
this['threshold_high'] = opts['threshold_high']
            

        }

        static defaults = {
            'threshold_low':  0,
'threshold_high':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Chromatic Aberration' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'red_offset'(value : INT)  { super.$$link(1, value) } 
set 'green_offset'(value : INT)  { super.$$link(2, value) } 
set 'blue_offset'(value : INT)  { super.$$link(3, value) } 
set 'intensity'(value : FLOAT)  { super.$$link(4, value) } 
set 'fade_radius'(value : INT)  { super.$$link(5, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'red_offset': INT,'green_offset': INT,'blue_offset': INT,'intensity': FLOAT,'fade_radius': INT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['red_offset'] = opts['red_offset'];
this['green_offset'] = opts['green_offset'];
this['blue_offset'] = opts['blue_offset'];
this['intensity'] = opts['intensity'];
this['fade_radius'] = opts['fade_radius']
            

        }

        static defaults = {
            'red_offset':  2,
'green_offset':  -1,
'blue_offset':  1,
'intensity':  0.5,
'fade_radius':  12
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Color Palette' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'colors'(value : INT)  { super.$$link(1, value) } 
set 'mode'(value : 'Chart'|'back_to_back')  { super.$$link(2, value) } 

        //Getters
        get 'image'() : IMAGE { return [this, 'image', 0]  as unknown as IMAGE; }
get 'color_palettes'() : LIST { return [this, 'color_palettes', 1]  as unknown as LIST; }

        constructor(opts:{
            'image': IMAGE,'colors': INT,'mode': 'Chart'|'back_to_back'
        }){
            super(ctx);

            this['image'] = opts['image'];
this['colors'] = opts['colors'];
this['mode'] = opts['mode']
            

        }

        static defaults = {
            'colors':  16
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Crop Face' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'crop_padding_factor'(value : FLOAT)  { super.$$link(1, value) } 
set 'cascade_xml'(value : 'lbpcascade_animeface.xml'|'haarcascade_frontalface_default.xml'|'haarcascade_frontalface_alt.xml'|'haarcascade_frontalface_alt2.xml'|'haarcascade_frontalface_alt_tree.xml'|'haarcascade_profileface.xml'|'haarcascade_upperbody.xml'|'haarcascade_eye.xml')  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }
get 'CROP_DATA'() : CROP_DATA { return [this, 'CROP_DATA', 1]  as unknown as CROP_DATA; }

        constructor(opts:{
            'image': IMAGE,'crop_padding_factor': FLOAT,'cascade_xml': 'lbpcascade_animeface.xml'|'haarcascade_frontalface_default.xml'|'haarcascade_frontalface_alt.xml'|'haarcascade_frontalface_alt2.xml'|'haarcascade_frontalface_alt_tree.xml'|'haarcascade_profileface.xml'|'haarcascade_upperbody.xml'|'haarcascade_eye.xml'
        }){
            super(ctx);

            this['image'] = opts['image'];
this['crop_padding_factor'] = opts['crop_padding_factor'];
this['cascade_xml'] = opts['cascade_xml']
            

        }

        static defaults = {
            'crop_padding_factor':  0.25
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Crop Location' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'top'(value : INT)  { super.$$link(1, value) } 
set 'left'(value : INT)  { super.$$link(2, value) } 
set 'right'(value : INT)  { super.$$link(3, value) } 
set 'bottom'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }
get 'CROP_DATA'() : CROP_DATA { return [this, 'CROP_DATA', 1]  as unknown as CROP_DATA; }

        constructor(opts:{
            'image': IMAGE,'top': INT,'left': INT,'right': INT,'bottom': INT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['top'] = opts['top'];
this['left'] = opts['left'];
this['right'] = opts['right'];
this['bottom'] = opts['bottom']
            

        }

        static defaults = {
            'top':  0,
'left':  0,
'right':  256,
'bottom':  256
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Crop Square Location' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'x'(value : INT)  { super.$$link(1, value) } 
set 'y'(value : INT)  { super.$$link(2, value) } 
set 'size'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }
get 'CROP_DATA'() : CROP_DATA { return [this, 'CROP_DATA', 1]  as unknown as CROP_DATA; }

        constructor(opts:{
            'image': IMAGE,'x': INT,'y': INT,'size': INT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['x'] = opts['x'];
this['y'] = opts['y'];
this['size'] = opts['size']
            

        }

        static defaults = {
            'x':  0,
'y':  0,
'size':  256
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Displacement Warp' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'displacement_maps'(value : IMAGE)  { super.$$link(1, value) } 
set 'amplitude'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'images'() : IMAGE { return [this, 'images', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'images': IMAGE,'displacement_maps': IMAGE,'amplitude': FLOAT
        }){
            super(ctx);

            this['images'] = opts['images'];
this['displacement_maps'] = opts['displacement_maps'];
this['amplitude'] = opts['amplitude']
            

        }

        static defaults = {
            'amplitude':  25
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Lucy Sharpen' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'iterations'(value : INT)  { super.$$link(1, value) } 
set 'kernel_size'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'images': IMAGE,'iterations': INT,'kernel_size': INT
        }){
            super(ctx);

            this['images'] = opts['images'];
this['iterations'] = opts['iterations'];
this['kernel_size'] = opts['kernel_size']
            

        }

        static defaults = {
            'iterations':  2,
'kernel_size':  3
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Paste Face' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'crop_image'(value : IMAGE)  { super.$$link(1, value) } 
set 'crop_data'(value : CROP_DATA)  { super.$$link(2, value) } 
set 'crop_blending'(value : FLOAT)  { super.$$link(3, value) } 
set 'crop_sharpening'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }
get 'MASK_IMAGE'() : IMAGE { return [this, 'MASK_IMAGE', 1]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'crop_image': IMAGE,'crop_data': CROP_DATA,'crop_blending': FLOAT,'crop_sharpening': INT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['crop_image'] = opts['crop_image'];
this['crop_data'] = opts['crop_data'];
this['crop_blending'] = opts['crop_blending'];
this['crop_sharpening'] = opts['crop_sharpening']
            

        }

        static defaults = {
            'crop_blending':  0.25,
'crop_sharpening':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Paste Crop' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'crop_image'(value : IMAGE)  { super.$$link(1, value) } 
set 'crop_data'(value : CROP_DATA)  { super.$$link(2, value) } 
set 'crop_blending'(value : FLOAT)  { super.$$link(3, value) } 
set 'crop_sharpening'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'crop_image': IMAGE,'crop_data': CROP_DATA,'crop_blending': FLOAT,'crop_sharpening': INT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['crop_image'] = opts['crop_image'];
this['crop_data'] = opts['crop_data'];
this['crop_blending'] = opts['crop_blending'];
this['crop_sharpening'] = opts['crop_sharpening']
            

        }

        static defaults = {
            'crop_blending':  0.25,
'crop_sharpening':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Paste Crop by Location' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'crop_image'(value : IMAGE)  { super.$$link(1, value) } 
set 'top'(value : INT)  { super.$$link(2, value) } 
set 'left'(value : INT)  { super.$$link(3, value) } 
set 'right'(value : INT)  { super.$$link(4, value) } 
set 'bottom'(value : INT)  { super.$$link(5, value) } 
set 'crop_blending'(value : FLOAT)  { super.$$link(6, value) } 
set 'crop_sharpening'(value : INT)  { super.$$link(7, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'crop_image': IMAGE,'top': INT,'left': INT,'right': INT,'bottom': INT,'crop_blending': FLOAT,'crop_sharpening': INT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['crop_image'] = opts['crop_image'];
this['top'] = opts['top'];
this['left'] = opts['left'];
this['right'] = opts['right'];
this['bottom'] = opts['bottom'];
this['crop_blending'] = opts['crop_blending'];
this['crop_sharpening'] = opts['crop_sharpening']
            

        }

        static defaults = {
            'top':  0,
'left':  0,
'right':  256,
'bottom':  256,
'crop_blending':  0.25,
'crop_sharpening':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Pixelate' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'pixelation_size'(value : FLOAT)  { super.$$link(1, value) } 
set 'num_colors'(value : FLOAT)  { super.$$link(2, value) } 
set 'init_mode'(value : 'k-means++'|'random'|'none')  { super.$$link(3, value) } 
set 'max_iterations'(value : FLOAT)  { super.$$link(4, value) } 
set 'dither'(value : 'False'|'True')  { super.$$link(5, value) } 
set 'dither_mode'(value : 'FloydSteinberg'|'Ordered')  { super.$$link(6, value) } 
set 'color_palettes'(value : LIST)  { super.$$link(7, value) } 
set 'color_palette_mode'(value : 'Brightness'|'BrightnessAndTonal'|'Linear'|'Tonal')  { super.$$link(8, value) } 
set 'reverse_palette'(value : 'False'|'True')  { super.$$link(9, value) } 

        //Getters
        get 'images'() : IMAGE { return [this, 'images', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'images': IMAGE,'pixelation_size': FLOAT,'num_colors': FLOAT,'init_mode': 'k-means++'|'random'|'none','max_iterations': FLOAT,'dither': 'False'|'True','dither_mode': 'FloydSteinberg'|'Ordered','color_palettes'?: LIST,'color_palette_mode'?: 'Brightness'|'BrightnessAndTonal'|'Linear'|'Tonal','reverse_palette'?: 'False'|'True'
        }){
            super(ctx);

            this['images'] = opts['images'];
this['pixelation_size'] = opts['pixelation_size'];
this['num_colors'] = opts['num_colors'];
this['init_mode'] = opts['init_mode'];
this['max_iterations'] = opts['max_iterations'];
this['dither'] = opts['dither'];
this['dither_mode'] = opts['dither_mode']
            if(opts['color_palettes']!==undefined) this['color_palettes'] = opts['color_palettes'];
if(opts['color_palette_mode']!==undefined) this['color_palette_mode'] = opts['color_palette_mode'];
if(opts['reverse_palette']!==undefined) this['reverse_palette'] = opts['reverse_palette']

        }

        static defaults = {
            'pixelation_size':  164,
'num_colors':  16,
'max_iterations':  100
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Power Noise' : class extends Node{
        //Setters
        set 'width'(value : INT)  { super.$$link(0, value) } 
set 'height'(value : INT)  { super.$$link(1, value) } 
set 'frequency'(value : FLOAT)  { super.$$link(2, value) } 
set 'attenuation'(value : FLOAT)  { super.$$link(3, value) } 
set 'noise_type'(value : 'grey'|'white'|'pink'|'blue'|'green'|'mix')  { super.$$link(4, value) } 
set 'seed'(value : INT)  { super.$$link(5, value) } 

        //Getters
        get 'image'() : IMAGE { return [this, 'image', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'width': INT,'height': INT,'frequency': FLOAT,'attenuation': FLOAT,'noise_type': 'grey'|'white'|'pink'|'blue'|'green'|'mix','seed': INT
        }){
            super(ctx);

            this['width'] = opts['width'];
this['height'] = opts['height'];
this['frequency'] = opts['frequency'];
this['attenuation'] = opts['attenuation'];
this['noise_type'] = opts['noise_type'];
this['seed'] = opts['seed']
            

        }

        static defaults = {
            'width':  512,
'height':  512,
'frequency':  0.5,
'attenuation':  0.5,
'seed':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Dragan Photography Filter' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'saturation'(value : FLOAT)  { super.$$link(1, value) } 
set 'contrast'(value : FLOAT)  { super.$$link(2, value) } 
set 'brightness'(value : FLOAT)  { super.$$link(3, value) } 
set 'sharpness'(value : FLOAT)  { super.$$link(4, value) } 
set 'highpass_radius'(value : FLOAT)  { super.$$link(5, value) } 
set 'highpass_samples'(value : INT)  { super.$$link(6, value) } 
set 'highpass_strength'(value : FLOAT)  { super.$$link(7, value) } 
set 'colorize'(value : 'true'|'false')  { super.$$link(8, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'saturation': FLOAT,'contrast': FLOAT,'brightness': FLOAT,'sharpness': FLOAT,'highpass_radius': FLOAT,'highpass_samples': INT,'highpass_strength': FLOAT,'colorize': 'true'|'false'
        }){
            super(ctx);

            this['image'] = opts['image'];
this['saturation'] = opts['saturation'];
this['contrast'] = opts['contrast'];
this['brightness'] = opts['brightness'];
this['sharpness'] = opts['sharpness'];
this['highpass_radius'] = opts['highpass_radius'];
this['highpass_samples'] = opts['highpass_samples'];
this['highpass_strength'] = opts['highpass_strength'];
this['colorize'] = opts['colorize']
            

        }

        static defaults = {
            'saturation':  1,
'contrast':  1,
'brightness':  1,
'sharpness':  1,
'highpass_radius':  6,
'highpass_samples':  1,
'highpass_strength':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Edge Detection Filter' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'mode'(value : 'normal'|'laplacian')  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'mode': 'normal'|'laplacian'
        }){
            super(ctx);

            this['image'] = opts['image'];
this['mode'] = opts['mode']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Film Grain' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'density'(value : FLOAT)  { super.$$link(1, value) } 
set 'intensity'(value : FLOAT)  { super.$$link(2, value) } 
set 'highlights'(value : FLOAT)  { super.$$link(3, value) } 
set 'supersample_factor'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'density': FLOAT,'intensity': FLOAT,'highlights': FLOAT,'supersample_factor': INT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['density'] = opts['density'];
this['intensity'] = opts['intensity'];
this['highlights'] = opts['highlights'];
this['supersample_factor'] = opts['supersample_factor']
            

        }

        static defaults = {
            'density':  1,
'intensity':  1,
'highlights':  1,
'supersample_factor':  4
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Filter Adjustments' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'brightness'(value : FLOAT)  { super.$$link(1, value) } 
set 'contrast'(value : FLOAT)  { super.$$link(2, value) } 
set 'saturation'(value : FLOAT)  { super.$$link(3, value) } 
set 'sharpness'(value : FLOAT)  { super.$$link(4, value) } 
set 'blur'(value : INT)  { super.$$link(5, value) } 
set 'gaussian_blur'(value : FLOAT)  { super.$$link(6, value) } 
set 'edge_enhance'(value : FLOAT)  { super.$$link(7, value) } 
set 'detail_enhance'(value : 'false'|'true')  { super.$$link(8, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'brightness': FLOAT,'contrast': FLOAT,'saturation': FLOAT,'sharpness': FLOAT,'blur': INT,'gaussian_blur': FLOAT,'edge_enhance': FLOAT,'detail_enhance': 'false'|'true'
        }){
            super(ctx);

            this['image'] = opts['image'];
this['brightness'] = opts['brightness'];
this['contrast'] = opts['contrast'];
this['saturation'] = opts['saturation'];
this['sharpness'] = opts['sharpness'];
this['blur'] = opts['blur'];
this['gaussian_blur'] = opts['gaussian_blur'];
this['edge_enhance'] = opts['edge_enhance'];
this['detail_enhance'] = opts['detail_enhance']
            

        }

        static defaults = {
            'brightness':  0,
'contrast':  1,
'saturation':  1,
'sharpness':  1,
'blur':  0,
'gaussian_blur':  0,
'edge_enhance':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Flip' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'mode'(value : 'horizontal'|'vertical')  { super.$$link(1, value) } 

        //Getters
        get 'images'() : IMAGE { return [this, 'images', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'images': IMAGE,'mode': 'horizontal'|'vertical'
        }){
            super(ctx);

            this['images'] = opts['images'];
this['mode'] = opts['mode']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Gradient Map' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'gradient_image'(value : IMAGE)  { super.$$link(1, value) } 
set 'flip_left_right'(value : 'false'|'true')  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'gradient_image': IMAGE,'flip_left_right': 'false'|'true'
        }){
            super(ctx);

            this['image'] = opts['image'];
this['gradient_image'] = opts['gradient_image'];
this['flip_left_right'] = opts['flip_left_right']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Generate Gradient' : class extends Node{
        //Setters
        set 'width'(value : INT)  { super.$$link(0, value) } 
set 'height'(value : INT)  { super.$$link(1, value) } 
set 'direction'(value : 'horizontal'|'vertical')  { super.$$link(2, value) } 
set 'tolerance'(value : INT)  { super.$$link(3, value) } 
set 'gradient_stops'(value : STRING)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'width': INT,'height': INT,'direction': 'horizontal'|'vertical','tolerance': INT,'gradient_stops': STRING
        }){
            super(ctx);

            this['width'] = opts['width'];
this['height'] = opts['height'];
this['direction'] = opts['direction'];
this['tolerance'] = opts['tolerance'];
this['gradient_stops'] = opts['gradient_stops']
            

        }

        static defaults = {
            'width':  512,
'height':  512,
'tolerance':  0,
'gradient_stops':  "0:255,0,0\n25:255,255,255\n50:0,255,0\n75:0,0,255"
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image High Pass Filter' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'radius'(value : INT)  { super.$$link(1, value) } 
set 'strength'(value : FLOAT)  { super.$$link(2, value) } 
set 'color_output'(value : 'true'|'false')  { super.$$link(3, value) } 
set 'neutral_background'(value : 'true'|'false')  { super.$$link(4, value) } 

        //Getters
        get 'images'() : IMAGE { return [this, 'images', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'images': IMAGE,'radius': INT,'strength': FLOAT,'color_output': 'true'|'false','neutral_background': 'true'|'false'
        }){
            super(ctx);

            this['images'] = opts['images'];
this['radius'] = opts['radius'];
this['strength'] = opts['strength'];
this['color_output'] = opts['color_output'];
this['neutral_background'] = opts['neutral_background']
            

        }

        static defaults = {
            'radius':  10,
'strength':  1.5
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image History Loader' : class extends Node{
        //Setters
        set 'image'(value : '.../storage/b2782d56-1283-4732-b09e-b0c55b421b35.jpg'|'.../storage/b363d4e7-255e-459d-bd14-21bfe2f51e35.jpg'|'.../storage/b3c51914-db6f-4735-8360-4b867d6728b1.jpg'|'.../storage/b49b91fd-f0dc-43c6-b044-7c6f5e799e5c.jpg'|'.../storage/b6786edc-2229-474b-9dc0-e3b68ae54621.jpg'|'.../storage/bb0768ce-6b41-49b0-851a-b165692ffa81.jpg'|'.../storage/bc658379-36f6-41ee-b362-f6837e12cca8.jpg'|'.../storage/c26fc9a7-87d6-461f-96fd-68eead9611c9.jpg'|'.../storage/c5a01e68-1470-49f1-8ff7-6b6fd20c0afd.jpg'|'.../storage/c70a4a09-1f98-4a5a-b0df-b5a209aea292.jpg'|'.../storage/c738d471-1844-4863-b08d-68f52bbffe6f.jpg'|'.../storage/ca7b24c7-5cab-4934-9a7b-27f197389226.jpg'|'.../storage/ca836011-9842-45d9-a3d0-63b197c56a0d.jpg'|'.../storage/caf4dfec-fa8e-40c9-ae8b-b9cf64a780e2.jpg'|'.../storage/ccf0e68e-320c-4e40-9396-fd7a0666e784.jpg'|'.../storage/d21a9996-4789-479a-90ce-b6b609e567fe.jpg'|'.../storage/d26d1f2e-ef65-4ff5-9e01-e64b0af0b00f.jpg'|'.../storage/d2993a7f-54e7-4cf6-95c5-6bf28c5d5cb5.jpg'|'.../storage/d62c42dc-d490-4543-9a3c-6784bb0366b3.jpg'|'.../storage/dc35bf00-aa30-4985-bf02-b1b2e12c9ae0.jpg'|'.../storage/dd539edc-adb7-4ddb-af5b-d73f5a417e72.jpg'|'.../storage/de371dab-78a4-414e-80b8-37b209bc9fa4.jpg'|'.../storage/e0056b4e-d6f0-4686-b593-05ef94756032.jpg'|'.../storage/e3e85ce1-2eab-43e5-9116-1ec9f3734e63.jpg'|'.../storage/e4255131-2941-4ebb-9fad-58bf9cc40187.jpg'|'.../storage/e4ef7304-53cf-47b2-881b-f0e9876629a4.jpg'|'.../storage/ec1ec175-3c82-4a7f-a5c2-7578ff5581b5.jpg'|'.../storage/ec7fff3e-295e-4001-9427-1624f7f39b1b.jpg'|'.../storage/ed094d89-98c6-44ce-bada-5c93c9c2b41e.jpg'|'.../storage/ee8051ab-673d-43af-a881-5833ad5ed47a.jpg'|'.../storage/f0f9521e-2594-485d-8ebc-e9005de71205.jpg'|'.../storage/f321e2c5-88fe-439e-ae61-413732ea9ed2.jpg'|'.../storage/f499583a-55fb-4070-a2e0-131db53cb968.jpg'|'.../storage/f55968d4-8093-43e8-b7d5-f03881bcb76d.jpg'|'.../storage/f69a8f63-c135-4241-bf1e-1508b192044c.jpg'|'.../storage/fab9c0a3-aff7-4648-93ad-a56088ca0593.jpg')  { super.$$link(0, value) } 

        //Getters
        get 'image'() : IMAGE { return [this, 'image', 0]  as unknown as IMAGE; }
get 'filename_text'() : STRING { return [this, 'filename_text', 1]  as unknown as STRING; }

        constructor(opts:{
            'image': '.../storage/b2782d56-1283-4732-b09e-b0c55b421b35.jpg'|'.../storage/b363d4e7-255e-459d-bd14-21bfe2f51e35.jpg'|'.../storage/b3c51914-db6f-4735-8360-4b867d6728b1.jpg'|'.../storage/b49b91fd-f0dc-43c6-b044-7c6f5e799e5c.jpg'|'.../storage/b6786edc-2229-474b-9dc0-e3b68ae54621.jpg'|'.../storage/bb0768ce-6b41-49b0-851a-b165692ffa81.jpg'|'.../storage/bc658379-36f6-41ee-b362-f6837e12cca8.jpg'|'.../storage/c26fc9a7-87d6-461f-96fd-68eead9611c9.jpg'|'.../storage/c5a01e68-1470-49f1-8ff7-6b6fd20c0afd.jpg'|'.../storage/c70a4a09-1f98-4a5a-b0df-b5a209aea292.jpg'|'.../storage/c738d471-1844-4863-b08d-68f52bbffe6f.jpg'|'.../storage/ca7b24c7-5cab-4934-9a7b-27f197389226.jpg'|'.../storage/ca836011-9842-45d9-a3d0-63b197c56a0d.jpg'|'.../storage/caf4dfec-fa8e-40c9-ae8b-b9cf64a780e2.jpg'|'.../storage/ccf0e68e-320c-4e40-9396-fd7a0666e784.jpg'|'.../storage/d21a9996-4789-479a-90ce-b6b609e567fe.jpg'|'.../storage/d26d1f2e-ef65-4ff5-9e01-e64b0af0b00f.jpg'|'.../storage/d2993a7f-54e7-4cf6-95c5-6bf28c5d5cb5.jpg'|'.../storage/d62c42dc-d490-4543-9a3c-6784bb0366b3.jpg'|'.../storage/dc35bf00-aa30-4985-bf02-b1b2e12c9ae0.jpg'|'.../storage/dd539edc-adb7-4ddb-af5b-d73f5a417e72.jpg'|'.../storage/de371dab-78a4-414e-80b8-37b209bc9fa4.jpg'|'.../storage/e0056b4e-d6f0-4686-b593-05ef94756032.jpg'|'.../storage/e3e85ce1-2eab-43e5-9116-1ec9f3734e63.jpg'|'.../storage/e4255131-2941-4ebb-9fad-58bf9cc40187.jpg'|'.../storage/e4ef7304-53cf-47b2-881b-f0e9876629a4.jpg'|'.../storage/ec1ec175-3c82-4a7f-a5c2-7578ff5581b5.jpg'|'.../storage/ec7fff3e-295e-4001-9427-1624f7f39b1b.jpg'|'.../storage/ed094d89-98c6-44ce-bada-5c93c9c2b41e.jpg'|'.../storage/ee8051ab-673d-43af-a881-5833ad5ed47a.jpg'|'.../storage/f0f9521e-2594-485d-8ebc-e9005de71205.jpg'|'.../storage/f321e2c5-88fe-439e-ae61-413732ea9ed2.jpg'|'.../storage/f499583a-55fb-4070-a2e0-131db53cb968.jpg'|'.../storage/f55968d4-8093-43e8-b7d5-f03881bcb76d.jpg'|'.../storage/f69a8f63-c135-4241-bf1e-1508b192044c.jpg'|'.../storage/fab9c0a3-aff7-4648-93ad-a56088ca0593.jpg'
        }){
            super(ctx);

            this['image'] = opts['image']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Input Switch' : class extends Node{
        //Setters
        set 'image_a'(value : IMAGE)  { super.$$link(0, value) } 
set 'image_b'(value : IMAGE)  { super.$$link(1, value) } 
set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image_a': IMAGE,'image_b': IMAGE,'boolean': BOOLEAN
        }){
            super(ctx);

            this['image_a'] = opts['image_a'];
this['image_b'] = opts['image_b'];
this['boolean'] = opts['boolean']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Levels Adjustment' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'black_level'(value : FLOAT)  { super.$$link(1, value) } 
set 'mid_level'(value : FLOAT)  { super.$$link(2, value) } 
set 'white_level'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'black_level': FLOAT,'mid_level': FLOAT,'white_level': FLOAT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['black_level'] = opts['black_level'];
this['mid_level'] = opts['mid_level'];
this['white_level'] = opts['white_level']
            

        }

        static defaults = {
            'black_level':  0,
'mid_level':  127.5,
'white_level':  255
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Load' : class extends Node{
        //Setters
        set 'image_path'(value : STRING)  { super.$$link(0, value) } 
set 'RGBA'(value : 'false'|'true')  { super.$$link(1, value) } 
set 'filename_text_extension'(value : 'true'|'false')  { super.$$link(2, value) } 

        //Getters
        get 'image'() : IMAGE { return [this, 'image', 0]  as unknown as IMAGE; }
get 'mask'() : MASK { return [this, 'mask', 1]  as unknown as MASK; }
get 'filename_text'() : STRING { return [this, 'filename_text', 2]  as unknown as STRING; }

        constructor(opts:{
            'image_path': STRING,'RGBA': 'false'|'true','filename_text_extension'?: 'true'|'false'
        }){
            super(ctx);

            this['image_path'] = opts['image_path'];
this['RGBA'] = opts['RGBA']
            if(opts['filename_text_extension']!==undefined) this['filename_text_extension'] = opts['filename_text_extension']

        }

        static defaults = {
            'image_path':  "./ComfyUI/input/example.png"
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Median Filter' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'diameter'(value : INT)  { super.$$link(1, value) } 
set 'sigma_color'(value : FLOAT)  { super.$$link(2, value) } 
set 'sigma_space'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'diameter': INT,'sigma_color': FLOAT,'sigma_space': FLOAT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['diameter'] = opts['diameter'];
this['sigma_color'] = opts['sigma_color'];
this['sigma_space'] = opts['sigma_space']
            

        }

        static defaults = {
            'diameter':  2,
'sigma_color':  10,
'sigma_space':  10
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Mix RGB Channels' : class extends Node{
        //Setters
        set 'red_channel'(value : IMAGE)  { super.$$link(0, value) } 
set 'green_channel'(value : IMAGE)  { super.$$link(1, value) } 
set 'blue_channel'(value : IMAGE)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'red_channel': IMAGE,'green_channel': IMAGE,'blue_channel': IMAGE
        }){
            super(ctx);

            this['red_channel'] = opts['red_channel'];
this['green_channel'] = opts['green_channel'];
this['blue_channel'] = opts['blue_channel']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Monitor Effects Filter' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'mode'(value : 'Digital Distortion'|'Signal Distortion'|'TV Distortion')  { super.$$link(1, value) } 
set 'amplitude'(value : INT)  { super.$$link(2, value) } 
set 'offset'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'image'() : IMAGE { return [this, 'image', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'mode': 'Digital Distortion'|'Signal Distortion'|'TV Distortion','amplitude': INT,'offset': INT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['mode'] = opts['mode'];
this['amplitude'] = opts['amplitude'];
this['offset'] = opts['offset']
            

        }

        static defaults = {
            'amplitude':  5,
'offset':  10
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Nova Filter' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'amplitude'(value : FLOAT)  { super.$$link(1, value) } 
set 'frequency'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'amplitude': FLOAT,'frequency': FLOAT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['amplitude'] = opts['amplitude'];
this['frequency'] = opts['frequency']
            

        }

        static defaults = {
            'amplitude':  0.1,
'frequency':  3.14
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Padding' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'feathering'(value : INT)  { super.$$link(1, value) } 
set 'feather_second_pass'(value : 'true'|'false')  { super.$$link(2, value) } 
set 'left_padding'(value : INT)  { super.$$link(3, value) } 
set 'right_padding'(value : INT)  { super.$$link(4, value) } 
set 'top_padding'(value : INT)  { super.$$link(5, value) } 
set 'bottom_padding'(value : INT)  { super.$$link(6, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'feathering': INT,'feather_second_pass': 'true'|'false','left_padding': INT,'right_padding': INT,'top_padding': INT,'bottom_padding': INT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['feathering'] = opts['feathering'];
this['feather_second_pass'] = opts['feather_second_pass'];
this['left_padding'] = opts['left_padding'];
this['right_padding'] = opts['right_padding'];
this['top_padding'] = opts['top_padding'];
this['bottom_padding'] = opts['bottom_padding']
            

        }

        static defaults = {
            'feathering':  120,
'left_padding':  512,
'right_padding':  512,
'top_padding':  512,
'bottom_padding':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Perlin Noise' : class extends Node{
        //Setters
        set 'width'(value : INT)  { super.$$link(0, value) } 
set 'height'(value : INT)  { super.$$link(1, value) } 
set 'scale'(value : INT)  { super.$$link(2, value) } 
set 'octaves'(value : INT)  { super.$$link(3, value) } 
set 'persistence'(value : FLOAT)  { super.$$link(4, value) } 
set 'seed'(value : INT)  { super.$$link(5, value) } 

        //Getters
        get 'image'() : IMAGE { return [this, 'image', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'width': INT,'height': INT,'scale': INT,'octaves': INT,'persistence': FLOAT,'seed': INT
        }){
            super(ctx);

            this['width'] = opts['width'];
this['height'] = opts['height'];
this['scale'] = opts['scale'];
this['octaves'] = opts['octaves'];
this['persistence'] = opts['persistence'];
this['seed'] = opts['seed']
            

        }

        static defaults = {
            'width':  512,
'height':  512,
'scale':  100,
'octaves':  4,
'persistence':  0.5,
'seed':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Rembg (Remove Background)' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'transparency'(value : BOOLEAN)  { super.$$link(1, value) } 
set 'model'(value : 'u2net'|'u2netp'|'u2net_human_seg'|'silueta'|'isnet-general-use'|'isnet-anime')  { super.$$link(2, value) } 
set 'post_processing'(value : BOOLEAN)  { super.$$link(3, value) } 
set 'only_mask'(value : BOOLEAN)  { super.$$link(4, value) } 
set 'alpha_matting'(value : BOOLEAN)  { super.$$link(5, value) } 
set 'alpha_matting_foreground_threshold'(value : INT)  { super.$$link(6, value) } 
set 'alpha_matting_background_threshold'(value : INT)  { super.$$link(7, value) } 
set 'alpha_matting_erode_size'(value : INT)  { super.$$link(8, value) } 
set 'background_color'(value : 'none'|'black'|'white'|'magenta'|'chroma green'|'chroma blue')  { super.$$link(9, value) } 

        //Getters
        get 'images'() : IMAGE { return [this, 'images', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'images': IMAGE,'transparency': BOOLEAN,'model': 'u2net'|'u2netp'|'u2net_human_seg'|'silueta'|'isnet-general-use'|'isnet-anime','post_processing': BOOLEAN,'only_mask': BOOLEAN,'alpha_matting': BOOLEAN,'alpha_matting_foreground_threshold': INT,'alpha_matting_background_threshold': INT,'alpha_matting_erode_size': INT,'background_color': 'none'|'black'|'white'|'magenta'|'chroma green'|'chroma blue'
        }){
            super(ctx);

            this['images'] = opts['images'];
this['transparency'] = opts['transparency'];
this['model'] = opts['model'];
this['post_processing'] = opts['post_processing'];
this['only_mask'] = opts['only_mask'];
this['alpha_matting'] = opts['alpha_matting'];
this['alpha_matting_foreground_threshold'] = opts['alpha_matting_foreground_threshold'];
this['alpha_matting_background_threshold'] = opts['alpha_matting_background_threshold'];
this['alpha_matting_erode_size'] = opts['alpha_matting_erode_size'];
this['background_color'] = opts['background_color']
            

        }

        static defaults = {
            'transparency':  true,
'post_processing':  false,
'only_mask':  false,
'alpha_matting':  false,
'alpha_matting_foreground_threshold':  240,
'alpha_matting_background_threshold':  10,
'alpha_matting_erode_size':  10
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Perlin Power Fractal' : class extends Node{
        //Setters
        set 'width'(value : INT)  { super.$$link(0, value) } 
set 'height'(value : INT)  { super.$$link(1, value) } 
set 'scale'(value : INT)  { super.$$link(2, value) } 
set 'octaves'(value : INT)  { super.$$link(3, value) } 
set 'persistence'(value : FLOAT)  { super.$$link(4, value) } 
set 'lacunarity'(value : FLOAT)  { super.$$link(5, value) } 
set 'exponent'(value : FLOAT)  { super.$$link(6, value) } 
set 'seed'(value : INT)  { super.$$link(7, value) } 

        //Getters
        get 'image'() : IMAGE { return [this, 'image', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'width': INT,'height': INT,'scale': INT,'octaves': INT,'persistence': FLOAT,'lacunarity': FLOAT,'exponent': FLOAT,'seed': INT
        }){
            super(ctx);

            this['width'] = opts['width'];
this['height'] = opts['height'];
this['scale'] = opts['scale'];
this['octaves'] = opts['octaves'];
this['persistence'] = opts['persistence'];
this['lacunarity'] = opts['lacunarity'];
this['exponent'] = opts['exponent'];
this['seed'] = opts['seed']
            

        }

        static defaults = {
            'width':  512,
'height':  512,
'scale':  100,
'octaves':  4,
'persistence':  0.5,
'lacunarity':  2,
'exponent':  2,
'seed':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Remove Background (Alpha)' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'mode'(value : 'background'|'foreground')  { super.$$link(1, value) } 
set 'threshold'(value : INT)  { super.$$link(2, value) } 
set 'threshold_tolerance'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'images'() : IMAGE { return [this, 'images', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'images': IMAGE,'mode': 'background'|'foreground','threshold': INT,'threshold_tolerance': INT
        }){
            super(ctx);

            this['images'] = opts['images'];
this['mode'] = opts['mode'];
this['threshold'] = opts['threshold'];
this['threshold_tolerance'] = opts['threshold_tolerance']
            

        }

        static defaults = {
            'threshold':  127,
'threshold_tolerance':  2
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Remove Color' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'target_red'(value : INT)  { super.$$link(1, value) } 
set 'target_green'(value : INT)  { super.$$link(2, value) } 
set 'target_blue'(value : INT)  { super.$$link(3, value) } 
set 'replace_red'(value : INT)  { super.$$link(4, value) } 
set 'replace_green'(value : INT)  { super.$$link(5, value) } 
set 'replace_blue'(value : INT)  { super.$$link(6, value) } 
set 'clip_threshold'(value : INT)  { super.$$link(7, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'target_red': INT,'target_green': INT,'target_blue': INT,'replace_red': INT,'replace_green': INT,'replace_blue': INT,'clip_threshold': INT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['target_red'] = opts['target_red'];
this['target_green'] = opts['target_green'];
this['target_blue'] = opts['target_blue'];
this['replace_red'] = opts['replace_red'];
this['replace_green'] = opts['replace_green'];
this['replace_blue'] = opts['replace_blue'];
this['clip_threshold'] = opts['clip_threshold']
            

        }

        static defaults = {
            'target_red':  255,
'target_green':  255,
'target_blue':  255,
'replace_red':  255,
'replace_green':  255,
'replace_blue':  255,
'clip_threshold':  10
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Resize' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'mode'(value : 'rescale'|'resize')  { super.$$link(1, value) } 
set 'supersample'(value : 'true'|'false')  { super.$$link(2, value) } 
set 'resampling'(value : 'lanczos'|'nearest'|'bilinear'|'bicubic')  { super.$$link(3, value) } 
set 'rescale_factor'(value : FLOAT)  { super.$$link(4, value) } 
set 'resize_width'(value : INT)  { super.$$link(5, value) } 
set 'resize_height'(value : INT)  { super.$$link(6, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'mode': 'rescale'|'resize','supersample': 'true'|'false','resampling': 'lanczos'|'nearest'|'bilinear'|'bicubic','rescale_factor': FLOAT,'resize_width': INT,'resize_height': INT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['mode'] = opts['mode'];
this['supersample'] = opts['supersample'];
this['resampling'] = opts['resampling'];
this['rescale_factor'] = opts['rescale_factor'];
this['resize_width'] = opts['resize_width'];
this['resize_height'] = opts['resize_height']
            

        }

        static defaults = {
            'rescale_factor':  2,
'resize_width':  1024,
'resize_height':  1536
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Rotate' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'mode'(value : 'transpose'|'internal')  { super.$$link(1, value) } 
set 'rotation'(value : INT)  { super.$$link(2, value) } 
set 'sampler'(value : 'nearest'|'bilinear'|'bicubic')  { super.$$link(3, value) } 

        //Getters
        get 'images'() : IMAGE { return [this, 'images', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'images': IMAGE,'mode': 'transpose'|'internal','rotation': INT,'sampler': 'nearest'|'bilinear'|'bicubic'
        }){
            super(ctx);

            this['images'] = opts['images'];
this['mode'] = opts['mode'];
this['rotation'] = opts['rotation'];
this['sampler'] = opts['sampler']
            

        }

        static defaults = {
            'rotation':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Rotate Hue' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'hue_shift'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'hue_shift': FLOAT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['hue_shift'] = opts['hue_shift']
            

        }

        static defaults = {
            'hue_shift':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Send HTTP' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'url'(value : STRING)  { super.$$link(1, value) } 
set 'method_type'(value : 'post'|'put'|'patch')  { super.$$link(2, value) } 
set 'request_field_name'(value : STRING)  { super.$$link(3, value) } 
set 'additional_request_headers'(value : DICT)  { super.$$link(4, value) } 

        //Getters
        get 'status_code'() : INT { return [this, 'status_code', 0]  as unknown as INT; }
get 'result_text'() : STRING { return [this, 'result_text', 1]  as unknown as STRING; }

        constructor(opts:{
            'images': IMAGE,'url': STRING,'method_type': 'post'|'put'|'patch','request_field_name': STRING,'additional_request_headers'?: DICT
        }){
            super(ctx);

            this['images'] = opts['images'];
this['url'] = opts['url'];
this['method_type'] = opts['method_type'];
this['request_field_name'] = opts['request_field_name']
            if(opts['additional_request_headers']!==undefined) this['additional_request_headers'] = opts['additional_request_headers']

        }

        static defaults = {
            'url':  "example.com",
'method_type':  "post",
'request_field_name':  "image"
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Save' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'output_path'(value : STRING)  { super.$$link(1, value) } 
set 'filename_prefix'(value : STRING)  { super.$$link(2, value) } 
set 'filename_delimiter'(value : STRING)  { super.$$link(3, value) } 
set 'filename_number_padding'(value : INT)  { super.$$link(4, value) } 
set 'filename_number_start'(value : 'false'|'true')  { super.$$link(5, value) } 
set 'extension'(value : 'png'|'jpg'|'jpeg'|'gif'|'tiff'|'webp'|'bmp')  { super.$$link(6, value) } 
set 'dpi'(value : INT)  { super.$$link(7, value) } 
set 'quality'(value : INT)  { super.$$link(8, value) } 
set 'optimize_image'(value : 'true'|'false')  { super.$$link(9, value) } 
set 'lossless_webp'(value : 'false'|'true')  { super.$$link(10, value) } 
set 'overwrite_mode'(value : 'false'|'prefix_as_filename')  { super.$$link(11, value) } 
set 'show_history'(value : 'false'|'true')  { super.$$link(12, value) } 
set 'show_history_by_prefix'(value : 'true'|'false')  { super.$$link(13, value) } 
set 'embed_workflow'(value : 'true'|'false')  { super.$$link(14, value) } 
set 'show_previews'(value : 'true'|'false')  { super.$$link(15, value) } 

        //Getters
        get 'images'() : IMAGE { return [this, 'images', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'images': IMAGE,'output_path': STRING,'filename_prefix': STRING,'filename_delimiter': STRING,'filename_number_padding': INT,'filename_number_start': 'false'|'true','extension': 'png'|'jpg'|'jpeg'|'gif'|'tiff'|'webp'|'bmp','dpi': INT,'quality': INT,'optimize_image': 'true'|'false','lossless_webp': 'false'|'true','overwrite_mode': 'false'|'prefix_as_filename','show_history': 'false'|'true','show_history_by_prefix': 'true'|'false','embed_workflow': 'true'|'false','show_previews': 'true'|'false'
        }){
            super(ctx);

            this['images'] = opts['images'];
this['output_path'] = opts['output_path'];
this['filename_prefix'] = opts['filename_prefix'];
this['filename_delimiter'] = opts['filename_delimiter'];
this['filename_number_padding'] = opts['filename_number_padding'];
this['filename_number_start'] = opts['filename_number_start'];
this['extension'] = opts['extension'];
this['dpi'] = opts['dpi'];
this['quality'] = opts['quality'];
this['optimize_image'] = opts['optimize_image'];
this['lossless_webp'] = opts['lossless_webp'];
this['overwrite_mode'] = opts['overwrite_mode'];
this['show_history'] = opts['show_history'];
this['show_history_by_prefix'] = opts['show_history_by_prefix'];
this['embed_workflow'] = opts['embed_workflow'];
this['show_previews'] = opts['show_previews']
            

        }

        static defaults = {
            'output_path':  "[time(%Y-%m-%d)]",
'filename_prefix':  "ComfyUI",
'filename_delimiter':  "_",
'filename_number_padding':  4,
'dpi':  300,
'quality':  100
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Seamless Texture' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'blending'(value : FLOAT)  { super.$$link(1, value) } 
set 'tiled'(value : 'true'|'false')  { super.$$link(2, value) } 
set 'tiles'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'images'() : IMAGE { return [this, 'images', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'images': IMAGE,'blending': FLOAT,'tiled': 'true'|'false','tiles': INT
        }){
            super(ctx);

            this['images'] = opts['images'];
this['blending'] = opts['blending'];
this['tiled'] = opts['tiled'];
this['tiles'] = opts['tiles']
            

        }

        static defaults = {
            'blending':  0.4,
'tiles':  2
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Select Channel' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'channel'(value : 'red'|'green'|'blue')  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'channel': 'red'|'green'|'blue'
        }){
            super(ctx);

            this['image'] = opts['image'];
this['channel'] = opts['channel']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Select Color' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'red'(value : INT)  { super.$$link(1, value) } 
set 'green'(value : INT)  { super.$$link(2, value) } 
set 'blue'(value : INT)  { super.$$link(3, value) } 
set 'variance'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'red': INT,'green': INT,'blue': INT,'variance': INT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['red'] = opts['red'];
this['green'] = opts['green'];
this['blue'] = opts['blue'];
this['variance'] = opts['variance']
            

        }

        static defaults = {
            'red':  255,
'green':  255,
'blue':  255,
'variance':  10
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Shadows and Highlights' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'shadow_threshold'(value : FLOAT)  { super.$$link(1, value) } 
set 'shadow_factor'(value : FLOAT)  { super.$$link(2, value) } 
set 'shadow_smoothing'(value : FLOAT)  { super.$$link(3, value) } 
set 'highlight_threshold'(value : FLOAT)  { super.$$link(4, value) } 
set 'highlight_factor'(value : FLOAT)  { super.$$link(5, value) } 
set 'highlight_smoothing'(value : FLOAT)  { super.$$link(6, value) } 
set 'simplify_isolation'(value : FLOAT)  { super.$$link(7, value) } 

        //Getters
        get 'image'() : IMAGE { return [this, 'image', 0]  as unknown as IMAGE; }
get 'shadow_map'() : IMAGE { return [this, 'shadow_map', 1]  as unknown as IMAGE; }
get 'highlight_map'() : IMAGE { return [this, 'highlight_map', 2]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'shadow_threshold': FLOAT,'shadow_factor': FLOAT,'shadow_smoothing': FLOAT,'highlight_threshold': FLOAT,'highlight_factor': FLOAT,'highlight_smoothing': FLOAT,'simplify_isolation': FLOAT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['shadow_threshold'] = opts['shadow_threshold'];
this['shadow_factor'] = opts['shadow_factor'];
this['shadow_smoothing'] = opts['shadow_smoothing'];
this['highlight_threshold'] = opts['highlight_threshold'];
this['highlight_factor'] = opts['highlight_factor'];
this['highlight_smoothing'] = opts['highlight_smoothing'];
this['simplify_isolation'] = opts['simplify_isolation']
            

        }

        static defaults = {
            'shadow_threshold':  75,
'shadow_factor':  1.5,
'shadow_smoothing':  0.25,
'highlight_threshold':  175,
'highlight_factor':  0.5,
'highlight_smoothing':  0.25,
'simplify_isolation':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Size to Number' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        get 'width_num'() : NUMBER { return [this, 'width_num', 0]  as unknown as NUMBER; }
get 'height_num'() : NUMBER { return [this, 'height_num', 1]  as unknown as NUMBER; }
get 'width_float'() : FLOAT { return [this, 'width_float', 2]  as unknown as FLOAT; }
get 'height_float'() : FLOAT { return [this, 'height_float', 3]  as unknown as FLOAT; }
get 'width_int'() : INT { return [this, 'width_int', 4]  as unknown as INT; }
get 'height_int'() : INT { return [this, 'height_int', 5]  as unknown as INT; }

        constructor(opts:{
            'image': IMAGE
        }){
            super(ctx);

            this['image'] = opts['image']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Stitch' : class extends Node{
        //Setters
        set 'image_a'(value : IMAGE)  { super.$$link(0, value) } 
set 'image_b'(value : IMAGE)  { super.$$link(1, value) } 
set 'stitch'(value : 'top'|'left'|'bottom'|'right')  { super.$$link(2, value) } 
set 'feathering'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image_a': IMAGE,'image_b': IMAGE,'stitch': 'top'|'left'|'bottom'|'right','feathering': INT
        }){
            super(ctx);

            this['image_a'] = opts['image_a'];
this['image_b'] = opts['image_b'];
this['stitch'] = opts['stitch'];
this['feathering'] = opts['feathering']
            

        }

        static defaults = {
            'feathering':  50
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Style Filter' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'style'(value : '1977'|'aden'|'brannan'|'brooklyn'|'clarendon'|'earlybird'|'fairy tale'|'gingham'|'hudson'|'inkwell'|'kelvin'|'lark'|'lofi'|'maven'|'mayfair'|'moon'|'nashville'|'perpetua'|'reyes'|'rise'|'slumber'|'stinson'|'toaster'|'valencia'|'walden'|'willow'|'xpro2')  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'style': '1977'|'aden'|'brannan'|'brooklyn'|'clarendon'|'earlybird'|'fairy tale'|'gingham'|'hudson'|'inkwell'|'kelvin'|'lark'|'lofi'|'maven'|'mayfair'|'moon'|'nashville'|'perpetua'|'reyes'|'rise'|'slumber'|'stinson'|'toaster'|'valencia'|'walden'|'willow'|'xpro2'
        }){
            super(ctx);

            this['image'] = opts['image'];
this['style'] = opts['style']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Threshold' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'threshold'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'threshold': FLOAT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['threshold'] = opts['threshold']
            

        }

        static defaults = {
            'threshold':  0.5
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Tiled' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'num_tiles'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGES'() : IMAGE { return [this, 'IMAGES', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'num_tiles': INT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['num_tiles'] = opts['num_tiles']
            

        }

        static defaults = {
            'num_tiles':  4
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Transpose' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'image_overlay'(value : IMAGE)  { super.$$link(1, value) } 
set 'width'(value : INT)  { super.$$link(2, value) } 
set 'height'(value : INT)  { super.$$link(3, value) } 
set 'X'(value : INT)  { super.$$link(4, value) } 
set 'Y'(value : INT)  { super.$$link(5, value) } 
set 'rotation'(value : INT)  { super.$$link(6, value) } 
set 'feathering'(value : INT)  { super.$$link(7, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'image_overlay': IMAGE,'width': INT,'height': INT,'X': INT,'Y': INT,'rotation': INT,'feathering': INT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['image_overlay'] = opts['image_overlay'];
this['width'] = opts['width'];
this['height'] = opts['height'];
this['X'] = opts['X'];
this['Y'] = opts['Y'];
this['rotation'] = opts['rotation'];
this['feathering'] = opts['feathering']
            

        }

        static defaults = {
            'width':  512,
'height':  512,
'X':  0,
'Y':  0,
'rotation':  0,
'feathering':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image fDOF Filter' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'depth'(value : IMAGE)  { super.$$link(1, value) } 
set 'mode'(value : 'mock'|'gaussian'|'box')  { super.$$link(2, value) } 
set 'radius'(value : INT)  { super.$$link(3, value) } 
set 'samples'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'depth': IMAGE,'mode': 'mock'|'gaussian'|'box','radius': INT,'samples': INT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['depth'] = opts['depth'];
this['mode'] = opts['mode'];
this['radius'] = opts['radius'];
this['samples'] = opts['samples']
            

        }

        static defaults = {
            'radius':  8,
'samples':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image to Latent Mask' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'channel'(value : 'alpha'|'red'|'green'|'blue')  { super.$$link(1, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this, 'MASKS', 0]  as unknown as MASK; }

        constructor(opts:{
            'images': IMAGE,'channel': 'alpha'|'red'|'green'|'blue'
        }){
            super(ctx);

            this['images'] = opts['images'];
this['channel'] = opts['channel']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image to Noise' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'num_colors'(value : INT)  { super.$$link(1, value) } 
set 'black_mix'(value : INT)  { super.$$link(2, value) } 
set 'gaussian_mix'(value : FLOAT)  { super.$$link(3, value) } 
set 'brightness'(value : FLOAT)  { super.$$link(4, value) } 
set 'output_mode'(value : 'batch'|'list')  { super.$$link(5, value) } 
set 'seed'(value : INT)  { super.$$link(6, value) } 

        //Getters
        get 'image'() : IMAGE { return [this, 'image', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'images': IMAGE,'num_colors': INT,'black_mix': INT,'gaussian_mix': FLOAT,'brightness': FLOAT,'output_mode': 'batch'|'list','seed': INT
        }){
            super(ctx);

            this['images'] = opts['images'];
this['num_colors'] = opts['num_colors'];
this['black_mix'] = opts['black_mix'];
this['gaussian_mix'] = opts['gaussian_mix'];
this['brightness'] = opts['brightness'];
this['output_mode'] = opts['output_mode'];
this['seed'] = opts['seed']
            

        }

        static defaults = {
            'num_colors':  16,
'black_mix':  0,
'gaussian_mix':  0,
'brightness':  1,
'seed':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image to Seed' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        get 'INT'() : INT { return [this, 'INT', 0]  as unknown as INT; }

        constructor(opts:{
            'images': IMAGE
        }){
            super(ctx);

            this['images'] = opts['images']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Images to RGB' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'images': IMAGE
        }){
            super(ctx);

            this['images'] = opts['images']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Images to Linear' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'images': IMAGE
        }){
            super(ctx);

            this['images'] = opts['images']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Integer place counter' : class extends Node{
        //Setters
        set 'int_input'(value : INT)  { super.$$link(0, value) } 

        //Getters
        get 'INT_PLACES'() : INT { return [this, 'INT_PLACES', 0]  as unknown as INT; }

        constructor(opts:{
            'int_input': INT
        }){
            super(ctx);

            this['int_input'] = opts['int_input']
            

        }

        static defaults = {
            'int_input':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Voronoi Noise Filter' : class extends Node{
        //Setters
        set 'width'(value : INT)  { super.$$link(0, value) } 
set 'height'(value : INT)  { super.$$link(1, value) } 
set 'density'(value : INT)  { super.$$link(2, value) } 
set 'modulator'(value : INT)  { super.$$link(3, value) } 
set 'seed'(value : INT)  { super.$$link(4, value) } 
set 'flat'(value : 'False'|'True')  { super.$$link(5, value) } 
set 'RGB_output'(value : 'True'|'False')  { super.$$link(6, value) } 

        //Getters
        get 'image'() : IMAGE { return [this, 'image', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'width': INT,'height': INT,'density': INT,'modulator': INT,'seed': INT,'flat'?: 'False'|'True','RGB_output'?: 'True'|'False'
        }){
            super(ctx);

            this['width'] = opts['width'];
this['height'] = opts['height'];
this['density'] = opts['density'];
this['modulator'] = opts['modulator'];
this['seed'] = opts['seed']
            if(opts['flat']!==undefined) this['flat'] = opts['flat'];
if(opts['RGB_output']!==undefined) this['RGB_output'] = opts['RGB_output']

        }

        static defaults = {
            'width':  512,
'height':  512,
'density':  50,
'modulator':  0,
'seed':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'KSampler (WAS)' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'seed'(value : SEED)  { super.$$link(1, value) } 
set 'steps'(value : INT)  { super.$$link(2, value) } 
set 'cfg'(value : FLOAT)  { super.$$link(3, value) } 
set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(4, value) } 
set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform')  { super.$$link(5, value) } 
set 'positive'(value : CONDITIONING)  { super.$$link(6, value) } 
set 'negative'(value : CONDITIONING)  { super.$$link(7, value) } 
set 'latent_image'(value : LATENT)  { super.$$link(8, value) } 
set 'denoise'(value : FLOAT)  { super.$$link(9, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'model': MODEL,'seed': SEED,'steps': INT,'cfg': FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform','positive': CONDITIONING,'negative': CONDITIONING,'latent_image': LATENT,'denoise': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['seed'] = opts['seed'];
this['steps'] = opts['steps'];
this['cfg'] = opts['cfg'];
this['sampler_name'] = opts['sampler_name'];
this['scheduler'] = opts['scheduler'];
this['positive'] = opts['positive'];
this['negative'] = opts['negative'];
this['latent_image'] = opts['latent_image'];
this['denoise'] = opts['denoise']
            

        }

        static defaults = {
            'steps':  20,
'cfg':  8,
'denoise':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'KSampler Cycle' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'seed'(value : INT)  { super.$$link(1, value) } 
set 'steps'(value : INT)  { super.$$link(2, value) } 
set 'cfg'(value : FLOAT)  { super.$$link(3, value) } 
set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(4, value) } 
set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform')  { super.$$link(5, value) } 
set 'positive'(value : CONDITIONING)  { super.$$link(6, value) } 
set 'negative'(value : CONDITIONING)  { super.$$link(7, value) } 
set 'latent_image'(value : LATENT)  { super.$$link(8, value) } 
set 'tiled_vae'(value : 'disable'|'enable')  { super.$$link(9, value) } 
set 'latent_upscale'(value : 'disable'|'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp')  { super.$$link(10, value) } 
set 'upscale_factor'(value : FLOAT)  { super.$$link(11, value) } 
set 'upscale_cycles'(value : INT)  { super.$$link(12, value) } 
set 'starting_denoise'(value : FLOAT)  { super.$$link(13, value) } 
set 'cycle_denoise'(value : FLOAT)  { super.$$link(14, value) } 
set 'scale_denoise'(value : 'enable'|'disable')  { super.$$link(15, value) } 
set 'scale_sampling'(value : 'bilinear'|'bicubic'|'nearest'|'lanczos')  { super.$$link(16, value) } 
set 'vae'(value : VAE)  { super.$$link(17, value) } 
set 'secondary_model'(value : MODEL)  { super.$$link(18, value) } 
set 'secondary_start_cycle'(value : INT)  { super.$$link(19, value) } 
set 'upscale_model'(value : UPSCALE_MODEL)  { super.$$link(20, value) } 
set 'processor_model'(value : UPSCALE_MODEL)  { super.$$link(21, value) } 
set 'pos_additive'(value : CONDITIONING)  { super.$$link(22, value) } 
set 'neg_additive'(value : CONDITIONING)  { super.$$link(23, value) } 
set 'pos_add_mode'(value : 'increment'|'decrement')  { super.$$link(24, value) } 
set 'pos_add_strength'(value : FLOAT)  { super.$$link(25, value) } 
set 'pos_add_strength_scaling'(value : 'enable'|'disable')  { super.$$link(26, value) } 
set 'pos_add_strength_cutoff'(value : FLOAT)  { super.$$link(27, value) } 
set 'neg_add_mode'(value : 'increment'|'decrement')  { super.$$link(28, value) } 
set 'neg_add_strength'(value : FLOAT)  { super.$$link(29, value) } 
set 'neg_add_strength_scaling'(value : 'enable'|'disable')  { super.$$link(30, value) } 
set 'neg_add_strength_cutoff'(value : FLOAT)  { super.$$link(31, value) } 
set 'sharpen_strength'(value : FLOAT)  { super.$$link(32, value) } 
set 'sharpen_radius'(value : INT)  { super.$$link(33, value) } 
set 'steps_scaling'(value : 'enable'|'disable')  { super.$$link(34, value) } 
set 'steps_control'(value : 'decrement'|'increment')  { super.$$link(35, value) } 
set 'steps_scaling_value'(value : INT)  { super.$$link(36, value) } 
set 'steps_cutoff'(value : INT)  { super.$$link(37, value) } 
set 'denoise_cutoff'(value : FLOAT)  { super.$$link(38, value) } 

        //Getters
        get 'latent(s)'() : LATENT { return [this, 'latent(s)', 0]  as unknown as LATENT; }

        constructor(opts:{
            'model': MODEL,'seed': INT,'steps': INT,'cfg': FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform','positive': CONDITIONING,'negative': CONDITIONING,'latent_image': LATENT,'tiled_vae': 'disable'|'enable','latent_upscale': 'disable'|'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp','upscale_factor': FLOAT,'upscale_cycles': INT,'starting_denoise': FLOAT,'cycle_denoise': FLOAT,'scale_denoise': 'enable'|'disable','scale_sampling': 'bilinear'|'bicubic'|'nearest'|'lanczos','vae': VAE,'secondary_model'?: MODEL,'secondary_start_cycle'?: INT,'upscale_model'?: UPSCALE_MODEL,'processor_model'?: UPSCALE_MODEL,'pos_additive'?: CONDITIONING,'neg_additive'?: CONDITIONING,'pos_add_mode'?: 'increment'|'decrement','pos_add_strength'?: FLOAT,'pos_add_strength_scaling'?: 'enable'|'disable','pos_add_strength_cutoff'?: FLOAT,'neg_add_mode'?: 'increment'|'decrement','neg_add_strength'?: FLOAT,'neg_add_strength_scaling'?: 'enable'|'disable','neg_add_strength_cutoff'?: FLOAT,'sharpen_strength'?: FLOAT,'sharpen_radius'?: INT,'steps_scaling'?: 'enable'|'disable','steps_control'?: 'decrement'|'increment','steps_scaling_value'?: INT,'steps_cutoff'?: INT,'denoise_cutoff'?: FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['seed'] = opts['seed'];
this['steps'] = opts['steps'];
this['cfg'] = opts['cfg'];
this['sampler_name'] = opts['sampler_name'];
this['scheduler'] = opts['scheduler'];
this['positive'] = opts['positive'];
this['negative'] = opts['negative'];
this['latent_image'] = opts['latent_image'];
this['tiled_vae'] = opts['tiled_vae'];
this['latent_upscale'] = opts['latent_upscale'];
this['upscale_factor'] = opts['upscale_factor'];
this['upscale_cycles'] = opts['upscale_cycles'];
this['starting_denoise'] = opts['starting_denoise'];
this['cycle_denoise'] = opts['cycle_denoise'];
this['scale_denoise'] = opts['scale_denoise'];
this['scale_sampling'] = opts['scale_sampling'];
this['vae'] = opts['vae']
            if(opts['secondary_model']!==undefined) this['secondary_model'] = opts['secondary_model'];
if(opts['secondary_start_cycle']!==undefined) this['secondary_start_cycle'] = opts['secondary_start_cycle'];
if(opts['upscale_model']!==undefined) this['upscale_model'] = opts['upscale_model'];
if(opts['processor_model']!==undefined) this['processor_model'] = opts['processor_model'];
if(opts['pos_additive']!==undefined) this['pos_additive'] = opts['pos_additive'];
if(opts['neg_additive']!==undefined) this['neg_additive'] = opts['neg_additive'];
if(opts['pos_add_mode']!==undefined) this['pos_add_mode'] = opts['pos_add_mode'];
if(opts['pos_add_strength']!==undefined) this['pos_add_strength'] = opts['pos_add_strength'];
if(opts['pos_add_strength_scaling']!==undefined) this['pos_add_strength_scaling'] = opts['pos_add_strength_scaling'];
if(opts['pos_add_strength_cutoff']!==undefined) this['pos_add_strength_cutoff'] = opts['pos_add_strength_cutoff'];
if(opts['neg_add_mode']!==undefined) this['neg_add_mode'] = opts['neg_add_mode'];
if(opts['neg_add_strength']!==undefined) this['neg_add_strength'] = opts['neg_add_strength'];
if(opts['neg_add_strength_scaling']!==undefined) this['neg_add_strength_scaling'] = opts['neg_add_strength_scaling'];
if(opts['neg_add_strength_cutoff']!==undefined) this['neg_add_strength_cutoff'] = opts['neg_add_strength_cutoff'];
if(opts['sharpen_strength']!==undefined) this['sharpen_strength'] = opts['sharpen_strength'];
if(opts['sharpen_radius']!==undefined) this['sharpen_radius'] = opts['sharpen_radius'];
if(opts['steps_scaling']!==undefined) this['steps_scaling'] = opts['steps_scaling'];
if(opts['steps_control']!==undefined) this['steps_control'] = opts['steps_control'];
if(opts['steps_scaling_value']!==undefined) this['steps_scaling_value'] = opts['steps_scaling_value'];
if(opts['steps_cutoff']!==undefined) this['steps_cutoff'] = opts['steps_cutoff'];
if(opts['denoise_cutoff']!==undefined) this['denoise_cutoff'] = opts['denoise_cutoff']

        }

        static defaults = {
            'seed':  0,
'steps':  20,
'cfg':  8,
'upscale_factor':  2,
'upscale_cycles':  2,
'starting_denoise':  1,
'cycle_denoise':  0.5,
'secondary_start_cycle':  2,
'pos_add_strength':  0.25,
'pos_add_strength_cutoff':  2,
'neg_add_strength':  0.25,
'neg_add_strength_cutoff':  2,
'sharpen_strength':  0,
'sharpen_radius':  2,
'steps_scaling_value':  10,
'steps_cutoff':  20,
'denoise_cutoff':  0.25
}
},

    /**
     * TODO Docs based on metadata
     */
    'Latent Batch' : class extends Node{
        //Setters
        set 'latent_a'(value : LATENT)  { super.$$link(0, value) } 
set 'latent_b'(value : LATENT)  { super.$$link(1, value) } 
set 'latent_c'(value : LATENT)  { super.$$link(2, value) } 
set 'latent_d'(value : LATENT)  { super.$$link(3, value) } 

        //Getters
        get 'latent'() : LATENT { return [this, 'latent', 0]  as unknown as LATENT; }

        constructor(opts:{
            'latent_a'?: LATENT,'latent_b'?: LATENT,'latent_c'?: LATENT,'latent_d'?: LATENT
        }){
            super(ctx);

            
            if(opts['latent_a']!==undefined) this['latent_a'] = opts['latent_a'];
if(opts['latent_b']!==undefined) this['latent_b'] = opts['latent_b'];
if(opts['latent_c']!==undefined) this['latent_c'] = opts['latent_c'];
if(opts['latent_d']!==undefined) this['latent_d'] = opts['latent_d']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Latent Noise Injection' : class extends Node{
        //Setters
        set 'samples'(value : LATENT)  { super.$$link(0, value) } 
set 'noise_std'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'samples': LATENT,'noise_std': FLOAT
        }){
            super(ctx);

            this['samples'] = opts['samples'];
this['noise_std'] = opts['noise_std']
            

        }

        static defaults = {
            'noise_std':  0.1
}
},

    /**
     * TODO Docs based on metadata
     */
    'Latent Size to Number' : class extends Node{
        //Setters
        set 'samples'(value : LATENT)  { super.$$link(0, value) } 

        //Getters
        get 'tensor_w_num'() : NUMBER { return [this, 'tensor_w_num', 0]  as unknown as NUMBER; }
get 'tensor_h_num'() : NUMBER { return [this, 'tensor_h_num', 1]  as unknown as NUMBER; }
get 'undefined'() : INT { return [this, 'undefined', 2]  as unknown as INT; }

        constructor(opts:{
            'samples': LATENT
        }){
            super(ctx);

            this['samples'] = opts['samples']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Latent Upscale by Factor (WAS)' : class extends Node{
        //Setters
        set 'samples'(value : LATENT)  { super.$$link(0, value) } 
set 'mode'(value : 'area'|'bicubic'|'bilinear'|'nearest')  { super.$$link(1, value) } 
set 'factor'(value : FLOAT)  { super.$$link(2, value) } 
set 'align'(value : 'true'|'false')  { super.$$link(3, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'samples': LATENT,'mode': 'area'|'bicubic'|'bilinear'|'nearest','factor': FLOAT,'align': 'true'|'false'
        }){
            super(ctx);

            this['samples'] = opts['samples'];
this['mode'] = opts['mode'];
this['factor'] = opts['factor'];
this['align'] = opts['align']
            

        }

        static defaults = {
            'factor':  2
}
},

    /**
     * TODO Docs based on metadata
     */
    'Load Image Batch' : class extends Node{
        //Setters
        set 'mode'(value : 'single_image'|'incremental_image'|'random')  { super.$$link(0, value) } 
set 'index'(value : INT)  { super.$$link(1, value) } 
set 'label'(value : STRING)  { super.$$link(2, value) } 
set 'path'(value : STRING)  { super.$$link(3, value) } 
set 'pattern'(value : STRING)  { super.$$link(4, value) } 
set 'allow_RGBA_output'(value : 'false'|'true')  { super.$$link(5, value) } 
set 'filename_text_extension'(value : 'true'|'false')  { super.$$link(6, value) } 

        //Getters
        get 'image'() : IMAGE { return [this, 'image', 0]  as unknown as IMAGE; }
get 'filename_text'() : STRING { return [this, 'filename_text', 1]  as unknown as STRING; }

        constructor(opts:{
            'mode': 'single_image'|'incremental_image'|'random','index': INT,'label': STRING,'path': STRING,'pattern': STRING,'allow_RGBA_output': 'false'|'true','filename_text_extension'?: 'true'|'false'
        }){
            super(ctx);

            this['mode'] = opts['mode'];
this['index'] = opts['index'];
this['label'] = opts['label'];
this['path'] = opts['path'];
this['pattern'] = opts['pattern'];
this['allow_RGBA_output'] = opts['allow_RGBA_output']
            if(opts['filename_text_extension']!==undefined) this['filename_text_extension'] = opts['filename_text_extension']

        }

        static defaults = {
            'index':  0,
'label':  "Batch 001",
'path':  "",
'pattern':  "*"
}
},

    /**
     * TODO Docs based on metadata
     */
    'Load Text File' : class extends Node{
        //Setters
        set 'file_path'(value : STRING)  { super.$$link(0, value) } 
set 'dictionary_name'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }
get 'DICT'() : DICT { return [this, 'DICT', 1]  as unknown as DICT; }

        constructor(opts:{
            'file_path': STRING,'dictionary_name': STRING
        }){
            super(ctx);

            this['file_path'] = opts['file_path'];
this['dictionary_name'] = opts['dictionary_name']
            

        }

        static defaults = {
            'file_path':  "",
'dictionary_name':  "[filename]"
}
},

    /**
     * TODO Docs based on metadata
     */
    'Load Lora' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'clip'(value : CLIP)  { super.$$link(1, value) } 
set 'lora_name'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(2, value) } 
set 'strength_model'(value : FLOAT)  { super.$$link(3, value) } 
set 'strength_clip'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this, 'CLIP', 1]  as unknown as CLIP; }
get 'NAME_STRING'() : STRING { return [this, 'NAME_STRING', 2]  as unknown as STRING; }

        constructor(opts:{
            'model': MODEL,'clip': CLIP,'lora_name': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','strength_model': FLOAT,'strength_clip': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['clip'] = opts['clip'];
this['lora_name'] = opts['lora_name'];
this['strength_model'] = opts['strength_model'];
this['strength_clip'] = opts['strength_clip']
            

        }

        static defaults = {
            'strength_model':  1,
'strength_clip':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'Lora Input Switch' : class extends Node{
        //Setters
        set 'model_a'(value : MODEL)  { super.$$link(0, value) } 
set 'clip_a'(value : CLIP)  { super.$$link(1, value) } 
set 'model_b'(value : MODEL)  { super.$$link(2, value) } 
set 'clip_b'(value : CLIP)  { super.$$link(3, value) } 
set 'boolean'(value : BOOLEAN)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this, 'CLIP', 1]  as unknown as CLIP; }

        constructor(opts:{
            'model_a': MODEL,'clip_a': CLIP,'model_b': MODEL,'clip_b': CLIP,'boolean': BOOLEAN
        }){
            super(ctx);

            this['model_a'] = opts['model_a'];
this['clip_a'] = opts['clip_a'];
this['model_b'] = opts['model_b'];
this['clip_b'] = opts['clip_b'];
this['boolean'] = opts['boolean']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Masks Add' : class extends Node{
        //Setters
        set 'masks_a'(value : MASK)  { super.$$link(0, value) } 
set 'masks_b'(value : MASK)  { super.$$link(1, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this, 'MASKS', 0]  as unknown as MASK; }

        constructor(opts:{
            'masks_a': MASK,'masks_b': MASK
        }){
            super(ctx);

            this['masks_a'] = opts['masks_a'];
this['masks_b'] = opts['masks_b']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Masks Subtract' : class extends Node{
        //Setters
        set 'masks_a'(value : MASK)  { super.$$link(0, value) } 
set 'masks_b'(value : MASK)  { super.$$link(1, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this, 'MASKS', 0]  as unknown as MASK; }

        constructor(opts:{
            'masks_a': MASK,'masks_b': MASK
        }){
            super(ctx);

            this['masks_a'] = opts['masks_a'];
this['masks_b'] = opts['masks_b']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Mask Arbitrary Region' : class extends Node{
        //Setters
        set 'masks'(value : MASK)  { super.$$link(0, value) } 
set 'size'(value : INT)  { super.$$link(1, value) } 
set 'threshold'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this, 'MASKS', 0]  as unknown as MASK; }

        constructor(opts:{
            'masks': MASK,'size': INT,'threshold': INT
        }){
            super(ctx);

            this['masks'] = opts['masks'];
this['size'] = opts['size'];
this['threshold'] = opts['threshold']
            

        }

        static defaults = {
            'size':  256,
'threshold':  128
}
},

    /**
     * TODO Docs based on metadata
     */
    'Mask Batch to Mask' : class extends Node{
        //Setters
        set 'masks'(value : MASK)  { super.$$link(0, value) } 
set 'batch_number'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'MASK'() : MASK { return [this, 'MASK', 0]  as unknown as MASK; }

        constructor(opts:{
            'masks': MASK,'batch_number': INT
        }){
            super(ctx);

            this['masks'] = opts['masks'];
this['batch_number'] = opts['batch_number']
            

        }

        static defaults = {
            'batch_number':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Mask Batch' : class extends Node{
        //Setters
        set 'masks_a'(value : MASK)  { super.$$link(0, value) } 
set 'masks_b'(value : MASK)  { super.$$link(1, value) } 
set 'masks_c'(value : MASK)  { super.$$link(2, value) } 
set 'masks_d'(value : MASK)  { super.$$link(3, value) } 

        //Getters
        get 'masks'() : MASK { return [this, 'masks', 0]  as unknown as MASK; }

        constructor(opts:{
            'masks_a'?: MASK,'masks_b'?: MASK,'masks_c'?: MASK,'masks_d'?: MASK
        }){
            super(ctx);

            
            if(opts['masks_a']!==undefined) this['masks_a'] = opts['masks_a'];
if(opts['masks_b']!==undefined) this['masks_b'] = opts['masks_b'];
if(opts['masks_c']!==undefined) this['masks_c'] = opts['masks_c'];
if(opts['masks_d']!==undefined) this['masks_d'] = opts['masks_d']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Mask Ceiling Region' : class extends Node{
        //Setters
        set 'masks'(value : MASK)  { super.$$link(0, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this, 'MASKS', 0]  as unknown as MASK; }

        constructor(opts:{
            'masks': MASK
        }){
            super(ctx);

            this['masks'] = opts['masks']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Mask Crop Dominant Region' : class extends Node{
        //Setters
        set 'masks'(value : MASK)  { super.$$link(0, value) } 
set 'padding'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this, 'MASKS', 0]  as unknown as MASK; }

        constructor(opts:{
            'masks': MASK,'padding': INT
        }){
            super(ctx);

            this['masks'] = opts['masks'];
this['padding'] = opts['padding']
            

        }

        static defaults = {
            'padding':  24
}
},

    /**
     * TODO Docs based on metadata
     */
    'Mask Crop Minority Region' : class extends Node{
        //Setters
        set 'masks'(value : MASK)  { super.$$link(0, value) } 
set 'padding'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this, 'MASKS', 0]  as unknown as MASK; }

        constructor(opts:{
            'masks': MASK,'padding': INT
        }){
            super(ctx);

            this['masks'] = opts['masks'];
this['padding'] = opts['padding']
            

        }

        static defaults = {
            'padding':  24
}
},

    /**
     * TODO Docs based on metadata
     */
    'Mask Crop Region' : class extends Node{
        //Setters
        set 'mask'(value : MASK)  { super.$$link(0, value) } 
set 'padding'(value : INT)  { super.$$link(1, value) } 
set 'region_type'(value : 'dominant'|'minority')  { super.$$link(2, value) } 

        //Getters
        get 'cropped_mask'() : MASK { return [this, 'cropped_mask', 0]  as unknown as MASK; }
get 'crop_data'() : CROP_DATA { return [this, 'crop_data', 1]  as unknown as CROP_DATA; }
get 'top_int'() : INT { return [this, 'top_int', 2]  as unknown as INT; }
get 'left_int'() : INT { return [this, 'left_int', 3]  as unknown as INT; }
get 'right_int'() : INT { return [this, 'right_int', 4]  as unknown as INT; }
get 'bottom_int'() : INT { return [this, 'bottom_int', 5]  as unknown as INT; }
get 'width_int'() : INT { return [this, 'width_int', 6]  as unknown as INT; }
get 'height_int'() : INT { return [this, 'height_int', 7]  as unknown as INT; }

        constructor(opts:{
            'mask': MASK,'padding': INT,'region_type': 'dominant'|'minority'
        }){
            super(ctx);

            this['mask'] = opts['mask'];
this['padding'] = opts['padding'];
this['region_type'] = opts['region_type']
            

        }

        static defaults = {
            'padding':  24
}
},

    /**
     * TODO Docs based on metadata
     */
    'Mask Paste Region' : class extends Node{
        //Setters
        set 'mask'(value : MASK)  { super.$$link(0, value) } 
set 'crop_mask'(value : MASK)  { super.$$link(1, value) } 
set 'crop_data'(value : CROP_DATA)  { super.$$link(2, value) } 
set 'crop_blending'(value : FLOAT)  { super.$$link(3, value) } 
set 'crop_sharpening'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'MASK'() : MASK { return [this, 'MASK', 0]  as unknown as MASK; }

        constructor(opts:{
            'mask': MASK,'crop_mask': MASK,'crop_data': CROP_DATA,'crop_blending': FLOAT,'crop_sharpening': INT
        }){
            super(ctx);

            this['mask'] = opts['mask'];
this['crop_mask'] = opts['crop_mask'];
this['crop_data'] = opts['crop_data'];
this['crop_blending'] = opts['crop_blending'];
this['crop_sharpening'] = opts['crop_sharpening']
            

        }

        static defaults = {
            'crop_blending':  0.25,
'crop_sharpening':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Mask Dilate Region' : class extends Node{
        //Setters
        set 'masks'(value : MASK)  { super.$$link(0, value) } 
set 'iterations'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this, 'MASKS', 0]  as unknown as MASK; }

        constructor(opts:{
            'masks': MASK,'iterations': INT
        }){
            super(ctx);

            this['masks'] = opts['masks'];
this['iterations'] = opts['iterations']
            

        }

        static defaults = {
            'iterations':  5
}
},

    /**
     * TODO Docs based on metadata
     */
    'Mask Dominant Region' : class extends Node{
        //Setters
        set 'masks'(value : MASK)  { super.$$link(0, value) } 
set 'threshold'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this, 'MASKS', 0]  as unknown as MASK; }

        constructor(opts:{
            'masks': MASK,'threshold': INT
        }){
            super(ctx);

            this['masks'] = opts['masks'];
this['threshold'] = opts['threshold']
            

        }

        static defaults = {
            'threshold':  128
}
},

    /**
     * TODO Docs based on metadata
     */
    'Mask Erode Region' : class extends Node{
        //Setters
        set 'masks'(value : MASK)  { super.$$link(0, value) } 
set 'iterations'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this, 'MASKS', 0]  as unknown as MASK; }

        constructor(opts:{
            'masks': MASK,'iterations': INT
        }){
            super(ctx);

            this['masks'] = opts['masks'];
this['iterations'] = opts['iterations']
            

        }

        static defaults = {
            'iterations':  5
}
},

    /**
     * TODO Docs based on metadata
     */
    'Mask Fill Holes' : class extends Node{
        //Setters
        set 'masks'(value : MASK)  { super.$$link(0, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this, 'MASKS', 0]  as unknown as MASK; }

        constructor(opts:{
            'masks': MASK
        }){
            super(ctx);

            this['masks'] = opts['masks']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Mask Floor Region' : class extends Node{
        //Setters
        set 'masks'(value : MASK)  { super.$$link(0, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this, 'MASKS', 0]  as unknown as MASK; }

        constructor(opts:{
            'masks': MASK
        }){
            super(ctx);

            this['masks'] = opts['masks']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Mask Gaussian Region' : class extends Node{
        //Setters
        set 'masks'(value : MASK)  { super.$$link(0, value) } 
set 'radius'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this, 'MASKS', 0]  as unknown as MASK; }

        constructor(opts:{
            'masks': MASK,'radius': FLOAT
        }){
            super(ctx);

            this['masks'] = opts['masks'];
this['radius'] = opts['radius']
            

        }

        static defaults = {
            'radius':  5
}
},

    /**
     * TODO Docs based on metadata
     */
    'Mask Invert' : class extends Node{
        //Setters
        set 'masks'(value : MASK)  { super.$$link(0, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this, 'MASKS', 0]  as unknown as MASK; }

        constructor(opts:{
            'masks': MASK
        }){
            super(ctx);

            this['masks'] = opts['masks']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Mask Minority Region' : class extends Node{
        //Setters
        set 'masks'(value : MASK)  { super.$$link(0, value) } 
set 'threshold'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this, 'MASKS', 0]  as unknown as MASK; }

        constructor(opts:{
            'masks': MASK,'threshold': INT
        }){
            super(ctx);

            this['masks'] = opts['masks'];
this['threshold'] = opts['threshold']
            

        }

        static defaults = {
            'threshold':  128
}
},

    /**
     * TODO Docs based on metadata
     */
    'Mask Smooth Region' : class extends Node{
        //Setters
        set 'masks'(value : MASK)  { super.$$link(0, value) } 
set 'sigma'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this, 'MASKS', 0]  as unknown as MASK; }

        constructor(opts:{
            'masks': MASK,'sigma': FLOAT
        }){
            super(ctx);

            this['masks'] = opts['masks'];
this['sigma'] = opts['sigma']
            

        }

        static defaults = {
            'sigma':  5
}
},

    /**
     * TODO Docs based on metadata
     */
    'Mask Threshold Region' : class extends Node{
        //Setters
        set 'masks'(value : MASK)  { super.$$link(0, value) } 
set 'black_threshold'(value : INT)  { super.$$link(1, value) } 
set 'white_threshold'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'MASKS'() : MASK { return [this, 'MASKS', 0]  as unknown as MASK; }

        constructor(opts:{
            'masks': MASK,'black_threshold': INT,'white_threshold': INT
        }){
            super(ctx);

            this['masks'] = opts['masks'];
this['black_threshold'] = opts['black_threshold'];
this['white_threshold'] = opts['white_threshold']
            

        }

        static defaults = {
            'black_threshold':  75,
'white_threshold':  175
}
},

    /**
     * TODO Docs based on metadata
     */
    'Masks Combine Regions' : class extends Node{
        //Setters
        set 'mask_a'(value : MASK)  { super.$$link(0, value) } 
set 'mask_b'(value : MASK)  { super.$$link(1, value) } 
set 'mask_c'(value : MASK)  { super.$$link(2, value) } 
set 'mask_d'(value : MASK)  { super.$$link(3, value) } 
set 'mask_e'(value : MASK)  { super.$$link(4, value) } 
set 'mask_f'(value : MASK)  { super.$$link(5, value) } 

        //Getters
        get 'MASK'() : MASK { return [this, 'MASK', 0]  as unknown as MASK; }

        constructor(opts:{
            'mask_a': MASK,'mask_b': MASK,'mask_c'?: MASK,'mask_d'?: MASK,'mask_e'?: MASK,'mask_f'?: MASK
        }){
            super(ctx);

            this['mask_a'] = opts['mask_a'];
this['mask_b'] = opts['mask_b']
            if(opts['mask_c']!==undefined) this['mask_c'] = opts['mask_c'];
if(opts['mask_d']!==undefined) this['mask_d'] = opts['mask_d'];
if(opts['mask_e']!==undefined) this['mask_e'] = opts['mask_e'];
if(opts['mask_f']!==undefined) this['mask_f'] = opts['mask_f']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Masks Combine Batch' : class extends Node{
        //Setters
        set 'masks'(value : MASK)  { super.$$link(0, value) } 

        //Getters
        get 'MASK'() : MASK { return [this, 'MASK', 0]  as unknown as MASK; }

        constructor(opts:{
            'masks': MASK
        }){
            super(ctx);

            this['masks'] = opts['masks']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'MiDaS Model Loader' : class extends Node{
        //Setters
        set 'midas_model'(value : 'DPT_Large'|'DPT_Hybrid')  { super.$$link(0, value) } 

        //Getters
        get 'midas_model'() : MIDAS_MODEL { return [this, 'midas_model', 0]  as unknown as MIDAS_MODEL; }

        constructor(opts:{
            'midas_model': 'DPT_Large'|'DPT_Hybrid'
        }){
            super(ctx);

            this['midas_model'] = opts['midas_model']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'MiDaS Depth Approximation' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'use_cpu'(value : 'false'|'true')  { super.$$link(1, value) } 
set 'midas_type'(value : 'DPT_Large'|'DPT_Hybrid')  { super.$$link(2, value) } 
set 'invert_depth'(value : 'false'|'true')  { super.$$link(3, value) } 
set 'midas_model'(value : MIDAS_MODEL)  { super.$$link(4, value) } 

        //Getters
        get 'images'() : IMAGE { return [this, 'images', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'use_cpu': 'false'|'true','midas_type': 'DPT_Large'|'DPT_Hybrid','invert_depth': 'false'|'true','midas_model'?: MIDAS_MODEL
        }){
            super(ctx);

            this['image'] = opts['image'];
this['use_cpu'] = opts['use_cpu'];
this['midas_type'] = opts['midas_type'];
this['invert_depth'] = opts['invert_depth']
            if(opts['midas_model']!==undefined) this['midas_model'] = opts['midas_model']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'MiDaS Mask Image' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'use_cpu'(value : 'false'|'true')  { super.$$link(1, value) } 
set 'midas_model'(value : 'DPT_Large'|'DPT_Hybrid'|'DPT_Small')  { super.$$link(2, value) } 
set 'remove'(value : 'background'|'foregroud')  { super.$$link(3, value) } 
set 'threshold'(value : 'false'|'true')  { super.$$link(4, value) } 
set 'threshold_low'(value : FLOAT)  { super.$$link(5, value) } 
set 'threshold_mid'(value : FLOAT)  { super.$$link(6, value) } 
set 'threshold_high'(value : FLOAT)  { super.$$link(7, value) } 
set 'smoothing'(value : FLOAT)  { super.$$link(8, value) } 
set 'background_red'(value : INT)  { super.$$link(9, value) } 
set 'background_green'(value : INT)  { super.$$link(10, value) } 
set 'background_blue'(value : INT)  { super.$$link(11, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'use_cpu': 'false'|'true','midas_model': 'DPT_Large'|'DPT_Hybrid'|'DPT_Small','remove': 'background'|'foregroud','threshold': 'false'|'true','threshold_low': FLOAT,'threshold_mid': FLOAT,'threshold_high': FLOAT,'smoothing': FLOAT,'background_red': INT,'background_green': INT,'background_blue': INT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['use_cpu'] = opts['use_cpu'];
this['midas_model'] = opts['midas_model'];
this['remove'] = opts['remove'];
this['threshold'] = opts['threshold'];
this['threshold_low'] = opts['threshold_low'];
this['threshold_mid'] = opts['threshold_mid'];
this['threshold_high'] = opts['threshold_high'];
this['smoothing'] = opts['smoothing'];
this['background_red'] = opts['background_red'];
this['background_green'] = opts['background_green'];
this['background_blue'] = opts['background_blue']
            

        }

        static defaults = {
            'threshold_low':  10,
'threshold_mid':  200,
'threshold_high':  210,
'smoothing':  0.25,
'background_red':  0,
'background_green':  0,
'background_blue':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Model Input Switch' : class extends Node{
        //Setters
        set 'model_a'(value : MODEL)  { super.$$link(0, value) } 
set 'model_b'(value : MODEL)  { super.$$link(1, value) } 
set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model_a': MODEL,'model_b': MODEL,'boolean': BOOLEAN
        }){
            super(ctx);

            this['model_a'] = opts['model_a'];
this['model_b'] = opts['model_b'];
this['boolean'] = opts['boolean']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Number Counter' : class extends Node{
        //Setters
        set 'number_type'(value : 'integer'|'float')  { super.$$link(0, value) } 
set 'mode'(value : 'increment'|'decrement'|'increment_to_stop'|'decrement_to_stop')  { super.$$link(1, value) } 
set 'start'(value : FLOAT)  { super.$$link(2, value) } 
set 'stop'(value : FLOAT)  { super.$$link(3, value) } 
set 'step'(value : FLOAT)  { super.$$link(4, value) } 
set 'reset_bool'(value : NUMBER)  { super.$$link(5, value) } 

        //Getters
        get 'number'() : NUMBER { return [this, 'number', 0]  as unknown as NUMBER; }
get 'float'() : FLOAT { return [this, 'float', 1]  as unknown as FLOAT; }
get 'int'() : INT { return [this, 'int', 2]  as unknown as INT; }

        constructor(opts:{
            'number_type': 'integer'|'float','mode': 'increment'|'decrement'|'increment_to_stop'|'decrement_to_stop','start': FLOAT,'stop': FLOAT,'step': FLOAT,'reset_bool'?: NUMBER
        }){
            super(ctx);

            this['number_type'] = opts['number_type'];
this['mode'] = opts['mode'];
this['start'] = opts['start'];
this['stop'] = opts['stop'];
this['step'] = opts['step']
            if(opts['reset_bool']!==undefined) this['reset_bool'] = opts['reset_bool']

        }

        static defaults = {
            'start':  0,
'stop':  0,
'step':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'Number Operation' : class extends Node{
        //Setters
        set 'number_a'(value : NUMBER)  { super.$$link(0, value) } 
set 'number_b'(value : NUMBER)  { super.$$link(1, value) } 
set 'operation'(value : 'addition'|'subtraction'|'division'|'floor division'|'multiplication'|'exponentiation'|'modulus'|'greater-than'|'greater-than or equals'|'less-than'|'less-than or equals'|'equals'|'does not equal')  { super.$$link(2, value) } 

        //Getters
        get 'NUMBER'() : NUMBER { return [this, 'NUMBER', 0]  as unknown as NUMBER; }
get 'FLOAT'() : FLOAT { return [this, 'FLOAT', 1]  as unknown as FLOAT; }
get 'INT'() : INT { return [this, 'INT', 2]  as unknown as INT; }

        constructor(opts:{
            'number_a': NUMBER,'number_b': NUMBER,'operation': 'addition'|'subtraction'|'division'|'floor division'|'multiplication'|'exponentiation'|'modulus'|'greater-than'|'greater-than or equals'|'less-than'|'less-than or equals'|'equals'|'does not equal'
        }){
            super(ctx);

            this['number_a'] = opts['number_a'];
this['number_b'] = opts['number_b'];
this['operation'] = opts['operation']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Number to Float' : class extends Node{
        //Setters
        set 'number'(value : NUMBER)  { super.$$link(0, value) } 

        //Getters
        get 'FLOAT'() : FLOAT { return [this, 'FLOAT', 0]  as unknown as FLOAT; }

        constructor(opts:{
            'number': NUMBER
        }){
            super(ctx);

            this['number'] = opts['number']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Number Input Switch' : class extends Node{
        //Setters
        set 'number_a'(value : NUMBER)  { super.$$link(0, value) } 
set 'number_b'(value : NUMBER)  { super.$$link(1, value) } 
set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'NUMBER'() : NUMBER { return [this, 'NUMBER', 0]  as unknown as NUMBER; }
get 'FLOAT'() : FLOAT { return [this, 'FLOAT', 1]  as unknown as FLOAT; }
get 'INT'() : INT { return [this, 'INT', 2]  as unknown as INT; }

        constructor(opts:{
            'number_a': NUMBER,'number_b': NUMBER,'boolean': BOOLEAN
        }){
            super(ctx);

            this['number_a'] = opts['number_a'];
this['number_b'] = opts['number_b'];
this['boolean'] = opts['boolean']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Number Input Condition' : class extends Node{
        //Setters
        set 'number_a'(value : NUMBER)  { super.$$link(0, value) } 
set 'number_b'(value : NUMBER)  { super.$$link(1, value) } 
set 'return_boolean'(value : 'false'|'true')  { super.$$link(2, value) } 
set 'comparison'(value : 'and'|'or'|'greater-than'|'greater-than or equals'|'less-than'|'less-than or equals'|'equals'|'does not equal'|'divisible by'|'if A odd'|'if A even'|'if A prime'|'factor of')  { super.$$link(3, value) } 

        //Getters
        get 'NUMBER'() : NUMBER { return [this, 'NUMBER', 0]  as unknown as NUMBER; }
get 'FLOAT'() : FLOAT { return [this, 'FLOAT', 1]  as unknown as FLOAT; }
get 'INT'() : INT { return [this, 'INT', 2]  as unknown as INT; }

        constructor(opts:{
            'number_a': NUMBER,'number_b': NUMBER,'return_boolean': 'false'|'true','comparison': 'and'|'or'|'greater-than'|'greater-than or equals'|'less-than'|'less-than or equals'|'equals'|'does not equal'|'divisible by'|'if A odd'|'if A even'|'if A prime'|'factor of'
        }){
            super(ctx);

            this['number_a'] = opts['number_a'];
this['number_b'] = opts['number_b'];
this['return_boolean'] = opts['return_boolean'];
this['comparison'] = opts['comparison']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Number Multiple Of' : class extends Node{
        //Setters
        set 'number'(value : NUMBER)  { super.$$link(0, value) } 
set 'multiple'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'NUMBER'() : NUMBER { return [this, 'NUMBER', 0]  as unknown as NUMBER; }
get 'FLOAT'() : FLOAT { return [this, 'FLOAT', 1]  as unknown as FLOAT; }
get 'INT'() : INT { return [this, 'INT', 2]  as unknown as INT; }

        constructor(opts:{
            'number': NUMBER,'multiple': INT
        }){
            super(ctx);

            this['number'] = opts['number'];
this['multiple'] = opts['multiple']
            

        }

        static defaults = {
            'multiple':  8
}
},

    /**
     * TODO Docs based on metadata
     */
    'Number PI' : class extends Node{
        //Setters
        

        //Getters
        get 'NUMBER'() : NUMBER { return [this, 'NUMBER', 0]  as unknown as NUMBER; }
get 'FLOAT'() : FLOAT { return [this, 'FLOAT', 1]  as unknown as FLOAT; }

        constructor(opts:{
            
        }){
            super(ctx);

            
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Number to Int' : class extends Node{
        //Setters
        set 'number'(value : NUMBER)  { super.$$link(0, value) } 

        //Getters
        get 'INT'() : INT { return [this, 'INT', 0]  as unknown as INT; }

        constructor(opts:{
            'number': NUMBER
        }){
            super(ctx);

            this['number'] = opts['number']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Number to Seed' : class extends Node{
        //Setters
        set 'number'(value : NUMBER)  { super.$$link(0, value) } 

        //Getters
        get 'SEED'() : SEED { return [this, 'SEED', 0]  as unknown as SEED; }

        constructor(opts:{
            'number': NUMBER
        }){
            super(ctx);

            this['number'] = opts['number']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Number to String' : class extends Node{
        //Setters
        set 'number'(value : NUMBER)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'number': NUMBER
        }){
            super(ctx);

            this['number'] = opts['number']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Number to Text' : class extends Node{
        //Setters
        set 'number'(value : NUMBER)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'number': NUMBER
        }){
            super(ctx);

            this['number'] = opts['number']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Boolean To Text' : class extends Node{
        //Setters
        set 'boolean'(value : BOOLEAN)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'boolean': BOOLEAN
        }){
            super(ctx);

            this['boolean'] = opts['boolean']
            

        }

        static defaults = {
            'boolean':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'Prompt Styles Selector' : class extends Node{
        //Setters
        set 'style'(value : 'None')  { super.$$link(0, value) } 

        //Getters
        get 'positive_string'() : STRING { return [this, 'positive_string', 0]  as unknown as STRING; }
get 'negative_string'() : STRING { return [this, 'negative_string', 1]  as unknown as STRING; }

        constructor(opts:{
            'style': 'None'
        }){
            super(ctx);

            this['style'] = opts['style']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Prompt Multiple Styles Selector' : class extends Node{
        //Setters
        set 'style1'(value : 'None')  { super.$$link(0, value) } 
set 'style2'(value : 'None')  { super.$$link(1, value) } 
set 'style3'(value : 'None')  { super.$$link(2, value) } 
set 'style4'(value : 'None')  { super.$$link(3, value) } 

        //Getters
        get 'positive_string'() : STRING { return [this, 'positive_string', 0]  as unknown as STRING; }
get 'negative_string'() : STRING { return [this, 'negative_string', 1]  as unknown as STRING; }

        constructor(opts:{
            'style1': 'None','style2': 'None','style3': 'None','style4': 'None'
        }){
            super(ctx);

            this['style1'] = opts['style1'];
this['style2'] = opts['style2'];
this['style3'] = opts['style3'];
this['style4'] = opts['style4']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Random Number' : class extends Node{
        //Setters
        set 'number_type'(value : 'integer'|'float'|'bool')  { super.$$link(0, value) } 
set 'minimum'(value : FLOAT)  { super.$$link(1, value) } 
set 'maximum'(value : FLOAT)  { super.$$link(2, value) } 
set 'seed'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'NUMBER'() : NUMBER { return [this, 'NUMBER', 0]  as unknown as NUMBER; }
get 'FLOAT'() : FLOAT { return [this, 'FLOAT', 1]  as unknown as FLOAT; }
get 'INT'() : INT { return [this, 'INT', 2]  as unknown as INT; }

        constructor(opts:{
            'number_type': 'integer'|'float'|'bool','minimum': FLOAT,'maximum': FLOAT,'seed': INT
        }){
            super(ctx);

            this['number_type'] = opts['number_type'];
this['minimum'] = opts['minimum'];
this['maximum'] = opts['maximum'];
this['seed'] = opts['seed']
            

        }

        static defaults = {
            'minimum':  0,
'maximum':  0,
'seed':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Save Text File' : class extends Node{
        //Setters
        set 'text'(value : STRING)  { super.$$link(0, value) } 
set 'path'(value : STRING)  { super.$$link(1, value) } 
set 'filename_prefix'(value : STRING)  { super.$$link(2, value) } 
set 'filename_delimiter'(value : STRING)  { super.$$link(3, value) } 
set 'filename_number_padding'(value : INT)  { super.$$link(4, value) } 
set 'file_extension'(value : STRING)  { super.$$link(5, value) } 
set 'encoding'(value : STRING)  { super.$$link(6, value) } 

        //Getters
        

        constructor(opts:{
            'text': STRING,'path': STRING,'filename_prefix': STRING,'filename_delimiter': STRING,'filename_number_padding': INT,'file_extension'?: STRING,'encoding'?: STRING
        }){
            super(ctx);

            this['text'] = opts['text'];
this['path'] = opts['path'];
this['filename_prefix'] = opts['filename_prefix'];
this['filename_delimiter'] = opts['filename_delimiter'];
this['filename_number_padding'] = opts['filename_number_padding']
            if(opts['file_extension']!==undefined) this['file_extension'] = opts['file_extension'];
if(opts['encoding']!==undefined) this['encoding'] = opts['encoding']

        }

        static defaults = {
            'path':  "./ComfyUI/output/[time(%Y-%m-%d)]",
'filename_prefix':  "ComfyUI",
'filename_delimiter':  "_",
'filename_number_padding':  4,
'file_extension':  ".txt",
'encoding':  "utf-8"
}
},

    /**
     * TODO Docs based on metadata
     */
    'Seed' : class extends Node{
        //Setters
        set 'seed'(value : INT)  { super.$$link(0, value) } 

        //Getters
        get 'seed'() : SEED { return [this, 'seed', 0]  as unknown as SEED; }
get 'number'() : NUMBER { return [this, 'number', 1]  as unknown as NUMBER; }
get 'float'() : FLOAT { return [this, 'float', 2]  as unknown as FLOAT; }
get 'int'() : INT { return [this, 'int', 3]  as unknown as INT; }

        constructor(opts:{
            'seed': INT
        }){
            super(ctx);

            this['seed'] = opts['seed']
            

        }

        static defaults = {
            'seed':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Tensor Batch to Image' : class extends Node{
        //Setters
        set 'images_batch'(value : IMAGE)  { super.$$link(0, value) } 
set 'batch_image_number'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'images_batch': IMAGE,'batch_image_number': INT
        }){
            super(ctx);

            this['images_batch'] = opts['images_batch'];
this['batch_image_number'] = opts['batch_image_number']
            

        }

        static defaults = {
            'batch_image_number':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'BLIP Analyze Image' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'mode'(value : 'caption'|'interrogate')  { super.$$link(1, value) } 
set 'question'(value : STRING)  { super.$$link(2, value) } 
set 'blip_model'(value : BLIP_MODEL)  { super.$$link(3, value) } 
set 'min_length'(value : INT)  { super.$$link(4, value) } 
set 'max_length'(value : INT)  { super.$$link(5, value) } 
set 'num_beams'(value : INT)  { super.$$link(6, value) } 
set 'no_repeat_ngram_size'(value : INT)  { super.$$link(7, value) } 
set 'early_stopping'(value : BOOLEAN)  { super.$$link(8, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'images': IMAGE,'mode': 'caption'|'interrogate','question': STRING,'blip_model': BLIP_MODEL,'min_length'?: INT,'max_length'?: INT,'num_beams'?: INT,'no_repeat_ngram_size'?: INT,'early_stopping'?: BOOLEAN
        }){
            super(ctx);

            this['images'] = opts['images'];
this['mode'] = opts['mode'];
this['question'] = opts['question'];
this['blip_model'] = opts['blip_model']
            if(opts['min_length']!==undefined) this['min_length'] = opts['min_length'];
if(opts['max_length']!==undefined) this['max_length'] = opts['max_length'];
if(opts['num_beams']!==undefined) this['num_beams'] = opts['num_beams'];
if(opts['no_repeat_ngram_size']!==undefined) this['no_repeat_ngram_size'] = opts['no_repeat_ngram_size'];
if(opts['early_stopping']!==undefined) this['early_stopping'] = opts['early_stopping']

        }

        static defaults = {
            'question':  "What does the background consist of?",
'min_length':  24,
'max_length':  64,
'num_beams':  5,
'no_repeat_ngram_size':  3,
'early_stopping':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'SAM Model Loader' : class extends Node{
        //Setters
        set 'model_size'(value : 'ViT-H'|'ViT-L'|'ViT-B')  { super.$$link(0, value) } 

        //Getters
        get 'SAM_MODEL'() : SAM_MODEL { return [this, 'SAM_MODEL', 0]  as unknown as SAM_MODEL; }

        constructor(opts:{
            'model_size': 'ViT-H'|'ViT-L'|'ViT-B'
        }){
            super(ctx);

            this['model_size'] = opts['model_size']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'SAM Parameters' : class extends Node{
        //Setters
        set 'points'(value : STRING)  { super.$$link(0, value) } 
set 'labels'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'SAM_PARAMETERS'() : SAM_PARAMETERS { return [this, 'SAM_PARAMETERS', 0]  as unknown as SAM_PARAMETERS; }

        constructor(opts:{
            'points': STRING,'labels': STRING
        }){
            super(ctx);

            this['points'] = opts['points'];
this['labels'] = opts['labels']
            

        }

        static defaults = {
            'points':  "[128, 128]; [0, 0]",
'labels':  "[1, 0]"
}
},

    /**
     * TODO Docs based on metadata
     */
    'SAM Parameters Combine' : class extends Node{
        //Setters
        set 'sam_parameters_a'(value : SAM_PARAMETERS)  { super.$$link(0, value) } 
set 'sam_parameters_b'(value : SAM_PARAMETERS)  { super.$$link(1, value) } 

        //Getters
        get 'SAM_PARAMETERS'() : SAM_PARAMETERS { return [this, 'SAM_PARAMETERS', 0]  as unknown as SAM_PARAMETERS; }

        constructor(opts:{
            'sam_parameters_a': SAM_PARAMETERS,'sam_parameters_b': SAM_PARAMETERS
        }){
            super(ctx);

            this['sam_parameters_a'] = opts['sam_parameters_a'];
this['sam_parameters_b'] = opts['sam_parameters_b']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'SAM Image Mask' : class extends Node{
        //Setters
        set 'sam_model'(value : SAM_MODEL)  { super.$$link(0, value) } 
set 'sam_parameters'(value : SAM_PARAMETERS)  { super.$$link(1, value) } 
set 'image'(value : IMAGE)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }
get 'MASK'() : MASK { return [this, 'MASK', 1]  as unknown as MASK; }

        constructor(opts:{
            'sam_model': SAM_MODEL,'sam_parameters': SAM_PARAMETERS,'image': IMAGE
        }){
            super(ctx);

            this['sam_model'] = opts['sam_model'];
this['sam_parameters'] = opts['sam_parameters'];
this['image'] = opts['image']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Samples Passthrough (Stat System)' : class extends Node{
        //Setters
        set 'samples'(value : LATENT)  { super.$$link(0, value) } 

        //Getters
        get 'samples'() : LATENT { return [this, 'samples', 0]  as unknown as LATENT; }

        constructor(opts:{
            'samples': LATENT
        }){
            super(ctx);

            this['samples'] = opts['samples']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'String to Text' : class extends Node{
        //Setters
        set 'string'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'string': STRING
        }){
            super(ctx);

            this['string'] = opts['string']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Bounds' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE_BOUNDS'() : IMAGE_BOUNDS { return [this, 'IMAGE_BOUNDS', 0]  as unknown as IMAGE_BOUNDS; }

        constructor(opts:{
            'image': IMAGE
        }){
            super(ctx);

            this['image'] = opts['image']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Inset Image Bounds' : class extends Node{
        //Setters
        set 'image_bounds'(value : IMAGE_BOUNDS)  { super.$$link(0, value) } 
set 'inset_left'(value : INT)  { super.$$link(1, value) } 
set 'inset_right'(value : INT)  { super.$$link(2, value) } 
set 'inset_top'(value : INT)  { super.$$link(3, value) } 
set 'inset_bottom'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE_BOUNDS'() : IMAGE_BOUNDS { return [this, 'IMAGE_BOUNDS', 0]  as unknown as IMAGE_BOUNDS; }

        constructor(opts:{
            'image_bounds': IMAGE_BOUNDS,'inset_left': INT,'inset_right': INT,'inset_top': INT,'inset_bottom': INT
        }){
            super(ctx);

            this['image_bounds'] = opts['image_bounds'];
this['inset_left'] = opts['inset_left'];
this['inset_right'] = opts['inset_right'];
this['inset_top'] = opts['inset_top'];
this['inset_bottom'] = opts['inset_bottom']
            

        }

        static defaults = {
            'inset_left':  64,
'inset_right':  64,
'inset_top':  64,
'inset_bottom':  64
}
},

    /**
     * TODO Docs based on metadata
     */
    'Bounded Image Blend' : class extends Node{
        //Setters
        set 'target'(value : IMAGE)  { super.$$link(0, value) } 
set 'target_bounds'(value : IMAGE_BOUNDS)  { super.$$link(1, value) } 
set 'source'(value : IMAGE)  { super.$$link(2, value) } 
set 'blend_factor'(value : FLOAT)  { super.$$link(3, value) } 
set 'feathering'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'target': IMAGE,'target_bounds': IMAGE_BOUNDS,'source': IMAGE,'blend_factor': FLOAT,'feathering': INT
        }){
            super(ctx);

            this['target'] = opts['target'];
this['target_bounds'] = opts['target_bounds'];
this['source'] = opts['source'];
this['blend_factor'] = opts['blend_factor'];
this['feathering'] = opts['feathering']
            

        }

        static defaults = {
            'blend_factor':  1,
'feathering':  16
}
},

    /**
     * TODO Docs based on metadata
     */
    'Bounded Image Blend with Mask' : class extends Node{
        //Setters
        set 'target'(value : IMAGE)  { super.$$link(0, value) } 
set 'target_mask'(value : MASK)  { super.$$link(1, value) } 
set 'target_bounds'(value : IMAGE_BOUNDS)  { super.$$link(2, value) } 
set 'source'(value : IMAGE)  { super.$$link(3, value) } 
set 'blend_factor'(value : FLOAT)  { super.$$link(4, value) } 
set 'feathering'(value : INT)  { super.$$link(5, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'target': IMAGE,'target_mask': MASK,'target_bounds': IMAGE_BOUNDS,'source': IMAGE,'blend_factor': FLOAT,'feathering': INT
        }){
            super(ctx);

            this['target'] = opts['target'];
this['target_mask'] = opts['target_mask'];
this['target_bounds'] = opts['target_bounds'];
this['source'] = opts['source'];
this['blend_factor'] = opts['blend_factor'];
this['feathering'] = opts['feathering']
            

        }

        static defaults = {
            'blend_factor':  1,
'feathering':  16
}
},

    /**
     * TODO Docs based on metadata
     */
    'Bounded Image Crop' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'image_bounds'(value : IMAGE_BOUNDS)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'image_bounds': IMAGE_BOUNDS
        }){
            super(ctx);

            this['image'] = opts['image'];
this['image_bounds'] = opts['image_bounds']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Bounded Image Crop with Mask' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'mask'(value : MASK)  { super.$$link(1, value) } 
set 'padding_left'(value : INT)  { super.$$link(2, value) } 
set 'padding_right'(value : INT)  { super.$$link(3, value) } 
set 'padding_top'(value : INT)  { super.$$link(4, value) } 
set 'padding_bottom'(value : INT)  { super.$$link(5, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }
get 'IMAGE_BOUNDS'() : IMAGE_BOUNDS { return [this, 'IMAGE_BOUNDS', 1]  as unknown as IMAGE_BOUNDS; }

        constructor(opts:{
            'image': IMAGE,'mask': MASK,'padding_left': INT,'padding_right': INT,'padding_top': INT,'padding_bottom': INT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['mask'] = opts['mask'];
this['padding_left'] = opts['padding_left'];
this['padding_right'] = opts['padding_right'];
this['padding_top'] = opts['padding_top'];
this['padding_bottom'] = opts['padding_bottom']
            

        }

        static defaults = {
            'padding_left':  64,
'padding_right':  64,
'padding_top':  64,
'padding_bottom':  64
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Bounds to Console' : class extends Node{
        //Setters
        set 'image_bounds'(value : IMAGE_BOUNDS)  { super.$$link(0, value) } 
set 'label'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE_BOUNDS'() : IMAGE_BOUNDS { return [this, 'IMAGE_BOUNDS', 0]  as unknown as IMAGE_BOUNDS; }

        constructor(opts:{
            'image_bounds': IMAGE_BOUNDS,'label': STRING
        }){
            super(ctx);

            this['image_bounds'] = opts['image_bounds'];
this['label'] = opts['label']
            

        }

        static defaults = {
            'label':  "Debug to Console"
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text Dictionary Update' : class extends Node{
        //Setters
        set 'dictionary_a'(value : DICT)  { super.$$link(0, value) } 
set 'dictionary_b'(value : DICT)  { super.$$link(1, value) } 
set 'dictionary_c'(value : DICT)  { super.$$link(2, value) } 
set 'dictionary_d'(value : DICT)  { super.$$link(3, value) } 

        //Getters
        get 'DICT'() : DICT { return [this, 'DICT', 0]  as unknown as DICT; }

        constructor(opts:{
            'dictionary_a': DICT,'dictionary_b': DICT,'dictionary_c'?: DICT,'dictionary_d'?: DICT
        }){
            super(ctx);

            this['dictionary_a'] = opts['dictionary_a'];
this['dictionary_b'] = opts['dictionary_b']
            if(opts['dictionary_c']!==undefined) this['dictionary_c'] = opts['dictionary_c'];
if(opts['dictionary_d']!==undefined) this['dictionary_d'] = opts['dictionary_d']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text Dictionary Get' : class extends Node{
        //Setters
        set 'dictionary'(value : DICT)  { super.$$link(0, value) } 
set 'key'(value : STRING)  { super.$$link(1, value) } 
set 'default_value'(value : STRING)  { super.$$link(2, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'dictionary': DICT,'key': STRING,'default_value'?: STRING
        }){
            super(ctx);

            this['dictionary'] = opts['dictionary'];
this['key'] = opts['key']
            if(opts['default_value']!==undefined) this['default_value'] = opts['default_value']

        }

        static defaults = {
            'key':  "",
'default_value':  ""
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text Dictionary Convert' : class extends Node{
        //Setters
        set 'dictionary_text'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'DICT'() : DICT { return [this, 'DICT', 0]  as unknown as DICT; }

        constructor(opts:{
            'dictionary_text': STRING
        }){
            super(ctx);

            this['dictionary_text'] = opts['dictionary_text']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text Dictionary New' : class extends Node{
        //Setters
        set 'key_1'(value : STRING)  { super.$$link(0, value) } 
set 'value_1'(value : STRING)  { super.$$link(1, value) } 
set 'key_2'(value : STRING)  { super.$$link(2, value) } 
set 'value_2'(value : STRING)  { super.$$link(3, value) } 
set 'key_3'(value : STRING)  { super.$$link(4, value) } 
set 'value_3'(value : STRING)  { super.$$link(5, value) } 
set 'key_4'(value : STRING)  { super.$$link(6, value) } 
set 'value_4'(value : STRING)  { super.$$link(7, value) } 
set 'key_5'(value : STRING)  { super.$$link(8, value) } 
set 'value_5'(value : STRING)  { super.$$link(9, value) } 

        //Getters
        get 'DICT'() : DICT { return [this, 'DICT', 0]  as unknown as DICT; }

        constructor(opts:{
            'key_1': STRING,'value_1': STRING,'key_2'?: STRING,'value_2'?: STRING,'key_3'?: STRING,'value_3'?: STRING,'key_4'?: STRING,'value_4'?: STRING,'key_5'?: STRING,'value_5'?: STRING
        }){
            super(ctx);

            this['key_1'] = opts['key_1'];
this['value_1'] = opts['value_1']
            if(opts['key_2']!==undefined) this['key_2'] = opts['key_2'];
if(opts['value_2']!==undefined) this['value_2'] = opts['value_2'];
if(opts['key_3']!==undefined) this['key_3'] = opts['key_3'];
if(opts['value_3']!==undefined) this['value_3'] = opts['value_3'];
if(opts['key_4']!==undefined) this['key_4'] = opts['key_4'];
if(opts['value_4']!==undefined) this['value_4'] = opts['value_4'];
if(opts['key_5']!==undefined) this['key_5'] = opts['key_5'];
if(opts['value_5']!==undefined) this['value_5'] = opts['value_5']

        }

        static defaults = {
            'key_1':  "",
'value_1':  "",
'key_2':  "",
'value_2':  "",
'key_3':  "",
'value_3':  "",
'key_4':  "",
'value_4':  "",
'key_5':  "",
'value_5':  ""
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text Dictionary Keys' : class extends Node{
        //Setters
        set 'dictionary'(value : DICT)  { super.$$link(0, value) } 

        //Getters
        get 'LIST'() : LIST { return [this, 'LIST', 0]  as unknown as LIST; }

        constructor(opts:{
            'dictionary': DICT
        }){
            super(ctx);

            this['dictionary'] = opts['dictionary']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text Dictionary To Text' : class extends Node{
        //Setters
        set 'dictionary'(value : DICT)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'dictionary': DICT
        }){
            super(ctx);

            this['dictionary'] = opts['dictionary']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text Add Tokens' : class extends Node{
        //Setters
        set 'tokens'(value : STRING)  { super.$$link(0, value) } 
set 'print_current_tokens'(value : 'false'|'true')  { super.$$link(1, value) } 

        //Getters
        

        constructor(opts:{
            'tokens': STRING,'print_current_tokens': 'false'|'true'
        }){
            super(ctx);

            this['tokens'] = opts['tokens'];
this['print_current_tokens'] = opts['print_current_tokens']
            

        }

        static defaults = {
            'tokens':  "[hello]: world"
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text Add Token by Input' : class extends Node{
        //Setters
        set 'token_name'(value : STRING)  { super.$$link(0, value) } 
set 'token_value'(value : STRING)  { super.$$link(1, value) } 
set 'print_current_tokens'(value : 'false'|'true')  { super.$$link(2, value) } 

        //Getters
        

        constructor(opts:{
            'token_name': STRING,'token_value': STRING,'print_current_tokens': 'false'|'true'
        }){
            super(ctx);

            this['token_name'] = opts['token_name'];
this['token_value'] = opts['token_value'];
this['print_current_tokens'] = opts['print_current_tokens']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text Compare' : class extends Node{
        //Setters
        set 'text_a'(value : STRING)  { super.$$link(0, value) } 
set 'text_b'(value : STRING)  { super.$$link(1, value) } 
set 'mode'(value : 'similarity'|'difference')  { super.$$link(2, value) } 
set 'tolerance'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'TEXT_A_PASS'() : STRING { return [this, 'TEXT_A_PASS', 0]  as unknown as STRING; }
get 'TEXT_B_PASS'() : STRING { return [this, 'TEXT_B_PASS', 1]  as unknown as STRING; }
get 'BOOLEAN'() : BOOLEAN { return [this, 'BOOLEAN', 2]  as unknown as BOOLEAN; }
get 'SCORE_NUMBER'() : NUMBER { return [this, 'SCORE_NUMBER', 3]  as unknown as NUMBER; }
get 'COMPARISON_TEXT'() : STRING { return [this, 'COMPARISON_TEXT', 4]  as unknown as STRING; }

        constructor(opts:{
            'text_a': STRING,'text_b': STRING,'mode': 'similarity'|'difference','tolerance': FLOAT
        }){
            super(ctx);

            this['text_a'] = opts['text_a'];
this['text_b'] = opts['text_b'];
this['mode'] = opts['mode'];
this['tolerance'] = opts['tolerance']
            

        }

        static defaults = {
            'tolerance':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text Concatenate' : class extends Node{
        //Setters
        set 'delimiter'(value : STRING)  { super.$$link(0, value) } 
set 'clean_whitespace'(value : 'true'|'false')  { super.$$link(1, value) } 
set 'text_a'(value : STRING)  { super.$$link(2, value) } 
set 'text_b'(value : STRING)  { super.$$link(3, value) } 
set 'text_c'(value : STRING)  { super.$$link(4, value) } 
set 'text_d'(value : STRING)  { super.$$link(5, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'delimiter': STRING,'clean_whitespace': 'true'|'false','text_a'?: STRING,'text_b'?: STRING,'text_c'?: STRING,'text_d'?: STRING
        }){
            super(ctx);

            this['delimiter'] = opts['delimiter'];
this['clean_whitespace'] = opts['clean_whitespace']
            if(opts['text_a']!==undefined) this['text_a'] = opts['text_a'];
if(opts['text_b']!==undefined) this['text_b'] = opts['text_b'];
if(opts['text_c']!==undefined) this['text_c'] = opts['text_c'];
if(opts['text_d']!==undefined) this['text_d'] = opts['text_d']

        }

        static defaults = {
            'delimiter':  ", "
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text File History Loader' : class extends Node{
        //Setters
        set 'file'(value : '.../2024-01-14/ComfyUI_0001.txt')  { super.$$link(0, value) } 
set 'dictionary_name'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }
get 'DICT'() : DICT { return [this, 'DICT', 1]  as unknown as DICT; }

        constructor(opts:{
            'file': '.../2024-01-14/ComfyUI_0001.txt','dictionary_name': STRING
        }){
            super(ctx);

            this['file'] = opts['file'];
this['dictionary_name'] = opts['dictionary_name']
            

        }

        static defaults = {
            'dictionary_name':  "[filename]"
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text Find and Replace by Dictionary' : class extends Node{
        //Setters
        set 'text'(value : STRING)  { super.$$link(0, value) } 
set 'dictionary'(value : DICT)  { super.$$link(1, value) } 
set 'replacement_key'(value : STRING)  { super.$$link(2, value) } 
set 'seed'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'text': STRING,'dictionary': DICT,'replacement_key': STRING,'seed': INT
        }){
            super(ctx);

            this['text'] = opts['text'];
this['dictionary'] = opts['dictionary'];
this['replacement_key'] = opts['replacement_key'];
this['seed'] = opts['seed']
            

        }

        static defaults = {
            'replacement_key':  "__",
'seed':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text Find and Replace Input' : class extends Node{
        //Setters
        set 'text'(value : STRING)  { super.$$link(0, value) } 
set 'find'(value : STRING)  { super.$$link(1, value) } 
set 'replace'(value : STRING)  { super.$$link(2, value) } 

        //Getters
        get 'result_text'() : STRING { return [this, 'result_text', 0]  as unknown as STRING; }
get 'replacement_count_number'() : NUMBER { return [this, 'replacement_count_number', 1]  as unknown as NUMBER; }
get 'replacement_count_float'() : FLOAT { return [this, 'replacement_count_float', 2]  as unknown as FLOAT; }
get 'replacement_count_int'() : INT { return [this, 'replacement_count_int', 3]  as unknown as INT; }

        constructor(opts:{
            'text': STRING,'find': STRING,'replace': STRING
        }){
            super(ctx);

            this['text'] = opts['text'];
this['find'] = opts['find'];
this['replace'] = opts['replace']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text Find and Replace' : class extends Node{
        //Setters
        set 'text'(value : STRING)  { super.$$link(0, value) } 
set 'find'(value : STRING)  { super.$$link(1, value) } 
set 'replace'(value : STRING)  { super.$$link(2, value) } 

        //Getters
        get 'result_text'() : STRING { return [this, 'result_text', 0]  as unknown as STRING; }
get 'replacement_count_number'() : NUMBER { return [this, 'replacement_count_number', 1]  as unknown as NUMBER; }
get 'replacement_count_float'() : FLOAT { return [this, 'replacement_count_float', 2]  as unknown as FLOAT; }
get 'replacement_count_int'() : INT { return [this, 'replacement_count_int', 3]  as unknown as INT; }

        constructor(opts:{
            'text': STRING,'find': STRING,'replace': STRING
        }){
            super(ctx);

            this['text'] = opts['text'];
this['find'] = opts['find'];
this['replace'] = opts['replace']
            

        }

        static defaults = {
            'find':  "",
'replace':  ""
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text Find' : class extends Node{
        //Setters
        set 'text'(value : STRING)  { super.$$link(0, value) } 
set 'substring'(value : STRING)  { super.$$link(1, value) } 
set 'pattern'(value : STRING)  { super.$$link(2, value) } 

        //Getters
        get 'found'() : BOOLEAN { return [this, 'found', 0]  as unknown as BOOLEAN; }

        constructor(opts:{
            'text': STRING,'substring': STRING,'pattern': STRING
        }){
            super(ctx);

            this['text'] = opts['text'];
this['substring'] = opts['substring'];
this['pattern'] = opts['pattern']
            

        }

        static defaults = {
            'substring':  "",
'pattern':  ""
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text Input Switch' : class extends Node{
        //Setters
        set 'text_a'(value : STRING)  { super.$$link(0, value) } 
set 'text_b'(value : STRING)  { super.$$link(1, value) } 
set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'text_a': STRING,'text_b': STRING,'boolean': BOOLEAN
        }){
            super(ctx);

            this['text_a'] = opts['text_a'];
this['text_b'] = opts['text_b'];
this['boolean'] = opts['boolean']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text List' : class extends Node{
        //Setters
        set 'text_a'(value : STRING)  { super.$$link(0, value) } 
set 'text_b'(value : STRING)  { super.$$link(1, value) } 
set 'text_c'(value : STRING)  { super.$$link(2, value) } 
set 'text_d'(value : STRING)  { super.$$link(3, value) } 
set 'text_e'(value : STRING)  { super.$$link(4, value) } 
set 'text_f'(value : STRING)  { super.$$link(5, value) } 
set 'text_g'(value : STRING)  { super.$$link(6, value) } 

        //Getters
        get 'LIST'() : LIST { return [this, 'LIST', 0]  as unknown as LIST; }

        constructor(opts:{
            'text_a'?: STRING,'text_b'?: STRING,'text_c'?: STRING,'text_d'?: STRING,'text_e'?: STRING,'text_f'?: STRING,'text_g'?: STRING
        }){
            super(ctx);

            
            if(opts['text_a']!==undefined) this['text_a'] = opts['text_a'];
if(opts['text_b']!==undefined) this['text_b'] = opts['text_b'];
if(opts['text_c']!==undefined) this['text_c'] = opts['text_c'];
if(opts['text_d']!==undefined) this['text_d'] = opts['text_d'];
if(opts['text_e']!==undefined) this['text_e'] = opts['text_e'];
if(opts['text_f']!==undefined) this['text_f'] = opts['text_f'];
if(opts['text_g']!==undefined) this['text_g'] = opts['text_g']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text List Concatenate' : class extends Node{
        //Setters
        set 'list_a'(value : LIST)  { super.$$link(0, value) } 
set 'list_b'(value : LIST)  { super.$$link(1, value) } 
set 'list_c'(value : LIST)  { super.$$link(2, value) } 
set 'list_d'(value : LIST)  { super.$$link(3, value) } 

        //Getters
        get 'LIST'() : LIST { return [this, 'LIST', 0]  as unknown as LIST; }

        constructor(opts:{
            'list_a'?: LIST,'list_b'?: LIST,'list_c'?: LIST,'list_d'?: LIST
        }){
            super(ctx);

            
            if(opts['list_a']!==undefined) this['list_a'] = opts['list_a'];
if(opts['list_b']!==undefined) this['list_b'] = opts['list_b'];
if(opts['list_c']!==undefined) this['list_c'] = opts['list_c'];
if(opts['list_d']!==undefined) this['list_d'] = opts['list_d']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text List to Text' : class extends Node{
        //Setters
        set 'delimiter'(value : STRING)  { super.$$link(0, value) } 
set 'text_list'(value : LIST)  { super.$$link(1, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'delimiter': STRING,'text_list': LIST
        }){
            super(ctx);

            this['delimiter'] = opts['delimiter'];
this['text_list'] = opts['text_list']
            

        }

        static defaults = {
            'delimiter':  ", "
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text Load Line From File' : class extends Node{
        //Setters
        set 'file_path'(value : STRING)  { super.$$link(0, value) } 
set 'dictionary_name'(value : STRING)  { super.$$link(1, value) } 
set 'label'(value : STRING)  { super.$$link(2, value) } 
set 'mode'(value : 'automatic'|'index')  { super.$$link(3, value) } 
set 'index'(value : INT)  { super.$$link(4, value) } 
set 'multiline_text'(value : STRING)  { super.$$link(5, value) } 

        //Getters
        get 'line_text'() : STRING { return [this, 'line_text', 0]  as unknown as STRING; }
get 'dictionary'() : DICT { return [this, 'dictionary', 1]  as unknown as DICT; }

        constructor(opts:{
            'file_path': STRING,'dictionary_name': STRING,'label': STRING,'mode': 'automatic'|'index','index': INT,'multiline_text'?: STRING
        }){
            super(ctx);

            this['file_path'] = opts['file_path'];
this['dictionary_name'] = opts['dictionary_name'];
this['label'] = opts['label'];
this['mode'] = opts['mode'];
this['index'] = opts['index']
            if(opts['multiline_text']!==undefined) this['multiline_text'] = opts['multiline_text']

        }

        static defaults = {
            'file_path':  "",
'dictionary_name':  "[filename]",
'label':  "TextBatch",
'index':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text Multiline' : class extends Node{
        //Setters
        set 'text'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'text': STRING
        }){
            super(ctx);

            this['text'] = opts['text']
            

        }

        static defaults = {
            'text':  ""
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text Multiline (Code Compatible)' : class extends Node{
        //Setters
        set 'text'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'text': STRING
        }){
            super(ctx);

            this['text'] = opts['text']
            

        }

        static defaults = {
            'text':  ""
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text Parse A1111 Embeddings' : class extends Node{
        //Setters
        set 'text'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'text': STRING
        }){
            super(ctx);

            this['text'] = opts['text']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text Parse Noodle Soup Prompts' : class extends Node{
        //Setters
        set 'mode'(value : 'Noodle Soup Prompts'|'Wildcards')  { super.$$link(0, value) } 
set 'noodle_key'(value : STRING)  { super.$$link(1, value) } 
set 'seed'(value : INT)  { super.$$link(2, value) } 
set 'text'(value : STRING)  { super.$$link(3, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'mode': 'Noodle Soup Prompts'|'Wildcards','noodle_key': STRING,'seed': INT,'text': STRING
        }){
            super(ctx);

            this['mode'] = opts['mode'];
this['noodle_key'] = opts['noodle_key'];
this['seed'] = opts['seed'];
this['text'] = opts['text']
            

        }

        static defaults = {
            'noodle_key':  "__",
'seed':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text Parse Tokens' : class extends Node{
        //Setters
        set 'text'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'text': STRING
        }){
            super(ctx);

            this['text'] = opts['text']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text Random Line' : class extends Node{
        //Setters
        set 'text'(value : STRING)  { super.$$link(0, value) } 
set 'seed'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'text': STRING,'seed': INT
        }){
            super(ctx);

            this['text'] = opts['text'];
this['seed'] = opts['seed']
            

        }

        static defaults = {
            'seed':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text Random Prompt' : class extends Node{
        //Setters
        set 'search_seed'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'search_seed': STRING
        }){
            super(ctx);

            this['search_seed'] = opts['search_seed']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text String' : class extends Node{
        //Setters
        set 'text'(value : STRING)  { super.$$link(0, value) } 
set 'text_b'(value : STRING)  { super.$$link(1, value) } 
set 'text_c'(value : STRING)  { super.$$link(2, value) } 
set 'text_d'(value : STRING)  { super.$$link(3, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'text': STRING,'text_b'?: STRING,'text_c'?: STRING,'text_d'?: STRING
        }){
            super(ctx);

            this['text'] = opts['text']
            if(opts['text_b']!==undefined) this['text_b'] = opts['text_b'];
if(opts['text_c']!==undefined) this['text_c'] = opts['text_c'];
if(opts['text_d']!==undefined) this['text_d'] = opts['text_d']

        }

        static defaults = {
            'text':  "",
'text_b':  "",
'text_c':  "",
'text_d':  ""
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text Contains' : class extends Node{
        //Setters
        set 'text'(value : STRING)  { super.$$link(0, value) } 
set 'sub_text'(value : STRING)  { super.$$link(1, value) } 
set 'case_insensitive'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'BOOLEAN'() : BOOLEAN { return [this, 'BOOLEAN', 0]  as unknown as BOOLEAN; }

        constructor(opts:{
            'text': STRING,'sub_text': STRING,'case_insensitive'?: BOOLEAN
        }){
            super(ctx);

            this['text'] = opts['text'];
this['sub_text'] = opts['sub_text']
            if(opts['case_insensitive']!==undefined) this['case_insensitive'] = opts['case_insensitive']

        }

        static defaults = {
            'text':  "",
'sub_text':  "",
'case_insensitive':  true
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text Shuffle' : class extends Node{
        //Setters
        set 'text'(value : STRING)  { super.$$link(0, value) } 
set 'separator'(value : STRING)  { super.$$link(1, value) } 
set 'seed'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'text': STRING,'separator': STRING,'seed': INT
        }){
            super(ctx);

            this['text'] = opts['text'];
this['separator'] = opts['separator'];
this['seed'] = opts['seed']
            

        }

        static defaults = {
            'separator':  ",",
'seed':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text Sort' : class extends Node{
        //Setters
        set 'text'(value : STRING)  { super.$$link(0, value) } 
set 'separator'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'text': STRING,'separator': STRING
        }){
            super(ctx);

            this['text'] = opts['text'];
this['separator'] = opts['separator']
            

        }

        static defaults = {
            'separator':  ", "
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text to Conditioning' : class extends Node{
        //Setters
        set 'clip'(value : CLIP)  { super.$$link(0, value) } 
set 'text'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'clip': CLIP,'text': STRING
        }){
            super(ctx);

            this['clip'] = opts['clip'];
this['text'] = opts['text']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text to Console' : class extends Node{
        //Setters
        set 'text'(value : STRING)  { super.$$link(0, value) } 
set 'label'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'text': STRING,'label': STRING
        }){
            super(ctx);

            this['text'] = opts['text'];
this['label'] = opts['label']
            

        }

        static defaults = {
            'label':  "Text Output"
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text to Number' : class extends Node{
        //Setters
        set 'text'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'NUMBER'() : NUMBER { return [this, 'NUMBER', 0]  as unknown as NUMBER; }

        constructor(opts:{
            'text': STRING
        }){
            super(ctx);

            this['text'] = opts['text']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text to String' : class extends Node{
        //Setters
        set 'text'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'text': STRING
        }){
            super(ctx);

            this['text'] = opts['text']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Text String Truncate' : class extends Node{
        //Setters
        set 'text'(value : STRING)  { super.$$link(0, value) } 
set 'truncate_by'(value : 'characters'|'words')  { super.$$link(1, value) } 
set 'truncate_from'(value : 'end'|'beginning')  { super.$$link(2, value) } 
set 'truncate_to'(value : INT)  { super.$$link(3, value) } 
set 'text_b'(value : STRING)  { super.$$link(4, value) } 
set 'text_c'(value : STRING)  { super.$$link(5, value) } 
set 'text_d'(value : STRING)  { super.$$link(6, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'text': STRING,'truncate_by': 'characters'|'words','truncate_from': 'end'|'beginning','truncate_to': INT,'text_b'?: STRING,'text_c'?: STRING,'text_d'?: STRING
        }){
            super(ctx);

            this['text'] = opts['text'];
this['truncate_by'] = opts['truncate_by'];
this['truncate_from'] = opts['truncate_from'];
this['truncate_to'] = opts['truncate_to']
            if(opts['text_b']!==undefined) this['text_b'] = opts['text_b'];
if(opts['text_c']!==undefined) this['text_c'] = opts['text_c'];
if(opts['text_d']!==undefined) this['text_d'] = opts['text_d']

        }

        static defaults = {
            'truncate_to':  10
}
},

    /**
     * TODO Docs based on metadata
     */
    'True Random.org Number Generator' : class extends Node{
        //Setters
        set 'api_key'(value : STRING)  { super.$$link(0, value) } 
set 'minimum'(value : FLOAT)  { super.$$link(1, value) } 
set 'maximum'(value : FLOAT)  { super.$$link(2, value) } 
set 'mode'(value : 'random'|'fixed')  { super.$$link(3, value) } 

        //Getters
        get 'NUMBER'() : NUMBER { return [this, 'NUMBER', 0]  as unknown as NUMBER; }
get 'FLOAT'() : FLOAT { return [this, 'FLOAT', 1]  as unknown as FLOAT; }
get 'INT'() : INT { return [this, 'INT', 2]  as unknown as INT; }

        constructor(opts:{
            'api_key': STRING,'minimum': FLOAT,'maximum': FLOAT,'mode': 'random'|'fixed'
        }){
            super(ctx);

            this['api_key'] = opts['api_key'];
this['minimum'] = opts['minimum'];
this['maximum'] = opts['maximum'];
this['mode'] = opts['mode']
            

        }

        static defaults = {
            'api_key':  "00000000-0000-0000-0000-000000000000",
'minimum':  0,
'maximum':  10000000
}
},

    /**
     * TODO Docs based on metadata
     */
    'unCLIP Checkpoint Loader' : class extends Node{
        //Setters
        set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(0, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this, 'CLIP', 1]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this, 'VAE', 2]  as unknown as VAE; }
get 'CLIP_VISION'() : CLIP_VISION { return [this, 'CLIP_VISION', 3]  as unknown as CLIP_VISION; }
get 'NAME_STRING'() : STRING { return [this, 'NAME_STRING', 4]  as unknown as STRING; }

        constructor(opts:{
            'ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'
        }){
            super(ctx);

            this['ckpt_name'] = opts['ckpt_name']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Upscale Model Loader' : class extends Node{
        //Setters
        set 'model_name'(value : '4x_NMKD-Superscale-SP_178000_G.pth'|'HAT_SRx4_ImageNet-pretrain.pth'|'Real_HAT_GAN_sharper.pth')  { super.$$link(0, value) } 

        //Getters
        get 'UPSCALE_MODEL'() : UPSCALE_MODEL { return [this, 'UPSCALE_MODEL', 0]  as unknown as UPSCALE_MODEL; }
get 'MODEL_NAME_TEXT'() : STRING { return [this, 'MODEL_NAME_TEXT', 1]  as unknown as STRING; }

        constructor(opts:{
            'model_name': '4x_NMKD-Superscale-SP_178000_G.pth'|'HAT_SRx4_ImageNet-pretrain.pth'|'Real_HAT_GAN_sharper.pth'
        }){
            super(ctx);

            this['model_name'] = opts['model_name']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Upscale Model Switch' : class extends Node{
        //Setters
        set 'upscale_model_a'(value : UPSCALE_MODEL)  { super.$$link(0, value) } 
set 'upscale_model_b'(value : UPSCALE_MODEL)  { super.$$link(1, value) } 
set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'UPSCALE_MODEL'() : UPSCALE_MODEL { return [this, 'UPSCALE_MODEL', 0]  as unknown as UPSCALE_MODEL; }

        constructor(opts:{
            'upscale_model_a': UPSCALE_MODEL,'upscale_model_b': UPSCALE_MODEL,'boolean': BOOLEAN
        }){
            super(ctx);

            this['upscale_model_a'] = opts['upscale_model_a'];
this['upscale_model_b'] = opts['upscale_model_b'];
this['boolean'] = opts['boolean']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Write to GIF' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'transition_frames'(value : INT)  { super.$$link(1, value) } 
set 'image_delay_ms'(value : FLOAT)  { super.$$link(2, value) } 
set 'duration_ms'(value : FLOAT)  { super.$$link(3, value) } 
set 'loops'(value : INT)  { super.$$link(4, value) } 
set 'max_size'(value : INT)  { super.$$link(5, value) } 
set 'output_path'(value : STRING)  { super.$$link(6, value) } 
set 'filename'(value : STRING)  { super.$$link(7, value) } 

        //Getters
        get 'image_pass'() : IMAGE { return [this, 'image_pass', 0]  as unknown as IMAGE; }
get 'filepath_text'() : STRING { return [this, 'filepath_text', 1]  as unknown as STRING; }
get 'filename_text'() : STRING { return [this, 'filename_text', 2]  as unknown as STRING; }

        constructor(opts:{
            'image': IMAGE,'transition_frames': INT,'image_delay_ms': FLOAT,'duration_ms': FLOAT,'loops': INT,'max_size': INT,'output_path': STRING,'filename': STRING
        }){
            super(ctx);

            this['image'] = opts['image'];
this['transition_frames'] = opts['transition_frames'];
this['image_delay_ms'] = opts['image_delay_ms'];
this['duration_ms'] = opts['duration_ms'];
this['loops'] = opts['loops'];
this['max_size'] = opts['max_size'];
this['output_path'] = opts['output_path'];
this['filename'] = opts['filename']
            

        }

        static defaults = {
            'transition_frames':  30,
'image_delay_ms':  2500,
'duration_ms':  0.1,
'loops':  0,
'max_size':  512,
'output_path':  "/archive/shared/comfyui-krita/ComfyUI/output",
'filename':  "morph_writer"
}
},

    /**
     * TODO Docs based on metadata
     */
    'Write to Video' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'transition_frames'(value : INT)  { super.$$link(1, value) } 
set 'image_delay_sec'(value : FLOAT)  { super.$$link(2, value) } 
set 'fps'(value : INT)  { super.$$link(3, value) } 
set 'max_size'(value : INT)  { super.$$link(4, value) } 
set 'output_path'(value : STRING)  { super.$$link(5, value) } 
set 'filename'(value : STRING)  { super.$$link(6, value) } 
set 'codec'(value : 'AVC1'|'FFV1'|'H264'|'MP4V')  { super.$$link(7, value) } 

        //Getters
        get 'IMAGE_PASS'() : IMAGE { return [this, 'IMAGE_PASS', 0]  as unknown as IMAGE; }
get 'filepath_text'() : STRING { return [this, 'filepath_text', 1]  as unknown as STRING; }
get 'filename_text'() : STRING { return [this, 'filename_text', 2]  as unknown as STRING; }

        constructor(opts:{
            'image': IMAGE,'transition_frames': INT,'image_delay_sec': FLOAT,'fps': INT,'max_size': INT,'output_path': STRING,'filename': STRING,'codec': 'AVC1'|'FFV1'|'H264'|'MP4V'
        }){
            super(ctx);

            this['image'] = opts['image'];
this['transition_frames'] = opts['transition_frames'];
this['image_delay_sec'] = opts['image_delay_sec'];
this['fps'] = opts['fps'];
this['max_size'] = opts['max_size'];
this['output_path'] = opts['output_path'];
this['filename'] = opts['filename'];
this['codec'] = opts['codec']
            

        }

        static defaults = {
            'transition_frames':  30,
'image_delay_sec':  2.5,
'fps':  30,
'max_size':  512,
'output_path':  "./ComfyUI/output",
'filename':  "comfy_writer"
}
},

    /**
     * TODO Docs based on metadata
     */
    'VAE Input Switch' : class extends Node{
        //Setters
        set 'vae_a'(value : VAE)  { super.$$link(0, value) } 
set 'vae_b'(value : VAE)  { super.$$link(1, value) } 
set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'VAE'() : VAE { return [this, 'VAE', 0]  as unknown as VAE; }

        constructor(opts:{
            'vae_a': VAE,'vae_b': VAE,'boolean': BOOLEAN
        }){
            super(ctx);

            this['vae_a'] = opts['vae_a'];
this['vae_b'] = opts['vae_b'];
this['boolean'] = opts['boolean']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Video Dump Frames' : class extends Node{
        //Setters
        set 'video_path'(value : STRING)  { super.$$link(0, value) } 
set 'output_path'(value : STRING)  { super.$$link(1, value) } 
set 'prefix'(value : STRING)  { super.$$link(2, value) } 
set 'filenumber_digits'(value : INT)  { super.$$link(3, value) } 
set 'extension'(value : 'png'|'jpg'|'gif'|'tiff')  { super.$$link(4, value) } 

        //Getters
        get 'output_path'() : STRING { return [this, 'output_path', 0]  as unknown as STRING; }
get 'processed_count'() : NUMBER { return [this, 'processed_count', 1]  as unknown as NUMBER; }

        constructor(opts:{
            'video_path': STRING,'output_path': STRING,'prefix': STRING,'filenumber_digits': INT,'extension': 'png'|'jpg'|'gif'|'tiff'
        }){
            super(ctx);

            this['video_path'] = opts['video_path'];
this['output_path'] = opts['output_path'];
this['prefix'] = opts['prefix'];
this['filenumber_digits'] = opts['filenumber_digits'];
this['extension'] = opts['extension']
            

        }

        static defaults = {
            'video_path':  "./ComfyUI/input/MyVideo.mp4",
'output_path':  "./ComfyUI/input/MyVideo",
'prefix':  "frame_",
'filenumber_digits':  4
}
},

    /**
     * TODO Docs based on metadata
     */
    'ETN_LoadImageBase64' : class extends Node{
        //Setters
        set 'image'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }
get 'MASK'() : MASK { return [this, 'MASK', 1]  as unknown as MASK; }

        constructor(opts:{
            'image': STRING
        }){
            super(ctx);

            this['image'] = opts['image']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ETN_LoadMaskBase64' : class extends Node{
        //Setters
        set 'mask'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'MASK'() : MASK { return [this, 'MASK', 0]  as unknown as MASK; }

        constructor(opts:{
            'mask': STRING
        }){
            super(ctx);

            this['mask'] = opts['mask']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ETN_SendImageWebSocket' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        

        constructor(opts:{
            'images': IMAGE
        }){
            super(ctx);

            this['images'] = opts['images']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ETN_CropImage' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'x'(value : INT)  { super.$$link(1, value) } 
set 'y'(value : INT)  { super.$$link(2, value) } 
set 'width'(value : INT)  { super.$$link(3, value) } 
set 'height'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'x': INT,'y': INT,'width': INT,'height': INT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['x'] = opts['x'];
this['y'] = opts['y'];
this['width'] = opts['width'];
this['height'] = opts['height']
            

        }

        static defaults = {
            'x':  0,
'y':  0,
'width':  512,
'height':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'ETN_ApplyMaskToImage' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'mask'(value : MASK)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'mask': MASK
        }){
            super(ctx);

            this['image'] = opts['image'];
this['mask'] = opts['mask']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'NNLatentUpscale' : class extends Node{
        //Setters
        set 'latent'(value : LATENT)  { super.$$link(0, value) } 
set 'version'(value : 'SDXL'|'SD 1.x')  { super.$$link(1, value) } 
set 'upscale'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'latent': LATENT,'version': 'SDXL'|'SD 1.x','upscale': FLOAT
        }){
            super(ctx);

            this['latent'] = opts['latent'];
this['version'] = opts['version'];
this['upscale'] = opts['upscale']
            

        }

        static defaults = {
            'upscale':  1.5
}
},

    /**
     * TODO Docs based on metadata
     */
    'SAMModelLoader (segment anything)' : class extends Node{
        //Setters
        set 'model_name'(value : 'sam_vit_h (2.56GB)'|'sam_vit_l (1.25GB)'|'sam_vit_b (375MB)'|'sam_hq_vit_h (2.57GB)'|'sam_hq_vit_l (1.25GB)'|'sam_hq_vit_b (379MB)'|'mobile_sam(39MB)')  { super.$$link(0, value) } 

        //Getters
        get 'SAM_MODEL'() : SAM_MODEL { return [this, 'SAM_MODEL', 0]  as unknown as SAM_MODEL; }

        constructor(opts:{
            'model_name': 'sam_vit_h (2.56GB)'|'sam_vit_l (1.25GB)'|'sam_vit_b (375MB)'|'sam_hq_vit_h (2.57GB)'|'sam_hq_vit_l (1.25GB)'|'sam_hq_vit_b (379MB)'|'mobile_sam(39MB)'
        }){
            super(ctx);

            this['model_name'] = opts['model_name']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'GroundingDinoModelLoader (segment anything)' : class extends Node{
        //Setters
        set 'model_name'(value : 'GroundingDINO_SwinT_OGC (694MB)'|'GroundingDINO_SwinB (938MB)')  { super.$$link(0, value) } 

        //Getters
        get 'GROUNDING_DINO_MODEL'() : GROUNDING_DINO_MODEL { return [this, 'GROUNDING_DINO_MODEL', 0]  as unknown as GROUNDING_DINO_MODEL; }

        constructor(opts:{
            'model_name': 'GroundingDINO_SwinT_OGC (694MB)'|'GroundingDINO_SwinB (938MB)'
        }){
            super(ctx);

            this['model_name'] = opts['model_name']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'GroundingDinoSAMSegment (segment anything)' : class extends Node{
        //Setters
        set 'sam_model'(value : SAM_MODEL)  { super.$$link(0, value) } 
set 'grounding_dino_model'(value : GROUNDING_DINO_MODEL)  { super.$$link(1, value) } 
set 'image'(value : IMAGE)  { super.$$link(2, value) } 
set 'prompt'(value : STRING)  { super.$$link(3, value) } 
set 'threshold'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }
get 'MASK'() : MASK { return [this, 'MASK', 1]  as unknown as MASK; }

        constructor(opts:{
            'sam_model': SAM_MODEL,'grounding_dino_model': GROUNDING_DINO_MODEL,'image': IMAGE,'prompt': STRING,'threshold': FLOAT
        }){
            super(ctx);

            this['sam_model'] = opts['sam_model'];
this['grounding_dino_model'] = opts['grounding_dino_model'];
this['image'] = opts['image'];
this['prompt'] = opts['prompt'];
this['threshold'] = opts['threshold']
            

        }

        static defaults = {
            'threshold':  0.3
}
},

    /**
     * TODO Docs based on metadata
     */
    'InvertMask (segment anything)' : class extends Node{
        //Setters
        set 'mask'(value : MASK)  { super.$$link(0, value) } 

        //Getters
        get 'MASK'() : MASK { return [this, 'MASK', 0]  as unknown as MASK; }

        constructor(opts:{
            'mask': MASK
        }){
            super(ctx);

            this['mask'] = opts['mask']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'IsMaskEmpty' : class extends Node{
        //Setters
        set 'mask'(value : MASK)  { super.$$link(0, value) } 

        //Getters
        get 'boolean_number'() : NUMBER { return [this, 'boolean_number', 0]  as unknown as NUMBER; }

        constructor(opts:{
            'mask': MASK
        }){
            super(ctx);

            this['mask'] = opts['mask']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'LDSRUpscaler' : class extends Node{
        //Setters
        set 'model'(value : '4x_NMKD-Superscale-SP_178000_G.pth'|'HAT_SRx4_ImageNet-pretrain.pth'|'Real_HAT_GAN_sharper.pth')  { super.$$link(0, value) } 
set 'images'(value : IMAGE)  { super.$$link(1, value) } 
set 'steps'(value : '25'|'50'|'100'|'250'|'500'|'1000')  { super.$$link(2, value) } 
set 'pre_downscale'(value : 'None'|'1/2'|'1/4')  { super.$$link(3, value) } 
set 'post_downscale'(value : 'None'|'Original Size'|'1/2'|'1/4')  { super.$$link(4, value) } 
set 'downsample_method'(value : 'Nearest'|'Lanczos')  { super.$$link(5, value) } 

        //Getters
        get 'images'() : IMAGE { return [this, 'images', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'model': '4x_NMKD-Superscale-SP_178000_G.pth'|'HAT_SRx4_ImageNet-pretrain.pth'|'Real_HAT_GAN_sharper.pth','images': IMAGE,'steps': '25'|'50'|'100'|'250'|'500'|'1000','pre_downscale': 'None'|'1/2'|'1/4','post_downscale': 'None'|'Original Size'|'1/2'|'1/4','downsample_method': 'Nearest'|'Lanczos'
        }){
            super(ctx);

            this['model'] = opts['model'];
this['images'] = opts['images'];
this['steps'] = opts['steps'];
this['pre_downscale'] = opts['pre_downscale'];
this['post_downscale'] = opts['post_downscale'];
this['downsample_method'] = opts['downsample_method']
            

        }

        static defaults = {
            'model':  "last.ckpt",
'steps':  "100",
'pre_downscale':  "None",
'post_downscale':  "None",
'downsample_method':  "Lanczos"
}
},

    /**
     * TODO Docs based on metadata
     */
    'LDSRModelLoader' : class extends Node{
        //Setters
        set 'model'(value : '4x_NMKD-Superscale-SP_178000_G.pth'|'HAT_SRx4_ImageNet-pretrain.pth'|'Real_HAT_GAN_sharper.pth')  { super.$$link(0, value) } 

        //Getters
        get 'UPSCALE_MODEL'() : UPSCALE_MODEL { return [this, 'UPSCALE_MODEL', 0]  as unknown as UPSCALE_MODEL; }

        constructor(opts:{
            'model': '4x_NMKD-Superscale-SP_178000_G.pth'|'HAT_SRx4_ImageNet-pretrain.pth'|'Real_HAT_GAN_sharper.pth'
        }){
            super(ctx);

            this['model'] = opts['model']
            

        }

        static defaults = {
            'model':  "last.ckpt"
}
},

    /**
     * TODO Docs based on metadata
     */
    'LDSRUpscale' : class extends Node{
        //Setters
        set 'upscale_model'(value : UPSCALE_MODEL)  { super.$$link(0, value) } 
set 'images'(value : IMAGE)  { super.$$link(1, value) } 
set 'steps'(value : '25'|'50'|'100'|'250'|'500'|'1000')  { super.$$link(2, value) } 
set 'pre_downscale'(value : 'None'|'1/2'|'1/4')  { super.$$link(3, value) } 
set 'post_downscale'(value : 'None'|'Original Size'|'1/2'|'1/4')  { super.$$link(4, value) } 
set 'downsample_method'(value : 'Nearest'|'Lanczos')  { super.$$link(5, value) } 

        //Getters
        get 'images'() : IMAGE { return [this, 'images', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'upscale_model': UPSCALE_MODEL,'images': IMAGE,'steps': '25'|'50'|'100'|'250'|'500'|'1000','pre_downscale': 'None'|'1/2'|'1/4','post_downscale': 'None'|'Original Size'|'1/2'|'1/4','downsample_method': 'Nearest'|'Lanczos'
        }){
            super(ctx);

            this['upscale_model'] = opts['upscale_model'];
this['images'] = opts['images'];
this['steps'] = opts['steps'];
this['pre_downscale'] = opts['pre_downscale'];
this['post_downscale'] = opts['post_downscale'];
this['downsample_method'] = opts['downsample_method']
            

        }

        static defaults = {
            'steps':  "100",
'pre_downscale':  "None",
'post_downscale':  "None",
'downsample_method':  "Lanczos"
}
},

    /**
     * TODO Docs based on metadata
     */
    'InpaintPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'mask'(value : MASK)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'mask': MASK
        }){
            super(ctx);

            this['image'] = opts['image'];
this['mask'] = opts['mask']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'TilePreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'pyrUp_iters'(value : INT)  { super.$$link(1, value) } 
set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'pyrUp_iters'?: INT,'resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['pyrUp_iters']!==undefined) this['pyrUp_iters'] = opts['pyrUp_iters'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'pyrUp_iters':  3,
'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'TTPlanet_TileGF_Preprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'scale_factor'(value : FLOAT)  { super.$$link(1, value) } 
set 'blur_strength'(value : FLOAT)  { super.$$link(2, value) } 
set 'radius'(value : INT)  { super.$$link(3, value) } 
set 'eps'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'scale_factor': FLOAT,'blur_strength': FLOAT,'radius': INT,'eps': FLOAT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['scale_factor'] = opts['scale_factor'];
this['blur_strength'] = opts['blur_strength'];
this['radius'] = opts['radius'];
this['eps'] = opts['eps']
            

        }

        static defaults = {
            'scale_factor':  1,
'blur_strength':  2,
'radius':  7,
'eps':  0.01
}
},

    /**
     * TODO Docs based on metadata
     */
    'TTPlanet_TileSimple_Preprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'scale_factor'(value : FLOAT)  { super.$$link(1, value) } 
set 'blur_strength'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'scale_factor': FLOAT,'blur_strength': FLOAT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['scale_factor'] = opts['scale_factor'];
this['blur_strength'] = opts['blur_strength']
            

        }

        static defaults = {
            'scale_factor':  1,
'blur_strength':  2
}
},

    /**
     * TODO Docs based on metadata
     */
    'BAE-NormalMapPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'resolution'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'DensePosePreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'model'(value : 'densepose_r50_fpn_dl.torchscript'|'densepose_r101_fpn_dl.torchscript')  { super.$$link(1, value) } 
set 'cmap'(value : 'Viridis (MagicAnimate)'|'Parula (CivitAI)')  { super.$$link(2, value) } 
set 'resolution'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'model'?: 'densepose_r50_fpn_dl.torchscript'|'densepose_r101_fpn_dl.torchscript','cmap'?: 'Viridis (MagicAnimate)'|'Parula (CivitAI)','resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['model']!==undefined) this['model'] = opts['model'];
if(opts['cmap']!==undefined) this['cmap'] = opts['cmap'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'model':  "densepose_r50_fpn_dl.torchscript",
'cmap':  "Viridis (MagicAnimate)",
'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'PiDiNetPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'safe'(value : 'enable'|'disable')  { super.$$link(1, value) } 
set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'safe'?: 'enable'|'disable','resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['safe']!==undefined) this['safe'] = opts['safe'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'safe':  "enable",
'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'ScribblePreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'resolution'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'Scribble_XDoG_Preprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'threshold'(value : INT)  { super.$$link(1, value) } 
set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'threshold'?: INT,'resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['threshold']!==undefined) this['threshold'] = opts['threshold'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'threshold':  32,
'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'Scribble_PiDiNet_Preprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'safe'(value : 'enable'|'disable')  { super.$$link(1, value) } 
set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'safe'?: 'enable'|'disable','resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['safe']!==undefined) this['safe'] = opts['safe'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'safe':  "enable",
'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'SAMPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'resolution'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'LineartStandardPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'guassian_sigma'(value : FLOAT)  { super.$$link(1, value) } 
set 'intensity_threshold'(value : INT)  { super.$$link(2, value) } 
set 'resolution'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'guassian_sigma'?: FLOAT,'intensity_threshold'?: INT,'resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['guassian_sigma']!==undefined) this['guassian_sigma'] = opts['guassian_sigma'];
if(opts['intensity_threshold']!==undefined) this['intensity_threshold'] = opts['intensity_threshold'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'guassian_sigma':  6,
'intensity_threshold':  8,
'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'DSINE-NormalMapPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'fov'(value : FLOAT)  { super.$$link(1, value) } 
set 'iterations'(value : INT)  { super.$$link(2, value) } 
set 'resolution'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'fov'?: FLOAT,'iterations'?: INT,'resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['fov']!==undefined) this['fov'] = opts['fov'];
if(opts['iterations']!==undefined) this['iterations'] = opts['iterations'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'fov':  60,
'iterations':  5,
'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'TEEDPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'safe_steps'(value : INT)  { super.$$link(1, value) } 
set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'safe_steps'?: INT,'resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['safe_steps']!==undefined) this['safe_steps'] = opts['safe_steps'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'safe_steps':  2,
'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'M-LSDPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'score_threshold'(value : FLOAT)  { super.$$link(1, value) } 
set 'dist_threshold'(value : FLOAT)  { super.$$link(2, value) } 
set 'resolution'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'score_threshold'?: FLOAT,'dist_threshold'?: FLOAT,'resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['score_threshold']!==undefined) this['score_threshold'] = opts['score_threshold'];
if(opts['dist_threshold']!==undefined) this['dist_threshold'] = opts['dist_threshold'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'score_threshold':  0.1,
'dist_threshold':  0.1,
'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'AnyLineArtPreprocessor_aux' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'merge_with_lineart'(value : 'lineart_standard'|'lineart_realisitic'|'lineart_anime'|'manga_line')  { super.$$link(1, value) } 
set 'resolution'(value : INT)  { super.$$link(2, value) } 
set 'lineart_lower_bound'(value : FLOAT)  { super.$$link(3, value) } 
set 'lineart_upper_bound'(value : FLOAT)  { super.$$link(4, value) } 
set 'object_min_size'(value : INT)  { super.$$link(5, value) } 
set 'object_connectivity'(value : INT)  { super.$$link(6, value) } 

        //Getters
        get 'image'() : IMAGE { return [this, 'image', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'merge_with_lineart': 'lineart_standard'|'lineart_realisitic'|'lineart_anime'|'manga_line','resolution': INT,'lineart_lower_bound'?: FLOAT,'lineart_upper_bound'?: FLOAT,'object_min_size'?: INT,'object_connectivity'?: INT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['merge_with_lineart'] = opts['merge_with_lineart'];
this['resolution'] = opts['resolution']
            if(opts['lineart_lower_bound']!==undefined) this['lineart_lower_bound'] = opts['lineart_lower_bound'];
if(opts['lineart_upper_bound']!==undefined) this['lineart_upper_bound'] = opts['lineart_upper_bound'];
if(opts['object_min_size']!==undefined) this['object_min_size'] = opts['object_min_size'];
if(opts['object_connectivity']!==undefined) this['object_connectivity'] = opts['object_connectivity']

        }

        static defaults = {
            'merge_with_lineart':  "lineart_standard",
'resolution':  1280,
'lineart_lower_bound':  0,
'lineart_upper_bound':  1,
'object_min_size':  36,
'object_connectivity':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'Zoe-DepthMapPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'resolution'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'Metric3D-DepthMapPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'backbone'(value : 'vit-small'|'vit-large'|'vit-giant2')  { super.$$link(1, value) } 
set 'fx'(value : INT)  { super.$$link(2, value) } 
set 'fy'(value : INT)  { super.$$link(3, value) } 
set 'resolution'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'backbone'?: 'vit-small'|'vit-large'|'vit-giant2','fx'?: INT,'fy'?: INT,'resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['backbone']!==undefined) this['backbone'] = opts['backbone'];
if(opts['fx']!==undefined) this['fx'] = opts['fx'];
if(opts['fy']!==undefined) this['fy'] = opts['fy'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'backbone':  "vit-small",
'fx':  1000,
'fy':  1000,
'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'Metric3D-NormalMapPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'backbone'(value : 'vit-small'|'vit-large'|'vit-giant2')  { super.$$link(1, value) } 
set 'fx'(value : INT)  { super.$$link(2, value) } 
set 'fy'(value : INT)  { super.$$link(3, value) } 
set 'resolution'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'backbone'?: 'vit-small'|'vit-large'|'vit-giant2','fx'?: INT,'fy'?: INT,'resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['backbone']!==undefined) this['backbone'] = opts['backbone'];
if(opts['fx']!==undefined) this['fx'] = opts['fx'];
if(opts['fy']!==undefined) this['fy'] = opts['fy'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'backbone':  "vit-small",
'fx':  1000,
'fy':  1000,
'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'DWPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'detect_hand'(value : 'enable'|'disable')  { super.$$link(1, value) } 
set 'detect_body'(value : 'enable'|'disable')  { super.$$link(2, value) } 
set 'detect_face'(value : 'enable'|'disable')  { super.$$link(3, value) } 
set 'resolution'(value : INT)  { super.$$link(4, value) } 
set 'bbox_detector'(value : 'yolox_l.torchscript.pt'|'yolox_l.onnx'|'yolo_nas_l_fp16.onnx'|'yolo_nas_m_fp16.onnx'|'yolo_nas_s_fp16.onnx')  { super.$$link(5, value) } 
set 'pose_estimator'(value : 'dw-ll_ucoco_384_bs5.torchscript.pt'|'dw-ll_ucoco_384.onnx'|'dw-ll_ucoco.onnx')  { super.$$link(6, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }
get 'POSE_KEYPOINT'() : POSE_KEYPOINT { return [this, 'POSE_KEYPOINT', 1]  as unknown as POSE_KEYPOINT; }

        constructor(opts:{
            'image': IMAGE,'detect_hand'?: 'enable'|'disable','detect_body'?: 'enable'|'disable','detect_face'?: 'enable'|'disable','resolution'?: INT,'bbox_detector'?: 'yolox_l.torchscript.pt'|'yolox_l.onnx'|'yolo_nas_l_fp16.onnx'|'yolo_nas_m_fp16.onnx'|'yolo_nas_s_fp16.onnx','pose_estimator'?: 'dw-ll_ucoco_384_bs5.torchscript.pt'|'dw-ll_ucoco_384.onnx'|'dw-ll_ucoco.onnx'
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['detect_hand']!==undefined) this['detect_hand'] = opts['detect_hand'];
if(opts['detect_body']!==undefined) this['detect_body'] = opts['detect_body'];
if(opts['detect_face']!==undefined) this['detect_face'] = opts['detect_face'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution'];
if(opts['bbox_detector']!==undefined) this['bbox_detector'] = opts['bbox_detector'];
if(opts['pose_estimator']!==undefined) this['pose_estimator'] = opts['pose_estimator']

        }

        static defaults = {
            'detect_hand':  "enable",
'detect_body':  "enable",
'detect_face':  "enable",
'resolution':  512,
'bbox_detector':  "yolox_l.onnx",
'pose_estimator':  "dw-ll_ucoco_384_bs5.torchscript.pt"
}
},

    /**
     * TODO Docs based on metadata
     */
    'AnimalPosePreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'bbox_detector'(value : 'yolox_l.torchscript.pt'|'yolox_l.onnx'|'yolo_nas_l_fp16.onnx'|'yolo_nas_m_fp16.onnx'|'yolo_nas_s_fp16.onnx')  { super.$$link(1, value) } 
set 'pose_estimator'(value : 'rtmpose-m_ap10k_256_bs5.torchscript.pt'|'rtmpose-m_ap10k_256.onnx')  { super.$$link(2, value) } 
set 'resolution'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }
get 'POSE_KEYPOINT'() : POSE_KEYPOINT { return [this, 'POSE_KEYPOINT', 1]  as unknown as POSE_KEYPOINT; }

        constructor(opts:{
            'image': IMAGE,'bbox_detector'?: 'yolox_l.torchscript.pt'|'yolox_l.onnx'|'yolo_nas_l_fp16.onnx'|'yolo_nas_m_fp16.onnx'|'yolo_nas_s_fp16.onnx','pose_estimator'?: 'rtmpose-m_ap10k_256_bs5.torchscript.pt'|'rtmpose-m_ap10k_256.onnx','resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['bbox_detector']!==undefined) this['bbox_detector'] = opts['bbox_detector'];
if(opts['pose_estimator']!==undefined) this['pose_estimator'] = opts['pose_estimator'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'bbox_detector':  "yolox_l.torchscript.pt",
'pose_estimator':  "rtmpose-m_ap10k_256_bs5.torchscript.pt",
'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'HEDPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'safe'(value : 'enable'|'disable')  { super.$$link(1, value) } 
set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'safe'?: 'enable'|'disable','resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['safe']!==undefined) this['safe'] = opts['safe'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'safe':  "enable",
'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'FakeScribblePreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'safe'(value : 'enable'|'disable')  { super.$$link(1, value) } 
set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'safe'?: 'enable'|'disable','resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['safe']!==undefined) this['safe'] = opts['safe'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'safe':  "enable",
'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'ColorPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'resolution'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'MeshGraphormer-DepthMapPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'mask_bbox_padding'(value : INT)  { super.$$link(1, value) } 
set 'resolution'(value : INT)  { super.$$link(2, value) } 
set 'mask_type'(value : 'based_on_depth'|'tight_bboxes'|'original')  { super.$$link(3, value) } 
set 'mask_expand'(value : INT)  { super.$$link(4, value) } 
set 'rand_seed'(value : INT)  { super.$$link(5, value) } 
set 'detect_thr'(value : FLOAT)  { super.$$link(6, value) } 
set 'presence_thr'(value : FLOAT)  { super.$$link(7, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }
get 'INPAINTING_MASK'() : MASK { return [this, 'INPAINTING_MASK', 1]  as unknown as MASK; }

        constructor(opts:{
            'image': IMAGE,'mask_bbox_padding'?: INT,'resolution'?: INT,'mask_type'?: 'based_on_depth'|'tight_bboxes'|'original','mask_expand'?: INT,'rand_seed'?: INT,'detect_thr'?: FLOAT,'presence_thr'?: FLOAT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['mask_bbox_padding']!==undefined) this['mask_bbox_padding'] = opts['mask_bbox_padding'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution'];
if(opts['mask_type']!==undefined) this['mask_type'] = opts['mask_type'];
if(opts['mask_expand']!==undefined) this['mask_expand'] = opts['mask_expand'];
if(opts['rand_seed']!==undefined) this['rand_seed'] = opts['rand_seed'];
if(opts['detect_thr']!==undefined) this['detect_thr'] = opts['detect_thr'];
if(opts['presence_thr']!==undefined) this['presence_thr'] = opts['presence_thr']

        }

        static defaults = {
            'mask_bbox_padding':  30,
'resolution':  512,
'mask_type':  "based_on_depth",
'mask_expand':  5,
'rand_seed':  88,
'detect_thr':  0.6,
'presence_thr':  0.6
}
},

    /**
     * TODO Docs based on metadata
     */
    'MeshGraphormer+ImpactDetector-DepthMapPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'bbox_detector'(value : BBOX_DETECTOR)  { super.$$link(1, value) } 
set 'bbox_threshold'(value : FLOAT)  { super.$$link(2, value) } 
set 'bbox_dilation'(value : INT)  { super.$$link(3, value) } 
set 'bbox_crop_factor'(value : FLOAT)  { super.$$link(4, value) } 
set 'drop_size'(value : INT)  { super.$$link(5, value) } 
set 'mask_bbox_padding'(value : INT)  { super.$$link(6, value) } 
set 'mask_type'(value : 'based_on_depth'|'tight_bboxes'|'original')  { super.$$link(7, value) } 
set 'mask_expand'(value : INT)  { super.$$link(8, value) } 
set 'rand_seed'(value : INT)  { super.$$link(9, value) } 
set 'resolution'(value : INT)  { super.$$link(10, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }
get 'INPAINTING_MASK'() : MASK { return [this, 'INPAINTING_MASK', 1]  as unknown as MASK; }

        constructor(opts:{
            'image': IMAGE,'bbox_detector': BBOX_DETECTOR,'bbox_threshold'?: FLOAT,'bbox_dilation'?: INT,'bbox_crop_factor'?: FLOAT,'drop_size'?: INT,'mask_bbox_padding'?: INT,'mask_type'?: 'based_on_depth'|'tight_bboxes'|'original','mask_expand'?: INT,'rand_seed'?: INT,'resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['bbox_detector'] = opts['bbox_detector']
            if(opts['bbox_threshold']!==undefined) this['bbox_threshold'] = opts['bbox_threshold'];
if(opts['bbox_dilation']!==undefined) this['bbox_dilation'] = opts['bbox_dilation'];
if(opts['bbox_crop_factor']!==undefined) this['bbox_crop_factor'] = opts['bbox_crop_factor'];
if(opts['drop_size']!==undefined) this['drop_size'] = opts['drop_size'];
if(opts['mask_bbox_padding']!==undefined) this['mask_bbox_padding'] = opts['mask_bbox_padding'];
if(opts['mask_type']!==undefined) this['mask_type'] = opts['mask_type'];
if(opts['mask_expand']!==undefined) this['mask_expand'] = opts['mask_expand'];
if(opts['rand_seed']!==undefined) this['rand_seed'] = opts['rand_seed'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'bbox_threshold':  0.5,
'bbox_dilation':  10,
'bbox_crop_factor':  3,
'drop_size':  10,
'mask_bbox_padding':  30,
'mask_type':  "based_on_depth",
'mask_expand':  5,
'rand_seed':  88,
'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'ImageLuminanceDetector' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'gamma_correction'(value : FLOAT)  { super.$$link(1, value) } 
set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'gamma_correction'?: FLOAT,'resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['gamma_correction']!==undefined) this['gamma_correction'] = opts['gamma_correction'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'gamma_correction':  1,
'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'ImageIntensityDetector' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'gamma_correction'(value : FLOAT)  { super.$$link(1, value) } 
set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'gamma_correction'?: FLOAT,'resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['gamma_correction']!==undefined) this['gamma_correction'] = opts['gamma_correction'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'gamma_correction':  1,
'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'LineArtPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'coarse'(value : 'disable'|'enable')  { super.$$link(1, value) } 
set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'coarse'?: 'disable'|'enable','resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['coarse']!==undefined) this['coarse'] = opts['coarse'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'coarse':  "disable",
'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'MediaPipe-FaceMeshPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'max_faces'(value : INT)  { super.$$link(1, value) } 
set 'min_confidence'(value : FLOAT)  { super.$$link(2, value) } 
set 'resolution'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'max_faces'?: INT,'min_confidence'?: FLOAT,'resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['max_faces']!==undefined) this['max_faces'] = opts['max_faces'];
if(opts['min_confidence']!==undefined) this['min_confidence'] = opts['min_confidence'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'max_faces':  10,
'min_confidence':  0.5,
'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'BinaryPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'bin_threshold'(value : INT)  { super.$$link(1, value) } 
set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'bin_threshold'?: INT,'resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['bin_threshold']!==undefined) this['bin_threshold'] = opts['bin_threshold'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'bin_threshold':  100,
'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'OneFormer-COCO-SemSegPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'resolution'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'OneFormer-ADE20K-SemSegPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'resolution'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'Unimatch_OptFlowPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'ckpt_name'(value : 'gmflow-scale1-mixdata.pth'|'gmflow-scale2-mixdata.pth'|'gmflow-scale2-regrefine6-mixdata.pth')  { super.$$link(1, value) } 
set 'backward_flow'(value : BOOLEAN)  { super.$$link(2, value) } 
set 'bidirectional_flow'(value : BOOLEAN)  { super.$$link(3, value) } 

        //Getters
        get 'OPTICAL_FLOW'() : OPTICAL_FLOW { return [this, 'OPTICAL_FLOW', 0]  as unknown as OPTICAL_FLOW; }
get 'PREVIEW_IMAGE'() : IMAGE { return [this, 'PREVIEW_IMAGE', 1]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'ckpt_name': 'gmflow-scale1-mixdata.pth'|'gmflow-scale2-mixdata.pth'|'gmflow-scale2-regrefine6-mixdata.pth','backward_flow': BOOLEAN,'bidirectional_flow': BOOLEAN
        }){
            super(ctx);

            this['image'] = opts['image'];
this['ckpt_name'] = opts['ckpt_name'];
this['backward_flow'] = opts['backward_flow'];
this['bidirectional_flow'] = opts['bidirectional_flow']
            

        }

        static defaults = {
            'ckpt_name':  "gmflow-scale2-regrefine6-mixdata.pth",
'backward_flow':  false,
'bidirectional_flow':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'MaskOptFlow' : class extends Node{
        //Setters
        set 'optical_flow'(value : OPTICAL_FLOW)  { super.$$link(0, value) } 
set 'mask'(value : MASK)  { super.$$link(1, value) } 

        //Getters
        get 'OPTICAL_FLOW'() : OPTICAL_FLOW { return [this, 'OPTICAL_FLOW', 0]  as unknown as OPTICAL_FLOW; }
get 'PREVIEW_IMAGE'() : IMAGE { return [this, 'PREVIEW_IMAGE', 1]  as unknown as IMAGE; }

        constructor(opts:{
            'optical_flow': OPTICAL_FLOW,'mask': MASK
        }){
            super(ctx);

            this['optical_flow'] = opts['optical_flow'];
this['mask'] = opts['mask']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'AnimeFace_SemSegPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'remove_background_using_abg'(value : BOOLEAN)  { super.$$link(1, value) } 
set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }
get 'ABG_CHARACTER_MASK (MASK)'() : MASK { return [this, 'ABG_CHARACTER_MASK (MASK)', 1]  as unknown as MASK; }

        constructor(opts:{
            'image': IMAGE,'remove_background_using_abg'?: BOOLEAN,'resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['remove_background_using_abg']!==undefined) this['remove_background_using_abg'] = opts['remove_background_using_abg'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'remove_background_using_abg':  true,
'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'SavePoseKpsAsJsonFile' : class extends Node{
        //Setters
        set 'pose_kps'(value : POSE_KEYPOINT)  { super.$$link(0, value) } 
set 'filename_prefix'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        

        constructor(opts:{
            'pose_kps': POSE_KEYPOINT,'filename_prefix': STRING
        }){
            super(ctx);

            this['pose_kps'] = opts['pose_kps'];
this['filename_prefix'] = opts['filename_prefix']
            

        }

        static defaults = {
            'filename_prefix':  "PoseKeypoint"
}
},

    /**
     * TODO Docs based on metadata
     */
    'FacialPartColoringFromPoseKps' : class extends Node{
        //Setters
        set 'pose_kps'(value : POSE_KEYPOINT)  { super.$$link(0, value) } 
set 'mode'(value : 'point'|'polygon')  { super.$$link(1, value) } 
set 'skin'(value : STRING)  { super.$$link(2, value) } 
set 'left_eye'(value : STRING)  { super.$$link(3, value) } 
set 'right_eye'(value : STRING)  { super.$$link(4, value) } 
set 'nose'(value : STRING)  { super.$$link(5, value) } 
set 'upper_lip'(value : STRING)  { super.$$link(6, value) } 
set 'inner_mouth'(value : STRING)  { super.$$link(7, value) } 
set 'lower_lip'(value : STRING)  { super.$$link(8, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'pose_kps': POSE_KEYPOINT,'mode': 'point'|'polygon','skin': STRING,'left_eye': STRING,'right_eye': STRING,'nose': STRING,'upper_lip': STRING,'inner_mouth': STRING,'lower_lip': STRING
        }){
            super(ctx);

            this['pose_kps'] = opts['pose_kps'];
this['mode'] = opts['mode'];
this['skin'] = opts['skin'];
this['left_eye'] = opts['left_eye'];
this['right_eye'] = opts['right_eye'];
this['nose'] = opts['nose'];
this['upper_lip'] = opts['upper_lip'];
this['inner_mouth'] = opts['inner_mouth'];
this['lower_lip'] = opts['lower_lip']
            

        }

        static defaults = {
            'mode':  "polygon",
'skin':  "rgb(0, 153, 255)",
'left_eye':  "rgb(0, 204, 153)",
'right_eye':  "rgb(255, 153, 0)",
'nose':  "rgb(255, 102, 255)",
'upper_lip':  "rgb(102, 0, 51)",
'inner_mouth':  "rgb(255, 204, 255)",
'lower_lip':  "rgb(255, 0, 102)"
}
},

    /**
     * TODO Docs based on metadata
     */
    'UpperBodyTrackingFromPoseKps' : class extends Node{
        //Setters
        set 'pose_kps'(value : POSE_KEYPOINT)  { super.$$link(0, value) } 
set 'id_include'(value : STRING)  { super.$$link(1, value) } 
set 'Head_width_height'(value : STRING)  { super.$$link(2, value) } 
set 'Neck_width_height'(value : STRING)  { super.$$link(3, value) } 
set 'Shoulder_width_height'(value : STRING)  { super.$$link(4, value) } 
set 'Torso_width_height'(value : STRING)  { super.$$link(5, value) } 
set 'RArm_width_height'(value : STRING)  { super.$$link(6, value) } 
set 'RForearm_width_height'(value : STRING)  { super.$$link(7, value) } 
set 'LArm_width_height'(value : STRING)  { super.$$link(8, value) } 
set 'LForearm_width_height'(value : STRING)  { super.$$link(9, value) } 

        //Getters
        get 'tracking'() : TRACKING { return [this, 'tracking', 0]  as unknown as TRACKING; }
get 'prompt'() : STRING { return [this, 'prompt', 1]  as unknown as STRING; }

        constructor(opts:{
            'pose_kps': POSE_KEYPOINT,'id_include': STRING,'Head_width_height': STRING,'Neck_width_height': STRING,'Shoulder_width_height': STRING,'Torso_width_height': STRING,'RArm_width_height': STRING,'RForearm_width_height': STRING,'LArm_width_height': STRING,'LForearm_width_height': STRING
        }){
            super(ctx);

            this['pose_kps'] = opts['pose_kps'];
this['id_include'] = opts['id_include'];
this['Head_width_height'] = opts['Head_width_height'];
this['Neck_width_height'] = opts['Neck_width_height'];
this['Shoulder_width_height'] = opts['Shoulder_width_height'];
this['Torso_width_height'] = opts['Torso_width_height'];
this['RArm_width_height'] = opts['RArm_width_height'];
this['RForearm_width_height'] = opts['RForearm_width_height'];
this['LArm_width_height'] = opts['LArm_width_height'];
this['LForearm_width_height'] = opts['LForearm_width_height']
            

        }

        static defaults = {
            'id_include':  "",
'Head_width_height':  "256, 256",
'Neck_width_height':  "100, 100",
'Shoulder_width_height':  "",
'Torso_width_height':  "350, 450",
'RArm_width_height':  "128, 256",
'RForearm_width_height':  "128, 256",
'LArm_width_height':  "128, 256",
'LForearm_width_height':  "128, 256"
}
},

    /**
     * TODO Docs based on metadata
     */
    'RenderPeopleKps' : class extends Node{
        //Setters
        set 'kps'(value : POSE_KEYPOINT)  { super.$$link(0, value) } 
set 'render_body'(value : BOOLEAN)  { super.$$link(1, value) } 
set 'render_hand'(value : BOOLEAN)  { super.$$link(2, value) } 
set 'render_face'(value : BOOLEAN)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'kps': POSE_KEYPOINT,'render_body': BOOLEAN,'render_hand': BOOLEAN,'render_face': BOOLEAN
        }){
            super(ctx);

            this['kps'] = opts['kps'];
this['render_body'] = opts['render_body'];
this['render_hand'] = opts['render_hand'];
this['render_face'] = opts['render_face']
            

        }

        static defaults = {
            'render_body':  true,
'render_hand':  true,
'render_face':  true
}
},

    /**
     * TODO Docs based on metadata
     */
    'RenderAnimalKps' : class extends Node{
        //Setters
        set 'kps'(value : POSE_KEYPOINT)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'kps': POSE_KEYPOINT
        }){
            super(ctx);

            this['kps'] = opts['kps']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ShufflePreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'resolution'(value : INT)  { super.$$link(1, value) } 
set 'seed'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'resolution': INT,'seed': INT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['resolution'] = opts['resolution'];
this['seed'] = opts['seed']
            

        }

        static defaults = {
            'resolution':  512,
'seed':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'CannyEdgePreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'low_threshold'(value : INT)  { super.$$link(1, value) } 
set 'high_threshold'(value : INT)  { super.$$link(2, value) } 
set 'resolution'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'low_threshold'?: INT,'high_threshold'?: INT,'resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['low_threshold']!==undefined) this['low_threshold'] = opts['low_threshold'];
if(opts['high_threshold']!==undefined) this['high_threshold'] = opts['high_threshold'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'low_threshold':  100,
'high_threshold':  200,
'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'OpenposePreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'detect_hand'(value : 'enable'|'disable')  { super.$$link(1, value) } 
set 'detect_body'(value : 'enable'|'disable')  { super.$$link(2, value) } 
set 'detect_face'(value : 'enable'|'disable')  { super.$$link(3, value) } 
set 'resolution'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }
get 'POSE_KEYPOINT'() : POSE_KEYPOINT { return [this, 'POSE_KEYPOINT', 1]  as unknown as POSE_KEYPOINT; }

        constructor(opts:{
            'image': IMAGE,'detect_hand'?: 'enable'|'disable','detect_body'?: 'enable'|'disable','detect_face'?: 'enable'|'disable','resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['detect_hand']!==undefined) this['detect_hand'] = opts['detect_hand'];
if(opts['detect_body']!==undefined) this['detect_body'] = opts['detect_body'];
if(opts['detect_face']!==undefined) this['detect_face'] = opts['detect_face'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'detect_hand':  "enable",
'detect_body':  "enable",
'detect_face':  "enable",
'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'DepthAnythingPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'ckpt_name'(value : 'depth_anything_vitl14.pth'|'depth_anything_vitb14.pth'|'depth_anything_vits14.pth')  { super.$$link(1, value) } 
set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'ckpt_name'?: 'depth_anything_vitl14.pth'|'depth_anything_vitb14.pth'|'depth_anything_vits14.pth','resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['ckpt_name']!==undefined) this['ckpt_name'] = opts['ckpt_name'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'ckpt_name':  "depth_anything_vitl14.pth",
'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'Zoe_DepthAnythingPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'environment'(value : 'indoor'|'outdoor')  { super.$$link(1, value) } 
set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'environment'?: 'indoor'|'outdoor','resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['environment']!==undefined) this['environment'] = opts['environment'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'environment':  "indoor",
'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'DepthAnythingV2Preprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'ckpt_name'(value : 'depth_anything_v2_vitg.pth'|'depth_anything_v2_vitl.pth'|'depth_anything_v2_vitb.pth'|'depth_anything_v2_vits.pth')  { super.$$link(1, value) } 
set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'ckpt_name'?: 'depth_anything_v2_vitg.pth'|'depth_anything_v2_vitl.pth'|'depth_anything_v2_vitb.pth'|'depth_anything_v2_vits.pth','resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['ckpt_name']!==undefined) this['ckpt_name'] = opts['ckpt_name'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'ckpt_name':  "depth_anything_v2_vitl.pth",
'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'DiffusionEdge_Preprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'environment'(value : 'indoor'|'urban'|'natrual')  { super.$$link(1, value) } 
set 'patch_batch_size'(value : INT)  { super.$$link(2, value) } 
set 'resolution'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'environment'?: 'indoor'|'urban'|'natrual','patch_batch_size'?: INT,'resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['environment']!==undefined) this['environment'] = opts['environment'];
if(opts['patch_batch_size']!==undefined) this['patch_batch_size'] = opts['patch_batch_size'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'environment':  "indoor",
'patch_batch_size':  4,
'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'UniFormer-SemSegPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'resolution'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'SemSegPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'resolution'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'LeReS-DepthMapPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'rm_nearest'(value : FLOAT)  { super.$$link(1, value) } 
set 'rm_background'(value : FLOAT)  { super.$$link(2, value) } 
set 'boost'(value : 'enable'|'disable')  { super.$$link(3, value) } 
set 'resolution'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'rm_nearest'?: FLOAT,'rm_background'?: FLOAT,'boost'?: 'enable'|'disable','resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['rm_nearest']!==undefined) this['rm_nearest'] = opts['rm_nearest'];
if(opts['rm_background']!==undefined) this['rm_background'] = opts['rm_background'];
if(opts['boost']!==undefined) this['boost'] = opts['boost'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'rm_nearest':  0,
'rm_background':  0,
'boost':  "disable",
'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'Manga2Anime_LineArt_Preprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'resolution'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'MiDaS-NormalMapPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'a'(value : FLOAT)  { super.$$link(1, value) } 
set 'bg_threshold'(value : FLOAT)  { super.$$link(2, value) } 
set 'resolution'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'a'?: FLOAT,'bg_threshold'?: FLOAT,'resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['a']!==undefined) this['a'] = opts['a'];
if(opts['bg_threshold']!==undefined) this['bg_threshold'] = opts['bg_threshold'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'a':  6.283185307179586,
'bg_threshold':  0.1,
'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'MiDaS-DepthMapPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'a'(value : FLOAT)  { super.$$link(1, value) } 
set 'bg_threshold'(value : FLOAT)  { super.$$link(2, value) } 
set 'resolution'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'a'?: FLOAT,'bg_threshold'?: FLOAT,'resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['a']!==undefined) this['a'] = opts['a'];
if(opts['bg_threshold']!==undefined) this['bg_threshold'] = opts['bg_threshold'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'a':  6.283185307179586,
'bg_threshold':  0.1,
'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'AnimeLineArtPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'resolution'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'AIO_Preprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'preprocessor'(value : 'none'|'TilePreprocessor'|'TTPlanet_TileGF_Preprocessor'|'TTPlanet_TileSimple_Preprocessor'|'BAE-NormalMapPreprocessor'|'DensePosePreprocessor'|'PiDiNetPreprocessor'|'ScribblePreprocessor'|'Scribble_XDoG_Preprocessor'|'Scribble_PiDiNet_Preprocessor'|'SAMPreprocessor'|'LineartStandardPreprocessor'|'DSINE-NormalMapPreprocessor'|'TEEDPreprocessor'|'M-LSDPreprocessor'|'AnyLineArtPreprocessor_aux'|'Zoe-DepthMapPreprocessor'|'Metric3D-DepthMapPreprocessor'|'Metric3D-NormalMapPreprocessor'|'DWPreprocessor'|'AnimalPosePreprocessor'|'HEDPreprocessor'|'FakeScribblePreprocessor'|'ColorPreprocessor'|'MeshGraphormer-DepthMapPreprocessor'|'MeshGraphormer+ImpactDetector-DepthMapPreprocessor'|'ImageLuminanceDetector'|'ImageIntensityDetector'|'LineArtPreprocessor'|'MediaPipe-FaceMeshPreprocessor'|'BinaryPreprocessor'|'OneFormer-COCO-SemSegPreprocessor'|'OneFormer-ADE20K-SemSegPreprocessor'|'Unimatch_OptFlowPreprocessor'|'MaskOptFlow'|'AnimeFace_SemSegPreprocessor'|'SavePoseKpsAsJsonFile'|'FacialPartColoringFromPoseKps'|'UpperBodyTrackingFromPoseKps'|'RenderPeopleKps'|'RenderAnimalKps'|'ShufflePreprocessor'|'CannyEdgePreprocessor'|'OpenposePreprocessor'|'DepthAnythingPreprocessor'|'Zoe_DepthAnythingPreprocessor'|'DepthAnythingV2Preprocessor'|'DiffusionEdge_Preprocessor'|'UniFormer-SemSegPreprocessor'|'SemSegPreprocessor'|'LeReS-DepthMapPreprocessor'|'Manga2Anime_LineArt_Preprocessor'|'MiDaS-NormalMapPreprocessor'|'MiDaS-DepthMapPreprocessor'|'AnimeLineArtPreprocessor')  { super.$$link(1, value) } 
set 'resolution'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'preprocessor'?: 'none'|'TilePreprocessor'|'TTPlanet_TileGF_Preprocessor'|'TTPlanet_TileSimple_Preprocessor'|'BAE-NormalMapPreprocessor'|'DensePosePreprocessor'|'PiDiNetPreprocessor'|'ScribblePreprocessor'|'Scribble_XDoG_Preprocessor'|'Scribble_PiDiNet_Preprocessor'|'SAMPreprocessor'|'LineartStandardPreprocessor'|'DSINE-NormalMapPreprocessor'|'TEEDPreprocessor'|'M-LSDPreprocessor'|'AnyLineArtPreprocessor_aux'|'Zoe-DepthMapPreprocessor'|'Metric3D-DepthMapPreprocessor'|'Metric3D-NormalMapPreprocessor'|'DWPreprocessor'|'AnimalPosePreprocessor'|'HEDPreprocessor'|'FakeScribblePreprocessor'|'ColorPreprocessor'|'MeshGraphormer-DepthMapPreprocessor'|'MeshGraphormer+ImpactDetector-DepthMapPreprocessor'|'ImageLuminanceDetector'|'ImageIntensityDetector'|'LineArtPreprocessor'|'MediaPipe-FaceMeshPreprocessor'|'BinaryPreprocessor'|'OneFormer-COCO-SemSegPreprocessor'|'OneFormer-ADE20K-SemSegPreprocessor'|'Unimatch_OptFlowPreprocessor'|'MaskOptFlow'|'AnimeFace_SemSegPreprocessor'|'SavePoseKpsAsJsonFile'|'FacialPartColoringFromPoseKps'|'UpperBodyTrackingFromPoseKps'|'RenderPeopleKps'|'RenderAnimalKps'|'ShufflePreprocessor'|'CannyEdgePreprocessor'|'OpenposePreprocessor'|'DepthAnythingPreprocessor'|'Zoe_DepthAnythingPreprocessor'|'DepthAnythingV2Preprocessor'|'DiffusionEdge_Preprocessor'|'UniFormer-SemSegPreprocessor'|'SemSegPreprocessor'|'LeReS-DepthMapPreprocessor'|'Manga2Anime_LineArt_Preprocessor'|'MiDaS-NormalMapPreprocessor'|'MiDaS-DepthMapPreprocessor'|'AnimeLineArtPreprocessor','resolution'?: INT
        }){
            super(ctx);

            this['image'] = opts['image']
            if(opts['preprocessor']!==undefined) this['preprocessor'] = opts['preprocessor'];
if(opts['resolution']!==undefined) this['resolution'] = opts['resolution']

        }

        static defaults = {
            'preprocessor':  "none",
'resolution':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'ControlNetPreprocessorSelector' : class extends Node{
        //Setters
        set 'preprocessor'(value : 'none'|'TilePreprocessor'|'TTPlanet_TileGF_Preprocessor'|'TTPlanet_TileSimple_Preprocessor'|'BAE-NormalMapPreprocessor'|'DensePosePreprocessor'|'PiDiNetPreprocessor'|'ScribblePreprocessor'|'Scribble_XDoG_Preprocessor'|'Scribble_PiDiNet_Preprocessor'|'SAMPreprocessor'|'LineartStandardPreprocessor'|'DSINE-NormalMapPreprocessor'|'TEEDPreprocessor'|'M-LSDPreprocessor'|'AnyLineArtPreprocessor_aux'|'Zoe-DepthMapPreprocessor'|'Metric3D-DepthMapPreprocessor'|'Metric3D-NormalMapPreprocessor'|'DWPreprocessor'|'AnimalPosePreprocessor'|'HEDPreprocessor'|'FakeScribblePreprocessor'|'ColorPreprocessor'|'MeshGraphormer-DepthMapPreprocessor'|'MeshGraphormer+ImpactDetector-DepthMapPreprocessor'|'ImageLuminanceDetector'|'ImageIntensityDetector'|'LineArtPreprocessor'|'MediaPipe-FaceMeshPreprocessor'|'BinaryPreprocessor'|'OneFormer-COCO-SemSegPreprocessor'|'OneFormer-ADE20K-SemSegPreprocessor'|'Unimatch_OptFlowPreprocessor'|'MaskOptFlow'|'AnimeFace_SemSegPreprocessor'|'SavePoseKpsAsJsonFile'|'FacialPartColoringFromPoseKps'|'UpperBodyTrackingFromPoseKps'|'RenderPeopleKps'|'RenderAnimalKps'|'ShufflePreprocessor'|'CannyEdgePreprocessor'|'OpenposePreprocessor'|'DepthAnythingPreprocessor'|'Zoe_DepthAnythingPreprocessor'|'DepthAnythingV2Preprocessor'|'DiffusionEdge_Preprocessor'|'UniFormer-SemSegPreprocessor'|'SemSegPreprocessor'|'LeReS-DepthMapPreprocessor'|'Manga2Anime_LineArt_Preprocessor'|'MiDaS-NormalMapPreprocessor'|'MiDaS-DepthMapPreprocessor'|'AnimeLineArtPreprocessor')  { super.$$link(0, value) } 

        //Getters
        get 'preprocessor'() : 'none'|'TilePreprocessor'|'TTPlanet_TileGF_Preprocessor'|'TTPlanet_TileSimple_Preprocessor'|'BAE-NormalMapPreprocessor'|'DensePosePreprocessor'|'PiDiNetPreprocessor'|'ScribblePreprocessor'|'Scribble_XDoG_Preprocessor'|'Scribble_PiDiNet_Preprocessor'|'SAMPreprocessor'|'LineartStandardPreprocessor'|'DSINE-NormalMapPreprocessor'|'TEEDPreprocessor'|'M-LSDPreprocessor'|'AnyLineArtPreprocessor_aux'|'Zoe-DepthMapPreprocessor'|'Metric3D-DepthMapPreprocessor'|'Metric3D-NormalMapPreprocessor'|'DWPreprocessor'|'AnimalPosePreprocessor'|'HEDPreprocessor'|'FakeScribblePreprocessor'|'ColorPreprocessor'|'MeshGraphormer-DepthMapPreprocessor'|'MeshGraphormer+ImpactDetector-DepthMapPreprocessor'|'ImageLuminanceDetector'|'ImageIntensityDetector'|'LineArtPreprocessor'|'MediaPipe-FaceMeshPreprocessor'|'BinaryPreprocessor'|'OneFormer-COCO-SemSegPreprocessor'|'OneFormer-ADE20K-SemSegPreprocessor'|'Unimatch_OptFlowPreprocessor'|'MaskOptFlow'|'AnimeFace_SemSegPreprocessor'|'SavePoseKpsAsJsonFile'|'FacialPartColoringFromPoseKps'|'UpperBodyTrackingFromPoseKps'|'RenderPeopleKps'|'RenderAnimalKps'|'ShufflePreprocessor'|'CannyEdgePreprocessor'|'OpenposePreprocessor'|'DepthAnythingPreprocessor'|'Zoe_DepthAnythingPreprocessor'|'DepthAnythingV2Preprocessor'|'DiffusionEdge_Preprocessor'|'UniFormer-SemSegPreprocessor'|'SemSegPreprocessor'|'LeReS-DepthMapPreprocessor'|'Manga2Anime_LineArt_Preprocessor'|'MiDaS-NormalMapPreprocessor'|'MiDaS-DepthMapPreprocessor'|'AnimeLineArtPreprocessor' { return [this, 'preprocessor', 0]  as unknown as 'none'|'TilePreprocessor'|'TTPlanet_TileGF_Preprocessor'|'TTPlanet_TileSimple_Preprocessor'|'BAE-NormalMapPreprocessor'|'DensePosePreprocessor'|'PiDiNetPreprocessor'|'ScribblePreprocessor'|'Scribble_XDoG_Preprocessor'|'Scribble_PiDiNet_Preprocessor'|'SAMPreprocessor'|'LineartStandardPreprocessor'|'DSINE-NormalMapPreprocessor'|'TEEDPreprocessor'|'M-LSDPreprocessor'|'AnyLineArtPreprocessor_aux'|'Zoe-DepthMapPreprocessor'|'Metric3D-DepthMapPreprocessor'|'Metric3D-NormalMapPreprocessor'|'DWPreprocessor'|'AnimalPosePreprocessor'|'HEDPreprocessor'|'FakeScribblePreprocessor'|'ColorPreprocessor'|'MeshGraphormer-DepthMapPreprocessor'|'MeshGraphormer+ImpactDetector-DepthMapPreprocessor'|'ImageLuminanceDetector'|'ImageIntensityDetector'|'LineArtPreprocessor'|'MediaPipe-FaceMeshPreprocessor'|'BinaryPreprocessor'|'OneFormer-COCO-SemSegPreprocessor'|'OneFormer-ADE20K-SemSegPreprocessor'|'Unimatch_OptFlowPreprocessor'|'MaskOptFlow'|'AnimeFace_SemSegPreprocessor'|'SavePoseKpsAsJsonFile'|'FacialPartColoringFromPoseKps'|'UpperBodyTrackingFromPoseKps'|'RenderPeopleKps'|'RenderAnimalKps'|'ShufflePreprocessor'|'CannyEdgePreprocessor'|'OpenposePreprocessor'|'DepthAnythingPreprocessor'|'Zoe_DepthAnythingPreprocessor'|'DepthAnythingV2Preprocessor'|'DiffusionEdge_Preprocessor'|'UniFormer-SemSegPreprocessor'|'SemSegPreprocessor'|'LeReS-DepthMapPreprocessor'|'Manga2Anime_LineArt_Preprocessor'|'MiDaS-NormalMapPreprocessor'|'MiDaS-DepthMapPreprocessor'|'AnimeLineArtPreprocessor'; }

        constructor(opts:{
            'preprocessor': 'none'|'TilePreprocessor'|'TTPlanet_TileGF_Preprocessor'|'TTPlanet_TileSimple_Preprocessor'|'BAE-NormalMapPreprocessor'|'DensePosePreprocessor'|'PiDiNetPreprocessor'|'ScribblePreprocessor'|'Scribble_XDoG_Preprocessor'|'Scribble_PiDiNet_Preprocessor'|'SAMPreprocessor'|'LineartStandardPreprocessor'|'DSINE-NormalMapPreprocessor'|'TEEDPreprocessor'|'M-LSDPreprocessor'|'AnyLineArtPreprocessor_aux'|'Zoe-DepthMapPreprocessor'|'Metric3D-DepthMapPreprocessor'|'Metric3D-NormalMapPreprocessor'|'DWPreprocessor'|'AnimalPosePreprocessor'|'HEDPreprocessor'|'FakeScribblePreprocessor'|'ColorPreprocessor'|'MeshGraphormer-DepthMapPreprocessor'|'MeshGraphormer+ImpactDetector-DepthMapPreprocessor'|'ImageLuminanceDetector'|'ImageIntensityDetector'|'LineArtPreprocessor'|'MediaPipe-FaceMeshPreprocessor'|'BinaryPreprocessor'|'OneFormer-COCO-SemSegPreprocessor'|'OneFormer-ADE20K-SemSegPreprocessor'|'Unimatch_OptFlowPreprocessor'|'MaskOptFlow'|'AnimeFace_SemSegPreprocessor'|'SavePoseKpsAsJsonFile'|'FacialPartColoringFromPoseKps'|'UpperBodyTrackingFromPoseKps'|'RenderPeopleKps'|'RenderAnimalKps'|'ShufflePreprocessor'|'CannyEdgePreprocessor'|'OpenposePreprocessor'|'DepthAnythingPreprocessor'|'Zoe_DepthAnythingPreprocessor'|'DepthAnythingV2Preprocessor'|'DiffusionEdge_Preprocessor'|'UniFormer-SemSegPreprocessor'|'SemSegPreprocessor'|'LeReS-DepthMapPreprocessor'|'Manga2Anime_LineArt_Preprocessor'|'MiDaS-NormalMapPreprocessor'|'MiDaS-DepthMapPreprocessor'|'AnimeLineArtPreprocessor'
        }){
            super(ctx);

            this['preprocessor'] = opts['preprocessor']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'PixelPerfectResolution' : class extends Node{
        //Setters
        set 'original_image'(value : IMAGE)  { super.$$link(0, value) } 
set 'image_gen_width'(value : INT)  { super.$$link(1, value) } 
set 'image_gen_height'(value : INT)  { super.$$link(2, value) } 
set 'resize_mode'(value : 'Just Resize'|'Crop and Resize'|'Resize and Fill')  { super.$$link(3, value) } 

        //Getters
        get 'RESOLUTION (INT)'() : INT { return [this, 'RESOLUTION (INT)', 0]  as unknown as INT; }

        constructor(opts:{
            'original_image': IMAGE,'image_gen_width': INT,'image_gen_height': INT,'resize_mode': 'Just Resize'|'Crop and Resize'|'Resize and Fill'
        }){
            super(ctx);

            this['original_image'] = opts['original_image'];
this['image_gen_width'] = opts['image_gen_width'];
this['image_gen_height'] = opts['image_gen_height'];
this['resize_mode'] = opts['resize_mode']
            

        }

        static defaults = {
            'image_gen_width':  512,
'image_gen_height':  512,
'resize_mode':  "Just Resize"
}
},

    /**
     * TODO Docs based on metadata
     */
    'ImageGenResolutionFromImage' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE_GEN_WIDTH (INT)'() : INT { return [this, 'IMAGE_GEN_WIDTH (INT)', 0]  as unknown as INT; }
get 'IMAGE_GEN_HEIGHT (INT)'() : INT { return [this, 'IMAGE_GEN_HEIGHT (INT)', 1]  as unknown as INT; }

        constructor(opts:{
            'image': IMAGE
        }){
            super(ctx);

            this['image'] = opts['image']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ImageGenResolutionFromLatent' : class extends Node{
        //Setters
        set 'latent'(value : LATENT)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE_GEN_WIDTH (INT)'() : INT { return [this, 'IMAGE_GEN_WIDTH (INT)', 0]  as unknown as INT; }
get 'IMAGE_GEN_HEIGHT (INT)'() : INT { return [this, 'IMAGE_GEN_HEIGHT (INT)', 1]  as unknown as INT; }

        constructor(opts:{
            'latent': LATENT
        }){
            super(ctx);

            this['latent'] = opts['latent']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'HintImageEnchance' : class extends Node{
        //Setters
        set 'hint_image'(value : IMAGE)  { super.$$link(0, value) } 
set 'image_gen_width'(value : INT)  { super.$$link(1, value) } 
set 'image_gen_height'(value : INT)  { super.$$link(2, value) } 
set 'resize_mode'(value : 'Just Resize'|'Crop and Resize'|'Resize and Fill')  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'hint_image': IMAGE,'image_gen_width': INT,'image_gen_height': INT,'resize_mode': 'Just Resize'|'Crop and Resize'|'Resize and Fill'
        }){
            super(ctx);

            this['hint_image'] = opts['hint_image'];
this['image_gen_width'] = opts['image_gen_width'];
this['image_gen_height'] = opts['image_gen_height'];
this['resize_mode'] = opts['resize_mode']
            

        }

        static defaults = {
            'image_gen_width':  512,
'image_gen_height':  512,
'resize_mode':  "Just Resize"
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapter' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
set 'image'(value : IMAGE)  { super.$$link(2, value) } 
set 'weight'(value : FLOAT)  { super.$$link(3, value) } 
set 'start_at'(value : FLOAT)  { super.$$link(4, value) } 
set 'end_at'(value : FLOAT)  { super.$$link(5, value) } 
set 'weight_type'(value : 'standard'|'prompt is more important'|'style transfer')  { super.$$link(6, value) } 
set 'attn_mask'(value : MASK)  { super.$$link(7, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'image': IMAGE,'weight': FLOAT,'start_at': FLOAT,'end_at': FLOAT,'weight_type': 'standard'|'prompt is more important'|'style transfer','attn_mask'?: MASK
        }){
            super(ctx);

            this['model'] = opts['model'];
this['ipadapter'] = opts['ipadapter'];
this['image'] = opts['image'];
this['weight'] = opts['weight'];
this['start_at'] = opts['start_at'];
this['end_at'] = opts['end_at'];
this['weight_type'] = opts['weight_type']
            if(opts['attn_mask']!==undefined) this['attn_mask'] = opts['attn_mask']

        }

        static defaults = {
            'weight':  1,
'start_at':  0,
'end_at':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapterAdvanced' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
set 'image'(value : IMAGE)  { super.$$link(2, value) } 
set 'weight'(value : FLOAT)  { super.$$link(3, value) } 
set 'weight_type'(value : 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise')  { super.$$link(4, value) } 
set 'combine_embeds'(value : 'concat'|'add'|'subtract'|'average'|'norm average')  { super.$$link(5, value) } 
set 'start_at'(value : FLOAT)  { super.$$link(6, value) } 
set 'end_at'(value : FLOAT)  { super.$$link(7, value) } 
set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty')  { super.$$link(8, value) } 
set 'image_negative'(value : IMAGE)  { super.$$link(9, value) } 
set 'attn_mask'(value : MASK)  { super.$$link(10, value) } 
set 'clip_vision'(value : CLIP_VISION)  { super.$$link(11, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'image': IMAGE,'weight': FLOAT,'weight_type': 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise','combine_embeds': 'concat'|'add'|'subtract'|'average'|'norm average','start_at': FLOAT,'end_at': FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty','image_negative'?: IMAGE,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION
        }){
            super(ctx);

            this['model'] = opts['model'];
this['ipadapter'] = opts['ipadapter'];
this['image'] = opts['image'];
this['weight'] = opts['weight'];
this['weight_type'] = opts['weight_type'];
this['combine_embeds'] = opts['combine_embeds'];
this['start_at'] = opts['start_at'];
this['end_at'] = opts['end_at'];
this['embeds_scaling'] = opts['embeds_scaling']
            if(opts['image_negative']!==undefined) this['image_negative'] = opts['image_negative'];
if(opts['attn_mask']!==undefined) this['attn_mask'] = opts['attn_mask'];
if(opts['clip_vision']!==undefined) this['clip_vision'] = opts['clip_vision']

        }

        static defaults = {
            'weight':  1,
'start_at':  0,
'end_at':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapterBatch' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
set 'image'(value : IMAGE)  { super.$$link(2, value) } 
set 'weight'(value : FLOAT)  { super.$$link(3, value) } 
set 'weight_type'(value : 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise')  { super.$$link(4, value) } 
set 'start_at'(value : FLOAT)  { super.$$link(5, value) } 
set 'end_at'(value : FLOAT)  { super.$$link(6, value) } 
set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty')  { super.$$link(7, value) } 
set 'encode_batch_size'(value : INT)  { super.$$link(8, value) } 
set 'image_negative'(value : IMAGE)  { super.$$link(9, value) } 
set 'attn_mask'(value : MASK)  { super.$$link(10, value) } 
set 'clip_vision'(value : CLIP_VISION)  { super.$$link(11, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'image': IMAGE,'weight': FLOAT,'weight_type': 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise','start_at': FLOAT,'end_at': FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty','encode_batch_size': INT,'image_negative'?: IMAGE,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION
        }){
            super(ctx);

            this['model'] = opts['model'];
this['ipadapter'] = opts['ipadapter'];
this['image'] = opts['image'];
this['weight'] = opts['weight'];
this['weight_type'] = opts['weight_type'];
this['start_at'] = opts['start_at'];
this['end_at'] = opts['end_at'];
this['embeds_scaling'] = opts['embeds_scaling'];
this['encode_batch_size'] = opts['encode_batch_size']
            if(opts['image_negative']!==undefined) this['image_negative'] = opts['image_negative'];
if(opts['attn_mask']!==undefined) this['attn_mask'] = opts['attn_mask'];
if(opts['clip_vision']!==undefined) this['clip_vision'] = opts['clip_vision']

        }

        static defaults = {
            'weight':  1,
'start_at':  0,
'end_at':  1,
'encode_batch_size':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapterFaceID' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
set 'image'(value : IMAGE)  { super.$$link(2, value) } 
set 'weight'(value : FLOAT)  { super.$$link(3, value) } 
set 'weight_faceidv2'(value : FLOAT)  { super.$$link(4, value) } 
set 'weight_type'(value : 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise')  { super.$$link(5, value) } 
set 'combine_embeds'(value : 'concat'|'add'|'subtract'|'average'|'norm average')  { super.$$link(6, value) } 
set 'start_at'(value : FLOAT)  { super.$$link(7, value) } 
set 'end_at'(value : FLOAT)  { super.$$link(8, value) } 
set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty')  { super.$$link(9, value) } 
set 'image_negative'(value : IMAGE)  { super.$$link(10, value) } 
set 'attn_mask'(value : MASK)  { super.$$link(11, value) } 
set 'clip_vision'(value : CLIP_VISION)  { super.$$link(12, value) } 
set 'insightface'(value : INSIGHTFACE)  { super.$$link(13, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'face_image'() : IMAGE { return [this, 'face_image', 1]  as unknown as IMAGE; }

        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'image': IMAGE,'weight': FLOAT,'weight_faceidv2': FLOAT,'weight_type': 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise','combine_embeds': 'concat'|'add'|'subtract'|'average'|'norm average','start_at': FLOAT,'end_at': FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty','image_negative'?: IMAGE,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION,'insightface'?: INSIGHTFACE
        }){
            super(ctx);

            this['model'] = opts['model'];
this['ipadapter'] = opts['ipadapter'];
this['image'] = opts['image'];
this['weight'] = opts['weight'];
this['weight_faceidv2'] = opts['weight_faceidv2'];
this['weight_type'] = opts['weight_type'];
this['combine_embeds'] = opts['combine_embeds'];
this['start_at'] = opts['start_at'];
this['end_at'] = opts['end_at'];
this['embeds_scaling'] = opts['embeds_scaling']
            if(opts['image_negative']!==undefined) this['image_negative'] = opts['image_negative'];
if(opts['attn_mask']!==undefined) this['attn_mask'] = opts['attn_mask'];
if(opts['clip_vision']!==undefined) this['clip_vision'] = opts['clip_vision'];
if(opts['insightface']!==undefined) this['insightface'] = opts['insightface']

        }

        static defaults = {
            'weight':  1,
'weight_faceidv2':  1,
'start_at':  0,
'end_at':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAAdapterFaceIDBatch' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
set 'image'(value : IMAGE)  { super.$$link(2, value) } 
set 'weight'(value : FLOAT)  { super.$$link(3, value) } 
set 'weight_faceidv2'(value : FLOAT)  { super.$$link(4, value) } 
set 'weight_type'(value : 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise')  { super.$$link(5, value) } 
set 'combine_embeds'(value : 'concat'|'add'|'subtract'|'average'|'norm average')  { super.$$link(6, value) } 
set 'start_at'(value : FLOAT)  { super.$$link(7, value) } 
set 'end_at'(value : FLOAT)  { super.$$link(8, value) } 
set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty')  { super.$$link(9, value) } 
set 'image_negative'(value : IMAGE)  { super.$$link(10, value) } 
set 'attn_mask'(value : MASK)  { super.$$link(11, value) } 
set 'clip_vision'(value : CLIP_VISION)  { super.$$link(12, value) } 
set 'insightface'(value : INSIGHTFACE)  { super.$$link(13, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'face_image'() : IMAGE { return [this, 'face_image', 1]  as unknown as IMAGE; }

        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'image': IMAGE,'weight': FLOAT,'weight_faceidv2': FLOAT,'weight_type': 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise','combine_embeds': 'concat'|'add'|'subtract'|'average'|'norm average','start_at': FLOAT,'end_at': FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty','image_negative'?: IMAGE,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION,'insightface'?: INSIGHTFACE
        }){
            super(ctx);

            this['model'] = opts['model'];
this['ipadapter'] = opts['ipadapter'];
this['image'] = opts['image'];
this['weight'] = opts['weight'];
this['weight_faceidv2'] = opts['weight_faceidv2'];
this['weight_type'] = opts['weight_type'];
this['combine_embeds'] = opts['combine_embeds'];
this['start_at'] = opts['start_at'];
this['end_at'] = opts['end_at'];
this['embeds_scaling'] = opts['embeds_scaling']
            if(opts['image_negative']!==undefined) this['image_negative'] = opts['image_negative'];
if(opts['attn_mask']!==undefined) this['attn_mask'] = opts['attn_mask'];
if(opts['clip_vision']!==undefined) this['clip_vision'] = opts['clip_vision'];
if(opts['insightface']!==undefined) this['insightface'] = opts['insightface']

        }

        static defaults = {
            'weight':  1,
'weight_faceidv2':  1,
'start_at':  0,
'end_at':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapterTiled' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
set 'image'(value : IMAGE)  { super.$$link(2, value) } 
set 'weight'(value : FLOAT)  { super.$$link(3, value) } 
set 'weight_type'(value : 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise')  { super.$$link(4, value) } 
set 'combine_embeds'(value : 'concat'|'add'|'subtract'|'average'|'norm average')  { super.$$link(5, value) } 
set 'start_at'(value : FLOAT)  { super.$$link(6, value) } 
set 'end_at'(value : FLOAT)  { super.$$link(7, value) } 
set 'sharpening'(value : FLOAT)  { super.$$link(8, value) } 
set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty')  { super.$$link(9, value) } 
set 'image_negative'(value : IMAGE)  { super.$$link(10, value) } 
set 'attn_mask'(value : MASK)  { super.$$link(11, value) } 
set 'clip_vision'(value : CLIP_VISION)  { super.$$link(12, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'tiles'() : IMAGE { return [this, 'tiles', 1]  as unknown as IMAGE; }
get 'masks'() : MASK { return [this, 'masks', 2]  as unknown as MASK; }

        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'image': IMAGE,'weight': FLOAT,'weight_type': 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise','combine_embeds': 'concat'|'add'|'subtract'|'average'|'norm average','start_at': FLOAT,'end_at': FLOAT,'sharpening': FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty','image_negative'?: IMAGE,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION
        }){
            super(ctx);

            this['model'] = opts['model'];
this['ipadapter'] = opts['ipadapter'];
this['image'] = opts['image'];
this['weight'] = opts['weight'];
this['weight_type'] = opts['weight_type'];
this['combine_embeds'] = opts['combine_embeds'];
this['start_at'] = opts['start_at'];
this['end_at'] = opts['end_at'];
this['sharpening'] = opts['sharpening'];
this['embeds_scaling'] = opts['embeds_scaling']
            if(opts['image_negative']!==undefined) this['image_negative'] = opts['image_negative'];
if(opts['attn_mask']!==undefined) this['attn_mask'] = opts['attn_mask'];
if(opts['clip_vision']!==undefined) this['clip_vision'] = opts['clip_vision']

        }

        static defaults = {
            'weight':  1,
'start_at':  0,
'end_at':  1,
'sharpening':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapterTiledBatch' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
set 'image'(value : IMAGE)  { super.$$link(2, value) } 
set 'weight'(value : FLOAT)  { super.$$link(3, value) } 
set 'weight_type'(value : 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise')  { super.$$link(4, value) } 
set 'start_at'(value : FLOAT)  { super.$$link(5, value) } 
set 'end_at'(value : FLOAT)  { super.$$link(6, value) } 
set 'sharpening'(value : FLOAT)  { super.$$link(7, value) } 
set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty')  { super.$$link(8, value) } 
set 'encode_batch_size'(value : INT)  { super.$$link(9, value) } 
set 'image_negative'(value : IMAGE)  { super.$$link(10, value) } 
set 'attn_mask'(value : MASK)  { super.$$link(11, value) } 
set 'clip_vision'(value : CLIP_VISION)  { super.$$link(12, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'tiles'() : IMAGE { return [this, 'tiles', 1]  as unknown as IMAGE; }
get 'masks'() : MASK { return [this, 'masks', 2]  as unknown as MASK; }

        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'image': IMAGE,'weight': FLOAT,'weight_type': 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise','start_at': FLOAT,'end_at': FLOAT,'sharpening': FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty','encode_batch_size': INT,'image_negative'?: IMAGE,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION
        }){
            super(ctx);

            this['model'] = opts['model'];
this['ipadapter'] = opts['ipadapter'];
this['image'] = opts['image'];
this['weight'] = opts['weight'];
this['weight_type'] = opts['weight_type'];
this['start_at'] = opts['start_at'];
this['end_at'] = opts['end_at'];
this['sharpening'] = opts['sharpening'];
this['embeds_scaling'] = opts['embeds_scaling'];
this['encode_batch_size'] = opts['encode_batch_size']
            if(opts['image_negative']!==undefined) this['image_negative'] = opts['image_negative'];
if(opts['attn_mask']!==undefined) this['attn_mask'] = opts['attn_mask'];
if(opts['clip_vision']!==undefined) this['clip_vision'] = opts['clip_vision']

        }

        static defaults = {
            'weight':  1,
'start_at':  0,
'end_at':  1,
'sharpening':  0,
'encode_batch_size':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapterEmbeds' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
set 'pos_embed'(value : EMBEDS)  { super.$$link(2, value) } 
set 'weight'(value : FLOAT)  { super.$$link(3, value) } 
set 'weight_type'(value : 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise')  { super.$$link(4, value) } 
set 'start_at'(value : FLOAT)  { super.$$link(5, value) } 
set 'end_at'(value : FLOAT)  { super.$$link(6, value) } 
set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty')  { super.$$link(7, value) } 
set 'neg_embed'(value : EMBEDS)  { super.$$link(8, value) } 
set 'attn_mask'(value : MASK)  { super.$$link(9, value) } 
set 'clip_vision'(value : CLIP_VISION)  { super.$$link(10, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'pos_embed': EMBEDS,'weight': FLOAT,'weight_type': 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise','start_at': FLOAT,'end_at': FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty','neg_embed'?: EMBEDS,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION
        }){
            super(ctx);

            this['model'] = opts['model'];
this['ipadapter'] = opts['ipadapter'];
this['pos_embed'] = opts['pos_embed'];
this['weight'] = opts['weight'];
this['weight_type'] = opts['weight_type'];
this['start_at'] = opts['start_at'];
this['end_at'] = opts['end_at'];
this['embeds_scaling'] = opts['embeds_scaling']
            if(opts['neg_embed']!==undefined) this['neg_embed'] = opts['neg_embed'];
if(opts['attn_mask']!==undefined) this['attn_mask'] = opts['attn_mask'];
if(opts['clip_vision']!==undefined) this['clip_vision'] = opts['clip_vision']

        }

        static defaults = {
            'weight':  1,
'start_at':  0,
'end_at':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapterEmbedsBatch' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
set 'pos_embed'(value : EMBEDS)  { super.$$link(2, value) } 
set 'weight'(value : FLOAT)  { super.$$link(3, value) } 
set 'weight_type'(value : 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise')  { super.$$link(4, value) } 
set 'start_at'(value : FLOAT)  { super.$$link(5, value) } 
set 'end_at'(value : FLOAT)  { super.$$link(6, value) } 
set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty')  { super.$$link(7, value) } 
set 'neg_embed'(value : EMBEDS)  { super.$$link(8, value) } 
set 'attn_mask'(value : MASK)  { super.$$link(9, value) } 
set 'clip_vision'(value : CLIP_VISION)  { super.$$link(10, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'pos_embed': EMBEDS,'weight': FLOAT,'weight_type': 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise','start_at': FLOAT,'end_at': FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty','neg_embed'?: EMBEDS,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION
        }){
            super(ctx);

            this['model'] = opts['model'];
this['ipadapter'] = opts['ipadapter'];
this['pos_embed'] = opts['pos_embed'];
this['weight'] = opts['weight'];
this['weight_type'] = opts['weight_type'];
this['start_at'] = opts['start_at'];
this['end_at'] = opts['end_at'];
this['embeds_scaling'] = opts['embeds_scaling']
            if(opts['neg_embed']!==undefined) this['neg_embed'] = opts['neg_embed'];
if(opts['attn_mask']!==undefined) this['attn_mask'] = opts['attn_mask'];
if(opts['clip_vision']!==undefined) this['clip_vision'] = opts['clip_vision']

        }

        static defaults = {
            'weight':  1,
'start_at':  0,
'end_at':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapterStyleComposition' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
set 'image_style'(value : IMAGE)  { super.$$link(2, value) } 
set 'image_composition'(value : IMAGE)  { super.$$link(3, value) } 
set 'weight_style'(value : FLOAT)  { super.$$link(4, value) } 
set 'weight_composition'(value : FLOAT)  { super.$$link(5, value) } 
set 'expand_style'(value : BOOLEAN)  { super.$$link(6, value) } 
set 'combine_embeds'(value : 'concat'|'add'|'subtract'|'average'|'norm average')  { super.$$link(7, value) } 
set 'start_at'(value : FLOAT)  { super.$$link(8, value) } 
set 'end_at'(value : FLOAT)  { super.$$link(9, value) } 
set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty')  { super.$$link(10, value) } 
set 'image_negative'(value : IMAGE)  { super.$$link(11, value) } 
set 'attn_mask'(value : MASK)  { super.$$link(12, value) } 
set 'clip_vision'(value : CLIP_VISION)  { super.$$link(13, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'image_style': IMAGE,'image_composition': IMAGE,'weight_style': FLOAT,'weight_composition': FLOAT,'expand_style': BOOLEAN,'combine_embeds': 'concat'|'add'|'subtract'|'average'|'norm average','start_at': FLOAT,'end_at': FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty','image_negative'?: IMAGE,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION
        }){
            super(ctx);

            this['model'] = opts['model'];
this['ipadapter'] = opts['ipadapter'];
this['image_style'] = opts['image_style'];
this['image_composition'] = opts['image_composition'];
this['weight_style'] = opts['weight_style'];
this['weight_composition'] = opts['weight_composition'];
this['expand_style'] = opts['expand_style'];
this['combine_embeds'] = opts['combine_embeds'];
this['start_at'] = opts['start_at'];
this['end_at'] = opts['end_at'];
this['embeds_scaling'] = opts['embeds_scaling']
            if(opts['image_negative']!==undefined) this['image_negative'] = opts['image_negative'];
if(opts['attn_mask']!==undefined) this['attn_mask'] = opts['attn_mask'];
if(opts['clip_vision']!==undefined) this['clip_vision'] = opts['clip_vision']

        }

        static defaults = {
            'weight_style':  1,
'weight_composition':  1,
'expand_style':  false,
'combine_embeds':  "average",
'start_at':  0,
'end_at':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapterStyleCompositionBatch' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
set 'image_style'(value : IMAGE)  { super.$$link(2, value) } 
set 'image_composition'(value : IMAGE)  { super.$$link(3, value) } 
set 'weight_style'(value : FLOAT)  { super.$$link(4, value) } 
set 'weight_composition'(value : FLOAT)  { super.$$link(5, value) } 
set 'expand_style'(value : BOOLEAN)  { super.$$link(6, value) } 
set 'start_at'(value : FLOAT)  { super.$$link(7, value) } 
set 'end_at'(value : FLOAT)  { super.$$link(8, value) } 
set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty')  { super.$$link(9, value) } 
set 'image_negative'(value : IMAGE)  { super.$$link(10, value) } 
set 'attn_mask'(value : MASK)  { super.$$link(11, value) } 
set 'clip_vision'(value : CLIP_VISION)  { super.$$link(12, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'image_style': IMAGE,'image_composition': IMAGE,'weight_style': FLOAT,'weight_composition': FLOAT,'expand_style': BOOLEAN,'start_at': FLOAT,'end_at': FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty','image_negative'?: IMAGE,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION
        }){
            super(ctx);

            this['model'] = opts['model'];
this['ipadapter'] = opts['ipadapter'];
this['image_style'] = opts['image_style'];
this['image_composition'] = opts['image_composition'];
this['weight_style'] = opts['weight_style'];
this['weight_composition'] = opts['weight_composition'];
this['expand_style'] = opts['expand_style'];
this['start_at'] = opts['start_at'];
this['end_at'] = opts['end_at'];
this['embeds_scaling'] = opts['embeds_scaling']
            if(opts['image_negative']!==undefined) this['image_negative'] = opts['image_negative'];
if(opts['attn_mask']!==undefined) this['attn_mask'] = opts['attn_mask'];
if(opts['clip_vision']!==undefined) this['clip_vision'] = opts['clip_vision']

        }

        static defaults = {
            'weight_style':  1,
'weight_composition':  1,
'expand_style':  false,
'start_at':  0,
'end_at':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapterMS' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
set 'image'(value : IMAGE)  { super.$$link(2, value) } 
set 'weight'(value : FLOAT)  { super.$$link(3, value) } 
set 'weight_faceidv2'(value : FLOAT)  { super.$$link(4, value) } 
set 'weight_type'(value : 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise')  { super.$$link(5, value) } 
set 'combine_embeds'(value : 'concat'|'add'|'subtract'|'average'|'norm average')  { super.$$link(6, value) } 
set 'start_at'(value : FLOAT)  { super.$$link(7, value) } 
set 'end_at'(value : FLOAT)  { super.$$link(8, value) } 
set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty')  { super.$$link(9, value) } 
set 'layer_weights'(value : STRING)  { super.$$link(10, value) } 
set 'image_negative'(value : IMAGE)  { super.$$link(11, value) } 
set 'attn_mask'(value : MASK)  { super.$$link(12, value) } 
set 'clip_vision'(value : CLIP_VISION)  { super.$$link(13, value) } 
set 'insightface'(value : INSIGHTFACE)  { super.$$link(14, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'image': IMAGE,'weight': FLOAT,'weight_faceidv2': FLOAT,'weight_type': 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise','combine_embeds': 'concat'|'add'|'subtract'|'average'|'norm average','start_at': FLOAT,'end_at': FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty','layer_weights': STRING,'image_negative'?: IMAGE,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION,'insightface'?: INSIGHTFACE
        }){
            super(ctx);

            this['model'] = opts['model'];
this['ipadapter'] = opts['ipadapter'];
this['image'] = opts['image'];
this['weight'] = opts['weight'];
this['weight_faceidv2'] = opts['weight_faceidv2'];
this['weight_type'] = opts['weight_type'];
this['combine_embeds'] = opts['combine_embeds'];
this['start_at'] = opts['start_at'];
this['end_at'] = opts['end_at'];
this['embeds_scaling'] = opts['embeds_scaling'];
this['layer_weights'] = opts['layer_weights']
            if(opts['image_negative']!==undefined) this['image_negative'] = opts['image_negative'];
if(opts['attn_mask']!==undefined) this['attn_mask'] = opts['attn_mask'];
if(opts['clip_vision']!==undefined) this['clip_vision'] = opts['clip_vision'];
if(opts['insightface']!==undefined) this['insightface'] = opts['insightface']

        }

        static defaults = {
            'weight':  1,
'weight_faceidv2':  1,
'start_at':  0,
'end_at':  1,
'layer_weights':  ""
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapterFromParams' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
set 'ipadapter_params'(value : IPADAPTER_PARAMS)  { super.$$link(2, value) } 
set 'combine_embeds'(value : 'concat'|'add'|'subtract'|'average'|'norm average')  { super.$$link(3, value) } 
set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty')  { super.$$link(4, value) } 
set 'image_negative'(value : IMAGE)  { super.$$link(5, value) } 
set 'clip_vision'(value : CLIP_VISION)  { super.$$link(6, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'ipadapter_params': IPADAPTER_PARAMS,'combine_embeds': 'concat'|'add'|'subtract'|'average'|'norm average','embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty','image_negative'?: IMAGE,'clip_vision'?: CLIP_VISION
        }){
            super(ctx);

            this['model'] = opts['model'];
this['ipadapter'] = opts['ipadapter'];
this['ipadapter_params'] = opts['ipadapter_params'];
this['combine_embeds'] = opts['combine_embeds'];
this['embeds_scaling'] = opts['embeds_scaling']
            if(opts['image_negative']!==undefined) this['image_negative'] = opts['image_negative'];
if(opts['clip_vision']!==undefined) this['clip_vision'] = opts['clip_vision']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapterPreciseStyleTransfer' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
set 'image'(value : IMAGE)  { super.$$link(2, value) } 
set 'weight'(value : FLOAT)  { super.$$link(3, value) } 
set 'style_boost'(value : FLOAT)  { super.$$link(4, value) } 
set 'combine_embeds'(value : 'concat'|'add'|'subtract'|'average'|'norm average')  { super.$$link(5, value) } 
set 'start_at'(value : FLOAT)  { super.$$link(6, value) } 
set 'end_at'(value : FLOAT)  { super.$$link(7, value) } 
set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty')  { super.$$link(8, value) } 
set 'image_negative'(value : IMAGE)  { super.$$link(9, value) } 
set 'attn_mask'(value : MASK)  { super.$$link(10, value) } 
set 'clip_vision'(value : CLIP_VISION)  { super.$$link(11, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'image': IMAGE,'weight': FLOAT,'style_boost': FLOAT,'combine_embeds': 'concat'|'add'|'subtract'|'average'|'norm average','start_at': FLOAT,'end_at': FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty','image_negative'?: IMAGE,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION
        }){
            super(ctx);

            this['model'] = opts['model'];
this['ipadapter'] = opts['ipadapter'];
this['image'] = opts['image'];
this['weight'] = opts['weight'];
this['style_boost'] = opts['style_boost'];
this['combine_embeds'] = opts['combine_embeds'];
this['start_at'] = opts['start_at'];
this['end_at'] = opts['end_at'];
this['embeds_scaling'] = opts['embeds_scaling']
            if(opts['image_negative']!==undefined) this['image_negative'] = opts['image_negative'];
if(opts['attn_mask']!==undefined) this['attn_mask'] = opts['attn_mask'];
if(opts['clip_vision']!==undefined) this['clip_vision'] = opts['clip_vision']

        }

        static defaults = {
            'weight':  1,
'style_boost':  1,
'start_at':  0,
'end_at':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapterPreciseStyleTransferBatch' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
set 'image'(value : IMAGE)  { super.$$link(2, value) } 
set 'weight'(value : FLOAT)  { super.$$link(3, value) } 
set 'style_boost'(value : FLOAT)  { super.$$link(4, value) } 
set 'combine_embeds'(value : 'concat'|'add'|'subtract'|'average'|'norm average')  { super.$$link(5, value) } 
set 'start_at'(value : FLOAT)  { super.$$link(6, value) } 
set 'end_at'(value : FLOAT)  { super.$$link(7, value) } 
set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty')  { super.$$link(8, value) } 
set 'image_negative'(value : IMAGE)  { super.$$link(9, value) } 
set 'attn_mask'(value : MASK)  { super.$$link(10, value) } 
set 'clip_vision'(value : CLIP_VISION)  { super.$$link(11, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'image': IMAGE,'weight': FLOAT,'style_boost': FLOAT,'combine_embeds': 'concat'|'add'|'subtract'|'average'|'norm average','start_at': FLOAT,'end_at': FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty','image_negative'?: IMAGE,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION
        }){
            super(ctx);

            this['model'] = opts['model'];
this['ipadapter'] = opts['ipadapter'];
this['image'] = opts['image'];
this['weight'] = opts['weight'];
this['style_boost'] = opts['style_boost'];
this['combine_embeds'] = opts['combine_embeds'];
this['start_at'] = opts['start_at'];
this['end_at'] = opts['end_at'];
this['embeds_scaling'] = opts['embeds_scaling']
            if(opts['image_negative']!==undefined) this['image_negative'] = opts['image_negative'];
if(opts['attn_mask']!==undefined) this['attn_mask'] = opts['attn_mask'];
if(opts['clip_vision']!==undefined) this['clip_vision'] = opts['clip_vision']

        }

        static defaults = {
            'weight':  1,
'style_boost':  1,
'start_at':  0,
'end_at':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapterPreciseComposition' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
set 'image'(value : IMAGE)  { super.$$link(2, value) } 
set 'weight'(value : FLOAT)  { super.$$link(3, value) } 
set 'composition_boost'(value : FLOAT)  { super.$$link(4, value) } 
set 'combine_embeds'(value : 'concat'|'add'|'subtract'|'average'|'norm average')  { super.$$link(5, value) } 
set 'start_at'(value : FLOAT)  { super.$$link(6, value) } 
set 'end_at'(value : FLOAT)  { super.$$link(7, value) } 
set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty')  { super.$$link(8, value) } 
set 'image_negative'(value : IMAGE)  { super.$$link(9, value) } 
set 'attn_mask'(value : MASK)  { super.$$link(10, value) } 
set 'clip_vision'(value : CLIP_VISION)  { super.$$link(11, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'image': IMAGE,'weight': FLOAT,'composition_boost': FLOAT,'combine_embeds': 'concat'|'add'|'subtract'|'average'|'norm average','start_at': FLOAT,'end_at': FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty','image_negative'?: IMAGE,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION
        }){
            super(ctx);

            this['model'] = opts['model'];
this['ipadapter'] = opts['ipadapter'];
this['image'] = opts['image'];
this['weight'] = opts['weight'];
this['composition_boost'] = opts['composition_boost'];
this['combine_embeds'] = opts['combine_embeds'];
this['start_at'] = opts['start_at'];
this['end_at'] = opts['end_at'];
this['embeds_scaling'] = opts['embeds_scaling']
            if(opts['image_negative']!==undefined) this['image_negative'] = opts['image_negative'];
if(opts['attn_mask']!==undefined) this['attn_mask'] = opts['attn_mask'];
if(opts['clip_vision']!==undefined) this['clip_vision'] = opts['clip_vision']

        }

        static defaults = {
            'weight':  1,
'composition_boost':  0,
'start_at':  0,
'end_at':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapterPreciseCompositionBatch' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'ipadapter'(value : IPADAPTER)  { super.$$link(1, value) } 
set 'image'(value : IMAGE)  { super.$$link(2, value) } 
set 'weight'(value : FLOAT)  { super.$$link(3, value) } 
set 'composition_boost'(value : FLOAT)  { super.$$link(4, value) } 
set 'combine_embeds'(value : 'concat'|'add'|'subtract'|'average'|'norm average')  { super.$$link(5, value) } 
set 'start_at'(value : FLOAT)  { super.$$link(6, value) } 
set 'end_at'(value : FLOAT)  { super.$$link(7, value) } 
set 'embeds_scaling'(value : 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty')  { super.$$link(8, value) } 
set 'image_negative'(value : IMAGE)  { super.$$link(9, value) } 
set 'attn_mask'(value : MASK)  { super.$$link(10, value) } 
set 'clip_vision'(value : CLIP_VISION)  { super.$$link(11, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'ipadapter': IPADAPTER,'image': IMAGE,'weight': FLOAT,'composition_boost': FLOAT,'combine_embeds': 'concat'|'add'|'subtract'|'average'|'norm average','start_at': FLOAT,'end_at': FLOAT,'embeds_scaling': 'V only'|'K+V'|'K+V w/ C penalty'|'K+mean(V) w/ C penalty','image_negative'?: IMAGE,'attn_mask'?: MASK,'clip_vision'?: CLIP_VISION
        }){
            super(ctx);

            this['model'] = opts['model'];
this['ipadapter'] = opts['ipadapter'];
this['image'] = opts['image'];
this['weight'] = opts['weight'];
this['composition_boost'] = opts['composition_boost'];
this['combine_embeds'] = opts['combine_embeds'];
this['start_at'] = opts['start_at'];
this['end_at'] = opts['end_at'];
this['embeds_scaling'] = opts['embeds_scaling']
            if(opts['image_negative']!==undefined) this['image_negative'] = opts['image_negative'];
if(opts['attn_mask']!==undefined) this['attn_mask'] = opts['attn_mask'];
if(opts['clip_vision']!==undefined) this['clip_vision'] = opts['clip_vision']

        }

        static defaults = {
            'weight':  1,
'composition_boost':  0,
'start_at':  0,
'end_at':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapterUnifiedLoader' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'preset'(value : 'LIGHT - SD1.5 only (low strength)'|'STANDARD (medium strength)'|'VIT-G (medium strength)'|'PLUS (high strength)'|'PLUS FACE (portraits)'|'FULL FACE - SD1.5 only (portraits stronger)')  { super.$$link(1, value) } 
set 'ipadapter'(value : IPADAPTER)  { super.$$link(2, value) } 

        //Getters
        get 'model'() : MODEL { return [this, 'model', 0]  as unknown as MODEL; }
get 'ipadapter'() : IPADAPTER { return [this, 'ipadapter', 1]  as unknown as IPADAPTER; }

        constructor(opts:{
            'model': MODEL,'preset': 'LIGHT - SD1.5 only (low strength)'|'STANDARD (medium strength)'|'VIT-G (medium strength)'|'PLUS (high strength)'|'PLUS FACE (portraits)'|'FULL FACE - SD1.5 only (portraits stronger)','ipadapter'?: IPADAPTER
        }){
            super(ctx);

            this['model'] = opts['model'];
this['preset'] = opts['preset']
            if(opts['ipadapter']!==undefined) this['ipadapter'] = opts['ipadapter']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapterUnifiedLoaderFaceID' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'preset'(value : 'FACEID'|'FACEID PLUS - SD1.5 only'|'FACEID PLUS V2'|'FACEID PORTRAIT (style transfer)'|'FACEID PORTRAIT UNNORM - SDXL only (strong)')  { super.$$link(1, value) } 
set 'lora_strength'(value : FLOAT)  { super.$$link(2, value) } 
set 'provider'(value : 'CPU'|'CUDA'|'ROCM'|'DirectML'|'OpenVINO'|'CoreML')  { super.$$link(3, value) } 
set 'ipadapter'(value : IPADAPTER)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'ipadapter'() : IPADAPTER { return [this, 'ipadapter', 1]  as unknown as IPADAPTER; }

        constructor(opts:{
            'model': MODEL,'preset': 'FACEID'|'FACEID PLUS - SD1.5 only'|'FACEID PLUS V2'|'FACEID PORTRAIT (style transfer)'|'FACEID PORTRAIT UNNORM - SDXL only (strong)','lora_strength': FLOAT,'provider': 'CPU'|'CUDA'|'ROCM'|'DirectML'|'OpenVINO'|'CoreML','ipadapter'?: IPADAPTER
        }){
            super(ctx);

            this['model'] = opts['model'];
this['preset'] = opts['preset'];
this['lora_strength'] = opts['lora_strength'];
this['provider'] = opts['provider']
            if(opts['ipadapter']!==undefined) this['ipadapter'] = opts['ipadapter']

        }

        static defaults = {
            'lora_strength':  0.6
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapterModelLoader' : class extends Node{
        //Setters
        set 'ipadapter_file'(value : 'ip-adapter-faceid-plus_sd15.bin'|'ip-adapter-faceid-plusv2_sd15.bin'|'ip-adapter-faceid-portrait_sd15.bin'|'ip-adapter-faceid_sd15.bin'|'ip-adapter-faceid_sdxl.bin'|'ip-adapter-full-face_sd15.safetensors'|'ip-adapter-plus-face_sd15.safetensors'|'ip-adapter_sdxl.safetensors')  { super.$$link(0, value) } 

        //Getters
        get 'IPADAPTER'() : IPADAPTER { return [this, 'IPADAPTER', 0]  as unknown as IPADAPTER; }

        constructor(opts:{
            'ipadapter_file': 'ip-adapter-faceid-plus_sd15.bin'|'ip-adapter-faceid-plusv2_sd15.bin'|'ip-adapter-faceid-portrait_sd15.bin'|'ip-adapter-faceid_sd15.bin'|'ip-adapter-faceid_sdxl.bin'|'ip-adapter-full-face_sd15.safetensors'|'ip-adapter-plus-face_sd15.safetensors'|'ip-adapter_sdxl.safetensors'
        }){
            super(ctx);

            this['ipadapter_file'] = opts['ipadapter_file']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapterInsightFaceLoader' : class extends Node{
        //Setters
        set 'provider'(value : 'CPU'|'CUDA'|'ROCM')  { super.$$link(0, value) } 

        //Getters
        get 'INSIGHTFACE'() : INSIGHTFACE { return [this, 'INSIGHTFACE', 0]  as unknown as INSIGHTFACE; }

        constructor(opts:{
            'provider': 'CPU'|'CUDA'|'ROCM'
        }){
            super(ctx);

            this['provider'] = opts['provider']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapterUnifiedLoaderCommunity' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'preset'(value : 'Composition')  { super.$$link(1, value) } 
set 'ipadapter'(value : IPADAPTER)  { super.$$link(2, value) } 

        //Getters
        get 'model'() : MODEL { return [this, 'model', 0]  as unknown as MODEL; }
get 'ipadapter'() : IPADAPTER { return [this, 'ipadapter', 1]  as unknown as IPADAPTER; }

        constructor(opts:{
            'model': MODEL,'preset': 'Composition','ipadapter'?: IPADAPTER
        }){
            super(ctx);

            this['model'] = opts['model'];
this['preset'] = opts['preset']
            if(opts['ipadapter']!==undefined) this['ipadapter'] = opts['ipadapter']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapterEncoder' : class extends Node{
        //Setters
        set 'ipadapter'(value : IPADAPTER)  { super.$$link(0, value) } 
set 'image'(value : IMAGE)  { super.$$link(1, value) } 
set 'weight'(value : FLOAT)  { super.$$link(2, value) } 
set 'mask'(value : MASK)  { super.$$link(3, value) } 
set 'clip_vision'(value : CLIP_VISION)  { super.$$link(4, value) } 

        //Getters
        get 'pos_embed'() : EMBEDS { return [this, 'pos_embed', 0]  as unknown as EMBEDS; }
get 'neg_embed'() : EMBEDS { return [this, 'neg_embed', 1]  as unknown as EMBEDS; }

        constructor(opts:{
            'ipadapter': IPADAPTER,'image': IMAGE,'weight': FLOAT,'mask'?: MASK,'clip_vision'?: CLIP_VISION
        }){
            super(ctx);

            this['ipadapter'] = opts['ipadapter'];
this['image'] = opts['image'];
this['weight'] = opts['weight']
            if(opts['mask']!==undefined) this['mask'] = opts['mask'];
if(opts['clip_vision']!==undefined) this['clip_vision'] = opts['clip_vision']

        }

        static defaults = {
            'weight':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapterCombineEmbeds' : class extends Node{
        //Setters
        set 'embed1'(value : EMBEDS)  { super.$$link(0, value) } 
set 'method'(value : 'concat'|'add'|'subtract'|'average'|'norm average'|'max'|'min')  { super.$$link(1, value) } 
set 'embed2'(value : EMBEDS)  { super.$$link(2, value) } 
set 'embed3'(value : EMBEDS)  { super.$$link(3, value) } 
set 'embed4'(value : EMBEDS)  { super.$$link(4, value) } 
set 'embed5'(value : EMBEDS)  { super.$$link(5, value) } 

        //Getters
        get 'EMBEDS'() : EMBEDS { return [this, 'EMBEDS', 0]  as unknown as EMBEDS; }

        constructor(opts:{
            'embed1': EMBEDS,'method': 'concat'|'add'|'subtract'|'average'|'norm average'|'max'|'min','embed2'?: EMBEDS,'embed3'?: EMBEDS,'embed4'?: EMBEDS,'embed5'?: EMBEDS
        }){
            super(ctx);

            this['embed1'] = opts['embed1'];
this['method'] = opts['method']
            if(opts['embed2']!==undefined) this['embed2'] = opts['embed2'];
if(opts['embed3']!==undefined) this['embed3'] = opts['embed3'];
if(opts['embed4']!==undefined) this['embed4'] = opts['embed4'];
if(opts['embed5']!==undefined) this['embed5'] = opts['embed5']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapterNoise' : class extends Node{
        //Setters
        set 'type'(value : 'fade'|'dissolve'|'gaussian'|'shuffle')  { super.$$link(0, value) } 
set 'strength'(value : FLOAT)  { super.$$link(1, value) } 
set 'blur'(value : INT)  { super.$$link(2, value) } 
set 'image_optional'(value : IMAGE)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'type': 'fade'|'dissolve'|'gaussian'|'shuffle','strength': FLOAT,'blur': INT,'image_optional'?: IMAGE
        }){
            super(ctx);

            this['type'] = opts['type'];
this['strength'] = opts['strength'];
this['blur'] = opts['blur']
            if(opts['image_optional']!==undefined) this['image_optional'] = opts['image_optional']

        }

        static defaults = {
            'strength':  1,
'blur':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'PrepImageForClipVision' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'interpolation'(value : 'LANCZOS'|'BICUBIC'|'HAMMING'|'BILINEAR'|'BOX'|'NEAREST')  { super.$$link(1, value) } 
set 'crop_position'(value : 'top'|'bottom'|'left'|'right'|'center'|'pad')  { super.$$link(2, value) } 
set 'sharpening'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'interpolation': 'LANCZOS'|'BICUBIC'|'HAMMING'|'BILINEAR'|'BOX'|'NEAREST','crop_position': 'top'|'bottom'|'left'|'right'|'center'|'pad','sharpening': FLOAT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['interpolation'] = opts['interpolation'];
this['crop_position'] = opts['crop_position'];
this['sharpening'] = opts['sharpening']
            

        }

        static defaults = {
            'sharpening':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapterSaveEmbeds' : class extends Node{
        //Setters
        set 'embeds'(value : EMBEDS)  { super.$$link(0, value) } 
set 'filename_prefix'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        

        constructor(opts:{
            'embeds': EMBEDS,'filename_prefix': STRING
        }){
            super(ctx);

            this['embeds'] = opts['embeds'];
this['filename_prefix'] = opts['filename_prefix']
            

        }

        static defaults = {
            'filename_prefix':  "IP_embeds"
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapterLoadEmbeds' : class extends Node{
        //Setters
        set 'embeds'(value : void)  { super.$$link(0, value) } 

        //Getters
        get 'EMBEDS'() : EMBEDS { return [this, 'EMBEDS', 0]  as unknown as EMBEDS; }

        constructor(opts:{
            'embeds': void
        }){
            super(ctx);

            this['embeds'] = opts['embeds']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapterWeights' : class extends Node{
        //Setters
        set 'weights'(value : STRING)  { super.$$link(0, value) } 
set 'timing'(value : 'custom'|'linear'|'ease_in_out'|'ease_in'|'ease_out'|'random')  { super.$$link(1, value) } 
set 'frames'(value : INT)  { super.$$link(2, value) } 
set 'start_frame'(value : INT)  { super.$$link(3, value) } 
set 'end_frame'(value : INT)  { super.$$link(4, value) } 
set 'add_starting_frames'(value : INT)  { super.$$link(5, value) } 
set 'add_ending_frames'(value : INT)  { super.$$link(6, value) } 
set 'method'(value : 'full batch'|'shift batches'|'alternate batches')  { super.$$link(7, value) } 
set 'image'(value : IMAGE)  { super.$$link(8, value) } 

        //Getters
        get 'weights'() : FLOAT { return [this, 'weights', 0]  as unknown as FLOAT; }
get 'weights_invert'() : FLOAT { return [this, 'weights_invert', 1]  as unknown as FLOAT; }
get 'total_frames'() : INT { return [this, 'total_frames', 2]  as unknown as INT; }
get 'image_1'() : IMAGE { return [this, 'image_1', 3]  as unknown as IMAGE; }
get 'image_2'() : IMAGE { return [this, 'image_2', 4]  as unknown as IMAGE; }
get 'weights_strategy'() : WEIGHTS_STRATEGY { return [this, 'weights_strategy', 5]  as unknown as WEIGHTS_STRATEGY; }

        constructor(opts:{
            'weights': STRING,'timing': 'custom'|'linear'|'ease_in_out'|'ease_in'|'ease_out'|'random','frames': INT,'start_frame': INT,'end_frame': INT,'add_starting_frames': INT,'add_ending_frames': INT,'method': 'full batch'|'shift batches'|'alternate batches','image'?: IMAGE
        }){
            super(ctx);

            this['weights'] = opts['weights'];
this['timing'] = opts['timing'];
this['frames'] = opts['frames'];
this['start_frame'] = opts['start_frame'];
this['end_frame'] = opts['end_frame'];
this['add_starting_frames'] = opts['add_starting_frames'];
this['add_ending_frames'] = opts['add_ending_frames'];
this['method'] = opts['method']
            if(opts['image']!==undefined) this['image'] = opts['image']

        }

        static defaults = {
            'weights':  "1.0, 0.0",
'timing':  "linear",
'frames':  0,
'start_frame':  0,
'end_frame':  9999,
'add_starting_frames':  0,
'add_ending_frames':  0,
'method':  "full batch"
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapterCombineWeights' : class extends Node{
        //Setters
        set 'weights_1'(value : FLOAT)  { super.$$link(0, value) } 
set 'weights_2'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'weights'() : FLOAT { return [this, 'weights', 0]  as unknown as FLOAT; }
get 'count'() : INT { return [this, 'count', 1]  as unknown as INT; }

        constructor(opts:{
            'weights_1': FLOAT,'weights_2': FLOAT
        }){
            super(ctx);

            this['weights_1'] = opts['weights_1'];
this['weights_2'] = opts['weights_2']
            

        }

        static defaults = {
            'weights_1':  0,
'weights_2':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapterWeightsFromStrategy' : class extends Node{
        //Setters
        set 'weights_strategy'(value : WEIGHTS_STRATEGY)  { super.$$link(0, value) } 
set 'image'(value : IMAGE)  { super.$$link(1, value) } 

        //Getters
        get 'weights'() : FLOAT { return [this, 'weights', 0]  as unknown as FLOAT; }
get 'weights_invert'() : FLOAT { return [this, 'weights_invert', 1]  as unknown as FLOAT; }
get 'total_frames'() : INT { return [this, 'total_frames', 2]  as unknown as INT; }
get 'image_1'() : IMAGE { return [this, 'image_1', 3]  as unknown as IMAGE; }
get 'image_2'() : IMAGE { return [this, 'image_2', 4]  as unknown as IMAGE; }
get 'weights_strategy'() : WEIGHTS_STRATEGY { return [this, 'weights_strategy', 5]  as unknown as WEIGHTS_STRATEGY; }

        constructor(opts:{
            'weights_strategy': WEIGHTS_STRATEGY,'image'?: IMAGE
        }){
            super(ctx);

            this['weights_strategy'] = opts['weights_strategy']
            if(opts['image']!==undefined) this['image'] = opts['image']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapterPromptScheduleFromWeightsStrategy' : class extends Node{
        //Setters
        set 'weights_strategy'(value : WEIGHTS_STRATEGY)  { super.$$link(0, value) } 
set 'prompt'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'prompt_schedule'() : STRING { return [this, 'prompt_schedule', 0]  as unknown as STRING; }

        constructor(opts:{
            'weights_strategy': WEIGHTS_STRATEGY,'prompt': STRING
        }){
            super(ctx);

            this['weights_strategy'] = opts['weights_strategy'];
this['prompt'] = opts['prompt']
            

        }

        static defaults = {
            'prompt':  ""
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapterRegionalConditioning' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'image_weight'(value : FLOAT)  { super.$$link(1, value) } 
set 'prompt_weight'(value : FLOAT)  { super.$$link(2, value) } 
set 'weight_type'(value : 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise')  { super.$$link(3, value) } 
set 'start_at'(value : FLOAT)  { super.$$link(4, value) } 
set 'end_at'(value : FLOAT)  { super.$$link(5, value) } 
set 'mask'(value : MASK)  { super.$$link(6, value) } 
set 'positive'(value : CONDITIONING)  { super.$$link(7, value) } 
set 'negative'(value : CONDITIONING)  { super.$$link(8, value) } 

        //Getters
        get 'IPADAPTER_PARAMS'() : IPADAPTER_PARAMS { return [this, 'IPADAPTER_PARAMS', 0]  as unknown as IPADAPTER_PARAMS; }
get 'POSITIVE'() : CONDITIONING { return [this, 'POSITIVE', 1]  as unknown as CONDITIONING; }
get 'NEGATIVE'() : CONDITIONING { return [this, 'NEGATIVE', 2]  as unknown as CONDITIONING; }

        constructor(opts:{
            'image': IMAGE,'image_weight': FLOAT,'prompt_weight': FLOAT,'weight_type': 'linear'|'ease in'|'ease out'|'ease in-out'|'reverse in-out'|'weak input'|'weak output'|'weak middle'|'strong middle'|'style transfer'|'composition'|'strong style transfer'|'style and composition'|'style transfer precise'|'composition precise','start_at': FLOAT,'end_at': FLOAT,'mask'?: MASK,'positive'?: CONDITIONING,'negative'?: CONDITIONING
        }){
            super(ctx);

            this['image'] = opts['image'];
this['image_weight'] = opts['image_weight'];
this['prompt_weight'] = opts['prompt_weight'];
this['weight_type'] = opts['weight_type'];
this['start_at'] = opts['start_at'];
this['end_at'] = opts['end_at']
            if(opts['mask']!==undefined) this['mask'] = opts['mask'];
if(opts['positive']!==undefined) this['positive'] = opts['positive'];
if(opts['negative']!==undefined) this['negative'] = opts['negative']

        }

        static defaults = {
            'image_weight':  1,
'prompt_weight':  1,
'start_at':  0,
'end_at':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'IPAdapterCombineParams' : class extends Node{
        //Setters
        set 'params_1'(value : IPADAPTER_PARAMS)  { super.$$link(0, value) } 
set 'params_2'(value : IPADAPTER_PARAMS)  { super.$$link(1, value) } 
set 'params_3'(value : IPADAPTER_PARAMS)  { super.$$link(2, value) } 
set 'params_4'(value : IPADAPTER_PARAMS)  { super.$$link(3, value) } 
set 'params_5'(value : IPADAPTER_PARAMS)  { super.$$link(4, value) } 

        //Getters
        get 'IPADAPTER_PARAMS'() : IPADAPTER_PARAMS { return [this, 'IPADAPTER_PARAMS', 0]  as unknown as IPADAPTER_PARAMS; }

        constructor(opts:{
            'params_1': IPADAPTER_PARAMS,'params_2': IPADAPTER_PARAMS,'params_3'?: IPADAPTER_PARAMS,'params_4'?: IPADAPTER_PARAMS,'params_5'?: IPADAPTER_PARAMS
        }){
            super(ctx);

            this['params_1'] = opts['params_1'];
this['params_2'] = opts['params_2']
            if(opts['params_3']!==undefined) this['params_3'] = opts['params_3'];
if(opts['params_4']!==undefined) this['params_4'] = opts['params_4'];
if(opts['params_5']!==undefined) this['params_5'] = opts['params_5']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_VideoCombine' : class extends Node{
        //Setters
        set 'frame_rate'(value : FLOAT)  { super.$$link(0, value) } 
set 'loop_count'(value : INT)  { super.$$link(1, value) } 
set 'filename_prefix'(value : STRING)  { super.$$link(2, value) } 
set 'format'(value : 'image/gif'|'image/webp'|'video/16bit-png'|'video/8bit-png'|'video/ProRes'|'video/av1-webm,pix_fmt,yuv420p10le,yuv420p,crf,INT,[object Object],input_color_depth,8bit,16bit,save_metadata,BOOLEAN,[object Object]'|'video/ffmpeg-gif,dither,bayer,heckbert,floyd_steinberg,sierra2,sierra2_4a,sierra3,burkes,atkinson,none,[object Object],[0:v] split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse=dither=$val'|'video/h264-mp4,pix_fmt,yuv420p,yuv420p10le,crf,INT,[object Object],save_metadata,BOOLEAN,[object Object]'|'video/h265-mp4,pix_fmt,yuv420p10le,yuv420p,crf,INT,[object Object],save_metadata,BOOLEAN,[object Object]'|'video/nvenc_h264-mp4,pix_fmt,yuv420p,yuv420p10le,bitrate,INT,[object Object],megabit,BOOLEAN,[object Object],save_metadata,BOOLEAN,[object Object]'|'video/nvenc_hevc-mp4,pix_fmt,yuv420p,yuv420p10le,bitrate,INT,[object Object],megabit,BOOLEAN,[object Object],save_metadata,BOOLEAN,[object Object]'|'video/webm,crf,INT,[object Object],save_metadata,BOOLEAN,[object Object]')  { super.$$link(3, value) } 
set 'pingpong'(value : BOOLEAN)  { super.$$link(4, value) } 
set 'save_output'(value : BOOLEAN)  { super.$$link(5, value) } 
set 'images'(value : IMAGE)  { super.$$link(6, value) } 
set 'audio'(value : AUDIO)  { super.$$link(7, value) } 
set 'meta_batch'(value : VHS_BatchManager)  { super.$$link(8, value) } 
set 'vae'(value : VAE)  { super.$$link(9, value) } 
set 'latents'(value : LATENT)  { super.$$link(10, value) } 

        //Getters
        get 'Filenames'() : VHS_FILENAMES { return [this, 'Filenames', 0]  as unknown as VHS_FILENAMES; }

        constructor(opts:{
            'frame_rate': FLOAT,'loop_count': INT,'filename_prefix': STRING,'format': 'image/gif'|'image/webp'|'video/16bit-png'|'video/8bit-png'|'video/ProRes'|'video/av1-webm,pix_fmt,yuv420p10le,yuv420p,crf,INT,[object Object],input_color_depth,8bit,16bit,save_metadata,BOOLEAN,[object Object]'|'video/ffmpeg-gif,dither,bayer,heckbert,floyd_steinberg,sierra2,sierra2_4a,sierra3,burkes,atkinson,none,[object Object],[0:v] split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse=dither=$val'|'video/h264-mp4,pix_fmt,yuv420p,yuv420p10le,crf,INT,[object Object],save_metadata,BOOLEAN,[object Object]'|'video/h265-mp4,pix_fmt,yuv420p10le,yuv420p,crf,INT,[object Object],save_metadata,BOOLEAN,[object Object]'|'video/nvenc_h264-mp4,pix_fmt,yuv420p,yuv420p10le,bitrate,INT,[object Object],megabit,BOOLEAN,[object Object],save_metadata,BOOLEAN,[object Object]'|'video/nvenc_hevc-mp4,pix_fmt,yuv420p,yuv420p10le,bitrate,INT,[object Object],megabit,BOOLEAN,[object Object],save_metadata,BOOLEAN,[object Object]'|'video/webm,crf,INT,[object Object],save_metadata,BOOLEAN,[object Object]','pingpong': BOOLEAN,'save_output': BOOLEAN,'images'?: IMAGE,'audio'?: AUDIO,'meta_batch'?: VHS_BatchManager,'vae'?: VAE,'latents'?: LATENT
        }){
            super(ctx);

            this['frame_rate'] = opts['frame_rate'];
this['loop_count'] = opts['loop_count'];
this['filename_prefix'] = opts['filename_prefix'];
this['format'] = opts['format'];
this['pingpong'] = opts['pingpong'];
this['save_output'] = opts['save_output']
            if(opts['images']!==undefined) this['images'] = opts['images'];
if(opts['audio']!==undefined) this['audio'] = opts['audio'];
if(opts['meta_batch']!==undefined) this['meta_batch'] = opts['meta_batch'];
if(opts['vae']!==undefined) this['vae'] = opts['vae'];
if(opts['latents']!==undefined) this['latents'] = opts['latents']

        }

        static defaults = {
            'frame_rate':  8,
'loop_count':  0,
'filename_prefix':  "AnimateDiff",
'pingpong':  false,
'save_output':  true
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_LoadVideo' : class extends Node{
        //Setters
        set 'video'(value : void)  { super.$$link(0, value) } 
set 'force_rate'(value : INT)  { super.$$link(1, value) } 
set 'force_size'(value : 'Disabled'|'Custom Height'|'Custom Width'|'Custom'|'256x?'|'?x256'|'256x256'|'512x?'|'?x512'|'512x512')  { super.$$link(2, value) } 
set 'custom_width'(value : INT)  { super.$$link(3, value) } 
set 'custom_height'(value : INT)  { super.$$link(4, value) } 
set 'frame_load_cap'(value : INT)  { super.$$link(5, value) } 
set 'skip_first_frames'(value : INT)  { super.$$link(6, value) } 
set 'select_every_nth'(value : INT)  { super.$$link(7, value) } 
set 'meta_batch'(value : VHS_BatchManager)  { super.$$link(8, value) } 
set 'vae'(value : VAE)  { super.$$link(9, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }
get 'frame_count'() : INT { return [this, 'frame_count', 1]  as unknown as INT; }
get 'audio'() : AUDIO { return [this, 'audio', 2]  as unknown as AUDIO; }
get 'video_info'() : VHS_VIDEOINFO { return [this, 'video_info', 3]  as unknown as VHS_VIDEOINFO; }
get 'LATENT'() : LATENT { return [this, 'LATENT', 4]  as unknown as LATENT; }

        constructor(opts:{
            'video': void,'force_rate': INT,'force_size': 'Disabled'|'Custom Height'|'Custom Width'|'Custom'|'256x?'|'?x256'|'256x256'|'512x?'|'?x512'|'512x512','custom_width': INT,'custom_height': INT,'frame_load_cap': INT,'skip_first_frames': INT,'select_every_nth': INT,'meta_batch'?: VHS_BatchManager,'vae'?: VAE
        }){
            super(ctx);

            this['video'] = opts['video'];
this['force_rate'] = opts['force_rate'];
this['force_size'] = opts['force_size'];
this['custom_width'] = opts['custom_width'];
this['custom_height'] = opts['custom_height'];
this['frame_load_cap'] = opts['frame_load_cap'];
this['skip_first_frames'] = opts['skip_first_frames'];
this['select_every_nth'] = opts['select_every_nth']
            if(opts['meta_batch']!==undefined) this['meta_batch'] = opts['meta_batch'];
if(opts['vae']!==undefined) this['vae'] = opts['vae']

        }

        static defaults = {
            'force_rate':  0,
'custom_width':  512,
'custom_height':  512,
'frame_load_cap':  0,
'skip_first_frames':  0,
'select_every_nth':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_LoadVideoPath' : class extends Node{
        //Setters
        set 'video'(value : STRING)  { super.$$link(0, value) } 
set 'force_rate'(value : INT)  { super.$$link(1, value) } 
set 'force_size'(value : 'Disabled'|'Custom Height'|'Custom Width'|'Custom'|'256x?'|'?x256'|'256x256'|'512x?'|'?x512'|'512x512')  { super.$$link(2, value) } 
set 'custom_width'(value : INT)  { super.$$link(3, value) } 
set 'custom_height'(value : INT)  { super.$$link(4, value) } 
set 'frame_load_cap'(value : INT)  { super.$$link(5, value) } 
set 'skip_first_frames'(value : INT)  { super.$$link(6, value) } 
set 'select_every_nth'(value : INT)  { super.$$link(7, value) } 
set 'meta_batch'(value : VHS_BatchManager)  { super.$$link(8, value) } 
set 'vae'(value : VAE)  { super.$$link(9, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }
get 'frame_count'() : INT { return [this, 'frame_count', 1]  as unknown as INT; }
get 'audio'() : AUDIO { return [this, 'audio', 2]  as unknown as AUDIO; }
get 'video_info'() : VHS_VIDEOINFO { return [this, 'video_info', 3]  as unknown as VHS_VIDEOINFO; }
get 'LATENT'() : LATENT { return [this, 'LATENT', 4]  as unknown as LATENT; }

        constructor(opts:{
            'video': STRING,'force_rate': INT,'force_size': 'Disabled'|'Custom Height'|'Custom Width'|'Custom'|'256x?'|'?x256'|'256x256'|'512x?'|'?x512'|'512x512','custom_width': INT,'custom_height': INT,'frame_load_cap': INT,'skip_first_frames': INT,'select_every_nth': INT,'meta_batch'?: VHS_BatchManager,'vae'?: VAE
        }){
            super(ctx);

            this['video'] = opts['video'];
this['force_rate'] = opts['force_rate'];
this['force_size'] = opts['force_size'];
this['custom_width'] = opts['custom_width'];
this['custom_height'] = opts['custom_height'];
this['frame_load_cap'] = opts['frame_load_cap'];
this['skip_first_frames'] = opts['skip_first_frames'];
this['select_every_nth'] = opts['select_every_nth']
            if(opts['meta_batch']!==undefined) this['meta_batch'] = opts['meta_batch'];
if(opts['vae']!==undefined) this['vae'] = opts['vae']

        }

        static defaults = {
            'video':  "X://insert/path/here.mp4",
'force_rate':  0,
'custom_width':  512,
'custom_height':  512,
'frame_load_cap':  0,
'skip_first_frames':  0,
'select_every_nth':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_LoadImages' : class extends Node{
        //Setters
        set 'directory'(value : 'COFFIN')  { super.$$link(0, value) } 
set 'image_load_cap'(value : INT)  { super.$$link(1, value) } 
set 'skip_first_images'(value : INT)  { super.$$link(2, value) } 
set 'select_every_nth'(value : INT)  { super.$$link(3, value) } 
set 'meta_batch'(value : VHS_BatchManager)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }
get 'MASK'() : MASK { return [this, 'MASK', 1]  as unknown as MASK; }
get 'frame_count'() : INT { return [this, 'frame_count', 2]  as unknown as INT; }

        constructor(opts:{
            'directory': 'COFFIN','image_load_cap'?: INT,'skip_first_images'?: INT,'select_every_nth'?: INT,'meta_batch'?: VHS_BatchManager
        }){
            super(ctx);

            this['directory'] = opts['directory']
            if(opts['image_load_cap']!==undefined) this['image_load_cap'] = opts['image_load_cap'];
if(opts['skip_first_images']!==undefined) this['skip_first_images'] = opts['skip_first_images'];
if(opts['select_every_nth']!==undefined) this['select_every_nth'] = opts['select_every_nth'];
if(opts['meta_batch']!==undefined) this['meta_batch'] = opts['meta_batch']

        }

        static defaults = {
            'image_load_cap':  0,
'skip_first_images':  0,
'select_every_nth':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_LoadImagesPath' : class extends Node{
        //Setters
        set 'directory'(value : STRING)  { super.$$link(0, value) } 
set 'image_load_cap'(value : INT)  { super.$$link(1, value) } 
set 'skip_first_images'(value : INT)  { super.$$link(2, value) } 
set 'select_every_nth'(value : INT)  { super.$$link(3, value) } 
set 'meta_batch'(value : VHS_BatchManager)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }
get 'MASK'() : MASK { return [this, 'MASK', 1]  as unknown as MASK; }
get 'frame_count'() : INT { return [this, 'frame_count', 2]  as unknown as INT; }

        constructor(opts:{
            'directory': STRING,'image_load_cap'?: INT,'skip_first_images'?: INT,'select_every_nth'?: INT,'meta_batch'?: VHS_BatchManager
        }){
            super(ctx);

            this['directory'] = opts['directory']
            if(opts['image_load_cap']!==undefined) this['image_load_cap'] = opts['image_load_cap'];
if(opts['skip_first_images']!==undefined) this['skip_first_images'] = opts['skip_first_images'];
if(opts['select_every_nth']!==undefined) this['select_every_nth'] = opts['select_every_nth'];
if(opts['meta_batch']!==undefined) this['meta_batch'] = opts['meta_batch']

        }

        static defaults = {
            'directory':  "X://path/to/images",
'image_load_cap':  0,
'skip_first_images':  0,
'select_every_nth':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_LoadAudio' : class extends Node{
        //Setters
        set 'audio_file'(value : STRING)  { super.$$link(0, value) } 
set 'seek_seconds'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'audio'() : AUDIO { return [this, 'audio', 0]  as unknown as AUDIO; }

        constructor(opts:{
            'audio_file': STRING,'seek_seconds'?: FLOAT
        }){
            super(ctx);

            this['audio_file'] = opts['audio_file']
            if(opts['seek_seconds']!==undefined) this['seek_seconds'] = opts['seek_seconds']

        }

        static defaults = {
            'audio_file':  "input/",
'seek_seconds':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_LoadAudioUpload' : class extends Node{
        //Setters
        set 'audio'(value : void)  { super.$$link(0, value) } 
set 'start_time'(value : FLOAT)  { super.$$link(1, value) } 
set 'duration'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'audio'() : AUDIO { return [this, 'audio', 0]  as unknown as AUDIO; }

        constructor(opts:{
            'audio': void,'start_time': FLOAT,'duration': FLOAT
        }){
            super(ctx);

            this['audio'] = opts['audio'];
this['start_time'] = opts['start_time'];
this['duration'] = opts['duration']
            

        }

        static defaults = {
            'start_time':  0,
'duration':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_AudioToVHSAudio' : class extends Node{
        //Setters
        set 'audio'(value : AUDIO)  { super.$$link(0, value) } 

        //Getters
        get 'vhs_audio'() : VHS_AUDIO { return [this, 'vhs_audio', 0]  as unknown as VHS_AUDIO; }

        constructor(opts:{
            'audio': AUDIO
        }){
            super(ctx);

            this['audio'] = opts['audio']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_VHSAudioToAudio' : class extends Node{
        //Setters
        set 'vhs_audio'(value : VHS_AUDIO)  { super.$$link(0, value) } 

        //Getters
        get 'audio'() : AUDIO { return [this, 'audio', 0]  as unknown as AUDIO; }

        constructor(opts:{
            'vhs_audio': VHS_AUDIO
        }){
            super(ctx);

            this['vhs_audio'] = opts['vhs_audio']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_PruneOutputs' : class extends Node{
        //Setters
        set 'filenames'(value : VHS_FILENAMES)  { super.$$link(0, value) } 
set 'options'(value : 'Intermediate'|'Intermediate and Utility')  { super.$$link(1, value) } 

        //Getters
        

        constructor(opts:{
            'filenames': VHS_FILENAMES,'options': 'Intermediate'|'Intermediate and Utility'
        }){
            super(ctx);

            this['filenames'] = opts['filenames'];
this['options'] = opts['options']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_BatchManager' : class extends Node{
        //Setters
        set 'frames_per_batch'(value : INT)  { super.$$link(0, value) } 

        //Getters
        get 'meta_batch'() : VHS_BatchManager { return [this, 'meta_batch', 0]  as unknown as VHS_BatchManager; }

        constructor(opts:{
            'frames_per_batch': INT
        }){
            super(ctx);

            this['frames_per_batch'] = opts['frames_per_batch']
            

        }

        static defaults = {
            'frames_per_batch':  16
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_VideoInfo' : class extends Node{
        //Setters
        set 'video_info'(value : VHS_VIDEOINFO)  { super.$$link(0, value) } 

        //Getters
        get 'source_fps🟨'() : FLOAT { return [this, 'source_fps🟨', 0]  as unknown as FLOAT; }
get 'source_frame_count🟨'() : INT { return [this, 'source_frame_count🟨', 1]  as unknown as INT; }
get 'source_duration🟨'() : FLOAT { return [this, 'source_duration🟨', 2]  as unknown as FLOAT; }
get 'source_width🟨'() : INT { return [this, 'source_width🟨', 3]  as unknown as INT; }
get 'source_height🟨'() : INT { return [this, 'source_height🟨', 4]  as unknown as INT; }
get 'loaded_fps🟦'() : FLOAT { return [this, 'loaded_fps🟦', 5]  as unknown as FLOAT; }
get 'loaded_frame_count🟦'() : INT { return [this, 'loaded_frame_count🟦', 6]  as unknown as INT; }
get 'loaded_duration🟦'() : FLOAT { return [this, 'loaded_duration🟦', 7]  as unknown as FLOAT; }
get 'loaded_width🟦'() : INT { return [this, 'loaded_width🟦', 8]  as unknown as INT; }
get 'loaded_height🟦'() : INT { return [this, 'loaded_height🟦', 9]  as unknown as INT; }

        constructor(opts:{
            'video_info': VHS_VIDEOINFO
        }){
            super(ctx);

            this['video_info'] = opts['video_info']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_VideoInfoSource' : class extends Node{
        //Setters
        set 'video_info'(value : VHS_VIDEOINFO)  { super.$$link(0, value) } 

        //Getters
        get 'fps🟨'() : FLOAT { return [this, 'fps🟨', 0]  as unknown as FLOAT; }
get 'frame_count🟨'() : INT { return [this, 'frame_count🟨', 1]  as unknown as INT; }
get 'duration🟨'() : FLOAT { return [this, 'duration🟨', 2]  as unknown as FLOAT; }
get 'width🟨'() : INT { return [this, 'width🟨', 3]  as unknown as INT; }
get 'height🟨'() : INT { return [this, 'height🟨', 4]  as unknown as INT; }

        constructor(opts:{
            'video_info': VHS_VIDEOINFO
        }){
            super(ctx);

            this['video_info'] = opts['video_info']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_VideoInfoLoaded' : class extends Node{
        //Setters
        set 'video_info'(value : VHS_VIDEOINFO)  { super.$$link(0, value) } 

        //Getters
        get 'fps🟦'() : FLOAT { return [this, 'fps🟦', 0]  as unknown as FLOAT; }
get 'frame_count🟦'() : INT { return [this, 'frame_count🟦', 1]  as unknown as INT; }
get 'duration🟦'() : FLOAT { return [this, 'duration🟦', 2]  as unknown as FLOAT; }
get 'width🟦'() : INT { return [this, 'width🟦', 3]  as unknown as INT; }
get 'height🟦'() : INT { return [this, 'height🟦', 4]  as unknown as INT; }

        constructor(opts:{
            'video_info': VHS_VIDEOINFO
        }){
            super(ctx);

            this['video_info'] = opts['video_info']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_VAEEncodeBatched' : class extends Node{
        //Setters
        set 'pixels'(value : IMAGE)  { super.$$link(0, value) } 
set 'vae'(value : VAE)  { super.$$link(1, value) } 
set 'per_batch'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'pixels': IMAGE,'vae': VAE,'per_batch': INT
        }){
            super(ctx);

            this['pixels'] = opts['pixels'];
this['vae'] = opts['vae'];
this['per_batch'] = opts['per_batch']
            

        }

        static defaults = {
            'per_batch':  16
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_VAEDecodeBatched' : class extends Node{
        //Setters
        set 'samples'(value : LATENT)  { super.$$link(0, value) } 
set 'vae'(value : VAE)  { super.$$link(1, value) } 
set 'per_batch'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'samples': LATENT,'vae': VAE,'per_batch': INT
        }){
            super(ctx);

            this['samples'] = opts['samples'];
this['vae'] = opts['vae'];
this['per_batch'] = opts['per_batch']
            

        }

        static defaults = {
            'per_batch':  16
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_SplitLatents' : class extends Node{
        //Setters
        set 'latents'(value : LATENT)  { super.$$link(0, value) } 
set 'split_index'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'LATENT_A'() : LATENT { return [this, 'LATENT_A', 0]  as unknown as LATENT; }
get 'A_count'() : INT { return [this, 'A_count', 1]  as unknown as INT; }
get 'LATENT_B'() : LATENT { return [this, 'LATENT_B', 2]  as unknown as LATENT; }
get 'B_count'() : INT { return [this, 'B_count', 3]  as unknown as INT; }

        constructor(opts:{
            'latents': LATENT,'split_index': INT
        }){
            super(ctx);

            this['latents'] = opts['latents'];
this['split_index'] = opts['split_index']
            

        }

        static defaults = {
            'split_index':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_SplitImages' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'split_index'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE_A'() : IMAGE { return [this, 'IMAGE_A', 0]  as unknown as IMAGE; }
get 'A_count'() : INT { return [this, 'A_count', 1]  as unknown as INT; }
get 'IMAGE_B'() : IMAGE { return [this, 'IMAGE_B', 2]  as unknown as IMAGE; }
get 'B_count'() : INT { return [this, 'B_count', 3]  as unknown as INT; }

        constructor(opts:{
            'images': IMAGE,'split_index': INT
        }){
            super(ctx);

            this['images'] = opts['images'];
this['split_index'] = opts['split_index']
            

        }

        static defaults = {
            'split_index':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_SplitMasks' : class extends Node{
        //Setters
        set 'mask'(value : MASK)  { super.$$link(0, value) } 
set 'split_index'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'MASK_A'() : MASK { return [this, 'MASK_A', 0]  as unknown as MASK; }
get 'A_count'() : INT { return [this, 'A_count', 1]  as unknown as INT; }
get 'MASK_B'() : MASK { return [this, 'MASK_B', 2]  as unknown as MASK; }
get 'B_count'() : INT { return [this, 'B_count', 3]  as unknown as INT; }

        constructor(opts:{
            'mask': MASK,'split_index': INT
        }){
            super(ctx);

            this['mask'] = opts['mask'];
this['split_index'] = opts['split_index']
            

        }

        static defaults = {
            'split_index':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_MergeLatents' : class extends Node{
        //Setters
        set 'latents_A'(value : LATENT)  { super.$$link(0, value) } 
set 'latents_B'(value : LATENT)  { super.$$link(1, value) } 
set 'merge_strategy'(value : 'match A'|'match B'|'match smaller'|'match larger')  { super.$$link(2, value) } 
set 'scale_method'(value : 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp')  { super.$$link(3, value) } 
set 'crop'(value : 'disabled'|'center')  { super.$$link(4, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }
get 'count'() : INT { return [this, 'count', 1]  as unknown as INT; }

        constructor(opts:{
            'latents_A': LATENT,'latents_B': LATENT,'merge_strategy': 'match A'|'match B'|'match smaller'|'match larger','scale_method': 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp','crop': 'disabled'|'center'
        }){
            super(ctx);

            this['latents_A'] = opts['latents_A'];
this['latents_B'] = opts['latents_B'];
this['merge_strategy'] = opts['merge_strategy'];
this['scale_method'] = opts['scale_method'];
this['crop'] = opts['crop']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_MergeImages' : class extends Node{
        //Setters
        set 'images_A'(value : IMAGE)  { super.$$link(0, value) } 
set 'images_B'(value : IMAGE)  { super.$$link(1, value) } 
set 'merge_strategy'(value : 'match A'|'match B'|'match smaller'|'match larger')  { super.$$link(2, value) } 
set 'scale_method'(value : 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp')  { super.$$link(3, value) } 
set 'crop'(value : 'disabled'|'center')  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }
get 'count'() : INT { return [this, 'count', 1]  as unknown as INT; }

        constructor(opts:{
            'images_A': IMAGE,'images_B': IMAGE,'merge_strategy': 'match A'|'match B'|'match smaller'|'match larger','scale_method': 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp','crop': 'disabled'|'center'
        }){
            super(ctx);

            this['images_A'] = opts['images_A'];
this['images_B'] = opts['images_B'];
this['merge_strategy'] = opts['merge_strategy'];
this['scale_method'] = opts['scale_method'];
this['crop'] = opts['crop']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_MergeMasks' : class extends Node{
        //Setters
        set 'mask_A'(value : MASK)  { super.$$link(0, value) } 
set 'mask_B'(value : MASK)  { super.$$link(1, value) } 
set 'merge_strategy'(value : 'match A'|'match B'|'match smaller'|'match larger')  { super.$$link(2, value) } 
set 'scale_method'(value : 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp')  { super.$$link(3, value) } 
set 'crop'(value : 'disabled'|'center')  { super.$$link(4, value) } 

        //Getters
        get 'MASK'() : MASK { return [this, 'MASK', 0]  as unknown as MASK; }
get 'count'() : INT { return [this, 'count', 1]  as unknown as INT; }

        constructor(opts:{
            'mask_A': MASK,'mask_B': MASK,'merge_strategy': 'match A'|'match B'|'match smaller'|'match larger','scale_method': 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp','crop': 'disabled'|'center'
        }){
            super(ctx);

            this['mask_A'] = opts['mask_A'];
this['mask_B'] = opts['mask_B'];
this['merge_strategy'] = opts['merge_strategy'];
this['scale_method'] = opts['scale_method'];
this['crop'] = opts['crop']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_GetLatentCount' : class extends Node{
        //Setters
        set 'latents'(value : LATENT)  { super.$$link(0, value) } 

        //Getters
        get 'count'() : INT { return [this, 'count', 0]  as unknown as INT; }

        constructor(opts:{
            'latents': LATENT
        }){
            super(ctx);

            this['latents'] = opts['latents']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_GetImageCount' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        get 'count'() : INT { return [this, 'count', 0]  as unknown as INT; }

        constructor(opts:{
            'images': IMAGE
        }){
            super(ctx);

            this['images'] = opts['images']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_GetMaskCount' : class extends Node{
        //Setters
        set 'mask'(value : MASK)  { super.$$link(0, value) } 

        //Getters
        get 'count'() : INT { return [this, 'count', 0]  as unknown as INT; }

        constructor(opts:{
            'mask': MASK
        }){
            super(ctx);

            this['mask'] = opts['mask']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_DuplicateLatents' : class extends Node{
        //Setters
        set 'latents'(value : LATENT)  { super.$$link(0, value) } 
set 'multiply_by'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }
get 'count'() : INT { return [this, 'count', 1]  as unknown as INT; }

        constructor(opts:{
            'latents': LATENT,'multiply_by': INT
        }){
            super(ctx);

            this['latents'] = opts['latents'];
this['multiply_by'] = opts['multiply_by']
            

        }

        static defaults = {
            'multiply_by':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_DuplicateImages' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'multiply_by'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }
get 'count'() : INT { return [this, 'count', 1]  as unknown as INT; }

        constructor(opts:{
            'images': IMAGE,'multiply_by': INT
        }){
            super(ctx);

            this['images'] = opts['images'];
this['multiply_by'] = opts['multiply_by']
            

        }

        static defaults = {
            'multiply_by':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_DuplicateMasks' : class extends Node{
        //Setters
        set 'mask'(value : MASK)  { super.$$link(0, value) } 
set 'multiply_by'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'MASK'() : MASK { return [this, 'MASK', 0]  as unknown as MASK; }
get 'count'() : INT { return [this, 'count', 1]  as unknown as INT; }

        constructor(opts:{
            'mask': MASK,'multiply_by': INT
        }){
            super(ctx);

            this['mask'] = opts['mask'];
this['multiply_by'] = opts['multiply_by']
            

        }

        static defaults = {
            'multiply_by':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_SelectEveryNthLatent' : class extends Node{
        //Setters
        set 'latents'(value : LATENT)  { super.$$link(0, value) } 
set 'select_every_nth'(value : INT)  { super.$$link(1, value) } 
set 'skip_first_latents'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }
get 'count'() : INT { return [this, 'count', 1]  as unknown as INT; }

        constructor(opts:{
            'latents': LATENT,'select_every_nth': INT,'skip_first_latents': INT
        }){
            super(ctx);

            this['latents'] = opts['latents'];
this['select_every_nth'] = opts['select_every_nth'];
this['skip_first_latents'] = opts['skip_first_latents']
            

        }

        static defaults = {
            'select_every_nth':  1,
'skip_first_latents':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_SelectEveryNthImage' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'select_every_nth'(value : INT)  { super.$$link(1, value) } 
set 'skip_first_images'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }
get 'count'() : INT { return [this, 'count', 1]  as unknown as INT; }

        constructor(opts:{
            'images': IMAGE,'select_every_nth': INT,'skip_first_images': INT
        }){
            super(ctx);

            this['images'] = opts['images'];
this['select_every_nth'] = opts['select_every_nth'];
this['skip_first_images'] = opts['skip_first_images']
            

        }

        static defaults = {
            'select_every_nth':  1,
'skip_first_images':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_SelectEveryNthMask' : class extends Node{
        //Setters
        set 'mask'(value : MASK)  { super.$$link(0, value) } 
set 'select_every_nth'(value : INT)  { super.$$link(1, value) } 
set 'skip_first_masks'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'MASK'() : MASK { return [this, 'MASK', 0]  as unknown as MASK; }
get 'count'() : INT { return [this, 'count', 1]  as unknown as INT; }

        constructor(opts:{
            'mask': MASK,'select_every_nth': INT,'skip_first_masks': INT
        }){
            super(ctx);

            this['mask'] = opts['mask'];
this['select_every_nth'] = opts['select_every_nth'];
this['skip_first_masks'] = opts['skip_first_masks']
            

        }

        static defaults = {
            'select_every_nth':  1,
'skip_first_masks':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_SelectLatents' : class extends Node{
        //Setters
        set 'latent'(value : LATENT)  { super.$$link(0, value) } 
set 'indexes'(value : STRING)  { super.$$link(1, value) } 
set 'err_if_missing'(value : BOOLEAN)  { super.$$link(2, value) } 
set 'err_if_empty'(value : BOOLEAN)  { super.$$link(3, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'latent': LATENT,'indexes': STRING,'err_if_missing': BOOLEAN,'err_if_empty': BOOLEAN
        }){
            super(ctx);

            this['latent'] = opts['latent'];
this['indexes'] = opts['indexes'];
this['err_if_missing'] = opts['err_if_missing'];
this['err_if_empty'] = opts['err_if_empty']
            

        }

        static defaults = {
            'indexes':  "0",
'err_if_missing':  true,
'err_if_empty':  true
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_SelectImages' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'indexes'(value : STRING)  { super.$$link(1, value) } 
set 'err_if_missing'(value : BOOLEAN)  { super.$$link(2, value) } 
set 'err_if_empty'(value : BOOLEAN)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'indexes': STRING,'err_if_missing': BOOLEAN,'err_if_empty': BOOLEAN
        }){
            super(ctx);

            this['image'] = opts['image'];
this['indexes'] = opts['indexes'];
this['err_if_missing'] = opts['err_if_missing'];
this['err_if_empty'] = opts['err_if_empty']
            

        }

        static defaults = {
            'indexes':  "0",
'err_if_missing':  true,
'err_if_empty':  true
}
},

    /**
     * TODO Docs based on metadata
     */
    'VHS_SelectMasks' : class extends Node{
        //Setters
        set 'mask'(value : MASK)  { super.$$link(0, value) } 
set 'indexes'(value : STRING)  { super.$$link(1, value) } 
set 'err_if_missing'(value : BOOLEAN)  { super.$$link(2, value) } 
set 'err_if_empty'(value : BOOLEAN)  { super.$$link(3, value) } 

        //Getters
        get 'MASK'() : MASK { return [this, 'MASK', 0]  as unknown as MASK; }

        constructor(opts:{
            'mask': MASK,'indexes': STRING,'err_if_missing': BOOLEAN,'err_if_empty': BOOLEAN
        }){
            super(ctx);

            this['mask'] = opts['mask'];
this['indexes'] = opts['indexes'];
this['err_if_missing'] = opts['err_if_missing'];
this['err_if_empty'] = opts['err_if_empty']
            

        }

        static defaults = {
            'indexes':  "0",
'err_if_missing':  true,
'err_if_empty':  true
}
},

    /**
     * TODO Docs based on metadata
     */
    'LivePortraitNode' : class extends Node{
        //Setters
        set 'source_image'(value : IMAGE)  { super.$$link(0, value) } 
set 'driving_video'(value : SCENE_VIDEO)  { super.$$link(1, value) } 
set 'crop_info'(value : CROP_INFO)  { super.$$link(2, value) } 
set 'driving_video_reverse_align'(value : BOOLEAN)  { super.$$link(3, value) } 

        //Getters
        get 'video'() : SCENE_VIDEO { return [this, 'video', 0]  as unknown as SCENE_VIDEO; }
get 'video_concat'() : SCENE_VIDEO { return [this, 'video_concat', 1]  as unknown as SCENE_VIDEO; }

        constructor(opts:{
            'source_image': IMAGE,'driving_video': SCENE_VIDEO,'crop_info'?: CROP_INFO,'driving_video_reverse_align'?: BOOLEAN
        }){
            super(ctx);

            this['source_image'] = opts['source_image'];
this['driving_video'] = opts['driving_video']
            if(opts['crop_info']!==undefined) this['crop_info'] = opts['crop_info'];
if(opts['driving_video_reverse_align']!==undefined) this['driving_video_reverse_align'] = opts['driving_video_reverse_align']

        }

        static defaults = {
            'driving_video_reverse_align':  true
}
},

    /**
     * TODO Docs based on metadata
     */
    'LivePortraitVideoNode' : class extends Node{
        //Setters
        set 'source_image_batch'(value : IMAGE)  { super.$$link(0, value) } 
set 'driving_video'(value : SCENE_VIDEO)  { super.$$link(1, value) } 

        //Getters
        get 'video'() : SCENE_VIDEO { return [this, 'video', 0]  as unknown as SCENE_VIDEO; }
get 'video_concat'() : SCENE_VIDEO { return [this, 'video_concat', 1]  as unknown as SCENE_VIDEO; }

        constructor(opts:{
            'source_image_batch': IMAGE,'driving_video': SCENE_VIDEO
        }){
            super(ctx);

            this['source_image_batch'] = opts['source_image_batch'];
this['driving_video'] = opts['driving_video']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'FaceCropInfo' : class extends Node{
        //Setters
        set 'source_image'(value : IMAGE)  { super.$$link(0, value) } 
set 'face_sorting_direction'(value : 'left-right'|'large-small')  { super.$$link(1, value) } 
set 'face_index'(value : INT)  { super.$$link(2, value) } 
set 'debug'(value : BOOLEAN)  { super.$$link(3, value) } 

        //Getters
        get 'crop_info'() : CROP_INFO { return [this, 'crop_info', 0]  as unknown as CROP_INFO; }
get 'debug_image'() : IMAGE { return [this, 'debug_image', 1]  as unknown as IMAGE; }

        constructor(opts:{
            'source_image': IMAGE,'face_sorting_direction'?: 'left-right'|'large-small','face_index'?: INT,'debug'?: BOOLEAN
        }){
            super(ctx);

            this['source_image'] = opts['source_image']
            if(opts['face_sorting_direction']!==undefined) this['face_sorting_direction'] = opts['face_sorting_direction'];
if(opts['face_index']!==undefined) this['face_index'] = opts['face_index'];
if(opts['debug']!==undefined) this['debug'] = opts['debug']

        }

        static defaults = {
            'face_sorting_direction':  "left-right",
'face_index':  0,
'debug':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'Retargeting' : class extends Node{
        //Setters
        set 'crop_info'(value : CROP_INFO)  { super.$$link(0, value) } 
set 'lip'(value : BOOLEAN)  { super.$$link(1, value) } 
set 'eye'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'crop_info'() : CROP_INFO { return [this, 'crop_info', 0]  as unknown as CROP_INFO; }

        constructor(opts:{
            'crop_info': CROP_INFO,'lip'?: BOOLEAN,'eye'?: BOOLEAN
        }){
            super(ctx);

            this['crop_info'] = opts['crop_info']
            if(opts['lip']!==undefined) this['lip'] = opts['lip'];
if(opts['eye']!==undefined) this['eye'] = opts['eye']

        }

        static defaults = {
            'lip':  true,
'eye':  true
}
},

    /**
     * TODO Docs based on metadata
     */
    'Context Big (rgthree)' : class extends Node{
        //Setters
        set 'base_ctx'(value : RGTHREE_CONTEXT)  { super.$$link(0, value) } 
set 'model'(value : MODEL)  { super.$$link(1, value) } 
set 'clip'(value : CLIP)  { super.$$link(2, value) } 
set 'vae'(value : VAE)  { super.$$link(3, value) } 
set 'positive'(value : CONDITIONING)  { super.$$link(4, value) } 
set 'negative'(value : CONDITIONING)  { super.$$link(5, value) } 
set 'latent'(value : LATENT)  { super.$$link(6, value) } 
set 'images'(value : IMAGE)  { super.$$link(7, value) } 
set 'seed'(value : INT)  { super.$$link(8, value) } 
set 'steps'(value : INT)  { super.$$link(9, value) } 
set 'step_refiner'(value : INT)  { super.$$link(10, value) } 
set 'cfg'(value : FLOAT)  { super.$$link(11, value) } 
set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(12, value) } 
set 'sampler'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(13, value) } 
set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform')  { super.$$link(14, value) } 
set 'clip_width'(value : INT)  { super.$$link(15, value) } 
set 'clip_height'(value : INT)  { super.$$link(16, value) } 
set 'text_pos_g'(value : STRING)  { super.$$link(17, value) } 
set 'text_pos_l'(value : STRING)  { super.$$link(18, value) } 
set 'text_neg_g'(value : STRING)  { super.$$link(19, value) } 
set 'text_neg_l'(value : STRING)  { super.$$link(20, value) } 
set 'mask'(value : MASK)  { super.$$link(21, value) } 
set 'control_net'(value : CONTROL_NET)  { super.$$link(22, value) } 

        //Getters
        get 'CONTEXT'() : RGTHREE_CONTEXT { return [this, 'CONTEXT', 0]  as unknown as RGTHREE_CONTEXT; }
get 'MODEL'() : MODEL { return [this, 'MODEL', 1]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this, 'CLIP', 2]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this, 'VAE', 3]  as unknown as VAE; }
get 'POSITIVE'() : CONDITIONING { return [this, 'POSITIVE', 4]  as unknown as CONDITIONING; }
get 'NEGATIVE'() : CONDITIONING { return [this, 'NEGATIVE', 5]  as unknown as CONDITIONING; }
get 'LATENT'() : LATENT { return [this, 'LATENT', 6]  as unknown as LATENT; }
get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 7]  as unknown as IMAGE; }
get 'SEED'() : INT { return [this, 'SEED', 8]  as unknown as INT; }
get 'STEPS'() : INT { return [this, 'STEPS', 9]  as unknown as INT; }
get 'STEP_REFINER'() : INT { return [this, 'STEP_REFINER', 10]  as unknown as INT; }
get 'CFG'() : FLOAT { return [this, 'CFG', 11]  as unknown as FLOAT; }
get 'CKPT_NAME'() : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors' { return [this, 'CKPT_NAME', 12]  as unknown as 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'; }
get 'SAMPLER'() : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2' { return [this, 'SAMPLER', 13]  as unknown as 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'; }
get 'SCHEDULER'() : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform' { return [this, 'SCHEDULER', 14]  as unknown as 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'; }
get 'CLIP_WIDTH'() : INT { return [this, 'CLIP_WIDTH', 15]  as unknown as INT; }
get 'CLIP_HEIGHT'() : INT { return [this, 'CLIP_HEIGHT', 16]  as unknown as INT; }
get 'TEXT_POS_G'() : STRING { return [this, 'TEXT_POS_G', 17]  as unknown as STRING; }
get 'TEXT_POS_L'() : STRING { return [this, 'TEXT_POS_L', 18]  as unknown as STRING; }
get 'TEXT_NEG_G'() : STRING { return [this, 'TEXT_NEG_G', 19]  as unknown as STRING; }
get 'TEXT_NEG_L'() : STRING { return [this, 'TEXT_NEG_L', 20]  as unknown as STRING; }
get 'MASK'() : MASK { return [this, 'MASK', 21]  as unknown as MASK; }
get 'CONTROL_NET'() : CONTROL_NET { return [this, 'CONTROL_NET', 22]  as unknown as CONTROL_NET; }

        constructor(opts:{
            'base_ctx'?: RGTHREE_CONTEXT,'model'?: MODEL,'clip'?: CLIP,'vae'?: VAE,'positive'?: CONDITIONING,'negative'?: CONDITIONING,'latent'?: LATENT,'images'?: IMAGE,'seed'?: INT,'steps'?: INT,'step_refiner'?: INT,'cfg'?: FLOAT,'ckpt_name'?: 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','sampler'?: 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler'?: 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform','clip_width'?: INT,'clip_height'?: INT,'text_pos_g'?: STRING,'text_pos_l'?: STRING,'text_neg_g'?: STRING,'text_neg_l'?: STRING,'mask'?: MASK,'control_net'?: CONTROL_NET
        }){
            super(ctx);

            
            if(opts['base_ctx']!==undefined) this['base_ctx'] = opts['base_ctx'];
if(opts['model']!==undefined) this['model'] = opts['model'];
if(opts['clip']!==undefined) this['clip'] = opts['clip'];
if(opts['vae']!==undefined) this['vae'] = opts['vae'];
if(opts['positive']!==undefined) this['positive'] = opts['positive'];
if(opts['negative']!==undefined) this['negative'] = opts['negative'];
if(opts['latent']!==undefined) this['latent'] = opts['latent'];
if(opts['images']!==undefined) this['images'] = opts['images'];
if(opts['seed']!==undefined) this['seed'] = opts['seed'];
if(opts['steps']!==undefined) this['steps'] = opts['steps'];
if(opts['step_refiner']!==undefined) this['step_refiner'] = opts['step_refiner'];
if(opts['cfg']!==undefined) this['cfg'] = opts['cfg'];
if(opts['ckpt_name']!==undefined) this['ckpt_name'] = opts['ckpt_name'];
if(opts['sampler']!==undefined) this['sampler'] = opts['sampler'];
if(opts['scheduler']!==undefined) this['scheduler'] = opts['scheduler'];
if(opts['clip_width']!==undefined) this['clip_width'] = opts['clip_width'];
if(opts['clip_height']!==undefined) this['clip_height'] = opts['clip_height'];
if(opts['text_pos_g']!==undefined) this['text_pos_g'] = opts['text_pos_g'];
if(opts['text_pos_l']!==undefined) this['text_pos_l'] = opts['text_pos_l'];
if(opts['text_neg_g']!==undefined) this['text_neg_g'] = opts['text_neg_g'];
if(opts['text_neg_l']!==undefined) this['text_neg_l'] = opts['text_neg_l'];
if(opts['mask']!==undefined) this['mask'] = opts['mask'];
if(opts['control_net']!==undefined) this['control_net'] = opts['control_net']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Context (rgthree)' : class extends Node{
        //Setters
        set 'base_ctx'(value : RGTHREE_CONTEXT)  { super.$$link(0, value) } 
set 'model'(value : MODEL)  { super.$$link(1, value) } 
set 'clip'(value : CLIP)  { super.$$link(2, value) } 
set 'vae'(value : VAE)  { super.$$link(3, value) } 
set 'positive'(value : CONDITIONING)  { super.$$link(4, value) } 
set 'negative'(value : CONDITIONING)  { super.$$link(5, value) } 
set 'latent'(value : LATENT)  { super.$$link(6, value) } 
set 'images'(value : IMAGE)  { super.$$link(7, value) } 
set 'seed'(value : INT)  { super.$$link(8, value) } 

        //Getters
        get 'CONTEXT'() : RGTHREE_CONTEXT { return [this, 'CONTEXT', 0]  as unknown as RGTHREE_CONTEXT; }
get 'MODEL'() : MODEL { return [this, 'MODEL', 1]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this, 'CLIP', 2]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this, 'VAE', 3]  as unknown as VAE; }
get 'POSITIVE'() : CONDITIONING { return [this, 'POSITIVE', 4]  as unknown as CONDITIONING; }
get 'NEGATIVE'() : CONDITIONING { return [this, 'NEGATIVE', 5]  as unknown as CONDITIONING; }
get 'LATENT'() : LATENT { return [this, 'LATENT', 6]  as unknown as LATENT; }
get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 7]  as unknown as IMAGE; }
get 'SEED'() : INT { return [this, 'SEED', 8]  as unknown as INT; }

        constructor(opts:{
            'base_ctx'?: RGTHREE_CONTEXT,'model'?: MODEL,'clip'?: CLIP,'vae'?: VAE,'positive'?: CONDITIONING,'negative'?: CONDITIONING,'latent'?: LATENT,'images'?: IMAGE,'seed'?: INT
        }){
            super(ctx);

            
            if(opts['base_ctx']!==undefined) this['base_ctx'] = opts['base_ctx'];
if(opts['model']!==undefined) this['model'] = opts['model'];
if(opts['clip']!==undefined) this['clip'] = opts['clip'];
if(opts['vae']!==undefined) this['vae'] = opts['vae'];
if(opts['positive']!==undefined) this['positive'] = opts['positive'];
if(opts['negative']!==undefined) this['negative'] = opts['negative'];
if(opts['latent']!==undefined) this['latent'] = opts['latent'];
if(opts['images']!==undefined) this['images'] = opts['images'];
if(opts['seed']!==undefined) this['seed'] = opts['seed']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Context Switch (rgthree)' : class extends Node{
        //Setters
        

        //Getters
        get 'CONTEXT'() : RGTHREE_CONTEXT { return [this, 'CONTEXT', 0]  as unknown as RGTHREE_CONTEXT; }
get 'MODEL'() : MODEL { return [this, 'MODEL', 1]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this, 'CLIP', 2]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this, 'VAE', 3]  as unknown as VAE; }
get 'POSITIVE'() : CONDITIONING { return [this, 'POSITIVE', 4]  as unknown as CONDITIONING; }
get 'NEGATIVE'() : CONDITIONING { return [this, 'NEGATIVE', 5]  as unknown as CONDITIONING; }
get 'LATENT'() : LATENT { return [this, 'LATENT', 6]  as unknown as LATENT; }
get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 7]  as unknown as IMAGE; }
get 'SEED'() : INT { return [this, 'SEED', 8]  as unknown as INT; }

        constructor(opts:{
            
        }){
            super(ctx);

            
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Context Switch Big (rgthree)' : class extends Node{
        //Setters
        

        //Getters
        get 'CONTEXT'() : RGTHREE_CONTEXT { return [this, 'CONTEXT', 0]  as unknown as RGTHREE_CONTEXT; }
get 'MODEL'() : MODEL { return [this, 'MODEL', 1]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this, 'CLIP', 2]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this, 'VAE', 3]  as unknown as VAE; }
get 'POSITIVE'() : CONDITIONING { return [this, 'POSITIVE', 4]  as unknown as CONDITIONING; }
get 'NEGATIVE'() : CONDITIONING { return [this, 'NEGATIVE', 5]  as unknown as CONDITIONING; }
get 'LATENT'() : LATENT { return [this, 'LATENT', 6]  as unknown as LATENT; }
get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 7]  as unknown as IMAGE; }
get 'SEED'() : INT { return [this, 'SEED', 8]  as unknown as INT; }
get 'STEPS'() : INT { return [this, 'STEPS', 9]  as unknown as INT; }
get 'STEP_REFINER'() : INT { return [this, 'STEP_REFINER', 10]  as unknown as INT; }
get 'CFG'() : FLOAT { return [this, 'CFG', 11]  as unknown as FLOAT; }
get 'CKPT_NAME'() : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors' { return [this, 'CKPT_NAME', 12]  as unknown as 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'; }
get 'SAMPLER'() : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2' { return [this, 'SAMPLER', 13]  as unknown as 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'; }
get 'SCHEDULER'() : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform' { return [this, 'SCHEDULER', 14]  as unknown as 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'; }
get 'CLIP_WIDTH'() : INT { return [this, 'CLIP_WIDTH', 15]  as unknown as INT; }
get 'CLIP_HEIGHT'() : INT { return [this, 'CLIP_HEIGHT', 16]  as unknown as INT; }
get 'TEXT_POS_G'() : STRING { return [this, 'TEXT_POS_G', 17]  as unknown as STRING; }
get 'TEXT_POS_L'() : STRING { return [this, 'TEXT_POS_L', 18]  as unknown as STRING; }
get 'TEXT_NEG_G'() : STRING { return [this, 'TEXT_NEG_G', 19]  as unknown as STRING; }
get 'TEXT_NEG_L'() : STRING { return [this, 'TEXT_NEG_L', 20]  as unknown as STRING; }
get 'MASK'() : MASK { return [this, 'MASK', 21]  as unknown as MASK; }
get 'CONTROL_NET'() : CONTROL_NET { return [this, 'CONTROL_NET', 22]  as unknown as CONTROL_NET; }

        constructor(opts:{
            
        }){
            super(ctx);

            
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Context Merge (rgthree)' : class extends Node{
        //Setters
        

        //Getters
        get 'CONTEXT'() : RGTHREE_CONTEXT { return [this, 'CONTEXT', 0]  as unknown as RGTHREE_CONTEXT; }
get 'MODEL'() : MODEL { return [this, 'MODEL', 1]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this, 'CLIP', 2]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this, 'VAE', 3]  as unknown as VAE; }
get 'POSITIVE'() : CONDITIONING { return [this, 'POSITIVE', 4]  as unknown as CONDITIONING; }
get 'NEGATIVE'() : CONDITIONING { return [this, 'NEGATIVE', 5]  as unknown as CONDITIONING; }
get 'LATENT'() : LATENT { return [this, 'LATENT', 6]  as unknown as LATENT; }
get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 7]  as unknown as IMAGE; }
get 'SEED'() : INT { return [this, 'SEED', 8]  as unknown as INT; }

        constructor(opts:{
            
        }){
            super(ctx);

            
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Context Merge Big (rgthree)' : class extends Node{
        //Setters
        

        //Getters
        get 'CONTEXT'() : RGTHREE_CONTEXT { return [this, 'CONTEXT', 0]  as unknown as RGTHREE_CONTEXT; }
get 'MODEL'() : MODEL { return [this, 'MODEL', 1]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this, 'CLIP', 2]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this, 'VAE', 3]  as unknown as VAE; }
get 'POSITIVE'() : CONDITIONING { return [this, 'POSITIVE', 4]  as unknown as CONDITIONING; }
get 'NEGATIVE'() : CONDITIONING { return [this, 'NEGATIVE', 5]  as unknown as CONDITIONING; }
get 'LATENT'() : LATENT { return [this, 'LATENT', 6]  as unknown as LATENT; }
get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 7]  as unknown as IMAGE; }
get 'SEED'() : INT { return [this, 'SEED', 8]  as unknown as INT; }
get 'STEPS'() : INT { return [this, 'STEPS', 9]  as unknown as INT; }
get 'STEP_REFINER'() : INT { return [this, 'STEP_REFINER', 10]  as unknown as INT; }
get 'CFG'() : FLOAT { return [this, 'CFG', 11]  as unknown as FLOAT; }
get 'CKPT_NAME'() : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors' { return [this, 'CKPT_NAME', 12]  as unknown as 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'; }
get 'SAMPLER'() : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2' { return [this, 'SAMPLER', 13]  as unknown as 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'; }
get 'SCHEDULER'() : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform' { return [this, 'SCHEDULER', 14]  as unknown as 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'; }
get 'CLIP_WIDTH'() : INT { return [this, 'CLIP_WIDTH', 15]  as unknown as INT; }
get 'CLIP_HEIGHT'() : INT { return [this, 'CLIP_HEIGHT', 16]  as unknown as INT; }
get 'TEXT_POS_G'() : STRING { return [this, 'TEXT_POS_G', 17]  as unknown as STRING; }
get 'TEXT_POS_L'() : STRING { return [this, 'TEXT_POS_L', 18]  as unknown as STRING; }
get 'TEXT_NEG_G'() : STRING { return [this, 'TEXT_NEG_G', 19]  as unknown as STRING; }
get 'TEXT_NEG_L'() : STRING { return [this, 'TEXT_NEG_L', 20]  as unknown as STRING; }
get 'MASK'() : MASK { return [this, 'MASK', 21]  as unknown as MASK; }
get 'CONTROL_NET'() : CONTROL_NET { return [this, 'CONTROL_NET', 22]  as unknown as CONTROL_NET; }

        constructor(opts:{
            
        }){
            super(ctx);

            
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Display Int (rgthree)' : class extends Node{
        //Setters
        set 'input'(value : INT)  { super.$$link(0, value) } 

        //Getters
        

        constructor(opts:{
            'input': INT
        }){
            super(ctx);

            this['input'] = opts['input']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Display Any (rgthree)' : class extends Node{
        //Setters
        set 'source'(value : ANY)  { super.$$link(0, value) } 

        //Getters
        

        constructor(opts:{
            'source': ANY
        }){
            super(ctx);

            this['source'] = opts['source']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Lora Loader Stack (rgthree)' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'clip'(value : CLIP)  { super.$$link(1, value) } 
set 'lora_01'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(2, value) } 
set 'strength_01'(value : FLOAT)  { super.$$link(3, value) } 
set 'lora_02'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(4, value) } 
set 'strength_02'(value : FLOAT)  { super.$$link(5, value) } 
set 'lora_03'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(6, value) } 
set 'strength_03'(value : FLOAT)  { super.$$link(7, value) } 
set 'lora_04'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(8, value) } 
set 'strength_04'(value : FLOAT)  { super.$$link(9, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this, 'CLIP', 1]  as unknown as CLIP; }

        constructor(opts:{
            'model': MODEL,'clip': CLIP,'lora_01': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','strength_01': FLOAT,'lora_02': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','strength_02': FLOAT,'lora_03': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','strength_03': FLOAT,'lora_04': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','strength_04': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['clip'] = opts['clip'];
this['lora_01'] = opts['lora_01'];
this['strength_01'] = opts['strength_01'];
this['lora_02'] = opts['lora_02'];
this['strength_02'] = opts['strength_02'];
this['lora_03'] = opts['lora_03'];
this['strength_03'] = opts['strength_03'];
this['lora_04'] = opts['lora_04'];
this['strength_04'] = opts['strength_04']
            

        }

        static defaults = {
            'strength_01':  1,
'strength_02':  1,
'strength_03':  1,
'strength_04':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'Seed (rgthree)' : class extends Node{
        //Setters
        set 'seed'(value : INT)  { super.$$link(0, value) } 

        //Getters
        get 'SEED'() : INT { return [this, 'SEED', 0]  as unknown as INT; }

        constructor(opts:{
            'seed': INT
        }){
            super(ctx);

            this['seed'] = opts['seed']
            

        }

        static defaults = {
            'seed':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Inset Crop (rgthree)' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'measurement'(value : 'Pixels'|'Percentage')  { super.$$link(1, value) } 
set 'left'(value : INT)  { super.$$link(2, value) } 
set 'right'(value : INT)  { super.$$link(3, value) } 
set 'top'(value : INT)  { super.$$link(4, value) } 
set 'bottom'(value : INT)  { super.$$link(5, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'measurement': 'Pixels'|'Percentage','left': INT,'right': INT,'top': INT,'bottom': INT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['measurement'] = opts['measurement'];
this['left'] = opts['left'];
this['right'] = opts['right'];
this['top'] = opts['top'];
this['bottom'] = opts['bottom']
            

        }

        static defaults = {
            'left':  0,
'right':  0,
'top':  0,
'bottom':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Power Prompt (rgthree)' : class extends Node{
        //Setters
        set 'prompt'(value : STRING)  { super.$$link(0, value) } 
set 'opt_model'(value : MODEL)  { super.$$link(1, value) } 
set 'opt_clip'(value : CLIP)  { super.$$link(2, value) } 
set 'insert_lora'(value : 'CHOOSE'|'DISABLE LORAS'|'ipadapter/ip-adapter-faceid-plus_sd15_lora'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora'|'ipadapter/ip-adapter-faceid_sd15_lora'|'lcm-lora-sdv1-5'|'lcm-lora-sdxl'|'lcm/SD1.5/pytorch_lora_weights'|'lcm/SDXL/pytorch_lora_weights'|'lcm/SSD-1B/pytorch_lora_weights'|'sd_xl_offset_example-lora_1.0'|'sdxl/pxx4_v1_alpha'|'sdxl/xl_shuimo-000012'|'slider-concepts/age'|'slider-concepts/cartoon_style'|'slider-concepts/chubby'|'slider-concepts/clay_style'|'slider-concepts/cluttered_room'|'slider-concepts/curlyhair'|'slider-concepts/dark_weather'|'slider-concepts/eyebrow'|'slider-concepts/eyesize'|'slider-concepts/festive'|'slider-concepts/fix_hands'|'slider-concepts/long_hair'|'slider-concepts/muscular'|'slider-concepts/pixar_style'|'slider-concepts/professional'|'slider-concepts/repair_slider'|'slider-concepts/sculpture_style'|'slider-concepts/smiling'|'slider-concepts/stylegan_latent1'|'slider-concepts/stylegan_latent2'|'slider-concepts/suprised_look'|'slider-concepts/tropical_weather'|'slider-concepts/winter_weather')  { super.$$link(3, value) } 
set 'insert_embedding'(value : 'CHOOSE')  { super.$$link(4, value) } 
set 'insert_saved'(value : 'CHOOSE')  { super.$$link(5, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }
get 'MODEL'() : MODEL { return [this, 'MODEL', 1]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this, 'CLIP', 2]  as unknown as CLIP; }
get 'TEXT'() : STRING { return [this, 'TEXT', 3]  as unknown as STRING; }

        constructor(opts:{
            'prompt': STRING,'opt_model'?: MODEL,'opt_clip'?: CLIP,'insert_lora'?: 'CHOOSE'|'DISABLE LORAS'|'ipadapter/ip-adapter-faceid-plus_sd15_lora'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora'|'ipadapter/ip-adapter-faceid_sd15_lora'|'lcm-lora-sdv1-5'|'lcm-lora-sdxl'|'lcm/SD1.5/pytorch_lora_weights'|'lcm/SDXL/pytorch_lora_weights'|'lcm/SSD-1B/pytorch_lora_weights'|'sd_xl_offset_example-lora_1.0'|'sdxl/pxx4_v1_alpha'|'sdxl/xl_shuimo-000012'|'slider-concepts/age'|'slider-concepts/cartoon_style'|'slider-concepts/chubby'|'slider-concepts/clay_style'|'slider-concepts/cluttered_room'|'slider-concepts/curlyhair'|'slider-concepts/dark_weather'|'slider-concepts/eyebrow'|'slider-concepts/eyesize'|'slider-concepts/festive'|'slider-concepts/fix_hands'|'slider-concepts/long_hair'|'slider-concepts/muscular'|'slider-concepts/pixar_style'|'slider-concepts/professional'|'slider-concepts/repair_slider'|'slider-concepts/sculpture_style'|'slider-concepts/smiling'|'slider-concepts/stylegan_latent1'|'slider-concepts/stylegan_latent2'|'slider-concepts/suprised_look'|'slider-concepts/tropical_weather'|'slider-concepts/winter_weather','insert_embedding'?: 'CHOOSE','insert_saved'?: 'CHOOSE'
        }){
            super(ctx);

            this['prompt'] = opts['prompt']
            if(opts['opt_model']!==undefined) this['opt_model'] = opts['opt_model'];
if(opts['opt_clip']!==undefined) this['opt_clip'] = opts['opt_clip'];
if(opts['insert_lora']!==undefined) this['insert_lora'] = opts['insert_lora'];
if(opts['insert_embedding']!==undefined) this['insert_embedding'] = opts['insert_embedding'];
if(opts['insert_saved']!==undefined) this['insert_saved'] = opts['insert_saved']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Power Prompt - Simple (rgthree)' : class extends Node{
        //Setters
        set 'prompt'(value : STRING)  { super.$$link(0, value) } 
set 'opt_clip'(value : CLIP)  { super.$$link(1, value) } 
set 'insert_embedding'(value : 'CHOOSE')  { super.$$link(2, value) } 
set 'insert_saved'(value : 'CHOOSE')  { super.$$link(3, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }
get 'TEXT'() : STRING { return [this, 'TEXT', 1]  as unknown as STRING; }

        constructor(opts:{
            'prompt': STRING,'opt_clip'?: CLIP,'insert_embedding'?: 'CHOOSE','insert_saved'?: 'CHOOSE'
        }){
            super(ctx);

            this['prompt'] = opts['prompt']
            if(opts['opt_clip']!==undefined) this['opt_clip'] = opts['opt_clip'];
if(opts['insert_embedding']!==undefined) this['insert_embedding'] = opts['insert_embedding'];
if(opts['insert_saved']!==undefined) this['insert_saved'] = opts['insert_saved']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'KSampler Config (rgthree)' : class extends Node{
        //Setters
        set 'steps_total'(value : INT)  { super.$$link(0, value) } 
set 'refiner_step'(value : INT)  { super.$$link(1, value) } 
set 'cfg'(value : FLOAT)  { super.$$link(2, value) } 
set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(3, value) } 
set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform')  { super.$$link(4, value) } 

        //Getters
        get 'STEPS'() : INT { return [this, 'STEPS', 0]  as unknown as INT; }
get 'REFINER_STEP'() : INT { return [this, 'REFINER_STEP', 1]  as unknown as INT; }
get 'CFG'() : FLOAT { return [this, 'CFG', 2]  as unknown as FLOAT; }
get 'SAMPLER'() : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2' { return [this, 'SAMPLER', 3]  as unknown as 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2'; }
get 'SCHEDULER'() : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform' { return [this, 'SCHEDULER', 4]  as unknown as 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'; }

        constructor(opts:{
            'steps_total': INT,'refiner_step': INT,'cfg': FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'
        }){
            super(ctx);

            this['steps_total'] = opts['steps_total'];
this['refiner_step'] = opts['refiner_step'];
this['cfg'] = opts['cfg'];
this['sampler_name'] = opts['sampler_name'];
this['scheduler'] = opts['scheduler']
            

        }

        static defaults = {
            'steps_total':  30,
'refiner_step':  24,
'cfg':  8
}
},

    /**
     * TODO Docs based on metadata
     */
    'SDXL Empty Latent Image (rgthree)' : class extends Node{
        //Setters
        set 'dimensions'(value : '1536 x 640   (landscape)'|'1344 x 768   (landscape)'|'1216 x 832   (landscape)'|'1152 x 896   (landscape)'|'1024 x 1024  (square)'|' 896 x 1152  (portrait)'|' 832 x 1216  (portrait)'|' 768 x 1344  (portrait)'|' 640 x 1536  (portrait)')  { super.$$link(0, value) } 
set 'clip_scale'(value : FLOAT)  { super.$$link(1, value) } 
set 'batch_size'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }
get 'CLIP_WIDTH'() : INT { return [this, 'CLIP_WIDTH', 1]  as unknown as INT; }
get 'CLIP_HEIGHT'() : INT { return [this, 'CLIP_HEIGHT', 2]  as unknown as INT; }

        constructor(opts:{
            'dimensions': '1536 x 640   (landscape)'|'1344 x 768   (landscape)'|'1216 x 832   (landscape)'|'1152 x 896   (landscape)'|'1024 x 1024  (square)'|' 896 x 1152  (portrait)'|' 832 x 1216  (portrait)'|' 768 x 1344  (portrait)'|' 640 x 1536  (portrait)','clip_scale': FLOAT,'batch_size': INT
        }){
            super(ctx);

            this['dimensions'] = opts['dimensions'];
this['clip_scale'] = opts['clip_scale'];
this['batch_size'] = opts['batch_size']
            

        }

        static defaults = {
            'dimensions':  "1024 x 1024  (square)",
'clip_scale':  2,
'batch_size':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'SDXL Power Prompt - Positive (rgthree)' : class extends Node{
        //Setters
        set 'prompt_g'(value : STRING)  { super.$$link(0, value) } 
set 'prompt_l'(value : STRING)  { super.$$link(1, value) } 
set 'opt_model'(value : MODEL)  { super.$$link(2, value) } 
set 'opt_clip'(value : CLIP)  { super.$$link(3, value) } 
set 'opt_clip_width'(value : INT)  { super.$$link(4, value) } 
set 'opt_clip_height'(value : INT)  { super.$$link(5, value) } 
set 'insert_lora'(value : 'CHOOSE'|'DISABLE LORAS'|'ipadapter/ip-adapter-faceid-plus_sd15_lora'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora'|'ipadapter/ip-adapter-faceid_sd15_lora'|'lcm-lora-sdv1-5'|'lcm-lora-sdxl'|'lcm/SD1.5/pytorch_lora_weights'|'lcm/SDXL/pytorch_lora_weights'|'lcm/SSD-1B/pytorch_lora_weights'|'sd_xl_offset_example-lora_1.0'|'sdxl/pxx4_v1_alpha'|'sdxl/xl_shuimo-000012'|'slider-concepts/age'|'slider-concepts/cartoon_style'|'slider-concepts/chubby'|'slider-concepts/clay_style'|'slider-concepts/cluttered_room'|'slider-concepts/curlyhair'|'slider-concepts/dark_weather'|'slider-concepts/eyebrow'|'slider-concepts/eyesize'|'slider-concepts/festive'|'slider-concepts/fix_hands'|'slider-concepts/long_hair'|'slider-concepts/muscular'|'slider-concepts/pixar_style'|'slider-concepts/professional'|'slider-concepts/repair_slider'|'slider-concepts/sculpture_style'|'slider-concepts/smiling'|'slider-concepts/stylegan_latent1'|'slider-concepts/stylegan_latent2'|'slider-concepts/suprised_look'|'slider-concepts/tropical_weather'|'slider-concepts/winter_weather')  { super.$$link(6, value) } 
set 'insert_embedding'(value : 'CHOOSE')  { super.$$link(7, value) } 
set 'insert_saved'(value : 'CHOOSE')  { super.$$link(8, value) } 
set 'target_width'(value : INT)  { super.$$link(9, value) } 
set 'target_height'(value : INT)  { super.$$link(10, value) } 
set 'crop_width'(value : INT)  { super.$$link(11, value) } 
set 'crop_height'(value : INT)  { super.$$link(12, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }
get 'MODEL'() : MODEL { return [this, 'MODEL', 1]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this, 'CLIP', 2]  as unknown as CLIP; }
get 'TEXT_G'() : STRING { return [this, 'TEXT_G', 3]  as unknown as STRING; }
get 'TEXT_L'() : STRING { return [this, 'TEXT_L', 4]  as unknown as STRING; }

        constructor(opts:{
            'prompt_g': STRING,'prompt_l': STRING,'opt_model'?: MODEL,'opt_clip'?: CLIP,'opt_clip_width'?: INT,'opt_clip_height'?: INT,'insert_lora'?: 'CHOOSE'|'DISABLE LORAS'|'ipadapter/ip-adapter-faceid-plus_sd15_lora'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora'|'ipadapter/ip-adapter-faceid_sd15_lora'|'lcm-lora-sdv1-5'|'lcm-lora-sdxl'|'lcm/SD1.5/pytorch_lora_weights'|'lcm/SDXL/pytorch_lora_weights'|'lcm/SSD-1B/pytorch_lora_weights'|'sd_xl_offset_example-lora_1.0'|'sdxl/pxx4_v1_alpha'|'sdxl/xl_shuimo-000012'|'slider-concepts/age'|'slider-concepts/cartoon_style'|'slider-concepts/chubby'|'slider-concepts/clay_style'|'slider-concepts/cluttered_room'|'slider-concepts/curlyhair'|'slider-concepts/dark_weather'|'slider-concepts/eyebrow'|'slider-concepts/eyesize'|'slider-concepts/festive'|'slider-concepts/fix_hands'|'slider-concepts/long_hair'|'slider-concepts/muscular'|'slider-concepts/pixar_style'|'slider-concepts/professional'|'slider-concepts/repair_slider'|'slider-concepts/sculpture_style'|'slider-concepts/smiling'|'slider-concepts/stylegan_latent1'|'slider-concepts/stylegan_latent2'|'slider-concepts/suprised_look'|'slider-concepts/tropical_weather'|'slider-concepts/winter_weather','insert_embedding'?: 'CHOOSE','insert_saved'?: 'CHOOSE','target_width'?: INT,'target_height'?: INT,'crop_width'?: INT,'crop_height'?: INT
        }){
            super(ctx);

            this['prompt_g'] = opts['prompt_g'];
this['prompt_l'] = opts['prompt_l']
            if(opts['opt_model']!==undefined) this['opt_model'] = opts['opt_model'];
if(opts['opt_clip']!==undefined) this['opt_clip'] = opts['opt_clip'];
if(opts['opt_clip_width']!==undefined) this['opt_clip_width'] = opts['opt_clip_width'];
if(opts['opt_clip_height']!==undefined) this['opt_clip_height'] = opts['opt_clip_height'];
if(opts['insert_lora']!==undefined) this['insert_lora'] = opts['insert_lora'];
if(opts['insert_embedding']!==undefined) this['insert_embedding'] = opts['insert_embedding'];
if(opts['insert_saved']!==undefined) this['insert_saved'] = opts['insert_saved'];
if(opts['target_width']!==undefined) this['target_width'] = opts['target_width'];
if(opts['target_height']!==undefined) this['target_height'] = opts['target_height'];
if(opts['crop_width']!==undefined) this['crop_width'] = opts['crop_width'];
if(opts['crop_height']!==undefined) this['crop_height'] = opts['crop_height']

        }

        static defaults = {
            'opt_clip_width':  1024,
'opt_clip_height':  1024,
'target_width':  -1,
'target_height':  -1,
'crop_width':  -1,
'crop_height':  -1
}
},

    /**
     * TODO Docs based on metadata
     */
    'SDXL Power Prompt - Simple / Negative (rgthree)' : class extends Node{
        //Setters
        set 'prompt_g'(value : STRING)  { super.$$link(0, value) } 
set 'prompt_l'(value : STRING)  { super.$$link(1, value) } 
set 'opt_clip'(value : CLIP)  { super.$$link(2, value) } 
set 'opt_clip_width'(value : INT)  { super.$$link(3, value) } 
set 'opt_clip_height'(value : INT)  { super.$$link(4, value) } 
set 'insert_embedding'(value : 'CHOOSE')  { super.$$link(5, value) } 
set 'insert_saved'(value : 'CHOOSE')  { super.$$link(6, value) } 
set 'target_width'(value : INT)  { super.$$link(7, value) } 
set 'target_height'(value : INT)  { super.$$link(8, value) } 
set 'crop_width'(value : INT)  { super.$$link(9, value) } 
set 'crop_height'(value : INT)  { super.$$link(10, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }
get 'TEXT_G'() : STRING { return [this, 'TEXT_G', 1]  as unknown as STRING; }
get 'TEXT_L'() : STRING { return [this, 'TEXT_L', 2]  as unknown as STRING; }

        constructor(opts:{
            'prompt_g': STRING,'prompt_l': STRING,'opt_clip'?: CLIP,'opt_clip_width'?: INT,'opt_clip_height'?: INT,'insert_embedding'?: 'CHOOSE','insert_saved'?: 'CHOOSE','target_width'?: INT,'target_height'?: INT,'crop_width'?: INT,'crop_height'?: INT
        }){
            super(ctx);

            this['prompt_g'] = opts['prompt_g'];
this['prompt_l'] = opts['prompt_l']
            if(opts['opt_clip']!==undefined) this['opt_clip'] = opts['opt_clip'];
if(opts['opt_clip_width']!==undefined) this['opt_clip_width'] = opts['opt_clip_width'];
if(opts['opt_clip_height']!==undefined) this['opt_clip_height'] = opts['opt_clip_height'];
if(opts['insert_embedding']!==undefined) this['insert_embedding'] = opts['insert_embedding'];
if(opts['insert_saved']!==undefined) this['insert_saved'] = opts['insert_saved'];
if(opts['target_width']!==undefined) this['target_width'] = opts['target_width'];
if(opts['target_height']!==undefined) this['target_height'] = opts['target_height'];
if(opts['crop_width']!==undefined) this['crop_width'] = opts['crop_width'];
if(opts['crop_height']!==undefined) this['crop_height'] = opts['crop_height']

        }

        static defaults = {
            'opt_clip_width':  1024,
'opt_clip_height':  1024,
'target_width':  -1,
'target_height':  -1,
'crop_width':  -1,
'crop_height':  -1
}
},

    /**
     * TODO Docs based on metadata
     */
    'Any Switch (rgthree)' : class extends Node{
        //Setters
        

        //Getters
        get '*'() : ANY { return [this, '*', 0]  as unknown as ANY; }

        constructor(opts:{
            
        }){
            super(ctx);

            
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Comparer (rgthree)' : class extends Node{
        //Setters
        set 'image_a'(value : IMAGE)  { super.$$link(0, value) } 
set 'image_b'(value : IMAGE)  { super.$$link(1, value) } 

        //Getters
        

        constructor(opts:{
            'image_a'?: IMAGE,'image_b'?: IMAGE
        }){
            super(ctx);

            
            if(opts['image_a']!==undefined) this['image_a'] = opts['image_a'];
if(opts['image_b']!==undefined) this['image_b'] = opts['image_b']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Power Lora Loader (rgthree)' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'clip'(value : CLIP)  { super.$$link(1, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this, 'CLIP', 1]  as unknown as CLIP; }

        constructor(opts:{
            'model': MODEL,'clip': CLIP
        }){
            super(ctx);

            this['model'] = opts['model'];
this['clip'] = opts['clip']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'LamaRemover' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'masks'(value : MASK)  { super.$$link(1, value) } 
set 'mask_threshold'(value : INT)  { super.$$link(2, value) } 
set 'gaussblur_radius'(value : INT)  { super.$$link(3, value) } 
set 'invert_mask'(value : BOOLEAN)  { super.$$link(4, value) } 

        //Getters
        get 'images'() : IMAGE { return [this, 'images', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'images': IMAGE,'masks': MASK,'mask_threshold': INT,'gaussblur_radius': INT,'invert_mask': BOOLEAN
        }){
            super(ctx);

            this['images'] = opts['images'];
this['masks'] = opts['masks'];
this['mask_threshold'] = opts['mask_threshold'];
this['gaussblur_radius'] = opts['gaussblur_radius'];
this['invert_mask'] = opts['invert_mask']
            

        }

        static defaults = {
            'mask_threshold':  250,
'gaussblur_radius':  8,
'invert_mask':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'LamaRemoverIMG' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'masks'(value : IMAGE)  { super.$$link(1, value) } 
set 'mask_threshold'(value : INT)  { super.$$link(2, value) } 
set 'gaussblur_radius'(value : INT)  { super.$$link(3, value) } 
set 'invert_mask'(value : BOOLEAN)  { super.$$link(4, value) } 

        //Getters
        get 'images'() : IMAGE { return [this, 'images', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'images': IMAGE,'masks': IMAGE,'mask_threshold': INT,'gaussblur_radius': INT,'invert_mask': BOOLEAN
        }){
            super(ctx);

            this['images'] = opts['images'];
this['masks'] = opts['masks'];
this['mask_threshold'] = opts['mask_threshold'];
this['gaussblur_radius'] = opts['gaussblur_radius'];
this['invert_mask'] = opts['invert_mask']
            

        }

        static defaults = {
            'mask_threshold':  250,
'gaussblur_radius':  8,
'invert_mask':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'CustomScheduler' : class extends Node{
        //Setters
        set 'steps'(value : INT)  { super.$$link(0, value) } 
set 'sigma_0'(value : FLOAT)  { super.$$link(1, value) } 
set 'sigma_1'(value : FLOAT)  { super.$$link(2, value) } 
set 'sigma_2'(value : FLOAT)  { super.$$link(3, value) } 
set 'sigma_3'(value : FLOAT)  { super.$$link(4, value) } 
set 'sigma_4'(value : FLOAT)  { super.$$link(5, value) } 
set 'sigma_5'(value : FLOAT)  { super.$$link(6, value) } 
set 'sigma_6'(value : FLOAT)  { super.$$link(7, value) } 
set 'sigma_7'(value : FLOAT)  { super.$$link(8, value) } 
set 'sigma_8'(value : FLOAT)  { super.$$link(9, value) } 
set 'sigma_9'(value : FLOAT)  { super.$$link(10, value) } 
set 'sigma_10'(value : FLOAT)  { super.$$link(11, value) } 
set 'sigma_11'(value : FLOAT)  { super.$$link(12, value) } 
set 'sigma_12'(value : FLOAT)  { super.$$link(13, value) } 
set 'sigma_13'(value : FLOAT)  { super.$$link(14, value) } 
set 'sigma_14'(value : FLOAT)  { super.$$link(15, value) } 
set 'sigma_15'(value : FLOAT)  { super.$$link(16, value) } 
set 'sigma_16'(value : FLOAT)  { super.$$link(17, value) } 
set 'sigma_17'(value : FLOAT)  { super.$$link(18, value) } 
set 'sigma_18'(value : FLOAT)  { super.$$link(19, value) } 
set 'sigma_19'(value : FLOAT)  { super.$$link(20, value) } 
set 'sigma_20'(value : FLOAT)  { super.$$link(21, value) } 
set 'sigma_21'(value : FLOAT)  { super.$$link(22, value) } 
set 'sigma_22'(value : FLOAT)  { super.$$link(23, value) } 
set 'sigma_23'(value : FLOAT)  { super.$$link(24, value) } 
set 'sigma_24'(value : FLOAT)  { super.$$link(25, value) } 
set 'sigma_25'(value : FLOAT)  { super.$$link(26, value) } 

        //Getters
        get 'SIGMAS'() : SIGMAS { return [this, 'SIGMAS', 0]  as unknown as SIGMAS; }

        constructor(opts:{
            'steps': INT,'sigma_0'?: FLOAT,'sigma_1'?: FLOAT,'sigma_2'?: FLOAT,'sigma_3'?: FLOAT,'sigma_4'?: FLOAT,'sigma_5'?: FLOAT,'sigma_6'?: FLOAT,'sigma_7'?: FLOAT,'sigma_8'?: FLOAT,'sigma_9'?: FLOAT,'sigma_10'?: FLOAT,'sigma_11'?: FLOAT,'sigma_12'?: FLOAT,'sigma_13'?: FLOAT,'sigma_14'?: FLOAT,'sigma_15'?: FLOAT,'sigma_16'?: FLOAT,'sigma_17'?: FLOAT,'sigma_18'?: FLOAT,'sigma_19'?: FLOAT,'sigma_20'?: FLOAT,'sigma_21'?: FLOAT,'sigma_22'?: FLOAT,'sigma_23'?: FLOAT,'sigma_24'?: FLOAT,'sigma_25'?: FLOAT
        }){
            super(ctx);

            this['steps'] = opts['steps']
            if(opts['sigma_0']!==undefined) this['sigma_0'] = opts['sigma_0'];
if(opts['sigma_1']!==undefined) this['sigma_1'] = opts['sigma_1'];
if(opts['sigma_2']!==undefined) this['sigma_2'] = opts['sigma_2'];
if(opts['sigma_3']!==undefined) this['sigma_3'] = opts['sigma_3'];
if(opts['sigma_4']!==undefined) this['sigma_4'] = opts['sigma_4'];
if(opts['sigma_5']!==undefined) this['sigma_5'] = opts['sigma_5'];
if(opts['sigma_6']!==undefined) this['sigma_6'] = opts['sigma_6'];
if(opts['sigma_7']!==undefined) this['sigma_7'] = opts['sigma_7'];
if(opts['sigma_8']!==undefined) this['sigma_8'] = opts['sigma_8'];
if(opts['sigma_9']!==undefined) this['sigma_9'] = opts['sigma_9'];
if(opts['sigma_10']!==undefined) this['sigma_10'] = opts['sigma_10'];
if(opts['sigma_11']!==undefined) this['sigma_11'] = opts['sigma_11'];
if(opts['sigma_12']!==undefined) this['sigma_12'] = opts['sigma_12'];
if(opts['sigma_13']!==undefined) this['sigma_13'] = opts['sigma_13'];
if(opts['sigma_14']!==undefined) this['sigma_14'] = opts['sigma_14'];
if(opts['sigma_15']!==undefined) this['sigma_15'] = opts['sigma_15'];
if(opts['sigma_16']!==undefined) this['sigma_16'] = opts['sigma_16'];
if(opts['sigma_17']!==undefined) this['sigma_17'] = opts['sigma_17'];
if(opts['sigma_18']!==undefined) this['sigma_18'] = opts['sigma_18'];
if(opts['sigma_19']!==undefined) this['sigma_19'] = opts['sigma_19'];
if(opts['sigma_20']!==undefined) this['sigma_20'] = opts['sigma_20'];
if(opts['sigma_21']!==undefined) this['sigma_21'] = opts['sigma_21'];
if(opts['sigma_22']!==undefined) this['sigma_22'] = opts['sigma_22'];
if(opts['sigma_23']!==undefined) this['sigma_23'] = opts['sigma_23'];
if(opts['sigma_24']!==undefined) this['sigma_24'] = opts['sigma_24'];
if(opts['sigma_25']!==undefined) this['sigma_25'] = opts['sigma_25']

        }

        static defaults = {
            'steps':  4,
'sigma_0':  4.12,
'sigma_1':  1.62,
'sigma_2':  0.7,
'sigma_3':  0.04,
'sigma_4':  0,
'sigma_5':  0,
'sigma_6':  0,
'sigma_7':  0,
'sigma_8':  0,
'sigma_9':  0,
'sigma_10':  0,
'sigma_11':  0,
'sigma_12':  0,
'sigma_13':  0,
'sigma_14':  0,
'sigma_15':  0,
'sigma_16':  0,
'sigma_17':  0,
'sigma_18':  0,
'sigma_19':  0,
'sigma_20':  0,
'sigma_21':  0,
'sigma_22':  0,
'sigma_23':  0,
'sigma_24':  0,
'sigma_25':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'SingleImagePathLoader' : class extends Node{
        //Setters
        set 'path'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'path': STRING
        }){
            super(ctx);

            this['path'] = opts['path']
            

        }

        static defaults = {
            'path':  ""
}
},

    /**
     * TODO Docs based on metadata
     */
    'SingleImageUrlLoader' : class extends Node{
        //Setters
        set 'url'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'url': STRING
        }){
            super(ctx);

            this['url'] = opts['url']
            

        }

        static defaults = {
            'url':  ""
}
},

    /**
     * TODO Docs based on metadata
     */
    'ImageStandardResizeProcessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'size'(value : '512*768'|'512*512'|'768*768')  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'size': '512*768'|'512*512'|'768*768'
        }){
            super(ctx);

            this['image'] = opts['image'];
this['size'] = opts['size']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ImageBgRemoveProcessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE
        }){
            super(ctx);

            this['image'] = opts['image']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'BatchImagePathLoader' : class extends Node{
        //Setters
        set 'path'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'path': STRING
        }){
            super(ctx);

            this['path'] = opts['path']
            

        }

        static defaults = {
            'path':  ""
}
},

    /**
     * TODO Docs based on metadata
     */
    'ImageCheveretoUploader' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'url'(value : STRING)  { super.$$link(1, value) } 
set 'key'(value : STRING)  { super.$$link(2, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'image': IMAGE,'url': STRING,'key': STRING
        }){
            super(ctx);

            this['image'] = opts['image'];
this['url'] = opts['url'];
this['key'] = opts['key']
            

        }

        static defaults = {
            'url':  "",
'key':  ""
}
},

    /**
     * TODO Docs based on metadata
     */
    'JSONMessageNotifyTool' : class extends Node{
        //Setters
        set 'url'(value : STRING)  { super.$$link(0, value) } 
set 'message'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'url': STRING,'message': STRING
        }){
            super(ctx);

            this['url'] = opts['url'];
this['message'] = opts['message']
            

        }

        static defaults = {
            'url':  "",
'message':  ""
}
},

    /**
     * TODO Docs based on metadata
     */
    'PreviewJSONNode' : class extends Node{
        //Setters
        set 'text'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'text': STRING
        }){
            super(ctx);

            this['text'] = opts['text']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'WebcamNode' : class extends Node{
        //Setters
        set 'select_webcam'(value : INT)  { super.$$link(0, value) } 
set 'framerate'(value : INT)  { super.$$link(1, value) } 
set 'control_stream'(value : STRING)  { super.$$link(2, value) } 
set 'duration'(value : INT)  { super.$$link(3, value) } 
set 'height'(value : INT)  { super.$$link(4, value) } 
set 'width'(value : INT)  { super.$$link(5, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'select_webcam': INT,'framerate': INT,'control_stream': STRING,'duration': INT,'height': INT,'width': INT
        }){
            super(ctx);

            this['select_webcam'] = opts['select_webcam'];
this['framerate'] = opts['framerate'];
this['control_stream'] = opts['control_stream'];
this['duration'] = opts['duration'];
this['height'] = opts['height'];
this['width'] = opts['width']
            

        }

        static defaults = {
            'select_webcam':  0,
'framerate':  12,
'control_stream':  "start",
'duration':  10,
'height':  480,
'width':  640
}
},

    /**
     * TODO Docs based on metadata
     */
    'DitCheckpointLoader' : class extends Node{
        //Setters
        set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(0, value) } 
set 'model'(value : 'XL/2'|'XL/4'|'XL/8'|'L/2'|'L/4'|'L/8'|'B/2'|'B/4'|'B/8'|'S/2'|'S/4'|'S/8')  { super.$$link(1, value) } 
set 'image_size'(value : '256'|'512')  { super.$$link(2, value) } 

        //Getters
        get 'model'() : MODEL { return [this, 'model', 0]  as unknown as MODEL; }

        constructor(opts:{
            'ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','model': 'XL/2'|'XL/4'|'XL/8'|'L/2'|'L/4'|'L/8'|'B/2'|'B/4'|'B/8'|'S/2'|'S/4'|'S/8','image_size': '256'|'512'
        }){
            super(ctx);

            this['ckpt_name'] = opts['ckpt_name'];
this['model'] = opts['model'];
this['image_size'] = opts['image_size']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'DiTCondLabelSelect' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'label_name'(value : 'tench, Tinca tinca'|'goldfish, Carassius auratus'|'great white shark, white shark, man-eater, man-eating shark, Carcharodon carcharias'|'tiger shark, Galeocerdo cuvieri'|'hammerhead, hammerhead shark'|'electric ray, crampfish, numbfish, torpedo'|'stingray'|'cock'|'hen'|'ostrich, Struthio camelus'|'brambling, Fringilla montifringilla'|'goldfinch, Carduelis carduelis'|'house finch, linnet, Carpodacus mexicanus'|'junco, snowbird'|'indigo bunting, indigo finch, indigo bird, Passerina cyanea'|'robin, American robin, Turdus migratorius'|'bulbul'|'jay'|'magpie'|'chickadee'|'water ouzel, dipper'|'kite'|'bald eagle, American eagle, Haliaeetus leucocephalus'|'vulture'|'great grey owl, great gray owl, Strix nebulosa'|'European fire salamander, Salamandra salamandra'|'common newt, Triturus vulgaris'|'eft'|'spotted salamander, Ambystoma maculatum'|'axolotl, mud puppy, Ambystoma mexicanum'|'bullfrog, Rana catesbeiana'|'tree frog, tree-frog'|'tailed frog, bell toad, ribbed toad, tailed toad, Ascaphus trui'|'loggerhead, loggerhead turtle, Caretta caretta'|'leatherback turtle, leatherback, leathery turtle, Dermochelys coriacea'|'mud turtle'|'terrapin'|'box turtle, box tortoise'|'banded gecko'|'common iguana, iguana, Iguana iguana'|'American chameleon, anole, Anolis carolinensis'|'whiptail, whiptail lizard'|'agama'|'frilled lizard, Chlamydosaurus kingi'|'alligator lizard'|'Gila monster, Heloderma suspectum'|'green lizard, Lacerta viridis'|'African chameleon, Chamaeleo chamaeleon'|'Komodo dragon, Komodo lizard, dragon lizard, giant lizard, Varanus komodoensis'|'African crocodile, Nile crocodile, Crocodylus niloticus'|'American alligator, Alligator mississipiensis'|'triceratops'|'thunder snake, worm snake, Carphophis amoenus'|'ringneck snake, ring-necked snake, ring snake'|'hognose snake, puff adder, sand viper'|'green snake, grass snake'|'king snake, kingsnake'|'garter snake, grass snake'|'water snake'|'vine snake'|'night snake, Hypsiglena torquata'|'boa constrictor, Constrictor constrictor'|'rock python, rock snake, Python sebae'|'Indian cobra, Naja naja'|'green mamba'|'sea snake'|'horned viper, cerastes, sand viper, horned asp, Cerastes cornutus'|'diamondback, diamondback rattlesnake, Crotalus adamanteus'|'sidewinder, horned rattlesnake, Crotalus cerastes'|'trilobite'|'harvestman, daddy longlegs, Phalangium opilio'|'scorpion'|'black and gold garden spider, Argiope aurantia'|'barn spider, Araneus cavaticus'|'garden spider, Aranea diademata'|'black widow, Latrodectus mactans'|'tarantula'|'wolf spider, hunting spider'|'tick'|'centipede'|'black grouse'|'ptarmigan'|'ruffed grouse, partridge, Bonasa umbellus'|'prairie chicken, prairie grouse, prairie fowl'|'peacock'|'quail'|'partridge'|'African grey, African gray, Psittacus erithacus'|'macaw'|'sulphur-crested cockatoo, Kakatoe galerita, Cacatua galerita'|'lorikeet'|'coucal'|'bee eater'|'hornbill'|'hummingbird'|'jacamar'|'toucan'|'drake'|'red-breasted merganser, Mergus serrator'|'goose'|'black swan, Cygnus atratus'|'tusker'|'echidna, spiny anteater, anteater'|'platypus, duckbill, duckbilled platypus, duck-billed platypus, Ornithorhynchus anatinus'|'wallaby, brush kangaroo'|'koala, koala bear, kangaroo bear, native bear, Phascolarctos cinereus'|'wombat'|'jellyfish'|'sea anemone, anemone'|'brain coral'|'flatworm, platyhelminth'|'nematode, nematode worm, roundworm'|'conch'|'snail'|'slug'|'sea slug, nudibranch'|'chiton, coat-of-mail shell, sea cradle, polyplacophore'|'chambered nautilus, pearly nautilus, nautilus'|'Dungeness crab, Cancer magister'|'rock crab, Cancer irroratus'|'fiddler crab'|'king crab, Alaska crab, Alaskan king crab, Alaska king crab, Paralithodes camtschatica'|'American lobster, Northern lobster, Maine lobster, Homarus americanus'|'spiny lobster, langouste, rock lobster, crawfish, crayfish, sea crawfish'|'crayfish, crawfish, crawdad, crawdaddy'|'hermit crab'|'isopod'|'white stork, Ciconia ciconia'|'black stork, Ciconia nigra'|'spoonbill'|'flamingo'|'little blue heron, Egretta caerulea'|'American egret, great white heron, Egretta albus'|'bittern'|'crane'|'limpkin, Aramus pictus'|'European gallinule, Porphyrio porphyrio'|'American coot, marsh hen, mud hen, water hen, Fulica americana'|'bustard'|'ruddy turnstone, Arenaria interpres'|'red-backed sandpiper, dunlin, Erolia alpina'|'redshank, Tringa totanus'|'dowitcher'|'oystercatcher, oyster catcher'|'pelican'|'king penguin, Aptenodytes patagonica'|'albatross, mollymawk'|'grey whale, gray whale, devilfish, Eschrichtius gibbosus, Eschrichtius robustus'|'killer whale, killer, orca, grampus, sea wolf, Orcinus orca'|'dugong, Dugong dugon'|'sea lion'|'Chihuahua'|'Japanese spaniel'|'Maltese dog, Maltese terrier, Maltese'|'Pekinese, Pekingese, Peke'|'Shih-Tzu'|'Blenheim spaniel'|'papillon'|'toy terrier'|'Rhodesian ridgeback'|'Afghan hound, Afghan'|'basset, basset hound'|'beagle'|'bloodhound, sleuthhound'|'bluetick'|'black-and-tan coonhound'|'Walker hound, Walker foxhound'|'English foxhound'|'redbone'|'borzoi, Russian wolfhound'|'Irish wolfhound'|'Italian greyhound'|'whippet'|'Ibizan hound, Ibizan Podenco'|'Norwegian elkhound, elkhound'|'otterhound, otter hound'|'Saluki, gazelle hound'|'Scottish deerhound, deerhound'|'Weimaraner'|'Staffordshire bullterrier, Staffordshire bull terrier'|'American Staffordshire terrier, Staffordshire terrier, American pit bull terrier, pit bull terrier'|'Bedlington terrier'|'Border terrier'|'Kerry blue terrier'|'Irish terrier'|'Norfolk terrier'|'Norwich terrier'|'Yorkshire terrier'|'wire-haired fox terrier'|'Lakeland terrier'|'Sealyham terrier, Sealyham'|'Airedale, Airedale terrier'|'cairn, cairn terrier'|'Australian terrier'|'Dandie Dinmont, Dandie Dinmont terrier'|'Boston bull, Boston terrier'|'miniature schnauzer'|'giant schnauzer'|'standard schnauzer'|'Scotch terrier, Scottish terrier, Scottie'|'Tibetan terrier, chrysanthemum dog'|'silky terrier, Sydney silky'|'soft-coated wheaten terrier'|'West Highland white terrier'|'Lhasa, Lhasa apso'|'flat-coated retriever'|'curly-coated retriever'|'golden retriever'|'Labrador retriever'|'Chesapeake Bay retriever'|'German short-haired pointer'|'vizsla, Hungarian pointer'|'English setter'|'Irish setter, red setter'|'Gordon setter'|'Brittany spaniel'|'clumber, clumber spaniel'|'English springer, English springer spaniel'|'Welsh springer spaniel'|'cocker spaniel, English cocker spaniel, cocker'|'Sussex spaniel'|'Irish water spaniel'|'kuvasz'|'schipperke'|'groenendael'|'malinois'|'briard'|'kelpie'|'komondor'|'Old English sheepdog, bobtail'|'Shetland sheepdog, Shetland sheep dog, Shetland'|'collie'|'Border collie'|'Bouvier des Flandres, Bouviers des Flandres'|'Rottweiler'|'German shepherd, German shepherd dog, German police dog, alsatian'|'Doberman, Doberman pinscher'|'miniature pinscher'|'Greater Swiss Mountain dog'|'Bernese mountain dog'|'Appenzeller'|'EntleBucher'|'boxer'|'bull mastiff'|'Tibetan mastiff'|'French bulldog'|'Great Dane'|'Saint Bernard, St Bernard'|'Eskimo dog, husky'|'malamute, malemute, Alaskan malamute'|'Siberian husky'|'dalmatian, coach dog, carriage dog'|'affenpinscher, monkey pinscher, monkey dog'|'basenji'|'pug, pug-dog'|'Leonberg'|'Newfoundland, Newfoundland dog'|'Great Pyrenees'|'Samoyed, Samoyede'|'Pomeranian'|'chow, chow chow'|'keeshond'|'Brabancon griffon'|'Pembroke, Pembroke Welsh corgi'|'Cardigan, Cardigan Welsh corgi'|'toy poodle'|'miniature poodle'|'standard poodle'|'Mexican hairless'|'timber wolf, grey wolf, gray wolf, Canis lupus'|'white wolf, Arctic wolf, Canis lupus tundrarum'|'red wolf, maned wolf, Canis rufus, Canis niger'|'coyote, prairie wolf, brush wolf, Canis latrans'|'dingo, warrigal, warragal, Canis dingo'|'dhole, Cuon alpinus'|'African hunting dog, hyena dog, Cape hunting dog, Lycaon pictus'|'hyena, hyaena'|'red fox, Vulpes vulpes'|'kit fox, Vulpes macrotis'|'Arctic fox, white fox, Alopex lagopus'|'grey fox, gray fox, Urocyon cinereoargenteus'|'tabby, tabby cat'|'tiger cat'|'Persian cat'|'Siamese cat, Siamese'|'Egyptian cat'|'cougar, puma, catamount, mountain lion, painter, panther, Felis concolor'|'lynx, catamount'|'leopard, Panthera pardus'|'snow leopard, ounce, Panthera uncia'|'jaguar, panther, Panthera onca, Felis onca'|'lion, king of beasts, Panthera leo'|'tiger, Panthera tigris'|'cheetah, chetah, Acinonyx jubatus'|'brown bear, bruin, Ursus arctos'|'American black bear, black bear, Ursus americanus, Euarctos americanus'|'ice bear, polar bear, Ursus Maritimus, Thalarctos maritimus'|'sloth bear, Melursus ursinus, Ursus ursinus'|'mongoose'|'meerkat, mierkat'|'tiger beetle'|'ladybug, ladybeetle, lady beetle, ladybird, ladybird beetle'|'ground beetle, carabid beetle'|'long-horned beetle, longicorn, longicorn beetle'|'leaf beetle, chrysomelid'|'dung beetle'|'rhinoceros beetle'|'weevil'|'fly'|'bee'|'ant, emmet, pismire'|'grasshopper, hopper'|'cricket'|'walking stick, walkingstick, stick insect'|'cockroach, roach'|'mantis, mantid'|'cicada, cicala'|'leafhopper'|'lacewing, lacewing fly'|'dragonfly, darning needle, devil's darning needle, sewing needle, snake feeder, snake doctor, mosquito hawk, skeeter hawk'|'damselfly'|'admiral'|'ringlet, ringlet butterfly'|'monarch, monarch butterfly, milkweed butterfly, Danaus plexippus'|'cabbage butterfly'|'sulphur butterfly, sulfur butterfly'|'lycaenid, lycaenid butterfly'|'starfish, sea star'|'sea urchin'|'sea cucumber, holothurian'|'wood rabbit, cottontail, cottontail rabbit'|'hare'|'Angora, Angora rabbit'|'hamster'|'porcupine, hedgehog'|'fox squirrel, eastern fox squirrel, Sciurus niger'|'marmot'|'beaver'|'guinea pig, Cavia cobaya'|'sorrel'|'zebra'|'hog, pig, grunter, squealer, Sus scrofa'|'wild boar, boar, Sus scrofa'|'warthog'|'hippopotamus, hippo, river horse, Hippopotamus amphibius'|'ox'|'water buffalo, water ox, Asiatic buffalo, Bubalus bubalis'|'bison'|'ram, tup'|'bighorn, bighorn sheep, cimarron, Rocky Mountain bighorn, Rocky Mountain sheep, Ovis canadensis'|'ibex, Capra ibex'|'hartebeest'|'impala, Aepyceros melampus'|'gazelle'|'Arabian camel, dromedary, Camelus dromedarius'|'llama'|'weasel'|'mink'|'polecat, fitch, foulmart, foumart, Mustela putorius'|'black-footed ferret, ferret, Mustela nigripes'|'otter'|'skunk, polecat, wood pussy'|'badger'|'armadillo'|'three-toed sloth, ai, Bradypus tridactylus'|'orangutan, orang, orangutang, Pongo pygmaeus'|'gorilla, Gorilla gorilla'|'chimpanzee, chimp, Pan troglodytes'|'gibbon, Hylobates lar'|'siamang, Hylobates syndactylus, Symphalangus syndactylus'|'guenon, guenon monkey'|'patas, hussar monkey, Erythrocebus patas'|'baboon'|'macaque'|'langur'|'colobus, colobus monkey'|'proboscis monkey, Nasalis larvatus'|'marmoset'|'capuchin, ringtail, Cebus capucinus'|'howler monkey, howler'|'titi, titi monkey'|'spider monkey, Ateles geoffroyi'|'squirrel monkey, Saimiri sciureus'|'Madagascar cat, ring-tailed lemur, Lemur catta'|'indri, indris, Indri indri, Indri brevicaudatus'|'Indian elephant, Elephas maximus'|'African elephant, Loxodonta africana'|'lesser panda, red panda, panda, bear cat, cat bear, Ailurus fulgens'|'giant panda, panda, panda bear, coon bear, Ailuropoda melanoleuca'|'barracouta, snoek'|'eel'|'coho, cohoe, coho salmon, blue jack, silver salmon, Oncorhynchus kisutch'|'rock beauty, Holocanthus tricolor'|'anemone fish'|'sturgeon'|'gar, garfish, garpike, billfish, Lepisosteus osseus'|'lionfish'|'puffer, pufferfish, blowfish, globefish'|'abacus'|'abaya'|'academic gown, academic robe, judge's robe'|'accordion, piano accordion, squeeze box'|'acoustic guitar'|'aircraft carrier, carrier, flattop, attack aircraft carrier'|'airliner'|'airship, dirigible'|'altar'|'ambulance'|'amphibian, amphibious vehicle'|'analog clock'|'apiary, bee house'|'apron'|'ashcan, trash can, garbage can, wastebin, ash bin, ash-bin, ashbin, dustbin, trash barrel, trash bin'|'assault rifle, assault gun'|'backpack, back pack, knapsack, packsack, rucksack, haversack'|'bakery, bakeshop, bakehouse'|'balance beam, beam'|'balloon'|'ballpoint, ballpoint pen, ballpen, Biro'|'Band Aid'|'banjo'|'bannister, banister, balustrade, balusters, handrail'|'barbell'|'barber chair'|'barbershop'|'barn'|'barometer'|'barrel, cask'|'barrow, garden cart, lawn cart, wheelbarrow'|'baseball'|'basketball'|'bassinet'|'bassoon'|'bathing cap, swimming cap'|'bath towel'|'bathtub, bathing tub, bath, tub'|'beach wagon, station wagon, wagon, estate car, beach waggon, station waggon, waggon'|'beacon, lighthouse, beacon light, pharos'|'beaker'|'bearskin, busby, shako'|'beer bottle'|'beer glass'|'bell cote, bell cot'|'bib'|'bicycle-built-for-two, tandem bicycle, tandem'|'bikini, two-piece'|'binder, ring-binder'|'binoculars, field glasses, opera glasses'|'birdhouse'|'boathouse'|'bobsled, bobsleigh, bob'|'bolo tie, bolo, bola tie, bola'|'bonnet, poke bonnet'|'bookcase'|'bookshop, bookstore, bookstall'|'bottlecap'|'bow'|'bow tie, bow-tie, bowtie'|'brass, memorial tablet, plaque'|'brassiere, bra, bandeau'|'breakwater, groin, groyne, mole, bulwark, seawall, jetty'|'breastplate, aegis, egis'|'broom'|'bucket, pail'|'buckle'|'bulletproof vest'|'bullet train, bullet'|'butcher shop, meat market'|'cab, hack, taxi, taxicab'|'caldron, cauldron'|'candle, taper, wax light'|'cannon'|'canoe'|'can opener, tin opener'|'cardigan'|'car mirror'|'carousel, carrousel, merry-go-round, roundabout, whirligig'|'carpenter's kit, tool kit'|'carton'|'car wheel'|'cash machine, cash dispenser, automated teller machine, automatic teller machine, automated teller, automatic teller, ATM'|'cassette'|'cassette player'|'castle'|'catamaran'|'CD player'|'cello, violoncello'|'cellular telephone, cellular phone, cellphone, cell, mobile phone'|'chain'|'chainlink fence'|'chain mail, ring mail, mail, chain armor, chain armour, ring armor, ring armour'|'chain saw, chainsaw'|'chest'|'chiffonier, commode'|'chime, bell, gong'|'china cabinet, china closet'|'Christmas stocking'|'church, church building'|'cinema, movie theater, movie theatre, movie house, picture palace'|'cleaver, meat cleaver, chopper'|'cliff dwelling'|'cloak'|'clog, geta, patten, sabot'|'cocktail shaker'|'coffee mug'|'coffeepot'|'coil, spiral, volute, whorl, helix'|'combination lock'|'computer keyboard, keypad'|'confectionery, confectionary, candy store'|'container ship, containership, container vessel'|'convertible'|'corkscrew, bottle screw'|'cornet, horn, trumpet, trump'|'cowboy boot'|'cowboy hat, ten-gallon hat'|'cradle'|'crane'|'crash helmet'|'crate'|'crib, cot'|'Crock Pot'|'croquet ball'|'crutch'|'cuirass'|'dam, dike, dyke'|'desk'|'desktop computer'|'dial telephone, dial phone'|'diaper, nappy, napkin'|'digital clock'|'digital watch'|'dining table, board'|'dishrag, dishcloth'|'dishwasher, dish washer, dishwashing machine'|'disk brake, disc brake'|'dock, dockage, docking facility'|'dogsled, dog sled, dog sleigh'|'dome'|'doormat, welcome mat'|'drilling platform, offshore rig'|'drum, membranophone, tympan'|'drumstick'|'dumbbell'|'Dutch oven'|'electric fan, blower'|'electric guitar'|'electric locomotive'|'entertainment center'|'envelope'|'espresso maker'|'face powder'|'feather boa, boa'|'file, file cabinet, filing cabinet'|'fireboat'|'fire engine, fire truck'|'fire screen, fireguard'|'flagpole, flagstaff'|'flute, transverse flute'|'folding chair'|'football helmet'|'forklift'|'fountain'|'fountain pen'|'four-poster'|'freight car'|'French horn, horn'|'frying pan, frypan, skillet'|'fur coat'|'garbage truck, dustcart'|'gasmask, respirator, gas helmet'|'gas pump, gasoline pump, petrol pump, island dispenser'|'goblet'|'go-kart'|'golf ball'|'golfcart, golf cart'|'gondola'|'gong, tam-tam'|'gown'|'grand piano, grand'|'greenhouse, nursery, glasshouse'|'grille, radiator grille'|'grocery store, grocery, food market, market'|'guillotine'|'hair slide'|'hair spray'|'half track'|'hammer'|'hamper'|'hand blower, blow dryer, blow drier, hair dryer, hair drier'|'hand-held computer, hand-held microcomputer'|'handkerchief, hankie, hanky, hankey'|'hard disc, hard disk, fixed disk'|'harmonica, mouth organ, harp, mouth harp'|'harp'|'harvester, reaper'|'hatchet'|'holster'|'home theater, home theatre'|'honeycomb'|'hook, claw'|'hoopskirt, crinoline'|'horizontal bar, high bar'|'horse cart, horse-cart'|'hourglass'|'iPod'|'iron, smoothing iron'|'jack-o'-lantern'|'jean, blue jean, denim'|'jeep, landrover'|'jersey, T-shirt, tee shirt'|'jigsaw puzzle'|'jinrikisha, ricksha, rickshaw'|'joystick'|'kimono'|'knee pad'|'knot'|'lab coat, laboratory coat'|'ladle'|'lampshade, lamp shade'|'laptop, laptop computer'|'lawn mower, mower'|'lens cap, lens cover'|'letter opener, paper knife, paperknife'|'library'|'lifeboat'|'lighter, light, igniter, ignitor'|'limousine, limo'|'liner, ocean liner'|'lipstick, lip rouge'|'Loafer'|'lotion'|'loudspeaker, speaker, speaker unit, loudspeaker system, speaker system'|'loupe, jeweler's loupe'|'lumbermill, sawmill'|'magnetic compass'|'mailbag, postbag'|'mailbox, letter box'|'maillot'|'maillot, tank suit'|'manhole cover'|'maraca'|'marimba, xylophone'|'mask'|'matchstick'|'maypole'|'maze, labyrinth'|'measuring cup'|'medicine chest, medicine cabinet'|'megalith, megalithic structure'|'microphone, mike'|'microwave, microwave oven'|'military uniform'|'milk can'|'minibus'|'miniskirt, mini'|'minivan'|'missile'|'mitten'|'mixing bowl'|'mobile home, manufactured home'|'Model T'|'modem'|'monastery'|'monitor'|'moped'|'mortar'|'mortarboard'|'mosque'|'mosquito net'|'motor scooter, scooter'|'mountain bike, all-terrain bike, off-roader'|'mountain tent'|'mouse, computer mouse'|'mousetrap'|'moving van'|'muzzle'|'nail'|'neck brace'|'necklace'|'nipple'|'notebook, notebook computer'|'obelisk'|'oboe, hautboy, hautbois'|'ocarina, sweet potato'|'odometer, hodometer, mileometer, milometer'|'oil filter'|'organ, pipe organ'|'oscilloscope, scope, cathode-ray oscilloscope, CRO'|'overskirt'|'oxcart'|'oxygen mask'|'packet'|'paddle, boat paddle'|'paddlewheel, paddle wheel'|'padlock'|'paintbrush'|'pajama, pyjama, pj's, jammies'|'palace'|'panpipe, pandean pipe, syrinx'|'paper towel'|'parachute, chute'|'parallel bars, bars'|'park bench'|'parking meter'|'passenger car, coach, carriage'|'patio, terrace'|'pay-phone, pay-station'|'pedestal, plinth, footstall'|'pencil box, pencil case'|'pencil sharpener'|'perfume, essence'|'Petri dish'|'photocopier'|'pick, plectrum, plectron'|'pickelhaube'|'picket fence, paling'|'pickup, pickup truck'|'pier'|'piggy bank, penny bank'|'pill bottle'|'pillow'|'ping-pong ball'|'pinwheel'|'pirate, pirate ship'|'pitcher, ewer'|'plane, carpenter's plane, woodworking plane'|'planetarium'|'plastic bag'|'plate rack'|'plow, plough'|'plunger, plumber's helper'|'Polaroid camera, Polaroid Land camera'|'pole'|'police van, police wagon, paddy wagon, patrol wagon, wagon, black Maria'|'poncho'|'pool table, billiard table, snooker table'|'pop bottle, soda bottle'|'pot, flowerpot'|'potter's wheel'|'power drill'|'prayer rug, prayer mat'|'printer'|'prison, prison house'|'projectile, missile'|'projector'|'puck, hockey puck'|'punching bag, punch bag, punching ball, punchball'|'purse'|'quill, quill pen'|'quilt, comforter, comfort, puff'|'racer, race car, racing car'|'racket, racquet'|'radiator'|'radio, wireless'|'radio telescope, radio reflector'|'rain barrel'|'recreational vehicle, RV, R.V.'|'reel'|'reflex camera'|'refrigerator, icebox'|'remote control, remote'|'restaurant, eating house, eating place, eatery'|'revolver, six-gun, six-shooter'|'rifle'|'rocking chair, rocker'|'rotisserie'|'rubber eraser, rubber, pencil eraser'|'rugby ball'|'rule, ruler'|'running shoe'|'safe'|'safety pin'|'saltshaker, salt shaker'|'sandal'|'sarong'|'sax, saxophone'|'scabbard'|'scale, weighing machine'|'school bus'|'schooner'|'scoreboard'|'screen, CRT screen'|'screw'|'screwdriver'|'seat belt, seatbelt'|'sewing machine'|'shield, buckler'|'shoe shop, shoe-shop, shoe store'|'shoji'|'shopping basket'|'shopping cart'|'shovel'|'shower cap'|'shower curtain'|'ski'|'ski mask'|'sleeping bag'|'slide rule, slipstick'|'sliding door'|'slot, one-armed bandit'|'snorkel'|'snowmobile'|'snowplow, snowplough'|'soap dispenser'|'soccer ball'|'sock'|'solar dish, solar collector, solar furnace'|'sombrero'|'soup bowl'|'space bar'|'space heater'|'space shuttle'|'spatula'|'speedboat'|'spider web, spider's web'|'spindle'|'sports car, sport car'|'spotlight, spot'|'stage'|'steam locomotive'|'steel arch bridge'|'steel drum'|'stethoscope'|'stole'|'stone wall'|'stopwatch, stop watch'|'stove'|'strainer'|'streetcar, tram, tramcar, trolley, trolley car'|'stretcher'|'studio couch, day bed'|'stupa, tope'|'submarine, pigboat, sub, U-boat'|'suit, suit of clothes'|'sundial'|'sunglass'|'sunglasses, dark glasses, shades'|'sunscreen, sunblock, sun blocker'|'suspension bridge'|'swab, swob, mop'|'sweatshirt'|'swimming trunks, bathing trunks'|'swing'|'switch, electric switch, electrical switch'|'syringe'|'table lamp'|'tank, army tank, armored combat vehicle, armoured combat vehicle'|'tape player'|'teapot'|'teddy, teddy bear'|'television, television system'|'tennis ball'|'thatch, thatched roof'|'theater curtain, theatre curtain'|'thimble'|'thresher, thrasher, threshing machine'|'throne'|'tile roof'|'toaster'|'tobacco shop, tobacconist shop, tobacconist'|'toilet seat'|'torch'|'totem pole'|'tow truck, tow car, wrecker'|'toyshop'|'tractor'|'trailer truck, tractor trailer, trucking rig, rig, articulated lorry, semi'|'tray'|'trench coat'|'tricycle, trike, velocipede'|'trimaran'|'tripod'|'triumphal arch'|'trolleybus, trolley coach, trackless trolley'|'trombone'|'tub, vat'|'turnstile'|'typewriter keyboard'|'umbrella'|'unicycle, monocycle'|'upright, upright piano'|'vacuum, vacuum cleaner'|'vase'|'vault'|'velvet'|'vending machine'|'vestment'|'viaduct'|'violin, fiddle'|'volleyball'|'waffle iron'|'wall clock'|'wallet, billfold, notecase, pocketbook'|'wardrobe, closet, press'|'warplane, military plane'|'washbasin, handbasin, washbowl, lavabo, wash-hand basin'|'washer, automatic washer, washing machine'|'water bottle'|'water jug'|'water tower'|'whiskey jug'|'whistle'|'wig'|'window screen'|'window shade'|'Windsor tie'|'wine bottle'|'wing'|'wok'|'wooden spoon'|'wool, woolen, woollen'|'worm fence, snake fence, snake-rail fence, Virginia fence'|'wreck'|'yawl'|'yurt'|'web site, website, internet site, site'|'comic book'|'crossword puzzle, crossword'|'street sign'|'traffic light, traffic signal, stoplight'|'book jacket, dust cover, dust jacket, dust wrapper'|'menu'|'plate'|'guacamole'|'consomme'|'hot pot, hotpot'|'trifle'|'ice cream, icecream'|'ice lolly, lolly, lollipop, popsicle'|'French loaf'|'bagel, beigel'|'pretzel'|'cheeseburger'|'hotdog, hot dog, red hot'|'mashed potato'|'head cabbage'|'broccoli'|'cauliflower'|'zucchini, courgette'|'spaghetti squash'|'acorn squash'|'butternut squash'|'cucumber, cuke'|'artichoke, globe artichoke'|'bell pepper'|'cardoon'|'mushroom'|'Granny Smith'|'strawberry'|'orange'|'lemon'|'fig'|'pineapple, ananas'|'banana'|'jackfruit, jak, jack'|'custard apple'|'pomegranate'|'hay'|'carbonara'|'chocolate sauce, chocolate syrup'|'dough'|'meat loaf, meatloaf'|'pizza, pizza pie'|'potpie'|'burrito'|'red wine'|'espresso'|'cup'|'eggnog'|'alp'|'bubble'|'cliff, drop, drop-off'|'coral reef'|'geyser'|'lakeside, lakeshore'|'promontory, headland, head, foreland'|'sandbar, sand bar'|'seashore, coast, seacoast, sea-coast'|'valley, vale'|'volcano'|'ballplayer, baseball player'|'groom, bridegroom'|'scuba diver'|'rapeseed'|'daisy'|'yellow lady's slipper, yellow lady-slipper, Cypripedium calceolus, Cypripedium parviflorum'|'corn'|'acorn'|'hip, rose hip, rosehip'|'buckeye, horse chestnut, conker'|'coral fungus'|'agaric'|'gyromitra'|'stinkhorn, carrion fungus'|'earthstar'|'hen-of-the-woods, hen of the woods, Polyporus frondosus, Grifola frondosa'|'bolete'|'ear, spike, capitulum'|'toilet tissue, toilet paper, bathroom tissue')  { super.$$link(1, value) } 

        //Getters
        get 'class'() : CONDITIONING { return [this, 'class', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'model': MODEL,'label_name': 'tench, Tinca tinca'|'goldfish, Carassius auratus'|'great white shark, white shark, man-eater, man-eating shark, Carcharodon carcharias'|'tiger shark, Galeocerdo cuvieri'|'hammerhead, hammerhead shark'|'electric ray, crampfish, numbfish, torpedo'|'stingray'|'cock'|'hen'|'ostrich, Struthio camelus'|'brambling, Fringilla montifringilla'|'goldfinch, Carduelis carduelis'|'house finch, linnet, Carpodacus mexicanus'|'junco, snowbird'|'indigo bunting, indigo finch, indigo bird, Passerina cyanea'|'robin, American robin, Turdus migratorius'|'bulbul'|'jay'|'magpie'|'chickadee'|'water ouzel, dipper'|'kite'|'bald eagle, American eagle, Haliaeetus leucocephalus'|'vulture'|'great grey owl, great gray owl, Strix nebulosa'|'European fire salamander, Salamandra salamandra'|'common newt, Triturus vulgaris'|'eft'|'spotted salamander, Ambystoma maculatum'|'axolotl, mud puppy, Ambystoma mexicanum'|'bullfrog, Rana catesbeiana'|'tree frog, tree-frog'|'tailed frog, bell toad, ribbed toad, tailed toad, Ascaphus trui'|'loggerhead, loggerhead turtle, Caretta caretta'|'leatherback turtle, leatherback, leathery turtle, Dermochelys coriacea'|'mud turtle'|'terrapin'|'box turtle, box tortoise'|'banded gecko'|'common iguana, iguana, Iguana iguana'|'American chameleon, anole, Anolis carolinensis'|'whiptail, whiptail lizard'|'agama'|'frilled lizard, Chlamydosaurus kingi'|'alligator lizard'|'Gila monster, Heloderma suspectum'|'green lizard, Lacerta viridis'|'African chameleon, Chamaeleo chamaeleon'|'Komodo dragon, Komodo lizard, dragon lizard, giant lizard, Varanus komodoensis'|'African crocodile, Nile crocodile, Crocodylus niloticus'|'American alligator, Alligator mississipiensis'|'triceratops'|'thunder snake, worm snake, Carphophis amoenus'|'ringneck snake, ring-necked snake, ring snake'|'hognose snake, puff adder, sand viper'|'green snake, grass snake'|'king snake, kingsnake'|'garter snake, grass snake'|'water snake'|'vine snake'|'night snake, Hypsiglena torquata'|'boa constrictor, Constrictor constrictor'|'rock python, rock snake, Python sebae'|'Indian cobra, Naja naja'|'green mamba'|'sea snake'|'horned viper, cerastes, sand viper, horned asp, Cerastes cornutus'|'diamondback, diamondback rattlesnake, Crotalus adamanteus'|'sidewinder, horned rattlesnake, Crotalus cerastes'|'trilobite'|'harvestman, daddy longlegs, Phalangium opilio'|'scorpion'|'black and gold garden spider, Argiope aurantia'|'barn spider, Araneus cavaticus'|'garden spider, Aranea diademata'|'black widow, Latrodectus mactans'|'tarantula'|'wolf spider, hunting spider'|'tick'|'centipede'|'black grouse'|'ptarmigan'|'ruffed grouse, partridge, Bonasa umbellus'|'prairie chicken, prairie grouse, prairie fowl'|'peacock'|'quail'|'partridge'|'African grey, African gray, Psittacus erithacus'|'macaw'|'sulphur-crested cockatoo, Kakatoe galerita, Cacatua galerita'|'lorikeet'|'coucal'|'bee eater'|'hornbill'|'hummingbird'|'jacamar'|'toucan'|'drake'|'red-breasted merganser, Mergus serrator'|'goose'|'black swan, Cygnus atratus'|'tusker'|'echidna, spiny anteater, anteater'|'platypus, duckbill, duckbilled platypus, duck-billed platypus, Ornithorhynchus anatinus'|'wallaby, brush kangaroo'|'koala, koala bear, kangaroo bear, native bear, Phascolarctos cinereus'|'wombat'|'jellyfish'|'sea anemone, anemone'|'brain coral'|'flatworm, platyhelminth'|'nematode, nematode worm, roundworm'|'conch'|'snail'|'slug'|'sea slug, nudibranch'|'chiton, coat-of-mail shell, sea cradle, polyplacophore'|'chambered nautilus, pearly nautilus, nautilus'|'Dungeness crab, Cancer magister'|'rock crab, Cancer irroratus'|'fiddler crab'|'king crab, Alaska crab, Alaskan king crab, Alaska king crab, Paralithodes camtschatica'|'American lobster, Northern lobster, Maine lobster, Homarus americanus'|'spiny lobster, langouste, rock lobster, crawfish, crayfish, sea crawfish'|'crayfish, crawfish, crawdad, crawdaddy'|'hermit crab'|'isopod'|'white stork, Ciconia ciconia'|'black stork, Ciconia nigra'|'spoonbill'|'flamingo'|'little blue heron, Egretta caerulea'|'American egret, great white heron, Egretta albus'|'bittern'|'crane'|'limpkin, Aramus pictus'|'European gallinule, Porphyrio porphyrio'|'American coot, marsh hen, mud hen, water hen, Fulica americana'|'bustard'|'ruddy turnstone, Arenaria interpres'|'red-backed sandpiper, dunlin, Erolia alpina'|'redshank, Tringa totanus'|'dowitcher'|'oystercatcher, oyster catcher'|'pelican'|'king penguin, Aptenodytes patagonica'|'albatross, mollymawk'|'grey whale, gray whale, devilfish, Eschrichtius gibbosus, Eschrichtius robustus'|'killer whale, killer, orca, grampus, sea wolf, Orcinus orca'|'dugong, Dugong dugon'|'sea lion'|'Chihuahua'|'Japanese spaniel'|'Maltese dog, Maltese terrier, Maltese'|'Pekinese, Pekingese, Peke'|'Shih-Tzu'|'Blenheim spaniel'|'papillon'|'toy terrier'|'Rhodesian ridgeback'|'Afghan hound, Afghan'|'basset, basset hound'|'beagle'|'bloodhound, sleuthhound'|'bluetick'|'black-and-tan coonhound'|'Walker hound, Walker foxhound'|'English foxhound'|'redbone'|'borzoi, Russian wolfhound'|'Irish wolfhound'|'Italian greyhound'|'whippet'|'Ibizan hound, Ibizan Podenco'|'Norwegian elkhound, elkhound'|'otterhound, otter hound'|'Saluki, gazelle hound'|'Scottish deerhound, deerhound'|'Weimaraner'|'Staffordshire bullterrier, Staffordshire bull terrier'|'American Staffordshire terrier, Staffordshire terrier, American pit bull terrier, pit bull terrier'|'Bedlington terrier'|'Border terrier'|'Kerry blue terrier'|'Irish terrier'|'Norfolk terrier'|'Norwich terrier'|'Yorkshire terrier'|'wire-haired fox terrier'|'Lakeland terrier'|'Sealyham terrier, Sealyham'|'Airedale, Airedale terrier'|'cairn, cairn terrier'|'Australian terrier'|'Dandie Dinmont, Dandie Dinmont terrier'|'Boston bull, Boston terrier'|'miniature schnauzer'|'giant schnauzer'|'standard schnauzer'|'Scotch terrier, Scottish terrier, Scottie'|'Tibetan terrier, chrysanthemum dog'|'silky terrier, Sydney silky'|'soft-coated wheaten terrier'|'West Highland white terrier'|'Lhasa, Lhasa apso'|'flat-coated retriever'|'curly-coated retriever'|'golden retriever'|'Labrador retriever'|'Chesapeake Bay retriever'|'German short-haired pointer'|'vizsla, Hungarian pointer'|'English setter'|'Irish setter, red setter'|'Gordon setter'|'Brittany spaniel'|'clumber, clumber spaniel'|'English springer, English springer spaniel'|'Welsh springer spaniel'|'cocker spaniel, English cocker spaniel, cocker'|'Sussex spaniel'|'Irish water spaniel'|'kuvasz'|'schipperke'|'groenendael'|'malinois'|'briard'|'kelpie'|'komondor'|'Old English sheepdog, bobtail'|'Shetland sheepdog, Shetland sheep dog, Shetland'|'collie'|'Border collie'|'Bouvier des Flandres, Bouviers des Flandres'|'Rottweiler'|'German shepherd, German shepherd dog, German police dog, alsatian'|'Doberman, Doberman pinscher'|'miniature pinscher'|'Greater Swiss Mountain dog'|'Bernese mountain dog'|'Appenzeller'|'EntleBucher'|'boxer'|'bull mastiff'|'Tibetan mastiff'|'French bulldog'|'Great Dane'|'Saint Bernard, St Bernard'|'Eskimo dog, husky'|'malamute, malemute, Alaskan malamute'|'Siberian husky'|'dalmatian, coach dog, carriage dog'|'affenpinscher, monkey pinscher, monkey dog'|'basenji'|'pug, pug-dog'|'Leonberg'|'Newfoundland, Newfoundland dog'|'Great Pyrenees'|'Samoyed, Samoyede'|'Pomeranian'|'chow, chow chow'|'keeshond'|'Brabancon griffon'|'Pembroke, Pembroke Welsh corgi'|'Cardigan, Cardigan Welsh corgi'|'toy poodle'|'miniature poodle'|'standard poodle'|'Mexican hairless'|'timber wolf, grey wolf, gray wolf, Canis lupus'|'white wolf, Arctic wolf, Canis lupus tundrarum'|'red wolf, maned wolf, Canis rufus, Canis niger'|'coyote, prairie wolf, brush wolf, Canis latrans'|'dingo, warrigal, warragal, Canis dingo'|'dhole, Cuon alpinus'|'African hunting dog, hyena dog, Cape hunting dog, Lycaon pictus'|'hyena, hyaena'|'red fox, Vulpes vulpes'|'kit fox, Vulpes macrotis'|'Arctic fox, white fox, Alopex lagopus'|'grey fox, gray fox, Urocyon cinereoargenteus'|'tabby, tabby cat'|'tiger cat'|'Persian cat'|'Siamese cat, Siamese'|'Egyptian cat'|'cougar, puma, catamount, mountain lion, painter, panther, Felis concolor'|'lynx, catamount'|'leopard, Panthera pardus'|'snow leopard, ounce, Panthera uncia'|'jaguar, panther, Panthera onca, Felis onca'|'lion, king of beasts, Panthera leo'|'tiger, Panthera tigris'|'cheetah, chetah, Acinonyx jubatus'|'brown bear, bruin, Ursus arctos'|'American black bear, black bear, Ursus americanus, Euarctos americanus'|'ice bear, polar bear, Ursus Maritimus, Thalarctos maritimus'|'sloth bear, Melursus ursinus, Ursus ursinus'|'mongoose'|'meerkat, mierkat'|'tiger beetle'|'ladybug, ladybeetle, lady beetle, ladybird, ladybird beetle'|'ground beetle, carabid beetle'|'long-horned beetle, longicorn, longicorn beetle'|'leaf beetle, chrysomelid'|'dung beetle'|'rhinoceros beetle'|'weevil'|'fly'|'bee'|'ant, emmet, pismire'|'grasshopper, hopper'|'cricket'|'walking stick, walkingstick, stick insect'|'cockroach, roach'|'mantis, mantid'|'cicada, cicala'|'leafhopper'|'lacewing, lacewing fly'|'dragonfly, darning needle, devil's darning needle, sewing needle, snake feeder, snake doctor, mosquito hawk, skeeter hawk'|'damselfly'|'admiral'|'ringlet, ringlet butterfly'|'monarch, monarch butterfly, milkweed butterfly, Danaus plexippus'|'cabbage butterfly'|'sulphur butterfly, sulfur butterfly'|'lycaenid, lycaenid butterfly'|'starfish, sea star'|'sea urchin'|'sea cucumber, holothurian'|'wood rabbit, cottontail, cottontail rabbit'|'hare'|'Angora, Angora rabbit'|'hamster'|'porcupine, hedgehog'|'fox squirrel, eastern fox squirrel, Sciurus niger'|'marmot'|'beaver'|'guinea pig, Cavia cobaya'|'sorrel'|'zebra'|'hog, pig, grunter, squealer, Sus scrofa'|'wild boar, boar, Sus scrofa'|'warthog'|'hippopotamus, hippo, river horse, Hippopotamus amphibius'|'ox'|'water buffalo, water ox, Asiatic buffalo, Bubalus bubalis'|'bison'|'ram, tup'|'bighorn, bighorn sheep, cimarron, Rocky Mountain bighorn, Rocky Mountain sheep, Ovis canadensis'|'ibex, Capra ibex'|'hartebeest'|'impala, Aepyceros melampus'|'gazelle'|'Arabian camel, dromedary, Camelus dromedarius'|'llama'|'weasel'|'mink'|'polecat, fitch, foulmart, foumart, Mustela putorius'|'black-footed ferret, ferret, Mustela nigripes'|'otter'|'skunk, polecat, wood pussy'|'badger'|'armadillo'|'three-toed sloth, ai, Bradypus tridactylus'|'orangutan, orang, orangutang, Pongo pygmaeus'|'gorilla, Gorilla gorilla'|'chimpanzee, chimp, Pan troglodytes'|'gibbon, Hylobates lar'|'siamang, Hylobates syndactylus, Symphalangus syndactylus'|'guenon, guenon monkey'|'patas, hussar monkey, Erythrocebus patas'|'baboon'|'macaque'|'langur'|'colobus, colobus monkey'|'proboscis monkey, Nasalis larvatus'|'marmoset'|'capuchin, ringtail, Cebus capucinus'|'howler monkey, howler'|'titi, titi monkey'|'spider monkey, Ateles geoffroyi'|'squirrel monkey, Saimiri sciureus'|'Madagascar cat, ring-tailed lemur, Lemur catta'|'indri, indris, Indri indri, Indri brevicaudatus'|'Indian elephant, Elephas maximus'|'African elephant, Loxodonta africana'|'lesser panda, red panda, panda, bear cat, cat bear, Ailurus fulgens'|'giant panda, panda, panda bear, coon bear, Ailuropoda melanoleuca'|'barracouta, snoek'|'eel'|'coho, cohoe, coho salmon, blue jack, silver salmon, Oncorhynchus kisutch'|'rock beauty, Holocanthus tricolor'|'anemone fish'|'sturgeon'|'gar, garfish, garpike, billfish, Lepisosteus osseus'|'lionfish'|'puffer, pufferfish, blowfish, globefish'|'abacus'|'abaya'|'academic gown, academic robe, judge's robe'|'accordion, piano accordion, squeeze box'|'acoustic guitar'|'aircraft carrier, carrier, flattop, attack aircraft carrier'|'airliner'|'airship, dirigible'|'altar'|'ambulance'|'amphibian, amphibious vehicle'|'analog clock'|'apiary, bee house'|'apron'|'ashcan, trash can, garbage can, wastebin, ash bin, ash-bin, ashbin, dustbin, trash barrel, trash bin'|'assault rifle, assault gun'|'backpack, back pack, knapsack, packsack, rucksack, haversack'|'bakery, bakeshop, bakehouse'|'balance beam, beam'|'balloon'|'ballpoint, ballpoint pen, ballpen, Biro'|'Band Aid'|'banjo'|'bannister, banister, balustrade, balusters, handrail'|'barbell'|'barber chair'|'barbershop'|'barn'|'barometer'|'barrel, cask'|'barrow, garden cart, lawn cart, wheelbarrow'|'baseball'|'basketball'|'bassinet'|'bassoon'|'bathing cap, swimming cap'|'bath towel'|'bathtub, bathing tub, bath, tub'|'beach wagon, station wagon, wagon, estate car, beach waggon, station waggon, waggon'|'beacon, lighthouse, beacon light, pharos'|'beaker'|'bearskin, busby, shako'|'beer bottle'|'beer glass'|'bell cote, bell cot'|'bib'|'bicycle-built-for-two, tandem bicycle, tandem'|'bikini, two-piece'|'binder, ring-binder'|'binoculars, field glasses, opera glasses'|'birdhouse'|'boathouse'|'bobsled, bobsleigh, bob'|'bolo tie, bolo, bola tie, bola'|'bonnet, poke bonnet'|'bookcase'|'bookshop, bookstore, bookstall'|'bottlecap'|'bow'|'bow tie, bow-tie, bowtie'|'brass, memorial tablet, plaque'|'brassiere, bra, bandeau'|'breakwater, groin, groyne, mole, bulwark, seawall, jetty'|'breastplate, aegis, egis'|'broom'|'bucket, pail'|'buckle'|'bulletproof vest'|'bullet train, bullet'|'butcher shop, meat market'|'cab, hack, taxi, taxicab'|'caldron, cauldron'|'candle, taper, wax light'|'cannon'|'canoe'|'can opener, tin opener'|'cardigan'|'car mirror'|'carousel, carrousel, merry-go-round, roundabout, whirligig'|'carpenter's kit, tool kit'|'carton'|'car wheel'|'cash machine, cash dispenser, automated teller machine, automatic teller machine, automated teller, automatic teller, ATM'|'cassette'|'cassette player'|'castle'|'catamaran'|'CD player'|'cello, violoncello'|'cellular telephone, cellular phone, cellphone, cell, mobile phone'|'chain'|'chainlink fence'|'chain mail, ring mail, mail, chain armor, chain armour, ring armor, ring armour'|'chain saw, chainsaw'|'chest'|'chiffonier, commode'|'chime, bell, gong'|'china cabinet, china closet'|'Christmas stocking'|'church, church building'|'cinema, movie theater, movie theatre, movie house, picture palace'|'cleaver, meat cleaver, chopper'|'cliff dwelling'|'cloak'|'clog, geta, patten, sabot'|'cocktail shaker'|'coffee mug'|'coffeepot'|'coil, spiral, volute, whorl, helix'|'combination lock'|'computer keyboard, keypad'|'confectionery, confectionary, candy store'|'container ship, containership, container vessel'|'convertible'|'corkscrew, bottle screw'|'cornet, horn, trumpet, trump'|'cowboy boot'|'cowboy hat, ten-gallon hat'|'cradle'|'crane'|'crash helmet'|'crate'|'crib, cot'|'Crock Pot'|'croquet ball'|'crutch'|'cuirass'|'dam, dike, dyke'|'desk'|'desktop computer'|'dial telephone, dial phone'|'diaper, nappy, napkin'|'digital clock'|'digital watch'|'dining table, board'|'dishrag, dishcloth'|'dishwasher, dish washer, dishwashing machine'|'disk brake, disc brake'|'dock, dockage, docking facility'|'dogsled, dog sled, dog sleigh'|'dome'|'doormat, welcome mat'|'drilling platform, offshore rig'|'drum, membranophone, tympan'|'drumstick'|'dumbbell'|'Dutch oven'|'electric fan, blower'|'electric guitar'|'electric locomotive'|'entertainment center'|'envelope'|'espresso maker'|'face powder'|'feather boa, boa'|'file, file cabinet, filing cabinet'|'fireboat'|'fire engine, fire truck'|'fire screen, fireguard'|'flagpole, flagstaff'|'flute, transverse flute'|'folding chair'|'football helmet'|'forklift'|'fountain'|'fountain pen'|'four-poster'|'freight car'|'French horn, horn'|'frying pan, frypan, skillet'|'fur coat'|'garbage truck, dustcart'|'gasmask, respirator, gas helmet'|'gas pump, gasoline pump, petrol pump, island dispenser'|'goblet'|'go-kart'|'golf ball'|'golfcart, golf cart'|'gondola'|'gong, tam-tam'|'gown'|'grand piano, grand'|'greenhouse, nursery, glasshouse'|'grille, radiator grille'|'grocery store, grocery, food market, market'|'guillotine'|'hair slide'|'hair spray'|'half track'|'hammer'|'hamper'|'hand blower, blow dryer, blow drier, hair dryer, hair drier'|'hand-held computer, hand-held microcomputer'|'handkerchief, hankie, hanky, hankey'|'hard disc, hard disk, fixed disk'|'harmonica, mouth organ, harp, mouth harp'|'harp'|'harvester, reaper'|'hatchet'|'holster'|'home theater, home theatre'|'honeycomb'|'hook, claw'|'hoopskirt, crinoline'|'horizontal bar, high bar'|'horse cart, horse-cart'|'hourglass'|'iPod'|'iron, smoothing iron'|'jack-o'-lantern'|'jean, blue jean, denim'|'jeep, landrover'|'jersey, T-shirt, tee shirt'|'jigsaw puzzle'|'jinrikisha, ricksha, rickshaw'|'joystick'|'kimono'|'knee pad'|'knot'|'lab coat, laboratory coat'|'ladle'|'lampshade, lamp shade'|'laptop, laptop computer'|'lawn mower, mower'|'lens cap, lens cover'|'letter opener, paper knife, paperknife'|'library'|'lifeboat'|'lighter, light, igniter, ignitor'|'limousine, limo'|'liner, ocean liner'|'lipstick, lip rouge'|'Loafer'|'lotion'|'loudspeaker, speaker, speaker unit, loudspeaker system, speaker system'|'loupe, jeweler's loupe'|'lumbermill, sawmill'|'magnetic compass'|'mailbag, postbag'|'mailbox, letter box'|'maillot'|'maillot, tank suit'|'manhole cover'|'maraca'|'marimba, xylophone'|'mask'|'matchstick'|'maypole'|'maze, labyrinth'|'measuring cup'|'medicine chest, medicine cabinet'|'megalith, megalithic structure'|'microphone, mike'|'microwave, microwave oven'|'military uniform'|'milk can'|'minibus'|'miniskirt, mini'|'minivan'|'missile'|'mitten'|'mixing bowl'|'mobile home, manufactured home'|'Model T'|'modem'|'monastery'|'monitor'|'moped'|'mortar'|'mortarboard'|'mosque'|'mosquito net'|'motor scooter, scooter'|'mountain bike, all-terrain bike, off-roader'|'mountain tent'|'mouse, computer mouse'|'mousetrap'|'moving van'|'muzzle'|'nail'|'neck brace'|'necklace'|'nipple'|'notebook, notebook computer'|'obelisk'|'oboe, hautboy, hautbois'|'ocarina, sweet potato'|'odometer, hodometer, mileometer, milometer'|'oil filter'|'organ, pipe organ'|'oscilloscope, scope, cathode-ray oscilloscope, CRO'|'overskirt'|'oxcart'|'oxygen mask'|'packet'|'paddle, boat paddle'|'paddlewheel, paddle wheel'|'padlock'|'paintbrush'|'pajama, pyjama, pj's, jammies'|'palace'|'panpipe, pandean pipe, syrinx'|'paper towel'|'parachute, chute'|'parallel bars, bars'|'park bench'|'parking meter'|'passenger car, coach, carriage'|'patio, terrace'|'pay-phone, pay-station'|'pedestal, plinth, footstall'|'pencil box, pencil case'|'pencil sharpener'|'perfume, essence'|'Petri dish'|'photocopier'|'pick, plectrum, plectron'|'pickelhaube'|'picket fence, paling'|'pickup, pickup truck'|'pier'|'piggy bank, penny bank'|'pill bottle'|'pillow'|'ping-pong ball'|'pinwheel'|'pirate, pirate ship'|'pitcher, ewer'|'plane, carpenter's plane, woodworking plane'|'planetarium'|'plastic bag'|'plate rack'|'plow, plough'|'plunger, plumber's helper'|'Polaroid camera, Polaroid Land camera'|'pole'|'police van, police wagon, paddy wagon, patrol wagon, wagon, black Maria'|'poncho'|'pool table, billiard table, snooker table'|'pop bottle, soda bottle'|'pot, flowerpot'|'potter's wheel'|'power drill'|'prayer rug, prayer mat'|'printer'|'prison, prison house'|'projectile, missile'|'projector'|'puck, hockey puck'|'punching bag, punch bag, punching ball, punchball'|'purse'|'quill, quill pen'|'quilt, comforter, comfort, puff'|'racer, race car, racing car'|'racket, racquet'|'radiator'|'radio, wireless'|'radio telescope, radio reflector'|'rain barrel'|'recreational vehicle, RV, R.V.'|'reel'|'reflex camera'|'refrigerator, icebox'|'remote control, remote'|'restaurant, eating house, eating place, eatery'|'revolver, six-gun, six-shooter'|'rifle'|'rocking chair, rocker'|'rotisserie'|'rubber eraser, rubber, pencil eraser'|'rugby ball'|'rule, ruler'|'running shoe'|'safe'|'safety pin'|'saltshaker, salt shaker'|'sandal'|'sarong'|'sax, saxophone'|'scabbard'|'scale, weighing machine'|'school bus'|'schooner'|'scoreboard'|'screen, CRT screen'|'screw'|'screwdriver'|'seat belt, seatbelt'|'sewing machine'|'shield, buckler'|'shoe shop, shoe-shop, shoe store'|'shoji'|'shopping basket'|'shopping cart'|'shovel'|'shower cap'|'shower curtain'|'ski'|'ski mask'|'sleeping bag'|'slide rule, slipstick'|'sliding door'|'slot, one-armed bandit'|'snorkel'|'snowmobile'|'snowplow, snowplough'|'soap dispenser'|'soccer ball'|'sock'|'solar dish, solar collector, solar furnace'|'sombrero'|'soup bowl'|'space bar'|'space heater'|'space shuttle'|'spatula'|'speedboat'|'spider web, spider's web'|'spindle'|'sports car, sport car'|'spotlight, spot'|'stage'|'steam locomotive'|'steel arch bridge'|'steel drum'|'stethoscope'|'stole'|'stone wall'|'stopwatch, stop watch'|'stove'|'strainer'|'streetcar, tram, tramcar, trolley, trolley car'|'stretcher'|'studio couch, day bed'|'stupa, tope'|'submarine, pigboat, sub, U-boat'|'suit, suit of clothes'|'sundial'|'sunglass'|'sunglasses, dark glasses, shades'|'sunscreen, sunblock, sun blocker'|'suspension bridge'|'swab, swob, mop'|'sweatshirt'|'swimming trunks, bathing trunks'|'swing'|'switch, electric switch, electrical switch'|'syringe'|'table lamp'|'tank, army tank, armored combat vehicle, armoured combat vehicle'|'tape player'|'teapot'|'teddy, teddy bear'|'television, television system'|'tennis ball'|'thatch, thatched roof'|'theater curtain, theatre curtain'|'thimble'|'thresher, thrasher, threshing machine'|'throne'|'tile roof'|'toaster'|'tobacco shop, tobacconist shop, tobacconist'|'toilet seat'|'torch'|'totem pole'|'tow truck, tow car, wrecker'|'toyshop'|'tractor'|'trailer truck, tractor trailer, trucking rig, rig, articulated lorry, semi'|'tray'|'trench coat'|'tricycle, trike, velocipede'|'trimaran'|'tripod'|'triumphal arch'|'trolleybus, trolley coach, trackless trolley'|'trombone'|'tub, vat'|'turnstile'|'typewriter keyboard'|'umbrella'|'unicycle, monocycle'|'upright, upright piano'|'vacuum, vacuum cleaner'|'vase'|'vault'|'velvet'|'vending machine'|'vestment'|'viaduct'|'violin, fiddle'|'volleyball'|'waffle iron'|'wall clock'|'wallet, billfold, notecase, pocketbook'|'wardrobe, closet, press'|'warplane, military plane'|'washbasin, handbasin, washbowl, lavabo, wash-hand basin'|'washer, automatic washer, washing machine'|'water bottle'|'water jug'|'water tower'|'whiskey jug'|'whistle'|'wig'|'window screen'|'window shade'|'Windsor tie'|'wine bottle'|'wing'|'wok'|'wooden spoon'|'wool, woolen, woollen'|'worm fence, snake fence, snake-rail fence, Virginia fence'|'wreck'|'yawl'|'yurt'|'web site, website, internet site, site'|'comic book'|'crossword puzzle, crossword'|'street sign'|'traffic light, traffic signal, stoplight'|'book jacket, dust cover, dust jacket, dust wrapper'|'menu'|'plate'|'guacamole'|'consomme'|'hot pot, hotpot'|'trifle'|'ice cream, icecream'|'ice lolly, lolly, lollipop, popsicle'|'French loaf'|'bagel, beigel'|'pretzel'|'cheeseburger'|'hotdog, hot dog, red hot'|'mashed potato'|'head cabbage'|'broccoli'|'cauliflower'|'zucchini, courgette'|'spaghetti squash'|'acorn squash'|'butternut squash'|'cucumber, cuke'|'artichoke, globe artichoke'|'bell pepper'|'cardoon'|'mushroom'|'Granny Smith'|'strawberry'|'orange'|'lemon'|'fig'|'pineapple, ananas'|'banana'|'jackfruit, jak, jack'|'custard apple'|'pomegranate'|'hay'|'carbonara'|'chocolate sauce, chocolate syrup'|'dough'|'meat loaf, meatloaf'|'pizza, pizza pie'|'potpie'|'burrito'|'red wine'|'espresso'|'cup'|'eggnog'|'alp'|'bubble'|'cliff, drop, drop-off'|'coral reef'|'geyser'|'lakeside, lakeshore'|'promontory, headland, head, foreland'|'sandbar, sand bar'|'seashore, coast, seacoast, sea-coast'|'valley, vale'|'volcano'|'ballplayer, baseball player'|'groom, bridegroom'|'scuba diver'|'rapeseed'|'daisy'|'yellow lady's slipper, yellow lady-slipper, Cypripedium calceolus, Cypripedium parviflorum'|'corn'|'acorn'|'hip, rose hip, rosehip'|'buckeye, horse chestnut, conker'|'coral fungus'|'agaric'|'gyromitra'|'stinkhorn, carrion fungus'|'earthstar'|'hen-of-the-woods, hen of the woods, Polyporus frondosus, Grifola frondosa'|'bolete'|'ear, spike, capitulum'|'toilet tissue, toilet paper, bathroom tissue'
        }){
            super(ctx);

            this['model'] = opts['model'];
this['label_name'] = opts['label_name']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'DiTCondLabelEmpty' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 

        //Getters
        get 'empty'() : CONDITIONING { return [this, 'empty', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'model': MODEL
        }){
            super(ctx);

            this['model'] = opts['model']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'PixArtCheckpointLoader' : class extends Node{
        //Setters
        set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(0, value) } 
set 'model'(value : 'PixArtMS_XL_2'|'PixArtMS_Sigma_XL_2'|'PixArtMS_Sigma_XL_2_900M'|'PixArtMS_Sigma_XL_2_2K'|'PixArt_XL_2'|'ControlPixArtHalf'|'ControlPixArtMSHalf')  { super.$$link(1, value) } 

        //Getters
        get 'model'() : MODEL { return [this, 'model', 0]  as unknown as MODEL; }

        constructor(opts:{
            'ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','model': 'PixArtMS_XL_2'|'PixArtMS_Sigma_XL_2'|'PixArtMS_Sigma_XL_2_900M'|'PixArtMS_Sigma_XL_2_2K'|'PixArt_XL_2'|'ControlPixArtHalf'|'ControlPixArtMSHalf'
        }){
            super(ctx);

            this['ckpt_name'] = opts['ckpt_name'];
this['model'] = opts['model']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'PixArtCheckpointLoaderSimple' : class extends Node{
        //Setters
        set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(0, value) } 

        //Getters
        get 'model'() : MODEL { return [this, 'model', 0]  as unknown as MODEL; }

        constructor(opts:{
            'ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors'
        }){
            super(ctx);

            this['ckpt_name'] = opts['ckpt_name']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'PixArtResolutionSelect' : class extends Node{
        //Setters
        set 'model'(value : 'PixArtMS_XL_2'|'PixArt_XL_2'|'PixArtMS_Sigma_XL_2_2K'|'PixArtMS_Sigma_XL_2'|'PixArtMS_Sigma_XL_2_512')  { super.$$link(0, value) } 
set 'ratio'(value : '0.25'|'0.26'|'0.27'|'0.28'|'0.32'|'0.33'|'0.35'|'0.40'|'0.42'|'0.48'|'0.50'|'0.52'|'0.57'|'0.60'|'0.68'|'0.72'|'0.78'|'0.82'|'0.88'|'0.94'|'1.00'|'1.07'|'1.13'|'1.21'|'1.29'|'1.38'|'1.46'|'1.67'|'1.75'|'2.00'|'2.09'|'2.40'|'2.50'|'2.89'|'3.00'|'3.11'|'3.62'|'3.75'|'3.88'|'4.00')  { super.$$link(1, value) } 

        //Getters
        get 'width'() : INT { return [this, 'width', 0]  as unknown as INT; }
get 'height'() : INT { return [this, 'height', 1]  as unknown as INT; }

        constructor(opts:{
            'model': 'PixArtMS_XL_2'|'PixArt_XL_2'|'PixArtMS_Sigma_XL_2_2K'|'PixArtMS_Sigma_XL_2'|'PixArtMS_Sigma_XL_2_512','ratio': '0.25'|'0.26'|'0.27'|'0.28'|'0.32'|'0.33'|'0.35'|'0.40'|'0.42'|'0.48'|'0.50'|'0.52'|'0.57'|'0.60'|'0.68'|'0.72'|'0.78'|'0.82'|'0.88'|'0.94'|'1.00'|'1.07'|'1.13'|'1.21'|'1.29'|'1.38'|'1.46'|'1.67'|'1.75'|'2.00'|'2.09'|'2.40'|'2.50'|'2.89'|'3.00'|'3.11'|'3.62'|'3.75'|'3.88'|'4.00'
        }){
            super(ctx);

            this['model'] = opts['model'];
this['ratio'] = opts['ratio']
            

        }

        static defaults = {
            'ratio':  "1.00"
}
},

    /**
     * TODO Docs based on metadata
     */
    'PixArtLoraLoader' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'lora_name'(value : 'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(1, value) } 
set 'strength'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'lora_name': 'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','strength': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['lora_name'] = opts['lora_name'];
this['strength'] = opts['strength']
            

        }

        static defaults = {
            'strength':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'PixArtT5TextEncode' : class extends Node{
        //Setters
        set 'text'(value : STRING)  { super.$$link(0, value) } 
set 'T5'(value : T5)  { super.$$link(1, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'text': STRING,'T5': T5
        }){
            super(ctx);

            this['text'] = opts['text'];
this['T5'] = opts['T5']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'PixArtResolutionCond' : class extends Node{
        //Setters
        set 'cond'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'width'(value : INT)  { super.$$link(1, value) } 
set 'height'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'cond'() : CONDITIONING { return [this, 'cond', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'cond': CONDITIONING,'width': INT,'height': INT
        }){
            super(ctx);

            this['cond'] = opts['cond'];
this['width'] = opts['width'];
this['height'] = opts['height']
            

        }

        static defaults = {
            'width':  1024,
'height':  1024
}
},

    /**
     * TODO Docs based on metadata
     */
    'PixArtControlNetCond' : class extends Node{
        //Setters
        set 'cond'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'latent'(value : LATENT)  { super.$$link(1, value) } 

        //Getters
        get 'cond'() : CONDITIONING { return [this, 'cond', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'cond': CONDITIONING,'latent': LATENT
        }){
            super(ctx);

            this['cond'] = opts['cond'];
this['latent'] = opts['latent']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'PixArtT5FromSD3CLIP' : class extends Node{
        //Setters
        set 'sd3_clip'(value : CLIP)  { super.$$link(0, value) } 
set 'padding'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 't5'() : CLIP { return [this, 't5', 0]  as unknown as CLIP; }

        constructor(opts:{
            'sd3_clip': CLIP,'padding': INT
        }){
            super(ctx);

            this['sd3_clip'] = opts['sd3_clip'];
this['padding'] = opts['padding']
            

        }

        static defaults = {
            'padding':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'T5v11Loader' : class extends Node{
        //Setters
        set 't5v11_name'(value : 't5-v1_1-xxl/pytorch_model-00001-of-00002.bin'|'t5-v1_1-xxl/pytorch_model-00002-of-00002.bin')  { super.$$link(0, value) } 
set 't5v11_ver'(value : 'xxl')  { super.$$link(1, value) } 
set 'path_type'(value : 'folder'|'file')  { super.$$link(2, value) } 
set 'device'(value : 'auto'|'cpu'|'gpu')  { super.$$link(3, value) } 
set 'dtype'(value : 'default'|'auto (comfy)'|'FP32'|'FP16'|'bnb8bit'|'bnb4bit'|'FP8 E4M3'|'FP8 E5M2')  { super.$$link(4, value) } 

        //Getters
        get 'T5'() : T5 { return [this, 'T5', 0]  as unknown as T5; }

        constructor(opts:{
            't5v11_name': 't5-v1_1-xxl/pytorch_model-00001-of-00002.bin'|'t5-v1_1-xxl/pytorch_model-00002-of-00002.bin','t5v11_ver': 'xxl','path_type': 'folder'|'file','device': 'auto'|'cpu'|'gpu','dtype': 'default'|'auto (comfy)'|'FP32'|'FP16'|'bnb8bit'|'bnb4bit'|'FP8 E4M3'|'FP8 E5M2'
        }){
            super(ctx);

            this['t5v11_name'] = opts['t5v11_name'];
this['t5v11_ver'] = opts['t5v11_ver'];
this['path_type'] = opts['path_type'];
this['device'] = opts['device'];
this['dtype'] = opts['dtype']
            

        }

        static defaults = {
            'device':  "cpu"
}
},

    /**
     * TODO Docs based on metadata
     */
    'T5TextEncode' : class extends Node{
        //Setters
        set 'text'(value : STRING)  { super.$$link(0, value) } 
set 'T5'(value : T5)  { super.$$link(1, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'text': STRING,'T5': T5
        }){
            super(ctx);

            this['text'] = opts['text'];
this['T5'] = opts['T5']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'HYDiTCheckpointLoader' : class extends Node{
        //Setters
        set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(0, value) } 
set 'model'(value : 'G/2'|'G/2-1.2'|'XL/2'|'L/2'|'B/2')  { super.$$link(1, value) } 

        //Getters
        get 'model'() : MODEL { return [this, 'model', 0]  as unknown as MODEL; }

        constructor(opts:{
            'ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','model': 'G/2'|'G/2-1.2'|'XL/2'|'L/2'|'B/2'
        }){
            super(ctx);

            this['ckpt_name'] = opts['ckpt_name'];
this['model'] = opts['model']
            

        }

        static defaults = {
            'model':  "G/2"
}
},

    /**
     * TODO Docs based on metadata
     */
    'HYDiTTextEncoderLoader' : class extends Node{
        //Setters
        set 'clip_name'(value : void)  { super.$$link(0, value) } 
set 'mt5_name'(value : 't5-v1_1-xxl/pytorch_model-00001-of-00002.bin'|'t5-v1_1-xxl/pytorch_model-00002-of-00002.bin')  { super.$$link(1, value) } 
set 'device'(value : 'auto'|'cpu'|'gpu')  { super.$$link(2, value) } 
set 'dtype'(value : 'default'|'auto (comfy)'|'FP32'|'FP16'|'BF16')  { super.$$link(3, value) } 

        //Getters
        get 'CLIP'() : CLIP { return [this, 'CLIP', 0]  as unknown as CLIP; }
get 'T5'() : T5 { return [this, 'T5', 1]  as unknown as T5; }

        constructor(opts:{
            'clip_name': void,'mt5_name': 't5-v1_1-xxl/pytorch_model-00001-of-00002.bin'|'t5-v1_1-xxl/pytorch_model-00002-of-00002.bin','device': 'auto'|'cpu'|'gpu','dtype': 'default'|'auto (comfy)'|'FP32'|'FP16'|'BF16'
        }){
            super(ctx);

            this['clip_name'] = opts['clip_name'];
this['mt5_name'] = opts['mt5_name'];
this['device'] = opts['device'];
this['dtype'] = opts['dtype']
            

        }

        static defaults = {
            'device':  "cpu"
}
},

    /**
     * TODO Docs based on metadata
     */
    'HYDiTTextEncode' : class extends Node{
        //Setters
        set 'text'(value : STRING)  { super.$$link(0, value) } 
set 'text_t5'(value : STRING)  { super.$$link(1, value) } 
set 'CLIP'(value : CLIP)  { super.$$link(2, value) } 
set 'T5'(value : T5)  { super.$$link(3, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'text': STRING,'text_t5': STRING,'CLIP': CLIP,'T5': T5
        }){
            super(ctx);

            this['text'] = opts['text'];
this['text_t5'] = opts['text_t5'];
this['CLIP'] = opts['CLIP'];
this['T5'] = opts['T5']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'HYDiTTextEncodeSimple' : class extends Node{
        //Setters
        set 'text'(value : STRING)  { super.$$link(0, value) } 
set 'CLIP'(value : CLIP)  { super.$$link(1, value) } 
set 'T5'(value : T5)  { super.$$link(2, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'text': STRING,'CLIP': CLIP,'T5': T5
        }){
            super(ctx);

            this['text'] = opts['text'];
this['CLIP'] = opts['CLIP'];
this['T5'] = opts['T5']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'HYDiTSrcSizeCond' : class extends Node{
        //Setters
        set 'cond'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'width'(value : INT)  { super.$$link(1, value) } 
set 'height'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'cond'() : CONDITIONING { return [this, 'cond', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'cond': CONDITIONING,'width': INT,'height': INT
        }){
            super(ctx);

            this['cond'] = opts['cond'];
this['width'] = opts['width'];
this['height'] = opts['height']
            

        }

        static defaults = {
            'width':  1024,
'height':  1024
}
},

    /**
     * TODO Docs based on metadata
     */
    'ExtraVAELoader' : class extends Node{
        //Setters
        set 'vae_name'(value : 'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(0, value) } 
set 'vae_type'(value : 'kl-f4'|'kl-f8'|'kl-f8-d16'|'kl-f16'|'kl-f32'|'vq-f4'|'vq-f8'|'vq-f16'|'Consistency-Decoder'|'SDV-VideoDecoder'|'MoVQ3')  { super.$$link(1, value) } 
set 'dtype'(value : 'auto'|'FP32'|'FP16'|'BF16')  { super.$$link(2, value) } 

        //Getters
        get 'VAE'() : VAE { return [this, 'VAE', 0]  as unknown as VAE; }

        constructor(opts:{
            'vae_name': 'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_type': 'kl-f4'|'kl-f8'|'kl-f8-d16'|'kl-f16'|'kl-f32'|'vq-f4'|'vq-f8'|'vq-f16'|'Consistency-Decoder'|'SDV-VideoDecoder'|'MoVQ3','dtype': 'auto'|'FP32'|'FP16'|'BF16'
        }){
            super(ctx);

            this['vae_name'] = opts['vae_name'];
this['vae_type'] = opts['vae_type'];
this['dtype'] = opts['dtype']
            

        }

        static defaults = {
            'vae_type':  "kl-f8"
}
},

    /**
     * TODO Docs based on metadata
     */
    'MiaoBiCLIPLoader' : class extends Node{
        //Setters
        set 'clip_name'(value : void)  { super.$$link(0, value) } 

        //Getters
        get 'CLIP'() : CLIP { return [this, 'CLIP', 0]  as unknown as CLIP; }

        constructor(opts:{
            'clip_name': void
        }){
            super(ctx);

            this['clip_name'] = opts['clip_name']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'MiaoBiDiffusersLoader' : class extends Node{
        //Setters
        set 'model_path'(value : void)  { super.$$link(0, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this, 'CLIP', 1]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this, 'VAE', 2]  as unknown as VAE; }

        constructor(opts:{
            'model_path': void
        }){
            super(ctx);

            this['model_path'] = opts['model_path']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ImageGridCommander' : class extends Node{
        //Setters
        set 'x_count'(value : INT)  { super.$$link(0, value) } 
set 'y_count'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'x_index'() : INT { return [this, 'x_index', 0]  as unknown as INT; }
get 'y_index'() : INT { return [this, 'y_index', 1]  as unknown as INT; }
get 'x_size'() : INT { return [this, 'x_size', 2]  as unknown as INT; }
get 'y_size'() : INT { return [this, 'y_size', 3]  as unknown as INT; }

        constructor(opts:{
            'x_count': INT,'y_count': INT
        }){
            super(ctx);

            this['x_count'] = opts['x_count'];
this['y_count'] = opts['y_count']
            

        }

        static defaults = {
            'x_count':  1,
'y_count':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'GridFloats' : class extends Node{
        //Setters
        set 'index'(value : INT)  { super.$$link(0, value) } 
set 'decimal_places'(value : INT)  { super.$$link(1, value) } 
set 'float1'(value : FLOAT)  { super.$$link(2, value) } 
set 'float2'(value : FLOAT)  { super.$$link(3, value) } 
set 'float3'(value : FLOAT)  { super.$$link(4, value) } 
set 'float4'(value : FLOAT)  { super.$$link(5, value) } 
set 'float5'(value : FLOAT)  { super.$$link(6, value) } 
set 'float6'(value : FLOAT)  { super.$$link(7, value) } 

        //Getters
        get 'current value'() : FLOAT { return [this, 'current value', 0]  as unknown as FLOAT; }
get 'list'() : FLOAT_LIST { return [this, 'list', 1]  as unknown as FLOAT_LIST; }
get 'list text'() : STRING_LIST { return [this, 'list text', 2]  as unknown as STRING_LIST; }

        constructor(opts:{
            'index': INT,'decimal_places': INT,'float1': FLOAT,'float2': FLOAT,'float3': FLOAT,'float4': FLOAT,'float5': FLOAT,'float6': FLOAT
        }){
            super(ctx);

            this['index'] = opts['index'];
this['decimal_places'] = opts['decimal_places'];
this['float1'] = opts['float1'];
this['float2'] = opts['float2'];
this['float3'] = opts['float3'];
this['float4'] = opts['float4'];
this['float5'] = opts['float5'];
this['float6'] = opts['float6']
            

        }

        static defaults = {
            'index':  1,
'decimal_places':  3,
'float1':  1,
'float2':  1,
'float3':  1,
'float4':  1,
'float5':  1,
'float6':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'GridFloatList' : class extends Node{
        //Setters
        set 'index'(value : INT)  { super.$$link(0, value) } 
set 'decimal_places'(value : INT)  { super.$$link(1, value) } 
set 'float_list'(value : STRING)  { super.$$link(2, value) } 

        //Getters
        get 'current value'() : FLOAT { return [this, 'current value', 0]  as unknown as FLOAT; }
get 'list'() : FLOAT_LIST { return [this, 'list', 1]  as unknown as FLOAT_LIST; }
get 'list text'() : STRING_LIST { return [this, 'list text', 2]  as unknown as STRING_LIST; }

        constructor(opts:{
            'index': INT,'decimal_places': INT,'float_list': STRING
        }){
            super(ctx);

            this['index'] = opts['index'];
this['decimal_places'] = opts['decimal_places'];
this['float_list'] = opts['float_list']
            

        }

        static defaults = {
            'index':  1,
'decimal_places':  3
}
},

    /**
     * TODO Docs based on metadata
     */
    'GridInts' : class extends Node{
        //Setters
        set 'index'(value : INT)  { super.$$link(0, value) } 
set 'int1'(value : INT)  { super.$$link(1, value) } 
set 'int2'(value : INT)  { super.$$link(2, value) } 
set 'int3'(value : INT)  { super.$$link(3, value) } 
set 'int4'(value : INT)  { super.$$link(4, value) } 
set 'int5'(value : INT)  { super.$$link(5, value) } 
set 'int6'(value : INT)  { super.$$link(6, value) } 

        //Getters
        get 'current value'() : INT { return [this, 'current value', 0]  as unknown as INT; }
get 'list'() : INT_LIST { return [this, 'list', 1]  as unknown as INT_LIST; }
get 'list text'() : STRING_LIST { return [this, 'list text', 2]  as unknown as STRING_LIST; }

        constructor(opts:{
            'index': INT,'int1': INT,'int2': INT,'int3': INT,'int4': INT,'int5': INT,'int6': INT
        }){
            super(ctx);

            this['index'] = opts['index'];
this['int1'] = opts['int1'];
this['int2'] = opts['int2'];
this['int3'] = opts['int3'];
this['int4'] = opts['int4'];
this['int5'] = opts['int5'];
this['int6'] = opts['int6']
            

        }

        static defaults = {
            'index':  1,
'int1':  1,
'int2':  1,
'int3':  1,
'int4':  1,
'int5':  1,
'int6':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'GridIntList' : class extends Node{
        //Setters
        set 'index'(value : INT)  { super.$$link(0, value) } 
set 'int_list'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'current value'() : INT { return [this, 'current value', 0]  as unknown as INT; }
get 'list'() : INT_LIST { return [this, 'list', 1]  as unknown as INT_LIST; }
get 'list text'() : STRING_LIST { return [this, 'list text', 2]  as unknown as STRING_LIST; }

        constructor(opts:{
            'index': INT,'int_list': STRING
        }){
            super(ctx);

            this['index'] = opts['index'];
this['int_list'] = opts['int_list']
            

        }

        static defaults = {
            'index':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'GridStrings' : class extends Node{
        //Setters
        set 'index'(value : INT)  { super.$$link(0, value) } 
set 'string1'(value : STRING)  { super.$$link(1, value) } 
set 'string2'(value : STRING)  { super.$$link(2, value) } 
set 'string3'(value : STRING)  { super.$$link(3, value) } 
set 'string4'(value : STRING)  { super.$$link(4, value) } 
set 'string5'(value : STRING)  { super.$$link(5, value) } 
set 'string6'(value : STRING)  { super.$$link(6, value) } 

        //Getters
        get 'current value'() : STRING { return [this, 'current value', 0]  as unknown as STRING; }
get 'list'() : STRING_LIST { return [this, 'list', 1]  as unknown as STRING_LIST; }

        constructor(opts:{
            'index': INT,'string1': STRING,'string2': STRING,'string3': STRING,'string4': STRING,'string5': STRING,'string6': STRING
        }){
            super(ctx);

            this['index'] = opts['index'];
this['string1'] = opts['string1'];
this['string2'] = opts['string2'];
this['string3'] = opts['string3'];
this['string4'] = opts['string4'];
this['string5'] = opts['string5'];
this['string6'] = opts['string6']
            

        }

        static defaults = {
            'index':  1,
'string1':  "",
'string2':  "",
'string3':  "",
'string4':  "",
'string5':  "",
'string6':  ""
}
},

    /**
     * TODO Docs based on metadata
     */
    'GridStringList' : class extends Node{
        //Setters
        set 'index'(value : INT)  { super.$$link(0, value) } 
set 'string_list'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'current value'() : STRING { return [this, 'current value', 0]  as unknown as STRING; }
get 'list'() : STRING_LIST { return [this, 'list', 1]  as unknown as STRING_LIST; }

        constructor(opts:{
            'index': INT,'string_list': STRING
        }){
            super(ctx);

            this['index'] = opts['index'];
this['string_list'] = opts['string_list']
            

        }

        static defaults = {
            'index':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'GridLoras' : class extends Node{
        //Setters
        set 'index'(value : INT)  { super.$$link(0, value) } 
set 'model'(value : MODEL)  { super.$$link(1, value) } 
set 'clip'(value : CLIP)  { super.$$link(2, value) } 
set 'lora1'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(3, value) } 
set 'lora2'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(4, value) } 
set 'lora3'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(5, value) } 
set 'lora4'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(6, value) } 
set 'lora5'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(7, value) } 
set 'lora6'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(8, value) } 
set 'strength_model'(value : FLOAT)  { super.$$link(9, value) } 
set 'strength_clip'(value : FLOAT)  { super.$$link(10, value) } 

        //Getters
        get 'current model'() : MODEL { return [this, 'current model', 0]  as unknown as MODEL; }
get 'current clip'() : CLIP { return [this, 'current clip', 1]  as unknown as CLIP; }
get 'lora name list'() : STRING_LIST { return [this, 'lora name list', 2]  as unknown as STRING_LIST; }

        constructor(opts:{
            'index': INT,'model': MODEL,'clip': CLIP,'lora1': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora2': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora3': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora4': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora5': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora6': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','strength_model': FLOAT,'strength_clip': FLOAT
        }){
            super(ctx);

            this['index'] = opts['index'];
this['model'] = opts['model'];
this['clip'] = opts['clip'];
this['lora1'] = opts['lora1'];
this['lora2'] = opts['lora2'];
this['lora3'] = opts['lora3'];
this['lora4'] = opts['lora4'];
this['lora5'] = opts['lora5'];
this['lora6'] = opts['lora6'];
this['strength_model'] = opts['strength_model'];
this['strength_clip'] = opts['strength_clip']
            

        }

        static defaults = {
            'index':  1,
'strength_model':  1,
'strength_clip':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'TextConcatenator' : class extends Node{
        //Setters
        set 'text_1'(value : STRING)  { super.$$link(0, value) } 
set 'text_2'(value : STRING)  { super.$$link(1, value) } 
set 'text_3'(value : STRING)  { super.$$link(2, value) } 
set 'text_4'(value : STRING)  { super.$$link(3, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'text_1': STRING,'text_2'?: STRING,'text_3'?: STRING,'text_4'?: STRING
        }){
            super(ctx);

            this['text_1'] = opts['text_1']
            if(opts['text_2']!==undefined) this['text_2'] = opts['text_2'];
if(opts['text_3']!==undefined) this['text_3'] = opts['text_3'];
if(opts['text_4']!==undefined) this['text_4'] = opts['text_4']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'FloatToText' : class extends Node{
        //Setters
        set 'float_input'(value : FLOAT)  { super.$$link(0, value) } 
set 'decimal_places'(value : INT)  { super.$$link(1, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'float_input': FLOAT,'decimal_places': INT
        }){
            super(ctx);

            this['float_input'] = opts['float_input'];
this['decimal_places'] = opts['decimal_places']
            

        }

        static defaults = {
            'float_input':  1,
'decimal_places':  3
}
},

    /**
     * TODO Docs based on metadata
     */
    'IntToText' : class extends Node{
        //Setters
        set 'int_input'(value : INT)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'int_input': INT
        }){
            super(ctx);

            this['int_input'] = opts['int_input']
            

        }

        static defaults = {
            'int_input':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'SaveImageGrid' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'x_size'(value : INT)  { super.$$link(1, value) } 
set 'y_size'(value : INT)  { super.$$link(2, value) } 
set 'filename_prefix'(value : STRING)  { super.$$link(3, value) } 
set 'column_labels'(value : STRING_LIST)  { super.$$link(4, value) } 
set 'row_labels'(value : STRING_LIST)  { super.$$link(5, value) } 
set 'images_grid_annotation'(value : GRID_ANNOTATION)  { super.$$link(6, value) } 

        //Getters
        

        constructor(opts:{
            'images': IMAGE,'x_size': INT,'y_size': INT,'filename_prefix': STRING,'column_labels'?: STRING_LIST,'row_labels'?: STRING_LIST,'images_grid_annotation'?: GRID_ANNOTATION
        }){
            super(ctx);

            this['images'] = opts['images'];
this['x_size'] = opts['x_size'];
this['y_size'] = opts['y_size'];
this['filename_prefix'] = opts['filename_prefix']
            if(opts['column_labels']!==undefined) this['column_labels'] = opts['column_labels'];
if(opts['row_labels']!==undefined) this['row_labels'] = opts['row_labels'];
if(opts['images_grid_annotation']!==undefined) this['images_grid_annotation'] = opts['images_grid_annotation']

        }

        static defaults = {
            'x_size':  1,
'y_size':  1,
'filename_prefix':  "ComfyUI",
'column_labels':  null,
'row_labels':  null
}
},

    /**
     * TODO Docs based on metadata
     */
    'UltimateSDUpscale' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'model'(value : MODEL)  { super.$$link(1, value) } 
set 'positive'(value : CONDITIONING)  { super.$$link(2, value) } 
set 'negative'(value : CONDITIONING)  { super.$$link(3, value) } 
set 'vae'(value : VAE)  { super.$$link(4, value) } 
set 'upscale_by'(value : FLOAT)  { super.$$link(5, value) } 
set 'seed'(value : INT)  { super.$$link(6, value) } 
set 'steps'(value : INT)  { super.$$link(7, value) } 
set 'cfg'(value : FLOAT)  { super.$$link(8, value) } 
set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(9, value) } 
set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform')  { super.$$link(10, value) } 
set 'denoise'(value : FLOAT)  { super.$$link(11, value) } 
set 'upscale_model'(value : UPSCALE_MODEL)  { super.$$link(12, value) } 
set 'mode_type'(value : 'Linear'|'Chess'|'None')  { super.$$link(13, value) } 
set 'tile_width'(value : INT)  { super.$$link(14, value) } 
set 'tile_height'(value : INT)  { super.$$link(15, value) } 
set 'mask_blur'(value : INT)  { super.$$link(16, value) } 
set 'tile_padding'(value : INT)  { super.$$link(17, value) } 
set 'seam_fix_mode'(value : 'None'|'Band Pass'|'Half Tile'|'Half Tile + Intersections')  { super.$$link(18, value) } 
set 'seam_fix_denoise'(value : FLOAT)  { super.$$link(19, value) } 
set 'seam_fix_width'(value : INT)  { super.$$link(20, value) } 
set 'seam_fix_mask_blur'(value : INT)  { super.$$link(21, value) } 
set 'seam_fix_padding'(value : INT)  { super.$$link(22, value) } 
set 'force_uniform_tiles'(value : 'enable'|'disable')  { super.$$link(23, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'model': MODEL,'positive': CONDITIONING,'negative': CONDITIONING,'vae': VAE,'upscale_by': FLOAT,'seed': INT,'steps': INT,'cfg': FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform','denoise': FLOAT,'upscale_model': UPSCALE_MODEL,'mode_type': 'Linear'|'Chess'|'None','tile_width': INT,'tile_height': INT,'mask_blur': INT,'tile_padding': INT,'seam_fix_mode': 'None'|'Band Pass'|'Half Tile'|'Half Tile + Intersections','seam_fix_denoise': FLOAT,'seam_fix_width': INT,'seam_fix_mask_blur': INT,'seam_fix_padding': INT,'force_uniform_tiles': 'enable'|'disable'
        }){
            super(ctx);

            this['image'] = opts['image'];
this['model'] = opts['model'];
this['positive'] = opts['positive'];
this['negative'] = opts['negative'];
this['vae'] = opts['vae'];
this['upscale_by'] = opts['upscale_by'];
this['seed'] = opts['seed'];
this['steps'] = opts['steps'];
this['cfg'] = opts['cfg'];
this['sampler_name'] = opts['sampler_name'];
this['scheduler'] = opts['scheduler'];
this['denoise'] = opts['denoise'];
this['upscale_model'] = opts['upscale_model'];
this['mode_type'] = opts['mode_type'];
this['tile_width'] = opts['tile_width'];
this['tile_height'] = opts['tile_height'];
this['mask_blur'] = opts['mask_blur'];
this['tile_padding'] = opts['tile_padding'];
this['seam_fix_mode'] = opts['seam_fix_mode'];
this['seam_fix_denoise'] = opts['seam_fix_denoise'];
this['seam_fix_width'] = opts['seam_fix_width'];
this['seam_fix_mask_blur'] = opts['seam_fix_mask_blur'];
this['seam_fix_padding'] = opts['seam_fix_padding'];
this['force_uniform_tiles'] = opts['force_uniform_tiles']
            

        }

        static defaults = {
            'upscale_by':  2,
'seed':  0,
'steps':  20,
'cfg':  8,
'denoise':  1,
'tile_width':  512,
'tile_height':  512,
'mask_blur':  8,
'tile_padding':  32,
'seam_fix_denoise':  1,
'seam_fix_width':  64,
'seam_fix_mask_blur':  8,
'seam_fix_padding':  16
}
},

    /**
     * TODO Docs based on metadata
     */
    'UltimateSDUpscaleNoUpscale' : class extends Node{
        //Setters
        set 'upscaled_image'(value : IMAGE)  { super.$$link(0, value) } 
set 'model'(value : MODEL)  { super.$$link(1, value) } 
set 'positive'(value : CONDITIONING)  { super.$$link(2, value) } 
set 'negative'(value : CONDITIONING)  { super.$$link(3, value) } 
set 'vae'(value : VAE)  { super.$$link(4, value) } 
set 'seed'(value : INT)  { super.$$link(5, value) } 
set 'steps'(value : INT)  { super.$$link(6, value) } 
set 'cfg'(value : FLOAT)  { super.$$link(7, value) } 
set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(8, value) } 
set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform')  { super.$$link(9, value) } 
set 'denoise'(value : FLOAT)  { super.$$link(10, value) } 
set 'mode_type'(value : 'Linear'|'Chess'|'None')  { super.$$link(11, value) } 
set 'tile_width'(value : INT)  { super.$$link(12, value) } 
set 'tile_height'(value : INT)  { super.$$link(13, value) } 
set 'mask_blur'(value : INT)  { super.$$link(14, value) } 
set 'tile_padding'(value : INT)  { super.$$link(15, value) } 
set 'seam_fix_mode'(value : 'None'|'Band Pass'|'Half Tile'|'Half Tile + Intersections')  { super.$$link(16, value) } 
set 'seam_fix_denoise'(value : FLOAT)  { super.$$link(17, value) } 
set 'seam_fix_width'(value : INT)  { super.$$link(18, value) } 
set 'seam_fix_mask_blur'(value : INT)  { super.$$link(19, value) } 
set 'seam_fix_padding'(value : INT)  { super.$$link(20, value) } 
set 'force_uniform_tiles'(value : 'enable'|'disable')  { super.$$link(21, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'upscaled_image': IMAGE,'model': MODEL,'positive': CONDITIONING,'negative': CONDITIONING,'vae': VAE,'seed': INT,'steps': INT,'cfg': FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform','denoise': FLOAT,'mode_type': 'Linear'|'Chess'|'None','tile_width': INT,'tile_height': INT,'mask_blur': INT,'tile_padding': INT,'seam_fix_mode': 'None'|'Band Pass'|'Half Tile'|'Half Tile + Intersections','seam_fix_denoise': FLOAT,'seam_fix_width': INT,'seam_fix_mask_blur': INT,'seam_fix_padding': INT,'force_uniform_tiles': 'enable'|'disable'
        }){
            super(ctx);

            this['upscaled_image'] = opts['upscaled_image'];
this['model'] = opts['model'];
this['positive'] = opts['positive'];
this['negative'] = opts['negative'];
this['vae'] = opts['vae'];
this['seed'] = opts['seed'];
this['steps'] = opts['steps'];
this['cfg'] = opts['cfg'];
this['sampler_name'] = opts['sampler_name'];
this['scheduler'] = opts['scheduler'];
this['denoise'] = opts['denoise'];
this['mode_type'] = opts['mode_type'];
this['tile_width'] = opts['tile_width'];
this['tile_height'] = opts['tile_height'];
this['mask_blur'] = opts['mask_blur'];
this['tile_padding'] = opts['tile_padding'];
this['seam_fix_mode'] = opts['seam_fix_mode'];
this['seam_fix_denoise'] = opts['seam_fix_denoise'];
this['seam_fix_width'] = opts['seam_fix_width'];
this['seam_fix_mask_blur'] = opts['seam_fix_mask_blur'];
this['seam_fix_padding'] = opts['seam_fix_padding'];
this['force_uniform_tiles'] = opts['force_uniform_tiles']
            

        }

        static defaults = {
            'seed':  0,
'steps':  20,
'cfg':  8,
'denoise':  1,
'tile_width':  512,
'tile_height':  512,
'mask_blur':  8,
'tile_padding':  32,
'seam_fix_denoise':  1,
'seam_fix_width':  64,
'seam_fix_mask_blur':  8,
'seam_fix_padding':  16
}
},

    /**
     * TODO Docs based on metadata
     */
    'Blend Latents (PPF Noise)' : class extends Node{
        //Setters
        set 'latent_a'(value : LATENT)  { super.$$link(0, value) } 
set 'latent_b'(value : LATENT)  { super.$$link(1, value) } 
set 'operation'(value : 'add'|'bislerp'|'color dodge'|'colorize'|'cosine interp'|'cuberp'|'difference'|'exclusion'|'glow'|'hard light'|'hslerp'|'inject'|'lerp'|'linear dodge'|'linear light'|'multiply'|'overlay'|'pin light'|'random'|'reflect'|'screen'|'slerp'|'subtract'|'vivid light')  { super.$$link(2, value) } 
set 'blend_ratio'(value : FLOAT)  { super.$$link(3, value) } 
set 'blend_strength'(value : FLOAT)  { super.$$link(4, value) } 
set 'mask'(value : MASK)  { super.$$link(5, value) } 
set 'set_noise_mask'(value : 'false'|'true')  { super.$$link(6, value) } 
set 'normalize'(value : 'false'|'true')  { super.$$link(7, value) } 
set 'clamp_min'(value : FLOAT)  { super.$$link(8, value) } 
set 'clamp_max'(value : FLOAT)  { super.$$link(9, value) } 
set 'latent2rgb_preview'(value : 'false'|'true')  { super.$$link(10, value) } 

        //Getters
        get 'latents'() : LATENT { return [this, 'latents', 0]  as unknown as LATENT; }
get 'previews'() : IMAGE { return [this, 'previews', 1]  as unknown as IMAGE; }

        constructor(opts:{
            'latent_a': LATENT,'latent_b': LATENT,'operation': 'add'|'bislerp'|'color dodge'|'colorize'|'cosine interp'|'cuberp'|'difference'|'exclusion'|'glow'|'hard light'|'hslerp'|'inject'|'lerp'|'linear dodge'|'linear light'|'multiply'|'overlay'|'pin light'|'random'|'reflect'|'screen'|'slerp'|'subtract'|'vivid light','blend_ratio': FLOAT,'blend_strength': FLOAT,'mask'?: MASK,'set_noise_mask'?: 'false'|'true','normalize'?: 'false'|'true','clamp_min'?: FLOAT,'clamp_max'?: FLOAT,'latent2rgb_preview'?: 'false'|'true'
        }){
            super(ctx);

            this['latent_a'] = opts['latent_a'];
this['latent_b'] = opts['latent_b'];
this['operation'] = opts['operation'];
this['blend_ratio'] = opts['blend_ratio'];
this['blend_strength'] = opts['blend_strength']
            if(opts['mask']!==undefined) this['mask'] = opts['mask'];
if(opts['set_noise_mask']!==undefined) this['set_noise_mask'] = opts['set_noise_mask'];
if(opts['normalize']!==undefined) this['normalize'] = opts['normalize'];
if(opts['clamp_min']!==undefined) this['clamp_min'] = opts['clamp_min'];
if(opts['clamp_max']!==undefined) this['clamp_max'] = opts['clamp_max'];
if(opts['latent2rgb_preview']!==undefined) this['latent2rgb_preview'] = opts['latent2rgb_preview']

        }

        static defaults = {
            'blend_ratio':  0.5,
'blend_strength':  1,
'clamp_min':  0,
'clamp_max':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'Cross-Hatch Power Fractal (PPF Noise)' : class extends Node{
        //Setters
        set 'batch_size'(value : INT)  { super.$$link(0, value) } 
set 'width'(value : INT)  { super.$$link(1, value) } 
set 'height'(value : INT)  { super.$$link(2, value) } 
set 'resampling'(value : 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp')  { super.$$link(3, value) } 
set 'frequency'(value : FLOAT)  { super.$$link(4, value) } 
set 'octaves'(value : INT)  { super.$$link(5, value) } 
set 'persistence'(value : FLOAT)  { super.$$link(6, value) } 
set 'num_colors'(value : INT)  { super.$$link(7, value) } 
set 'color_tolerance'(value : FLOAT)  { super.$$link(8, value) } 
set 'angle_degrees'(value : FLOAT)  { super.$$link(9, value) } 
set 'brightness'(value : FLOAT)  { super.$$link(10, value) } 
set 'contrast'(value : FLOAT)  { super.$$link(11, value) } 
set 'blur'(value : FLOAT)  { super.$$link(12, value) } 
set 'clamp_min'(value : FLOAT)  { super.$$link(13, value) } 
set 'clamp_max'(value : FLOAT)  { super.$$link(14, value) } 
set 'seed'(value : INT)  { super.$$link(15, value) } 
set 'device'(value : 'cpu'|'cuda')  { super.$$link(16, value) } 
set 'optional_vae'(value : VAE)  { super.$$link(17, value) } 
set 'ch_settings'(value : CH_SETTINGS)  { super.$$link(18, value) } 

        //Getters
        get 'latents'() : LATENT { return [this, 'latents', 0]  as unknown as LATENT; }
get 'previews'() : IMAGE { return [this, 'previews', 1]  as unknown as IMAGE; }

        constructor(opts:{
            'batch_size': INT,'width': INT,'height': INT,'resampling': 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp','frequency': FLOAT,'octaves': INT,'persistence': FLOAT,'num_colors': INT,'color_tolerance': FLOAT,'angle_degrees': FLOAT,'brightness': FLOAT,'contrast': FLOAT,'blur': FLOAT,'clamp_min': FLOAT,'clamp_max': FLOAT,'seed': INT,'device': 'cpu'|'cuda','optional_vae'?: VAE,'ch_settings'?: CH_SETTINGS
        }){
            super(ctx);

            this['batch_size'] = opts['batch_size'];
this['width'] = opts['width'];
this['height'] = opts['height'];
this['resampling'] = opts['resampling'];
this['frequency'] = opts['frequency'];
this['octaves'] = opts['octaves'];
this['persistence'] = opts['persistence'];
this['num_colors'] = opts['num_colors'];
this['color_tolerance'] = opts['color_tolerance'];
this['angle_degrees'] = opts['angle_degrees'];
this['brightness'] = opts['brightness'];
this['contrast'] = opts['contrast'];
this['blur'] = opts['blur'];
this['clamp_min'] = opts['clamp_min'];
this['clamp_max'] = opts['clamp_max'];
this['seed'] = opts['seed'];
this['device'] = opts['device']
            if(opts['optional_vae']!==undefined) this['optional_vae'] = opts['optional_vae'];
if(opts['ch_settings']!==undefined) this['ch_settings'] = opts['ch_settings']

        }

        static defaults = {
            'batch_size':  1,
'width':  512,
'height':  512,
'frequency':  320,
'octaves':  12,
'persistence':  1.5,
'num_colors':  16,
'color_tolerance':  0.05,
'angle_degrees':  45,
'brightness':  0,
'contrast':  0,
'blur':  2.5,
'clamp_min':  0,
'clamp_max':  1,
'seed':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Cross-Hatch Power Fractal Settings (PPF Noise)' : class extends Node{
        //Setters
        set 'frequency'(value : FLOAT)  { super.$$link(0, value) } 
set 'octaves'(value : INT)  { super.$$link(1, value) } 
set 'persistence'(value : FLOAT)  { super.$$link(2, value) } 
set 'num_colors'(value : INT)  { super.$$link(3, value) } 
set 'color_tolerance'(value : FLOAT)  { super.$$link(4, value) } 
set 'angle_degrees'(value : FLOAT)  { super.$$link(5, value) } 
set 'brightness'(value : FLOAT)  { super.$$link(6, value) } 
set 'contrast'(value : FLOAT)  { super.$$link(7, value) } 
set 'blur'(value : FLOAT)  { super.$$link(8, value) } 

        //Getters
        get 'ch_settings'() : CH_SETTINGS { return [this, 'ch_settings', 0]  as unknown as CH_SETTINGS; }

        constructor(opts:{
            'frequency': FLOAT,'octaves': INT,'persistence': FLOAT,'num_colors': INT,'color_tolerance': FLOAT,'angle_degrees': FLOAT,'brightness': FLOAT,'contrast': FLOAT,'blur': FLOAT
        }){
            super(ctx);

            this['frequency'] = opts['frequency'];
this['octaves'] = opts['octaves'];
this['persistence'] = opts['persistence'];
this['num_colors'] = opts['num_colors'];
this['color_tolerance'] = opts['color_tolerance'];
this['angle_degrees'] = opts['angle_degrees'];
this['brightness'] = opts['brightness'];
this['contrast'] = opts['contrast'];
this['blur'] = opts['blur']
            

        }

        static defaults = {
            'frequency':  320,
'octaves':  12,
'persistence':  1.5,
'num_colors':  16,
'color_tolerance':  0.05,
'angle_degrees':  45,
'brightness':  0,
'contrast':  0,
'blur':  2.5
}
},

    /**
     * TODO Docs based on metadata
     */
    'Images as Latents (PPF Noise)' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'resampling'(value : 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp')  { super.$$link(1, value) } 

        //Getters
        get 'latents'() : LATENT { return [this, 'latents', 0]  as unknown as LATENT; }
get 'images'() : IMAGE { return [this, 'images', 1]  as unknown as IMAGE; }

        constructor(opts:{
            'images': IMAGE,'resampling': 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp'
        }){
            super(ctx);

            this['images'] = opts['images'];
this['resampling'] = opts['resampling']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Latent Adjustment (PPF Noise)' : class extends Node{
        //Setters
        set 'latents'(value : LATENT)  { super.$$link(0, value) } 
set 'brightness'(value : FLOAT)  { super.$$link(1, value) } 
set 'contrast'(value : FLOAT)  { super.$$link(2, value) } 
set 'saturation'(value : FLOAT)  { super.$$link(3, value) } 
set 'exposure'(value : FLOAT)  { super.$$link(4, value) } 
set 'alpha_sharpen'(value : FLOAT)  { super.$$link(5, value) } 
set 'high_pass_radius'(value : FLOAT)  { super.$$link(6, value) } 
set 'high_pass_strength'(value : FLOAT)  { super.$$link(7, value) } 
set 'clamp_min'(value : FLOAT)  { super.$$link(8, value) } 
set 'clamp_max'(value : FLOAT)  { super.$$link(9, value) } 
set 'latent2rgb_preview'(value : 'false'|'true')  { super.$$link(10, value) } 

        //Getters
        get 'latents'() : LATENT { return [this, 'latents', 0]  as unknown as LATENT; }
get 'previews'() : IMAGE { return [this, 'previews', 1]  as unknown as IMAGE; }

        constructor(opts:{
            'latents': LATENT,'brightness': FLOAT,'contrast': FLOAT,'saturation': FLOAT,'exposure': FLOAT,'alpha_sharpen': FLOAT,'high_pass_radius': FLOAT,'high_pass_strength': FLOAT,'clamp_min': FLOAT,'clamp_max': FLOAT,'latent2rgb_preview'?: 'false'|'true'
        }){
            super(ctx);

            this['latents'] = opts['latents'];
this['brightness'] = opts['brightness'];
this['contrast'] = opts['contrast'];
this['saturation'] = opts['saturation'];
this['exposure'] = opts['exposure'];
this['alpha_sharpen'] = opts['alpha_sharpen'];
this['high_pass_radius'] = opts['high_pass_radius'];
this['high_pass_strength'] = opts['high_pass_strength'];
this['clamp_min'] = opts['clamp_min'];
this['clamp_max'] = opts['clamp_max']
            if(opts['latent2rgb_preview']!==undefined) this['latent2rgb_preview'] = opts['latent2rgb_preview']

        }

        static defaults = {
            'brightness':  1,
'contrast':  1,
'saturation':  1,
'exposure':  0,
'alpha_sharpen':  0,
'high_pass_radius':  0,
'high_pass_strength':  1,
'clamp_min':  0,
'clamp_max':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'Latents to CPU (PPF Noise)' : class extends Node{
        //Setters
        set 'latents'(value : LATENT)  { super.$$link(0, value) } 

        //Getters
        get 'latents'() : LATENT { return [this, 'latents', 0]  as unknown as LATENT; }

        constructor(opts:{
            'latents': LATENT
        }){
            super(ctx);

            this['latents'] = opts['latents']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Linear Cross-Hatch Power Fractal (PPF Noise)' : class extends Node{
        //Setters
        set 'batch_size'(value : INT)  { super.$$link(0, value) } 
set 'width'(value : INT)  { super.$$link(1, value) } 
set 'height'(value : INT)  { super.$$link(2, value) } 
set 'resampling'(value : 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp')  { super.$$link(3, value) } 
set 'frequency'(value : FLOAT)  { super.$$link(4, value) } 
set 'gain'(value : FLOAT)  { super.$$link(5, value) } 
set 'octaves'(value : INT)  { super.$$link(6, value) } 
set 'persistence'(value : FLOAT)  { super.$$link(7, value) } 
set 'add_noise'(value : FLOAT)  { super.$$link(8, value) } 
set 'linear_range'(value : INT)  { super.$$link(9, value) } 
set 'linear_tolerance'(value : FLOAT)  { super.$$link(10, value) } 
set 'angle_degrees'(value : FLOAT)  { super.$$link(11, value) } 
set 'brightness'(value : FLOAT)  { super.$$link(12, value) } 
set 'contrast'(value : FLOAT)  { super.$$link(13, value) } 
set 'seed'(value : INT)  { super.$$link(14, value) } 
set 'device'(value : 'cpu'|'cuda')  { super.$$link(15, value) } 
set 'optional_vae'(value : VAE)  { super.$$link(16, value) } 

        //Getters
        get 'latents'() : LATENT { return [this, 'latents', 0]  as unknown as LATENT; }
get 'previews'() : IMAGE { return [this, 'previews', 1]  as unknown as IMAGE; }

        constructor(opts:{
            'batch_size': INT,'width': INT,'height': INT,'resampling': 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp','frequency': FLOAT,'gain': FLOAT,'octaves': INT,'persistence': FLOAT,'add_noise': FLOAT,'linear_range': INT,'linear_tolerance': FLOAT,'angle_degrees': FLOAT,'brightness': FLOAT,'contrast': FLOAT,'seed': INT,'device': 'cpu'|'cuda','optional_vae'?: VAE
        }){
            super(ctx);

            this['batch_size'] = opts['batch_size'];
this['width'] = opts['width'];
this['height'] = opts['height'];
this['resampling'] = opts['resampling'];
this['frequency'] = opts['frequency'];
this['gain'] = opts['gain'];
this['octaves'] = opts['octaves'];
this['persistence'] = opts['persistence'];
this['add_noise'] = opts['add_noise'];
this['linear_range'] = opts['linear_range'];
this['linear_tolerance'] = opts['linear_tolerance'];
this['angle_degrees'] = opts['angle_degrees'];
this['brightness'] = opts['brightness'];
this['contrast'] = opts['contrast'];
this['seed'] = opts['seed'];
this['device'] = opts['device']
            if(opts['optional_vae']!==undefined) this['optional_vae'] = opts['optional_vae']

        }

        static defaults = {
            'batch_size':  1,
'width':  512,
'height':  512,
'frequency':  320,
'gain':  0.25,
'octaves':  12,
'persistence':  1.5,
'add_noise':  0,
'linear_range':  16,
'linear_tolerance':  0.05,
'angle_degrees':  45,
'brightness':  0,
'contrast':  0,
'seed':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Perlin Power Fractal Latent (PPF Noise)' : class extends Node{
        //Setters
        set 'batch_size'(value : INT)  { super.$$link(0, value) } 
set 'width'(value : INT)  { super.$$link(1, value) } 
set 'height'(value : INT)  { super.$$link(2, value) } 
set 'resampling'(value : 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp')  { super.$$link(3, value) } 
set 'X'(value : FLOAT)  { super.$$link(4, value) } 
set 'Y'(value : FLOAT)  { super.$$link(5, value) } 
set 'Z'(value : FLOAT)  { super.$$link(6, value) } 
set 'evolution'(value : FLOAT)  { super.$$link(7, value) } 
set 'frame'(value : INT)  { super.$$link(8, value) } 
set 'scale'(value : FLOAT)  { super.$$link(9, value) } 
set 'octaves'(value : INT)  { super.$$link(10, value) } 
set 'persistence'(value : FLOAT)  { super.$$link(11, value) } 
set 'lacunarity'(value : FLOAT)  { super.$$link(12, value) } 
set 'exponent'(value : FLOAT)  { super.$$link(13, value) } 
set 'brightness'(value : FLOAT)  { super.$$link(14, value) } 
set 'contrast'(value : FLOAT)  { super.$$link(15, value) } 
set 'clamp_min'(value : FLOAT)  { super.$$link(16, value) } 
set 'clamp_max'(value : FLOAT)  { super.$$link(17, value) } 
set 'seed'(value : INT)  { super.$$link(18, value) } 
set 'device'(value : 'cpu'|'cuda')  { super.$$link(19, value) } 
set 'optional_vae'(value : VAE)  { super.$$link(20, value) } 
set 'ppf_settings'(value : PPF_SETTINGS)  { super.$$link(21, value) } 

        //Getters
        get 'latents'() : LATENT { return [this, 'latents', 0]  as unknown as LATENT; }
get 'previews'() : IMAGE { return [this, 'previews', 1]  as unknown as IMAGE; }

        constructor(opts:{
            'batch_size': INT,'width': INT,'height': INT,'resampling': 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp','X': FLOAT,'Y': FLOAT,'Z': FLOAT,'evolution': FLOAT,'frame': INT,'scale': FLOAT,'octaves': INT,'persistence': FLOAT,'lacunarity': FLOAT,'exponent': FLOAT,'brightness': FLOAT,'contrast': FLOAT,'clamp_min': FLOAT,'clamp_max': FLOAT,'seed': INT,'device': 'cpu'|'cuda','optional_vae'?: VAE,'ppf_settings'?: PPF_SETTINGS
        }){
            super(ctx);

            this['batch_size'] = opts['batch_size'];
this['width'] = opts['width'];
this['height'] = opts['height'];
this['resampling'] = opts['resampling'];
this['X'] = opts['X'];
this['Y'] = opts['Y'];
this['Z'] = opts['Z'];
this['evolution'] = opts['evolution'];
this['frame'] = opts['frame'];
this['scale'] = opts['scale'];
this['octaves'] = opts['octaves'];
this['persistence'] = opts['persistence'];
this['lacunarity'] = opts['lacunarity'];
this['exponent'] = opts['exponent'];
this['brightness'] = opts['brightness'];
this['contrast'] = opts['contrast'];
this['clamp_min'] = opts['clamp_min'];
this['clamp_max'] = opts['clamp_max'];
this['seed'] = opts['seed'];
this['device'] = opts['device']
            if(opts['optional_vae']!==undefined) this['optional_vae'] = opts['optional_vae'];
if(opts['ppf_settings']!==undefined) this['ppf_settings'] = opts['ppf_settings']

        }

        static defaults = {
            'batch_size':  1,
'width':  512,
'height':  512,
'X':  0,
'Y':  0,
'Z':  0,
'evolution':  0,
'frame':  0,
'scale':  5,
'octaves':  8,
'persistence':  1.5,
'lacunarity':  2,
'exponent':  4,
'brightness':  0,
'contrast':  0,
'clamp_min':  0,
'clamp_max':  1,
'seed':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Perlin Power Fractal Settings (PPF Noise)' : class extends Node{
        //Setters
        set 'X'(value : FLOAT)  { super.$$link(0, value) } 
set 'Y'(value : FLOAT)  { super.$$link(1, value) } 
set 'Z'(value : FLOAT)  { super.$$link(2, value) } 
set 'evolution'(value : FLOAT)  { super.$$link(3, value) } 
set 'frame'(value : INT)  { super.$$link(4, value) } 
set 'scale'(value : FLOAT)  { super.$$link(5, value) } 
set 'octaves'(value : INT)  { super.$$link(6, value) } 
set 'persistence'(value : FLOAT)  { super.$$link(7, value) } 
set 'lacunarity'(value : FLOAT)  { super.$$link(8, value) } 
set 'exponent'(value : FLOAT)  { super.$$link(9, value) } 
set 'brightness'(value : FLOAT)  { super.$$link(10, value) } 
set 'contrast'(value : FLOAT)  { super.$$link(11, value) } 

        //Getters
        get 'ppf_settings'() : PPF_SETTINGS { return [this, 'ppf_settings', 0]  as unknown as PPF_SETTINGS; }

        constructor(opts:{
            'X': FLOAT,'Y': FLOAT,'Z': FLOAT,'evolution': FLOAT,'frame': INT,'scale': FLOAT,'octaves': INT,'persistence': FLOAT,'lacunarity': FLOAT,'exponent': FLOAT,'brightness': FLOAT,'contrast': FLOAT
        }){
            super(ctx);

            this['X'] = opts['X'];
this['Y'] = opts['Y'];
this['Z'] = opts['Z'];
this['evolution'] = opts['evolution'];
this['frame'] = opts['frame'];
this['scale'] = opts['scale'];
this['octaves'] = opts['octaves'];
this['persistence'] = opts['persistence'];
this['lacunarity'] = opts['lacunarity'];
this['exponent'] = opts['exponent'];
this['brightness'] = opts['brightness'];
this['contrast'] = opts['contrast']
            

        }

        static defaults = {
            'X':  0,
'Y':  0,
'Z':  0,
'evolution':  0,
'frame':  0,
'scale':  5,
'octaves':  8,
'persistence':  1.5,
'lacunarity':  2,
'exponent':  4,
'brightness':  0,
'contrast':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Power-Law Noise (PPF Noise)' : class extends Node{
        //Setters
        set 'batch_size'(value : INT)  { super.$$link(0, value) } 
set 'width'(value : INT)  { super.$$link(1, value) } 
set 'height'(value : INT)  { super.$$link(2, value) } 
set 'resampling'(value : 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp')  { super.$$link(3, value) } 
set 'noise_type'(value : 'white'|'grey'|'pink'|'green'|'blue'|'random_mix'|'brownian_fractal'|'velvet'|'violet')  { super.$$link(4, value) } 
set 'scale'(value : FLOAT)  { super.$$link(5, value) } 
set 'alpha_exponent'(value : FLOAT)  { super.$$link(6, value) } 
set 'modulator'(value : FLOAT)  { super.$$link(7, value) } 
set 'seed'(value : INT)  { super.$$link(8, value) } 
set 'device'(value : 'cpu'|'cuda')  { super.$$link(9, value) } 
set 'optional_vae'(value : VAE)  { super.$$link(10, value) } 

        //Getters
        get 'latents'() : LATENT { return [this, 'latents', 0]  as unknown as LATENT; }
get 'previews'() : IMAGE { return [this, 'previews', 1]  as unknown as IMAGE; }

        constructor(opts:{
            'batch_size': INT,'width': INT,'height': INT,'resampling': 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp','noise_type': 'white'|'grey'|'pink'|'green'|'blue'|'random_mix'|'brownian_fractal'|'velvet'|'violet','scale': FLOAT,'alpha_exponent': FLOAT,'modulator': FLOAT,'seed': INT,'device': 'cpu'|'cuda','optional_vae'?: VAE
        }){
            super(ctx);

            this['batch_size'] = opts['batch_size'];
this['width'] = opts['width'];
this['height'] = opts['height'];
this['resampling'] = opts['resampling'];
this['noise_type'] = opts['noise_type'];
this['scale'] = opts['scale'];
this['alpha_exponent'] = opts['alpha_exponent'];
this['modulator'] = opts['modulator'];
this['seed'] = opts['seed'];
this['device'] = opts['device']
            if(opts['optional_vae']!==undefined) this['optional_vae'] = opts['optional_vae']

        }

        static defaults = {
            'batch_size':  1,
'width':  512,
'height':  512,
'scale':  1,
'alpha_exponent':  1,
'modulator':  1,
'seed':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Power KSampler Advanced (PPF Noise)' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'seed'(value : INT)  { super.$$link(1, value) } 
set 'steps'(value : INT)  { super.$$link(2, value) } 
set 'cfg'(value : FLOAT)  { super.$$link(3, value) } 
set 'sampler_name'(value : 'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'euler_ancestral'|'dpm_2_ancestral'|'dpmpp_2s_ancestral'|'dpm_fast'|'dpm_adaptive')  { super.$$link(4, value) } 
set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform')  { super.$$link(5, value) } 
set 'positive'(value : CONDITIONING)  { super.$$link(6, value) } 
set 'negative'(value : CONDITIONING)  { super.$$link(7, value) } 
set 'latent_image'(value : LATENT)  { super.$$link(8, value) } 
set 'start_at_step'(value : INT)  { super.$$link(9, value) } 
set 'end_at_step'(value : INT)  { super.$$link(10, value) } 
set 'enable_denoise'(value : 'false'|'true')  { super.$$link(11, value) } 
set 'denoise'(value : FLOAT)  { super.$$link(12, value) } 
set 'add_noise'(value : 'enable'|'disable')  { super.$$link(13, value) } 
set 'return_with_leftover_noise'(value : 'disable'|'enable')  { super.$$link(14, value) } 
set 'noise_type'(value : 'white'|'grey'|'pink'|'green'|'blue'|'random_mix'|'brownian_fractal'|'velvet'|'violet'|'vanilla_comfy')  { super.$$link(15, value) } 
set 'noise_blending'(value : 'bislerp'|'cosine interp'|'cuberp'|'hslerp'|'lerp'|'add'|'inject')  { super.$$link(16, value) } 
set 'noise_mode'(value : 'additive'|'subtractive')  { super.$$link(17, value) } 
set 'scale'(value : FLOAT)  { super.$$link(18, value) } 
set 'alpha_exponent'(value : FLOAT)  { super.$$link(19, value) } 
set 'modulator'(value : FLOAT)  { super.$$link(20, value) } 
set 'sigma_tolerance'(value : FLOAT)  { super.$$link(21, value) } 
set 'boost_leading_sigma'(value : 'false'|'true')  { super.$$link(22, value) } 
set 'tonal_guide_latent'(value : LATENT)  { super.$$link(23, value) } 
set 'ppf_settings'(value : PPF_SETTINGS)  { super.$$link(24, value) } 
set 'ch_settings'(value : CH_SETTINGS)  { super.$$link(25, value) } 
set 'guide_use_noise'(value : 'true'|'false')  { super.$$link(26, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'model': MODEL,'seed': INT,'steps': INT,'cfg': FLOAT,'sampler_name': 'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'euler_ancestral'|'dpm_2_ancestral'|'dpmpp_2s_ancestral'|'dpm_fast'|'dpm_adaptive','scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform','positive': CONDITIONING,'negative': CONDITIONING,'latent_image': LATENT,'start_at_step': INT,'end_at_step': INT,'enable_denoise': 'false'|'true','denoise': FLOAT,'add_noise': 'enable'|'disable','return_with_leftover_noise': 'disable'|'enable','noise_type'?: 'white'|'grey'|'pink'|'green'|'blue'|'random_mix'|'brownian_fractal'|'velvet'|'violet'|'vanilla_comfy','noise_blending'?: 'bislerp'|'cosine interp'|'cuberp'|'hslerp'|'lerp'|'add'|'inject','noise_mode'?: 'additive'|'subtractive','scale'?: FLOAT,'alpha_exponent'?: FLOAT,'modulator'?: FLOAT,'sigma_tolerance'?: FLOAT,'boost_leading_sigma'?: 'false'|'true','tonal_guide_latent'?: LATENT,'ppf_settings'?: PPF_SETTINGS,'ch_settings'?: CH_SETTINGS,'guide_use_noise'?: 'true'|'false'
        }){
            super(ctx);

            this['model'] = opts['model'];
this['seed'] = opts['seed'];
this['steps'] = opts['steps'];
this['cfg'] = opts['cfg'];
this['sampler_name'] = opts['sampler_name'];
this['scheduler'] = opts['scheduler'];
this['positive'] = opts['positive'];
this['negative'] = opts['negative'];
this['latent_image'] = opts['latent_image'];
this['start_at_step'] = opts['start_at_step'];
this['end_at_step'] = opts['end_at_step'];
this['enable_denoise'] = opts['enable_denoise'];
this['denoise'] = opts['denoise'];
this['add_noise'] = opts['add_noise'];
this['return_with_leftover_noise'] = opts['return_with_leftover_noise']
            if(opts['noise_type']!==undefined) this['noise_type'] = opts['noise_type'];
if(opts['noise_blending']!==undefined) this['noise_blending'] = opts['noise_blending'];
if(opts['noise_mode']!==undefined) this['noise_mode'] = opts['noise_mode'];
if(opts['scale']!==undefined) this['scale'] = opts['scale'];
if(opts['alpha_exponent']!==undefined) this['alpha_exponent'] = opts['alpha_exponent'];
if(opts['modulator']!==undefined) this['modulator'] = opts['modulator'];
if(opts['sigma_tolerance']!==undefined) this['sigma_tolerance'] = opts['sigma_tolerance'];
if(opts['boost_leading_sigma']!==undefined) this['boost_leading_sigma'] = opts['boost_leading_sigma'];
if(opts['tonal_guide_latent']!==undefined) this['tonal_guide_latent'] = opts['tonal_guide_latent'];
if(opts['ppf_settings']!==undefined) this['ppf_settings'] = opts['ppf_settings'];
if(opts['ch_settings']!==undefined) this['ch_settings'] = opts['ch_settings'];
if(opts['guide_use_noise']!==undefined) this['guide_use_noise'] = opts['guide_use_noise']

        }

        static defaults = {
            'seed':  0,
'steps':  20,
'cfg':  8,
'start_at_step':  0,
'end_at_step':  10000,
'denoise':  1,
'scale':  1,
'alpha_exponent':  1,
'modulator':  1,
'sigma_tolerance':  0.5
}
},

    /**
     * TODO Docs based on metadata
     */
    'SaveImageWebsocket' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        

        constructor(opts:{
            'images': IMAGE
        }){
            super(ctx);

            this['images'] = opts['images']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'KSampler (Efficient)' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'seed'(value : INT)  { super.$$link(1, value) } 
set 'steps'(value : INT)  { super.$$link(2, value) } 
set 'cfg'(value : FLOAT)  { super.$$link(3, value) } 
set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(4, value) } 
set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(5, value) } 
set 'positive'(value : CONDITIONING)  { super.$$link(6, value) } 
set 'negative'(value : CONDITIONING)  { super.$$link(7, value) } 
set 'latent_image'(value : LATENT)  { super.$$link(8, value) } 
set 'denoise'(value : FLOAT)  { super.$$link(9, value) } 
set 'preview_method'(value : 'auto'|'latent2rgb'|'taesd'|'vae_decoded_only'|'none')  { super.$$link(10, value) } 
set 'vae_decode'(value : 'true'|'true (tiled)'|'false')  { super.$$link(11, value) } 
set 'optional_vae'(value : VAE)  { super.$$link(12, value) } 
set 'script'(value : SCRIPT)  { super.$$link(13, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'CONDITIONING+'() : CONDITIONING { return [this, 'CONDITIONING+', 1]  as unknown as CONDITIONING; }
get 'CONDITIONING-'() : CONDITIONING { return [this, 'CONDITIONING-', 2]  as unknown as CONDITIONING; }
get 'LATENT'() : LATENT { return [this, 'LATENT', 3]  as unknown as LATENT; }
get 'VAE'() : VAE { return [this, 'VAE', 4]  as unknown as VAE; }
get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 5]  as unknown as IMAGE; }

        constructor(opts:{
            'model': MODEL,'seed': INT,'steps': INT,'cfg': FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','positive': CONDITIONING,'negative': CONDITIONING,'latent_image': LATENT,'denoise': FLOAT,'preview_method': 'auto'|'latent2rgb'|'taesd'|'vae_decoded_only'|'none','vae_decode': 'true'|'true (tiled)'|'false','optional_vae'?: VAE,'script'?: SCRIPT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['seed'] = opts['seed'];
this['steps'] = opts['steps'];
this['cfg'] = opts['cfg'];
this['sampler_name'] = opts['sampler_name'];
this['scheduler'] = opts['scheduler'];
this['positive'] = opts['positive'];
this['negative'] = opts['negative'];
this['latent_image'] = opts['latent_image'];
this['denoise'] = opts['denoise'];
this['preview_method'] = opts['preview_method'];
this['vae_decode'] = opts['vae_decode']
            if(opts['optional_vae']!==undefined) this['optional_vae'] = opts['optional_vae'];
if(opts['script']!==undefined) this['script'] = opts['script']

        }

        static defaults = {
            'seed':  0,
'steps':  20,
'cfg':  7,
'denoise':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'KSampler Adv. (Efficient)' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'add_noise'(value : 'enable'|'disable')  { super.$$link(1, value) } 
set 'noise_seed'(value : INT)  { super.$$link(2, value) } 
set 'steps'(value : INT)  { super.$$link(3, value) } 
set 'cfg'(value : FLOAT)  { super.$$link(4, value) } 
set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(5, value) } 
set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(6, value) } 
set 'positive'(value : CONDITIONING)  { super.$$link(7, value) } 
set 'negative'(value : CONDITIONING)  { super.$$link(8, value) } 
set 'latent_image'(value : LATENT)  { super.$$link(9, value) } 
set 'start_at_step'(value : INT)  { super.$$link(10, value) } 
set 'end_at_step'(value : INT)  { super.$$link(11, value) } 
set 'return_with_leftover_noise'(value : 'disable'|'enable')  { super.$$link(12, value) } 
set 'preview_method'(value : 'auto'|'latent2rgb'|'taesd'|'none')  { super.$$link(13, value) } 
set 'vae_decode'(value : 'true'|'true (tiled)'|'false'|'output only'|'output only (tiled)')  { super.$$link(14, value) } 
set 'optional_vae'(value : VAE)  { super.$$link(15, value) } 
set 'script'(value : SCRIPT)  { super.$$link(16, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'CONDITIONING+'() : CONDITIONING { return [this, 'CONDITIONING+', 1]  as unknown as CONDITIONING; }
get 'CONDITIONING-'() : CONDITIONING { return [this, 'CONDITIONING-', 2]  as unknown as CONDITIONING; }
get 'LATENT'() : LATENT { return [this, 'LATENT', 3]  as unknown as LATENT; }
get 'VAE'() : VAE { return [this, 'VAE', 4]  as unknown as VAE; }
get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 5]  as unknown as IMAGE; }

        constructor(opts:{
            'model': MODEL,'add_noise': 'enable'|'disable','noise_seed': INT,'steps': INT,'cfg': FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','positive': CONDITIONING,'negative': CONDITIONING,'latent_image': LATENT,'start_at_step': INT,'end_at_step': INT,'return_with_leftover_noise': 'disable'|'enable','preview_method': 'auto'|'latent2rgb'|'taesd'|'none','vae_decode': 'true'|'true (tiled)'|'false'|'output only'|'output only (tiled)','optional_vae'?: VAE,'script'?: SCRIPT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['add_noise'] = opts['add_noise'];
this['noise_seed'] = opts['noise_seed'];
this['steps'] = opts['steps'];
this['cfg'] = opts['cfg'];
this['sampler_name'] = opts['sampler_name'];
this['scheduler'] = opts['scheduler'];
this['positive'] = opts['positive'];
this['negative'] = opts['negative'];
this['latent_image'] = opts['latent_image'];
this['start_at_step'] = opts['start_at_step'];
this['end_at_step'] = opts['end_at_step'];
this['return_with_leftover_noise'] = opts['return_with_leftover_noise'];
this['preview_method'] = opts['preview_method'];
this['vae_decode'] = opts['vae_decode']
            if(opts['optional_vae']!==undefined) this['optional_vae'] = opts['optional_vae'];
if(opts['script']!==undefined) this['script'] = opts['script']

        }

        static defaults = {
            'noise_seed':  0,
'steps':  20,
'cfg':  7,
'start_at_step':  0,
'end_at_step':  10000
}
},

    /**
     * TODO Docs based on metadata
     */
    'KSampler SDXL (Eff.)' : class extends Node{
        //Setters
        set 'sdxl_tuple'(value : SDXL_TUPLE)  { super.$$link(0, value) } 
set 'noise_seed'(value : INT)  { super.$$link(1, value) } 
set 'steps'(value : INT)  { super.$$link(2, value) } 
set 'cfg'(value : FLOAT)  { super.$$link(3, value) } 
set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(4, value) } 
set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(5, value) } 
set 'latent_image'(value : LATENT)  { super.$$link(6, value) } 
set 'start_at_step'(value : INT)  { super.$$link(7, value) } 
set 'refine_at_step'(value : INT)  { super.$$link(8, value) } 
set 'preview_method'(value : 'auto'|'latent2rgb'|'taesd'|'none')  { super.$$link(9, value) } 
set 'vae_decode'(value : 'true'|'true (tiled)'|'false'|'output only'|'output only (tiled)')  { super.$$link(10, value) } 
set 'optional_vae'(value : VAE)  { super.$$link(11, value) } 
set 'script'(value : SCRIPT)  { super.$$link(12, value) } 

        //Getters
        get 'SDXL_TUPLE'() : SDXL_TUPLE { return [this, 'SDXL_TUPLE', 0]  as unknown as SDXL_TUPLE; }
get 'LATENT'() : LATENT { return [this, 'LATENT', 1]  as unknown as LATENT; }
get 'VAE'() : VAE { return [this, 'VAE', 2]  as unknown as VAE; }
get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 3]  as unknown as IMAGE; }

        constructor(opts:{
            'sdxl_tuple': SDXL_TUPLE,'noise_seed': INT,'steps': INT,'cfg': FLOAT,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','latent_image': LATENT,'start_at_step': INT,'refine_at_step': INT,'preview_method': 'auto'|'latent2rgb'|'taesd'|'none','vae_decode': 'true'|'true (tiled)'|'false'|'output only'|'output only (tiled)','optional_vae'?: VAE,'script'?: SCRIPT
        }){
            super(ctx);

            this['sdxl_tuple'] = opts['sdxl_tuple'];
this['noise_seed'] = opts['noise_seed'];
this['steps'] = opts['steps'];
this['cfg'] = opts['cfg'];
this['sampler_name'] = opts['sampler_name'];
this['scheduler'] = opts['scheduler'];
this['latent_image'] = opts['latent_image'];
this['start_at_step'] = opts['start_at_step'];
this['refine_at_step'] = opts['refine_at_step'];
this['preview_method'] = opts['preview_method'];
this['vae_decode'] = opts['vae_decode']
            if(opts['optional_vae']!==undefined) this['optional_vae'] = opts['optional_vae'];
if(opts['script']!==undefined) this['script'] = opts['script']

        }

        static defaults = {
            'noise_seed':  0,
'steps':  20,
'cfg':  7,
'start_at_step':  0,
'refine_at_step':  -1
}
},

    /**
     * TODO Docs based on metadata
     */
    'Efficient Loader' : class extends Node{
        //Setters
        set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(0, value) } 
set 'vae_name'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(1, value) } 
set 'clip_skip'(value : INT)  { super.$$link(2, value) } 
set 'lora_name'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(3, value) } 
set 'lora_model_strength'(value : FLOAT)  { super.$$link(4, value) } 
set 'lora_clip_strength'(value : FLOAT)  { super.$$link(5, value) } 
set 'positive'(value : STRING)  { super.$$link(6, value) } 
set 'negative'(value : STRING)  { super.$$link(7, value) } 
set 'token_normalization'(value : 'none'|'mean'|'length'|'length+mean')  { super.$$link(8, value) } 
set 'weight_interpretation'(value : 'comfy'|'A1111'|'compel'|'comfy++'|'down_weight')  { super.$$link(9, value) } 
set 'empty_latent_width'(value : INT)  { super.$$link(10, value) } 
set 'empty_latent_height'(value : INT)  { super.$$link(11, value) } 
set 'batch_size'(value : INT)  { super.$$link(12, value) } 
set 'lora_stack'(value : LORA_STACK)  { super.$$link(13, value) } 
set 'cnet_stack'(value : CONTROL_NET_STACK)  { super.$$link(14, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'CONDITIONING+'() : CONDITIONING { return [this, 'CONDITIONING+', 1]  as unknown as CONDITIONING; }
get 'CONDITIONING-'() : CONDITIONING { return [this, 'CONDITIONING-', 2]  as unknown as CONDITIONING; }
get 'LATENT'() : LATENT { return [this, 'LATENT', 3]  as unknown as LATENT; }
get 'VAE'() : VAE { return [this, 'VAE', 4]  as unknown as VAE; }
get 'CLIP'() : CLIP { return [this, 'CLIP', 5]  as unknown as CLIP; }
get 'DEPENDENCIES'() : DEPENDENCIES { return [this, 'DEPENDENCIES', 6]  as unknown as DEPENDENCIES; }

        constructor(opts:{
            'ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','vae_name': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','clip_skip': INT,'lora_name': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_model_strength': FLOAT,'lora_clip_strength': FLOAT,'positive': STRING,'negative': STRING,'token_normalization': 'none'|'mean'|'length'|'length+mean','weight_interpretation': 'comfy'|'A1111'|'compel'|'comfy++'|'down_weight','empty_latent_width': INT,'empty_latent_height': INT,'batch_size': INT,'lora_stack'?: LORA_STACK,'cnet_stack'?: CONTROL_NET_STACK
        }){
            super(ctx);

            this['ckpt_name'] = opts['ckpt_name'];
this['vae_name'] = opts['vae_name'];
this['clip_skip'] = opts['clip_skip'];
this['lora_name'] = opts['lora_name'];
this['lora_model_strength'] = opts['lora_model_strength'];
this['lora_clip_strength'] = opts['lora_clip_strength'];
this['positive'] = opts['positive'];
this['negative'] = opts['negative'];
this['token_normalization'] = opts['token_normalization'];
this['weight_interpretation'] = opts['weight_interpretation'];
this['empty_latent_width'] = opts['empty_latent_width'];
this['empty_latent_height'] = opts['empty_latent_height'];
this['batch_size'] = opts['batch_size']
            if(opts['lora_stack']!==undefined) this['lora_stack'] = opts['lora_stack'];
if(opts['cnet_stack']!==undefined) this['cnet_stack'] = opts['cnet_stack']

        }

        static defaults = {
            'clip_skip':  -1,
'lora_model_strength':  1,
'lora_clip_strength':  1,
'positive':  "CLIP_POSITIVE",
'negative':  "CLIP_NEGATIVE",
'empty_latent_width':  512,
'empty_latent_height':  512,
'batch_size':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'Eff. Loader SDXL' : class extends Node{
        //Setters
        set 'base_ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(0, value) } 
set 'base_clip_skip'(value : INT)  { super.$$link(1, value) } 
set 'refiner_ckpt_name'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(2, value) } 
set 'refiner_clip_skip'(value : INT)  { super.$$link(3, value) } 
set 'positive_ascore'(value : FLOAT)  { super.$$link(4, value) } 
set 'negative_ascore'(value : FLOAT)  { super.$$link(5, value) } 
set 'vae_name'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(6, value) } 
set 'positive'(value : STRING)  { super.$$link(7, value) } 
set 'negative'(value : STRING)  { super.$$link(8, value) } 
set 'token_normalization'(value : 'none'|'mean'|'length'|'length+mean')  { super.$$link(9, value) } 
set 'weight_interpretation'(value : 'comfy'|'A1111'|'compel'|'comfy++'|'down_weight')  { super.$$link(10, value) } 
set 'empty_latent_width'(value : INT)  { super.$$link(11, value) } 
set 'empty_latent_height'(value : INT)  { super.$$link(12, value) } 
set 'batch_size'(value : INT)  { super.$$link(13, value) } 
set 'lora_stack'(value : LORA_STACK)  { super.$$link(14, value) } 
set 'cnet_stack'(value : CONTROL_NET_STACK)  { super.$$link(15, value) } 

        //Getters
        get 'SDXL_TUPLE'() : SDXL_TUPLE { return [this, 'SDXL_TUPLE', 0]  as unknown as SDXL_TUPLE; }
get 'LATENT'() : LATENT { return [this, 'LATENT', 1]  as unknown as LATENT; }
get 'VAE'() : VAE { return [this, 'VAE', 2]  as unknown as VAE; }
get 'DEPENDENCIES'() : DEPENDENCIES { return [this, 'DEPENDENCIES', 3]  as unknown as DEPENDENCIES; }

        constructor(opts:{
            'base_ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','base_clip_skip': INT,'refiner_ckpt_name': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','refiner_clip_skip': INT,'positive_ascore': FLOAT,'negative_ascore': FLOAT,'vae_name': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','positive': STRING,'negative': STRING,'token_normalization': 'none'|'mean'|'length'|'length+mean','weight_interpretation': 'comfy'|'A1111'|'compel'|'comfy++'|'down_weight','empty_latent_width': INT,'empty_latent_height': INT,'batch_size': INT,'lora_stack'?: LORA_STACK,'cnet_stack'?: CONTROL_NET_STACK
        }){
            super(ctx);

            this['base_ckpt_name'] = opts['base_ckpt_name'];
this['base_clip_skip'] = opts['base_clip_skip'];
this['refiner_ckpt_name'] = opts['refiner_ckpt_name'];
this['refiner_clip_skip'] = opts['refiner_clip_skip'];
this['positive_ascore'] = opts['positive_ascore'];
this['negative_ascore'] = opts['negative_ascore'];
this['vae_name'] = opts['vae_name'];
this['positive'] = opts['positive'];
this['negative'] = opts['negative'];
this['token_normalization'] = opts['token_normalization'];
this['weight_interpretation'] = opts['weight_interpretation'];
this['empty_latent_width'] = opts['empty_latent_width'];
this['empty_latent_height'] = opts['empty_latent_height'];
this['batch_size'] = opts['batch_size']
            if(opts['lora_stack']!==undefined) this['lora_stack'] = opts['lora_stack'];
if(opts['cnet_stack']!==undefined) this['cnet_stack'] = opts['cnet_stack']

        }

        static defaults = {
            'base_clip_skip':  -2,
'refiner_clip_skip':  -2,
'positive_ascore':  6,
'negative_ascore':  2,
'positive':  "CLIP_POSITIVE",
'negative':  "CLIP_NEGATIVE",
'empty_latent_width':  1024,
'empty_latent_height':  1024,
'batch_size':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'LoRA Stacker' : class extends Node{
        //Setters
        set 'input_mode'(value : 'simple'|'advanced')  { super.$$link(0, value) } 
set 'lora_count'(value : INT)  { super.$$link(1, value) } 
set 'lora_name_1'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(2, value) } 
set 'lora_wt_1'(value : FLOAT)  { super.$$link(3, value) } 
set 'model_str_1'(value : FLOAT)  { super.$$link(4, value) } 
set 'clip_str_1'(value : FLOAT)  { super.$$link(5, value) } 
set 'lora_name_2'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(6, value) } 
set 'lora_wt_2'(value : FLOAT)  { super.$$link(7, value) } 
set 'model_str_2'(value : FLOAT)  { super.$$link(8, value) } 
set 'clip_str_2'(value : FLOAT)  { super.$$link(9, value) } 
set 'lora_name_3'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(10, value) } 
set 'lora_wt_3'(value : FLOAT)  { super.$$link(11, value) } 
set 'model_str_3'(value : FLOAT)  { super.$$link(12, value) } 
set 'clip_str_3'(value : FLOAT)  { super.$$link(13, value) } 
set 'lora_name_4'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(14, value) } 
set 'lora_wt_4'(value : FLOAT)  { super.$$link(15, value) } 
set 'model_str_4'(value : FLOAT)  { super.$$link(16, value) } 
set 'clip_str_4'(value : FLOAT)  { super.$$link(17, value) } 
set 'lora_name_5'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(18, value) } 
set 'lora_wt_5'(value : FLOAT)  { super.$$link(19, value) } 
set 'model_str_5'(value : FLOAT)  { super.$$link(20, value) } 
set 'clip_str_5'(value : FLOAT)  { super.$$link(21, value) } 
set 'lora_name_6'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(22, value) } 
set 'lora_wt_6'(value : FLOAT)  { super.$$link(23, value) } 
set 'model_str_6'(value : FLOAT)  { super.$$link(24, value) } 
set 'clip_str_6'(value : FLOAT)  { super.$$link(25, value) } 
set 'lora_name_7'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(26, value) } 
set 'lora_wt_7'(value : FLOAT)  { super.$$link(27, value) } 
set 'model_str_7'(value : FLOAT)  { super.$$link(28, value) } 
set 'clip_str_7'(value : FLOAT)  { super.$$link(29, value) } 
set 'lora_name_8'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(30, value) } 
set 'lora_wt_8'(value : FLOAT)  { super.$$link(31, value) } 
set 'model_str_8'(value : FLOAT)  { super.$$link(32, value) } 
set 'clip_str_8'(value : FLOAT)  { super.$$link(33, value) } 
set 'lora_name_9'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(34, value) } 
set 'lora_wt_9'(value : FLOAT)  { super.$$link(35, value) } 
set 'model_str_9'(value : FLOAT)  { super.$$link(36, value) } 
set 'clip_str_9'(value : FLOAT)  { super.$$link(37, value) } 
set 'lora_name_10'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(38, value) } 
set 'lora_wt_10'(value : FLOAT)  { super.$$link(39, value) } 
set 'model_str_10'(value : FLOAT)  { super.$$link(40, value) } 
set 'clip_str_10'(value : FLOAT)  { super.$$link(41, value) } 
set 'lora_name_11'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(42, value) } 
set 'lora_wt_11'(value : FLOAT)  { super.$$link(43, value) } 
set 'model_str_11'(value : FLOAT)  { super.$$link(44, value) } 
set 'clip_str_11'(value : FLOAT)  { super.$$link(45, value) } 
set 'lora_name_12'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(46, value) } 
set 'lora_wt_12'(value : FLOAT)  { super.$$link(47, value) } 
set 'model_str_12'(value : FLOAT)  { super.$$link(48, value) } 
set 'clip_str_12'(value : FLOAT)  { super.$$link(49, value) } 
set 'lora_name_13'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(50, value) } 
set 'lora_wt_13'(value : FLOAT)  { super.$$link(51, value) } 
set 'model_str_13'(value : FLOAT)  { super.$$link(52, value) } 
set 'clip_str_13'(value : FLOAT)  { super.$$link(53, value) } 
set 'lora_name_14'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(54, value) } 
set 'lora_wt_14'(value : FLOAT)  { super.$$link(55, value) } 
set 'model_str_14'(value : FLOAT)  { super.$$link(56, value) } 
set 'clip_str_14'(value : FLOAT)  { super.$$link(57, value) } 
set 'lora_name_15'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(58, value) } 
set 'lora_wt_15'(value : FLOAT)  { super.$$link(59, value) } 
set 'model_str_15'(value : FLOAT)  { super.$$link(60, value) } 
set 'clip_str_15'(value : FLOAT)  { super.$$link(61, value) } 
set 'lora_name_16'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(62, value) } 
set 'lora_wt_16'(value : FLOAT)  { super.$$link(63, value) } 
set 'model_str_16'(value : FLOAT)  { super.$$link(64, value) } 
set 'clip_str_16'(value : FLOAT)  { super.$$link(65, value) } 
set 'lora_name_17'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(66, value) } 
set 'lora_wt_17'(value : FLOAT)  { super.$$link(67, value) } 
set 'model_str_17'(value : FLOAT)  { super.$$link(68, value) } 
set 'clip_str_17'(value : FLOAT)  { super.$$link(69, value) } 
set 'lora_name_18'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(70, value) } 
set 'lora_wt_18'(value : FLOAT)  { super.$$link(71, value) } 
set 'model_str_18'(value : FLOAT)  { super.$$link(72, value) } 
set 'clip_str_18'(value : FLOAT)  { super.$$link(73, value) } 
set 'lora_name_19'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(74, value) } 
set 'lora_wt_19'(value : FLOAT)  { super.$$link(75, value) } 
set 'model_str_19'(value : FLOAT)  { super.$$link(76, value) } 
set 'clip_str_19'(value : FLOAT)  { super.$$link(77, value) } 
set 'lora_name_20'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(78, value) } 
set 'lora_wt_20'(value : FLOAT)  { super.$$link(79, value) } 
set 'model_str_20'(value : FLOAT)  { super.$$link(80, value) } 
set 'clip_str_20'(value : FLOAT)  { super.$$link(81, value) } 
set 'lora_name_21'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(82, value) } 
set 'lora_wt_21'(value : FLOAT)  { super.$$link(83, value) } 
set 'model_str_21'(value : FLOAT)  { super.$$link(84, value) } 
set 'clip_str_21'(value : FLOAT)  { super.$$link(85, value) } 
set 'lora_name_22'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(86, value) } 
set 'lora_wt_22'(value : FLOAT)  { super.$$link(87, value) } 
set 'model_str_22'(value : FLOAT)  { super.$$link(88, value) } 
set 'clip_str_22'(value : FLOAT)  { super.$$link(89, value) } 
set 'lora_name_23'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(90, value) } 
set 'lora_wt_23'(value : FLOAT)  { super.$$link(91, value) } 
set 'model_str_23'(value : FLOAT)  { super.$$link(92, value) } 
set 'clip_str_23'(value : FLOAT)  { super.$$link(93, value) } 
set 'lora_name_24'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(94, value) } 
set 'lora_wt_24'(value : FLOAT)  { super.$$link(95, value) } 
set 'model_str_24'(value : FLOAT)  { super.$$link(96, value) } 
set 'clip_str_24'(value : FLOAT)  { super.$$link(97, value) } 
set 'lora_name_25'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(98, value) } 
set 'lora_wt_25'(value : FLOAT)  { super.$$link(99, value) } 
set 'model_str_25'(value : FLOAT)  { super.$$link(100, value) } 
set 'clip_str_25'(value : FLOAT)  { super.$$link(101, value) } 
set 'lora_name_26'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(102, value) } 
set 'lora_wt_26'(value : FLOAT)  { super.$$link(103, value) } 
set 'model_str_26'(value : FLOAT)  { super.$$link(104, value) } 
set 'clip_str_26'(value : FLOAT)  { super.$$link(105, value) } 
set 'lora_name_27'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(106, value) } 
set 'lora_wt_27'(value : FLOAT)  { super.$$link(107, value) } 
set 'model_str_27'(value : FLOAT)  { super.$$link(108, value) } 
set 'clip_str_27'(value : FLOAT)  { super.$$link(109, value) } 
set 'lora_name_28'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(110, value) } 
set 'lora_wt_28'(value : FLOAT)  { super.$$link(111, value) } 
set 'model_str_28'(value : FLOAT)  { super.$$link(112, value) } 
set 'clip_str_28'(value : FLOAT)  { super.$$link(113, value) } 
set 'lora_name_29'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(114, value) } 
set 'lora_wt_29'(value : FLOAT)  { super.$$link(115, value) } 
set 'model_str_29'(value : FLOAT)  { super.$$link(116, value) } 
set 'clip_str_29'(value : FLOAT)  { super.$$link(117, value) } 
set 'lora_name_30'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(118, value) } 
set 'lora_wt_30'(value : FLOAT)  { super.$$link(119, value) } 
set 'model_str_30'(value : FLOAT)  { super.$$link(120, value) } 
set 'clip_str_30'(value : FLOAT)  { super.$$link(121, value) } 
set 'lora_name_31'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(122, value) } 
set 'lora_wt_31'(value : FLOAT)  { super.$$link(123, value) } 
set 'model_str_31'(value : FLOAT)  { super.$$link(124, value) } 
set 'clip_str_31'(value : FLOAT)  { super.$$link(125, value) } 
set 'lora_name_32'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(126, value) } 
set 'lora_wt_32'(value : FLOAT)  { super.$$link(127, value) } 
set 'model_str_32'(value : FLOAT)  { super.$$link(128, value) } 
set 'clip_str_32'(value : FLOAT)  { super.$$link(129, value) } 
set 'lora_name_33'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(130, value) } 
set 'lora_wt_33'(value : FLOAT)  { super.$$link(131, value) } 
set 'model_str_33'(value : FLOAT)  { super.$$link(132, value) } 
set 'clip_str_33'(value : FLOAT)  { super.$$link(133, value) } 
set 'lora_name_34'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(134, value) } 
set 'lora_wt_34'(value : FLOAT)  { super.$$link(135, value) } 
set 'model_str_34'(value : FLOAT)  { super.$$link(136, value) } 
set 'clip_str_34'(value : FLOAT)  { super.$$link(137, value) } 
set 'lora_name_35'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(138, value) } 
set 'lora_wt_35'(value : FLOAT)  { super.$$link(139, value) } 
set 'model_str_35'(value : FLOAT)  { super.$$link(140, value) } 
set 'clip_str_35'(value : FLOAT)  { super.$$link(141, value) } 
set 'lora_name_36'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(142, value) } 
set 'lora_wt_36'(value : FLOAT)  { super.$$link(143, value) } 
set 'model_str_36'(value : FLOAT)  { super.$$link(144, value) } 
set 'clip_str_36'(value : FLOAT)  { super.$$link(145, value) } 
set 'lora_name_37'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(146, value) } 
set 'lora_wt_37'(value : FLOAT)  { super.$$link(147, value) } 
set 'model_str_37'(value : FLOAT)  { super.$$link(148, value) } 
set 'clip_str_37'(value : FLOAT)  { super.$$link(149, value) } 
set 'lora_name_38'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(150, value) } 
set 'lora_wt_38'(value : FLOAT)  { super.$$link(151, value) } 
set 'model_str_38'(value : FLOAT)  { super.$$link(152, value) } 
set 'clip_str_38'(value : FLOAT)  { super.$$link(153, value) } 
set 'lora_name_39'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(154, value) } 
set 'lora_wt_39'(value : FLOAT)  { super.$$link(155, value) } 
set 'model_str_39'(value : FLOAT)  { super.$$link(156, value) } 
set 'clip_str_39'(value : FLOAT)  { super.$$link(157, value) } 
set 'lora_name_40'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(158, value) } 
set 'lora_wt_40'(value : FLOAT)  { super.$$link(159, value) } 
set 'model_str_40'(value : FLOAT)  { super.$$link(160, value) } 
set 'clip_str_40'(value : FLOAT)  { super.$$link(161, value) } 
set 'lora_name_41'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(162, value) } 
set 'lora_wt_41'(value : FLOAT)  { super.$$link(163, value) } 
set 'model_str_41'(value : FLOAT)  { super.$$link(164, value) } 
set 'clip_str_41'(value : FLOAT)  { super.$$link(165, value) } 
set 'lora_name_42'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(166, value) } 
set 'lora_wt_42'(value : FLOAT)  { super.$$link(167, value) } 
set 'model_str_42'(value : FLOAT)  { super.$$link(168, value) } 
set 'clip_str_42'(value : FLOAT)  { super.$$link(169, value) } 
set 'lora_name_43'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(170, value) } 
set 'lora_wt_43'(value : FLOAT)  { super.$$link(171, value) } 
set 'model_str_43'(value : FLOAT)  { super.$$link(172, value) } 
set 'clip_str_43'(value : FLOAT)  { super.$$link(173, value) } 
set 'lora_name_44'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(174, value) } 
set 'lora_wt_44'(value : FLOAT)  { super.$$link(175, value) } 
set 'model_str_44'(value : FLOAT)  { super.$$link(176, value) } 
set 'clip_str_44'(value : FLOAT)  { super.$$link(177, value) } 
set 'lora_name_45'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(178, value) } 
set 'lora_wt_45'(value : FLOAT)  { super.$$link(179, value) } 
set 'model_str_45'(value : FLOAT)  { super.$$link(180, value) } 
set 'clip_str_45'(value : FLOAT)  { super.$$link(181, value) } 
set 'lora_name_46'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(182, value) } 
set 'lora_wt_46'(value : FLOAT)  { super.$$link(183, value) } 
set 'model_str_46'(value : FLOAT)  { super.$$link(184, value) } 
set 'clip_str_46'(value : FLOAT)  { super.$$link(185, value) } 
set 'lora_name_47'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(186, value) } 
set 'lora_wt_47'(value : FLOAT)  { super.$$link(187, value) } 
set 'model_str_47'(value : FLOAT)  { super.$$link(188, value) } 
set 'clip_str_47'(value : FLOAT)  { super.$$link(189, value) } 
set 'lora_name_48'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(190, value) } 
set 'lora_wt_48'(value : FLOAT)  { super.$$link(191, value) } 
set 'model_str_48'(value : FLOAT)  { super.$$link(192, value) } 
set 'clip_str_48'(value : FLOAT)  { super.$$link(193, value) } 
set 'lora_name_49'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(194, value) } 
set 'lora_wt_49'(value : FLOAT)  { super.$$link(195, value) } 
set 'model_str_49'(value : FLOAT)  { super.$$link(196, value) } 
set 'clip_str_49'(value : FLOAT)  { super.$$link(197, value) } 
set 'lora_stack'(value : LORA_STACK)  { super.$$link(198, value) } 

        //Getters
        get 'LORA_STACK'() : LORA_STACK { return [this, 'LORA_STACK', 0]  as unknown as LORA_STACK; }

        constructor(opts:{
            'input_mode': 'simple'|'advanced','lora_count': INT,'lora_name_1': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_1': FLOAT,'model_str_1': FLOAT,'clip_str_1': FLOAT,'lora_name_2': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_2': FLOAT,'model_str_2': FLOAT,'clip_str_2': FLOAT,'lora_name_3': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_3': FLOAT,'model_str_3': FLOAT,'clip_str_3': FLOAT,'lora_name_4': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_4': FLOAT,'model_str_4': FLOAT,'clip_str_4': FLOAT,'lora_name_5': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_5': FLOAT,'model_str_5': FLOAT,'clip_str_5': FLOAT,'lora_name_6': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_6': FLOAT,'model_str_6': FLOAT,'clip_str_6': FLOAT,'lora_name_7': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_7': FLOAT,'model_str_7': FLOAT,'clip_str_7': FLOAT,'lora_name_8': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_8': FLOAT,'model_str_8': FLOAT,'clip_str_8': FLOAT,'lora_name_9': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_9': FLOAT,'model_str_9': FLOAT,'clip_str_9': FLOAT,'lora_name_10': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_10': FLOAT,'model_str_10': FLOAT,'clip_str_10': FLOAT,'lora_name_11': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_11': FLOAT,'model_str_11': FLOAT,'clip_str_11': FLOAT,'lora_name_12': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_12': FLOAT,'model_str_12': FLOAT,'clip_str_12': FLOAT,'lora_name_13': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_13': FLOAT,'model_str_13': FLOAT,'clip_str_13': FLOAT,'lora_name_14': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_14': FLOAT,'model_str_14': FLOAT,'clip_str_14': FLOAT,'lora_name_15': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_15': FLOAT,'model_str_15': FLOAT,'clip_str_15': FLOAT,'lora_name_16': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_16': FLOAT,'model_str_16': FLOAT,'clip_str_16': FLOAT,'lora_name_17': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_17': FLOAT,'model_str_17': FLOAT,'clip_str_17': FLOAT,'lora_name_18': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_18': FLOAT,'model_str_18': FLOAT,'clip_str_18': FLOAT,'lora_name_19': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_19': FLOAT,'model_str_19': FLOAT,'clip_str_19': FLOAT,'lora_name_20': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_20': FLOAT,'model_str_20': FLOAT,'clip_str_20': FLOAT,'lora_name_21': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_21': FLOAT,'model_str_21': FLOAT,'clip_str_21': FLOAT,'lora_name_22': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_22': FLOAT,'model_str_22': FLOAT,'clip_str_22': FLOAT,'lora_name_23': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_23': FLOAT,'model_str_23': FLOAT,'clip_str_23': FLOAT,'lora_name_24': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_24': FLOAT,'model_str_24': FLOAT,'clip_str_24': FLOAT,'lora_name_25': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_25': FLOAT,'model_str_25': FLOAT,'clip_str_25': FLOAT,'lora_name_26': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_26': FLOAT,'model_str_26': FLOAT,'clip_str_26': FLOAT,'lora_name_27': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_27': FLOAT,'model_str_27': FLOAT,'clip_str_27': FLOAT,'lora_name_28': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_28': FLOAT,'model_str_28': FLOAT,'clip_str_28': FLOAT,'lora_name_29': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_29': FLOAT,'model_str_29': FLOAT,'clip_str_29': FLOAT,'lora_name_30': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_30': FLOAT,'model_str_30': FLOAT,'clip_str_30': FLOAT,'lora_name_31': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_31': FLOAT,'model_str_31': FLOAT,'clip_str_31': FLOAT,'lora_name_32': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_32': FLOAT,'model_str_32': FLOAT,'clip_str_32': FLOAT,'lora_name_33': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_33': FLOAT,'model_str_33': FLOAT,'clip_str_33': FLOAT,'lora_name_34': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_34': FLOAT,'model_str_34': FLOAT,'clip_str_34': FLOAT,'lora_name_35': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_35': FLOAT,'model_str_35': FLOAT,'clip_str_35': FLOAT,'lora_name_36': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_36': FLOAT,'model_str_36': FLOAT,'clip_str_36': FLOAT,'lora_name_37': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_37': FLOAT,'model_str_37': FLOAT,'clip_str_37': FLOAT,'lora_name_38': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_38': FLOAT,'model_str_38': FLOAT,'clip_str_38': FLOAT,'lora_name_39': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_39': FLOAT,'model_str_39': FLOAT,'clip_str_39': FLOAT,'lora_name_40': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_40': FLOAT,'model_str_40': FLOAT,'clip_str_40': FLOAT,'lora_name_41': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_41': FLOAT,'model_str_41': FLOAT,'clip_str_41': FLOAT,'lora_name_42': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_42': FLOAT,'model_str_42': FLOAT,'clip_str_42': FLOAT,'lora_name_43': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_43': FLOAT,'model_str_43': FLOAT,'clip_str_43': FLOAT,'lora_name_44': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_44': FLOAT,'model_str_44': FLOAT,'clip_str_44': FLOAT,'lora_name_45': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_45': FLOAT,'model_str_45': FLOAT,'clip_str_45': FLOAT,'lora_name_46': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_46': FLOAT,'model_str_46': FLOAT,'clip_str_46': FLOAT,'lora_name_47': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_47': FLOAT,'model_str_47': FLOAT,'clip_str_47': FLOAT,'lora_name_48': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_48': FLOAT,'model_str_48': FLOAT,'clip_str_48': FLOAT,'lora_name_49': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','lora_wt_49': FLOAT,'model_str_49': FLOAT,'clip_str_49': FLOAT,'lora_stack'?: LORA_STACK
        }){
            super(ctx);

            this['input_mode'] = opts['input_mode'];
this['lora_count'] = opts['lora_count'];
this['lora_name_1'] = opts['lora_name_1'];
this['lora_wt_1'] = opts['lora_wt_1'];
this['model_str_1'] = opts['model_str_1'];
this['clip_str_1'] = opts['clip_str_1'];
this['lora_name_2'] = opts['lora_name_2'];
this['lora_wt_2'] = opts['lora_wt_2'];
this['model_str_2'] = opts['model_str_2'];
this['clip_str_2'] = opts['clip_str_2'];
this['lora_name_3'] = opts['lora_name_3'];
this['lora_wt_3'] = opts['lora_wt_3'];
this['model_str_3'] = opts['model_str_3'];
this['clip_str_3'] = opts['clip_str_3'];
this['lora_name_4'] = opts['lora_name_4'];
this['lora_wt_4'] = opts['lora_wt_4'];
this['model_str_4'] = opts['model_str_4'];
this['clip_str_4'] = opts['clip_str_4'];
this['lora_name_5'] = opts['lora_name_5'];
this['lora_wt_5'] = opts['lora_wt_5'];
this['model_str_5'] = opts['model_str_5'];
this['clip_str_5'] = opts['clip_str_5'];
this['lora_name_6'] = opts['lora_name_6'];
this['lora_wt_6'] = opts['lora_wt_6'];
this['model_str_6'] = opts['model_str_6'];
this['clip_str_6'] = opts['clip_str_6'];
this['lora_name_7'] = opts['lora_name_7'];
this['lora_wt_7'] = opts['lora_wt_7'];
this['model_str_7'] = opts['model_str_7'];
this['clip_str_7'] = opts['clip_str_7'];
this['lora_name_8'] = opts['lora_name_8'];
this['lora_wt_8'] = opts['lora_wt_8'];
this['model_str_8'] = opts['model_str_8'];
this['clip_str_8'] = opts['clip_str_8'];
this['lora_name_9'] = opts['lora_name_9'];
this['lora_wt_9'] = opts['lora_wt_9'];
this['model_str_9'] = opts['model_str_9'];
this['clip_str_9'] = opts['clip_str_9'];
this['lora_name_10'] = opts['lora_name_10'];
this['lora_wt_10'] = opts['lora_wt_10'];
this['model_str_10'] = opts['model_str_10'];
this['clip_str_10'] = opts['clip_str_10'];
this['lora_name_11'] = opts['lora_name_11'];
this['lora_wt_11'] = opts['lora_wt_11'];
this['model_str_11'] = opts['model_str_11'];
this['clip_str_11'] = opts['clip_str_11'];
this['lora_name_12'] = opts['lora_name_12'];
this['lora_wt_12'] = opts['lora_wt_12'];
this['model_str_12'] = opts['model_str_12'];
this['clip_str_12'] = opts['clip_str_12'];
this['lora_name_13'] = opts['lora_name_13'];
this['lora_wt_13'] = opts['lora_wt_13'];
this['model_str_13'] = opts['model_str_13'];
this['clip_str_13'] = opts['clip_str_13'];
this['lora_name_14'] = opts['lora_name_14'];
this['lora_wt_14'] = opts['lora_wt_14'];
this['model_str_14'] = opts['model_str_14'];
this['clip_str_14'] = opts['clip_str_14'];
this['lora_name_15'] = opts['lora_name_15'];
this['lora_wt_15'] = opts['lora_wt_15'];
this['model_str_15'] = opts['model_str_15'];
this['clip_str_15'] = opts['clip_str_15'];
this['lora_name_16'] = opts['lora_name_16'];
this['lora_wt_16'] = opts['lora_wt_16'];
this['model_str_16'] = opts['model_str_16'];
this['clip_str_16'] = opts['clip_str_16'];
this['lora_name_17'] = opts['lora_name_17'];
this['lora_wt_17'] = opts['lora_wt_17'];
this['model_str_17'] = opts['model_str_17'];
this['clip_str_17'] = opts['clip_str_17'];
this['lora_name_18'] = opts['lora_name_18'];
this['lora_wt_18'] = opts['lora_wt_18'];
this['model_str_18'] = opts['model_str_18'];
this['clip_str_18'] = opts['clip_str_18'];
this['lora_name_19'] = opts['lora_name_19'];
this['lora_wt_19'] = opts['lora_wt_19'];
this['model_str_19'] = opts['model_str_19'];
this['clip_str_19'] = opts['clip_str_19'];
this['lora_name_20'] = opts['lora_name_20'];
this['lora_wt_20'] = opts['lora_wt_20'];
this['model_str_20'] = opts['model_str_20'];
this['clip_str_20'] = opts['clip_str_20'];
this['lora_name_21'] = opts['lora_name_21'];
this['lora_wt_21'] = opts['lora_wt_21'];
this['model_str_21'] = opts['model_str_21'];
this['clip_str_21'] = opts['clip_str_21'];
this['lora_name_22'] = opts['lora_name_22'];
this['lora_wt_22'] = opts['lora_wt_22'];
this['model_str_22'] = opts['model_str_22'];
this['clip_str_22'] = opts['clip_str_22'];
this['lora_name_23'] = opts['lora_name_23'];
this['lora_wt_23'] = opts['lora_wt_23'];
this['model_str_23'] = opts['model_str_23'];
this['clip_str_23'] = opts['clip_str_23'];
this['lora_name_24'] = opts['lora_name_24'];
this['lora_wt_24'] = opts['lora_wt_24'];
this['model_str_24'] = opts['model_str_24'];
this['clip_str_24'] = opts['clip_str_24'];
this['lora_name_25'] = opts['lora_name_25'];
this['lora_wt_25'] = opts['lora_wt_25'];
this['model_str_25'] = opts['model_str_25'];
this['clip_str_25'] = opts['clip_str_25'];
this['lora_name_26'] = opts['lora_name_26'];
this['lora_wt_26'] = opts['lora_wt_26'];
this['model_str_26'] = opts['model_str_26'];
this['clip_str_26'] = opts['clip_str_26'];
this['lora_name_27'] = opts['lora_name_27'];
this['lora_wt_27'] = opts['lora_wt_27'];
this['model_str_27'] = opts['model_str_27'];
this['clip_str_27'] = opts['clip_str_27'];
this['lora_name_28'] = opts['lora_name_28'];
this['lora_wt_28'] = opts['lora_wt_28'];
this['model_str_28'] = opts['model_str_28'];
this['clip_str_28'] = opts['clip_str_28'];
this['lora_name_29'] = opts['lora_name_29'];
this['lora_wt_29'] = opts['lora_wt_29'];
this['model_str_29'] = opts['model_str_29'];
this['clip_str_29'] = opts['clip_str_29'];
this['lora_name_30'] = opts['lora_name_30'];
this['lora_wt_30'] = opts['lora_wt_30'];
this['model_str_30'] = opts['model_str_30'];
this['clip_str_30'] = opts['clip_str_30'];
this['lora_name_31'] = opts['lora_name_31'];
this['lora_wt_31'] = opts['lora_wt_31'];
this['model_str_31'] = opts['model_str_31'];
this['clip_str_31'] = opts['clip_str_31'];
this['lora_name_32'] = opts['lora_name_32'];
this['lora_wt_32'] = opts['lora_wt_32'];
this['model_str_32'] = opts['model_str_32'];
this['clip_str_32'] = opts['clip_str_32'];
this['lora_name_33'] = opts['lora_name_33'];
this['lora_wt_33'] = opts['lora_wt_33'];
this['model_str_33'] = opts['model_str_33'];
this['clip_str_33'] = opts['clip_str_33'];
this['lora_name_34'] = opts['lora_name_34'];
this['lora_wt_34'] = opts['lora_wt_34'];
this['model_str_34'] = opts['model_str_34'];
this['clip_str_34'] = opts['clip_str_34'];
this['lora_name_35'] = opts['lora_name_35'];
this['lora_wt_35'] = opts['lora_wt_35'];
this['model_str_35'] = opts['model_str_35'];
this['clip_str_35'] = opts['clip_str_35'];
this['lora_name_36'] = opts['lora_name_36'];
this['lora_wt_36'] = opts['lora_wt_36'];
this['model_str_36'] = opts['model_str_36'];
this['clip_str_36'] = opts['clip_str_36'];
this['lora_name_37'] = opts['lora_name_37'];
this['lora_wt_37'] = opts['lora_wt_37'];
this['model_str_37'] = opts['model_str_37'];
this['clip_str_37'] = opts['clip_str_37'];
this['lora_name_38'] = opts['lora_name_38'];
this['lora_wt_38'] = opts['lora_wt_38'];
this['model_str_38'] = opts['model_str_38'];
this['clip_str_38'] = opts['clip_str_38'];
this['lora_name_39'] = opts['lora_name_39'];
this['lora_wt_39'] = opts['lora_wt_39'];
this['model_str_39'] = opts['model_str_39'];
this['clip_str_39'] = opts['clip_str_39'];
this['lora_name_40'] = opts['lora_name_40'];
this['lora_wt_40'] = opts['lora_wt_40'];
this['model_str_40'] = opts['model_str_40'];
this['clip_str_40'] = opts['clip_str_40'];
this['lora_name_41'] = opts['lora_name_41'];
this['lora_wt_41'] = opts['lora_wt_41'];
this['model_str_41'] = opts['model_str_41'];
this['clip_str_41'] = opts['clip_str_41'];
this['lora_name_42'] = opts['lora_name_42'];
this['lora_wt_42'] = opts['lora_wt_42'];
this['model_str_42'] = opts['model_str_42'];
this['clip_str_42'] = opts['clip_str_42'];
this['lora_name_43'] = opts['lora_name_43'];
this['lora_wt_43'] = opts['lora_wt_43'];
this['model_str_43'] = opts['model_str_43'];
this['clip_str_43'] = opts['clip_str_43'];
this['lora_name_44'] = opts['lora_name_44'];
this['lora_wt_44'] = opts['lora_wt_44'];
this['model_str_44'] = opts['model_str_44'];
this['clip_str_44'] = opts['clip_str_44'];
this['lora_name_45'] = opts['lora_name_45'];
this['lora_wt_45'] = opts['lora_wt_45'];
this['model_str_45'] = opts['model_str_45'];
this['clip_str_45'] = opts['clip_str_45'];
this['lora_name_46'] = opts['lora_name_46'];
this['lora_wt_46'] = opts['lora_wt_46'];
this['model_str_46'] = opts['model_str_46'];
this['clip_str_46'] = opts['clip_str_46'];
this['lora_name_47'] = opts['lora_name_47'];
this['lora_wt_47'] = opts['lora_wt_47'];
this['model_str_47'] = opts['model_str_47'];
this['clip_str_47'] = opts['clip_str_47'];
this['lora_name_48'] = opts['lora_name_48'];
this['lora_wt_48'] = opts['lora_wt_48'];
this['model_str_48'] = opts['model_str_48'];
this['clip_str_48'] = opts['clip_str_48'];
this['lora_name_49'] = opts['lora_name_49'];
this['lora_wt_49'] = opts['lora_wt_49'];
this['model_str_49'] = opts['model_str_49'];
this['clip_str_49'] = opts['clip_str_49']
            if(opts['lora_stack']!==undefined) this['lora_stack'] = opts['lora_stack']

        }

        static defaults = {
            'lora_count':  3,
'lora_wt_1':  1,
'model_str_1':  1,
'clip_str_1':  1,
'lora_wt_2':  1,
'model_str_2':  1,
'clip_str_2':  1,
'lora_wt_3':  1,
'model_str_3':  1,
'clip_str_3':  1,
'lora_wt_4':  1,
'model_str_4':  1,
'clip_str_4':  1,
'lora_wt_5':  1,
'model_str_5':  1,
'clip_str_5':  1,
'lora_wt_6':  1,
'model_str_6':  1,
'clip_str_6':  1,
'lora_wt_7':  1,
'model_str_7':  1,
'clip_str_7':  1,
'lora_wt_8':  1,
'model_str_8':  1,
'clip_str_8':  1,
'lora_wt_9':  1,
'model_str_9':  1,
'clip_str_9':  1,
'lora_wt_10':  1,
'model_str_10':  1,
'clip_str_10':  1,
'lora_wt_11':  1,
'model_str_11':  1,
'clip_str_11':  1,
'lora_wt_12':  1,
'model_str_12':  1,
'clip_str_12':  1,
'lora_wt_13':  1,
'model_str_13':  1,
'clip_str_13':  1,
'lora_wt_14':  1,
'model_str_14':  1,
'clip_str_14':  1,
'lora_wt_15':  1,
'model_str_15':  1,
'clip_str_15':  1,
'lora_wt_16':  1,
'model_str_16':  1,
'clip_str_16':  1,
'lora_wt_17':  1,
'model_str_17':  1,
'clip_str_17':  1,
'lora_wt_18':  1,
'model_str_18':  1,
'clip_str_18':  1,
'lora_wt_19':  1,
'model_str_19':  1,
'clip_str_19':  1,
'lora_wt_20':  1,
'model_str_20':  1,
'clip_str_20':  1,
'lora_wt_21':  1,
'model_str_21':  1,
'clip_str_21':  1,
'lora_wt_22':  1,
'model_str_22':  1,
'clip_str_22':  1,
'lora_wt_23':  1,
'model_str_23':  1,
'clip_str_23':  1,
'lora_wt_24':  1,
'model_str_24':  1,
'clip_str_24':  1,
'lora_wt_25':  1,
'model_str_25':  1,
'clip_str_25':  1,
'lora_wt_26':  1,
'model_str_26':  1,
'clip_str_26':  1,
'lora_wt_27':  1,
'model_str_27':  1,
'clip_str_27':  1,
'lora_wt_28':  1,
'model_str_28':  1,
'clip_str_28':  1,
'lora_wt_29':  1,
'model_str_29':  1,
'clip_str_29':  1,
'lora_wt_30':  1,
'model_str_30':  1,
'clip_str_30':  1,
'lora_wt_31':  1,
'model_str_31':  1,
'clip_str_31':  1,
'lora_wt_32':  1,
'model_str_32':  1,
'clip_str_32':  1,
'lora_wt_33':  1,
'model_str_33':  1,
'clip_str_33':  1,
'lora_wt_34':  1,
'model_str_34':  1,
'clip_str_34':  1,
'lora_wt_35':  1,
'model_str_35':  1,
'clip_str_35':  1,
'lora_wt_36':  1,
'model_str_36':  1,
'clip_str_36':  1,
'lora_wt_37':  1,
'model_str_37':  1,
'clip_str_37':  1,
'lora_wt_38':  1,
'model_str_38':  1,
'clip_str_38':  1,
'lora_wt_39':  1,
'model_str_39':  1,
'clip_str_39':  1,
'lora_wt_40':  1,
'model_str_40':  1,
'clip_str_40':  1,
'lora_wt_41':  1,
'model_str_41':  1,
'clip_str_41':  1,
'lora_wt_42':  1,
'model_str_42':  1,
'clip_str_42':  1,
'lora_wt_43':  1,
'model_str_43':  1,
'clip_str_43':  1,
'lora_wt_44':  1,
'model_str_44':  1,
'clip_str_44':  1,
'lora_wt_45':  1,
'model_str_45':  1,
'clip_str_45':  1,
'lora_wt_46':  1,
'model_str_46':  1,
'clip_str_46':  1,
'lora_wt_47':  1,
'model_str_47':  1,
'clip_str_47':  1,
'lora_wt_48':  1,
'model_str_48':  1,
'clip_str_48':  1,
'lora_wt_49':  1,
'model_str_49':  1,
'clip_str_49':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'Control Net Stacker' : class extends Node{
        //Setters
        set 'control_net'(value : CONTROL_NET)  { super.$$link(0, value) } 
set 'image'(value : IMAGE)  { super.$$link(1, value) } 
set 'strength'(value : FLOAT)  { super.$$link(2, value) } 
set 'start_percent'(value : FLOAT)  { super.$$link(3, value) } 
set 'end_percent'(value : FLOAT)  { super.$$link(4, value) } 
set 'cnet_stack'(value : CONTROL_NET_STACK)  { super.$$link(5, value) } 

        //Getters
        get 'CNET_STACK'() : CONTROL_NET_STACK { return [this, 'CNET_STACK', 0]  as unknown as CONTROL_NET_STACK; }

        constructor(opts:{
            'control_net': CONTROL_NET,'image': IMAGE,'strength': FLOAT,'start_percent': FLOAT,'end_percent': FLOAT,'cnet_stack'?: CONTROL_NET_STACK
        }){
            super(ctx);

            this['control_net'] = opts['control_net'];
this['image'] = opts['image'];
this['strength'] = opts['strength'];
this['start_percent'] = opts['start_percent'];
this['end_percent'] = opts['end_percent']
            if(opts['cnet_stack']!==undefined) this['cnet_stack'] = opts['cnet_stack']

        }

        static defaults = {
            'strength':  1,
'start_percent':  0,
'end_percent':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'Apply ControlNet Stack' : class extends Node{
        //Setters
        set 'positive'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'negative'(value : CONDITIONING)  { super.$$link(1, value) } 
set 'cnet_stack'(value : CONTROL_NET_STACK)  { super.$$link(2, value) } 

        //Getters
        get 'CONDITIONING+'() : CONDITIONING { return [this, 'CONDITIONING+', 0]  as unknown as CONDITIONING; }
get 'CONDITIONING-'() : CONDITIONING { return [this, 'CONDITIONING-', 1]  as unknown as CONDITIONING; }

        constructor(opts:{
            'positive': CONDITIONING,'negative': CONDITIONING,'cnet_stack'?: CONTROL_NET_STACK
        }){
            super(ctx);

            this['positive'] = opts['positive'];
this['negative'] = opts['negative']
            if(opts['cnet_stack']!==undefined) this['cnet_stack'] = opts['cnet_stack']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Unpack SDXL Tuple' : class extends Node{
        //Setters
        set 'sdxl_tuple'(value : SDXL_TUPLE)  { super.$$link(0, value) } 

        //Getters
        get 'BASE_MODEL'() : MODEL { return [this, 'BASE_MODEL', 0]  as unknown as MODEL; }
get 'BASE_CLIP'() : CLIP { return [this, 'BASE_CLIP', 1]  as unknown as CLIP; }
get 'BASE_CONDITIONING+'() : CONDITIONING { return [this, 'BASE_CONDITIONING+', 2]  as unknown as CONDITIONING; }
get 'BASE_CONDITIONING-'() : CONDITIONING { return [this, 'BASE_CONDITIONING-', 3]  as unknown as CONDITIONING; }
get 'REFINER_MODEL'() : MODEL { return [this, 'REFINER_MODEL', 4]  as unknown as MODEL; }
get 'REFINER_CLIP'() : CLIP { return [this, 'REFINER_CLIP', 5]  as unknown as CLIP; }
get 'REFINER_CONDITIONING+'() : CONDITIONING { return [this, 'REFINER_CONDITIONING+', 6]  as unknown as CONDITIONING; }
get 'REFINER_CONDITIONING-'() : CONDITIONING { return [this, 'REFINER_CONDITIONING-', 7]  as unknown as CONDITIONING; }

        constructor(opts:{
            'sdxl_tuple': SDXL_TUPLE
        }){
            super(ctx);

            this['sdxl_tuple'] = opts['sdxl_tuple']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Pack SDXL Tuple' : class extends Node{
        //Setters
        set 'base_model'(value : MODEL)  { super.$$link(0, value) } 
set 'base_clip'(value : CLIP)  { super.$$link(1, value) } 
set 'base_positive'(value : CONDITIONING)  { super.$$link(2, value) } 
set 'base_negative'(value : CONDITIONING)  { super.$$link(3, value) } 
set 'refiner_model'(value : MODEL)  { super.$$link(4, value) } 
set 'refiner_clip'(value : CLIP)  { super.$$link(5, value) } 
set 'refiner_positive'(value : CONDITIONING)  { super.$$link(6, value) } 
set 'refiner_negative'(value : CONDITIONING)  { super.$$link(7, value) } 

        //Getters
        get 'SDXL_TUPLE'() : SDXL_TUPLE { return [this, 'SDXL_TUPLE', 0]  as unknown as SDXL_TUPLE; }

        constructor(opts:{
            'base_model': MODEL,'base_clip': CLIP,'base_positive': CONDITIONING,'base_negative': CONDITIONING,'refiner_model': MODEL,'refiner_clip': CLIP,'refiner_positive': CONDITIONING,'refiner_negative': CONDITIONING
        }){
            super(ctx);

            this['base_model'] = opts['base_model'];
this['base_clip'] = opts['base_clip'];
this['base_positive'] = opts['base_positive'];
this['base_negative'] = opts['base_negative'];
this['refiner_model'] = opts['refiner_model'];
this['refiner_clip'] = opts['refiner_clip'];
this['refiner_positive'] = opts['refiner_positive'];
this['refiner_negative'] = opts['refiner_negative']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'XY Plot' : class extends Node{
        //Setters
        set 'grid_spacing'(value : INT)  { super.$$link(0, value) } 
set 'XY_flip'(value : 'False'|'True')  { super.$$link(1, value) } 
set 'Y_label_orientation'(value : 'Horizontal'|'Vertical')  { super.$$link(2, value) } 
set 'cache_models'(value : 'True'|'False')  { super.$$link(3, value) } 
set 'ksampler_output_image'(value : 'Images'|'Plot')  { super.$$link(4, value) } 
set 'dependencies'(value : DEPENDENCIES)  { super.$$link(5, value) } 
set 'X'(value : XY)  { super.$$link(6, value) } 
set 'Y'(value : XY)  { super.$$link(7, value) } 

        //Getters
        get 'SCRIPT'() : SCRIPT { return [this, 'SCRIPT', 0]  as unknown as SCRIPT; }

        constructor(opts:{
            'grid_spacing': INT,'XY_flip': 'False'|'True','Y_label_orientation': 'Horizontal'|'Vertical','cache_models': 'True'|'False','ksampler_output_image': 'Images'|'Plot','dependencies'?: DEPENDENCIES,'X'?: XY,'Y'?: XY
        }){
            super(ctx);

            this['grid_spacing'] = opts['grid_spacing'];
this['XY_flip'] = opts['XY_flip'];
this['Y_label_orientation'] = opts['Y_label_orientation'];
this['cache_models'] = opts['cache_models'];
this['ksampler_output_image'] = opts['ksampler_output_image']
            if(opts['dependencies']!==undefined) this['dependencies'] = opts['dependencies'];
if(opts['X']!==undefined) this['X'] = opts['X'];
if(opts['Y']!==undefined) this['Y'] = opts['Y']

        }

        static defaults = {
            'grid_spacing':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'XY Input: Seeds++ Batch' : class extends Node{
        //Setters
        set 'batch_count'(value : INT)  { super.$$link(0, value) } 

        //Getters
        get 'X or Y'() : XY { return [this, 'X or Y', 0]  as unknown as XY; }

        constructor(opts:{
            'batch_count': INT
        }){
            super(ctx);

            this['batch_count'] = opts['batch_count']
            

        }

        static defaults = {
            'batch_count':  3
}
},

    /**
     * TODO Docs based on metadata
     */
    'XY Input: Add/Return Noise' : class extends Node{
        //Setters
        set 'XY_type'(value : 'add_noise'|'return_with_leftover_noise')  { super.$$link(0, value) } 

        //Getters
        get 'X or Y'() : XY { return [this, 'X or Y', 0]  as unknown as XY; }

        constructor(opts:{
            'XY_type': 'add_noise'|'return_with_leftover_noise'
        }){
            super(ctx);

            this['XY_type'] = opts['XY_type']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'XY Input: Steps' : class extends Node{
        //Setters
        set 'target_parameter'(value : 'steps'|'start_at_step'|'end_at_step'|'refine_at_step')  { super.$$link(0, value) } 
set 'batch_count'(value : INT)  { super.$$link(1, value) } 
set 'first_step'(value : INT)  { super.$$link(2, value) } 
set 'last_step'(value : INT)  { super.$$link(3, value) } 
set 'first_start_step'(value : INT)  { super.$$link(4, value) } 
set 'last_start_step'(value : INT)  { super.$$link(5, value) } 
set 'first_end_step'(value : INT)  { super.$$link(6, value) } 
set 'last_end_step'(value : INT)  { super.$$link(7, value) } 
set 'first_refine_step'(value : INT)  { super.$$link(8, value) } 
set 'last_refine_step'(value : INT)  { super.$$link(9, value) } 

        //Getters
        get 'X or Y'() : XY { return [this, 'X or Y', 0]  as unknown as XY; }

        constructor(opts:{
            'target_parameter': 'steps'|'start_at_step'|'end_at_step'|'refine_at_step','batch_count': INT,'first_step': INT,'last_step': INT,'first_start_step': INT,'last_start_step': INT,'first_end_step': INT,'last_end_step': INT,'first_refine_step': INT,'last_refine_step': INT
        }){
            super(ctx);

            this['target_parameter'] = opts['target_parameter'];
this['batch_count'] = opts['batch_count'];
this['first_step'] = opts['first_step'];
this['last_step'] = opts['last_step'];
this['first_start_step'] = opts['first_start_step'];
this['last_start_step'] = opts['last_start_step'];
this['first_end_step'] = opts['first_end_step'];
this['last_end_step'] = opts['last_end_step'];
this['first_refine_step'] = opts['first_refine_step'];
this['last_refine_step'] = opts['last_refine_step']
            

        }

        static defaults = {
            'batch_count':  3,
'first_step':  10,
'last_step':  20,
'first_start_step':  0,
'last_start_step':  10,
'first_end_step':  10,
'last_end_step':  20,
'first_refine_step':  10,
'last_refine_step':  20
}
},

    /**
     * TODO Docs based on metadata
     */
    'XY Input: CFG Scale' : class extends Node{
        //Setters
        set 'batch_count'(value : INT)  { super.$$link(0, value) } 
set 'first_cfg'(value : FLOAT)  { super.$$link(1, value) } 
set 'last_cfg'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'X or Y'() : XY { return [this, 'X or Y', 0]  as unknown as XY; }

        constructor(opts:{
            'batch_count': INT,'first_cfg': FLOAT,'last_cfg': FLOAT
        }){
            super(ctx);

            this['batch_count'] = opts['batch_count'];
this['first_cfg'] = opts['first_cfg'];
this['last_cfg'] = opts['last_cfg']
            

        }

        static defaults = {
            'batch_count':  3,
'first_cfg':  7,
'last_cfg':  9
}
},

    /**
     * TODO Docs based on metadata
     */
    'XY Input: Sampler/Scheduler' : class extends Node{
        //Setters
        set 'target_parameter'(value : 'sampler'|'scheduler'|'sampler & scheduler')  { super.$$link(0, value) } 
set 'input_count'(value : INT)  { super.$$link(1, value) } 
set 'sampler_1'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(2, value) } 
set 'scheduler_1'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(3, value) } 
set 'sampler_2'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(4, value) } 
set 'scheduler_2'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(5, value) } 
set 'sampler_3'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(6, value) } 
set 'scheduler_3'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(7, value) } 
set 'sampler_4'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(8, value) } 
set 'scheduler_4'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(9, value) } 
set 'sampler_5'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(10, value) } 
set 'scheduler_5'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(11, value) } 
set 'sampler_6'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(12, value) } 
set 'scheduler_6'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(13, value) } 
set 'sampler_7'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(14, value) } 
set 'scheduler_7'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(15, value) } 
set 'sampler_8'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(16, value) } 
set 'scheduler_8'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(17, value) } 
set 'sampler_9'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(18, value) } 
set 'scheduler_9'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(19, value) } 
set 'sampler_10'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(20, value) } 
set 'scheduler_10'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(21, value) } 
set 'sampler_11'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(22, value) } 
set 'scheduler_11'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(23, value) } 
set 'sampler_12'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(24, value) } 
set 'scheduler_12'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(25, value) } 
set 'sampler_13'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(26, value) } 
set 'scheduler_13'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(27, value) } 
set 'sampler_14'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(28, value) } 
set 'scheduler_14'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(29, value) } 
set 'sampler_15'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(30, value) } 
set 'scheduler_15'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(31, value) } 
set 'sampler_16'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(32, value) } 
set 'scheduler_16'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(33, value) } 
set 'sampler_17'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(34, value) } 
set 'scheduler_17'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(35, value) } 
set 'sampler_18'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(36, value) } 
set 'scheduler_18'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(37, value) } 
set 'sampler_19'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(38, value) } 
set 'scheduler_19'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(39, value) } 
set 'sampler_20'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(40, value) } 
set 'scheduler_20'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(41, value) } 
set 'sampler_21'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(42, value) } 
set 'scheduler_21'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(43, value) } 
set 'sampler_22'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(44, value) } 
set 'scheduler_22'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(45, value) } 
set 'sampler_23'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(46, value) } 
set 'scheduler_23'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(47, value) } 
set 'sampler_24'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(48, value) } 
set 'scheduler_24'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(49, value) } 
set 'sampler_25'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(50, value) } 
set 'scheduler_25'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(51, value) } 
set 'sampler_26'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(52, value) } 
set 'scheduler_26'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(53, value) } 
set 'sampler_27'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(54, value) } 
set 'scheduler_27'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(55, value) } 
set 'sampler_28'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(56, value) } 
set 'scheduler_28'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(57, value) } 
set 'sampler_29'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(58, value) } 
set 'scheduler_29'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(59, value) } 
set 'sampler_30'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(60, value) } 
set 'scheduler_30'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(61, value) } 
set 'sampler_31'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(62, value) } 
set 'scheduler_31'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(63, value) } 
set 'sampler_32'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(64, value) } 
set 'scheduler_32'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(65, value) } 
set 'sampler_33'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(66, value) } 
set 'scheduler_33'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(67, value) } 
set 'sampler_34'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(68, value) } 
set 'scheduler_34'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(69, value) } 
set 'sampler_35'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(70, value) } 
set 'scheduler_35'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(71, value) } 
set 'sampler_36'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(72, value) } 
set 'scheduler_36'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(73, value) } 
set 'sampler_37'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(74, value) } 
set 'scheduler_37'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(75, value) } 
set 'sampler_38'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(76, value) } 
set 'scheduler_38'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(77, value) } 
set 'sampler_39'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(78, value) } 
set 'scheduler_39'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(79, value) } 
set 'sampler_40'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(80, value) } 
set 'scheduler_40'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(81, value) } 
set 'sampler_41'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(82, value) } 
set 'scheduler_41'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(83, value) } 
set 'sampler_42'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(84, value) } 
set 'scheduler_42'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(85, value) } 
set 'sampler_43'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(86, value) } 
set 'scheduler_43'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(87, value) } 
set 'sampler_44'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(88, value) } 
set 'scheduler_44'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(89, value) } 
set 'sampler_45'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(90, value) } 
set 'scheduler_45'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(91, value) } 
set 'sampler_46'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(92, value) } 
set 'scheduler_46'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(93, value) } 
set 'sampler_47'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(94, value) } 
set 'scheduler_47'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(95, value) } 
set 'sampler_48'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(96, value) } 
set 'scheduler_48'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(97, value) } 
set 'sampler_49'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(98, value) } 
set 'scheduler_49'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(99, value) } 
set 'sampler_50'(value : 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(100, value) } 
set 'scheduler_50'(value : 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD')  { super.$$link(101, value) } 

        //Getters
        get 'X or Y'() : XY { return [this, 'X or Y', 0]  as unknown as XY; }

        constructor(opts:{
            'target_parameter': 'sampler'|'scheduler'|'sampler & scheduler','input_count': INT,'sampler_1': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_1': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_2': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_2': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_3': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_3': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_4': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_4': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_5': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_5': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_6': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_6': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_7': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_7': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_8': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_8': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_9': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_9': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_10': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_10': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_11': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_11': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_12': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_12': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_13': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_13': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_14': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_14': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_15': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_15': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_16': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_16': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_17': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_17': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_18': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_18': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_19': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_19': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_20': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_20': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_21': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_21': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_22': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_22': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_23': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_23': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_24': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_24': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_25': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_25': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_26': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_26': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_27': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_27': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_28': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_28': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_29': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_29': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_30': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_30': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_31': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_31': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_32': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_32': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_33': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_33': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_34': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_34': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_35': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_35': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_36': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_36': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_37': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_37': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_38': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_38': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_39': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_39': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_40': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_40': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_41': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_41': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_42': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_42': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_43': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_43': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_44': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_44': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_45': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_45': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_46': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_46': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_47': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_47': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_48': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_48': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_49': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_49': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD','sampler_50': 'None'|'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler_50': 'None'|'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform'|'AYS SD1'|'AYS SDXL'|'AYS SVD'
        }){
            super(ctx);

            this['target_parameter'] = opts['target_parameter'];
this['input_count'] = opts['input_count'];
this['sampler_1'] = opts['sampler_1'];
this['scheduler_1'] = opts['scheduler_1'];
this['sampler_2'] = opts['sampler_2'];
this['scheduler_2'] = opts['scheduler_2'];
this['sampler_3'] = opts['sampler_3'];
this['scheduler_3'] = opts['scheduler_3'];
this['sampler_4'] = opts['sampler_4'];
this['scheduler_4'] = opts['scheduler_4'];
this['sampler_5'] = opts['sampler_5'];
this['scheduler_5'] = opts['scheduler_5'];
this['sampler_6'] = opts['sampler_6'];
this['scheduler_6'] = opts['scheduler_6'];
this['sampler_7'] = opts['sampler_7'];
this['scheduler_7'] = opts['scheduler_7'];
this['sampler_8'] = opts['sampler_8'];
this['scheduler_8'] = opts['scheduler_8'];
this['sampler_9'] = opts['sampler_9'];
this['scheduler_9'] = opts['scheduler_9'];
this['sampler_10'] = opts['sampler_10'];
this['scheduler_10'] = opts['scheduler_10'];
this['sampler_11'] = opts['sampler_11'];
this['scheduler_11'] = opts['scheduler_11'];
this['sampler_12'] = opts['sampler_12'];
this['scheduler_12'] = opts['scheduler_12'];
this['sampler_13'] = opts['sampler_13'];
this['scheduler_13'] = opts['scheduler_13'];
this['sampler_14'] = opts['sampler_14'];
this['scheduler_14'] = opts['scheduler_14'];
this['sampler_15'] = opts['sampler_15'];
this['scheduler_15'] = opts['scheduler_15'];
this['sampler_16'] = opts['sampler_16'];
this['scheduler_16'] = opts['scheduler_16'];
this['sampler_17'] = opts['sampler_17'];
this['scheduler_17'] = opts['scheduler_17'];
this['sampler_18'] = opts['sampler_18'];
this['scheduler_18'] = opts['scheduler_18'];
this['sampler_19'] = opts['sampler_19'];
this['scheduler_19'] = opts['scheduler_19'];
this['sampler_20'] = opts['sampler_20'];
this['scheduler_20'] = opts['scheduler_20'];
this['sampler_21'] = opts['sampler_21'];
this['scheduler_21'] = opts['scheduler_21'];
this['sampler_22'] = opts['sampler_22'];
this['scheduler_22'] = opts['scheduler_22'];
this['sampler_23'] = opts['sampler_23'];
this['scheduler_23'] = opts['scheduler_23'];
this['sampler_24'] = opts['sampler_24'];
this['scheduler_24'] = opts['scheduler_24'];
this['sampler_25'] = opts['sampler_25'];
this['scheduler_25'] = opts['scheduler_25'];
this['sampler_26'] = opts['sampler_26'];
this['scheduler_26'] = opts['scheduler_26'];
this['sampler_27'] = opts['sampler_27'];
this['scheduler_27'] = opts['scheduler_27'];
this['sampler_28'] = opts['sampler_28'];
this['scheduler_28'] = opts['scheduler_28'];
this['sampler_29'] = opts['sampler_29'];
this['scheduler_29'] = opts['scheduler_29'];
this['sampler_30'] = opts['sampler_30'];
this['scheduler_30'] = opts['scheduler_30'];
this['sampler_31'] = opts['sampler_31'];
this['scheduler_31'] = opts['scheduler_31'];
this['sampler_32'] = opts['sampler_32'];
this['scheduler_32'] = opts['scheduler_32'];
this['sampler_33'] = opts['sampler_33'];
this['scheduler_33'] = opts['scheduler_33'];
this['sampler_34'] = opts['sampler_34'];
this['scheduler_34'] = opts['scheduler_34'];
this['sampler_35'] = opts['sampler_35'];
this['scheduler_35'] = opts['scheduler_35'];
this['sampler_36'] = opts['sampler_36'];
this['scheduler_36'] = opts['scheduler_36'];
this['sampler_37'] = opts['sampler_37'];
this['scheduler_37'] = opts['scheduler_37'];
this['sampler_38'] = opts['sampler_38'];
this['scheduler_38'] = opts['scheduler_38'];
this['sampler_39'] = opts['sampler_39'];
this['scheduler_39'] = opts['scheduler_39'];
this['sampler_40'] = opts['sampler_40'];
this['scheduler_40'] = opts['scheduler_40'];
this['sampler_41'] = opts['sampler_41'];
this['scheduler_41'] = opts['scheduler_41'];
this['sampler_42'] = opts['sampler_42'];
this['scheduler_42'] = opts['scheduler_42'];
this['sampler_43'] = opts['sampler_43'];
this['scheduler_43'] = opts['scheduler_43'];
this['sampler_44'] = opts['sampler_44'];
this['scheduler_44'] = opts['scheduler_44'];
this['sampler_45'] = opts['sampler_45'];
this['scheduler_45'] = opts['scheduler_45'];
this['sampler_46'] = opts['sampler_46'];
this['scheduler_46'] = opts['scheduler_46'];
this['sampler_47'] = opts['sampler_47'];
this['scheduler_47'] = opts['scheduler_47'];
this['sampler_48'] = opts['sampler_48'];
this['scheduler_48'] = opts['scheduler_48'];
this['sampler_49'] = opts['sampler_49'];
this['scheduler_49'] = opts['scheduler_49'];
this['sampler_50'] = opts['sampler_50'];
this['scheduler_50'] = opts['scheduler_50']
            

        }

        static defaults = {
            'input_count':  3
}
},

    /**
     * TODO Docs based on metadata
     */
    'XY Input: Denoise' : class extends Node{
        //Setters
        set 'batch_count'(value : INT)  { super.$$link(0, value) } 
set 'first_denoise'(value : FLOAT)  { super.$$link(1, value) } 
set 'last_denoise'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'X or Y'() : XY { return [this, 'X or Y', 0]  as unknown as XY; }

        constructor(opts:{
            'batch_count': INT,'first_denoise': FLOAT,'last_denoise': FLOAT
        }){
            super(ctx);

            this['batch_count'] = opts['batch_count'];
this['first_denoise'] = opts['first_denoise'];
this['last_denoise'] = opts['last_denoise']
            

        }

        static defaults = {
            'batch_count':  3,
'first_denoise':  0,
'last_denoise':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'XY Input: VAE' : class extends Node{
        //Setters
        set 'input_mode'(value : 'VAE Names'|'VAE Batch')  { super.$$link(0, value) } 
set 'batch_path'(value : STRING)  { super.$$link(1, value) } 
set 'subdirectories'(value : BOOLEAN)  { super.$$link(2, value) } 
set 'batch_sort'(value : 'ascending'|'descending')  { super.$$link(3, value) } 
set 'batch_max'(value : INT)  { super.$$link(4, value) } 
set 'vae_count'(value : INT)  { super.$$link(5, value) } 
set 'vae_name_1'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(6, value) } 
set 'vae_name_2'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(7, value) } 
set 'vae_name_3'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(8, value) } 
set 'vae_name_4'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(9, value) } 
set 'vae_name_5'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(10, value) } 
set 'vae_name_6'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(11, value) } 
set 'vae_name_7'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(12, value) } 
set 'vae_name_8'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(13, value) } 
set 'vae_name_9'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(14, value) } 
set 'vae_name_10'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(15, value) } 
set 'vae_name_11'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(16, value) } 
set 'vae_name_12'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(17, value) } 
set 'vae_name_13'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(18, value) } 
set 'vae_name_14'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(19, value) } 
set 'vae_name_15'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(20, value) } 
set 'vae_name_16'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(21, value) } 
set 'vae_name_17'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(22, value) } 
set 'vae_name_18'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(23, value) } 
set 'vae_name_19'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(24, value) } 
set 'vae_name_20'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(25, value) } 
set 'vae_name_21'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(26, value) } 
set 'vae_name_22'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(27, value) } 
set 'vae_name_23'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(28, value) } 
set 'vae_name_24'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(29, value) } 
set 'vae_name_25'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(30, value) } 
set 'vae_name_26'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(31, value) } 
set 'vae_name_27'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(32, value) } 
set 'vae_name_28'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(33, value) } 
set 'vae_name_29'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(34, value) } 
set 'vae_name_30'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(35, value) } 
set 'vae_name_31'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(36, value) } 
set 'vae_name_32'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(37, value) } 
set 'vae_name_33'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(38, value) } 
set 'vae_name_34'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(39, value) } 
set 'vae_name_35'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(40, value) } 
set 'vae_name_36'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(41, value) } 
set 'vae_name_37'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(42, value) } 
set 'vae_name_38'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(43, value) } 
set 'vae_name_39'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(44, value) } 
set 'vae_name_40'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(45, value) } 
set 'vae_name_41'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(46, value) } 
set 'vae_name_42'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(47, value) } 
set 'vae_name_43'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(48, value) } 
set 'vae_name_44'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(49, value) } 
set 'vae_name_45'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(50, value) } 
set 'vae_name_46'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(51, value) } 
set 'vae_name_47'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(52, value) } 
set 'vae_name_48'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(53, value) } 
set 'vae_name_49'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(54, value) } 
set 'vae_name_50'(value : 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(55, value) } 

        //Getters
        get 'X or Y'() : XY { return [this, 'X or Y', 0]  as unknown as XY; }

        constructor(opts:{
            'input_mode': 'VAE Names'|'VAE Batch','batch_path': STRING,'subdirectories': BOOLEAN,'batch_sort': 'ascending'|'descending','batch_max': INT,'vae_count': INT,'vae_name_1': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_2': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_3': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_4': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_5': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_6': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_7': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_8': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_9': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_10': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_11': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_12': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_13': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_14': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_15': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_16': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_17': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_18': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_19': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_20': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_21': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_22': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_23': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_24': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_25': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_26': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_27': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_28': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_29': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_30': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_31': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_32': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_33': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_34': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_35': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_36': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_37': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_38': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_39': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_40': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_41': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_42': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_43': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_44': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_45': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_46': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_47': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_48': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_49': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','vae_name_50': 'None'|'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'
        }){
            super(ctx);

            this['input_mode'] = opts['input_mode'];
this['batch_path'] = opts['batch_path'];
this['subdirectories'] = opts['subdirectories'];
this['batch_sort'] = opts['batch_sort'];
this['batch_max'] = opts['batch_max'];
this['vae_count'] = opts['vae_count'];
this['vae_name_1'] = opts['vae_name_1'];
this['vae_name_2'] = opts['vae_name_2'];
this['vae_name_3'] = opts['vae_name_3'];
this['vae_name_4'] = opts['vae_name_4'];
this['vae_name_5'] = opts['vae_name_5'];
this['vae_name_6'] = opts['vae_name_6'];
this['vae_name_7'] = opts['vae_name_7'];
this['vae_name_8'] = opts['vae_name_8'];
this['vae_name_9'] = opts['vae_name_9'];
this['vae_name_10'] = opts['vae_name_10'];
this['vae_name_11'] = opts['vae_name_11'];
this['vae_name_12'] = opts['vae_name_12'];
this['vae_name_13'] = opts['vae_name_13'];
this['vae_name_14'] = opts['vae_name_14'];
this['vae_name_15'] = opts['vae_name_15'];
this['vae_name_16'] = opts['vae_name_16'];
this['vae_name_17'] = opts['vae_name_17'];
this['vae_name_18'] = opts['vae_name_18'];
this['vae_name_19'] = opts['vae_name_19'];
this['vae_name_20'] = opts['vae_name_20'];
this['vae_name_21'] = opts['vae_name_21'];
this['vae_name_22'] = opts['vae_name_22'];
this['vae_name_23'] = opts['vae_name_23'];
this['vae_name_24'] = opts['vae_name_24'];
this['vae_name_25'] = opts['vae_name_25'];
this['vae_name_26'] = opts['vae_name_26'];
this['vae_name_27'] = opts['vae_name_27'];
this['vae_name_28'] = opts['vae_name_28'];
this['vae_name_29'] = opts['vae_name_29'];
this['vae_name_30'] = opts['vae_name_30'];
this['vae_name_31'] = opts['vae_name_31'];
this['vae_name_32'] = opts['vae_name_32'];
this['vae_name_33'] = opts['vae_name_33'];
this['vae_name_34'] = opts['vae_name_34'];
this['vae_name_35'] = opts['vae_name_35'];
this['vae_name_36'] = opts['vae_name_36'];
this['vae_name_37'] = opts['vae_name_37'];
this['vae_name_38'] = opts['vae_name_38'];
this['vae_name_39'] = opts['vae_name_39'];
this['vae_name_40'] = opts['vae_name_40'];
this['vae_name_41'] = opts['vae_name_41'];
this['vae_name_42'] = opts['vae_name_42'];
this['vae_name_43'] = opts['vae_name_43'];
this['vae_name_44'] = opts['vae_name_44'];
this['vae_name_45'] = opts['vae_name_45'];
this['vae_name_46'] = opts['vae_name_46'];
this['vae_name_47'] = opts['vae_name_47'];
this['vae_name_48'] = opts['vae_name_48'];
this['vae_name_49'] = opts['vae_name_49'];
this['vae_name_50'] = opts['vae_name_50']
            

        }

        static defaults = {
            'batch_path':  "/example_folder",
'subdirectories':  false,
'batch_max':  -1,
'vae_count':  3
}
},

    /**
     * TODO Docs based on metadata
     */
    'XY Input: Prompt S/R' : class extends Node{
        //Setters
        set 'target_prompt'(value : 'positive'|'negative')  { super.$$link(0, value) } 
set 'search_txt'(value : STRING)  { super.$$link(1, value) } 
set 'replace_count'(value : INT)  { super.$$link(2, value) } 
set 'replace_1'(value : STRING)  { super.$$link(3, value) } 
set 'replace_2'(value : STRING)  { super.$$link(4, value) } 
set 'replace_3'(value : STRING)  { super.$$link(5, value) } 
set 'replace_4'(value : STRING)  { super.$$link(6, value) } 
set 'replace_5'(value : STRING)  { super.$$link(7, value) } 
set 'replace_6'(value : STRING)  { super.$$link(8, value) } 
set 'replace_7'(value : STRING)  { super.$$link(9, value) } 
set 'replace_8'(value : STRING)  { super.$$link(10, value) } 
set 'replace_9'(value : STRING)  { super.$$link(11, value) } 
set 'replace_10'(value : STRING)  { super.$$link(12, value) } 
set 'replace_11'(value : STRING)  { super.$$link(13, value) } 
set 'replace_12'(value : STRING)  { super.$$link(14, value) } 
set 'replace_13'(value : STRING)  { super.$$link(15, value) } 
set 'replace_14'(value : STRING)  { super.$$link(16, value) } 
set 'replace_15'(value : STRING)  { super.$$link(17, value) } 
set 'replace_16'(value : STRING)  { super.$$link(18, value) } 
set 'replace_17'(value : STRING)  { super.$$link(19, value) } 
set 'replace_18'(value : STRING)  { super.$$link(20, value) } 
set 'replace_19'(value : STRING)  { super.$$link(21, value) } 
set 'replace_20'(value : STRING)  { super.$$link(22, value) } 
set 'replace_21'(value : STRING)  { super.$$link(23, value) } 
set 'replace_22'(value : STRING)  { super.$$link(24, value) } 
set 'replace_23'(value : STRING)  { super.$$link(25, value) } 
set 'replace_24'(value : STRING)  { super.$$link(26, value) } 
set 'replace_25'(value : STRING)  { super.$$link(27, value) } 
set 'replace_26'(value : STRING)  { super.$$link(28, value) } 
set 'replace_27'(value : STRING)  { super.$$link(29, value) } 
set 'replace_28'(value : STRING)  { super.$$link(30, value) } 
set 'replace_29'(value : STRING)  { super.$$link(31, value) } 
set 'replace_30'(value : STRING)  { super.$$link(32, value) } 
set 'replace_31'(value : STRING)  { super.$$link(33, value) } 
set 'replace_32'(value : STRING)  { super.$$link(34, value) } 
set 'replace_33'(value : STRING)  { super.$$link(35, value) } 
set 'replace_34'(value : STRING)  { super.$$link(36, value) } 
set 'replace_35'(value : STRING)  { super.$$link(37, value) } 
set 'replace_36'(value : STRING)  { super.$$link(38, value) } 
set 'replace_37'(value : STRING)  { super.$$link(39, value) } 
set 'replace_38'(value : STRING)  { super.$$link(40, value) } 
set 'replace_39'(value : STRING)  { super.$$link(41, value) } 
set 'replace_40'(value : STRING)  { super.$$link(42, value) } 
set 'replace_41'(value : STRING)  { super.$$link(43, value) } 
set 'replace_42'(value : STRING)  { super.$$link(44, value) } 
set 'replace_43'(value : STRING)  { super.$$link(45, value) } 
set 'replace_44'(value : STRING)  { super.$$link(46, value) } 
set 'replace_45'(value : STRING)  { super.$$link(47, value) } 
set 'replace_46'(value : STRING)  { super.$$link(48, value) } 
set 'replace_47'(value : STRING)  { super.$$link(49, value) } 
set 'replace_48'(value : STRING)  { super.$$link(50, value) } 
set 'replace_49'(value : STRING)  { super.$$link(51, value) } 

        //Getters
        get 'X or Y'() : XY { return [this, 'X or Y', 0]  as unknown as XY; }

        constructor(opts:{
            'target_prompt': 'positive'|'negative','search_txt': STRING,'replace_count': INT,'replace_1': STRING,'replace_2': STRING,'replace_3': STRING,'replace_4': STRING,'replace_5': STRING,'replace_6': STRING,'replace_7': STRING,'replace_8': STRING,'replace_9': STRING,'replace_10': STRING,'replace_11': STRING,'replace_12': STRING,'replace_13': STRING,'replace_14': STRING,'replace_15': STRING,'replace_16': STRING,'replace_17': STRING,'replace_18': STRING,'replace_19': STRING,'replace_20': STRING,'replace_21': STRING,'replace_22': STRING,'replace_23': STRING,'replace_24': STRING,'replace_25': STRING,'replace_26': STRING,'replace_27': STRING,'replace_28': STRING,'replace_29': STRING,'replace_30': STRING,'replace_31': STRING,'replace_32': STRING,'replace_33': STRING,'replace_34': STRING,'replace_35': STRING,'replace_36': STRING,'replace_37': STRING,'replace_38': STRING,'replace_39': STRING,'replace_40': STRING,'replace_41': STRING,'replace_42': STRING,'replace_43': STRING,'replace_44': STRING,'replace_45': STRING,'replace_46': STRING,'replace_47': STRING,'replace_48': STRING,'replace_49': STRING
        }){
            super(ctx);

            this['target_prompt'] = opts['target_prompt'];
this['search_txt'] = opts['search_txt'];
this['replace_count'] = opts['replace_count'];
this['replace_1'] = opts['replace_1'];
this['replace_2'] = opts['replace_2'];
this['replace_3'] = opts['replace_3'];
this['replace_4'] = opts['replace_4'];
this['replace_5'] = opts['replace_5'];
this['replace_6'] = opts['replace_6'];
this['replace_7'] = opts['replace_7'];
this['replace_8'] = opts['replace_8'];
this['replace_9'] = opts['replace_9'];
this['replace_10'] = opts['replace_10'];
this['replace_11'] = opts['replace_11'];
this['replace_12'] = opts['replace_12'];
this['replace_13'] = opts['replace_13'];
this['replace_14'] = opts['replace_14'];
this['replace_15'] = opts['replace_15'];
this['replace_16'] = opts['replace_16'];
this['replace_17'] = opts['replace_17'];
this['replace_18'] = opts['replace_18'];
this['replace_19'] = opts['replace_19'];
this['replace_20'] = opts['replace_20'];
this['replace_21'] = opts['replace_21'];
this['replace_22'] = opts['replace_22'];
this['replace_23'] = opts['replace_23'];
this['replace_24'] = opts['replace_24'];
this['replace_25'] = opts['replace_25'];
this['replace_26'] = opts['replace_26'];
this['replace_27'] = opts['replace_27'];
this['replace_28'] = opts['replace_28'];
this['replace_29'] = opts['replace_29'];
this['replace_30'] = opts['replace_30'];
this['replace_31'] = opts['replace_31'];
this['replace_32'] = opts['replace_32'];
this['replace_33'] = opts['replace_33'];
this['replace_34'] = opts['replace_34'];
this['replace_35'] = opts['replace_35'];
this['replace_36'] = opts['replace_36'];
this['replace_37'] = opts['replace_37'];
this['replace_38'] = opts['replace_38'];
this['replace_39'] = opts['replace_39'];
this['replace_40'] = opts['replace_40'];
this['replace_41'] = opts['replace_41'];
this['replace_42'] = opts['replace_42'];
this['replace_43'] = opts['replace_43'];
this['replace_44'] = opts['replace_44'];
this['replace_45'] = opts['replace_45'];
this['replace_46'] = opts['replace_46'];
this['replace_47'] = opts['replace_47'];
this['replace_48'] = opts['replace_48'];
this['replace_49'] = opts['replace_49']
            

        }

        static defaults = {
            'search_txt':  "",
'replace_count':  3,
'replace_1':  "",
'replace_2':  "",
'replace_3':  "",
'replace_4':  "",
'replace_5':  "",
'replace_6':  "",
'replace_7':  "",
'replace_8':  "",
'replace_9':  "",
'replace_10':  "",
'replace_11':  "",
'replace_12':  "",
'replace_13':  "",
'replace_14':  "",
'replace_15':  "",
'replace_16':  "",
'replace_17':  "",
'replace_18':  "",
'replace_19':  "",
'replace_20':  "",
'replace_21':  "",
'replace_22':  "",
'replace_23':  "",
'replace_24':  "",
'replace_25':  "",
'replace_26':  "",
'replace_27':  "",
'replace_28':  "",
'replace_29':  "",
'replace_30':  "",
'replace_31':  "",
'replace_32':  "",
'replace_33':  "",
'replace_34':  "",
'replace_35':  "",
'replace_36':  "",
'replace_37':  "",
'replace_38':  "",
'replace_39':  "",
'replace_40':  "",
'replace_41':  "",
'replace_42':  "",
'replace_43':  "",
'replace_44':  "",
'replace_45':  "",
'replace_46':  "",
'replace_47':  "",
'replace_48':  "",
'replace_49':  ""
}
},

    /**
     * TODO Docs based on metadata
     */
    'XY Input: Aesthetic Score' : class extends Node{
        //Setters
        set 'target_ascore'(value : 'positive'|'negative')  { super.$$link(0, value) } 
set 'batch_count'(value : INT)  { super.$$link(1, value) } 
set 'first_ascore'(value : FLOAT)  { super.$$link(2, value) } 
set 'last_ascore'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'X or Y'() : XY { return [this, 'X or Y', 0]  as unknown as XY; }

        constructor(opts:{
            'target_ascore': 'positive'|'negative','batch_count': INT,'first_ascore': FLOAT,'last_ascore': FLOAT
        }){
            super(ctx);

            this['target_ascore'] = opts['target_ascore'];
this['batch_count'] = opts['batch_count'];
this['first_ascore'] = opts['first_ascore'];
this['last_ascore'] = opts['last_ascore']
            

        }

        static defaults = {
            'batch_count':  3,
'first_ascore':  0,
'last_ascore':  10
}
},

    /**
     * TODO Docs based on metadata
     */
    'XY Input: Refiner On/Off' : class extends Node{
        //Setters
        set 'refine_at_percent'(value : FLOAT)  { super.$$link(0, value) } 

        //Getters
        get 'X or Y'() : XY { return [this, 'X or Y', 0]  as unknown as XY; }

        constructor(opts:{
            'refine_at_percent': FLOAT
        }){
            super(ctx);

            this['refine_at_percent'] = opts['refine_at_percent']
            

        }

        static defaults = {
            'refine_at_percent':  0.8
}
},

    /**
     * TODO Docs based on metadata
     */
    'XY Input: Checkpoint' : class extends Node{
        //Setters
        set 'target_ckpt'(value : 'Base'|'Refiner')  { super.$$link(0, value) } 
set 'input_mode'(value : 'Ckpt Names'|'Ckpt Names+ClipSkip'|'Ckpt Names+ClipSkip+VAE'|'Checkpoint Batch')  { super.$$link(1, value) } 
set 'batch_path'(value : STRING)  { super.$$link(2, value) } 
set 'subdirectories'(value : BOOLEAN)  { super.$$link(3, value) } 
set 'batch_sort'(value : 'ascending'|'descending')  { super.$$link(4, value) } 
set 'batch_max'(value : INT)  { super.$$link(5, value) } 
set 'ckpt_count'(value : INT)  { super.$$link(6, value) } 
set 'ckpt_name_1'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(7, value) } 
set 'clip_skip_1'(value : INT)  { super.$$link(8, value) } 
set 'vae_name_1'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(9, value) } 
set 'ckpt_name_2'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(10, value) } 
set 'clip_skip_2'(value : INT)  { super.$$link(11, value) } 
set 'vae_name_2'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(12, value) } 
set 'ckpt_name_3'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(13, value) } 
set 'clip_skip_3'(value : INT)  { super.$$link(14, value) } 
set 'vae_name_3'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(15, value) } 
set 'ckpt_name_4'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(16, value) } 
set 'clip_skip_4'(value : INT)  { super.$$link(17, value) } 
set 'vae_name_4'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(18, value) } 
set 'ckpt_name_5'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(19, value) } 
set 'clip_skip_5'(value : INT)  { super.$$link(20, value) } 
set 'vae_name_5'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(21, value) } 
set 'ckpt_name_6'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(22, value) } 
set 'clip_skip_6'(value : INT)  { super.$$link(23, value) } 
set 'vae_name_6'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(24, value) } 
set 'ckpt_name_7'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(25, value) } 
set 'clip_skip_7'(value : INT)  { super.$$link(26, value) } 
set 'vae_name_7'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(27, value) } 
set 'ckpt_name_8'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(28, value) } 
set 'clip_skip_8'(value : INT)  { super.$$link(29, value) } 
set 'vae_name_8'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(30, value) } 
set 'ckpt_name_9'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(31, value) } 
set 'clip_skip_9'(value : INT)  { super.$$link(32, value) } 
set 'vae_name_9'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(33, value) } 
set 'ckpt_name_10'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(34, value) } 
set 'clip_skip_10'(value : INT)  { super.$$link(35, value) } 
set 'vae_name_10'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(36, value) } 
set 'ckpt_name_11'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(37, value) } 
set 'clip_skip_11'(value : INT)  { super.$$link(38, value) } 
set 'vae_name_11'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(39, value) } 
set 'ckpt_name_12'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(40, value) } 
set 'clip_skip_12'(value : INT)  { super.$$link(41, value) } 
set 'vae_name_12'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(42, value) } 
set 'ckpt_name_13'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(43, value) } 
set 'clip_skip_13'(value : INT)  { super.$$link(44, value) } 
set 'vae_name_13'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(45, value) } 
set 'ckpt_name_14'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(46, value) } 
set 'clip_skip_14'(value : INT)  { super.$$link(47, value) } 
set 'vae_name_14'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(48, value) } 
set 'ckpt_name_15'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(49, value) } 
set 'clip_skip_15'(value : INT)  { super.$$link(50, value) } 
set 'vae_name_15'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(51, value) } 
set 'ckpt_name_16'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(52, value) } 
set 'clip_skip_16'(value : INT)  { super.$$link(53, value) } 
set 'vae_name_16'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(54, value) } 
set 'ckpt_name_17'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(55, value) } 
set 'clip_skip_17'(value : INT)  { super.$$link(56, value) } 
set 'vae_name_17'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(57, value) } 
set 'ckpt_name_18'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(58, value) } 
set 'clip_skip_18'(value : INT)  { super.$$link(59, value) } 
set 'vae_name_18'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(60, value) } 
set 'ckpt_name_19'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(61, value) } 
set 'clip_skip_19'(value : INT)  { super.$$link(62, value) } 
set 'vae_name_19'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(63, value) } 
set 'ckpt_name_20'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(64, value) } 
set 'clip_skip_20'(value : INT)  { super.$$link(65, value) } 
set 'vae_name_20'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(66, value) } 
set 'ckpt_name_21'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(67, value) } 
set 'clip_skip_21'(value : INT)  { super.$$link(68, value) } 
set 'vae_name_21'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(69, value) } 
set 'ckpt_name_22'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(70, value) } 
set 'clip_skip_22'(value : INT)  { super.$$link(71, value) } 
set 'vae_name_22'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(72, value) } 
set 'ckpt_name_23'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(73, value) } 
set 'clip_skip_23'(value : INT)  { super.$$link(74, value) } 
set 'vae_name_23'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(75, value) } 
set 'ckpt_name_24'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(76, value) } 
set 'clip_skip_24'(value : INT)  { super.$$link(77, value) } 
set 'vae_name_24'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(78, value) } 
set 'ckpt_name_25'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(79, value) } 
set 'clip_skip_25'(value : INT)  { super.$$link(80, value) } 
set 'vae_name_25'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(81, value) } 
set 'ckpt_name_26'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(82, value) } 
set 'clip_skip_26'(value : INT)  { super.$$link(83, value) } 
set 'vae_name_26'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(84, value) } 
set 'ckpt_name_27'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(85, value) } 
set 'clip_skip_27'(value : INT)  { super.$$link(86, value) } 
set 'vae_name_27'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(87, value) } 
set 'ckpt_name_28'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(88, value) } 
set 'clip_skip_28'(value : INT)  { super.$$link(89, value) } 
set 'vae_name_28'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(90, value) } 
set 'ckpt_name_29'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(91, value) } 
set 'clip_skip_29'(value : INT)  { super.$$link(92, value) } 
set 'vae_name_29'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(93, value) } 
set 'ckpt_name_30'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(94, value) } 
set 'clip_skip_30'(value : INT)  { super.$$link(95, value) } 
set 'vae_name_30'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(96, value) } 
set 'ckpt_name_31'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(97, value) } 
set 'clip_skip_31'(value : INT)  { super.$$link(98, value) } 
set 'vae_name_31'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(99, value) } 
set 'ckpt_name_32'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(100, value) } 
set 'clip_skip_32'(value : INT)  { super.$$link(101, value) } 
set 'vae_name_32'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(102, value) } 
set 'ckpt_name_33'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(103, value) } 
set 'clip_skip_33'(value : INT)  { super.$$link(104, value) } 
set 'vae_name_33'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(105, value) } 
set 'ckpt_name_34'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(106, value) } 
set 'clip_skip_34'(value : INT)  { super.$$link(107, value) } 
set 'vae_name_34'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(108, value) } 
set 'ckpt_name_35'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(109, value) } 
set 'clip_skip_35'(value : INT)  { super.$$link(110, value) } 
set 'vae_name_35'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(111, value) } 
set 'ckpt_name_36'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(112, value) } 
set 'clip_skip_36'(value : INT)  { super.$$link(113, value) } 
set 'vae_name_36'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(114, value) } 
set 'ckpt_name_37'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(115, value) } 
set 'clip_skip_37'(value : INT)  { super.$$link(116, value) } 
set 'vae_name_37'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(117, value) } 
set 'ckpt_name_38'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(118, value) } 
set 'clip_skip_38'(value : INT)  { super.$$link(119, value) } 
set 'vae_name_38'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(120, value) } 
set 'ckpt_name_39'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(121, value) } 
set 'clip_skip_39'(value : INT)  { super.$$link(122, value) } 
set 'vae_name_39'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(123, value) } 
set 'ckpt_name_40'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(124, value) } 
set 'clip_skip_40'(value : INT)  { super.$$link(125, value) } 
set 'vae_name_40'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(126, value) } 
set 'ckpt_name_41'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(127, value) } 
set 'clip_skip_41'(value : INT)  { super.$$link(128, value) } 
set 'vae_name_41'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(129, value) } 
set 'ckpt_name_42'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(130, value) } 
set 'clip_skip_42'(value : INT)  { super.$$link(131, value) } 
set 'vae_name_42'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(132, value) } 
set 'ckpt_name_43'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(133, value) } 
set 'clip_skip_43'(value : INT)  { super.$$link(134, value) } 
set 'vae_name_43'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(135, value) } 
set 'ckpt_name_44'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(136, value) } 
set 'clip_skip_44'(value : INT)  { super.$$link(137, value) } 
set 'vae_name_44'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(138, value) } 
set 'ckpt_name_45'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(139, value) } 
set 'clip_skip_45'(value : INT)  { super.$$link(140, value) } 
set 'vae_name_45'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(141, value) } 
set 'ckpt_name_46'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(142, value) } 
set 'clip_skip_46'(value : INT)  { super.$$link(143, value) } 
set 'vae_name_46'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(144, value) } 
set 'ckpt_name_47'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(145, value) } 
set 'clip_skip_47'(value : INT)  { super.$$link(146, value) } 
set 'vae_name_47'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(147, value) } 
set 'ckpt_name_48'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(148, value) } 
set 'clip_skip_48'(value : INT)  { super.$$link(149, value) } 
set 'vae_name_48'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(150, value) } 
set 'ckpt_name_49'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(151, value) } 
set 'clip_skip_49'(value : INT)  { super.$$link(152, value) } 
set 'vae_name_49'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(153, value) } 
set 'ckpt_name_50'(value : 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(154, value) } 
set 'clip_skip_50'(value : INT)  { super.$$link(155, value) } 
set 'vae_name_50'(value : 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin')  { super.$$link(156, value) } 

        //Getters
        get 'X or Y'() : XY { return [this, 'X or Y', 0]  as unknown as XY; }

        constructor(opts:{
            'target_ckpt': 'Base'|'Refiner','input_mode': 'Ckpt Names'|'Ckpt Names+ClipSkip'|'Ckpt Names+ClipSkip+VAE'|'Checkpoint Batch','batch_path': STRING,'subdirectories': BOOLEAN,'batch_sort': 'ascending'|'descending','batch_max': INT,'ckpt_count': INT,'ckpt_name_1': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_1': INT,'vae_name_1': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_2': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_2': INT,'vae_name_2': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_3': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_3': INT,'vae_name_3': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_4': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_4': INT,'vae_name_4': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_5': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_5': INT,'vae_name_5': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_6': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_6': INT,'vae_name_6': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_7': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_7': INT,'vae_name_7': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_8': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_8': INT,'vae_name_8': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_9': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_9': INT,'vae_name_9': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_10': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_10': INT,'vae_name_10': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_11': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_11': INT,'vae_name_11': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_12': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_12': INT,'vae_name_12': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_13': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_13': INT,'vae_name_13': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_14': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_14': INT,'vae_name_14': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_15': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_15': INT,'vae_name_15': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_16': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_16': INT,'vae_name_16': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_17': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_17': INT,'vae_name_17': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_18': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_18': INT,'vae_name_18': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_19': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_19': INT,'vae_name_19': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_20': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_20': INT,'vae_name_20': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_21': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_21': INT,'vae_name_21': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_22': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_22': INT,'vae_name_22': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_23': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_23': INT,'vae_name_23': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_24': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_24': INT,'vae_name_24': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_25': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_25': INT,'vae_name_25': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_26': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_26': INT,'vae_name_26': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_27': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_27': INT,'vae_name_27': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_28': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_28': INT,'vae_name_28': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_29': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_29': INT,'vae_name_29': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_30': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_30': INT,'vae_name_30': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_31': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_31': INT,'vae_name_31': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_32': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_32': INT,'vae_name_32': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_33': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_33': INT,'vae_name_33': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_34': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_34': INT,'vae_name_34': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_35': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_35': INT,'vae_name_35': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_36': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_36': INT,'vae_name_36': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_37': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_37': INT,'vae_name_37': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_38': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_38': INT,'vae_name_38': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_39': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_39': INT,'vae_name_39': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_40': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_40': INT,'vae_name_40': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_41': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_41': INT,'vae_name_41': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_42': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_42': INT,'vae_name_42': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_43': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_43': INT,'vae_name_43': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_44': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_44': INT,'vae_name_44': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_45': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_45': INT,'vae_name_45': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_46': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_46': INT,'vae_name_46': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_47': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_47': INT,'vae_name_47': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_48': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_48': INT,'vae_name_48': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_49': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_49': INT,'vae_name_49': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin','ckpt_name_50': 'None'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','clip_skip_50': INT,'vae_name_50': 'Baked VAE'|'orangemix.vae.pt'|'sd-vae-ft-ema/diffusion_pytorch_model.bin'
        }){
            super(ctx);

            this['target_ckpt'] = opts['target_ckpt'];
this['input_mode'] = opts['input_mode'];
this['batch_path'] = opts['batch_path'];
this['subdirectories'] = opts['subdirectories'];
this['batch_sort'] = opts['batch_sort'];
this['batch_max'] = opts['batch_max'];
this['ckpt_count'] = opts['ckpt_count'];
this['ckpt_name_1'] = opts['ckpt_name_1'];
this['clip_skip_1'] = opts['clip_skip_1'];
this['vae_name_1'] = opts['vae_name_1'];
this['ckpt_name_2'] = opts['ckpt_name_2'];
this['clip_skip_2'] = opts['clip_skip_2'];
this['vae_name_2'] = opts['vae_name_2'];
this['ckpt_name_3'] = opts['ckpt_name_3'];
this['clip_skip_3'] = opts['clip_skip_3'];
this['vae_name_3'] = opts['vae_name_3'];
this['ckpt_name_4'] = opts['ckpt_name_4'];
this['clip_skip_4'] = opts['clip_skip_4'];
this['vae_name_4'] = opts['vae_name_4'];
this['ckpt_name_5'] = opts['ckpt_name_5'];
this['clip_skip_5'] = opts['clip_skip_5'];
this['vae_name_5'] = opts['vae_name_5'];
this['ckpt_name_6'] = opts['ckpt_name_6'];
this['clip_skip_6'] = opts['clip_skip_6'];
this['vae_name_6'] = opts['vae_name_6'];
this['ckpt_name_7'] = opts['ckpt_name_7'];
this['clip_skip_7'] = opts['clip_skip_7'];
this['vae_name_7'] = opts['vae_name_7'];
this['ckpt_name_8'] = opts['ckpt_name_8'];
this['clip_skip_8'] = opts['clip_skip_8'];
this['vae_name_8'] = opts['vae_name_8'];
this['ckpt_name_9'] = opts['ckpt_name_9'];
this['clip_skip_9'] = opts['clip_skip_9'];
this['vae_name_9'] = opts['vae_name_9'];
this['ckpt_name_10'] = opts['ckpt_name_10'];
this['clip_skip_10'] = opts['clip_skip_10'];
this['vae_name_10'] = opts['vae_name_10'];
this['ckpt_name_11'] = opts['ckpt_name_11'];
this['clip_skip_11'] = opts['clip_skip_11'];
this['vae_name_11'] = opts['vae_name_11'];
this['ckpt_name_12'] = opts['ckpt_name_12'];
this['clip_skip_12'] = opts['clip_skip_12'];
this['vae_name_12'] = opts['vae_name_12'];
this['ckpt_name_13'] = opts['ckpt_name_13'];
this['clip_skip_13'] = opts['clip_skip_13'];
this['vae_name_13'] = opts['vae_name_13'];
this['ckpt_name_14'] = opts['ckpt_name_14'];
this['clip_skip_14'] = opts['clip_skip_14'];
this['vae_name_14'] = opts['vae_name_14'];
this['ckpt_name_15'] = opts['ckpt_name_15'];
this['clip_skip_15'] = opts['clip_skip_15'];
this['vae_name_15'] = opts['vae_name_15'];
this['ckpt_name_16'] = opts['ckpt_name_16'];
this['clip_skip_16'] = opts['clip_skip_16'];
this['vae_name_16'] = opts['vae_name_16'];
this['ckpt_name_17'] = opts['ckpt_name_17'];
this['clip_skip_17'] = opts['clip_skip_17'];
this['vae_name_17'] = opts['vae_name_17'];
this['ckpt_name_18'] = opts['ckpt_name_18'];
this['clip_skip_18'] = opts['clip_skip_18'];
this['vae_name_18'] = opts['vae_name_18'];
this['ckpt_name_19'] = opts['ckpt_name_19'];
this['clip_skip_19'] = opts['clip_skip_19'];
this['vae_name_19'] = opts['vae_name_19'];
this['ckpt_name_20'] = opts['ckpt_name_20'];
this['clip_skip_20'] = opts['clip_skip_20'];
this['vae_name_20'] = opts['vae_name_20'];
this['ckpt_name_21'] = opts['ckpt_name_21'];
this['clip_skip_21'] = opts['clip_skip_21'];
this['vae_name_21'] = opts['vae_name_21'];
this['ckpt_name_22'] = opts['ckpt_name_22'];
this['clip_skip_22'] = opts['clip_skip_22'];
this['vae_name_22'] = opts['vae_name_22'];
this['ckpt_name_23'] = opts['ckpt_name_23'];
this['clip_skip_23'] = opts['clip_skip_23'];
this['vae_name_23'] = opts['vae_name_23'];
this['ckpt_name_24'] = opts['ckpt_name_24'];
this['clip_skip_24'] = opts['clip_skip_24'];
this['vae_name_24'] = opts['vae_name_24'];
this['ckpt_name_25'] = opts['ckpt_name_25'];
this['clip_skip_25'] = opts['clip_skip_25'];
this['vae_name_25'] = opts['vae_name_25'];
this['ckpt_name_26'] = opts['ckpt_name_26'];
this['clip_skip_26'] = opts['clip_skip_26'];
this['vae_name_26'] = opts['vae_name_26'];
this['ckpt_name_27'] = opts['ckpt_name_27'];
this['clip_skip_27'] = opts['clip_skip_27'];
this['vae_name_27'] = opts['vae_name_27'];
this['ckpt_name_28'] = opts['ckpt_name_28'];
this['clip_skip_28'] = opts['clip_skip_28'];
this['vae_name_28'] = opts['vae_name_28'];
this['ckpt_name_29'] = opts['ckpt_name_29'];
this['clip_skip_29'] = opts['clip_skip_29'];
this['vae_name_29'] = opts['vae_name_29'];
this['ckpt_name_30'] = opts['ckpt_name_30'];
this['clip_skip_30'] = opts['clip_skip_30'];
this['vae_name_30'] = opts['vae_name_30'];
this['ckpt_name_31'] = opts['ckpt_name_31'];
this['clip_skip_31'] = opts['clip_skip_31'];
this['vae_name_31'] = opts['vae_name_31'];
this['ckpt_name_32'] = opts['ckpt_name_32'];
this['clip_skip_32'] = opts['clip_skip_32'];
this['vae_name_32'] = opts['vae_name_32'];
this['ckpt_name_33'] = opts['ckpt_name_33'];
this['clip_skip_33'] = opts['clip_skip_33'];
this['vae_name_33'] = opts['vae_name_33'];
this['ckpt_name_34'] = opts['ckpt_name_34'];
this['clip_skip_34'] = opts['clip_skip_34'];
this['vae_name_34'] = opts['vae_name_34'];
this['ckpt_name_35'] = opts['ckpt_name_35'];
this['clip_skip_35'] = opts['clip_skip_35'];
this['vae_name_35'] = opts['vae_name_35'];
this['ckpt_name_36'] = opts['ckpt_name_36'];
this['clip_skip_36'] = opts['clip_skip_36'];
this['vae_name_36'] = opts['vae_name_36'];
this['ckpt_name_37'] = opts['ckpt_name_37'];
this['clip_skip_37'] = opts['clip_skip_37'];
this['vae_name_37'] = opts['vae_name_37'];
this['ckpt_name_38'] = opts['ckpt_name_38'];
this['clip_skip_38'] = opts['clip_skip_38'];
this['vae_name_38'] = opts['vae_name_38'];
this['ckpt_name_39'] = opts['ckpt_name_39'];
this['clip_skip_39'] = opts['clip_skip_39'];
this['vae_name_39'] = opts['vae_name_39'];
this['ckpt_name_40'] = opts['ckpt_name_40'];
this['clip_skip_40'] = opts['clip_skip_40'];
this['vae_name_40'] = opts['vae_name_40'];
this['ckpt_name_41'] = opts['ckpt_name_41'];
this['clip_skip_41'] = opts['clip_skip_41'];
this['vae_name_41'] = opts['vae_name_41'];
this['ckpt_name_42'] = opts['ckpt_name_42'];
this['clip_skip_42'] = opts['clip_skip_42'];
this['vae_name_42'] = opts['vae_name_42'];
this['ckpt_name_43'] = opts['ckpt_name_43'];
this['clip_skip_43'] = opts['clip_skip_43'];
this['vae_name_43'] = opts['vae_name_43'];
this['ckpt_name_44'] = opts['ckpt_name_44'];
this['clip_skip_44'] = opts['clip_skip_44'];
this['vae_name_44'] = opts['vae_name_44'];
this['ckpt_name_45'] = opts['ckpt_name_45'];
this['clip_skip_45'] = opts['clip_skip_45'];
this['vae_name_45'] = opts['vae_name_45'];
this['ckpt_name_46'] = opts['ckpt_name_46'];
this['clip_skip_46'] = opts['clip_skip_46'];
this['vae_name_46'] = opts['vae_name_46'];
this['ckpt_name_47'] = opts['ckpt_name_47'];
this['clip_skip_47'] = opts['clip_skip_47'];
this['vae_name_47'] = opts['vae_name_47'];
this['ckpt_name_48'] = opts['ckpt_name_48'];
this['clip_skip_48'] = opts['clip_skip_48'];
this['vae_name_48'] = opts['vae_name_48'];
this['ckpt_name_49'] = opts['ckpt_name_49'];
this['clip_skip_49'] = opts['clip_skip_49'];
this['vae_name_49'] = opts['vae_name_49'];
this['ckpt_name_50'] = opts['ckpt_name_50'];
this['clip_skip_50'] = opts['clip_skip_50'];
this['vae_name_50'] = opts['vae_name_50']
            

        }

        static defaults = {
            'batch_path':  "/example_folder",
'subdirectories':  false,
'batch_max':  -1,
'ckpt_count':  3,
'clip_skip_1':  -1,
'clip_skip_2':  -1,
'clip_skip_3':  -1,
'clip_skip_4':  -1,
'clip_skip_5':  -1,
'clip_skip_6':  -1,
'clip_skip_7':  -1,
'clip_skip_8':  -1,
'clip_skip_9':  -1,
'clip_skip_10':  -1,
'clip_skip_11':  -1,
'clip_skip_12':  -1,
'clip_skip_13':  -1,
'clip_skip_14':  -1,
'clip_skip_15':  -1,
'clip_skip_16':  -1,
'clip_skip_17':  -1,
'clip_skip_18':  -1,
'clip_skip_19':  -1,
'clip_skip_20':  -1,
'clip_skip_21':  -1,
'clip_skip_22':  -1,
'clip_skip_23':  -1,
'clip_skip_24':  -1,
'clip_skip_25':  -1,
'clip_skip_26':  -1,
'clip_skip_27':  -1,
'clip_skip_28':  -1,
'clip_skip_29':  -1,
'clip_skip_30':  -1,
'clip_skip_31':  -1,
'clip_skip_32':  -1,
'clip_skip_33':  -1,
'clip_skip_34':  -1,
'clip_skip_35':  -1,
'clip_skip_36':  -1,
'clip_skip_37':  -1,
'clip_skip_38':  -1,
'clip_skip_39':  -1,
'clip_skip_40':  -1,
'clip_skip_41':  -1,
'clip_skip_42':  -1,
'clip_skip_43':  -1,
'clip_skip_44':  -1,
'clip_skip_45':  -1,
'clip_skip_46':  -1,
'clip_skip_47':  -1,
'clip_skip_48':  -1,
'clip_skip_49':  -1,
'clip_skip_50':  -1
}
},

    /**
     * TODO Docs based on metadata
     */
    'XY Input: Clip Skip' : class extends Node{
        //Setters
        set 'target_ckpt'(value : 'Base'|'Refiner')  { super.$$link(0, value) } 
set 'batch_count'(value : INT)  { super.$$link(1, value) } 
set 'first_clip_skip'(value : INT)  { super.$$link(2, value) } 
set 'last_clip_skip'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'X or Y'() : XY { return [this, 'X or Y', 0]  as unknown as XY; }

        constructor(opts:{
            'target_ckpt': 'Base'|'Refiner','batch_count': INT,'first_clip_skip': INT,'last_clip_skip': INT
        }){
            super(ctx);

            this['target_ckpt'] = opts['target_ckpt'];
this['batch_count'] = opts['batch_count'];
this['first_clip_skip'] = opts['first_clip_skip'];
this['last_clip_skip'] = opts['last_clip_skip']
            

        }

        static defaults = {
            'batch_count':  3,
'first_clip_skip':  -1,
'last_clip_skip':  -3
}
},

    /**
     * TODO Docs based on metadata
     */
    'XY Input: LoRA' : class extends Node{
        //Setters
        set 'input_mode'(value : 'LoRA Names'|'LoRA Names+Weights'|'LoRA Batch')  { super.$$link(0, value) } 
set 'batch_path'(value : STRING)  { super.$$link(1, value) } 
set 'subdirectories'(value : BOOLEAN)  { super.$$link(2, value) } 
set 'batch_sort'(value : 'ascending'|'descending')  { super.$$link(3, value) } 
set 'batch_max'(value : INT)  { super.$$link(4, value) } 
set 'lora_count'(value : INT)  { super.$$link(5, value) } 
set 'model_strength'(value : FLOAT)  { super.$$link(6, value) } 
set 'clip_strength'(value : FLOAT)  { super.$$link(7, value) } 
set 'lora_name_1'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(8, value) } 
set 'model_str_1'(value : FLOAT)  { super.$$link(9, value) } 
set 'clip_str_1'(value : FLOAT)  { super.$$link(10, value) } 
set 'lora_name_2'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(11, value) } 
set 'model_str_2'(value : FLOAT)  { super.$$link(12, value) } 
set 'clip_str_2'(value : FLOAT)  { super.$$link(13, value) } 
set 'lora_name_3'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(14, value) } 
set 'model_str_3'(value : FLOAT)  { super.$$link(15, value) } 
set 'clip_str_3'(value : FLOAT)  { super.$$link(16, value) } 
set 'lora_name_4'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(17, value) } 
set 'model_str_4'(value : FLOAT)  { super.$$link(18, value) } 
set 'clip_str_4'(value : FLOAT)  { super.$$link(19, value) } 
set 'lora_name_5'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(20, value) } 
set 'model_str_5'(value : FLOAT)  { super.$$link(21, value) } 
set 'clip_str_5'(value : FLOAT)  { super.$$link(22, value) } 
set 'lora_name_6'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(23, value) } 
set 'model_str_6'(value : FLOAT)  { super.$$link(24, value) } 
set 'clip_str_6'(value : FLOAT)  { super.$$link(25, value) } 
set 'lora_name_7'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(26, value) } 
set 'model_str_7'(value : FLOAT)  { super.$$link(27, value) } 
set 'clip_str_7'(value : FLOAT)  { super.$$link(28, value) } 
set 'lora_name_8'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(29, value) } 
set 'model_str_8'(value : FLOAT)  { super.$$link(30, value) } 
set 'clip_str_8'(value : FLOAT)  { super.$$link(31, value) } 
set 'lora_name_9'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(32, value) } 
set 'model_str_9'(value : FLOAT)  { super.$$link(33, value) } 
set 'clip_str_9'(value : FLOAT)  { super.$$link(34, value) } 
set 'lora_name_10'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(35, value) } 
set 'model_str_10'(value : FLOAT)  { super.$$link(36, value) } 
set 'clip_str_10'(value : FLOAT)  { super.$$link(37, value) } 
set 'lora_name_11'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(38, value) } 
set 'model_str_11'(value : FLOAT)  { super.$$link(39, value) } 
set 'clip_str_11'(value : FLOAT)  { super.$$link(40, value) } 
set 'lora_name_12'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(41, value) } 
set 'model_str_12'(value : FLOAT)  { super.$$link(42, value) } 
set 'clip_str_12'(value : FLOAT)  { super.$$link(43, value) } 
set 'lora_name_13'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(44, value) } 
set 'model_str_13'(value : FLOAT)  { super.$$link(45, value) } 
set 'clip_str_13'(value : FLOAT)  { super.$$link(46, value) } 
set 'lora_name_14'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(47, value) } 
set 'model_str_14'(value : FLOAT)  { super.$$link(48, value) } 
set 'clip_str_14'(value : FLOAT)  { super.$$link(49, value) } 
set 'lora_name_15'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(50, value) } 
set 'model_str_15'(value : FLOAT)  { super.$$link(51, value) } 
set 'clip_str_15'(value : FLOAT)  { super.$$link(52, value) } 
set 'lora_name_16'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(53, value) } 
set 'model_str_16'(value : FLOAT)  { super.$$link(54, value) } 
set 'clip_str_16'(value : FLOAT)  { super.$$link(55, value) } 
set 'lora_name_17'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(56, value) } 
set 'model_str_17'(value : FLOAT)  { super.$$link(57, value) } 
set 'clip_str_17'(value : FLOAT)  { super.$$link(58, value) } 
set 'lora_name_18'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(59, value) } 
set 'model_str_18'(value : FLOAT)  { super.$$link(60, value) } 
set 'clip_str_18'(value : FLOAT)  { super.$$link(61, value) } 
set 'lora_name_19'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(62, value) } 
set 'model_str_19'(value : FLOAT)  { super.$$link(63, value) } 
set 'clip_str_19'(value : FLOAT)  { super.$$link(64, value) } 
set 'lora_name_20'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(65, value) } 
set 'model_str_20'(value : FLOAT)  { super.$$link(66, value) } 
set 'clip_str_20'(value : FLOAT)  { super.$$link(67, value) } 
set 'lora_name_21'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(68, value) } 
set 'model_str_21'(value : FLOAT)  { super.$$link(69, value) } 
set 'clip_str_21'(value : FLOAT)  { super.$$link(70, value) } 
set 'lora_name_22'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(71, value) } 
set 'model_str_22'(value : FLOAT)  { super.$$link(72, value) } 
set 'clip_str_22'(value : FLOAT)  { super.$$link(73, value) } 
set 'lora_name_23'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(74, value) } 
set 'model_str_23'(value : FLOAT)  { super.$$link(75, value) } 
set 'clip_str_23'(value : FLOAT)  { super.$$link(76, value) } 
set 'lora_name_24'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(77, value) } 
set 'model_str_24'(value : FLOAT)  { super.$$link(78, value) } 
set 'clip_str_24'(value : FLOAT)  { super.$$link(79, value) } 
set 'lora_name_25'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(80, value) } 
set 'model_str_25'(value : FLOAT)  { super.$$link(81, value) } 
set 'clip_str_25'(value : FLOAT)  { super.$$link(82, value) } 
set 'lora_name_26'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(83, value) } 
set 'model_str_26'(value : FLOAT)  { super.$$link(84, value) } 
set 'clip_str_26'(value : FLOAT)  { super.$$link(85, value) } 
set 'lora_name_27'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(86, value) } 
set 'model_str_27'(value : FLOAT)  { super.$$link(87, value) } 
set 'clip_str_27'(value : FLOAT)  { super.$$link(88, value) } 
set 'lora_name_28'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(89, value) } 
set 'model_str_28'(value : FLOAT)  { super.$$link(90, value) } 
set 'clip_str_28'(value : FLOAT)  { super.$$link(91, value) } 
set 'lora_name_29'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(92, value) } 
set 'model_str_29'(value : FLOAT)  { super.$$link(93, value) } 
set 'clip_str_29'(value : FLOAT)  { super.$$link(94, value) } 
set 'lora_name_30'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(95, value) } 
set 'model_str_30'(value : FLOAT)  { super.$$link(96, value) } 
set 'clip_str_30'(value : FLOAT)  { super.$$link(97, value) } 
set 'lora_name_31'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(98, value) } 
set 'model_str_31'(value : FLOAT)  { super.$$link(99, value) } 
set 'clip_str_31'(value : FLOAT)  { super.$$link(100, value) } 
set 'lora_name_32'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(101, value) } 
set 'model_str_32'(value : FLOAT)  { super.$$link(102, value) } 
set 'clip_str_32'(value : FLOAT)  { super.$$link(103, value) } 
set 'lora_name_33'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(104, value) } 
set 'model_str_33'(value : FLOAT)  { super.$$link(105, value) } 
set 'clip_str_33'(value : FLOAT)  { super.$$link(106, value) } 
set 'lora_name_34'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(107, value) } 
set 'model_str_34'(value : FLOAT)  { super.$$link(108, value) } 
set 'clip_str_34'(value : FLOAT)  { super.$$link(109, value) } 
set 'lora_name_35'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(110, value) } 
set 'model_str_35'(value : FLOAT)  { super.$$link(111, value) } 
set 'clip_str_35'(value : FLOAT)  { super.$$link(112, value) } 
set 'lora_name_36'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(113, value) } 
set 'model_str_36'(value : FLOAT)  { super.$$link(114, value) } 
set 'clip_str_36'(value : FLOAT)  { super.$$link(115, value) } 
set 'lora_name_37'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(116, value) } 
set 'model_str_37'(value : FLOAT)  { super.$$link(117, value) } 
set 'clip_str_37'(value : FLOAT)  { super.$$link(118, value) } 
set 'lora_name_38'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(119, value) } 
set 'model_str_38'(value : FLOAT)  { super.$$link(120, value) } 
set 'clip_str_38'(value : FLOAT)  { super.$$link(121, value) } 
set 'lora_name_39'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(122, value) } 
set 'model_str_39'(value : FLOAT)  { super.$$link(123, value) } 
set 'clip_str_39'(value : FLOAT)  { super.$$link(124, value) } 
set 'lora_name_40'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(125, value) } 
set 'model_str_40'(value : FLOAT)  { super.$$link(126, value) } 
set 'clip_str_40'(value : FLOAT)  { super.$$link(127, value) } 
set 'lora_name_41'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(128, value) } 
set 'model_str_41'(value : FLOAT)  { super.$$link(129, value) } 
set 'clip_str_41'(value : FLOAT)  { super.$$link(130, value) } 
set 'lora_name_42'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(131, value) } 
set 'model_str_42'(value : FLOAT)  { super.$$link(132, value) } 
set 'clip_str_42'(value : FLOAT)  { super.$$link(133, value) } 
set 'lora_name_43'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(134, value) } 
set 'model_str_43'(value : FLOAT)  { super.$$link(135, value) } 
set 'clip_str_43'(value : FLOAT)  { super.$$link(136, value) } 
set 'lora_name_44'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(137, value) } 
set 'model_str_44'(value : FLOAT)  { super.$$link(138, value) } 
set 'clip_str_44'(value : FLOAT)  { super.$$link(139, value) } 
set 'lora_name_45'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(140, value) } 
set 'model_str_45'(value : FLOAT)  { super.$$link(141, value) } 
set 'clip_str_45'(value : FLOAT)  { super.$$link(142, value) } 
set 'lora_name_46'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(143, value) } 
set 'model_str_46'(value : FLOAT)  { super.$$link(144, value) } 
set 'clip_str_46'(value : FLOAT)  { super.$$link(145, value) } 
set 'lora_name_47'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(146, value) } 
set 'model_str_47'(value : FLOAT)  { super.$$link(147, value) } 
set 'clip_str_47'(value : FLOAT)  { super.$$link(148, value) } 
set 'lora_name_48'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(149, value) } 
set 'model_str_48'(value : FLOAT)  { super.$$link(150, value) } 
set 'clip_str_48'(value : FLOAT)  { super.$$link(151, value) } 
set 'lora_name_49'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(152, value) } 
set 'model_str_49'(value : FLOAT)  { super.$$link(153, value) } 
set 'clip_str_49'(value : FLOAT)  { super.$$link(154, value) } 
set 'lora_name_50'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(155, value) } 
set 'model_str_50'(value : FLOAT)  { super.$$link(156, value) } 
set 'clip_str_50'(value : FLOAT)  { super.$$link(157, value) } 
set 'lora_stack'(value : LORA_STACK)  { super.$$link(158, value) } 

        //Getters
        get 'X or Y'() : XY { return [this, 'X or Y', 0]  as unknown as XY; }

        constructor(opts:{
            'input_mode': 'LoRA Names'|'LoRA Names+Weights'|'LoRA Batch','batch_path': STRING,'subdirectories': BOOLEAN,'batch_sort': 'ascending'|'descending','batch_max': INT,'lora_count': INT,'model_strength': FLOAT,'clip_strength': FLOAT,'lora_name_1': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_1': FLOAT,'clip_str_1': FLOAT,'lora_name_2': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_2': FLOAT,'clip_str_2': FLOAT,'lora_name_3': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_3': FLOAT,'clip_str_3': FLOAT,'lora_name_4': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_4': FLOAT,'clip_str_4': FLOAT,'lora_name_5': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_5': FLOAT,'clip_str_5': FLOAT,'lora_name_6': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_6': FLOAT,'clip_str_6': FLOAT,'lora_name_7': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_7': FLOAT,'clip_str_7': FLOAT,'lora_name_8': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_8': FLOAT,'clip_str_8': FLOAT,'lora_name_9': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_9': FLOAT,'clip_str_9': FLOAT,'lora_name_10': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_10': FLOAT,'clip_str_10': FLOAT,'lora_name_11': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_11': FLOAT,'clip_str_11': FLOAT,'lora_name_12': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_12': FLOAT,'clip_str_12': FLOAT,'lora_name_13': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_13': FLOAT,'clip_str_13': FLOAT,'lora_name_14': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_14': FLOAT,'clip_str_14': FLOAT,'lora_name_15': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_15': FLOAT,'clip_str_15': FLOAT,'lora_name_16': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_16': FLOAT,'clip_str_16': FLOAT,'lora_name_17': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_17': FLOAT,'clip_str_17': FLOAT,'lora_name_18': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_18': FLOAT,'clip_str_18': FLOAT,'lora_name_19': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_19': FLOAT,'clip_str_19': FLOAT,'lora_name_20': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_20': FLOAT,'clip_str_20': FLOAT,'lora_name_21': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_21': FLOAT,'clip_str_21': FLOAT,'lora_name_22': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_22': FLOAT,'clip_str_22': FLOAT,'lora_name_23': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_23': FLOAT,'clip_str_23': FLOAT,'lora_name_24': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_24': FLOAT,'clip_str_24': FLOAT,'lora_name_25': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_25': FLOAT,'clip_str_25': FLOAT,'lora_name_26': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_26': FLOAT,'clip_str_26': FLOAT,'lora_name_27': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_27': FLOAT,'clip_str_27': FLOAT,'lora_name_28': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_28': FLOAT,'clip_str_28': FLOAT,'lora_name_29': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_29': FLOAT,'clip_str_29': FLOAT,'lora_name_30': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_30': FLOAT,'clip_str_30': FLOAT,'lora_name_31': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_31': FLOAT,'clip_str_31': FLOAT,'lora_name_32': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_32': FLOAT,'clip_str_32': FLOAT,'lora_name_33': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_33': FLOAT,'clip_str_33': FLOAT,'lora_name_34': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_34': FLOAT,'clip_str_34': FLOAT,'lora_name_35': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_35': FLOAT,'clip_str_35': FLOAT,'lora_name_36': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_36': FLOAT,'clip_str_36': FLOAT,'lora_name_37': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_37': FLOAT,'clip_str_37': FLOAT,'lora_name_38': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_38': FLOAT,'clip_str_38': FLOAT,'lora_name_39': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_39': FLOAT,'clip_str_39': FLOAT,'lora_name_40': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_40': FLOAT,'clip_str_40': FLOAT,'lora_name_41': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_41': FLOAT,'clip_str_41': FLOAT,'lora_name_42': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_42': FLOAT,'clip_str_42': FLOAT,'lora_name_43': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_43': FLOAT,'clip_str_43': FLOAT,'lora_name_44': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_44': FLOAT,'clip_str_44': FLOAT,'lora_name_45': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_45': FLOAT,'clip_str_45': FLOAT,'lora_name_46': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_46': FLOAT,'clip_str_46': FLOAT,'lora_name_47': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_47': FLOAT,'clip_str_47': FLOAT,'lora_name_48': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_48': FLOAT,'clip_str_48': FLOAT,'lora_name_49': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_49': FLOAT,'clip_str_49': FLOAT,'lora_name_50': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_str_50': FLOAT,'clip_str_50': FLOAT,'lora_stack'?: LORA_STACK
        }){
            super(ctx);

            this['input_mode'] = opts['input_mode'];
this['batch_path'] = opts['batch_path'];
this['subdirectories'] = opts['subdirectories'];
this['batch_sort'] = opts['batch_sort'];
this['batch_max'] = opts['batch_max'];
this['lora_count'] = opts['lora_count'];
this['model_strength'] = opts['model_strength'];
this['clip_strength'] = opts['clip_strength'];
this['lora_name_1'] = opts['lora_name_1'];
this['model_str_1'] = opts['model_str_1'];
this['clip_str_1'] = opts['clip_str_1'];
this['lora_name_2'] = opts['lora_name_2'];
this['model_str_2'] = opts['model_str_2'];
this['clip_str_2'] = opts['clip_str_2'];
this['lora_name_3'] = opts['lora_name_3'];
this['model_str_3'] = opts['model_str_3'];
this['clip_str_3'] = opts['clip_str_3'];
this['lora_name_4'] = opts['lora_name_4'];
this['model_str_4'] = opts['model_str_4'];
this['clip_str_4'] = opts['clip_str_4'];
this['lora_name_5'] = opts['lora_name_5'];
this['model_str_5'] = opts['model_str_5'];
this['clip_str_5'] = opts['clip_str_5'];
this['lora_name_6'] = opts['lora_name_6'];
this['model_str_6'] = opts['model_str_6'];
this['clip_str_6'] = opts['clip_str_6'];
this['lora_name_7'] = opts['lora_name_7'];
this['model_str_7'] = opts['model_str_7'];
this['clip_str_7'] = opts['clip_str_7'];
this['lora_name_8'] = opts['lora_name_8'];
this['model_str_8'] = opts['model_str_8'];
this['clip_str_8'] = opts['clip_str_8'];
this['lora_name_9'] = opts['lora_name_9'];
this['model_str_9'] = opts['model_str_9'];
this['clip_str_9'] = opts['clip_str_9'];
this['lora_name_10'] = opts['lora_name_10'];
this['model_str_10'] = opts['model_str_10'];
this['clip_str_10'] = opts['clip_str_10'];
this['lora_name_11'] = opts['lora_name_11'];
this['model_str_11'] = opts['model_str_11'];
this['clip_str_11'] = opts['clip_str_11'];
this['lora_name_12'] = opts['lora_name_12'];
this['model_str_12'] = opts['model_str_12'];
this['clip_str_12'] = opts['clip_str_12'];
this['lora_name_13'] = opts['lora_name_13'];
this['model_str_13'] = opts['model_str_13'];
this['clip_str_13'] = opts['clip_str_13'];
this['lora_name_14'] = opts['lora_name_14'];
this['model_str_14'] = opts['model_str_14'];
this['clip_str_14'] = opts['clip_str_14'];
this['lora_name_15'] = opts['lora_name_15'];
this['model_str_15'] = opts['model_str_15'];
this['clip_str_15'] = opts['clip_str_15'];
this['lora_name_16'] = opts['lora_name_16'];
this['model_str_16'] = opts['model_str_16'];
this['clip_str_16'] = opts['clip_str_16'];
this['lora_name_17'] = opts['lora_name_17'];
this['model_str_17'] = opts['model_str_17'];
this['clip_str_17'] = opts['clip_str_17'];
this['lora_name_18'] = opts['lora_name_18'];
this['model_str_18'] = opts['model_str_18'];
this['clip_str_18'] = opts['clip_str_18'];
this['lora_name_19'] = opts['lora_name_19'];
this['model_str_19'] = opts['model_str_19'];
this['clip_str_19'] = opts['clip_str_19'];
this['lora_name_20'] = opts['lora_name_20'];
this['model_str_20'] = opts['model_str_20'];
this['clip_str_20'] = opts['clip_str_20'];
this['lora_name_21'] = opts['lora_name_21'];
this['model_str_21'] = opts['model_str_21'];
this['clip_str_21'] = opts['clip_str_21'];
this['lora_name_22'] = opts['lora_name_22'];
this['model_str_22'] = opts['model_str_22'];
this['clip_str_22'] = opts['clip_str_22'];
this['lora_name_23'] = opts['lora_name_23'];
this['model_str_23'] = opts['model_str_23'];
this['clip_str_23'] = opts['clip_str_23'];
this['lora_name_24'] = opts['lora_name_24'];
this['model_str_24'] = opts['model_str_24'];
this['clip_str_24'] = opts['clip_str_24'];
this['lora_name_25'] = opts['lora_name_25'];
this['model_str_25'] = opts['model_str_25'];
this['clip_str_25'] = opts['clip_str_25'];
this['lora_name_26'] = opts['lora_name_26'];
this['model_str_26'] = opts['model_str_26'];
this['clip_str_26'] = opts['clip_str_26'];
this['lora_name_27'] = opts['lora_name_27'];
this['model_str_27'] = opts['model_str_27'];
this['clip_str_27'] = opts['clip_str_27'];
this['lora_name_28'] = opts['lora_name_28'];
this['model_str_28'] = opts['model_str_28'];
this['clip_str_28'] = opts['clip_str_28'];
this['lora_name_29'] = opts['lora_name_29'];
this['model_str_29'] = opts['model_str_29'];
this['clip_str_29'] = opts['clip_str_29'];
this['lora_name_30'] = opts['lora_name_30'];
this['model_str_30'] = opts['model_str_30'];
this['clip_str_30'] = opts['clip_str_30'];
this['lora_name_31'] = opts['lora_name_31'];
this['model_str_31'] = opts['model_str_31'];
this['clip_str_31'] = opts['clip_str_31'];
this['lora_name_32'] = opts['lora_name_32'];
this['model_str_32'] = opts['model_str_32'];
this['clip_str_32'] = opts['clip_str_32'];
this['lora_name_33'] = opts['lora_name_33'];
this['model_str_33'] = opts['model_str_33'];
this['clip_str_33'] = opts['clip_str_33'];
this['lora_name_34'] = opts['lora_name_34'];
this['model_str_34'] = opts['model_str_34'];
this['clip_str_34'] = opts['clip_str_34'];
this['lora_name_35'] = opts['lora_name_35'];
this['model_str_35'] = opts['model_str_35'];
this['clip_str_35'] = opts['clip_str_35'];
this['lora_name_36'] = opts['lora_name_36'];
this['model_str_36'] = opts['model_str_36'];
this['clip_str_36'] = opts['clip_str_36'];
this['lora_name_37'] = opts['lora_name_37'];
this['model_str_37'] = opts['model_str_37'];
this['clip_str_37'] = opts['clip_str_37'];
this['lora_name_38'] = opts['lora_name_38'];
this['model_str_38'] = opts['model_str_38'];
this['clip_str_38'] = opts['clip_str_38'];
this['lora_name_39'] = opts['lora_name_39'];
this['model_str_39'] = opts['model_str_39'];
this['clip_str_39'] = opts['clip_str_39'];
this['lora_name_40'] = opts['lora_name_40'];
this['model_str_40'] = opts['model_str_40'];
this['clip_str_40'] = opts['clip_str_40'];
this['lora_name_41'] = opts['lora_name_41'];
this['model_str_41'] = opts['model_str_41'];
this['clip_str_41'] = opts['clip_str_41'];
this['lora_name_42'] = opts['lora_name_42'];
this['model_str_42'] = opts['model_str_42'];
this['clip_str_42'] = opts['clip_str_42'];
this['lora_name_43'] = opts['lora_name_43'];
this['model_str_43'] = opts['model_str_43'];
this['clip_str_43'] = opts['clip_str_43'];
this['lora_name_44'] = opts['lora_name_44'];
this['model_str_44'] = opts['model_str_44'];
this['clip_str_44'] = opts['clip_str_44'];
this['lora_name_45'] = opts['lora_name_45'];
this['model_str_45'] = opts['model_str_45'];
this['clip_str_45'] = opts['clip_str_45'];
this['lora_name_46'] = opts['lora_name_46'];
this['model_str_46'] = opts['model_str_46'];
this['clip_str_46'] = opts['clip_str_46'];
this['lora_name_47'] = opts['lora_name_47'];
this['model_str_47'] = opts['model_str_47'];
this['clip_str_47'] = opts['clip_str_47'];
this['lora_name_48'] = opts['lora_name_48'];
this['model_str_48'] = opts['model_str_48'];
this['clip_str_48'] = opts['clip_str_48'];
this['lora_name_49'] = opts['lora_name_49'];
this['model_str_49'] = opts['model_str_49'];
this['clip_str_49'] = opts['clip_str_49'];
this['lora_name_50'] = opts['lora_name_50'];
this['model_str_50'] = opts['model_str_50'];
this['clip_str_50'] = opts['clip_str_50']
            if(opts['lora_stack']!==undefined) this['lora_stack'] = opts['lora_stack']

        }

        static defaults = {
            'batch_path':  "/example_folder",
'subdirectories':  false,
'batch_max':  -1,
'lora_count':  3,
'model_strength':  1,
'clip_strength':  1,
'model_str_1':  1,
'clip_str_1':  1,
'model_str_2':  1,
'clip_str_2':  1,
'model_str_3':  1,
'clip_str_3':  1,
'model_str_4':  1,
'clip_str_4':  1,
'model_str_5':  1,
'clip_str_5':  1,
'model_str_6':  1,
'clip_str_6':  1,
'model_str_7':  1,
'clip_str_7':  1,
'model_str_8':  1,
'clip_str_8':  1,
'model_str_9':  1,
'clip_str_9':  1,
'model_str_10':  1,
'clip_str_10':  1,
'model_str_11':  1,
'clip_str_11':  1,
'model_str_12':  1,
'clip_str_12':  1,
'model_str_13':  1,
'clip_str_13':  1,
'model_str_14':  1,
'clip_str_14':  1,
'model_str_15':  1,
'clip_str_15':  1,
'model_str_16':  1,
'clip_str_16':  1,
'model_str_17':  1,
'clip_str_17':  1,
'model_str_18':  1,
'clip_str_18':  1,
'model_str_19':  1,
'clip_str_19':  1,
'model_str_20':  1,
'clip_str_20':  1,
'model_str_21':  1,
'clip_str_21':  1,
'model_str_22':  1,
'clip_str_22':  1,
'model_str_23':  1,
'clip_str_23':  1,
'model_str_24':  1,
'clip_str_24':  1,
'model_str_25':  1,
'clip_str_25':  1,
'model_str_26':  1,
'clip_str_26':  1,
'model_str_27':  1,
'clip_str_27':  1,
'model_str_28':  1,
'clip_str_28':  1,
'model_str_29':  1,
'clip_str_29':  1,
'model_str_30':  1,
'clip_str_30':  1,
'model_str_31':  1,
'clip_str_31':  1,
'model_str_32':  1,
'clip_str_32':  1,
'model_str_33':  1,
'clip_str_33':  1,
'model_str_34':  1,
'clip_str_34':  1,
'model_str_35':  1,
'clip_str_35':  1,
'model_str_36':  1,
'clip_str_36':  1,
'model_str_37':  1,
'clip_str_37':  1,
'model_str_38':  1,
'clip_str_38':  1,
'model_str_39':  1,
'clip_str_39':  1,
'model_str_40':  1,
'clip_str_40':  1,
'model_str_41':  1,
'clip_str_41':  1,
'model_str_42':  1,
'clip_str_42':  1,
'model_str_43':  1,
'clip_str_43':  1,
'model_str_44':  1,
'clip_str_44':  1,
'model_str_45':  1,
'clip_str_45':  1,
'model_str_46':  1,
'clip_str_46':  1,
'model_str_47':  1,
'clip_str_47':  1,
'model_str_48':  1,
'clip_str_48':  1,
'model_str_49':  1,
'clip_str_49':  1,
'model_str_50':  1,
'clip_str_50':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'XY Input: LoRA Plot' : class extends Node{
        //Setters
        set 'input_mode'(value : 'X: LoRA Batch, Y: LoRA Weight'|'X: LoRA Batch, Y: Model Strength'|'X: LoRA Batch, Y: Clip Strength'|'X: Model Strength, Y: Clip Strength')  { super.$$link(0, value) } 
set 'lora_name'(value : 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(1, value) } 
set 'model_strength'(value : FLOAT)  { super.$$link(2, value) } 
set 'clip_strength'(value : FLOAT)  { super.$$link(3, value) } 
set 'X_batch_count'(value : INT)  { super.$$link(4, value) } 
set 'X_batch_path'(value : STRING)  { super.$$link(5, value) } 
set 'X_subdirectories'(value : BOOLEAN)  { super.$$link(6, value) } 
set 'X_batch_sort'(value : 'ascending'|'descending')  { super.$$link(7, value) } 
set 'X_first_value'(value : FLOAT)  { super.$$link(8, value) } 
set 'X_last_value'(value : FLOAT)  { super.$$link(9, value) } 
set 'Y_batch_count'(value : INT)  { super.$$link(10, value) } 
set 'Y_first_value'(value : FLOAT)  { super.$$link(11, value) } 
set 'Y_last_value'(value : FLOAT)  { super.$$link(12, value) } 
set 'lora_stack'(value : LORA_STACK)  { super.$$link(13, value) } 

        //Getters
        get 'X'() : XY { return [this, 'X', 0]  as unknown as XY; }
get 'Y'() : XY { return [this, 'Y', 1]  as unknown as XY; }

        constructor(opts:{
            'input_mode': 'X: LoRA Batch, Y: LoRA Weight'|'X: LoRA Batch, Y: Model Strength'|'X: LoRA Batch, Y: Clip Strength'|'X: Model Strength, Y: Clip Strength','lora_name': 'None'|'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','model_strength': FLOAT,'clip_strength': FLOAT,'X_batch_count': INT,'X_batch_path': STRING,'X_subdirectories': BOOLEAN,'X_batch_sort': 'ascending'|'descending','X_first_value': FLOAT,'X_last_value': FLOAT,'Y_batch_count': INT,'Y_first_value': FLOAT,'Y_last_value': FLOAT,'lora_stack'?: LORA_STACK
        }){
            super(ctx);

            this['input_mode'] = opts['input_mode'];
this['lora_name'] = opts['lora_name'];
this['model_strength'] = opts['model_strength'];
this['clip_strength'] = opts['clip_strength'];
this['X_batch_count'] = opts['X_batch_count'];
this['X_batch_path'] = opts['X_batch_path'];
this['X_subdirectories'] = opts['X_subdirectories'];
this['X_batch_sort'] = opts['X_batch_sort'];
this['X_first_value'] = opts['X_first_value'];
this['X_last_value'] = opts['X_last_value'];
this['Y_batch_count'] = opts['Y_batch_count'];
this['Y_first_value'] = opts['Y_first_value'];
this['Y_last_value'] = opts['Y_last_value']
            if(opts['lora_stack']!==undefined) this['lora_stack'] = opts['lora_stack']

        }

        static defaults = {
            'model_strength':  1,
'clip_strength':  1,
'X_batch_count':  3,
'X_batch_path':  "/example_folder",
'X_subdirectories':  false,
'X_first_value':  0,
'X_last_value':  1,
'Y_batch_count':  3,
'Y_first_value':  0,
'Y_last_value':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'XY Input: LoRA Stacks' : class extends Node{
        //Setters
        set 'node_state'(value : 'Enabled')  { super.$$link(0, value) } 
set 'lora_stack_1'(value : LORA_STACK)  { super.$$link(1, value) } 
set 'lora_stack_2'(value : LORA_STACK)  { super.$$link(2, value) } 
set 'lora_stack_3'(value : LORA_STACK)  { super.$$link(3, value) } 
set 'lora_stack_4'(value : LORA_STACK)  { super.$$link(4, value) } 
set 'lora_stack_5'(value : LORA_STACK)  { super.$$link(5, value) } 

        //Getters
        get 'X or Y'() : XY { return [this, 'X or Y', 0]  as unknown as XY; }

        constructor(opts:{
            'node_state': 'Enabled','lora_stack_1'?: LORA_STACK,'lora_stack_2'?: LORA_STACK,'lora_stack_3'?: LORA_STACK,'lora_stack_4'?: LORA_STACK,'lora_stack_5'?: LORA_STACK
        }){
            super(ctx);

            this['node_state'] = opts['node_state']
            if(opts['lora_stack_1']!==undefined) this['lora_stack_1'] = opts['lora_stack_1'];
if(opts['lora_stack_2']!==undefined) this['lora_stack_2'] = opts['lora_stack_2'];
if(opts['lora_stack_3']!==undefined) this['lora_stack_3'] = opts['lora_stack_3'];
if(opts['lora_stack_4']!==undefined) this['lora_stack_4'] = opts['lora_stack_4'];
if(opts['lora_stack_5']!==undefined) this['lora_stack_5'] = opts['lora_stack_5']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'XY Input: Control Net' : class extends Node{
        //Setters
        set 'control_net'(value : CONTROL_NET)  { super.$$link(0, value) } 
set 'image'(value : IMAGE)  { super.$$link(1, value) } 
set 'target_parameter'(value : 'strength'|'start_percent'|'end_percent')  { super.$$link(2, value) } 
set 'batch_count'(value : INT)  { super.$$link(3, value) } 
set 'first_strength'(value : FLOAT)  { super.$$link(4, value) } 
set 'last_strength'(value : FLOAT)  { super.$$link(5, value) } 
set 'first_start_percent'(value : FLOAT)  { super.$$link(6, value) } 
set 'last_start_percent'(value : FLOAT)  { super.$$link(7, value) } 
set 'first_end_percent'(value : FLOAT)  { super.$$link(8, value) } 
set 'last_end_percent'(value : FLOAT)  { super.$$link(9, value) } 
set 'strength'(value : FLOAT)  { super.$$link(10, value) } 
set 'start_percent'(value : FLOAT)  { super.$$link(11, value) } 
set 'end_percent'(value : FLOAT)  { super.$$link(12, value) } 
set 'cnet_stack'(value : CONTROL_NET_STACK)  { super.$$link(13, value) } 

        //Getters
        get 'X or Y'() : XY { return [this, 'X or Y', 0]  as unknown as XY; }

        constructor(opts:{
            'control_net': CONTROL_NET,'image': IMAGE,'target_parameter': 'strength'|'start_percent'|'end_percent','batch_count': INT,'first_strength': FLOAT,'last_strength': FLOAT,'first_start_percent': FLOAT,'last_start_percent': FLOAT,'first_end_percent': FLOAT,'last_end_percent': FLOAT,'strength': FLOAT,'start_percent': FLOAT,'end_percent': FLOAT,'cnet_stack'?: CONTROL_NET_STACK
        }){
            super(ctx);

            this['control_net'] = opts['control_net'];
this['image'] = opts['image'];
this['target_parameter'] = opts['target_parameter'];
this['batch_count'] = opts['batch_count'];
this['first_strength'] = opts['first_strength'];
this['last_strength'] = opts['last_strength'];
this['first_start_percent'] = opts['first_start_percent'];
this['last_start_percent'] = opts['last_start_percent'];
this['first_end_percent'] = opts['first_end_percent'];
this['last_end_percent'] = opts['last_end_percent'];
this['strength'] = opts['strength'];
this['start_percent'] = opts['start_percent'];
this['end_percent'] = opts['end_percent']
            if(opts['cnet_stack']!==undefined) this['cnet_stack'] = opts['cnet_stack']

        }

        static defaults = {
            'batch_count':  3,
'first_strength':  0,
'last_strength':  1,
'first_start_percent':  0,
'last_start_percent':  1,
'first_end_percent':  0,
'last_end_percent':  1,
'strength':  1,
'start_percent':  0,
'end_percent':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'XY Input: Control Net Plot' : class extends Node{
        //Setters
        set 'control_net'(value : CONTROL_NET)  { super.$$link(0, value) } 
set 'image'(value : IMAGE)  { super.$$link(1, value) } 
set 'plot_type'(value : 'X: Strength, Y: Start%'|'X: Strength, Y: End%'|'X: Start%, Y: Strength'|'X: Start%, Y: End%'|'X: End%, Y: Strength'|'X: End%, Y: Start%')  { super.$$link(2, value) } 
set 'strength'(value : FLOAT)  { super.$$link(3, value) } 
set 'start_percent'(value : FLOAT)  { super.$$link(4, value) } 
set 'end_percent'(value : FLOAT)  { super.$$link(5, value) } 
set 'X_batch_count'(value : INT)  { super.$$link(6, value) } 
set 'X_first_value'(value : FLOAT)  { super.$$link(7, value) } 
set 'X_last_value'(value : FLOAT)  { super.$$link(8, value) } 
set 'Y_batch_count'(value : INT)  { super.$$link(9, value) } 
set 'Y_first_value'(value : FLOAT)  { super.$$link(10, value) } 
set 'Y_last_value'(value : FLOAT)  { super.$$link(11, value) } 
set 'cnet_stack'(value : CONTROL_NET_STACK)  { super.$$link(12, value) } 

        //Getters
        get 'X'() : XY { return [this, 'X', 0]  as unknown as XY; }
get 'Y'() : XY { return [this, 'Y', 1]  as unknown as XY; }

        constructor(opts:{
            'control_net': CONTROL_NET,'image': IMAGE,'plot_type': 'X: Strength, Y: Start%'|'X: Strength, Y: End%'|'X: Start%, Y: Strength'|'X: Start%, Y: End%'|'X: End%, Y: Strength'|'X: End%, Y: Start%','strength': FLOAT,'start_percent': FLOAT,'end_percent': FLOAT,'X_batch_count': INT,'X_first_value': FLOAT,'X_last_value': FLOAT,'Y_batch_count': INT,'Y_first_value': FLOAT,'Y_last_value': FLOAT,'cnet_stack'?: CONTROL_NET_STACK
        }){
            super(ctx);

            this['control_net'] = opts['control_net'];
this['image'] = opts['image'];
this['plot_type'] = opts['plot_type'];
this['strength'] = opts['strength'];
this['start_percent'] = opts['start_percent'];
this['end_percent'] = opts['end_percent'];
this['X_batch_count'] = opts['X_batch_count'];
this['X_first_value'] = opts['X_first_value'];
this['X_last_value'] = opts['X_last_value'];
this['Y_batch_count'] = opts['Y_batch_count'];
this['Y_first_value'] = opts['Y_first_value'];
this['Y_last_value'] = opts['Y_last_value']
            if(opts['cnet_stack']!==undefined) this['cnet_stack'] = opts['cnet_stack']

        }

        static defaults = {
            'strength':  1,
'start_percent':  0,
'end_percent':  1,
'X_batch_count':  3,
'X_first_value':  0,
'X_last_value':  1,
'Y_batch_count':  3,
'Y_first_value':  0,
'Y_last_value':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'XY Input: Manual XY Entry' : class extends Node{
        //Setters
        set 'plot_type'(value : 'Nothing'|'Seeds++ Batch'|'Steps'|'StartStep'|'EndStep'|'CFG Scale'|'Sampler'|'Scheduler'|'Denoise'|'VAE'|'Positive Prompt S/R'|'Negative Prompt S/R'|'Checkpoint'|'Clip Skip'|'LoRA')  { super.$$link(0, value) } 
set 'plot_value'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        get 'X or Y'() : XY { return [this, 'X or Y', 0]  as unknown as XY; }

        constructor(opts:{
            'plot_type': 'Nothing'|'Seeds++ Batch'|'Steps'|'StartStep'|'EndStep'|'CFG Scale'|'Sampler'|'Scheduler'|'Denoise'|'VAE'|'Positive Prompt S/R'|'Negative Prompt S/R'|'Checkpoint'|'Clip Skip'|'LoRA','plot_value': STRING
        }){
            super(ctx);

            this['plot_type'] = opts['plot_type'];
this['plot_value'] = opts['plot_value']
            

        }

        static defaults = {
            'plot_value':  ""
}
},

    /**
     * TODO Docs based on metadata
     */
    'Manual XY Entry Info' : class extends Node{
        //Setters
        set 'notes'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        

        constructor(opts:{
            'notes': STRING
        }){
            super(ctx);

            this['notes'] = opts['notes']
            

        }

        static defaults = {
            'notes':  "_____________SYNTAX_____________\n(X/Y_types)     (X/Y_values)\nSeeds++ Batch   batch_count\nSteps           steps_1;steps_2;...\nStartStep       start_step_1;start_step_2;...\nEndStep         end_step_1;end_step_2;...\nCFG Scale       cfg_1;cfg_2;...\nSampler(1)      sampler_1;sampler_2;...\nSampler(2)      sampler_1,scheduler_1;...\nSampler(3)      sampler_1;...;,default_scheduler\nScheduler       scheduler_1;scheduler_2;...\nDenoise         denoise_1;denoise_2;...\nVAE             vae_1;vae_2;vae_3;...\n+Prompt S/R     search_txt;replace_1;replace_2;...\n-Prompt S/R     search_txt;replace_1;replace_2;...\nCheckpoint(1)   ckpt_1;ckpt_2;ckpt_3;...\nCheckpoint(2)   ckpt_1,clip_skip_1;...\nCheckpoint(3)   ckpt_1;ckpt_2;...;,default_clip_skip\nClip Skip       clip_skip_1;clip_skip_2;...\nLoRA(1)         lora_1;lora_2;lora_3;...\nLoRA(2)         lora_1;...;,default_model_str,default_clip_str\nLoRA(3)         lora_1,model_str_1,clip_str_1;...\n\n____________SAMPLERS____________\neuler;\neuler_cfg_pp;\neuler_ancestral;\neuler_ancestral_cfg_pp;\nheun;\nheunpp2;\ndpm_2;\ndpm_2_ancestral;\nlms;\ndpm_fast;\ndpm_adaptive;\ndpmpp_2s_ancestral;\ndpmpp_sde;\ndpmpp_sde_gpu;\ndpmpp_2m;\ndpmpp_2m_sde;\ndpmpp_2m_sde_gpu;\ndpmpp_3m_sde;\ndpmpp_3m_sde_gpu;\nddpm;\nlcm;\nipndm;\nipndm_v;\ndeis;\nddim;\nuni_pc;\nuni_pc_bh2\n\n___________SCHEDULERS___________\nnormal;\nkarras;\nexponential;\nsgm_uniform;\nsimple;\nddim_uniform;\nAYS SD1;\nAYS SDXL;\nAYS SVD\n\n_____________VAES_______________\norangemix.vae.pt;\nsd-vae-ft-ema/diffusion_pytorch_model.bin\n\n___________CHECKPOINTS__________\nCrystal-PR_rc2.safetensors;\nPixArt-XL-2-1024-MS.pth;\nanimagineXLV3_v30.safetensors;\ndreamshaper_8.safetensors;\njuggernautXL_version6Rundiffusion.safetensors;\nmanmaruMix_v10.safetensors;\npettankoRouramashin_v10.safetensors;\nponyrealismV21VAE.kLac.safetensors;\nrealisticVisionV51_v51VAE.safetensors;\nsd_xl_base_0.9.safetensors;\nsd_xl_base_1.0_0.9vae.safetensors;\nsd_xl_refiner_0.9.safetensors;\nsd_xl_refiner_1.0_0.9vae.safetensors;\nuncannyafPonyxl_uncannyafPonyxl.safetensors\n\n_____________LORAS______________\nipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors;\nipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors;\nipadapter/ip-adapter-faceid_sd15_lora.safetensors;\nlcm-lora-sdv1-5.safetensors;\nlcm-lora-sdxl.safetensors;\nlcm/SD1.5/pytorch_lora_weights.safetensors;\nlcm/SDXL/pytorch_lora_weights.safetensors;\nlcm/SSD-1B/pytorch_lora_weights.safetensors;\nsd_xl_offset_example-lora_1.0.safetensors;\nsdxl/pxx4_v1_alpha.safetensors;\nsdxl/xl_shuimo-000012.safetensors;\nslider-concepts/age.pt;\nslider-concepts/cartoon_style.pt;\nslider-concepts/chubby.pt;\nslider-concepts/clay_style.pt;\nslider-concepts/cluttered_room.pt;\nslider-concepts/curlyhair.pt;\nslider-concepts/dark_weather.pt;\nslider-concepts/eyebrow.pt;\nslider-concepts/eyesize.pt;\nslider-concepts/festive.pt;\nslider-concepts/fix_hands.pt;\nslider-concepts/long_hair.pt;\nslider-concepts/muscular.pt;\nslider-concepts/pixar_style.pt;\nslider-concepts/professional.pt;\nslider-concepts/repair_slider.pt;\nslider-concepts/sculpture_style.pt;\nslider-concepts/smiling.pt;\nslider-concepts/stylegan_latent1.pt;\nslider-concepts/stylegan_latent2.pt;\nslider-concepts/suprised_look.pt;\nslider-concepts/tropical_weather.pt;\nslider-concepts/winter_weather.pt\n"
}
},

    /**
     * TODO Docs based on metadata
     */
    'Join XY Inputs of Same Type' : class extends Node{
        //Setters
        set 'XY_1'(value : XY)  { super.$$link(0, value) } 
set 'XY_2'(value : XY)  { super.$$link(1, value) } 

        //Getters
        get 'X or Y'() : XY { return [this, 'X or Y', 0]  as unknown as XY; }

        constructor(opts:{
            'XY_1': XY,'XY_2': XY
        }){
            super(ctx);

            this['XY_1'] = opts['XY_1'];
this['XY_2'] = opts['XY_2']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Image Overlay' : class extends Node{
        //Setters
        set 'base_image'(value : IMAGE)  { super.$$link(0, value) } 
set 'overlay_image'(value : IMAGE)  { super.$$link(1, value) } 
set 'overlay_resize'(value : 'None'|'Fit'|'Resize by rescale_factor'|'Resize to width & heigth')  { super.$$link(2, value) } 
set 'resize_method'(value : 'nearest-exact'|'bilinear'|'area')  { super.$$link(3, value) } 
set 'rescale_factor'(value : FLOAT)  { super.$$link(4, value) } 
set 'width'(value : INT)  { super.$$link(5, value) } 
set 'height'(value : INT)  { super.$$link(6, value) } 
set 'x_offset'(value : INT)  { super.$$link(7, value) } 
set 'y_offset'(value : INT)  { super.$$link(8, value) } 
set 'rotation'(value : INT)  { super.$$link(9, value) } 
set 'opacity'(value : FLOAT)  { super.$$link(10, value) } 
set 'optional_mask'(value : MASK)  { super.$$link(11, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'base_image': IMAGE,'overlay_image': IMAGE,'overlay_resize': 'None'|'Fit'|'Resize by rescale_factor'|'Resize to width & heigth','resize_method': 'nearest-exact'|'bilinear'|'area','rescale_factor': FLOAT,'width': INT,'height': INT,'x_offset': INT,'y_offset': INT,'rotation': INT,'opacity': FLOAT,'optional_mask'?: MASK
        }){
            super(ctx);

            this['base_image'] = opts['base_image'];
this['overlay_image'] = opts['overlay_image'];
this['overlay_resize'] = opts['overlay_resize'];
this['resize_method'] = opts['resize_method'];
this['rescale_factor'] = opts['rescale_factor'];
this['width'] = opts['width'];
this['height'] = opts['height'];
this['x_offset'] = opts['x_offset'];
this['y_offset'] = opts['y_offset'];
this['rotation'] = opts['rotation'];
this['opacity'] = opts['opacity']
            if(opts['optional_mask']!==undefined) this['optional_mask'] = opts['optional_mask']

        }

        static defaults = {
            'rescale_factor':  1,
'width':  512,
'height':  512,
'x_offset':  0,
'y_offset':  0,
'rotation':  0,
'opacity':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Noise Control Script' : class extends Node{
        //Setters
        set 'rng_source'(value : 'cpu'|'gpu'|'nv')  { super.$$link(0, value) } 
set 'cfg_denoiser'(value : BOOLEAN)  { super.$$link(1, value) } 
set 'add_seed_noise'(value : BOOLEAN)  { super.$$link(2, value) } 
set 'seed'(value : INT)  { super.$$link(3, value) } 
set 'weight'(value : FLOAT)  { super.$$link(4, value) } 
set 'script'(value : SCRIPT)  { super.$$link(5, value) } 

        //Getters
        get 'SCRIPT'() : SCRIPT { return [this, 'SCRIPT', 0]  as unknown as SCRIPT; }

        constructor(opts:{
            'rng_source': 'cpu'|'gpu'|'nv','cfg_denoiser': BOOLEAN,'add_seed_noise': BOOLEAN,'seed': INT,'weight': FLOAT,'script'?: SCRIPT
        }){
            super(ctx);

            this['rng_source'] = opts['rng_source'];
this['cfg_denoiser'] = opts['cfg_denoiser'];
this['add_seed_noise'] = opts['add_seed_noise'];
this['seed'] = opts['seed'];
this['weight'] = opts['weight']
            if(opts['script']!==undefined) this['script'] = opts['script']

        }

        static defaults = {
            'cfg_denoiser':  false,
'add_seed_noise':  false,
'seed':  0,
'weight':  0.015
}
},

    /**
     * TODO Docs based on metadata
     */
    'HighRes-Fix Script' : class extends Node{
        //Setters
        set 'upscale_type'(value : 'latent'|'pixel'|'both')  { super.$$link(0, value) } 
set 'hires_ckpt_name'(value : '(use same)'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(1, value) } 
set 'latent_upscaler'(value : 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp'|'city96.v1'|'city96.xl'|'ttl_nn.SDXL'|'ttl_nn.SD 1.x')  { super.$$link(2, value) } 
set 'pixel_upscaler'(value : '4x_NMKD-Superscale-SP_178000_G.pth'|'HAT_SRx4_ImageNet-pretrain.pth'|'Real_HAT_GAN_sharper.pth')  { super.$$link(3, value) } 
set 'upscale_by'(value : FLOAT)  { super.$$link(4, value) } 
set 'use_same_seed'(value : BOOLEAN)  { super.$$link(5, value) } 
set 'seed'(value : INT)  { super.$$link(6, value) } 
set 'hires_steps'(value : INT)  { super.$$link(7, value) } 
set 'denoise'(value : FLOAT)  { super.$$link(8, value) } 
set 'iterations'(value : INT)  { super.$$link(9, value) } 
set 'use_controlnet'(value : BOOLEAN)  { super.$$link(10, value) } 
set 'control_net_name'(value : 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors')  { super.$$link(11, value) } 
set 'strength'(value : FLOAT)  { super.$$link(12, value) } 
set 'preprocessor'(value : 'none'|'TilePreprocessor'|'TTPlanet_TileGF_Preprocessor'|'TTPlanet_TileSimple_Preprocessor'|'BAE-NormalMapPreprocessor'|'DensePosePreprocessor'|'PiDiNetPreprocessor'|'ScribblePreprocessor'|'Scribble_XDoG_Preprocessor'|'Scribble_PiDiNet_Preprocessor'|'SAMPreprocessor'|'LineartStandardPreprocessor'|'DSINE-NormalMapPreprocessor'|'TEEDPreprocessor'|'M-LSDPreprocessor'|'AnyLineArtPreprocessor_aux'|'Zoe-DepthMapPreprocessor'|'Metric3D-DepthMapPreprocessor'|'Metric3D-NormalMapPreprocessor'|'DWPreprocessor'|'AnimalPosePreprocessor'|'HEDPreprocessor'|'FakeScribblePreprocessor'|'ColorPreprocessor'|'MeshGraphormer-DepthMapPreprocessor'|'MeshGraphormer+ImpactDetector-DepthMapPreprocessor'|'ImageLuminanceDetector'|'ImageIntensityDetector'|'LineArtPreprocessor'|'MediaPipe-FaceMeshPreprocessor'|'BinaryPreprocessor'|'OneFormer-COCO-SemSegPreprocessor'|'OneFormer-ADE20K-SemSegPreprocessor'|'Unimatch_OptFlowPreprocessor'|'MaskOptFlow'|'AnimeFace_SemSegPreprocessor'|'SavePoseKpsAsJsonFile'|'FacialPartColoringFromPoseKps'|'UpperBodyTrackingFromPoseKps'|'RenderPeopleKps'|'RenderAnimalKps'|'ShufflePreprocessor'|'CannyEdgePreprocessor'|'OpenposePreprocessor'|'DepthAnythingPreprocessor'|'Zoe_DepthAnythingPreprocessor'|'DepthAnythingV2Preprocessor'|'DiffusionEdge_Preprocessor'|'UniFormer-SemSegPreprocessor'|'SemSegPreprocessor'|'LeReS-DepthMapPreprocessor'|'Manga2Anime_LineArt_Preprocessor'|'MiDaS-NormalMapPreprocessor'|'MiDaS-DepthMapPreprocessor'|'AnimeLineArtPreprocessor')  { super.$$link(13, value) } 
set 'preprocessor_imgs'(value : BOOLEAN)  { super.$$link(14, value) } 
set 'script'(value : SCRIPT)  { super.$$link(15, value) } 

        //Getters
        get 'SCRIPT'() : SCRIPT { return [this, 'SCRIPT', 0]  as unknown as SCRIPT; }

        constructor(opts:{
            'upscale_type': 'latent'|'pixel'|'both','hires_ckpt_name': '(use same)'|'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','latent_upscaler': 'nearest-exact'|'bilinear'|'area'|'bicubic'|'bislerp'|'city96.v1'|'city96.xl'|'ttl_nn.SDXL'|'ttl_nn.SD 1.x','pixel_upscaler': '4x_NMKD-Superscale-SP_178000_G.pth'|'HAT_SRx4_ImageNet-pretrain.pth'|'Real_HAT_GAN_sharper.pth','upscale_by': FLOAT,'use_same_seed': BOOLEAN,'seed': INT,'hires_steps': INT,'denoise': FLOAT,'iterations': INT,'use_controlnet': BOOLEAN,'control_net_name': 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors','strength': FLOAT,'preprocessor': 'none'|'TilePreprocessor'|'TTPlanet_TileGF_Preprocessor'|'TTPlanet_TileSimple_Preprocessor'|'BAE-NormalMapPreprocessor'|'DensePosePreprocessor'|'PiDiNetPreprocessor'|'ScribblePreprocessor'|'Scribble_XDoG_Preprocessor'|'Scribble_PiDiNet_Preprocessor'|'SAMPreprocessor'|'LineartStandardPreprocessor'|'DSINE-NormalMapPreprocessor'|'TEEDPreprocessor'|'M-LSDPreprocessor'|'AnyLineArtPreprocessor_aux'|'Zoe-DepthMapPreprocessor'|'Metric3D-DepthMapPreprocessor'|'Metric3D-NormalMapPreprocessor'|'DWPreprocessor'|'AnimalPosePreprocessor'|'HEDPreprocessor'|'FakeScribblePreprocessor'|'ColorPreprocessor'|'MeshGraphormer-DepthMapPreprocessor'|'MeshGraphormer+ImpactDetector-DepthMapPreprocessor'|'ImageLuminanceDetector'|'ImageIntensityDetector'|'LineArtPreprocessor'|'MediaPipe-FaceMeshPreprocessor'|'BinaryPreprocessor'|'OneFormer-COCO-SemSegPreprocessor'|'OneFormer-ADE20K-SemSegPreprocessor'|'Unimatch_OptFlowPreprocessor'|'MaskOptFlow'|'AnimeFace_SemSegPreprocessor'|'SavePoseKpsAsJsonFile'|'FacialPartColoringFromPoseKps'|'UpperBodyTrackingFromPoseKps'|'RenderPeopleKps'|'RenderAnimalKps'|'ShufflePreprocessor'|'CannyEdgePreprocessor'|'OpenposePreprocessor'|'DepthAnythingPreprocessor'|'Zoe_DepthAnythingPreprocessor'|'DepthAnythingV2Preprocessor'|'DiffusionEdge_Preprocessor'|'UniFormer-SemSegPreprocessor'|'SemSegPreprocessor'|'LeReS-DepthMapPreprocessor'|'Manga2Anime_LineArt_Preprocessor'|'MiDaS-NormalMapPreprocessor'|'MiDaS-DepthMapPreprocessor'|'AnimeLineArtPreprocessor','preprocessor_imgs': BOOLEAN,'script'?: SCRIPT
        }){
            super(ctx);

            this['upscale_type'] = opts['upscale_type'];
this['hires_ckpt_name'] = opts['hires_ckpt_name'];
this['latent_upscaler'] = opts['latent_upscaler'];
this['pixel_upscaler'] = opts['pixel_upscaler'];
this['upscale_by'] = opts['upscale_by'];
this['use_same_seed'] = opts['use_same_seed'];
this['seed'] = opts['seed'];
this['hires_steps'] = opts['hires_steps'];
this['denoise'] = opts['denoise'];
this['iterations'] = opts['iterations'];
this['use_controlnet'] = opts['use_controlnet'];
this['control_net_name'] = opts['control_net_name'];
this['strength'] = opts['strength'];
this['preprocessor'] = opts['preprocessor'];
this['preprocessor_imgs'] = opts['preprocessor_imgs']
            if(opts['script']!==undefined) this['script'] = opts['script']

        }

        static defaults = {
            'upscale_by':  1.25,
'use_same_seed':  true,
'seed':  0,
'hires_steps':  12,
'denoise':  0.56,
'iterations':  1,
'use_controlnet':  false,
'strength':  1,
'preprocessor':  "none",
'preprocessor_imgs':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'Tiled Upscaler Script' : class extends Node{
        //Setters
        set 'upscale_by'(value : FLOAT)  { super.$$link(0, value) } 
set 'tile_size'(value : INT)  { super.$$link(1, value) } 
set 'tiling_strategy'(value : 'random'|'random strict'|'padded'|'simple'|'none')  { super.$$link(2, value) } 
set 'tiling_steps'(value : INT)  { super.$$link(3, value) } 
set 'seed'(value : INT)  { super.$$link(4, value) } 
set 'denoise'(value : FLOAT)  { super.$$link(5, value) } 
set 'use_controlnet'(value : BOOLEAN)  { super.$$link(6, value) } 
set 'tile_controlnet'(value : 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors')  { super.$$link(7, value) } 
set 'strength'(value : FLOAT)  { super.$$link(8, value) } 
set 'script'(value : SCRIPT)  { super.$$link(9, value) } 

        //Getters
        get 'SCRIPT'() : SCRIPT { return [this, 'SCRIPT', 0]  as unknown as SCRIPT; }

        constructor(opts:{
            'upscale_by': FLOAT,'tile_size': INT,'tiling_strategy': 'random'|'random strict'|'padded'|'simple'|'none','tiling_steps': INT,'seed': INT,'denoise': FLOAT,'use_controlnet': BOOLEAN,'tile_controlnet': 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors','strength': FLOAT,'script'?: SCRIPT
        }){
            super(ctx);

            this['upscale_by'] = opts['upscale_by'];
this['tile_size'] = opts['tile_size'];
this['tiling_strategy'] = opts['tiling_strategy'];
this['tiling_steps'] = opts['tiling_steps'];
this['seed'] = opts['seed'];
this['denoise'] = opts['denoise'];
this['use_controlnet'] = opts['use_controlnet'];
this['tile_controlnet'] = opts['tile_controlnet'];
this['strength'] = opts['strength']
            if(opts['script']!==undefined) this['script'] = opts['script']

        }

        static defaults = {
            'upscale_by':  1.25,
'tile_size':  512,
'tiling_steps':  30,
'seed':  0,
'denoise':  0.4,
'use_controlnet':  false,
'strength':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'LoRA Stack to String converter' : class extends Node{
        //Setters
        set 'lora_stack'(value : LORA_STACK)  { super.$$link(0, value) } 

        //Getters
        get 'LoRA string'() : STRING { return [this, 'LoRA string', 0]  as unknown as STRING; }

        constructor(opts:{
            'lora_stack': LORA_STACK
        }){
            super(ctx);

            this['lora_stack'] = opts['lora_stack']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Evaluate Integers' : class extends Node{
        //Setters
        set 'python_expression'(value : STRING)  { super.$$link(0, value) } 
set 'print_to_console'(value : 'False'|'True')  { super.$$link(1, value) } 
set 'a'(value : INT)  { super.$$link(2, value) } 
set 'b'(value : INT)  { super.$$link(3, value) } 
set 'c'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'INT'() : INT { return [this, 'INT', 0]  as unknown as INT; }
get 'FLOAT'() : FLOAT { return [this, 'FLOAT', 1]  as unknown as FLOAT; }
get 'STRING'() : STRING { return [this, 'STRING', 2]  as unknown as STRING; }

        constructor(opts:{
            'python_expression': STRING,'print_to_console': 'False'|'True','a'?: INT,'b'?: INT,'c'?: INT
        }){
            super(ctx);

            this['python_expression'] = opts['python_expression'];
this['print_to_console'] = opts['print_to_console']
            if(opts['a']!==undefined) this['a'] = opts['a'];
if(opts['b']!==undefined) this['b'] = opts['b'];
if(opts['c']!==undefined) this['c'] = opts['c']

        }

        static defaults = {
            'python_expression':  "((a + b) - c) / 2",
'a':  0,
'b':  0,
'c':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Evaluate Floats' : class extends Node{
        //Setters
        set 'python_expression'(value : STRING)  { super.$$link(0, value) } 
set 'print_to_console'(value : 'False'|'True')  { super.$$link(1, value) } 
set 'a'(value : FLOAT)  { super.$$link(2, value) } 
set 'b'(value : FLOAT)  { super.$$link(3, value) } 
set 'c'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'INT'() : INT { return [this, 'INT', 0]  as unknown as INT; }
get 'FLOAT'() : FLOAT { return [this, 'FLOAT', 1]  as unknown as FLOAT; }
get 'STRING'() : STRING { return [this, 'STRING', 2]  as unknown as STRING; }

        constructor(opts:{
            'python_expression': STRING,'print_to_console': 'False'|'True','a'?: FLOAT,'b'?: FLOAT,'c'?: FLOAT
        }){
            super(ctx);

            this['python_expression'] = opts['python_expression'];
this['print_to_console'] = opts['print_to_console']
            if(opts['a']!==undefined) this['a'] = opts['a'];
if(opts['b']!==undefined) this['b'] = opts['b'];
if(opts['c']!==undefined) this['c'] = opts['c']

        }

        static defaults = {
            'python_expression':  "((a + b) - c) / 2",
'a':  0,
'b':  0,
'c':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Evaluate Strings' : class extends Node{
        //Setters
        set 'python_expression'(value : STRING)  { super.$$link(0, value) } 
set 'print_to_console'(value : 'False'|'True')  { super.$$link(1, value) } 
set 'a'(value : STRING)  { super.$$link(2, value) } 
set 'b'(value : STRING)  { super.$$link(3, value) } 
set 'c'(value : STRING)  { super.$$link(4, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'python_expression': STRING,'print_to_console': 'False'|'True','a'?: STRING,'b'?: STRING,'c'?: STRING
        }){
            super(ctx);

            this['python_expression'] = opts['python_expression'];
this['print_to_console'] = opts['print_to_console']
            if(opts['a']!==undefined) this['a'] = opts['a'];
if(opts['b']!==undefined) this['b'] = opts['b'];
if(opts['c']!==undefined) this['c'] = opts['c']

        }

        static defaults = {
            'python_expression':  "a + b + c",
'a':  "Hello",
'b':  " World",
'c':  "!"
}
},

    /**
     * TODO Docs based on metadata
     */
    'Simple Eval Examples' : class extends Node{
        //Setters
        set 'models_text'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        

        constructor(opts:{
            'models_text': STRING
        }){
            super(ctx);

            this['models_text'] = opts['models_text']
            

        }

        static defaults = {
            'models_text':  "The Evaluate Integers, Floats, and Strings nodes \nnow employ the SimpleEval library, enabling secure \ncreation and execution of custom Python expressions.\n\n(https://github.com/danthedeckie/simpleeval)\n\nBelow is a short list of what is possible.\n______________________________________________\n\n\"EVALUATE INTEGERS/FLOATS\" NODE EXPRESSION EXAMPLES:\n\nAddition: a + b + c\nSubtraction: a - b - c\nMultiplication: a * b * c\nDivision: a / b / c\nModulo: a % b % c\nExponentiation: a ** b ** c\nFloor Division: a // b // c\nAbsolute Value: abs(a) + abs(b) + abs(c)\nMaximum: max(a, b, c)\nMinimum: min(a, b, c)\nSum of Squares: a**2 + b**2 + c**2\nBitwise And: a & b & c\nBitwise Or: a | b | c\nBitwise Xor: a ^ b ^ c\nLeft Shift: a << 1 + b << 1 + c << 1\nRight Shift: a >> 1 + b >> 1 + c >> 1\nGreater Than Comparison: a > b > c\nLess Than Comparison: a < b < c\nEqual To Comparison: a == b == c\nNot Equal To Comparison: a != b != c\n______________________________________________\n\n\"EVALUATE STRINGS\" NODE EXPRESSION EXAMPLES:\n\nConcatenate: a + b + c\nFormat: f'{a} {b} {c}'\nLength: len(a) + len(b) + len(c)\nUppercase: a.upper() + b.upper() + c.upper()\nLowercase: a.lower() + b.lower() + c.lower()\nCapitalize: a.capitalize() + b.capitalize() + c.capitalize()\nTitle Case: a.title() + b.title() + c.title()\nStrip: a.strip() + b.strip() + c.strip()\nFind Substring: a.find('sub') + b.find('sub') + c.find('sub')\nReplace Substring: a.replace('old', 'new') + b.replace('old', 'new') + c.replace('old', 'new')\nCount Substring: a.count('sub') + b.count('sub') + c.count('sub')\nCheck Numeric: a.isnumeric() + b.isnumeric() + c.isnumeric()\nCheck Alphabetic: a.isalpha() + b.isalpha() + c.isalpha()\nCheck Alphanumeric: a.isalnum() + b.isalnum() + c.isalnum()\nCheck Start: a.startswith('prefix') + b.startswith('prefix') + c.startswith('prefix')\nCheck End: a.endswith('suffix') + b.endswith('suffix') + c.endswith('suffix')\nSplit: a.split(' ') + b.split(' ') + c.split(' ')\nZero Fill: a.zfill(5) + b.zfill(5) + c.zfill(5)\nSlice: a[:5] + b[:5] + c[:5]\nReverse: a[::-1] + b[::-1] + c[::-1]\n______________________________________________"
}
},

    /**
     * TODO Docs based on metadata
     */
    'SudoLatentUpscale' : class extends Node{
        //Setters
        set 'latent'(value : LATENT)  { super.$$link(0, value) } 
set 'version'(value : 'SwinFIR4x6_mse_1.5'|'CRAFT7x6_l1_eV2-b0_1.5'|'DAT6x6_l1_eV2-b0_1.5'|'DAT12x6_l1_eV2-b0_contextual_1.5'|'SwinFIR4x6_mse_xl'|'SwinFIR4x6_fft_l1_xl'|'DRCT-l_12x6_325k_l1_xl'|'DRCTFIR-l_12x6_215k_l1_xl'|'DRCT-l_12x6_160k_l1_vaeDecode_l1_hfen_xl'|'DRCT-l_12x6_170k_l1_vaeDecode_l1_fft_xl')  { super.$$link(1, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'latent': LATENT,'version': 'SwinFIR4x6_mse_1.5'|'CRAFT7x6_l1_eV2-b0_1.5'|'DAT6x6_l1_eV2-b0_1.5'|'DAT12x6_l1_eV2-b0_contextual_1.5'|'SwinFIR4x6_mse_xl'|'SwinFIR4x6_fft_l1_xl'|'DRCT-l_12x6_325k_l1_xl'|'DRCTFIR-l_12x6_215k_l1_xl'|'DRCT-l_12x6_160k_l1_vaeDecode_l1_hfen_xl'|'DRCT-l_12x6_170k_l1_vaeDecode_l1_fft_xl'
        }){
            super(ctx);

            this['latent'] = opts['latent'];
this['version'] = opts['version']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'LoadEXR' : class extends Node{
        //Setters
        set 'filepath'(value : STRING)  { super.$$link(0, value) } 
set 'linear_to_sRGB'(value : BOOLEAN)  { super.$$link(1, value) } 
set 'image_load_cap'(value : INT)  { super.$$link(2, value) } 
set 'skip_first_images'(value : INT)  { super.$$link(3, value) } 
set 'select_every_nth'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'RGB'() : IMAGE { return [this, 'RGB', 0]  as unknown as IMAGE; }
get 'alpha'() : MASK { return [this, 'alpha', 1]  as unknown as MASK; }
get 'batch_size'() : INT { return [this, 'batch_size', 2]  as unknown as INT; }

        constructor(opts:{
            'filepath': STRING,'linear_to_sRGB': BOOLEAN,'image_load_cap'?: INT,'skip_first_images'?: INT,'select_every_nth'?: INT
        }){
            super(ctx);

            this['filepath'] = opts['filepath'];
this['linear_to_sRGB'] = opts['linear_to_sRGB']
            if(opts['image_load_cap']!==undefined) this['image_load_cap'] = opts['image_load_cap'];
if(opts['skip_first_images']!==undefined) this['skip_first_images'] = opts['skip_first_images'];
if(opts['select_every_nth']!==undefined) this['select_every_nth'] = opts['select_every_nth']

        }

        static defaults = {
            'filepath':  "path to directory or .exr file",
'linear_to_sRGB':  true,
'image_load_cap':  0,
'skip_first_images':  0,
'select_every_nth':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'LoadEXRFrames' : class extends Node{
        //Setters
        set 'filepath'(value : STRING)  { super.$$link(0, value) } 
set 'linear_to_sRGB'(value : BOOLEAN)  { super.$$link(1, value) } 
set 'start_frame'(value : INT)  { super.$$link(2, value) } 
set 'end_frame'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'RGB'() : IMAGE { return [this, 'RGB', 0]  as unknown as IMAGE; }
get 'alpha'() : MASK { return [this, 'alpha', 1]  as unknown as MASK; }
get 'batch_size'() : INT { return [this, 'batch_size', 2]  as unknown as INT; }
get 'start_frame'() : INT { return [this, 'start_frame', 3]  as unknown as INT; }

        constructor(opts:{
            'filepath': STRING,'linear_to_sRGB': BOOLEAN,'start_frame': INT,'end_frame': INT
        }){
            super(ctx);

            this['filepath'] = opts['filepath'];
this['linear_to_sRGB'] = opts['linear_to_sRGB'];
this['start_frame'] = opts['start_frame'];
this['end_frame'] = opts['end_frame']
            

        }

        static defaults = {
            'filepath':  "path/to/frame%04d.exr",
'linear_to_sRGB':  true,
'start_frame':  1001,
'end_frame':  1001
}
},

    /**
     * TODO Docs based on metadata
     */
    'SaveEXR' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'filename_prefix'(value : STRING)  { super.$$link(1, value) } 
set 'sRGB_to_linear'(value : BOOLEAN)  { super.$$link(2, value) } 
set 'version'(value : INT)  { super.$$link(3, value) } 
set 'start_frame'(value : INT)  { super.$$link(4, value) } 
set 'frame_pad'(value : INT)  { super.$$link(5, value) } 
set 'save_workflow'(value : 'ui'|'api'|'ui + api'|'none')  { super.$$link(6, value) } 

        //Getters
        

        constructor(opts:{
            'images': IMAGE,'filename_prefix': STRING,'sRGB_to_linear': BOOLEAN,'version': INT,'start_frame': INT,'frame_pad': INT,'save_workflow': 'ui'|'api'|'ui + api'|'none'
        }){
            super(ctx);

            this['images'] = opts['images'];
this['filename_prefix'] = opts['filename_prefix'];
this['sRGB_to_linear'] = opts['sRGB_to_linear'];
this['version'] = opts['version'];
this['start_frame'] = opts['start_frame'];
this['frame_pad'] = opts['frame_pad'];
this['save_workflow'] = opts['save_workflow']
            

        }

        static defaults = {
            'filename_prefix':  "ComfyUI",
'sRGB_to_linear':  true,
'version':  1,
'start_frame':  1001,
'frame_pad':  4
}
},

    /**
     * TODO Docs based on metadata
     */
    'SaveEXRFrames' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'filepath'(value : STRING)  { super.$$link(1, value) } 
set 'sRGB_to_linear'(value : BOOLEAN)  { super.$$link(2, value) } 
set 'start_frame'(value : INT)  { super.$$link(3, value) } 
set 'overwrite'(value : BOOLEAN)  { super.$$link(4, value) } 
set 'save_workflow'(value : 'ui'|'api'|'ui + api'|'none')  { super.$$link(5, value) } 

        //Getters
        

        constructor(opts:{
            'images': IMAGE,'filepath': STRING,'sRGB_to_linear': BOOLEAN,'start_frame': INT,'overwrite': BOOLEAN,'save_workflow': 'ui'|'api'|'ui + api'|'none'
        }){
            super(ctx);

            this['images'] = opts['images'];
this['filepath'] = opts['filepath'];
this['sRGB_to_linear'] = opts['sRGB_to_linear'];
this['start_frame'] = opts['start_frame'];
this['overwrite'] = opts['overwrite'];
this['save_workflow'] = opts['save_workflow']
            

        }

        static defaults = {
            'filepath':  "path/to/frame%04d.exr",
'sRGB_to_linear':  true,
'start_frame':  1001,
'overwrite':  true
}
},

    /**
     * TODO Docs based on metadata
     */
    'SaveTiff' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'filename_prefix'(value : STRING)  { super.$$link(1, value) } 

        //Getters
        

        constructor(opts:{
            'images': IMAGE,'filename_prefix': STRING
        }){
            super(ctx);

            this['images'] = opts['images'];
this['filename_prefix'] = opts['filename_prefix']
            

        }

        static defaults = {
            'filename_prefix':  "ComfyUI"
}
},

    /**
     * TODO Docs based on metadata
     */
    'LoadLatentEXR' : class extends Node{
        //Setters
        set 'filepath'(value : STRING)  { super.$$link(0, value) } 
set 'image_load_cap'(value : INT)  { super.$$link(1, value) } 
set 'skip_first_images'(value : INT)  { super.$$link(2, value) } 
set 'select_every_nth'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'samples'() : LATENT { return [this, 'samples', 0]  as unknown as LATENT; }
get 'batch_size'() : INT { return [this, 'batch_size', 1]  as unknown as INT; }

        constructor(opts:{
            'filepath': STRING,'image_load_cap'?: INT,'skip_first_images'?: INT,'select_every_nth'?: INT
        }){
            super(ctx);

            this['filepath'] = opts['filepath']
            if(opts['image_load_cap']!==undefined) this['image_load_cap'] = opts['image_load_cap'];
if(opts['skip_first_images']!==undefined) this['skip_first_images'] = opts['skip_first_images'];
if(opts['select_every_nth']!==undefined) this['select_every_nth'] = opts['select_every_nth']

        }

        static defaults = {
            'filepath':  "path to directory or .exr file",
'image_load_cap':  0,
'skip_first_images':  0,
'select_every_nth':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'SaveLatentEXR' : class extends Node{
        //Setters
        set 'samples'(value : LATENT)  { super.$$link(0, value) } 
set 'filename_prefix'(value : STRING)  { super.$$link(1, value) } 
set 'version'(value : INT)  { super.$$link(2, value) } 
set 'start_frame'(value : INT)  { super.$$link(3, value) } 
set 'frame_pad'(value : INT)  { super.$$link(4, value) } 

        //Getters
        

        constructor(opts:{
            'samples': LATENT,'filename_prefix': STRING,'version': INT,'start_frame': INT,'frame_pad': INT
        }){
            super(ctx);

            this['samples'] = opts['samples'];
this['filename_prefix'] = opts['filename_prefix'];
this['version'] = opts['version'];
this['start_frame'] = opts['start_frame'];
this['frame_pad'] = opts['frame_pad']
            

        }

        static defaults = {
            'filename_prefix':  "ComfyUI",
'version':  1,
'start_frame':  1001,
'frame_pad':  4
}
},

    /**
     * TODO Docs based on metadata
     */
    'DF_Float' : class extends Node{
        //Setters
        set 'Value'(value : FLOAT)  { super.$$link(0, value) } 

        //Getters
        get 'FLOAT'() : FLOAT { return [this, 'FLOAT', 0]  as unknown as FLOAT; }

        constructor(opts:{
            'Value': FLOAT
        }){
            super(ctx);

            this['Value'] = opts['Value']
            

        }

        static defaults = {
            'Value':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'DF_Integer' : class extends Node{
        //Setters
        set 'Value'(value : FLOAT)  { super.$$link(0, value) } 

        //Getters
        get 'INT'() : INT { return [this, 'INT', 0]  as unknown as INT; }

        constructor(opts:{
            'Value': FLOAT
        }){
            super(ctx);

            this['Value'] = opts['Value']
            

        }

        static defaults = {
            'Value':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'DF_Text' : class extends Node{
        //Setters
        set 'Text'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'Text': STRING
        }){
            super(ctx);

            this['Text'] = opts['Text']
            

        }

        static defaults = {
            'Text':  ""
}
},

    /**
     * TODO Docs based on metadata
     */
    'DF_Text_Box' : class extends Node{
        //Setters
        set 'Text'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'Text': STRING
        }){
            super(ctx);

            this['Text'] = opts['Text']
            

        }

        static defaults = {
            'Text':  ""
}
},

    /**
     * TODO Docs based on metadata
     */
    'DF_DynamicPrompts_Text_Box' : class extends Node{
        //Setters
        set 'Text'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'Text': STRING
        }){
            super(ctx);

            this['Text'] = opts['Text']
            

        }

        static defaults = {
            'Text':  ""
}
},

    /**
     * TODO Docs based on metadata
     */
    'DF_String_Concatenate' : class extends Node{
        //Setters
        set 'Prepend'(value : STRING)  { super.$$link(0, value) } 
set 'Append'(value : STRING)  { super.$$link(1, value) } 
set 'Delimiter'(value : STRING)  { super.$$link(2, value) } 

        //Getters
        get 'TEXT'() : STRING { return [this, 'TEXT', 0]  as unknown as STRING; }

        constructor(opts:{
            'Prepend': STRING,'Append': STRING,'Delimiter': STRING
        }){
            super(ctx);

            this['Prepend'] = opts['Prepend'];
this['Append'] = opts['Append'];
this['Delimiter'] = opts['Delimiter']
            

        }

        static defaults = {
            'Prepend':  "",
'Append':  "",
'Delimiter':  ", "
}
},

    /**
     * TODO Docs based on metadata
     */
    'DF_String_Replace' : class extends Node{
        //Setters
        set 'Text'(value : STRING)  { super.$$link(0, value) } 
set 'Pattern'(value : STRING)  { super.$$link(1, value) } 
set 'Replace_With'(value : STRING)  { super.$$link(2, value) } 
set 'Mode'(value : 'Strict'|'RegEx')  { super.$$link(3, value) } 

        //Getters
        get 'TEXT'() : STRING { return [this, 'TEXT', 0]  as unknown as STRING; }

        constructor(opts:{
            'Text': STRING,'Pattern': STRING,'Replace_With': STRING,'Mode': 'Strict'|'RegEx'
        }){
            super(ctx);

            this['Text'] = opts['Text'];
this['Pattern'] = opts['Pattern'];
this['Replace_With'] = opts['Replace_With'];
this['Mode'] = opts['Mode']
            

        }

        static defaults = {
            'Text':  "",
'Pattern':  "",
'Replace_With':  ""
}
},

    /**
     * TODO Docs based on metadata
     */
    'DF_Search_In_Text' : class extends Node{
        //Setters
        set 'Text'(value : STRING)  { super.$$link(0, value) } 
set 'Pattern'(value : STRING)  { super.$$link(1, value) } 
set 'ConsiderRegister'(value : BOOLEAN)  { super.$$link(2, value) } 
set 'Mode'(value : 'Strict'|'RegEx')  { super.$$link(3, value) } 

        //Getters
        get 'BOOLEAN'() : BOOLEAN { return [this, 'BOOLEAN', 0]  as unknown as BOOLEAN; }
get 'OCCURRENCES'() : INT { return [this, 'OCCURRENCES', 1]  as unknown as INT; }

        constructor(opts:{
            'Text': STRING,'Pattern': STRING,'ConsiderRegister': BOOLEAN,'Mode': 'Strict'|'RegEx'
        }){
            super(ctx);

            this['Text'] = opts['Text'];
this['Pattern'] = opts['Pattern'];
this['ConsiderRegister'] = opts['ConsiderRegister'];
this['Mode'] = opts['Mode']
            

        }

        static defaults = {
            'Text':  "",
'Pattern':  "",
'ConsiderRegister':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'DF_To_text_(Debug)' : class extends Node{
        //Setters
        set 'ANY'(value : ANY)  { super.$$link(0, value) } 

        //Getters
        get 'SAME AS INPUT'() : ANY { return [this, 'SAME AS INPUT', 0]  as unknown as ANY; }
get 'STRING'() : STRING { return [this, 'STRING', 1]  as unknown as STRING; }

        constructor(opts:{
            'ANY': ANY
        }){
            super(ctx);

            this['ANY'] = opts['ANY']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'DF_Random' : class extends Node{
        //Setters
        set 'Value_A'(value : FLOAT)  { super.$$link(0, value) } 
set 'Value_B'(value : FLOAT)  { super.$$link(1, value) } 
set 'seed'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'FLOAT'() : FLOAT { return [this, 'FLOAT', 0]  as unknown as FLOAT; }

        constructor(opts:{
            'Value_A': FLOAT,'Value_B': FLOAT,'seed': INT
        }){
            super(ctx);

            this['Value_A'] = opts['Value_A'];
this['Value_B'] = opts['Value_B'];
this['seed'] = opts['seed']
            

        }

        static defaults = {
            'Value_A':  0,
'Value_B':  1,
'seed':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'DF_Int_to_Float' : class extends Node{
        //Setters
        set 'Value'(value : INT)  { super.$$link(0, value) } 

        //Getters
        get 'FLOAT'() : FLOAT { return [this, 'FLOAT', 0]  as unknown as FLOAT; }

        constructor(opts:{
            'Value': INT
        }){
            super(ctx);

            this['Value'] = opts['Value']
            

        }

        static defaults = {
            'Value':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'DF_Ceil' : class extends Node{
        //Setters
        set 'Value'(value : FLOAT)  { super.$$link(0, value) } 

        //Getters
        get 'INT'() : INT { return [this, 'INT', 0]  as unknown as INT; }

        constructor(opts:{
            'Value': FLOAT
        }){
            super(ctx);

            this['Value'] = opts['Value']
            

        }

        static defaults = {
            'Value':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'DF_Floor' : class extends Node{
        //Setters
        set 'Value'(value : FLOAT)  { super.$$link(0, value) } 

        //Getters
        get 'INT'() : INT { return [this, 'INT', 0]  as unknown as INT; }

        constructor(opts:{
            'Value': FLOAT
        }){
            super(ctx);

            this['Value'] = opts['Value']
            

        }

        static defaults = {
            'Value':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'DF_Absolute_value' : class extends Node{
        //Setters
        set 'Value'(value : FLOAT)  { super.$$link(0, value) } 
set 'negative_out'(value : 'false'|'true')  { super.$$link(1, value) } 

        //Getters
        get 'FLOAT'() : FLOAT { return [this, 'FLOAT', 0]  as unknown as FLOAT; }

        constructor(opts:{
            'Value': FLOAT,'negative_out': 'false'|'true'
        }){
            super(ctx);

            this['Value'] = opts['Value'];
this['negative_out'] = opts['negative_out']
            

        }

        static defaults = {
            'Value':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'DF_Get_latent_size' : class extends Node{
        //Setters
        set 'latent'(value : LATENT)  { super.$$link(0, value) } 
set 'original'(value : 'false'|'true')  { super.$$link(1, value) } 

        //Getters
        get 'WIDTH'() : INT { return [this, 'WIDTH', 0]  as unknown as INT; }
get 'HEIGHT'() : INT { return [this, 'HEIGHT', 1]  as unknown as INT; }

        constructor(opts:{
            'latent': LATENT,'original': 'false'|'true'
        }){
            super(ctx);

            this['latent'] = opts['latent'];
this['original'] = opts['original']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'DF_Get_image_size' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        get 'WIDTH'() : INT { return [this, 'WIDTH', 0]  as unknown as INT; }
get 'HEIGHT'() : INT { return [this, 'HEIGHT', 1]  as unknown as INT; }

        constructor(opts:{
            'image': IMAGE
        }){
            super(ctx);

            this['image'] = opts['image']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'DF_Sum' : class extends Node{
        //Setters
        set 'Value_A'(value : FLOAT)  { super.$$link(0, value) } 
set 'Value_B'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'FLOAT'() : FLOAT { return [this, 'FLOAT', 0]  as unknown as FLOAT; }

        constructor(opts:{
            'Value_A': FLOAT,'Value_B': FLOAT
        }){
            super(ctx);

            this['Value_A'] = opts['Value_A'];
this['Value_B'] = opts['Value_B']
            

        }

        static defaults = {
            'Value_A':  1,
'Value_B':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'DF_Subtract' : class extends Node{
        //Setters
        set 'Value_A'(value : FLOAT)  { super.$$link(0, value) } 
set 'Value_B'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'FLOAT'() : FLOAT { return [this, 'FLOAT', 0]  as unknown as FLOAT; }

        constructor(opts:{
            'Value_A': FLOAT,'Value_B': FLOAT
        }){
            super(ctx);

            this['Value_A'] = opts['Value_A'];
this['Value_B'] = opts['Value_B']
            

        }

        static defaults = {
            'Value_A':  1,
'Value_B':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'DF_Multiply' : class extends Node{
        //Setters
        set 'Value_A'(value : FLOAT)  { super.$$link(0, value) } 
set 'Value_B'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'FLOAT'() : FLOAT { return [this, 'FLOAT', 0]  as unknown as FLOAT; }

        constructor(opts:{
            'Value_A': FLOAT,'Value_B': FLOAT
        }){
            super(ctx);

            this['Value_A'] = opts['Value_A'];
this['Value_B'] = opts['Value_B']
            

        }

        static defaults = {
            'Value_A':  1,
'Value_B':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'DF_Divide' : class extends Node{
        //Setters
        set 'Numerator'(value : FLOAT)  { super.$$link(0, value) } 
set 'Denominator'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'FLOAT'() : FLOAT { return [this, 'FLOAT', 0]  as unknown as FLOAT; }

        constructor(opts:{
            'Numerator': FLOAT,'Denominator': FLOAT
        }){
            super(ctx);

            this['Numerator'] = opts['Numerator'];
this['Denominator'] = opts['Denominator']
            

        }

        static defaults = {
            'Numerator':  1,
'Denominator':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'DF_Power' : class extends Node{
        //Setters
        set 'Value'(value : FLOAT)  { super.$$link(0, value) } 
set 'Exponent'(value : FLOAT)  { super.$$link(1, value) } 

        //Getters
        get 'FLOAT'() : FLOAT { return [this, 'FLOAT', 0]  as unknown as FLOAT; }

        constructor(opts:{
            'Value': FLOAT,'Exponent': FLOAT
        }){
            super(ctx);

            this['Value'] = opts['Value'];
this['Exponent'] = opts['Exponent']
            

        }

        static defaults = {
            'Value':  1,
'Exponent':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'DF_Square_root' : class extends Node{
        //Setters
        set 'Value'(value : FLOAT)  { super.$$link(0, value) } 

        //Getters
        get 'FLOAT'() : FLOAT { return [this, 'FLOAT', 0]  as unknown as FLOAT; }

        constructor(opts:{
            'Value': FLOAT
        }){
            super(ctx);

            this['Value'] = opts['Value']
            

        }

        static defaults = {
            'Value':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'DF_Sinus' : class extends Node{
        //Setters
        set 'value'(value : FLOAT)  { super.$$link(0, value) } 
set 'type_'(value : 'RAD'|'DEG')  { super.$$link(1, value) } 
set 'arcSin'(value : 'false'|'true')  { super.$$link(2, value) } 

        //Getters
        get 'FLOAT'() : FLOAT { return [this, 'FLOAT', 0]  as unknown as FLOAT; }

        constructor(opts:{
            'value': FLOAT,'type_': 'RAD'|'DEG','arcSin': 'false'|'true'
        }){
            super(ctx);

            this['value'] = opts['value'];
this['type_'] = opts['type_'];
this['arcSin'] = opts['arcSin']
            

        }

        static defaults = {
            'value':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'DF_Cosines' : class extends Node{
        //Setters
        set 'value'(value : FLOAT)  { super.$$link(0, value) } 
set 'type_'(value : 'RAD'|'DEG')  { super.$$link(1, value) } 
set 'arcCos'(value : 'false'|'true')  { super.$$link(2, value) } 

        //Getters
        get 'FLOAT'() : FLOAT { return [this, 'FLOAT', 0]  as unknown as FLOAT; }

        constructor(opts:{
            'value': FLOAT,'type_': 'RAD'|'DEG','arcCos': 'false'|'true'
        }){
            super(ctx);

            this['value'] = opts['value'];
this['type_'] = opts['type_'];
this['arcCos'] = opts['arcCos']
            

        }

        static defaults = {
            'value':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'DF_Tangent' : class extends Node{
        //Setters
        set 'value'(value : FLOAT)  { super.$$link(0, value) } 
set 'type_'(value : 'RAD'|'DEG')  { super.$$link(1, value) } 
set 'arcTan'(value : 'false'|'true')  { super.$$link(2, value) } 

        //Getters
        get 'FLOAT'() : FLOAT { return [this, 'FLOAT', 0]  as unknown as FLOAT; }

        constructor(opts:{
            'value': FLOAT,'type_': 'RAD'|'DEG','arcTan': 'false'|'true'
        }){
            super(ctx);

            this['value'] = opts['value'];
this['type_'] = opts['type_'];
this['arcTan'] = opts['arcTan']
            

        }

        static defaults = {
            'value':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'DF_Logic_node' : class extends Node{
        //Setters
        set 'Operation'(value : 'A > B'|'A < B'|'A = B'|'A AND B'|'A OR B'|'A XOR B')  { super.$$link(0, value) } 
set 'CompareValue_A'(value : ANY)  { super.$$link(1, value) } 
set 'CompareValue_B'(value : ANY)  { super.$$link(2, value) } 
set 'OnTrue'(value : ANY)  { super.$$link(3, value) } 
set 'OnFalse'(value : ANY)  { super.$$link(4, value) } 

        //Getters
        get '*'() : ANY { return [this, '*', 0]  as unknown as ANY; }

        constructor(opts:{
            'Operation': 'A > B'|'A < B'|'A = B'|'A AND B'|'A OR B'|'A XOR B','CompareValue_A': ANY,'CompareValue_B'?: ANY,'OnTrue'?: ANY,'OnFalse'?: ANY
        }){
            super(ctx);

            this['Operation'] = opts['Operation'];
this['CompareValue_A'] = opts['CompareValue_A']
            if(opts['CompareValue_B']!==undefined) this['CompareValue_B'] = opts['CompareValue_B'];
if(opts['OnTrue']!==undefined) this['OnTrue'] = opts['OnTrue'];
if(opts['OnFalse']!==undefined) this['OnFalse'] = opts['OnFalse']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'DF_Latent_Scale_by_ratio' : class extends Node{
        //Setters
        set 'latent'(value : LATENT)  { super.$$link(0, value) } 
set 'modifier'(value : FLOAT)  { super.$$link(1, value) } 
set 'scale_method'(value : 'nearest-exact'|'bilinear'|'bicubic'|'bislerp'|'area'|'lanczos')  { super.$$link(2, value) } 
set 'crop'(value : 'disabled'|'center')  { super.$$link(3, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'latent': LATENT,'modifier': FLOAT,'scale_method': 'nearest-exact'|'bilinear'|'bicubic'|'bislerp'|'area'|'lanczos','crop': 'disabled'|'center'
        }){
            super(ctx);

            this['latent'] = opts['latent'];
this['modifier'] = opts['modifier'];
this['scale_method'] = opts['scale_method'];
this['crop'] = opts['crop']
            

        }

        static defaults = {
            'modifier':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'DF_Latent_Scale_to_side' : class extends Node{
        //Setters
        set 'latent'(value : LATENT)  { super.$$link(0, value) } 
set 'side_length'(value : INT)  { super.$$link(1, value) } 
set 'side'(value : 'Longest'|'Shortest'|'Width'|'Height')  { super.$$link(2, value) } 
set 'scale_method'(value : 'nearest-exact'|'bilinear'|'bicubic'|'bislerp'|'area'|'lanczos')  { super.$$link(3, value) } 
set 'crop'(value : 'disabled'|'center')  { super.$$link(4, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'latent': LATENT,'side_length': INT,'side': 'Longest'|'Shortest'|'Width'|'Height','scale_method': 'nearest-exact'|'bilinear'|'bicubic'|'bislerp'|'area'|'lanczos','crop': 'disabled'|'center'
        }){
            super(ctx);

            this['latent'] = opts['latent'];
this['side_length'] = opts['side_length'];
this['side'] = opts['side'];
this['scale_method'] = opts['scale_method'];
this['crop'] = opts['crop']
            

        }

        static defaults = {
            'side_length':  512
}
},

    /**
     * TODO Docs based on metadata
     */
    'DF_Image_scale_by_ratio' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'upscale_by'(value : FLOAT)  { super.$$link(1, value) } 
set 'upscale_method'(value : 'nearest-exact'|'bilinear'|'bicubic'|'bislerp'|'area'|'lanczos')  { super.$$link(2, value) } 
set 'crop'(value : 'disabled'|'center')  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'upscale_by': FLOAT,'upscale_method': 'nearest-exact'|'bilinear'|'bicubic'|'bislerp'|'area'|'lanczos','crop': 'disabled'|'center'
        }){
            super(ctx);

            this['image'] = opts['image'];
this['upscale_by'] = opts['upscale_by'];
this['upscale_method'] = opts['upscale_method'];
this['crop'] = opts['crop']
            

        }

        static defaults = {
            'upscale_by':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'DF_Image_scale_to_side' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'side_length'(value : INT)  { super.$$link(1, value) } 
set 'side'(value : 'Longest'|'Shortest'|'Width'|'Height')  { super.$$link(2, value) } 
set 'upscale_method'(value : 'nearest-exact'|'bilinear'|'bicubic'|'bislerp'|'area'|'lanczos')  { super.$$link(3, value) } 
set 'crop'(value : 'disabled'|'center')  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'side_length': INT,'side': 'Longest'|'Shortest'|'Width'|'Height','upscale_method': 'nearest-exact'|'bilinear'|'bicubic'|'bislerp'|'area'|'lanczos','crop': 'disabled'|'center'
        }){
            super(ctx);

            this['image'] = opts['image'];
this['side_length'] = opts['side_length'];
this['side'] = opts['side'];
this['upscale_method'] = opts['upscale_method'];
this['crop'] = opts['crop']
            

        }

        static defaults = {
            'side_length':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'DF_Conditioning_area_scale_by_ratio' : class extends Node{
        //Setters
        set 'conditioning'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'modifier'(value : FLOAT)  { super.$$link(1, value) } 
set 'strength_modifier'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'conditioning': CONDITIONING,'modifier': FLOAT,'strength_modifier': FLOAT
        }){
            super(ctx);

            this['conditioning'] = opts['conditioning'];
this['modifier'] = opts['modifier'];
this['strength_modifier'] = opts['strength_modifier']
            

        }

        static defaults = {
            'modifier':  1,
'strength_modifier':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'DownloadAndLoadLivePortraitModels' : class extends Node{
        //Setters
        set 'precision'(value : 'auto'|'fp16'|'fp32')  { super.$$link(0, value) } 

        //Getters
        get 'live_portrait_pipe'() : LIVEPORTRAITPIPE { return [this, 'live_portrait_pipe', 0]  as unknown as LIVEPORTRAITPIPE; }

        constructor(opts:{
            'precision'?: 'auto'|'fp16'|'fp32'
        }){
            super(ctx);

            
            if(opts['precision']!==undefined) this['precision'] = opts['precision']

        }

        static defaults = {
            'precision':  "auto"
}
},

    /**
     * TODO Docs based on metadata
     */
    'LivePortraitProcess' : class extends Node{
        //Setters
        set 'pipeline'(value : LIVEPORTRAITPIPE)  { super.$$link(0, value) } 
set 'source_image'(value : IMAGE)  { super.$$link(1, value) } 
set 'driving_images'(value : IMAGE)  { super.$$link(2, value) } 
set 'dsize'(value : INT)  { super.$$link(3, value) } 
set 'scale'(value : FLOAT)  { super.$$link(4, value) } 
set 'vx_ratio'(value : FLOAT)  { super.$$link(5, value) } 
set 'vy_ratio'(value : FLOAT)  { super.$$link(6, value) } 
set 'lip_zero'(value : BOOLEAN)  { super.$$link(7, value) } 
set 'eye_retargeting'(value : BOOLEAN)  { super.$$link(8, value) } 
set 'eyes_retargeting_multiplier'(value : FLOAT)  { super.$$link(9, value) } 
set 'lip_retargeting'(value : BOOLEAN)  { super.$$link(10, value) } 
set 'lip_retargeting_multiplier'(value : FLOAT)  { super.$$link(11, value) } 
set 'stitching'(value : BOOLEAN)  { super.$$link(12, value) } 
set 'relative'(value : BOOLEAN)  { super.$$link(13, value) } 
set 'onnx_device'(value : 'CPU'|'CUDA')  { super.$$link(14, value) } 

        //Getters
        get 'cropped_images'() : IMAGE { return [this, 'cropped_images', 0]  as unknown as IMAGE; }
get 'full_images'() : IMAGE { return [this, 'full_images', 1]  as unknown as IMAGE; }

        constructor(opts:{
            'pipeline': LIVEPORTRAITPIPE,'source_image': IMAGE,'driving_images': IMAGE,'dsize': INT,'scale': FLOAT,'vx_ratio': FLOAT,'vy_ratio': FLOAT,'lip_zero': BOOLEAN,'eye_retargeting': BOOLEAN,'eyes_retargeting_multiplier': FLOAT,'lip_retargeting': BOOLEAN,'lip_retargeting_multiplier': FLOAT,'stitching': BOOLEAN,'relative': BOOLEAN,'onnx_device'?: 'CPU'|'CUDA'
        }){
            super(ctx);

            this['pipeline'] = opts['pipeline'];
this['source_image'] = opts['source_image'];
this['driving_images'] = opts['driving_images'];
this['dsize'] = opts['dsize'];
this['scale'] = opts['scale'];
this['vx_ratio'] = opts['vx_ratio'];
this['vy_ratio'] = opts['vy_ratio'];
this['lip_zero'] = opts['lip_zero'];
this['eye_retargeting'] = opts['eye_retargeting'];
this['eyes_retargeting_multiplier'] = opts['eyes_retargeting_multiplier'];
this['lip_retargeting'] = opts['lip_retargeting'];
this['lip_retargeting_multiplier'] = opts['lip_retargeting_multiplier'];
this['stitching'] = opts['stitching'];
this['relative'] = opts['relative']
            if(opts['onnx_device']!==undefined) this['onnx_device'] = opts['onnx_device']

        }

        static defaults = {
            'dsize':  512,
'scale':  2.3,
'vx_ratio':  0,
'vy_ratio':  -0.125,
'lip_zero':  true,
'eye_retargeting':  false,
'eyes_retargeting_multiplier':  1,
'lip_retargeting':  false,
'lip_retargeting_multiplier':  1,
'stitching':  true,
'relative':  true,
'onnx_device':  "CPU"
}
},

    /**
     * TODO Docs based on metadata
     */
    'LayeredDiffusionApply' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'config'(value : 'SDXL, Attention Injection'|'SDXL, Conv Injection'|'SD15, Attention Injection, attn_sharing')  { super.$$link(1, value) } 
set 'weight'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'config': 'SDXL, Attention Injection'|'SDXL, Conv Injection'|'SD15, Attention Injection, attn_sharing','weight': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['config'] = opts['config'];
this['weight'] = opts['weight']
            

        }

        static defaults = {
            'weight':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'LayeredDiffusionJointApply' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'config'(value : 'SD15, attn_sharing, Batch size (3N)')  { super.$$link(1, value) } 
set 'fg_cond'(value : CONDITIONING)  { super.$$link(2, value) } 
set 'bg_cond'(value : CONDITIONING)  { super.$$link(3, value) } 
set 'blended_cond'(value : CONDITIONING)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'config': 'SD15, attn_sharing, Batch size (3N)','fg_cond'?: CONDITIONING,'bg_cond'?: CONDITIONING,'blended_cond'?: CONDITIONING
        }){
            super(ctx);

            this['model'] = opts['model'];
this['config'] = opts['config']
            if(opts['fg_cond']!==undefined) this['fg_cond'] = opts['fg_cond'];
if(opts['bg_cond']!==undefined) this['bg_cond'] = opts['bg_cond'];
if(opts['blended_cond']!==undefined) this['blended_cond'] = opts['blended_cond']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'LayeredDiffusionCondApply' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'cond'(value : CONDITIONING)  { super.$$link(1, value) } 
set 'uncond'(value : CONDITIONING)  { super.$$link(2, value) } 
set 'latent'(value : LATENT)  { super.$$link(3, value) } 
set 'config'(value : 'SDXL, Foreground'|'SDXL, Background')  { super.$$link(4, value) } 
set 'weight'(value : FLOAT)  { super.$$link(5, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 1]  as unknown as CONDITIONING; }

        constructor(opts:{
            'model': MODEL,'cond': CONDITIONING,'uncond': CONDITIONING,'latent': LATENT,'config': 'SDXL, Foreground'|'SDXL, Background','weight': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['cond'] = opts['cond'];
this['uncond'] = opts['uncond'];
this['latent'] = opts['latent'];
this['config'] = opts['config'];
this['weight'] = opts['weight']
            

        }

        static defaults = {
            'weight':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'LayeredDiffusionCondJointApply' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'image'(value : IMAGE)  { super.$$link(1, value) } 
set 'config'(value : 'SD15, Foreground, attn_sharing, Batch size (2N)'|'SD15, Background, attn_sharing, Batch size (2N)')  { super.$$link(2, value) } 
set 'cond'(value : CONDITIONING)  { super.$$link(3, value) } 
set 'blended_cond'(value : CONDITIONING)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'image': IMAGE,'config': 'SD15, Foreground, attn_sharing, Batch size (2N)'|'SD15, Background, attn_sharing, Batch size (2N)','cond'?: CONDITIONING,'blended_cond'?: CONDITIONING
        }){
            super(ctx);

            this['model'] = opts['model'];
this['image'] = opts['image'];
this['config'] = opts['config']
            if(opts['cond']!==undefined) this['cond'] = opts['cond'];
if(opts['blended_cond']!==undefined) this['blended_cond'] = opts['blended_cond']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'LayeredDiffusionDiffApply' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'cond'(value : CONDITIONING)  { super.$$link(1, value) } 
set 'uncond'(value : CONDITIONING)  { super.$$link(2, value) } 
set 'blended_latent'(value : LATENT)  { super.$$link(3, value) } 
set 'latent'(value : LATENT)  { super.$$link(4, value) } 
set 'config'(value : 'SDXL, Foreground'|'SDXL, Background')  { super.$$link(5, value) } 
set 'weight'(value : FLOAT)  { super.$$link(6, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 1]  as unknown as CONDITIONING; }

        constructor(opts:{
            'model': MODEL,'cond': CONDITIONING,'uncond': CONDITIONING,'blended_latent': LATENT,'latent': LATENT,'config': 'SDXL, Foreground'|'SDXL, Background','weight': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['cond'] = opts['cond'];
this['uncond'] = opts['uncond'];
this['blended_latent'] = opts['blended_latent'];
this['latent'] = opts['latent'];
this['config'] = opts['config'];
this['weight'] = opts['weight']
            

        }

        static defaults = {
            'weight':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'LayeredDiffusionDecode' : class extends Node{
        //Setters
        set 'samples'(value : LATENT)  { super.$$link(0, value) } 
set 'images'(value : IMAGE)  { super.$$link(1, value) } 
set 'sd_version'(value : 'SD15'|'SDXL')  { super.$$link(2, value) } 
set 'sub_batch_size'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }
get 'MASK'() : MASK { return [this, 'MASK', 1]  as unknown as MASK; }

        constructor(opts:{
            'samples': LATENT,'images': IMAGE,'sd_version': 'SD15'|'SDXL','sub_batch_size': INT
        }){
            super(ctx);

            this['samples'] = opts['samples'];
this['images'] = opts['images'];
this['sd_version'] = opts['sd_version'];
this['sub_batch_size'] = opts['sub_batch_size']
            

        }

        static defaults = {
            'sd_version':  "SDXL",
'sub_batch_size':  16
}
},

    /**
     * TODO Docs based on metadata
     */
    'LayeredDiffusionDecodeRGBA' : class extends Node{
        //Setters
        set 'samples'(value : LATENT)  { super.$$link(0, value) } 
set 'images'(value : IMAGE)  { super.$$link(1, value) } 
set 'sd_version'(value : 'SD15'|'SDXL')  { super.$$link(2, value) } 
set 'sub_batch_size'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'samples': LATENT,'images': IMAGE,'sd_version': 'SD15'|'SDXL','sub_batch_size': INT
        }){
            super(ctx);

            this['samples'] = opts['samples'];
this['images'] = opts['images'];
this['sd_version'] = opts['sd_version'];
this['sub_batch_size'] = opts['sub_batch_size']
            

        }

        static defaults = {
            'sd_version':  "SDXL",
'sub_batch_size':  16
}
},

    /**
     * TODO Docs based on metadata
     */
    'LayeredDiffusionDecodeSplit' : class extends Node{
        //Setters
        set 'samples'(value : LATENT)  { super.$$link(0, value) } 
set 'images'(value : IMAGE)  { super.$$link(1, value) } 
set 'frames'(value : INT)  { super.$$link(2, value) } 
set 'sd_version'(value : 'SD15'|'SDXL')  { super.$$link(3, value) } 
set 'sub_batch_size'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'samples': LATENT,'images': IMAGE,'frames': INT,'sd_version': 'SD15'|'SDXL','sub_batch_size': INT
        }){
            super(ctx);

            this['samples'] = opts['samples'];
this['images'] = opts['images'];
this['frames'] = opts['frames'];
this['sd_version'] = opts['sd_version'];
this['sub_batch_size'] = opts['sub_batch_size']
            

        }

        static defaults = {
            'frames':  2,
'sd_version':  "SDXL",
'sub_batch_size':  16
}
},

    /**
     * TODO Docs based on metadata
     */
    'InstantIDModelLoader' : class extends Node{
        //Setters
        set 'instantid_file'(value : void)  { super.$$link(0, value) } 

        //Getters
        get 'INSTANTID'() : INSTANTID { return [this, 'INSTANTID', 0]  as unknown as INSTANTID; }

        constructor(opts:{
            'instantid_file': void
        }){
            super(ctx);

            this['instantid_file'] = opts['instantid_file']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'InstantIDFaceAnalysis' : class extends Node{
        //Setters
        set 'provider'(value : 'CPU'|'CUDA'|'ROCM')  { super.$$link(0, value) } 

        //Getters
        get 'FACEANALYSIS'() : FACEANALYSIS { return [this, 'FACEANALYSIS', 0]  as unknown as FACEANALYSIS; }

        constructor(opts:{
            'provider': 'CPU'|'CUDA'|'ROCM'
        }){
            super(ctx);

            this['provider'] = opts['provider']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ApplyInstantID' : class extends Node{
        //Setters
        set 'instantid'(value : INSTANTID)  { super.$$link(0, value) } 
set 'insightface'(value : FACEANALYSIS)  { super.$$link(1, value) } 
set 'control_net'(value : CONTROL_NET)  { super.$$link(2, value) } 
set 'image'(value : IMAGE)  { super.$$link(3, value) } 
set 'model'(value : MODEL)  { super.$$link(4, value) } 
set 'positive'(value : CONDITIONING)  { super.$$link(5, value) } 
set 'negative'(value : CONDITIONING)  { super.$$link(6, value) } 
set 'weight'(value : FLOAT)  { super.$$link(7, value) } 
set 'start_at'(value : FLOAT)  { super.$$link(8, value) } 
set 'end_at'(value : FLOAT)  { super.$$link(9, value) } 
set 'image_kps'(value : IMAGE)  { super.$$link(10, value) } 
set 'mask'(value : MASK)  { super.$$link(11, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'positive'() : CONDITIONING { return [this, 'positive', 1]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this, 'negative', 2]  as unknown as CONDITIONING; }

        constructor(opts:{
            'instantid': INSTANTID,'insightface': FACEANALYSIS,'control_net': CONTROL_NET,'image': IMAGE,'model': MODEL,'positive': CONDITIONING,'negative': CONDITIONING,'weight': FLOAT,'start_at': FLOAT,'end_at': FLOAT,'image_kps'?: IMAGE,'mask'?: MASK
        }){
            super(ctx);

            this['instantid'] = opts['instantid'];
this['insightface'] = opts['insightface'];
this['control_net'] = opts['control_net'];
this['image'] = opts['image'];
this['model'] = opts['model'];
this['positive'] = opts['positive'];
this['negative'] = opts['negative'];
this['weight'] = opts['weight'];
this['start_at'] = opts['start_at'];
this['end_at'] = opts['end_at']
            if(opts['image_kps']!==undefined) this['image_kps'] = opts['image_kps'];
if(opts['mask']!==undefined) this['mask'] = opts['mask']

        }

        static defaults = {
            'weight':  0.8,
'start_at':  0,
'end_at':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ApplyInstantIDAdvanced' : class extends Node{
        //Setters
        set 'instantid'(value : INSTANTID)  { super.$$link(0, value) } 
set 'insightface'(value : FACEANALYSIS)  { super.$$link(1, value) } 
set 'control_net'(value : CONTROL_NET)  { super.$$link(2, value) } 
set 'image'(value : IMAGE)  { super.$$link(3, value) } 
set 'model'(value : MODEL)  { super.$$link(4, value) } 
set 'positive'(value : CONDITIONING)  { super.$$link(5, value) } 
set 'negative'(value : CONDITIONING)  { super.$$link(6, value) } 
set 'ip_weight'(value : FLOAT)  { super.$$link(7, value) } 
set 'cn_strength'(value : FLOAT)  { super.$$link(8, value) } 
set 'start_at'(value : FLOAT)  { super.$$link(9, value) } 
set 'end_at'(value : FLOAT)  { super.$$link(10, value) } 
set 'noise'(value : FLOAT)  { super.$$link(11, value) } 
set 'combine_embeds'(value : 'average'|'norm average'|'concat')  { super.$$link(12, value) } 
set 'image_kps'(value : IMAGE)  { super.$$link(13, value) } 
set 'mask'(value : MASK)  { super.$$link(14, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'positive'() : CONDITIONING { return [this, 'positive', 1]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this, 'negative', 2]  as unknown as CONDITIONING; }

        constructor(opts:{
            'instantid': INSTANTID,'insightface': FACEANALYSIS,'control_net': CONTROL_NET,'image': IMAGE,'model': MODEL,'positive': CONDITIONING,'negative': CONDITIONING,'ip_weight': FLOAT,'cn_strength': FLOAT,'start_at': FLOAT,'end_at': FLOAT,'noise': FLOAT,'combine_embeds': 'average'|'norm average'|'concat','image_kps'?: IMAGE,'mask'?: MASK
        }){
            super(ctx);

            this['instantid'] = opts['instantid'];
this['insightface'] = opts['insightface'];
this['control_net'] = opts['control_net'];
this['image'] = opts['image'];
this['model'] = opts['model'];
this['positive'] = opts['positive'];
this['negative'] = opts['negative'];
this['ip_weight'] = opts['ip_weight'];
this['cn_strength'] = opts['cn_strength'];
this['start_at'] = opts['start_at'];
this['end_at'] = opts['end_at'];
this['noise'] = opts['noise'];
this['combine_embeds'] = opts['combine_embeds']
            if(opts['image_kps']!==undefined) this['image_kps'] = opts['image_kps'];
if(opts['mask']!==undefined) this['mask'] = opts['mask']

        }

        static defaults = {
            'ip_weight':  0.8,
'cn_strength':  0.8,
'start_at':  0,
'end_at':  1,
'noise':  0,
'combine_embeds':  "average"
}
},

    /**
     * TODO Docs based on metadata
     */
    'FaceKeypointsPreprocessor' : class extends Node{
        //Setters
        set 'faceanalysis'(value : FACEANALYSIS)  { super.$$link(0, value) } 
set 'image'(value : IMAGE)  { super.$$link(1, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'faceanalysis': FACEANALYSIS,'image': IMAGE
        }){
            super(ctx);

            this['faceanalysis'] = opts['faceanalysis'];
this['image'] = opts['image']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'InstantIDAttentionPatch' : class extends Node{
        //Setters
        set 'instantid'(value : INSTANTID)  { super.$$link(0, value) } 
set 'insightface'(value : FACEANALYSIS)  { super.$$link(1, value) } 
set 'image'(value : IMAGE)  { super.$$link(2, value) } 
set 'model'(value : MODEL)  { super.$$link(3, value) } 
set 'weight'(value : FLOAT)  { super.$$link(4, value) } 
set 'start_at'(value : FLOAT)  { super.$$link(5, value) } 
set 'end_at'(value : FLOAT)  { super.$$link(6, value) } 
set 'noise'(value : FLOAT)  { super.$$link(7, value) } 
set 'mask'(value : MASK)  { super.$$link(8, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'FACE_EMBEDS'() : FACE_EMBEDS { return [this, 'FACE_EMBEDS', 1]  as unknown as FACE_EMBEDS; }

        constructor(opts:{
            'instantid': INSTANTID,'insightface': FACEANALYSIS,'image': IMAGE,'model': MODEL,'weight': FLOAT,'start_at': FLOAT,'end_at': FLOAT,'noise': FLOAT,'mask'?: MASK
        }){
            super(ctx);

            this['instantid'] = opts['instantid'];
this['insightface'] = opts['insightface'];
this['image'] = opts['image'];
this['model'] = opts['model'];
this['weight'] = opts['weight'];
this['start_at'] = opts['start_at'];
this['end_at'] = opts['end_at'];
this['noise'] = opts['noise']
            if(opts['mask']!==undefined) this['mask'] = opts['mask']

        }

        static defaults = {
            'weight':  1,
'start_at':  0,
'end_at':  1,
'noise':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'ApplyInstantIDControlNet' : class extends Node{
        //Setters
        set 'face_embeds'(value : FACE_EMBEDS)  { super.$$link(0, value) } 
set 'control_net'(value : CONTROL_NET)  { super.$$link(1, value) } 
set 'image_kps'(value : IMAGE)  { super.$$link(2, value) } 
set 'positive'(value : CONDITIONING)  { super.$$link(3, value) } 
set 'negative'(value : CONDITIONING)  { super.$$link(4, value) } 
set 'strength'(value : FLOAT)  { super.$$link(5, value) } 
set 'start_at'(value : FLOAT)  { super.$$link(6, value) } 
set 'end_at'(value : FLOAT)  { super.$$link(7, value) } 
set 'mask'(value : MASK)  { super.$$link(8, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this, 'positive', 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this, 'negative', 1]  as unknown as CONDITIONING; }

        constructor(opts:{
            'face_embeds': FACE_EMBEDS,'control_net': CONTROL_NET,'image_kps': IMAGE,'positive': CONDITIONING,'negative': CONDITIONING,'strength': FLOAT,'start_at': FLOAT,'end_at': FLOAT,'mask'?: MASK
        }){
            super(ctx);

            this['face_embeds'] = opts['face_embeds'];
this['control_net'] = opts['control_net'];
this['image_kps'] = opts['image_kps'];
this['positive'] = opts['positive'];
this['negative'] = opts['negative'];
this['strength'] = opts['strength'];
this['start_at'] = opts['start_at'];
this['end_at'] = opts['end_at']
            if(opts['mask']!==undefined) this['mask'] = opts['mask']

        }

        static defaults = {
            'strength':  1,
'start_at':  0,
'end_at':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'Latent Diffusion Mega Modifier' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'sharpness_multiplier'(value : FLOAT)  { super.$$link(1, value) } 
set 'sharpness_method'(value : 'anisotropic'|'joint-anisotropic'|'gaussian'|'cas')  { super.$$link(2, value) } 
set 'tonemap_multiplier'(value : FLOAT)  { super.$$link(3, value) } 
set 'tonemap_method'(value : 'reinhard'|'reinhard_perchannel'|'arctan'|'quantile'|'gated'|'cfg-mimic'|'spatial-norm')  { super.$$link(4, value) } 
set 'tonemap_percentile'(value : FLOAT)  { super.$$link(5, value) } 
set 'contrast_multiplier'(value : FLOAT)  { super.$$link(6, value) } 
set 'combat_method'(value : 'subtract'|'subtract_channels'|'subtract_median'|'sharpen')  { super.$$link(7, value) } 
set 'combat_cfg_drift'(value : FLOAT)  { super.$$link(8, value) } 
set 'rescale_cfg_phi'(value : FLOAT)  { super.$$link(9, value) } 
set 'extra_noise_type'(value : 'gaussian'|'uniform'|'perlin'|'pink'|'green'|'pyramid')  { super.$$link(10, value) } 
set 'extra_noise_method'(value : 'add'|'add_scaled'|'speckle'|'cads'|'cads_rescaled'|'cads_speckle'|'cads_speckle_rescaled')  { super.$$link(11, value) } 
set 'extra_noise_multiplier'(value : FLOAT)  { super.$$link(12, value) } 
set 'extra_noise_lowpass'(value : INT)  { super.$$link(13, value) } 
set 'divisive_norm_size'(value : INT)  { super.$$link(14, value) } 
set 'divisive_norm_multiplier'(value : FLOAT)  { super.$$link(15, value) } 
set 'spectral_mod_mode'(value : 'hard_clamp'|'soft_clamp')  { super.$$link(16, value) } 
set 'spectral_mod_percentile'(value : FLOAT)  { super.$$link(17, value) } 
set 'spectral_mod_multiplier'(value : FLOAT)  { super.$$link(18, value) } 
set 'affect_uncond'(value : 'None'|'Sharpness')  { super.$$link(19, value) } 
set 'dyn_cfg_augmentation'(value : 'None'|'dyncfg-halfcosine'|'dyncfg-halfcosine-mimic')  { super.$$link(20, value) } 
set 'seed'(value : INT)  { super.$$link(21, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'sharpness_multiplier': FLOAT,'sharpness_method': 'anisotropic'|'joint-anisotropic'|'gaussian'|'cas','tonemap_multiplier': FLOAT,'tonemap_method': 'reinhard'|'reinhard_perchannel'|'arctan'|'quantile'|'gated'|'cfg-mimic'|'spatial-norm','tonemap_percentile': FLOAT,'contrast_multiplier': FLOAT,'combat_method': 'subtract'|'subtract_channels'|'subtract_median'|'sharpen','combat_cfg_drift': FLOAT,'rescale_cfg_phi': FLOAT,'extra_noise_type': 'gaussian'|'uniform'|'perlin'|'pink'|'green'|'pyramid','extra_noise_method': 'add'|'add_scaled'|'speckle'|'cads'|'cads_rescaled'|'cads_speckle'|'cads_speckle_rescaled','extra_noise_multiplier': FLOAT,'extra_noise_lowpass': INT,'divisive_norm_size': INT,'divisive_norm_multiplier': FLOAT,'spectral_mod_mode': 'hard_clamp'|'soft_clamp','spectral_mod_percentile': FLOAT,'spectral_mod_multiplier': FLOAT,'affect_uncond': 'None'|'Sharpness','dyn_cfg_augmentation': 'None'|'dyncfg-halfcosine'|'dyncfg-halfcosine-mimic','seed'?: INT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['sharpness_multiplier'] = opts['sharpness_multiplier'];
this['sharpness_method'] = opts['sharpness_method'];
this['tonemap_multiplier'] = opts['tonemap_multiplier'];
this['tonemap_method'] = opts['tonemap_method'];
this['tonemap_percentile'] = opts['tonemap_percentile'];
this['contrast_multiplier'] = opts['contrast_multiplier'];
this['combat_method'] = opts['combat_method'];
this['combat_cfg_drift'] = opts['combat_cfg_drift'];
this['rescale_cfg_phi'] = opts['rescale_cfg_phi'];
this['extra_noise_type'] = opts['extra_noise_type'];
this['extra_noise_method'] = opts['extra_noise_method'];
this['extra_noise_multiplier'] = opts['extra_noise_multiplier'];
this['extra_noise_lowpass'] = opts['extra_noise_lowpass'];
this['divisive_norm_size'] = opts['divisive_norm_size'];
this['divisive_norm_multiplier'] = opts['divisive_norm_multiplier'];
this['spectral_mod_mode'] = opts['spectral_mod_mode'];
this['spectral_mod_percentile'] = opts['spectral_mod_percentile'];
this['spectral_mod_multiplier'] = opts['spectral_mod_multiplier'];
this['affect_uncond'] = opts['affect_uncond'];
this['dyn_cfg_augmentation'] = opts['dyn_cfg_augmentation']
            if(opts['seed']!==undefined) this['seed'] = opts['seed']

        }

        static defaults = {
            'sharpness_multiplier':  0,
'tonemap_multiplier':  0,
'tonemap_percentile':  100,
'contrast_multiplier':  0,
'combat_cfg_drift':  0,
'rescale_cfg_phi':  0,
'extra_noise_multiplier':  0,
'extra_noise_lowpass':  100,
'divisive_norm_size':  127,
'divisive_norm_multiplier':  0,
'spectral_mod_percentile':  5,
'spectral_mod_multiplier':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'Primitive boolean [Crystools]' : class extends Node{
        //Setters
        set 'boolean'(value : BOOLEAN)  { super.$$link(0, value) } 

        //Getters
        get 'boolean'() : BOOLEAN { return [this, 'boolean', 0]  as unknown as BOOLEAN; }

        constructor(opts:{
            'boolean': BOOLEAN
        }){
            super(ctx);

            this['boolean'] = opts['boolean']
            

        }

        static defaults = {
            'boolean':  true
}
},

    /**
     * TODO Docs based on metadata
     */
    'Primitive string [Crystools]' : class extends Node{
        //Setters
        set 'string'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'string'() : STRING { return [this, 'string', 0]  as unknown as STRING; }

        constructor(opts:{
            'string': STRING
        }){
            super(ctx);

            this['string'] = opts['string']
            

        }

        static defaults = {
            'string':  ""
}
},

    /**
     * TODO Docs based on metadata
     */
    'Primitive string multiline [Crystools]' : class extends Node{
        //Setters
        set 'string'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'string'() : STRING { return [this, 'string', 0]  as unknown as STRING; }

        constructor(opts:{
            'string': STRING
        }){
            super(ctx);

            this['string'] = opts['string']
            

        }

        static defaults = {
            'string':  ""
}
},

    /**
     * TODO Docs based on metadata
     */
    'Primitive integer [Crystools]' : class extends Node{
        //Setters
        set 'int'(value : INT)  { super.$$link(0, value) } 

        //Getters
        get 'int'() : INT { return [this, 'int', 0]  as unknown as INT; }

        constructor(opts:{
            'int': INT
        }){
            super(ctx);

            this['int'] = opts['int']
            

        }

        static defaults = {
            'int':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'Primitive float [Crystools]' : class extends Node{
        //Setters
        set 'float'(value : FLOAT)  { super.$$link(0, value) } 

        //Getters
        get 'float'() : FLOAT { return [this, 'float', 0]  as unknown as FLOAT; }

        constructor(opts:{
            'float': FLOAT
        }){
            super(ctx);

            this['float'] = opts['float']
            

        }

        static defaults = {
            'float':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'Show any [Crystools]' : class extends Node{
        //Setters
        set 'any_value'(value : ANY)  { super.$$link(0, value) } 
set 'console'(value : BOOLEAN)  { super.$$link(1, value) } 
set 'display'(value : BOOLEAN)  { super.$$link(2, value) } 
set 'prefix'(value : STRING)  { super.$$link(3, value) } 

        //Getters
        

        constructor(opts:{
            'any_value'?: ANY,'console'?: BOOLEAN,'display'?: BOOLEAN,'prefix'?: STRING
        }){
            super(ctx);

            
            if(opts['any_value']!==undefined) this['any_value'] = opts['any_value'];
if(opts['console']!==undefined) this['console'] = opts['console'];
if(opts['display']!==undefined) this['display'] = opts['display'];
if(opts['prefix']!==undefined) this['prefix'] = opts['prefix']

        }

        static defaults = {
            'console':  false,
'display':  true,
'prefix':  ""
}
},

    /**
     * TODO Docs based on metadata
     */
    'Show any to JSON [Crystools]' : class extends Node{
        //Setters
        set 'any_value'(value : ANY)  { super.$$link(0, value) } 

        //Getters
        get 'string'() : STRING { return [this, 'string', 0]  as unknown as STRING; }

        constructor(opts:{
            'any_value'?: ANY
        }){
            super(ctx);

            
            if(opts['any_value']!==undefined) this['any_value'] = opts['any_value']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'List of any [Crystools]' : class extends Node{
        //Setters
        set 'any_1'(value : ANY)  { super.$$link(0, value) } 
set 'any_2'(value : ANY)  { super.$$link(1, value) } 
set 'any_3'(value : ANY)  { super.$$link(2, value) } 
set 'any_4'(value : ANY)  { super.$$link(3, value) } 
set 'any_5'(value : ANY)  { super.$$link(4, value) } 
set 'any_6'(value : ANY)  { super.$$link(5, value) } 
set 'any_7'(value : ANY)  { super.$$link(6, value) } 
set 'any_8'(value : ANY)  { super.$$link(7, value) } 

        //Getters
        get 'any_list'() : '*' { return [this, 'any_list', 0]  as unknown as '*'; }

        constructor(opts:{
            'any_1'?: ANY,'any_2'?: ANY,'any_3'?: ANY,'any_4'?: ANY,'any_5'?: ANY,'any_6'?: ANY,'any_7'?: ANY,'any_8'?: ANY
        }){
            super(ctx);

            
            if(opts['any_1']!==undefined) this['any_1'] = opts['any_1'];
if(opts['any_2']!==undefined) this['any_2'] = opts['any_2'];
if(opts['any_3']!==undefined) this['any_3'] = opts['any_3'];
if(opts['any_4']!==undefined) this['any_4'] = opts['any_4'];
if(opts['any_5']!==undefined) this['any_5'] = opts['any_5'];
if(opts['any_6']!==undefined) this['any_6'] = opts['any_6'];
if(opts['any_7']!==undefined) this['any_7'] = opts['any_7'];
if(opts['any_8']!==undefined) this['any_8'] = opts['any_8']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'List of strings [Crystools]' : class extends Node{
        //Setters
        set 'string_1'(value : STRING)  { super.$$link(0, value) } 
set 'string_2'(value : STRING)  { super.$$link(1, value) } 
set 'string_3'(value : STRING)  { super.$$link(2, value) } 
set 'string_4'(value : STRING)  { super.$$link(3, value) } 
set 'string_5'(value : STRING)  { super.$$link(4, value) } 
set 'string_6'(value : STRING)  { super.$$link(5, value) } 
set 'string_7'(value : STRING)  { super.$$link(6, value) } 
set 'string_8'(value : STRING)  { super.$$link(7, value) } 
set 'delimiter'(value : STRING)  { super.$$link(8, value) } 

        //Getters
        get 'concatenated'() : STRING { return [this, 'concatenated', 0]  as unknown as STRING; }
get 'list_string'() : ListString { return [this, 'list_string', 1]  as unknown as ListString; }

        constructor(opts:{
            'string_1'?: STRING,'string_2'?: STRING,'string_3'?: STRING,'string_4'?: STRING,'string_5'?: STRING,'string_6'?: STRING,'string_7'?: STRING,'string_8'?: STRING,'delimiter'?: STRING
        }){
            super(ctx);

            
            if(opts['string_1']!==undefined) this['string_1'] = opts['string_1'];
if(opts['string_2']!==undefined) this['string_2'] = opts['string_2'];
if(opts['string_3']!==undefined) this['string_3'] = opts['string_3'];
if(opts['string_4']!==undefined) this['string_4'] = opts['string_4'];
if(opts['string_5']!==undefined) this['string_5'] = opts['string_5'];
if(opts['string_6']!==undefined) this['string_6'] = opts['string_6'];
if(opts['string_7']!==undefined) this['string_7'] = opts['string_7'];
if(opts['string_8']!==undefined) this['string_8'] = opts['string_8'];
if(opts['delimiter']!==undefined) this['delimiter'] = opts['delimiter']

        }

        static defaults = {
            'string_1':  "",
'string_2':  "",
'string_3':  "",
'string_4':  "",
'string_5':  "",
'string_6':  "",
'string_7':  "",
'string_8':  "",
'delimiter':  " "
}
},

    /**
     * TODO Docs based on metadata
     */
    'Switch any [Crystools]' : class extends Node{
        //Setters
        set 'on_true'(value : ANY)  { super.$$link(0, value) } 
set 'on_false'(value : ANY)  { super.$$link(1, value) } 
set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get '*'() : ANY { return [this, '*', 0]  as unknown as ANY; }

        constructor(opts:{
            'on_true': ANY,'on_false': ANY,'boolean': BOOLEAN
        }){
            super(ctx);

            this['on_true'] = opts['on_true'];
this['on_false'] = opts['on_false'];
this['boolean'] = opts['boolean']
            

        }

        static defaults = {
            'boolean':  true
}
},

    /**
     * TODO Docs based on metadata
     */
    'Switch latent [Crystools]' : class extends Node{
        //Setters
        set 'on_true'(value : LATENT)  { super.$$link(0, value) } 
set 'on_false'(value : LATENT)  { super.$$link(1, value) } 
set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'latent'() : LATENT { return [this, 'latent', 0]  as unknown as LATENT; }

        constructor(opts:{
            'on_true': LATENT,'on_false': LATENT,'boolean': BOOLEAN
        }){
            super(ctx);

            this['on_true'] = opts['on_true'];
this['on_false'] = opts['on_false'];
this['boolean'] = opts['boolean']
            

        }

        static defaults = {
            'boolean':  true
}
},

    /**
     * TODO Docs based on metadata
     */
    'Switch conditioning [Crystools]' : class extends Node{
        //Setters
        set 'on_true'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'on_false'(value : CONDITIONING)  { super.$$link(1, value) } 
set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'conditioning'() : CONDITIONING { return [this, 'conditioning', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'on_true': CONDITIONING,'on_false': CONDITIONING,'boolean': BOOLEAN
        }){
            super(ctx);

            this['on_true'] = opts['on_true'];
this['on_false'] = opts['on_false'];
this['boolean'] = opts['boolean']
            

        }

        static defaults = {
            'boolean':  true
}
},

    /**
     * TODO Docs based on metadata
     */
    'Switch image [Crystools]' : class extends Node{
        //Setters
        set 'on_true'(value : IMAGE)  { super.$$link(0, value) } 
set 'on_false'(value : IMAGE)  { super.$$link(1, value) } 
set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'image'() : IMAGE { return [this, 'image', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'on_true': IMAGE,'on_false': IMAGE,'boolean': BOOLEAN
        }){
            super(ctx);

            this['on_true'] = opts['on_true'];
this['on_false'] = opts['on_false'];
this['boolean'] = opts['boolean']
            

        }

        static defaults = {
            'boolean':  true
}
},

    /**
     * TODO Docs based on metadata
     */
    'Switch mask [Crystools]' : class extends Node{
        //Setters
        set 'on_true'(value : MASK)  { super.$$link(0, value) } 
set 'on_false'(value : MASK)  { super.$$link(1, value) } 
set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'mask'() : MASK { return [this, 'mask', 0]  as unknown as MASK; }

        constructor(opts:{
            'on_true': MASK,'on_false': MASK,'boolean': BOOLEAN
        }){
            super(ctx);

            this['on_true'] = opts['on_true'];
this['on_false'] = opts['on_false'];
this['boolean'] = opts['boolean']
            

        }

        static defaults = {
            'boolean':  true
}
},

    /**
     * TODO Docs based on metadata
     */
    'Switch string [Crystools]' : class extends Node{
        //Setters
        set 'on_true'(value : STRING)  { super.$$link(0, value) } 
set 'on_false'(value : STRING)  { super.$$link(1, value) } 
set 'boolean'(value : BOOLEAN)  { super.$$link(2, value) } 

        //Getters
        get 'string'() : STRING { return [this, 'string', 0]  as unknown as STRING; }

        constructor(opts:{
            'on_true': STRING,'on_false': STRING,'boolean': BOOLEAN
        }){
            super(ctx);

            this['on_true'] = opts['on_true'];
this['on_false'] = opts['on_false'];
this['boolean'] = opts['boolean']
            

        }

        static defaults = {
            'on_true':  "",
'on_false':  "",
'boolean':  true
}
},

    /**
     * TODO Docs based on metadata
     */
    'Pipe to/edit any [Crystools]' : class extends Node{
        //Setters
        set 'CPipeAny'(value : CPipeAny)  { super.$$link(0, value) } 
set 'any_1'(value : ANY)  { super.$$link(1, value) } 
set 'any_2'(value : ANY)  { super.$$link(2, value) } 
set 'any_3'(value : ANY)  { super.$$link(3, value) } 
set 'any_4'(value : ANY)  { super.$$link(4, value) } 
set 'any_5'(value : ANY)  { super.$$link(5, value) } 
set 'any_6'(value : ANY)  { super.$$link(6, value) } 

        //Getters
        get 'CPipeAny'() : CPipeAny { return [this, 'CPipeAny', 0]  as unknown as CPipeAny; }

        constructor(opts:{
            'CPipeAny'?: CPipeAny,'any_1'?: ANY,'any_2'?: ANY,'any_3'?: ANY,'any_4'?: ANY,'any_5'?: ANY,'any_6'?: ANY
        }){
            super(ctx);

            
            if(opts['CPipeAny']!==undefined) this['CPipeAny'] = opts['CPipeAny'];
if(opts['any_1']!==undefined) this['any_1'] = opts['any_1'];
if(opts['any_2']!==undefined) this['any_2'] = opts['any_2'];
if(opts['any_3']!==undefined) this['any_3'] = opts['any_3'];
if(opts['any_4']!==undefined) this['any_4'] = opts['any_4'];
if(opts['any_5']!==undefined) this['any_5'] = opts['any_5'];
if(opts['any_6']!==undefined) this['any_6'] = opts['any_6']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Pipe from any [Crystools]' : class extends Node{
        //Setters
        set 'CPipeAny'(value : CPipeAny)  { super.$$link(0, value) } 

        //Getters
        get 'CPipeAny'() : CPipeAny { return [this, 'CPipeAny', 0]  as unknown as CPipeAny; }
get 'any_1'() : ANY { return [this, 'any_1', 1]  as unknown as ANY; }
get 'any_2'() : ANY { return [this, 'any_2', 2]  as unknown as ANY; }
get 'any_3'() : ANY { return [this, 'any_3', 3]  as unknown as ANY; }
get 'any_4'() : ANY { return [this, 'any_4', 4]  as unknown as ANY; }
get 'any_5'() : ANY { return [this, 'any_5', 5]  as unknown as ANY; }
get 'any_6'() : ANY { return [this, 'any_6', 6]  as unknown as ANY; }

        constructor(opts:{
            'CPipeAny': CPipeAny
        }){
            super(ctx);

            this['CPipeAny'] = opts['CPipeAny']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Load image with metadata [Crystools]' : class extends Node{
        //Setters
        set 'image'(value : '00010-2274211228.png'|'1.png'|'13368745_041_0591.jpg'|'37756119_043_92ea.jpg'|'56162430_104_c181.jpg'|'56162430_111_453c.jpg'|'61635388_057_c911.jpg'|'61635388_068_b3ca (1).jpg'|'61635388_068_b3ca.jpg'|'61635388_077_aa9e.jpg'|'89918606_004_7c7a.jpg'|'9377545.png'|'Ashley_Meh.webp'|'COFFIN/ComfyUI_temp_mpmkr_00347_.png'|'COFFIN/ComfyUI_temp_mpmkr_00395_.png'|'COFFIN/ComfyUI_temp_mpmkr_00403_.png'|'COFFIN/ComfyUI_temp_mpmkr_00497_.png'|'COFFIN/ComfyUI_temp_mpmkr_00514_.png'|'COFFIN/ComfyUI_temp_mpmkr_00537_.png'|'COFFIN/ComfyUI_temp_mpmkr_00540_.png'|'COFFIN/ComfyUI_temp_mpmkr_00542_.png'|'COFFIN/ComfyUI_temp_mpmkr_00547_.png'|'COFFIN/ComfyUI_temp_mpmkr_00550_.png'|'COFFIN/ComfyUI_temp_mpmkr_00650_.png'|'COFFIN/ComfyUI_temp_mpmkr_00733_.png'|'COFFIN/ComfyUI_temp_mpmkr_00742_.png'|'COFFIN/ComfyUI_temp_mpmkr_00748_.png'|'ComfyUI_00135_.png'|'ComfyUI_temp_fkoyu_00029_.png'|'ComfyUI_temp_mpmkr_00234_.png'|'ComfyUI_temp_mpmkr_00258_.png'|'ComfyUI_temp_mpmkr_00296_.png'|'ComfyUI_temp_mpmkr_00347_.png'|'ComfyUI_temp_mpmkr_00497_.png'|'ComfyUI_temp_mpmkr_00540_.png'|'ComfyUI_temp_mpmkr_00542_.png'|'ComfyUI_temp_mpmkr_00550_.png'|'ComfyUI_temp_mpmkr_00733_.png'|'ComfyUI_temp_onszj_00008_.png'|'ComfyUI_temp_pxygj_00023_.png'|'DSCF6491.JPG'|'DSCF8216.JPG'|'DSCF8334.JPG'|'DSCF9566.JPG'|'FB_IMG_1671397597411.jpg'|'IMGP4666.JPG'|'IMGP4670.JPG'|'IMG_1913.JPG'|'Julia.webp'|'Julia2.webp'|'Mom.webp'|'QSCF8096.JPG'|'Screenshot from 2022-04-19 11-38-41.png'|'a837af5519f074782ae0b9c32eee12a7.jpg'|'aaa'|'asset.png'|'example-a.png'|'example.png'|'maegcgmdajglmcle-small.jpeg'|'testqr.png')  { super.$$link(0, value) } 

        //Getters
        get 'image'() : IMAGE { return [this, 'image', 0]  as unknown as IMAGE; }
get 'mask'() : MASK { return [this, 'mask', 1]  as unknown as MASK; }
get 'prompt'() : JSON { return [this, 'prompt', 2]  as unknown as JSON; }
get 'Metadata RAW'() : METADATA_RAW { return [this, 'Metadata RAW', 3]  as unknown as METADATA_RAW; }

        constructor(opts:{
            'image': '00010-2274211228.png'|'1.png'|'13368745_041_0591.jpg'|'37756119_043_92ea.jpg'|'56162430_104_c181.jpg'|'56162430_111_453c.jpg'|'61635388_057_c911.jpg'|'61635388_068_b3ca (1).jpg'|'61635388_068_b3ca.jpg'|'61635388_077_aa9e.jpg'|'89918606_004_7c7a.jpg'|'9377545.png'|'Ashley_Meh.webp'|'COFFIN/ComfyUI_temp_mpmkr_00347_.png'|'COFFIN/ComfyUI_temp_mpmkr_00395_.png'|'COFFIN/ComfyUI_temp_mpmkr_00403_.png'|'COFFIN/ComfyUI_temp_mpmkr_00497_.png'|'COFFIN/ComfyUI_temp_mpmkr_00514_.png'|'COFFIN/ComfyUI_temp_mpmkr_00537_.png'|'COFFIN/ComfyUI_temp_mpmkr_00540_.png'|'COFFIN/ComfyUI_temp_mpmkr_00542_.png'|'COFFIN/ComfyUI_temp_mpmkr_00547_.png'|'COFFIN/ComfyUI_temp_mpmkr_00550_.png'|'COFFIN/ComfyUI_temp_mpmkr_00650_.png'|'COFFIN/ComfyUI_temp_mpmkr_00733_.png'|'COFFIN/ComfyUI_temp_mpmkr_00742_.png'|'COFFIN/ComfyUI_temp_mpmkr_00748_.png'|'ComfyUI_00135_.png'|'ComfyUI_temp_fkoyu_00029_.png'|'ComfyUI_temp_mpmkr_00234_.png'|'ComfyUI_temp_mpmkr_00258_.png'|'ComfyUI_temp_mpmkr_00296_.png'|'ComfyUI_temp_mpmkr_00347_.png'|'ComfyUI_temp_mpmkr_00497_.png'|'ComfyUI_temp_mpmkr_00540_.png'|'ComfyUI_temp_mpmkr_00542_.png'|'ComfyUI_temp_mpmkr_00550_.png'|'ComfyUI_temp_mpmkr_00733_.png'|'ComfyUI_temp_onszj_00008_.png'|'ComfyUI_temp_pxygj_00023_.png'|'DSCF6491.JPG'|'DSCF8216.JPG'|'DSCF8334.JPG'|'DSCF9566.JPG'|'FB_IMG_1671397597411.jpg'|'IMGP4666.JPG'|'IMGP4670.JPG'|'IMG_1913.JPG'|'Julia.webp'|'Julia2.webp'|'Mom.webp'|'QSCF8096.JPG'|'Screenshot from 2022-04-19 11-38-41.png'|'a837af5519f074782ae0b9c32eee12a7.jpg'|'aaa'|'asset.png'|'example-a.png'|'example.png'|'maegcgmdajglmcle-small.jpeg'|'testqr.png'
        }){
            super(ctx);

            this['image'] = opts['image']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Get resolution [Crystools]' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        get 'width'() : INT { return [this, 'width', 0]  as unknown as INT; }
get 'height'() : INT { return [this, 'height', 1]  as unknown as INT; }

        constructor(opts:{
            'image': IMAGE
        }){
            super(ctx);

            this['image'] = opts['image']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Preview from image [Crystools]' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 

        //Getters
        get 'Metadata RAW'() : METADATA_RAW { return [this, 'Metadata RAW', 0]  as unknown as METADATA_RAW; }

        constructor(opts:{
            'image'?: IMAGE
        }){
            super(ctx);

            
            if(opts['image']!==undefined) this['image'] = opts['image']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Preview from metadata [Crystools]' : class extends Node{
        //Setters
        set 'metadata_raw'(value : METADATA_RAW)  { super.$$link(0, value) } 

        //Getters
        get 'Metadata RAW'() : METADATA_RAW { return [this, 'Metadata RAW', 0]  as unknown as METADATA_RAW; }

        constructor(opts:{
            'metadata_raw'?: METADATA_RAW
        }){
            super(ctx);

            
            if(opts['metadata_raw']!==undefined) this['metadata_raw'] = opts['metadata_raw']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Save image with extra metadata [Crystools]' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'filename_prefix'(value : STRING)  { super.$$link(1, value) } 
set 'with_workflow'(value : BOOLEAN)  { super.$$link(2, value) } 
set 'metadata_extra'(value : STRING)  { super.$$link(3, value) } 

        //Getters
        get 'Metadata RAW'() : METADATA_RAW { return [this, 'Metadata RAW', 0]  as unknown as METADATA_RAW; }

        constructor(opts:{
            'image': IMAGE,'filename_prefix': STRING,'with_workflow': BOOLEAN,'metadata_extra'?: STRING
        }){
            super(ctx);

            this['image'] = opts['image'];
this['filename_prefix'] = opts['filename_prefix'];
this['with_workflow'] = opts['with_workflow']
            if(opts['metadata_extra']!==undefined) this['metadata_extra'] = opts['metadata_extra']

        }

        static defaults = {
            'filename_prefix':  "ComfyUI",
'with_workflow':  true,
'metadata_extra':  "{\n  \"Title\": \"Image generated by Crystian\",\n  \"Description\": \"More info: https:\\/\\/www.instagram.com\\/crystian.ia\",\n  \"Author\": \"crystian.ia\",\n  \"Software\": \"ComfyUI\",\n  \"Category\": \"StableDiffusion\",\n  \"Rating\": 5,\n  \"UserComment\": \"\",\n  \"Keywords\": [\n    \"\"\n  ],\n  \"Copyrights\": \"\"\n}"
}
},

    /**
     * TODO Docs based on metadata
     */
    'Metadata extractor [Crystools]' : class extends Node{
        //Setters
        set 'metadata_raw'(value : METADATA_RAW)  { super.$$link(0, value) } 

        //Getters
        get 'prompt'() : JSON { return [this, 'prompt', 0]  as unknown as JSON; }
get 'workflow'() : JSON { return [this, 'workflow', 1]  as unknown as JSON; }
get 'file info'() : JSON { return [this, 'file info', 2]  as unknown as JSON; }
get 'raw to JSON'() : JSON { return [this, 'raw to JSON', 3]  as unknown as JSON; }
get 'raw to property'() : STRING { return [this, 'raw to property', 4]  as unknown as STRING; }
get 'raw to csv'() : STRING { return [this, 'raw to csv', 5]  as unknown as STRING; }

        constructor(opts:{
            'metadata_raw': METADATA_RAW
        }){
            super(ctx);

            this['metadata_raw'] = opts['metadata_raw']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Metadata comparator [Crystools]' : class extends Node{
        //Setters
        set 'metadata_raw_old'(value : METADATA_RAW)  { super.$$link(0, value) } 
set 'metadata_raw_new'(value : METADATA_RAW)  { super.$$link(1, value) } 
set 'what'(value : 'Prompt'|'Workflow'|'Fileinfo')  { super.$$link(2, value) } 

        //Getters
        get 'diff'() : JSON { return [this, 'diff', 0]  as unknown as JSON; }

        constructor(opts:{
            'metadata_raw_old': METADATA_RAW,'metadata_raw_new': METADATA_RAW,'what': 'Prompt'|'Workflow'|'Fileinfo'
        }){
            super(ctx);

            this['metadata_raw_old'] = opts['metadata_raw_old'];
this['metadata_raw_new'] = opts['metadata_raw_new'];
this['what'] = opts['what']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Json comparator [Crystools]' : class extends Node{
        //Setters
        set 'json_old'(value : JSON)  { super.$$link(0, value) } 
set 'json_new'(value : JSON)  { super.$$link(1, value) } 

        //Getters
        get 'json_compared'() : JSON { return [this, 'json_compared', 0]  as unknown as JSON; }

        constructor(opts:{
            'json_old': JSON,'json_new': JSON
        }){
            super(ctx);

            this['json_old'] = opts['json_old'];
this['json_new'] = opts['json_new']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'Stats system [Crystools]' : class extends Node{
        //Setters
        set 'latent'(value : LATENT)  { super.$$link(0, value) } 

        //Getters
        get 'latent'() : LATENT { return [this, 'latent', 0]  as unknown as LATENT; }

        constructor(opts:{
            'latent': LATENT
        }){
            super(ctx);

            this['latent'] = opts['latent']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'TimestepKeyframe' : class extends Node{
        //Setters
        set 'start_percent'(value : FLOAT)  { super.$$link(0, value) } 
set 'prev_timestep_kf'(value : TIMESTEP_KEYFRAME)  { super.$$link(1, value) } 
set 'strength'(value : FLOAT)  { super.$$link(2, value) } 
set 'cn_weights'(value : CONTROL_NET_WEIGHTS)  { super.$$link(3, value) } 
set 'latent_keyframe'(value : LATENT_KEYFRAME)  { super.$$link(4, value) } 
set 'null_latent_kf_strength'(value : FLOAT)  { super.$$link(5, value) } 
set 'inherit_missing'(value : BOOLEAN)  { super.$$link(6, value) } 
set 'guarantee_steps'(value : INT)  { super.$$link(7, value) } 
set 'mask_optional'(value : MASK)  { super.$$link(8, value) } 
set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(9, value) } 

        //Getters
        get 'TIMESTEP_KF'() : TIMESTEP_KEYFRAME { return [this, 'TIMESTEP_KF', 0]  as unknown as TIMESTEP_KEYFRAME; }

        constructor(opts:{
            'start_percent': FLOAT,'prev_timestep_kf'?: TIMESTEP_KEYFRAME,'strength'?: FLOAT,'cn_weights'?: CONTROL_NET_WEIGHTS,'latent_keyframe'?: LATENT_KEYFRAME,'null_latent_kf_strength'?: FLOAT,'inherit_missing'?: BOOLEAN,'guarantee_steps'?: INT,'mask_optional'?: MASK,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            this['start_percent'] = opts['start_percent']
            if(opts['prev_timestep_kf']!==undefined) this['prev_timestep_kf'] = opts['prev_timestep_kf'];
if(opts['strength']!==undefined) this['strength'] = opts['strength'];
if(opts['cn_weights']!==undefined) this['cn_weights'] = opts['cn_weights'];
if(opts['latent_keyframe']!==undefined) this['latent_keyframe'] = opts['latent_keyframe'];
if(opts['null_latent_kf_strength']!==undefined) this['null_latent_kf_strength'] = opts['null_latent_kf_strength'];
if(opts['inherit_missing']!==undefined) this['inherit_missing'] = opts['inherit_missing'];
if(opts['guarantee_steps']!==undefined) this['guarantee_steps'] = opts['guarantee_steps'];
if(opts['mask_optional']!==undefined) this['mask_optional'] = opts['mask_optional'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'start_percent':  0,
'strength':  1,
'null_latent_kf_strength':  0,
'inherit_missing':  true,
'guarantee_steps':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ACN_TimestepKeyframeInterpolation' : class extends Node{
        //Setters
        set 'start_percent'(value : FLOAT)  { super.$$link(0, value) } 
set 'end_percent'(value : FLOAT)  { super.$$link(1, value) } 
set 'strength_start'(value : FLOAT)  { super.$$link(2, value) } 
set 'strength_end'(value : FLOAT)  { super.$$link(3, value) } 
set 'interpolation'(value : 'linear'|'ease-in'|'ease-out'|'ease-in-out')  { super.$$link(4, value) } 
set 'intervals'(value : INT)  { super.$$link(5, value) } 
set 'prev_timestep_kf'(value : TIMESTEP_KEYFRAME)  { super.$$link(6, value) } 
set 'cn_weights'(value : CONTROL_NET_WEIGHTS)  { super.$$link(7, value) } 
set 'latent_keyframe'(value : LATENT_KEYFRAME)  { super.$$link(8, value) } 
set 'null_latent_kf_strength'(value : FLOAT)  { super.$$link(9, value) } 
set 'inherit_missing'(value : BOOLEAN)  { super.$$link(10, value) } 
set 'mask_optional'(value : MASK)  { super.$$link(11, value) } 
set 'print_keyframes'(value : BOOLEAN)  { super.$$link(12, value) } 
set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(13, value) } 

        //Getters
        get 'TIMESTEP_KF'() : TIMESTEP_KEYFRAME { return [this, 'TIMESTEP_KF', 0]  as unknown as TIMESTEP_KEYFRAME; }

        constructor(opts:{
            'start_percent': FLOAT,'end_percent': FLOAT,'strength_start': FLOAT,'strength_end': FLOAT,'interpolation': 'linear'|'ease-in'|'ease-out'|'ease-in-out','intervals': INT,'prev_timestep_kf'?: TIMESTEP_KEYFRAME,'cn_weights'?: CONTROL_NET_WEIGHTS,'latent_keyframe'?: LATENT_KEYFRAME,'null_latent_kf_strength'?: FLOAT,'inherit_missing'?: BOOLEAN,'mask_optional'?: MASK,'print_keyframes'?: BOOLEAN,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            this['start_percent'] = opts['start_percent'];
this['end_percent'] = opts['end_percent'];
this['strength_start'] = opts['strength_start'];
this['strength_end'] = opts['strength_end'];
this['interpolation'] = opts['interpolation'];
this['intervals'] = opts['intervals']
            if(opts['prev_timestep_kf']!==undefined) this['prev_timestep_kf'] = opts['prev_timestep_kf'];
if(opts['cn_weights']!==undefined) this['cn_weights'] = opts['cn_weights'];
if(opts['latent_keyframe']!==undefined) this['latent_keyframe'] = opts['latent_keyframe'];
if(opts['null_latent_kf_strength']!==undefined) this['null_latent_kf_strength'] = opts['null_latent_kf_strength'];
if(opts['inherit_missing']!==undefined) this['inherit_missing'] = opts['inherit_missing'];
if(opts['mask_optional']!==undefined) this['mask_optional'] = opts['mask_optional'];
if(opts['print_keyframes']!==undefined) this['print_keyframes'] = opts['print_keyframes'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'start_percent':  0,
'end_percent':  1,
'strength_start':  1,
'strength_end':  1,
'intervals':  50,
'null_latent_kf_strength':  0,
'inherit_missing':  true,
'print_keyframes':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'ACN_TimestepKeyframeFromStrengthList' : class extends Node{
        //Setters
        set 'float_strengths'(value : FLOAT)  { super.$$link(0, value) } 
set 'start_percent'(value : FLOAT)  { super.$$link(1, value) } 
set 'end_percent'(value : FLOAT)  { super.$$link(2, value) } 
set 'prev_timestep_kf'(value : TIMESTEP_KEYFRAME)  { super.$$link(3, value) } 
set 'cn_weights'(value : CONTROL_NET_WEIGHTS)  { super.$$link(4, value) } 
set 'latent_keyframe'(value : LATENT_KEYFRAME)  { super.$$link(5, value) } 
set 'null_latent_kf_strength'(value : FLOAT)  { super.$$link(6, value) } 
set 'inherit_missing'(value : BOOLEAN)  { super.$$link(7, value) } 
set 'mask_optional'(value : MASK)  { super.$$link(8, value) } 
set 'print_keyframes'(value : BOOLEAN)  { super.$$link(9, value) } 
set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(10, value) } 

        //Getters
        get 'TIMESTEP_KF'() : TIMESTEP_KEYFRAME { return [this, 'TIMESTEP_KF', 0]  as unknown as TIMESTEP_KEYFRAME; }

        constructor(opts:{
            'float_strengths': FLOAT,'start_percent': FLOAT,'end_percent': FLOAT,'prev_timestep_kf'?: TIMESTEP_KEYFRAME,'cn_weights'?: CONTROL_NET_WEIGHTS,'latent_keyframe'?: LATENT_KEYFRAME,'null_latent_kf_strength'?: FLOAT,'inherit_missing'?: BOOLEAN,'mask_optional'?: MASK,'print_keyframes'?: BOOLEAN,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            this['float_strengths'] = opts['float_strengths'];
this['start_percent'] = opts['start_percent'];
this['end_percent'] = opts['end_percent']
            if(opts['prev_timestep_kf']!==undefined) this['prev_timestep_kf'] = opts['prev_timestep_kf'];
if(opts['cn_weights']!==undefined) this['cn_weights'] = opts['cn_weights'];
if(opts['latent_keyframe']!==undefined) this['latent_keyframe'] = opts['latent_keyframe'];
if(opts['null_latent_kf_strength']!==undefined) this['null_latent_kf_strength'] = opts['null_latent_kf_strength'];
if(opts['inherit_missing']!==undefined) this['inherit_missing'] = opts['inherit_missing'];
if(opts['mask_optional']!==undefined) this['mask_optional'] = opts['mask_optional'];
if(opts['print_keyframes']!==undefined) this['print_keyframes'] = opts['print_keyframes'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'float_strengths':  -1,
'start_percent':  0,
'end_percent':  1,
'null_latent_kf_strength':  0,
'inherit_missing':  true,
'print_keyframes':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'LatentKeyframe' : class extends Node{
        //Setters
        set 'batch_index'(value : INT)  { super.$$link(0, value) } 
set 'strength'(value : FLOAT)  { super.$$link(1, value) } 
set 'prev_latent_kf'(value : LATENT_KEYFRAME)  { super.$$link(2, value) } 
set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(3, value) } 

        //Getters
        get 'LATENT_KF'() : LATENT_KEYFRAME { return [this, 'LATENT_KF', 0]  as unknown as LATENT_KEYFRAME; }

        constructor(opts:{
            'batch_index': INT,'strength': FLOAT,'prev_latent_kf'?: LATENT_KEYFRAME,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            this['batch_index'] = opts['batch_index'];
this['strength'] = opts['strength']
            if(opts['prev_latent_kf']!==undefined) this['prev_latent_kf'] = opts['prev_latent_kf'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'batch_index':  0,
'strength':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'LatentKeyframeTiming' : class extends Node{
        //Setters
        set 'batch_index_from'(value : INT)  { super.$$link(0, value) } 
set 'batch_index_to_excl'(value : INT)  { super.$$link(1, value) } 
set 'strength_from'(value : FLOAT)  { super.$$link(2, value) } 
set 'strength_to'(value : FLOAT)  { super.$$link(3, value) } 
set 'interpolation'(value : 'linear'|'ease-in'|'ease-out'|'ease-in-out')  { super.$$link(4, value) } 
set 'prev_latent_kf'(value : LATENT_KEYFRAME)  { super.$$link(5, value) } 
set 'print_keyframes'(value : BOOLEAN)  { super.$$link(6, value) } 
set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(7, value) } 

        //Getters
        get 'LATENT_KF'() : LATENT_KEYFRAME { return [this, 'LATENT_KF', 0]  as unknown as LATENT_KEYFRAME; }

        constructor(opts:{
            'batch_index_from': INT,'batch_index_to_excl': INT,'strength_from': FLOAT,'strength_to': FLOAT,'interpolation': 'linear'|'ease-in'|'ease-out'|'ease-in-out','prev_latent_kf'?: LATENT_KEYFRAME,'print_keyframes'?: BOOLEAN,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            this['batch_index_from'] = opts['batch_index_from'];
this['batch_index_to_excl'] = opts['batch_index_to_excl'];
this['strength_from'] = opts['strength_from'];
this['strength_to'] = opts['strength_to'];
this['interpolation'] = opts['interpolation']
            if(opts['prev_latent_kf']!==undefined) this['prev_latent_kf'] = opts['prev_latent_kf'];
if(opts['print_keyframes']!==undefined) this['print_keyframes'] = opts['print_keyframes'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'batch_index_from':  0,
'batch_index_to_excl':  0,
'strength_from':  1,
'strength_to':  1,
'print_keyframes':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'LatentKeyframeBatchedGroup' : class extends Node{
        //Setters
        set 'float_strengths'(value : FLOAT)  { super.$$link(0, value) } 
set 'prev_latent_kf'(value : LATENT_KEYFRAME)  { super.$$link(1, value) } 
set 'print_keyframes'(value : BOOLEAN)  { super.$$link(2, value) } 
set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(3, value) } 

        //Getters
        get 'LATENT_KF'() : LATENT_KEYFRAME { return [this, 'LATENT_KF', 0]  as unknown as LATENT_KEYFRAME; }

        constructor(opts:{
            'float_strengths': FLOAT,'prev_latent_kf'?: LATENT_KEYFRAME,'print_keyframes'?: BOOLEAN,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            this['float_strengths'] = opts['float_strengths']
            if(opts['prev_latent_kf']!==undefined) this['prev_latent_kf'] = opts['prev_latent_kf'];
if(opts['print_keyframes']!==undefined) this['print_keyframes'] = opts['print_keyframes'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'float_strengths':  -1,
'print_keyframes':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'LatentKeyframeGroup' : class extends Node{
        //Setters
        set 'index_strengths'(value : STRING)  { super.$$link(0, value) } 
set 'prev_latent_kf'(value : LATENT_KEYFRAME)  { super.$$link(1, value) } 
set 'latent_optional'(value : LATENT)  { super.$$link(2, value) } 
set 'print_keyframes'(value : BOOLEAN)  { super.$$link(3, value) } 
set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(4, value) } 

        //Getters
        get 'LATENT_KF'() : LATENT_KEYFRAME { return [this, 'LATENT_KF', 0]  as unknown as LATENT_KEYFRAME; }

        constructor(opts:{
            'index_strengths': STRING,'prev_latent_kf'?: LATENT_KEYFRAME,'latent_optional'?: LATENT,'print_keyframes'?: BOOLEAN,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            this['index_strengths'] = opts['index_strengths']
            if(opts['prev_latent_kf']!==undefined) this['prev_latent_kf'] = opts['prev_latent_kf'];
if(opts['latent_optional']!==undefined) this['latent_optional'] = opts['latent_optional'];
if(opts['print_keyframes']!==undefined) this['print_keyframes'] = opts['print_keyframes'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'index_strengths':  "",
'print_keyframes':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'ACN_AdvancedControlNetApply' : class extends Node{
        //Setters
        set 'positive'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'negative'(value : CONDITIONING)  { super.$$link(1, value) } 
set 'control_net'(value : CONTROL_NET)  { super.$$link(2, value) } 
set 'image'(value : IMAGE)  { super.$$link(3, value) } 
set 'strength'(value : FLOAT)  { super.$$link(4, value) } 
set 'start_percent'(value : FLOAT)  { super.$$link(5, value) } 
set 'end_percent'(value : FLOAT)  { super.$$link(6, value) } 
set 'mask_optional'(value : MASK)  { super.$$link(7, value) } 
set 'timestep_kf'(value : TIMESTEP_KEYFRAME)  { super.$$link(8, value) } 
set 'latent_kf_override'(value : LATENT_KEYFRAME)  { super.$$link(9, value) } 
set 'weights_override'(value : CONTROL_NET_WEIGHTS)  { super.$$link(10, value) } 
set 'model_optional'(value : MODEL)  { super.$$link(11, value) } 
set 'vae_optional'(value : VAE)  { super.$$link(12, value) } 
set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(13, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this, 'positive', 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this, 'negative', 1]  as unknown as CONDITIONING; }
get 'model_opt'() : MODEL { return [this, 'model_opt', 2]  as unknown as MODEL; }

        constructor(opts:{
            'positive': CONDITIONING,'negative': CONDITIONING,'control_net': CONTROL_NET,'image': IMAGE,'strength': FLOAT,'start_percent': FLOAT,'end_percent': FLOAT,'mask_optional'?: MASK,'timestep_kf'?: TIMESTEP_KEYFRAME,'latent_kf_override'?: LATENT_KEYFRAME,'weights_override'?: CONTROL_NET_WEIGHTS,'model_optional'?: MODEL,'vae_optional'?: VAE,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            this['positive'] = opts['positive'];
this['negative'] = opts['negative'];
this['control_net'] = opts['control_net'];
this['image'] = opts['image'];
this['strength'] = opts['strength'];
this['start_percent'] = opts['start_percent'];
this['end_percent'] = opts['end_percent']
            if(opts['mask_optional']!==undefined) this['mask_optional'] = opts['mask_optional'];
if(opts['timestep_kf']!==undefined) this['timestep_kf'] = opts['timestep_kf'];
if(opts['latent_kf_override']!==undefined) this['latent_kf_override'] = opts['latent_kf_override'];
if(opts['weights_override']!==undefined) this['weights_override'] = opts['weights_override'];
if(opts['model_optional']!==undefined) this['model_optional'] = opts['model_optional'];
if(opts['vae_optional']!==undefined) this['vae_optional'] = opts['vae_optional'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'strength':  1,
'start_percent':  0,
'end_percent':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ControlNetLoaderAdvanced' : class extends Node{
        //Setters
        set 'control_net_name'(value : 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors')  { super.$$link(0, value) } 
set 'tk_optional'(value : TIMESTEP_KEYFRAME)  { super.$$link(1, value) } 

        //Getters
        get 'CONTROL_NET'() : CONTROL_NET { return [this, 'CONTROL_NET', 0]  as unknown as CONTROL_NET; }

        constructor(opts:{
            'control_net_name': 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors','tk_optional'?: TIMESTEP_KEYFRAME
        }){
            super(ctx);

            this['control_net_name'] = opts['control_net_name']
            if(opts['tk_optional']!==undefined) this['tk_optional'] = opts['tk_optional']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'DiffControlNetLoaderAdvanced' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'control_net_name'(value : 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors')  { super.$$link(1, value) } 
set 'tk_optional'(value : TIMESTEP_KEYFRAME)  { super.$$link(2, value) } 
set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(3, value) } 

        //Getters
        get 'CONTROL_NET'() : CONTROL_NET { return [this, 'CONTROL_NET', 0]  as unknown as CONTROL_NET; }

        constructor(opts:{
            'model': MODEL,'control_net_name': 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors','tk_optional'?: TIMESTEP_KEYFRAME,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            this['model'] = opts['model'];
this['control_net_name'] = opts['control_net_name']
            if(opts['tk_optional']!==undefined) this['tk_optional'] = opts['tk_optional'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ScaledSoftControlNetWeights' : class extends Node{
        //Setters
        set 'base_multiplier'(value : FLOAT)  { super.$$link(0, value) } 
set 'flip_weights'(value : BOOLEAN)  { super.$$link(1, value) } 
set 'uncond_multiplier'(value : FLOAT)  { super.$$link(2, value) } 
set 'cn_extras'(value : CN_WEIGHTS_EXTRAS)  { super.$$link(3, value) } 
set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(4, value) } 

        //Getters
        get 'CN_WEIGHTS'() : CONTROL_NET_WEIGHTS { return [this, 'CN_WEIGHTS', 0]  as unknown as CONTROL_NET_WEIGHTS; }
get 'TK_SHORTCUT'() : TIMESTEP_KEYFRAME { return [this, 'TK_SHORTCUT', 1]  as unknown as TIMESTEP_KEYFRAME; }

        constructor(opts:{
            'base_multiplier': FLOAT,'flip_weights': BOOLEAN,'uncond_multiplier'?: FLOAT,'cn_extras'?: CN_WEIGHTS_EXTRAS,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            this['base_multiplier'] = opts['base_multiplier'];
this['flip_weights'] = opts['flip_weights']
            if(opts['uncond_multiplier']!==undefined) this['uncond_multiplier'] = opts['uncond_multiplier'];
if(opts['cn_extras']!==undefined) this['cn_extras'] = opts['cn_extras'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'base_multiplier':  0.825,
'flip_weights':  false,
'uncond_multiplier':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ScaledSoftMaskedUniversalWeights' : class extends Node{
        //Setters
        set 'mask'(value : MASK)  { super.$$link(0, value) } 
set 'min_base_multiplier'(value : FLOAT)  { super.$$link(1, value) } 
set 'max_base_multiplier'(value : FLOAT)  { super.$$link(2, value) } 
set 'uncond_multiplier'(value : FLOAT)  { super.$$link(3, value) } 
set 'cn_extras'(value : CN_WEIGHTS_EXTRAS)  { super.$$link(4, value) } 
set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(5, value) } 

        //Getters
        get 'CN_WEIGHTS'() : CONTROL_NET_WEIGHTS { return [this, 'CN_WEIGHTS', 0]  as unknown as CONTROL_NET_WEIGHTS; }
get 'TK_SHORTCUT'() : TIMESTEP_KEYFRAME { return [this, 'TK_SHORTCUT', 1]  as unknown as TIMESTEP_KEYFRAME; }

        constructor(opts:{
            'mask': MASK,'min_base_multiplier': FLOAT,'max_base_multiplier': FLOAT,'uncond_multiplier'?: FLOAT,'cn_extras'?: CN_WEIGHTS_EXTRAS,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            this['mask'] = opts['mask'];
this['min_base_multiplier'] = opts['min_base_multiplier'];
this['max_base_multiplier'] = opts['max_base_multiplier']
            if(opts['uncond_multiplier']!==undefined) this['uncond_multiplier'] = opts['uncond_multiplier'];
if(opts['cn_extras']!==undefined) this['cn_extras'] = opts['cn_extras'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'min_base_multiplier':  0,
'max_base_multiplier':  1,
'uncond_multiplier':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'SoftControlNetWeights' : class extends Node{
        //Setters
        set 'weight_00'(value : FLOAT)  { super.$$link(0, value) } 
set 'weight_01'(value : FLOAT)  { super.$$link(1, value) } 
set 'weight_02'(value : FLOAT)  { super.$$link(2, value) } 
set 'weight_03'(value : FLOAT)  { super.$$link(3, value) } 
set 'weight_04'(value : FLOAT)  { super.$$link(4, value) } 
set 'weight_05'(value : FLOAT)  { super.$$link(5, value) } 
set 'weight_06'(value : FLOAT)  { super.$$link(6, value) } 
set 'weight_07'(value : FLOAT)  { super.$$link(7, value) } 
set 'weight_08'(value : FLOAT)  { super.$$link(8, value) } 
set 'weight_09'(value : FLOAT)  { super.$$link(9, value) } 
set 'weight_10'(value : FLOAT)  { super.$$link(10, value) } 
set 'weight_11'(value : FLOAT)  { super.$$link(11, value) } 
set 'weight_12'(value : FLOAT)  { super.$$link(12, value) } 
set 'flip_weights'(value : BOOLEAN)  { super.$$link(13, value) } 
set 'uncond_multiplier'(value : FLOAT)  { super.$$link(14, value) } 
set 'cn_extras'(value : CN_WEIGHTS_EXTRAS)  { super.$$link(15, value) } 
set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(16, value) } 

        //Getters
        get 'CN_WEIGHTS'() : CONTROL_NET_WEIGHTS { return [this, 'CN_WEIGHTS', 0]  as unknown as CONTROL_NET_WEIGHTS; }
get 'TK_SHORTCUT'() : TIMESTEP_KEYFRAME { return [this, 'TK_SHORTCUT', 1]  as unknown as TIMESTEP_KEYFRAME; }

        constructor(opts:{
            'weight_00': FLOAT,'weight_01': FLOAT,'weight_02': FLOAT,'weight_03': FLOAT,'weight_04': FLOAT,'weight_05': FLOAT,'weight_06': FLOAT,'weight_07': FLOAT,'weight_08': FLOAT,'weight_09': FLOAT,'weight_10': FLOAT,'weight_11': FLOAT,'weight_12': FLOAT,'flip_weights': BOOLEAN,'uncond_multiplier'?: FLOAT,'cn_extras'?: CN_WEIGHTS_EXTRAS,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            this['weight_00'] = opts['weight_00'];
this['weight_01'] = opts['weight_01'];
this['weight_02'] = opts['weight_02'];
this['weight_03'] = opts['weight_03'];
this['weight_04'] = opts['weight_04'];
this['weight_05'] = opts['weight_05'];
this['weight_06'] = opts['weight_06'];
this['weight_07'] = opts['weight_07'];
this['weight_08'] = opts['weight_08'];
this['weight_09'] = opts['weight_09'];
this['weight_10'] = opts['weight_10'];
this['weight_11'] = opts['weight_11'];
this['weight_12'] = opts['weight_12'];
this['flip_weights'] = opts['flip_weights']
            if(opts['uncond_multiplier']!==undefined) this['uncond_multiplier'] = opts['uncond_multiplier'];
if(opts['cn_extras']!==undefined) this['cn_extras'] = opts['cn_extras'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'weight_00':  0.09941396206337118,
'weight_01':  0.12050177219802567,
'weight_02':  0.14606275417942507,
'weight_03':  0.17704576264172736,
'weight_04':  0.214600924414215,
'weight_05':  0.26012233262329093,
'weight_06':  0.3152997971191405,
'weight_07':  0.3821815722656249,
'weight_08':  0.4632503906249999,
'weight_09':  0.561515625,
'weight_10':  0.6806249999999999,
'weight_11':  0.825,
'weight_12':  1,
'flip_weights':  false,
'uncond_multiplier':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'CustomControlNetWeights' : class extends Node{
        //Setters
        set 'weight_00'(value : FLOAT)  { super.$$link(0, value) } 
set 'weight_01'(value : FLOAT)  { super.$$link(1, value) } 
set 'weight_02'(value : FLOAT)  { super.$$link(2, value) } 
set 'weight_03'(value : FLOAT)  { super.$$link(3, value) } 
set 'weight_04'(value : FLOAT)  { super.$$link(4, value) } 
set 'weight_05'(value : FLOAT)  { super.$$link(5, value) } 
set 'weight_06'(value : FLOAT)  { super.$$link(6, value) } 
set 'weight_07'(value : FLOAT)  { super.$$link(7, value) } 
set 'weight_08'(value : FLOAT)  { super.$$link(8, value) } 
set 'weight_09'(value : FLOAT)  { super.$$link(9, value) } 
set 'weight_10'(value : FLOAT)  { super.$$link(10, value) } 
set 'weight_11'(value : FLOAT)  { super.$$link(11, value) } 
set 'weight_12'(value : FLOAT)  { super.$$link(12, value) } 
set 'flip_weights'(value : BOOLEAN)  { super.$$link(13, value) } 
set 'uncond_multiplier'(value : FLOAT)  { super.$$link(14, value) } 
set 'cn_extras'(value : CN_WEIGHTS_EXTRAS)  { super.$$link(15, value) } 
set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(16, value) } 

        //Getters
        get 'CN_WEIGHTS'() : CONTROL_NET_WEIGHTS { return [this, 'CN_WEIGHTS', 0]  as unknown as CONTROL_NET_WEIGHTS; }
get 'TK_SHORTCUT'() : TIMESTEP_KEYFRAME { return [this, 'TK_SHORTCUT', 1]  as unknown as TIMESTEP_KEYFRAME; }

        constructor(opts:{
            'weight_00': FLOAT,'weight_01': FLOAT,'weight_02': FLOAT,'weight_03': FLOAT,'weight_04': FLOAT,'weight_05': FLOAT,'weight_06': FLOAT,'weight_07': FLOAT,'weight_08': FLOAT,'weight_09': FLOAT,'weight_10': FLOAT,'weight_11': FLOAT,'weight_12': FLOAT,'flip_weights': BOOLEAN,'uncond_multiplier'?: FLOAT,'cn_extras'?: CN_WEIGHTS_EXTRAS,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            this['weight_00'] = opts['weight_00'];
this['weight_01'] = opts['weight_01'];
this['weight_02'] = opts['weight_02'];
this['weight_03'] = opts['weight_03'];
this['weight_04'] = opts['weight_04'];
this['weight_05'] = opts['weight_05'];
this['weight_06'] = opts['weight_06'];
this['weight_07'] = opts['weight_07'];
this['weight_08'] = opts['weight_08'];
this['weight_09'] = opts['weight_09'];
this['weight_10'] = opts['weight_10'];
this['weight_11'] = opts['weight_11'];
this['weight_12'] = opts['weight_12'];
this['flip_weights'] = opts['flip_weights']
            if(opts['uncond_multiplier']!==undefined) this['uncond_multiplier'] = opts['uncond_multiplier'];
if(opts['cn_extras']!==undefined) this['cn_extras'] = opts['cn_extras'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'weight_00':  1,
'weight_01':  1,
'weight_02':  1,
'weight_03':  1,
'weight_04':  1,
'weight_05':  1,
'weight_06':  1,
'weight_07':  1,
'weight_08':  1,
'weight_09':  1,
'weight_10':  1,
'weight_11':  1,
'weight_12':  1,
'flip_weights':  false,
'uncond_multiplier':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'SoftT2IAdapterWeights' : class extends Node{
        //Setters
        set 'weight_00'(value : FLOAT)  { super.$$link(0, value) } 
set 'weight_01'(value : FLOAT)  { super.$$link(1, value) } 
set 'weight_02'(value : FLOAT)  { super.$$link(2, value) } 
set 'weight_03'(value : FLOAT)  { super.$$link(3, value) } 
set 'flip_weights'(value : BOOLEAN)  { super.$$link(4, value) } 
set 'uncond_multiplier'(value : FLOAT)  { super.$$link(5, value) } 
set 'cn_extras'(value : CN_WEIGHTS_EXTRAS)  { super.$$link(6, value) } 
set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(7, value) } 

        //Getters
        get 'CN_WEIGHTS'() : CONTROL_NET_WEIGHTS { return [this, 'CN_WEIGHTS', 0]  as unknown as CONTROL_NET_WEIGHTS; }
get 'TK_SHORTCUT'() : TIMESTEP_KEYFRAME { return [this, 'TK_SHORTCUT', 1]  as unknown as TIMESTEP_KEYFRAME; }

        constructor(opts:{
            'weight_00': FLOAT,'weight_01': FLOAT,'weight_02': FLOAT,'weight_03': FLOAT,'flip_weights': BOOLEAN,'uncond_multiplier'?: FLOAT,'cn_extras'?: CN_WEIGHTS_EXTRAS,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            this['weight_00'] = opts['weight_00'];
this['weight_01'] = opts['weight_01'];
this['weight_02'] = opts['weight_02'];
this['weight_03'] = opts['weight_03'];
this['flip_weights'] = opts['flip_weights']
            if(opts['uncond_multiplier']!==undefined) this['uncond_multiplier'] = opts['uncond_multiplier'];
if(opts['cn_extras']!==undefined) this['cn_extras'] = opts['cn_extras'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'weight_00':  0.25,
'weight_01':  0.62,
'weight_02':  0.825,
'weight_03':  1,
'flip_weights':  false,
'uncond_multiplier':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'CustomT2IAdapterWeights' : class extends Node{
        //Setters
        set 'weight_00'(value : FLOAT)  { super.$$link(0, value) } 
set 'weight_01'(value : FLOAT)  { super.$$link(1, value) } 
set 'weight_02'(value : FLOAT)  { super.$$link(2, value) } 
set 'weight_03'(value : FLOAT)  { super.$$link(3, value) } 
set 'flip_weights'(value : BOOLEAN)  { super.$$link(4, value) } 
set 'uncond_multiplier'(value : FLOAT)  { super.$$link(5, value) } 
set 'cn_extras'(value : CN_WEIGHTS_EXTRAS)  { super.$$link(6, value) } 
set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(7, value) } 

        //Getters
        get 'CN_WEIGHTS'() : CONTROL_NET_WEIGHTS { return [this, 'CN_WEIGHTS', 0]  as unknown as CONTROL_NET_WEIGHTS; }
get 'TK_SHORTCUT'() : TIMESTEP_KEYFRAME { return [this, 'TK_SHORTCUT', 1]  as unknown as TIMESTEP_KEYFRAME; }

        constructor(opts:{
            'weight_00': FLOAT,'weight_01': FLOAT,'weight_02': FLOAT,'weight_03': FLOAT,'flip_weights': BOOLEAN,'uncond_multiplier'?: FLOAT,'cn_extras'?: CN_WEIGHTS_EXTRAS,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            this['weight_00'] = opts['weight_00'];
this['weight_01'] = opts['weight_01'];
this['weight_02'] = opts['weight_02'];
this['weight_03'] = opts['weight_03'];
this['flip_weights'] = opts['flip_weights']
            if(opts['uncond_multiplier']!==undefined) this['uncond_multiplier'] = opts['uncond_multiplier'];
if(opts['cn_extras']!==undefined) this['cn_extras'] = opts['cn_extras'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'weight_00':  1,
'weight_01':  1,
'weight_02':  1,
'weight_03':  1,
'flip_weights':  false,
'uncond_multiplier':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ACN_DefaultUniversalWeights' : class extends Node{
        //Setters
        set 'cn_extras'(value : CN_WEIGHTS_EXTRAS)  { super.$$link(0, value) } 
set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(1, value) } 

        //Getters
        get 'CN_WEIGHTS'() : CONTROL_NET_WEIGHTS { return [this, 'CN_WEIGHTS', 0]  as unknown as CONTROL_NET_WEIGHTS; }
get 'TK_SHORTCUT'() : TIMESTEP_KEYFRAME { return [this, 'TK_SHORTCUT', 1]  as unknown as TIMESTEP_KEYFRAME; }

        constructor(opts:{
            'cn_extras'?: CN_WEIGHTS_EXTRAS,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            
            if(opts['cn_extras']!==undefined) this['cn_extras'] = opts['cn_extras'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ACN_SparseCtrlRGBPreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'vae'(value : VAE)  { super.$$link(1, value) } 
set 'latent_size'(value : LATENT)  { super.$$link(2, value) } 
set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(3, value) } 

        //Getters
        get 'proc_IMAGE'() : IMAGE { return [this, 'proc_IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'vae': VAE,'latent_size': LATENT,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            this['image'] = opts['image'];
this['vae'] = opts['vae'];
this['latent_size'] = opts['latent_size']
            if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ACN_SparseCtrlLoaderAdvanced' : class extends Node{
        //Setters
        set 'sparsectrl_name'(value : 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors')  { super.$$link(0, value) } 
set 'use_motion'(value : BOOLEAN)  { super.$$link(1, value) } 
set 'motion_strength'(value : FLOAT)  { super.$$link(2, value) } 
set 'motion_scale'(value : FLOAT)  { super.$$link(3, value) } 
set 'sparse_method'(value : SPARSE_METHOD)  { super.$$link(4, value) } 
set 'tk_optional'(value : TIMESTEP_KEYFRAME)  { super.$$link(5, value) } 
set 'context_aware'(value : 'nearest_hint'|'off')  { super.$$link(6, value) } 
set 'sparse_hint_mult'(value : FLOAT)  { super.$$link(7, value) } 
set 'sparse_nonhint_mult'(value : FLOAT)  { super.$$link(8, value) } 
set 'sparse_mask_mult'(value : FLOAT)  { super.$$link(9, value) } 

        //Getters
        get 'CONTROL_NET'() : CONTROL_NET { return [this, 'CONTROL_NET', 0]  as unknown as CONTROL_NET; }

        constructor(opts:{
            'sparsectrl_name': 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors','use_motion': BOOLEAN,'motion_strength': FLOAT,'motion_scale': FLOAT,'sparse_method'?: SPARSE_METHOD,'tk_optional'?: TIMESTEP_KEYFRAME,'context_aware'?: 'nearest_hint'|'off','sparse_hint_mult'?: FLOAT,'sparse_nonhint_mult'?: FLOAT,'sparse_mask_mult'?: FLOAT
        }){
            super(ctx);

            this['sparsectrl_name'] = opts['sparsectrl_name'];
this['use_motion'] = opts['use_motion'];
this['motion_strength'] = opts['motion_strength'];
this['motion_scale'] = opts['motion_scale']
            if(opts['sparse_method']!==undefined) this['sparse_method'] = opts['sparse_method'];
if(opts['tk_optional']!==undefined) this['tk_optional'] = opts['tk_optional'];
if(opts['context_aware']!==undefined) this['context_aware'] = opts['context_aware'];
if(opts['sparse_hint_mult']!==undefined) this['sparse_hint_mult'] = opts['sparse_hint_mult'];
if(opts['sparse_nonhint_mult']!==undefined) this['sparse_nonhint_mult'] = opts['sparse_nonhint_mult'];
if(opts['sparse_mask_mult']!==undefined) this['sparse_mask_mult'] = opts['sparse_mask_mult']

        }

        static defaults = {
            'use_motion':  true,
'motion_strength':  1,
'motion_scale':  1,
'sparse_hint_mult':  1,
'sparse_nonhint_mult':  1,
'sparse_mask_mult':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ACN_SparseCtrlMergedLoaderAdvanced' : class extends Node{
        //Setters
        set 'sparsectrl_name'(value : 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors')  { super.$$link(0, value) } 
set 'control_net_name'(value : 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors')  { super.$$link(1, value) } 
set 'use_motion'(value : BOOLEAN)  { super.$$link(2, value) } 
set 'motion_strength'(value : FLOAT)  { super.$$link(3, value) } 
set 'motion_scale'(value : FLOAT)  { super.$$link(4, value) } 
set 'sparse_method'(value : SPARSE_METHOD)  { super.$$link(5, value) } 
set 'tk_optional'(value : TIMESTEP_KEYFRAME)  { super.$$link(6, value) } 

        //Getters
        get 'CONTROL_NET'() : CONTROL_NET { return [this, 'CONTROL_NET', 0]  as unknown as CONTROL_NET; }

        constructor(opts:{
            'sparsectrl_name': 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors','control_net_name': 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors','use_motion': BOOLEAN,'motion_strength': FLOAT,'motion_scale': FLOAT,'sparse_method'?: SPARSE_METHOD,'tk_optional'?: TIMESTEP_KEYFRAME
        }){
            super(ctx);

            this['sparsectrl_name'] = opts['sparsectrl_name'];
this['control_net_name'] = opts['control_net_name'];
this['use_motion'] = opts['use_motion'];
this['motion_strength'] = opts['motion_strength'];
this['motion_scale'] = opts['motion_scale']
            if(opts['sparse_method']!==undefined) this['sparse_method'] = opts['sparse_method'];
if(opts['tk_optional']!==undefined) this['tk_optional'] = opts['tk_optional']

        }

        static defaults = {
            'use_motion':  true,
'motion_strength':  1,
'motion_scale':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ACN_SparseCtrlIndexMethodNode' : class extends Node{
        //Setters
        set 'indexes'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'SPARSE_METHOD'() : SPARSE_METHOD { return [this, 'SPARSE_METHOD', 0]  as unknown as SPARSE_METHOD; }

        constructor(opts:{
            'indexes': STRING
        }){
            super(ctx);

            this['indexes'] = opts['indexes']
            

        }

        static defaults = {
            'indexes':  "0"
}
},

    /**
     * TODO Docs based on metadata
     */
    'ACN_SparseCtrlSpreadMethodNode' : class extends Node{
        //Setters
        set 'spread'(value : 'uniform'|'starting'|'ending'|'center')  { super.$$link(0, value) } 

        //Getters
        get 'SPARSE_METHOD'() : SPARSE_METHOD { return [this, 'SPARSE_METHOD', 0]  as unknown as SPARSE_METHOD; }

        constructor(opts:{
            'spread': 'uniform'|'starting'|'ending'|'center'
        }){
            super(ctx);

            this['spread'] = opts['spread']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ACN_SparseCtrlWeightExtras' : class extends Node{
        //Setters
        set 'cn_extras'(value : CN_WEIGHTS_EXTRAS)  { super.$$link(0, value) } 
set 'sparse_hint_mult'(value : FLOAT)  { super.$$link(1, value) } 
set 'sparse_nonhint_mult'(value : FLOAT)  { super.$$link(2, value) } 
set 'sparse_mask_mult'(value : FLOAT)  { super.$$link(3, value) } 
set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(4, value) } 

        //Getters
        get 'cn_extras'() : CN_WEIGHTS_EXTRAS { return [this, 'cn_extras', 0]  as unknown as CN_WEIGHTS_EXTRAS; }

        constructor(opts:{
            'cn_extras'?: CN_WEIGHTS_EXTRAS,'sparse_hint_mult'?: FLOAT,'sparse_nonhint_mult'?: FLOAT,'sparse_mask_mult'?: FLOAT,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            
            if(opts['cn_extras']!==undefined) this['cn_extras'] = opts['cn_extras'];
if(opts['sparse_hint_mult']!==undefined) this['sparse_hint_mult'] = opts['sparse_hint_mult'];
if(opts['sparse_nonhint_mult']!==undefined) this['sparse_nonhint_mult'] = opts['sparse_nonhint_mult'];
if(opts['sparse_mask_mult']!==undefined) this['sparse_mask_mult'] = opts['sparse_mask_mult'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'sparse_hint_mult':  1,
'sparse_nonhint_mult':  1,
'sparse_mask_mult':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ACN_ControlNet++LoaderSingle' : class extends Node{
        //Setters
        set 'name'(value : 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors')  { super.$$link(0, value) } 
set 'control_type'(value : 'openpose'|'depth'|'hed/pidi/scribble/ted'|'canny/lineart/mlsd'|'normal'|'segment'|'tile'|'inpaint/outpaint'|'none')  { super.$$link(1, value) } 

        //Getters
        get 'CONTROL_NET'() : CONTROL_NET { return [this, 'CONTROL_NET', 0]  as unknown as CONTROL_NET; }

        constructor(opts:{
            'name': 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors','control_type': 'openpose'|'depth'|'hed/pidi/scribble/ted'|'canny/lineart/mlsd'|'normal'|'segment'|'tile'|'inpaint/outpaint'|'none'
        }){
            super(ctx);

            this['name'] = opts['name'];
this['control_type'] = opts['control_type']
            

        }

        static defaults = {
            'control_type':  "none"
}
},

    /**
     * TODO Docs based on metadata
     */
    'ACN_ControlNet++LoaderAdvanced' : class extends Node{
        //Setters
        set 'plus_input'(value : PLUS_INPUT)  { super.$$link(0, value) } 
set 'name'(value : 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors')  { super.$$link(1, value) } 

        //Getters
        get 'CONTROL_NET'() : CONTROL_NET { return [this, 'CONTROL_NET', 0]  as unknown as CONTROL_NET; }
get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 1]  as unknown as IMAGE; }

        constructor(opts:{
            'plus_input': PLUS_INPUT,'name': 'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model.safetensors'|'SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors'|'control-lora-canny-rank128.safetensors'|'control_boxdepth_LooseControlfp16.safetensors'|'control_lora_rank128_v11f1e_sd15_tile_fp16.safetensors'|'control_lora_rank128_v11f1p_sd15_depth_fp16.safetensors'|'control_lora_rank128_v11p_sd15_normalbae_fp16.safetensors'|'control_lora_rank128_v11p_sd15_openpose_fp16.safetensors'|'control_lora_rank128_v11p_sd15_scribble_fp16.safetensors'|'control_lora_rank128_v11p_sd15_seg_fp16.safetensors'|'control_sd15_inpaint_depth_hand_fp16.safetensors'|'control_v11e_sd15_ip2p.pth'|'control_v11e_sd15_ip2p_fp16.safetensors'|'control_v11e_sd15_shuffle.pth'|'control_v11f1e_sd15_tile.pth'|'control_v11f1p_sd15_depth.pth'|'control_v11p_sd15_canny.pth'|'control_v11p_sd15_canny_fp16.safetensors'|'control_v11p_sd15_inpaint.pth'|'control_v11p_sd15_inpaint_fp16.safetensors'|'control_v11p_sd15_lineart.pth'|'control_v11p_sd15_lineart_fp16.safetensors'|'control_v11p_sd15_mlsd.pth'|'control_v11p_sd15_normalbae.pth'|'control_v11p_sd15_openpose.pth'|'control_v11p_sd15_scribble.pth'|'control_v11p_sd15_seg.pth'|'control_v11p_sd15_softedge.pth'|'control_v11p_sd15_softedge_fp16.safetensors'|'control_v11p_sd15s2_lineart_anime.pth'|'control_v11p_sd15s2_lineart_anime_fp16.safetensors'|'control_v1p_sd15_brightness.safetensors'|'control_v1p_sd15_illumination.safetensors'|'fooocus_ip_negative.safetensors'|'fooocus_xl_cpds_128.safetensors'|'ip-adapter-plus_sdxl_vit-h.bin'|'sai_xl_canny_256lora.safetensors'|'sai_xl_depth_256lora.safetensors'|'sai_xl_sketch_256lora.safetensors'|'t2i-adapter-depth-midas-sdxl-1.0.fp16.safetensors'|'t2i-adapter-depth-zoe-sdxl-1.0.fp16.safetensors'|'t2iadapter_canny_sd14v1.pth'|'t2iadapter_color_sd14v1.pth'|'t2iadapter_depth_sd14v1.pth'|'t2iadapter_keypose_sd14v1.pth'|'t2iadapter_openpose_sd14v1.pth'|'t2iadapter_seg_sd14v1.pth'|'t2iadapter_sketch_sd14v1.pth'|'t2iadapter_style_sd14v1.pth'|'thibaud_xl_openpose_256lora.safetensors'
        }){
            super(ctx);

            this['plus_input'] = opts['plus_input'];
this['name'] = opts['name']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ACN_ControlNet++InputNode' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'control_type'(value : 'openpose'|'depth'|'hed/pidi/scribble/ted'|'canny/lineart/mlsd'|'normal'|'segment'|'tile'|'inpaint/outpaint')  { super.$$link(1, value) } 
set 'prev_plus_input'(value : PLUS_INPUT)  { super.$$link(2, value) } 
set 'autosize'(value : ACNAUTOSIZE)  { super.$$link(3, value) } 

        //Getters
        get 'PLUS_INPUT'() : PLUS_INPUT { return [this, 'PLUS_INPUT', 0]  as unknown as PLUS_INPUT; }

        constructor(opts:{
            'image': IMAGE,'control_type': 'openpose'|'depth'|'hed/pidi/scribble/ted'|'canny/lineart/mlsd'|'normal'|'segment'|'tile'|'inpaint/outpaint','prev_plus_input'?: PLUS_INPUT,'autosize'?: ACNAUTOSIZE
        }){
            super(ctx);

            this['image'] = opts['image'];
this['control_type'] = opts['control_type']
            if(opts['prev_plus_input']!==undefined) this['prev_plus_input'] = opts['prev_plus_input'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ACN_ReferencePreprocessor' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'vae'(value : VAE)  { super.$$link(1, value) } 
set 'latent_size'(value : LATENT)  { super.$$link(2, value) } 

        //Getters
        get 'proc_IMAGE'() : IMAGE { return [this, 'proc_IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'vae': VAE,'latent_size': LATENT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['vae'] = opts['vae'];
this['latent_size'] = opts['latent_size']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ACN_ReferenceControlNet' : class extends Node{
        //Setters
        set 'reference_type'(value : 'reference_attn'|'reference_adain'|'reference_attn+adain')  { super.$$link(0, value) } 
set 'style_fidelity'(value : FLOAT)  { super.$$link(1, value) } 
set 'ref_weight'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'CONTROL_NET'() : CONTROL_NET { return [this, 'CONTROL_NET', 0]  as unknown as CONTROL_NET; }

        constructor(opts:{
            'reference_type': 'reference_attn'|'reference_adain'|'reference_attn+adain','style_fidelity': FLOAT,'ref_weight': FLOAT
        }){
            super(ctx);

            this['reference_type'] = opts['reference_type'];
this['style_fidelity'] = opts['style_fidelity'];
this['ref_weight'] = opts['ref_weight']
            

        }

        static defaults = {
            'style_fidelity':  0.5,
'ref_weight':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ACN_ReferenceControlNetFinetune' : class extends Node{
        //Setters
        set 'attn_style_fidelity'(value : FLOAT)  { super.$$link(0, value) } 
set 'attn_ref_weight'(value : FLOAT)  { super.$$link(1, value) } 
set 'attn_strength'(value : FLOAT)  { super.$$link(2, value) } 
set 'adain_style_fidelity'(value : FLOAT)  { super.$$link(3, value) } 
set 'adain_ref_weight'(value : FLOAT)  { super.$$link(4, value) } 
set 'adain_strength'(value : FLOAT)  { super.$$link(5, value) } 

        //Getters
        get 'CONTROL_NET'() : CONTROL_NET { return [this, 'CONTROL_NET', 0]  as unknown as CONTROL_NET; }

        constructor(opts:{
            'attn_style_fidelity': FLOAT,'attn_ref_weight': FLOAT,'attn_strength': FLOAT,'adain_style_fidelity': FLOAT,'adain_ref_weight': FLOAT,'adain_strength': FLOAT
        }){
            super(ctx);

            this['attn_style_fidelity'] = opts['attn_style_fidelity'];
this['attn_ref_weight'] = opts['attn_ref_weight'];
this['attn_strength'] = opts['attn_strength'];
this['adain_style_fidelity'] = opts['adain_style_fidelity'];
this['adain_ref_weight'] = opts['adain_ref_weight'];
this['adain_strength'] = opts['adain_strength']
            

        }

        static defaults = {
            'attn_style_fidelity':  0.5,
'attn_ref_weight':  1,
'attn_strength':  1,
'adain_style_fidelity':  0.5,
'adain_ref_weight':  1,
'adain_strength':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'LoadImagesFromDirectory' : class extends Node{
        //Setters
        set 'directory'(value : STRING)  { super.$$link(0, value) } 
set 'image_load_cap'(value : INT)  { super.$$link(1, value) } 
set 'start_index'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }
get 'MASK'() : MASK { return [this, 'MASK', 1]  as unknown as MASK; }
get 'INT'() : INT { return [this, 'INT', 2]  as unknown as INT; }

        constructor(opts:{
            'directory': STRING,'image_load_cap'?: INT,'start_index'?: INT
        }){
            super(ctx);

            this['directory'] = opts['directory']
            if(opts['image_load_cap']!==undefined) this['image_load_cap'] = opts['image_load_cap'];
if(opts['start_index']!==undefined) this['start_index'] = opts['start_index']

        }

        static defaults = {
            'directory':  "",
'image_load_cap':  0,
'start_index':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'LatentInterposer' : class extends Node{
        //Setters
        set 'samples'(value : LATENT)  { super.$$link(0, value) } 
set 'latent_src'(value : 'v1'|'xl'|'v3'|'ca')  { super.$$link(1, value) } 
set 'latent_dst'(value : 'v1'|'xl'|'v3')  { super.$$link(2, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'samples': LATENT,'latent_src': 'v1'|'xl'|'v3'|'ca','latent_dst': 'v1'|'xl'|'v3'
        }){
            super(ctx);

            this['samples'] = opts['samples'];
this['latent_src'] = opts['latent_src'];
this['latent_dst'] = opts['latent_dst']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_AnimateDiffLoRALoader' : class extends Node{
        //Setters
        set 'name'(value : 'v2_lora_PanLeft.ckpt'|'v2_lora_PanRight.ckpt'|'v2_lora_RollingAnticlockwise.ckpt'|'v2_lora_RollingClockwise.ckpt'|'v2_lora_TiltDown.ckpt'|'v2_lora_TiltUp.ckpt'|'v2_lora_ZoomIn.ckpt'|'v2_lora_ZoomOut.ckpt')  { super.$$link(0, value) } 
set 'strength'(value : FLOAT)  { super.$$link(1, value) } 
set 'prev_motion_lora'(value : MOTION_LORA)  { super.$$link(2, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(3, value) } 

        //Getters
        get 'MOTION_LORA'() : MOTION_LORA { return [this, 'MOTION_LORA', 0]  as unknown as MOTION_LORA; }

        constructor(opts:{
            'name': 'v2_lora_PanLeft.ckpt'|'v2_lora_PanRight.ckpt'|'v2_lora_RollingAnticlockwise.ckpt'|'v2_lora_RollingClockwise.ckpt'|'v2_lora_TiltDown.ckpt'|'v2_lora_TiltUp.ckpt'|'v2_lora_ZoomIn.ckpt'|'v2_lora_ZoomOut.ckpt','strength': FLOAT,'prev_motion_lora'?: MOTION_LORA,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['name'] = opts['name'];
this['strength'] = opts['strength']
            if(opts['prev_motion_lora']!==undefined) this['prev_motion_lora'] = opts['prev_motion_lora'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'strength':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_AnimateDiffSamplingSettings' : class extends Node{
        //Setters
        set 'batch_offset'(value : INT)  { super.$$link(0, value) } 
set 'noise_type'(value : 'default'|'constant'|'empty'|'repeated_context'|'FreeNoise')  { super.$$link(1, value) } 
set 'seed_gen'(value : 'comfy'|'comfy [gpu]'|'auto1111'|'auto1111 [gpu]')  { super.$$link(2, value) } 
set 'seed_offset'(value : INT)  { super.$$link(3, value) } 
set 'noise_layers'(value : NOISE_LAYERS)  { super.$$link(4, value) } 
set 'iteration_opts'(value : ITERATION_OPTS)  { super.$$link(5, value) } 
set 'seed_override'(value : INT)  { super.$$link(6, value) } 
set 'adapt_denoise_steps'(value : BOOLEAN)  { super.$$link(7, value) } 
set 'custom_cfg'(value : CUSTOM_CFG)  { super.$$link(8, value) } 
set 'sigma_schedule'(value : SIGMA_SCHEDULE)  { super.$$link(9, value) } 
set 'image_inject'(value : IMAGE_INJECT)  { super.$$link(10, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(11, value) } 

        //Getters
        get 'settings'() : SAMPLE_SETTINGS { return [this, 'settings', 0]  as unknown as SAMPLE_SETTINGS; }

        constructor(opts:{
            'batch_offset': INT,'noise_type': 'default'|'constant'|'empty'|'repeated_context'|'FreeNoise','seed_gen': 'comfy'|'comfy [gpu]'|'auto1111'|'auto1111 [gpu]','seed_offset': INT,'noise_layers'?: NOISE_LAYERS,'iteration_opts'?: ITERATION_OPTS,'seed_override'?: INT,'adapt_denoise_steps'?: BOOLEAN,'custom_cfg'?: CUSTOM_CFG,'sigma_schedule'?: SIGMA_SCHEDULE,'image_inject'?: IMAGE_INJECT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['batch_offset'] = opts['batch_offset'];
this['noise_type'] = opts['noise_type'];
this['seed_gen'] = opts['seed_gen'];
this['seed_offset'] = opts['seed_offset']
            if(opts['noise_layers']!==undefined) this['noise_layers'] = opts['noise_layers'];
if(opts['iteration_opts']!==undefined) this['iteration_opts'] = opts['iteration_opts'];
if(opts['seed_override']!==undefined) this['seed_override'] = opts['seed_override'];
if(opts['adapt_denoise_steps']!==undefined) this['adapt_denoise_steps'] = opts['adapt_denoise_steps'];
if(opts['custom_cfg']!==undefined) this['custom_cfg'] = opts['custom_cfg'];
if(opts['sigma_schedule']!==undefined) this['sigma_schedule'] = opts['sigma_schedule'];
if(opts['image_inject']!==undefined) this['image_inject'] = opts['image_inject'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'batch_offset':  0,
'seed_offset':  0,
'seed_override':  0,
'adapt_denoise_steps':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_AnimateDiffKeyframe' : class extends Node{
        //Setters
        set 'start_percent'(value : FLOAT)  { super.$$link(0, value) } 
set 'prev_ad_keyframes'(value : AD_KEYFRAMES)  { super.$$link(1, value) } 
set 'scale_multival'(value : MULTIVAL)  { super.$$link(2, value) } 
set 'effect_multival'(value : MULTIVAL)  { super.$$link(3, value) } 
set 'inherit_missing'(value : BOOLEAN)  { super.$$link(4, value) } 
set 'guarantee_steps'(value : INT)  { super.$$link(5, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(6, value) } 

        //Getters
        get 'AD_KEYFRAMES'() : AD_KEYFRAMES { return [this, 'AD_KEYFRAMES', 0]  as unknown as AD_KEYFRAMES; }

        constructor(opts:{
            'start_percent': FLOAT,'prev_ad_keyframes'?: AD_KEYFRAMES,'scale_multival'?: MULTIVAL,'effect_multival'?: MULTIVAL,'inherit_missing'?: BOOLEAN,'guarantee_steps'?: INT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['start_percent'] = opts['start_percent']
            if(opts['prev_ad_keyframes']!==undefined) this['prev_ad_keyframes'] = opts['prev_ad_keyframes'];
if(opts['scale_multival']!==undefined) this['scale_multival'] = opts['scale_multival'];
if(opts['effect_multival']!==undefined) this['effect_multival'] = opts['effect_multival'];
if(opts['inherit_missing']!==undefined) this['inherit_missing'] = opts['inherit_missing'];
if(opts['guarantee_steps']!==undefined) this['guarantee_steps'] = opts['guarantee_steps'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'start_percent':  0,
'inherit_missing':  true,
'guarantee_steps':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_MultivalDynamic' : class extends Node{
        //Setters
        set 'float_val'(value : FLOAT)  { super.$$link(0, value) } 
set 'mask_optional'(value : MASK)  { super.$$link(1, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(2, value) } 

        //Getters
        get 'MULTIVAL'() : MULTIVAL { return [this, 'MULTIVAL', 0]  as unknown as MULTIVAL; }

        constructor(opts:{
            'float_val': FLOAT,'mask_optional'?: MASK,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['float_val'] = opts['float_val']
            if(opts['mask_optional']!==undefined) this['mask_optional'] = opts['mask_optional'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'float_val':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_MultivalDynamicFloatInput' : class extends Node{
        //Setters
        set 'float_val'(value : FLOAT)  { super.$$link(0, value) } 
set 'mask_optional'(value : MASK)  { super.$$link(1, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(2, value) } 

        //Getters
        get 'MULTIVAL'() : MULTIVAL { return [this, 'MULTIVAL', 0]  as unknown as MULTIVAL; }

        constructor(opts:{
            'float_val': FLOAT,'mask_optional'?: MASK,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['float_val'] = opts['float_val']
            if(opts['mask_optional']!==undefined) this['mask_optional'] = opts['mask_optional'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'float_val':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_MultivalScaledMask' : class extends Node{
        //Setters
        set 'min_float_val'(value : FLOAT)  { super.$$link(0, value) } 
set 'max_float_val'(value : FLOAT)  { super.$$link(1, value) } 
set 'mask'(value : MASK)  { super.$$link(2, value) } 
set 'scaling'(value : 'absolute'|'relative')  { super.$$link(3, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(4, value) } 

        //Getters
        get 'MULTIVAL'() : MULTIVAL { return [this, 'MULTIVAL', 0]  as unknown as MULTIVAL; }

        constructor(opts:{
            'min_float_val': FLOAT,'max_float_val': FLOAT,'mask': MASK,'scaling'?: 'absolute'|'relative','autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['min_float_val'] = opts['min_float_val'];
this['max_float_val'] = opts['max_float_val'];
this['mask'] = opts['mask']
            if(opts['scaling']!==undefined) this['scaling'] = opts['scaling'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'min_float_val':  0,
'max_float_val':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_MultivalConvertToMask' : class extends Node{
        //Setters
        set 'multival'(value : MULTIVAL)  { super.$$link(0, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(1, value) } 

        //Getters
        get 'MASK'() : MASK { return [this, 'MASK', 0]  as unknown as MASK; }

        constructor(opts:{
            'multival': MULTIVAL,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['multival'] = opts['multival']
            if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_StandardStaticContextOptions' : class extends Node{
        //Setters
        set 'context_length'(value : INT)  { super.$$link(0, value) } 
set 'context_overlap'(value : INT)  { super.$$link(1, value) } 
set 'fuse_method'(value : 'pyramid'|'relative'|'flat'|'delayed reverse sawtooth'|'pyramid-sigma'|'pyramid-sigma inverse'|'gauss-sigma'|'gauss-sigma inverse'|'random')  { super.$$link(2, value) } 
set 'use_on_equal_length'(value : BOOLEAN)  { super.$$link(3, value) } 
set 'start_percent'(value : FLOAT)  { super.$$link(4, value) } 
set 'guarantee_steps'(value : INT)  { super.$$link(5, value) } 
set 'prev_context'(value : CONTEXT_OPTIONS)  { super.$$link(6, value) } 
set 'view_opts'(value : VIEW_OPTS)  { super.$$link(7, value) } 

        //Getters
        get 'CONTEXT_OPTS'() : CONTEXT_OPTIONS { return [this, 'CONTEXT_OPTS', 0]  as unknown as CONTEXT_OPTIONS; }

        constructor(opts:{
            'context_length': INT,'context_overlap': INT,'fuse_method'?: 'pyramid'|'relative'|'flat'|'delayed reverse sawtooth'|'pyramid-sigma'|'pyramid-sigma inverse'|'gauss-sigma'|'gauss-sigma inverse'|'random','use_on_equal_length'?: BOOLEAN,'start_percent'?: FLOAT,'guarantee_steps'?: INT,'prev_context'?: CONTEXT_OPTIONS,'view_opts'?: VIEW_OPTS
        }){
            super(ctx);

            this['context_length'] = opts['context_length'];
this['context_overlap'] = opts['context_overlap']
            if(opts['fuse_method']!==undefined) this['fuse_method'] = opts['fuse_method'];
if(opts['use_on_equal_length']!==undefined) this['use_on_equal_length'] = opts['use_on_equal_length'];
if(opts['start_percent']!==undefined) this['start_percent'] = opts['start_percent'];
if(opts['guarantee_steps']!==undefined) this['guarantee_steps'] = opts['guarantee_steps'];
if(opts['prev_context']!==undefined) this['prev_context'] = opts['prev_context'];
if(opts['view_opts']!==undefined) this['view_opts'] = opts['view_opts']

        }

        static defaults = {
            'context_length':  16,
'context_overlap':  4,
'use_on_equal_length':  false,
'start_percent':  0,
'guarantee_steps':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_StandardUniformContextOptions' : class extends Node{
        //Setters
        set 'context_length'(value : INT)  { super.$$link(0, value) } 
set 'context_stride'(value : INT)  { super.$$link(1, value) } 
set 'context_overlap'(value : INT)  { super.$$link(2, value) } 
set 'fuse_method'(value : 'pyramid'|'flat'|'delayed reverse sawtooth'|'pyramid-sigma'|'pyramid-sigma inverse'|'gauss-sigma'|'gauss-sigma inverse'|'random')  { super.$$link(3, value) } 
set 'use_on_equal_length'(value : BOOLEAN)  { super.$$link(4, value) } 
set 'start_percent'(value : FLOAT)  { super.$$link(5, value) } 
set 'guarantee_steps'(value : INT)  { super.$$link(6, value) } 
set 'prev_context'(value : CONTEXT_OPTIONS)  { super.$$link(7, value) } 
set 'view_opts'(value : VIEW_OPTS)  { super.$$link(8, value) } 

        //Getters
        get 'CONTEXT_OPTS'() : CONTEXT_OPTIONS { return [this, 'CONTEXT_OPTS', 0]  as unknown as CONTEXT_OPTIONS; }

        constructor(opts:{
            'context_length': INT,'context_stride': INT,'context_overlap': INT,'fuse_method'?: 'pyramid'|'flat'|'delayed reverse sawtooth'|'pyramid-sigma'|'pyramid-sigma inverse'|'gauss-sigma'|'gauss-sigma inverse'|'random','use_on_equal_length'?: BOOLEAN,'start_percent'?: FLOAT,'guarantee_steps'?: INT,'prev_context'?: CONTEXT_OPTIONS,'view_opts'?: VIEW_OPTS
        }){
            super(ctx);

            this['context_length'] = opts['context_length'];
this['context_stride'] = opts['context_stride'];
this['context_overlap'] = opts['context_overlap']
            if(opts['fuse_method']!==undefined) this['fuse_method'] = opts['fuse_method'];
if(opts['use_on_equal_length']!==undefined) this['use_on_equal_length'] = opts['use_on_equal_length'];
if(opts['start_percent']!==undefined) this['start_percent'] = opts['start_percent'];
if(opts['guarantee_steps']!==undefined) this['guarantee_steps'] = opts['guarantee_steps'];
if(opts['prev_context']!==undefined) this['prev_context'] = opts['prev_context'];
if(opts['view_opts']!==undefined) this['view_opts'] = opts['view_opts']

        }

        static defaults = {
            'context_length':  16,
'context_stride':  1,
'context_overlap':  4,
'use_on_equal_length':  false,
'start_percent':  0,
'guarantee_steps':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_LoopedUniformContextOptions' : class extends Node{
        //Setters
        set 'context_length'(value : INT)  { super.$$link(0, value) } 
set 'context_stride'(value : INT)  { super.$$link(1, value) } 
set 'context_overlap'(value : INT)  { super.$$link(2, value) } 
set 'closed_loop'(value : BOOLEAN)  { super.$$link(3, value) } 
set 'fuse_method'(value : 'pyramid'|'flat'|'delayed reverse sawtooth'|'pyramid-sigma'|'pyramid-sigma inverse'|'gauss-sigma'|'gauss-sigma inverse'|'random')  { super.$$link(4, value) } 
set 'use_on_equal_length'(value : BOOLEAN)  { super.$$link(5, value) } 
set 'start_percent'(value : FLOAT)  { super.$$link(6, value) } 
set 'guarantee_steps'(value : INT)  { super.$$link(7, value) } 
set 'prev_context'(value : CONTEXT_OPTIONS)  { super.$$link(8, value) } 
set 'view_opts'(value : VIEW_OPTS)  { super.$$link(9, value) } 

        //Getters
        get 'CONTEXT_OPTS'() : CONTEXT_OPTIONS { return [this, 'CONTEXT_OPTS', 0]  as unknown as CONTEXT_OPTIONS; }

        constructor(opts:{
            'context_length': INT,'context_stride': INT,'context_overlap': INT,'closed_loop': BOOLEAN,'fuse_method'?: 'pyramid'|'flat'|'delayed reverse sawtooth'|'pyramid-sigma'|'pyramid-sigma inverse'|'gauss-sigma'|'gauss-sigma inverse'|'random','use_on_equal_length'?: BOOLEAN,'start_percent'?: FLOAT,'guarantee_steps'?: INT,'prev_context'?: CONTEXT_OPTIONS,'view_opts'?: VIEW_OPTS
        }){
            super(ctx);

            this['context_length'] = opts['context_length'];
this['context_stride'] = opts['context_stride'];
this['context_overlap'] = opts['context_overlap'];
this['closed_loop'] = opts['closed_loop']
            if(opts['fuse_method']!==undefined) this['fuse_method'] = opts['fuse_method'];
if(opts['use_on_equal_length']!==undefined) this['use_on_equal_length'] = opts['use_on_equal_length'];
if(opts['start_percent']!==undefined) this['start_percent'] = opts['start_percent'];
if(opts['guarantee_steps']!==undefined) this['guarantee_steps'] = opts['guarantee_steps'];
if(opts['prev_context']!==undefined) this['prev_context'] = opts['prev_context'];
if(opts['view_opts']!==undefined) this['view_opts'] = opts['view_opts']

        }

        static defaults = {
            'context_length':  16,
'context_stride':  1,
'context_overlap':  4,
'closed_loop':  false,
'use_on_equal_length':  false,
'start_percent':  0,
'guarantee_steps':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_ViewsOnlyContextOptions' : class extends Node{
        //Setters
        set 'view_opts_req'(value : VIEW_OPTS)  { super.$$link(0, value) } 
set 'start_percent'(value : FLOAT)  { super.$$link(1, value) } 
set 'guarantee_steps'(value : INT)  { super.$$link(2, value) } 
set 'prev_context'(value : CONTEXT_OPTIONS)  { super.$$link(3, value) } 

        //Getters
        get 'CONTEXT_OPTS'() : CONTEXT_OPTIONS { return [this, 'CONTEXT_OPTS', 0]  as unknown as CONTEXT_OPTIONS; }

        constructor(opts:{
            'view_opts_req': VIEW_OPTS,'start_percent'?: FLOAT,'guarantee_steps'?: INT,'prev_context'?: CONTEXT_OPTIONS
        }){
            super(ctx);

            this['view_opts_req'] = opts['view_opts_req']
            if(opts['start_percent']!==undefined) this['start_percent'] = opts['start_percent'];
if(opts['guarantee_steps']!==undefined) this['guarantee_steps'] = opts['guarantee_steps'];
if(opts['prev_context']!==undefined) this['prev_context'] = opts['prev_context']

        }

        static defaults = {
            'start_percent':  0,
'guarantee_steps':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_BatchedContextOptions' : class extends Node{
        //Setters
        set 'context_length'(value : INT)  { super.$$link(0, value) } 
set 'start_percent'(value : FLOAT)  { super.$$link(1, value) } 
set 'guarantee_steps'(value : INT)  { super.$$link(2, value) } 
set 'prev_context'(value : CONTEXT_OPTIONS)  { super.$$link(3, value) } 

        //Getters
        get 'CONTEXT_OPTS'() : CONTEXT_OPTIONS { return [this, 'CONTEXT_OPTS', 0]  as unknown as CONTEXT_OPTIONS; }

        constructor(opts:{
            'context_length': INT,'start_percent'?: FLOAT,'guarantee_steps'?: INT,'prev_context'?: CONTEXT_OPTIONS
        }){
            super(ctx);

            this['context_length'] = opts['context_length']
            if(opts['start_percent']!==undefined) this['start_percent'] = opts['start_percent'];
if(opts['guarantee_steps']!==undefined) this['guarantee_steps'] = opts['guarantee_steps'];
if(opts['prev_context']!==undefined) this['prev_context'] = opts['prev_context']

        }

        static defaults = {
            'context_length':  16,
'start_percent':  0,
'guarantee_steps':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_AnimateDiffUniformContextOptions' : class extends Node{
        //Setters
        set 'context_length'(value : INT)  { super.$$link(0, value) } 
set 'context_stride'(value : INT)  { super.$$link(1, value) } 
set 'context_overlap'(value : INT)  { super.$$link(2, value) } 
set 'context_schedule'(value : 'uniform')  { super.$$link(3, value) } 
set 'closed_loop'(value : BOOLEAN)  { super.$$link(4, value) } 
set 'fuse_method'(value : 'pyramid'|'flat'|'delayed reverse sawtooth'|'pyramid-sigma'|'pyramid-sigma inverse'|'gauss-sigma'|'gauss-sigma inverse'|'random')  { super.$$link(5, value) } 
set 'use_on_equal_length'(value : BOOLEAN)  { super.$$link(6, value) } 
set 'start_percent'(value : FLOAT)  { super.$$link(7, value) } 
set 'guarantee_steps'(value : INT)  { super.$$link(8, value) } 
set 'prev_context'(value : CONTEXT_OPTIONS)  { super.$$link(9, value) } 
set 'view_opts'(value : VIEW_OPTS)  { super.$$link(10, value) } 
set 'deprecation_warning'(value : ADEWARN)  { super.$$link(11, value) } 

        //Getters
        get 'CONTEXT_OPTS'() : CONTEXT_OPTIONS { return [this, 'CONTEXT_OPTS', 0]  as unknown as CONTEXT_OPTIONS; }

        constructor(opts:{
            'context_length': INT,'context_stride': INT,'context_overlap': INT,'context_schedule': 'uniform','closed_loop': BOOLEAN,'fuse_method'?: 'pyramid'|'flat'|'delayed reverse sawtooth'|'pyramid-sigma'|'pyramid-sigma inverse'|'gauss-sigma'|'gauss-sigma inverse'|'random','use_on_equal_length'?: BOOLEAN,'start_percent'?: FLOAT,'guarantee_steps'?: INT,'prev_context'?: CONTEXT_OPTIONS,'view_opts'?: VIEW_OPTS,'deprecation_warning'?: ADEWARN
        }){
            super(ctx);

            this['context_length'] = opts['context_length'];
this['context_stride'] = opts['context_stride'];
this['context_overlap'] = opts['context_overlap'];
this['context_schedule'] = opts['context_schedule'];
this['closed_loop'] = opts['closed_loop']
            if(opts['fuse_method']!==undefined) this['fuse_method'] = opts['fuse_method'];
if(opts['use_on_equal_length']!==undefined) this['use_on_equal_length'] = opts['use_on_equal_length'];
if(opts['start_percent']!==undefined) this['start_percent'] = opts['start_percent'];
if(opts['guarantee_steps']!==undefined) this['guarantee_steps'] = opts['guarantee_steps'];
if(opts['prev_context']!==undefined) this['prev_context'] = opts['prev_context'];
if(opts['view_opts']!==undefined) this['view_opts'] = opts['view_opts'];
if(opts['deprecation_warning']!==undefined) this['deprecation_warning'] = opts['deprecation_warning']

        }

        static defaults = {
            'context_length':  16,
'context_stride':  1,
'context_overlap':  4,
'closed_loop':  false,
'fuse_method':  "flat",
'use_on_equal_length':  false,
'start_percent':  0,
'guarantee_steps':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_VisualizeContextOptionsK' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'context_opts'(value : CONTEXT_OPTIONS)  { super.$$link(1, value) } 
set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(2, value) } 
set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform')  { super.$$link(3, value) } 
set 'visual_width'(value : INT)  { super.$$link(4, value) } 
set 'latents_length'(value : INT)  { super.$$link(5, value) } 
set 'steps'(value : INT)  { super.$$link(6, value) } 
set 'denoise'(value : FLOAT)  { super.$$link(7, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'model': MODEL,'context_opts': CONTEXT_OPTIONS,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform','visual_width'?: INT,'latents_length'?: INT,'steps'?: INT,'denoise'?: FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['context_opts'] = opts['context_opts'];
this['sampler_name'] = opts['sampler_name'];
this['scheduler'] = opts['scheduler']
            if(opts['visual_width']!==undefined) this['visual_width'] = opts['visual_width'];
if(opts['latents_length']!==undefined) this['latents_length'] = opts['latents_length'];
if(opts['steps']!==undefined) this['steps'] = opts['steps'];
if(opts['denoise']!==undefined) this['denoise'] = opts['denoise']

        }

        static defaults = {
            'visual_width':  1440,
'latents_length':  32,
'steps':  20,
'denoise':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_VisualizeContextOptionsKAdv' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'context_opts'(value : CONTEXT_OPTIONS)  { super.$$link(1, value) } 
set 'sampler_name'(value : 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2')  { super.$$link(2, value) } 
set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform')  { super.$$link(3, value) } 
set 'visual_width'(value : INT)  { super.$$link(4, value) } 
set 'latents_length'(value : INT)  { super.$$link(5, value) } 
set 'steps'(value : INT)  { super.$$link(6, value) } 
set 'start_step'(value : INT)  { super.$$link(7, value) } 
set 'end_step'(value : INT)  { super.$$link(8, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'model': MODEL,'context_opts': CONTEXT_OPTIONS,'sampler_name': 'euler'|'euler_cfg_pp'|'euler_ancestral'|'euler_ancestral_cfg_pp'|'heun'|'heunpp2'|'dpm_2'|'dpm_2_ancestral'|'lms'|'dpm_fast'|'dpm_adaptive'|'dpmpp_2s_ancestral'|'dpmpp_sde'|'dpmpp_sde_gpu'|'dpmpp_2m'|'dpmpp_2m_sde'|'dpmpp_2m_sde_gpu'|'dpmpp_3m_sde'|'dpmpp_3m_sde_gpu'|'ddpm'|'lcm'|'ipndm'|'ipndm_v'|'deis'|'ddim'|'uni_pc'|'uni_pc_bh2','scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform','visual_width'?: INT,'latents_length'?: INT,'steps'?: INT,'start_step'?: INT,'end_step'?: INT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['context_opts'] = opts['context_opts'];
this['sampler_name'] = opts['sampler_name'];
this['scheduler'] = opts['scheduler']
            if(opts['visual_width']!==undefined) this['visual_width'] = opts['visual_width'];
if(opts['latents_length']!==undefined) this['latents_length'] = opts['latents_length'];
if(opts['steps']!==undefined) this['steps'] = opts['steps'];
if(opts['start_step']!==undefined) this['start_step'] = opts['start_step'];
if(opts['end_step']!==undefined) this['end_step'] = opts['end_step']

        }

        static defaults = {
            'visual_width':  1440,
'latents_length':  32,
'steps':  20,
'start_step':  0,
'end_step':  20
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_VisualizeContextOptionsSCustom' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'context_opts'(value : CONTEXT_OPTIONS)  { super.$$link(1, value) } 
set 'sigmas'(value : SIGMAS)  { super.$$link(2, value) } 
set 'visual_width'(value : INT)  { super.$$link(3, value) } 
set 'latents_length'(value : INT)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'model': MODEL,'context_opts': CONTEXT_OPTIONS,'sigmas': SIGMAS,'visual_width'?: INT,'latents_length'?: INT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['context_opts'] = opts['context_opts'];
this['sigmas'] = opts['sigmas']
            if(opts['visual_width']!==undefined) this['visual_width'] = opts['visual_width'];
if(opts['latents_length']!==undefined) this['latents_length'] = opts['latents_length']

        }

        static defaults = {
            'visual_width':  1440,
'latents_length':  32
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_StandardStaticViewOptions' : class extends Node{
        //Setters
        set 'view_length'(value : INT)  { super.$$link(0, value) } 
set 'view_overlap'(value : INT)  { super.$$link(1, value) } 
set 'fuse_method'(value : 'pyramid'|'flat'|'delayed reverse sawtooth'|'pyramid-sigma'|'pyramid-sigma inverse'|'gauss-sigma'|'gauss-sigma inverse'|'random')  { super.$$link(2, value) } 

        //Getters
        get 'VIEW_OPTS'() : VIEW_OPTS { return [this, 'VIEW_OPTS', 0]  as unknown as VIEW_OPTS; }

        constructor(opts:{
            'view_length': INT,'view_overlap': INT,'fuse_method'?: 'pyramid'|'flat'|'delayed reverse sawtooth'|'pyramid-sigma'|'pyramid-sigma inverse'|'gauss-sigma'|'gauss-sigma inverse'|'random'
        }){
            super(ctx);

            this['view_length'] = opts['view_length'];
this['view_overlap'] = opts['view_overlap']
            if(opts['fuse_method']!==undefined) this['fuse_method'] = opts['fuse_method']

        }

        static defaults = {
            'view_length':  16,
'view_overlap':  4
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_StandardUniformViewOptions' : class extends Node{
        //Setters
        set 'view_length'(value : INT)  { super.$$link(0, value) } 
set 'view_stride'(value : INT)  { super.$$link(1, value) } 
set 'view_overlap'(value : INT)  { super.$$link(2, value) } 
set 'fuse_method'(value : 'pyramid'|'flat'|'delayed reverse sawtooth'|'pyramid-sigma'|'pyramid-sigma inverse'|'gauss-sigma'|'gauss-sigma inverse'|'random')  { super.$$link(3, value) } 

        //Getters
        get 'VIEW_OPTS'() : VIEW_OPTS { return [this, 'VIEW_OPTS', 0]  as unknown as VIEW_OPTS; }

        constructor(opts:{
            'view_length': INT,'view_stride': INT,'view_overlap': INT,'fuse_method'?: 'pyramid'|'flat'|'delayed reverse sawtooth'|'pyramid-sigma'|'pyramid-sigma inverse'|'gauss-sigma'|'gauss-sigma inverse'|'random'
        }){
            super(ctx);

            this['view_length'] = opts['view_length'];
this['view_stride'] = opts['view_stride'];
this['view_overlap'] = opts['view_overlap']
            if(opts['fuse_method']!==undefined) this['fuse_method'] = opts['fuse_method']

        }

        static defaults = {
            'view_length':  16,
'view_stride':  1,
'view_overlap':  4
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_LoopedUniformViewOptions' : class extends Node{
        //Setters
        set 'view_length'(value : INT)  { super.$$link(0, value) } 
set 'view_stride'(value : INT)  { super.$$link(1, value) } 
set 'view_overlap'(value : INT)  { super.$$link(2, value) } 
set 'closed_loop'(value : BOOLEAN)  { super.$$link(3, value) } 
set 'fuse_method'(value : 'pyramid'|'flat'|'delayed reverse sawtooth'|'pyramid-sigma'|'pyramid-sigma inverse'|'gauss-sigma'|'gauss-sigma inverse'|'random')  { super.$$link(4, value) } 
set 'use_on_equal_length'(value : BOOLEAN)  { super.$$link(5, value) } 

        //Getters
        get 'VIEW_OPTS'() : VIEW_OPTS { return [this, 'VIEW_OPTS', 0]  as unknown as VIEW_OPTS; }

        constructor(opts:{
            'view_length': INT,'view_stride': INT,'view_overlap': INT,'closed_loop': BOOLEAN,'fuse_method'?: 'pyramid'|'flat'|'delayed reverse sawtooth'|'pyramid-sigma'|'pyramid-sigma inverse'|'gauss-sigma'|'gauss-sigma inverse'|'random','use_on_equal_length'?: BOOLEAN
        }){
            super(ctx);

            this['view_length'] = opts['view_length'];
this['view_stride'] = opts['view_stride'];
this['view_overlap'] = opts['view_overlap'];
this['closed_loop'] = opts['closed_loop']
            if(opts['fuse_method']!==undefined) this['fuse_method'] = opts['fuse_method'];
if(opts['use_on_equal_length']!==undefined) this['use_on_equal_length'] = opts['use_on_equal_length']

        }

        static defaults = {
            'view_length':  16,
'view_stride':  1,
'view_overlap':  4,
'closed_loop':  false,
'use_on_equal_length':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_IterationOptsDefault' : class extends Node{
        //Setters
        set 'iterations'(value : INT)  { super.$$link(0, value) } 
set 'iter_batch_offset'(value : INT)  { super.$$link(1, value) } 
set 'iter_seed_offset'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'ITERATION_OPTS'() : ITERATION_OPTS { return [this, 'ITERATION_OPTS', 0]  as unknown as ITERATION_OPTS; }

        constructor(opts:{
            'iterations': INT,'iter_batch_offset'?: INT,'iter_seed_offset'?: INT
        }){
            super(ctx);

            this['iterations'] = opts['iterations']
            if(opts['iter_batch_offset']!==undefined) this['iter_batch_offset'] = opts['iter_batch_offset'];
if(opts['iter_seed_offset']!==undefined) this['iter_seed_offset'] = opts['iter_seed_offset']

        }

        static defaults = {
            'iterations':  1,
'iter_batch_offset':  0,
'iter_seed_offset':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_IterationOptsFreeInit' : class extends Node{
        //Setters
        set 'iterations'(value : INT)  { super.$$link(0, value) } 
set 'filter'(value : 'gaussian'|'butterworth'|'ideal'|'box')  { super.$$link(1, value) } 
set 'd_s'(value : FLOAT)  { super.$$link(2, value) } 
set 'd_t'(value : FLOAT)  { super.$$link(3, value) } 
set 'n_butterworth'(value : INT)  { super.$$link(4, value) } 
set 'sigma_step'(value : INT)  { super.$$link(5, value) } 
set 'apply_to_1st_iter'(value : BOOLEAN)  { super.$$link(6, value) } 
set 'init_type'(value : 'FreeInit [sampler sigma]'|'FreeInit [model sigma]'|'DinkInit_v1')  { super.$$link(7, value) } 
set 'iter_batch_offset'(value : INT)  { super.$$link(8, value) } 
set 'iter_seed_offset'(value : INT)  { super.$$link(9, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(10, value) } 

        //Getters
        get 'ITERATION_OPTS'() : ITERATION_OPTS { return [this, 'ITERATION_OPTS', 0]  as unknown as ITERATION_OPTS; }

        constructor(opts:{
            'iterations': INT,'filter': 'gaussian'|'butterworth'|'ideal'|'box','d_s': FLOAT,'d_t': FLOAT,'n_butterworth': INT,'sigma_step': INT,'apply_to_1st_iter': BOOLEAN,'init_type': 'FreeInit [sampler sigma]'|'FreeInit [model sigma]'|'DinkInit_v1','iter_batch_offset'?: INT,'iter_seed_offset'?: INT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['iterations'] = opts['iterations'];
this['filter'] = opts['filter'];
this['d_s'] = opts['d_s'];
this['d_t'] = opts['d_t'];
this['n_butterworth'] = opts['n_butterworth'];
this['sigma_step'] = opts['sigma_step'];
this['apply_to_1st_iter'] = opts['apply_to_1st_iter'];
this['init_type'] = opts['init_type']
            if(opts['iter_batch_offset']!==undefined) this['iter_batch_offset'] = opts['iter_batch_offset'];
if(opts['iter_seed_offset']!==undefined) this['iter_seed_offset'] = opts['iter_seed_offset'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'iterations':  2,
'd_s':  0.25,
'd_t':  0.25,
'n_butterworth':  4,
'sigma_step':  999,
'apply_to_1st_iter':  false,
'iter_batch_offset':  0,
'iter_seed_offset':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_RegisterLoraHook' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'clip'(value : CLIP)  { super.$$link(1, value) } 
set 'lora_name'(value : 'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(2, value) } 
set 'strength_model'(value : FLOAT)  { super.$$link(3, value) } 
set 'strength_clip'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this, 'CLIP', 1]  as unknown as CLIP; }
get 'LORA_HOOK'() : LORA_HOOK { return [this, 'LORA_HOOK', 2]  as unknown as LORA_HOOK; }

        constructor(opts:{
            'model': MODEL,'clip': CLIP,'lora_name': 'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','strength_model': FLOAT,'strength_clip': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['clip'] = opts['clip'];
this['lora_name'] = opts['lora_name'];
this['strength_model'] = opts['strength_model'];
this['strength_clip'] = opts['strength_clip']
            

        }

        static defaults = {
            'strength_model':  1,
'strength_clip':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_RegisterLoraHookModelOnly' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'lora_name'(value : 'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt')  { super.$$link(1, value) } 
set 'strength_model'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'LORA_HOOK'() : LORA_HOOK { return [this, 'LORA_HOOK', 1]  as unknown as LORA_HOOK; }

        constructor(opts:{
            'model': MODEL,'lora_name': 'ipadapter/ip-adapter-faceid-plus_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid-plusv2_sd15_lora.safetensors'|'ipadapter/ip-adapter-faceid_sd15_lora.safetensors'|'lcm-lora-sdv1-5.safetensors'|'lcm-lora-sdxl.safetensors'|'lcm/SD1.5/pytorch_lora_weights.safetensors'|'lcm/SDXL/pytorch_lora_weights.safetensors'|'lcm/SSD-1B/pytorch_lora_weights.safetensors'|'sd_xl_offset_example-lora_1.0.safetensors'|'sdxl/pxx4_v1_alpha.safetensors'|'sdxl/xl_shuimo-000012.safetensors'|'slider-concepts/age.pt'|'slider-concepts/cartoon_style.pt'|'slider-concepts/chubby.pt'|'slider-concepts/clay_style.pt'|'slider-concepts/cluttered_room.pt'|'slider-concepts/curlyhair.pt'|'slider-concepts/dark_weather.pt'|'slider-concepts/eyebrow.pt'|'slider-concepts/eyesize.pt'|'slider-concepts/festive.pt'|'slider-concepts/fix_hands.pt'|'slider-concepts/long_hair.pt'|'slider-concepts/muscular.pt'|'slider-concepts/pixar_style.pt'|'slider-concepts/professional.pt'|'slider-concepts/repair_slider.pt'|'slider-concepts/sculpture_style.pt'|'slider-concepts/smiling.pt'|'slider-concepts/stylegan_latent1.pt'|'slider-concepts/stylegan_latent2.pt'|'slider-concepts/suprised_look.pt'|'slider-concepts/tropical_weather.pt'|'slider-concepts/winter_weather.pt','strength_model': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['lora_name'] = opts['lora_name'];
this['strength_model'] = opts['strength_model']
            

        }

        static defaults = {
            'strength_model':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_RegisterModelAsLoraHook' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'clip'(value : CLIP)  { super.$$link(1, value) } 
set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(2, value) } 
set 'strength_model'(value : FLOAT)  { super.$$link(3, value) } 
set 'strength_clip'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this, 'CLIP', 1]  as unknown as CLIP; }
get 'LORA_HOOK'() : LORA_HOOK { return [this, 'LORA_HOOK', 2]  as unknown as LORA_HOOK; }

        constructor(opts:{
            'model': MODEL,'clip': CLIP,'ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','strength_model': FLOAT,'strength_clip': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['clip'] = opts['clip'];
this['ckpt_name'] = opts['ckpt_name'];
this['strength_model'] = opts['strength_model'];
this['strength_clip'] = opts['strength_clip']
            

        }

        static defaults = {
            'strength_model':  1,
'strength_clip':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_RegisterModelAsLoraHookModelOnly' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(1, value) } 
set 'strength_model'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'LORA_HOOK'() : LORA_HOOK { return [this, 'LORA_HOOK', 1]  as unknown as LORA_HOOK; }

        constructor(opts:{
            'model': MODEL,'ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','strength_model': FLOAT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['ckpt_name'] = opts['ckpt_name'];
this['strength_model'] = opts['strength_model']
            

        }

        static defaults = {
            'strength_model':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_CombineLoraHooks' : class extends Node{
        //Setters
        set 'lora_hook_A'(value : LORA_HOOK)  { super.$$link(0, value) } 
set 'lora_hook_B'(value : LORA_HOOK)  { super.$$link(1, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(2, value) } 

        //Getters
        get 'LORA_HOOK'() : LORA_HOOK { return [this, 'LORA_HOOK', 0]  as unknown as LORA_HOOK; }

        constructor(opts:{
            'lora_hook_A'?: LORA_HOOK,'lora_hook_B'?: LORA_HOOK,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            
            if(opts['lora_hook_A']!==undefined) this['lora_hook_A'] = opts['lora_hook_A'];
if(opts['lora_hook_B']!==undefined) this['lora_hook_B'] = opts['lora_hook_B'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_CombineLoraHooksFour' : class extends Node{
        //Setters
        set 'lora_hook_A'(value : LORA_HOOK)  { super.$$link(0, value) } 
set 'lora_hook_B'(value : LORA_HOOK)  { super.$$link(1, value) } 
set 'lora_hook_C'(value : LORA_HOOK)  { super.$$link(2, value) } 
set 'lora_hook_D'(value : LORA_HOOK)  { super.$$link(3, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(4, value) } 

        //Getters
        get 'LORA_HOOK'() : LORA_HOOK { return [this, 'LORA_HOOK', 0]  as unknown as LORA_HOOK; }

        constructor(opts:{
            'lora_hook_A'?: LORA_HOOK,'lora_hook_B'?: LORA_HOOK,'lora_hook_C'?: LORA_HOOK,'lora_hook_D'?: LORA_HOOK,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            
            if(opts['lora_hook_A']!==undefined) this['lora_hook_A'] = opts['lora_hook_A'];
if(opts['lora_hook_B']!==undefined) this['lora_hook_B'] = opts['lora_hook_B'];
if(opts['lora_hook_C']!==undefined) this['lora_hook_C'] = opts['lora_hook_C'];
if(opts['lora_hook_D']!==undefined) this['lora_hook_D'] = opts['lora_hook_D'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_CombineLoraHooksEight' : class extends Node{
        //Setters
        set 'lora_hook_A'(value : LORA_HOOK)  { super.$$link(0, value) } 
set 'lora_hook_B'(value : LORA_HOOK)  { super.$$link(1, value) } 
set 'lora_hook_C'(value : LORA_HOOK)  { super.$$link(2, value) } 
set 'lora_hook_D'(value : LORA_HOOK)  { super.$$link(3, value) } 
set 'lora_hook_E'(value : LORA_HOOK)  { super.$$link(4, value) } 
set 'lora_hook_F'(value : LORA_HOOK)  { super.$$link(5, value) } 
set 'lora_hook_G'(value : LORA_HOOK)  { super.$$link(6, value) } 
set 'lora_hook_H'(value : LORA_HOOK)  { super.$$link(7, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(8, value) } 

        //Getters
        get 'LORA_HOOK'() : LORA_HOOK { return [this, 'LORA_HOOK', 0]  as unknown as LORA_HOOK; }

        constructor(opts:{
            'lora_hook_A'?: LORA_HOOK,'lora_hook_B'?: LORA_HOOK,'lora_hook_C'?: LORA_HOOK,'lora_hook_D'?: LORA_HOOK,'lora_hook_E'?: LORA_HOOK,'lora_hook_F'?: LORA_HOOK,'lora_hook_G'?: LORA_HOOK,'lora_hook_H'?: LORA_HOOK,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            
            if(opts['lora_hook_A']!==undefined) this['lora_hook_A'] = opts['lora_hook_A'];
if(opts['lora_hook_B']!==undefined) this['lora_hook_B'] = opts['lora_hook_B'];
if(opts['lora_hook_C']!==undefined) this['lora_hook_C'] = opts['lora_hook_C'];
if(opts['lora_hook_D']!==undefined) this['lora_hook_D'] = opts['lora_hook_D'];
if(opts['lora_hook_E']!==undefined) this['lora_hook_E'] = opts['lora_hook_E'];
if(opts['lora_hook_F']!==undefined) this['lora_hook_F'] = opts['lora_hook_F'];
if(opts['lora_hook_G']!==undefined) this['lora_hook_G'] = opts['lora_hook_G'];
if(opts['lora_hook_H']!==undefined) this['lora_hook_H'] = opts['lora_hook_H'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_SetLoraHookKeyframe' : class extends Node{
        //Setters
        set 'lora_hook'(value : LORA_HOOK)  { super.$$link(0, value) } 
set 'hook_kf'(value : LORA_HOOK_KEYFRAMES)  { super.$$link(1, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(2, value) } 

        //Getters
        get 'LORA_HOOK'() : LORA_HOOK { return [this, 'LORA_HOOK', 0]  as unknown as LORA_HOOK; }

        constructor(opts:{
            'lora_hook': LORA_HOOK,'hook_kf': LORA_HOOK_KEYFRAMES,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['lora_hook'] = opts['lora_hook'];
this['hook_kf'] = opts['hook_kf']
            if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_AttachLoraHookToCLIP' : class extends Node{
        //Setters
        set 'clip'(value : CLIP)  { super.$$link(0, value) } 
set 'lora_hook'(value : LORA_HOOK)  { super.$$link(1, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(2, value) } 

        //Getters
        get 'hook_CLIP'() : CLIP { return [this, 'hook_CLIP', 0]  as unknown as CLIP; }

        constructor(opts:{
            'clip': CLIP,'lora_hook': LORA_HOOK,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['clip'] = opts['clip'];
this['lora_hook'] = opts['lora_hook']
            if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_LoraHookKeyframe' : class extends Node{
        //Setters
        set 'strength_model'(value : FLOAT)  { super.$$link(0, value) } 
set 'start_percent'(value : FLOAT)  { super.$$link(1, value) } 
set 'guarantee_steps'(value : INT)  { super.$$link(2, value) } 
set 'prev_hook_kf'(value : LORA_HOOK_KEYFRAMES)  { super.$$link(3, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(4, value) } 

        //Getters
        get 'HOOK_KF'() : LORA_HOOK_KEYFRAMES { return [this, 'HOOK_KF', 0]  as unknown as LORA_HOOK_KEYFRAMES; }

        constructor(opts:{
            'strength_model': FLOAT,'start_percent': FLOAT,'guarantee_steps': INT,'prev_hook_kf'?: LORA_HOOK_KEYFRAMES,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['strength_model'] = opts['strength_model'];
this['start_percent'] = opts['start_percent'];
this['guarantee_steps'] = opts['guarantee_steps']
            if(opts['prev_hook_kf']!==undefined) this['prev_hook_kf'] = opts['prev_hook_kf'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'strength_model':  1,
'start_percent':  0,
'guarantee_steps':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_LoraHookKeyframeInterpolation' : class extends Node{
        //Setters
        set 'start_percent'(value : FLOAT)  { super.$$link(0, value) } 
set 'end_percent'(value : FLOAT)  { super.$$link(1, value) } 
set 'strength_start'(value : FLOAT)  { super.$$link(2, value) } 
set 'strength_end'(value : FLOAT)  { super.$$link(3, value) } 
set 'interpolation'(value : 'linear'|'ease_in'|'ease_out'|'ease_in_out')  { super.$$link(4, value) } 
set 'intervals'(value : INT)  { super.$$link(5, value) } 
set 'print_keyframes'(value : BOOLEAN)  { super.$$link(6, value) } 
set 'prev_hook_kf'(value : LORA_HOOK_KEYFRAMES)  { super.$$link(7, value) } 

        //Getters
        get 'HOOK_KF'() : LORA_HOOK_KEYFRAMES { return [this, 'HOOK_KF', 0]  as unknown as LORA_HOOK_KEYFRAMES; }

        constructor(opts:{
            'start_percent': FLOAT,'end_percent': FLOAT,'strength_start': FLOAT,'strength_end': FLOAT,'interpolation': 'linear'|'ease_in'|'ease_out'|'ease_in_out','intervals': INT,'print_keyframes': BOOLEAN,'prev_hook_kf'?: LORA_HOOK_KEYFRAMES
        }){
            super(ctx);

            this['start_percent'] = opts['start_percent'];
this['end_percent'] = opts['end_percent'];
this['strength_start'] = opts['strength_start'];
this['strength_end'] = opts['strength_end'];
this['interpolation'] = opts['interpolation'];
this['intervals'] = opts['intervals'];
this['print_keyframes'] = opts['print_keyframes']
            if(opts['prev_hook_kf']!==undefined) this['prev_hook_kf'] = opts['prev_hook_kf']

        }

        static defaults = {
            'start_percent':  0,
'end_percent':  1,
'strength_start':  1,
'strength_end':  1,
'intervals':  5,
'print_keyframes':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_LoraHookKeyframeFromStrengthList' : class extends Node{
        //Setters
        set 'strengths_float'(value : FLOAT)  { super.$$link(0, value) } 
set 'start_percent'(value : FLOAT)  { super.$$link(1, value) } 
set 'end_percent'(value : FLOAT)  { super.$$link(2, value) } 
set 'print_keyframes'(value : BOOLEAN)  { super.$$link(3, value) } 
set 'prev_hook_kf'(value : LORA_HOOK_KEYFRAMES)  { super.$$link(4, value) } 

        //Getters
        get 'HOOK_KF'() : LORA_HOOK_KEYFRAMES { return [this, 'HOOK_KF', 0]  as unknown as LORA_HOOK_KEYFRAMES; }

        constructor(opts:{
            'strengths_float': FLOAT,'start_percent': FLOAT,'end_percent': FLOAT,'print_keyframes': BOOLEAN,'prev_hook_kf'?: LORA_HOOK_KEYFRAMES
        }){
            super(ctx);

            this['strengths_float'] = opts['strengths_float'];
this['start_percent'] = opts['start_percent'];
this['end_percent'] = opts['end_percent'];
this['print_keyframes'] = opts['print_keyframes']
            if(opts['prev_hook_kf']!==undefined) this['prev_hook_kf'] = opts['prev_hook_kf']

        }

        static defaults = {
            'strengths_float':  -1,
'start_percent':  0,
'end_percent':  1,
'print_keyframes':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_AttachLoraHookToConditioning' : class extends Node{
        //Setters
        set 'conditioning'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'lora_hook'(value : LORA_HOOK)  { super.$$link(1, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(2, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'conditioning': CONDITIONING,'lora_hook': LORA_HOOK,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['conditioning'] = opts['conditioning'];
this['lora_hook'] = opts['lora_hook']
            if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_PairedConditioningSetMask' : class extends Node{
        //Setters
        set 'positive_ADD'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'negative_ADD'(value : CONDITIONING)  { super.$$link(1, value) } 
set 'strength'(value : FLOAT)  { super.$$link(2, value) } 
set 'set_cond_area'(value : 'default'|'mask bounds')  { super.$$link(3, value) } 
set 'opt_mask'(value : MASK)  { super.$$link(4, value) } 
set 'opt_lora_hook'(value : LORA_HOOK)  { super.$$link(5, value) } 
set 'opt_timesteps'(value : TIMESTEPS_COND)  { super.$$link(6, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(7, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this, 'positive', 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this, 'negative', 1]  as unknown as CONDITIONING; }

        constructor(opts:{
            'positive_ADD': CONDITIONING,'negative_ADD': CONDITIONING,'strength': FLOAT,'set_cond_area': 'default'|'mask bounds','opt_mask'?: MASK,'opt_lora_hook'?: LORA_HOOK,'opt_timesteps'?: TIMESTEPS_COND,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['positive_ADD'] = opts['positive_ADD'];
this['negative_ADD'] = opts['negative_ADD'];
this['strength'] = opts['strength'];
this['set_cond_area'] = opts['set_cond_area']
            if(opts['opt_mask']!==undefined) this['opt_mask'] = opts['opt_mask'];
if(opts['opt_lora_hook']!==undefined) this['opt_lora_hook'] = opts['opt_lora_hook'];
if(opts['opt_timesteps']!==undefined) this['opt_timesteps'] = opts['opt_timesteps'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'strength':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_ConditioningSetMask' : class extends Node{
        //Setters
        set 'cond_ADD'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'strength'(value : FLOAT)  { super.$$link(1, value) } 
set 'set_cond_area'(value : 'default'|'mask bounds')  { super.$$link(2, value) } 
set 'opt_mask'(value : MASK)  { super.$$link(3, value) } 
set 'opt_lora_hook'(value : LORA_HOOK)  { super.$$link(4, value) } 
set 'opt_timesteps'(value : TIMESTEPS_COND)  { super.$$link(5, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(6, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'cond_ADD': CONDITIONING,'strength': FLOAT,'set_cond_area': 'default'|'mask bounds','opt_mask'?: MASK,'opt_lora_hook'?: LORA_HOOK,'opt_timesteps'?: TIMESTEPS_COND,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['cond_ADD'] = opts['cond_ADD'];
this['strength'] = opts['strength'];
this['set_cond_area'] = opts['set_cond_area']
            if(opts['opt_mask']!==undefined) this['opt_mask'] = opts['opt_mask'];
if(opts['opt_lora_hook']!==undefined) this['opt_lora_hook'] = opts['opt_lora_hook'];
if(opts['opt_timesteps']!==undefined) this['opt_timesteps'] = opts['opt_timesteps'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'strength':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_PairedConditioningSetMaskAndCombine' : class extends Node{
        //Setters
        set 'positive'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'negative'(value : CONDITIONING)  { super.$$link(1, value) } 
set 'positive_ADD'(value : CONDITIONING)  { super.$$link(2, value) } 
set 'negative_ADD'(value : CONDITIONING)  { super.$$link(3, value) } 
set 'strength'(value : FLOAT)  { super.$$link(4, value) } 
set 'set_cond_area'(value : 'default'|'mask bounds')  { super.$$link(5, value) } 
set 'opt_mask'(value : MASK)  { super.$$link(6, value) } 
set 'opt_lora_hook'(value : LORA_HOOK)  { super.$$link(7, value) } 
set 'opt_timesteps'(value : TIMESTEPS_COND)  { super.$$link(8, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(9, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this, 'positive', 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this, 'negative', 1]  as unknown as CONDITIONING; }

        constructor(opts:{
            'positive': CONDITIONING,'negative': CONDITIONING,'positive_ADD': CONDITIONING,'negative_ADD': CONDITIONING,'strength': FLOAT,'set_cond_area': 'default'|'mask bounds','opt_mask'?: MASK,'opt_lora_hook'?: LORA_HOOK,'opt_timesteps'?: TIMESTEPS_COND,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['positive'] = opts['positive'];
this['negative'] = opts['negative'];
this['positive_ADD'] = opts['positive_ADD'];
this['negative_ADD'] = opts['negative_ADD'];
this['strength'] = opts['strength'];
this['set_cond_area'] = opts['set_cond_area']
            if(opts['opt_mask']!==undefined) this['opt_mask'] = opts['opt_mask'];
if(opts['opt_lora_hook']!==undefined) this['opt_lora_hook'] = opts['opt_lora_hook'];
if(opts['opt_timesteps']!==undefined) this['opt_timesteps'] = opts['opt_timesteps'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'strength':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_ConditioningSetMaskAndCombine' : class extends Node{
        //Setters
        set 'cond'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'cond_ADD'(value : CONDITIONING)  { super.$$link(1, value) } 
set 'strength'(value : FLOAT)  { super.$$link(2, value) } 
set 'set_cond_area'(value : 'default'|'mask bounds')  { super.$$link(3, value) } 
set 'opt_mask'(value : MASK)  { super.$$link(4, value) } 
set 'opt_lora_hook'(value : LORA_HOOK)  { super.$$link(5, value) } 
set 'opt_timesteps'(value : TIMESTEPS_COND)  { super.$$link(6, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(7, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'cond': CONDITIONING,'cond_ADD': CONDITIONING,'strength': FLOAT,'set_cond_area': 'default'|'mask bounds','opt_mask'?: MASK,'opt_lora_hook'?: LORA_HOOK,'opt_timesteps'?: TIMESTEPS_COND,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['cond'] = opts['cond'];
this['cond_ADD'] = opts['cond_ADD'];
this['strength'] = opts['strength'];
this['set_cond_area'] = opts['set_cond_area']
            if(opts['opt_mask']!==undefined) this['opt_mask'] = opts['opt_mask'];
if(opts['opt_lora_hook']!==undefined) this['opt_lora_hook'] = opts['opt_lora_hook'];
if(opts['opt_timesteps']!==undefined) this['opt_timesteps'] = opts['opt_timesteps'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'strength':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_PairedConditioningSetUnmaskedAndCombine' : class extends Node{
        //Setters
        set 'positive'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'negative'(value : CONDITIONING)  { super.$$link(1, value) } 
set 'positive_DEFAULT'(value : CONDITIONING)  { super.$$link(2, value) } 
set 'negative_DEFAULT'(value : CONDITIONING)  { super.$$link(3, value) } 
set 'opt_lora_hook'(value : LORA_HOOK)  { super.$$link(4, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(5, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this, 'positive', 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this, 'negative', 1]  as unknown as CONDITIONING; }

        constructor(opts:{
            'positive': CONDITIONING,'negative': CONDITIONING,'positive_DEFAULT': CONDITIONING,'negative_DEFAULT': CONDITIONING,'opt_lora_hook'?: LORA_HOOK,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['positive'] = opts['positive'];
this['negative'] = opts['negative'];
this['positive_DEFAULT'] = opts['positive_DEFAULT'];
this['negative_DEFAULT'] = opts['negative_DEFAULT']
            if(opts['opt_lora_hook']!==undefined) this['opt_lora_hook'] = opts['opt_lora_hook'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_ConditioningSetUnmaskedAndCombine' : class extends Node{
        //Setters
        set 'cond'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'cond_DEFAULT'(value : CONDITIONING)  { super.$$link(1, value) } 
set 'opt_lora_hook'(value : LORA_HOOK)  { super.$$link(2, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(3, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'cond': CONDITIONING,'cond_DEFAULT': CONDITIONING,'opt_lora_hook'?: LORA_HOOK,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['cond'] = opts['cond'];
this['cond_DEFAULT'] = opts['cond_DEFAULT']
            if(opts['opt_lora_hook']!==undefined) this['opt_lora_hook'] = opts['opt_lora_hook'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_PairedConditioningCombine' : class extends Node{
        //Setters
        set 'positive_A'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'negative_A'(value : CONDITIONING)  { super.$$link(1, value) } 
set 'positive_B'(value : CONDITIONING)  { super.$$link(2, value) } 
set 'negative_B'(value : CONDITIONING)  { super.$$link(3, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this, 'positive', 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this, 'negative', 1]  as unknown as CONDITIONING; }

        constructor(opts:{
            'positive_A': CONDITIONING,'negative_A': CONDITIONING,'positive_B': CONDITIONING,'negative_B': CONDITIONING
        }){
            super(ctx);

            this['positive_A'] = opts['positive_A'];
this['negative_A'] = opts['negative_A'];
this['positive_B'] = opts['positive_B'];
this['negative_B'] = opts['negative_B']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_ConditioningCombine' : class extends Node{
        //Setters
        set 'cond_A'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'cond_B'(value : CONDITIONING)  { super.$$link(1, value) } 

        //Getters
        get 'CONDITIONING'() : CONDITIONING { return [this, 'CONDITIONING', 0]  as unknown as CONDITIONING; }

        constructor(opts:{
            'cond_A': CONDITIONING,'cond_B': CONDITIONING
        }){
            super(ctx);

            this['cond_A'] = opts['cond_A'];
this['cond_B'] = opts['cond_B']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_TimestepsConditioning' : class extends Node{
        //Setters
        set 'start_percent'(value : FLOAT)  { super.$$link(0, value) } 
set 'end_percent'(value : FLOAT)  { super.$$link(1, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(2, value) } 

        //Getters
        get 'TIMESTEPS_COND'() : TIMESTEPS_COND { return [this, 'TIMESTEPS_COND', 0]  as unknown as TIMESTEPS_COND; }

        constructor(opts:{
            'start_percent': FLOAT,'end_percent': FLOAT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['start_percent'] = opts['start_percent'];
this['end_percent'] = opts['end_percent']
            if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'start_percent':  0,
'end_percent':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_NoiseLayerAdd' : class extends Node{
        //Setters
        set 'batch_offset'(value : INT)  { super.$$link(0, value) } 
set 'noise_type'(value : 'default'|'constant'|'empty'|'repeated_context'|'FreeNoise')  { super.$$link(1, value) } 
set 'seed_gen_override'(value : 'use existing'|'comfy'|'comfy [gpu]'|'auto1111'|'auto1111 [gpu]')  { super.$$link(2, value) } 
set 'seed_offset'(value : INT)  { super.$$link(3, value) } 
set 'noise_weight'(value : FLOAT)  { super.$$link(4, value) } 
set 'prev_noise_layers'(value : NOISE_LAYERS)  { super.$$link(5, value) } 
set 'mask_optional'(value : MASK)  { super.$$link(6, value) } 
set 'seed_override'(value : INT)  { super.$$link(7, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(8, value) } 

        //Getters
        get 'NOISE_LAYERS'() : NOISE_LAYERS { return [this, 'NOISE_LAYERS', 0]  as unknown as NOISE_LAYERS; }

        constructor(opts:{
            'batch_offset': INT,'noise_type': 'default'|'constant'|'empty'|'repeated_context'|'FreeNoise','seed_gen_override': 'use existing'|'comfy'|'comfy [gpu]'|'auto1111'|'auto1111 [gpu]','seed_offset': INT,'noise_weight': FLOAT,'prev_noise_layers'?: NOISE_LAYERS,'mask_optional'?: MASK,'seed_override'?: INT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['batch_offset'] = opts['batch_offset'];
this['noise_type'] = opts['noise_type'];
this['seed_gen_override'] = opts['seed_gen_override'];
this['seed_offset'] = opts['seed_offset'];
this['noise_weight'] = opts['noise_weight']
            if(opts['prev_noise_layers']!==undefined) this['prev_noise_layers'] = opts['prev_noise_layers'];
if(opts['mask_optional']!==undefined) this['mask_optional'] = opts['mask_optional'];
if(opts['seed_override']!==undefined) this['seed_override'] = opts['seed_override'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'batch_offset':  0,
'seed_offset':  0,
'noise_weight':  0.5,
'seed_override':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_NoiseLayerAddWeighted' : class extends Node{
        //Setters
        set 'batch_offset'(value : INT)  { super.$$link(0, value) } 
set 'noise_type'(value : 'default'|'constant'|'empty'|'repeated_context'|'FreeNoise')  { super.$$link(1, value) } 
set 'seed_gen_override'(value : 'use existing'|'comfy'|'comfy [gpu]'|'auto1111'|'auto1111 [gpu]')  { super.$$link(2, value) } 
set 'seed_offset'(value : INT)  { super.$$link(3, value) } 
set 'noise_weight'(value : FLOAT)  { super.$$link(4, value) } 
set 'balance_multiplier'(value : FLOAT)  { super.$$link(5, value) } 
set 'prev_noise_layers'(value : NOISE_LAYERS)  { super.$$link(6, value) } 
set 'mask_optional'(value : MASK)  { super.$$link(7, value) } 
set 'seed_override'(value : INT)  { super.$$link(8, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(9, value) } 

        //Getters
        get 'NOISE_LAYERS'() : NOISE_LAYERS { return [this, 'NOISE_LAYERS', 0]  as unknown as NOISE_LAYERS; }

        constructor(opts:{
            'batch_offset': INT,'noise_type': 'default'|'constant'|'empty'|'repeated_context'|'FreeNoise','seed_gen_override': 'use existing'|'comfy'|'comfy [gpu]'|'auto1111'|'auto1111 [gpu]','seed_offset': INT,'noise_weight': FLOAT,'balance_multiplier': FLOAT,'prev_noise_layers'?: NOISE_LAYERS,'mask_optional'?: MASK,'seed_override'?: INT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['batch_offset'] = opts['batch_offset'];
this['noise_type'] = opts['noise_type'];
this['seed_gen_override'] = opts['seed_gen_override'];
this['seed_offset'] = opts['seed_offset'];
this['noise_weight'] = opts['noise_weight'];
this['balance_multiplier'] = opts['balance_multiplier']
            if(opts['prev_noise_layers']!==undefined) this['prev_noise_layers'] = opts['prev_noise_layers'];
if(opts['mask_optional']!==undefined) this['mask_optional'] = opts['mask_optional'];
if(opts['seed_override']!==undefined) this['seed_override'] = opts['seed_override'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'batch_offset':  0,
'seed_offset':  0,
'noise_weight':  0.5,
'balance_multiplier':  1,
'seed_override':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_NoiseLayerReplace' : class extends Node{
        //Setters
        set 'batch_offset'(value : INT)  { super.$$link(0, value) } 
set 'noise_type'(value : 'default'|'constant'|'empty'|'repeated_context'|'FreeNoise')  { super.$$link(1, value) } 
set 'seed_gen_override'(value : 'use existing'|'comfy'|'comfy [gpu]'|'auto1111'|'auto1111 [gpu]')  { super.$$link(2, value) } 
set 'seed_offset'(value : INT)  { super.$$link(3, value) } 
set 'prev_noise_layers'(value : NOISE_LAYERS)  { super.$$link(4, value) } 
set 'mask_optional'(value : MASK)  { super.$$link(5, value) } 
set 'seed_override'(value : INT)  { super.$$link(6, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(7, value) } 

        //Getters
        get 'NOISE_LAYERS'() : NOISE_LAYERS { return [this, 'NOISE_LAYERS', 0]  as unknown as NOISE_LAYERS; }

        constructor(opts:{
            'batch_offset': INT,'noise_type': 'default'|'constant'|'empty'|'repeated_context'|'FreeNoise','seed_gen_override': 'use existing'|'comfy'|'comfy [gpu]'|'auto1111'|'auto1111 [gpu]','seed_offset': INT,'prev_noise_layers'?: NOISE_LAYERS,'mask_optional'?: MASK,'seed_override'?: INT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['batch_offset'] = opts['batch_offset'];
this['noise_type'] = opts['noise_type'];
this['seed_gen_override'] = opts['seed_gen_override'];
this['seed_offset'] = opts['seed_offset']
            if(opts['prev_noise_layers']!==undefined) this['prev_noise_layers'] = opts['prev_noise_layers'];
if(opts['mask_optional']!==undefined) this['mask_optional'] = opts['mask_optional'];
if(opts['seed_override']!==undefined) this['seed_override'] = opts['seed_override'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'batch_offset':  0,
'seed_offset':  0,
'seed_override':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_AnimateDiffSettings' : class extends Node{
        //Setters
        set 'pe_adjust'(value : PE_ADJUST)  { super.$$link(0, value) } 
set 'weight_adjust'(value : WEIGHT_ADJUST)  { super.$$link(1, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(2, value) } 

        //Getters
        get 'AD_SETTINGS'() : AD_SETTINGS { return [this, 'AD_SETTINGS', 0]  as unknown as AD_SETTINGS; }

        constructor(opts:{
            'pe_adjust'?: PE_ADJUST,'weight_adjust'?: WEIGHT_ADJUST,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            
            if(opts['pe_adjust']!==undefined) this['pe_adjust'] = opts['pe_adjust'];
if(opts['weight_adjust']!==undefined) this['weight_adjust'] = opts['weight_adjust'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_AdjustPESweetspotStretch' : class extends Node{
        //Setters
        set 'sweetspot'(value : INT)  { super.$$link(0, value) } 
set 'new_sweetspot'(value : INT)  { super.$$link(1, value) } 
set 'print_adjustment'(value : BOOLEAN)  { super.$$link(2, value) } 
set 'prev_pe_adjust'(value : PE_ADJUST)  { super.$$link(3, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(4, value) } 

        //Getters
        get 'PE_ADJUST'() : PE_ADJUST { return [this, 'PE_ADJUST', 0]  as unknown as PE_ADJUST; }

        constructor(opts:{
            'sweetspot': INT,'new_sweetspot': INT,'print_adjustment': BOOLEAN,'prev_pe_adjust'?: PE_ADJUST,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['sweetspot'] = opts['sweetspot'];
this['new_sweetspot'] = opts['new_sweetspot'];
this['print_adjustment'] = opts['print_adjustment']
            if(opts['prev_pe_adjust']!==undefined) this['prev_pe_adjust'] = opts['prev_pe_adjust'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'sweetspot':  16,
'new_sweetspot':  16,
'print_adjustment':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_AdjustPEFullStretch' : class extends Node{
        //Setters
        set 'pe_stretch'(value : INT)  { super.$$link(0, value) } 
set 'print_adjustment'(value : BOOLEAN)  { super.$$link(1, value) } 
set 'prev_pe_adjust'(value : PE_ADJUST)  { super.$$link(2, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(3, value) } 

        //Getters
        get 'PE_ADJUST'() : PE_ADJUST { return [this, 'PE_ADJUST', 0]  as unknown as PE_ADJUST; }

        constructor(opts:{
            'pe_stretch': INT,'print_adjustment': BOOLEAN,'prev_pe_adjust'?: PE_ADJUST,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['pe_stretch'] = opts['pe_stretch'];
this['print_adjustment'] = opts['print_adjustment']
            if(opts['prev_pe_adjust']!==undefined) this['prev_pe_adjust'] = opts['prev_pe_adjust'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'pe_stretch':  0,
'print_adjustment':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_AdjustPEManual' : class extends Node{
        //Setters
        set 'cap_initial_pe_length'(value : INT)  { super.$$link(0, value) } 
set 'interpolate_pe_to_length'(value : INT)  { super.$$link(1, value) } 
set 'initial_pe_idx_offset'(value : INT)  { super.$$link(2, value) } 
set 'final_pe_idx_offset'(value : INT)  { super.$$link(3, value) } 
set 'print_adjustment'(value : BOOLEAN)  { super.$$link(4, value) } 
set 'prev_pe_adjust'(value : PE_ADJUST)  { super.$$link(5, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(6, value) } 

        //Getters
        get 'PE_ADJUST'() : PE_ADJUST { return [this, 'PE_ADJUST', 0]  as unknown as PE_ADJUST; }

        constructor(opts:{
            'cap_initial_pe_length': INT,'interpolate_pe_to_length': INT,'initial_pe_idx_offset': INT,'final_pe_idx_offset': INT,'print_adjustment': BOOLEAN,'prev_pe_adjust'?: PE_ADJUST,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['cap_initial_pe_length'] = opts['cap_initial_pe_length'];
this['interpolate_pe_to_length'] = opts['interpolate_pe_to_length'];
this['initial_pe_idx_offset'] = opts['initial_pe_idx_offset'];
this['final_pe_idx_offset'] = opts['final_pe_idx_offset'];
this['print_adjustment'] = opts['print_adjustment']
            if(opts['prev_pe_adjust']!==undefined) this['prev_pe_adjust'] = opts['prev_pe_adjust'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'cap_initial_pe_length':  0,
'interpolate_pe_to_length':  0,
'initial_pe_idx_offset':  0,
'final_pe_idx_offset':  0,
'print_adjustment':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_AdjustWeightAllAdd' : class extends Node{
        //Setters
        set 'all_ADD'(value : FLOAT)  { super.$$link(0, value) } 
set 'print_adjustment'(value : BOOLEAN)  { super.$$link(1, value) } 
set 'prev_weight_adjust'(value : WEIGHT_ADJUST)  { super.$$link(2, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(3, value) } 

        //Getters
        get 'WEIGHT_ADJUST'() : WEIGHT_ADJUST { return [this, 'WEIGHT_ADJUST', 0]  as unknown as WEIGHT_ADJUST; }

        constructor(opts:{
            'all_ADD': FLOAT,'print_adjustment': BOOLEAN,'prev_weight_adjust'?: WEIGHT_ADJUST,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['all_ADD'] = opts['all_ADD'];
this['print_adjustment'] = opts['print_adjustment']
            if(opts['prev_weight_adjust']!==undefined) this['prev_weight_adjust'] = opts['prev_weight_adjust'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'all_ADD':  0,
'print_adjustment':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_AdjustWeightAllMult' : class extends Node{
        //Setters
        set 'all_MULT'(value : FLOAT)  { super.$$link(0, value) } 
set 'print_adjustment'(value : BOOLEAN)  { super.$$link(1, value) } 
set 'prev_weight_adjust'(value : WEIGHT_ADJUST)  { super.$$link(2, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(3, value) } 

        //Getters
        get 'WEIGHT_ADJUST'() : WEIGHT_ADJUST { return [this, 'WEIGHT_ADJUST', 0]  as unknown as WEIGHT_ADJUST; }

        constructor(opts:{
            'all_MULT': FLOAT,'print_adjustment': BOOLEAN,'prev_weight_adjust'?: WEIGHT_ADJUST,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['all_MULT'] = opts['all_MULT'];
this['print_adjustment'] = opts['print_adjustment']
            if(opts['prev_weight_adjust']!==undefined) this['prev_weight_adjust'] = opts['prev_weight_adjust'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'all_MULT':  1,
'print_adjustment':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_AdjustWeightIndivAdd' : class extends Node{
        //Setters
        set 'pe_ADD'(value : FLOAT)  { super.$$link(0, value) } 
set 'attn_ADD'(value : FLOAT)  { super.$$link(1, value) } 
set 'other_ADD'(value : FLOAT)  { super.$$link(2, value) } 
set 'print_adjustment'(value : BOOLEAN)  { super.$$link(3, value) } 
set 'prev_weight_adjust'(value : WEIGHT_ADJUST)  { super.$$link(4, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(5, value) } 

        //Getters
        get 'WEIGHT_ADJUST'() : WEIGHT_ADJUST { return [this, 'WEIGHT_ADJUST', 0]  as unknown as WEIGHT_ADJUST; }

        constructor(opts:{
            'pe_ADD': FLOAT,'attn_ADD': FLOAT,'other_ADD': FLOAT,'print_adjustment': BOOLEAN,'prev_weight_adjust'?: WEIGHT_ADJUST,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['pe_ADD'] = opts['pe_ADD'];
this['attn_ADD'] = opts['attn_ADD'];
this['other_ADD'] = opts['other_ADD'];
this['print_adjustment'] = opts['print_adjustment']
            if(opts['prev_weight_adjust']!==undefined) this['prev_weight_adjust'] = opts['prev_weight_adjust'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'pe_ADD':  0,
'attn_ADD':  0,
'other_ADD':  0,
'print_adjustment':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_AdjustWeightIndivMult' : class extends Node{
        //Setters
        set 'pe_MULT'(value : FLOAT)  { super.$$link(0, value) } 
set 'attn_MULT'(value : FLOAT)  { super.$$link(1, value) } 
set 'other_MULT'(value : FLOAT)  { super.$$link(2, value) } 
set 'print_adjustment'(value : BOOLEAN)  { super.$$link(3, value) } 
set 'prev_weight_adjust'(value : WEIGHT_ADJUST)  { super.$$link(4, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(5, value) } 

        //Getters
        get 'WEIGHT_ADJUST'() : WEIGHT_ADJUST { return [this, 'WEIGHT_ADJUST', 0]  as unknown as WEIGHT_ADJUST; }

        constructor(opts:{
            'pe_MULT': FLOAT,'attn_MULT': FLOAT,'other_MULT': FLOAT,'print_adjustment': BOOLEAN,'prev_weight_adjust'?: WEIGHT_ADJUST,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['pe_MULT'] = opts['pe_MULT'];
this['attn_MULT'] = opts['attn_MULT'];
this['other_MULT'] = opts['other_MULT'];
this['print_adjustment'] = opts['print_adjustment']
            if(opts['prev_weight_adjust']!==undefined) this['prev_weight_adjust'] = opts['prev_weight_adjust'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'pe_MULT':  1,
'attn_MULT':  1,
'other_MULT':  1,
'print_adjustment':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_AdjustWeightIndivAttnAdd' : class extends Node{
        //Setters
        set 'pe_ADD'(value : FLOAT)  { super.$$link(0, value) } 
set 'attn_ADD'(value : FLOAT)  { super.$$link(1, value) } 
set 'attn_q_ADD'(value : FLOAT)  { super.$$link(2, value) } 
set 'attn_k_ADD'(value : FLOAT)  { super.$$link(3, value) } 
set 'attn_v_ADD'(value : FLOAT)  { super.$$link(4, value) } 
set 'attn_out_weight_ADD'(value : FLOAT)  { super.$$link(5, value) } 
set 'attn_out_bias_ADD'(value : FLOAT)  { super.$$link(6, value) } 
set 'other_ADD'(value : FLOAT)  { super.$$link(7, value) } 
set 'print_adjustment'(value : BOOLEAN)  { super.$$link(8, value) } 
set 'prev_weight_adjust'(value : WEIGHT_ADJUST)  { super.$$link(9, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(10, value) } 

        //Getters
        get 'WEIGHT_ADJUST'() : WEIGHT_ADJUST { return [this, 'WEIGHT_ADJUST', 0]  as unknown as WEIGHT_ADJUST; }

        constructor(opts:{
            'pe_ADD': FLOAT,'attn_ADD': FLOAT,'attn_q_ADD': FLOAT,'attn_k_ADD': FLOAT,'attn_v_ADD': FLOAT,'attn_out_weight_ADD': FLOAT,'attn_out_bias_ADD': FLOAT,'other_ADD': FLOAT,'print_adjustment': BOOLEAN,'prev_weight_adjust'?: WEIGHT_ADJUST,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['pe_ADD'] = opts['pe_ADD'];
this['attn_ADD'] = opts['attn_ADD'];
this['attn_q_ADD'] = opts['attn_q_ADD'];
this['attn_k_ADD'] = opts['attn_k_ADD'];
this['attn_v_ADD'] = opts['attn_v_ADD'];
this['attn_out_weight_ADD'] = opts['attn_out_weight_ADD'];
this['attn_out_bias_ADD'] = opts['attn_out_bias_ADD'];
this['other_ADD'] = opts['other_ADD'];
this['print_adjustment'] = opts['print_adjustment']
            if(opts['prev_weight_adjust']!==undefined) this['prev_weight_adjust'] = opts['prev_weight_adjust'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'pe_ADD':  0,
'attn_ADD':  0,
'attn_q_ADD':  0,
'attn_k_ADD':  0,
'attn_v_ADD':  0,
'attn_out_weight_ADD':  0,
'attn_out_bias_ADD':  0,
'other_ADD':  0,
'print_adjustment':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_AdjustWeightIndivAttnMult' : class extends Node{
        //Setters
        set 'pe_MULT'(value : FLOAT)  { super.$$link(0, value) } 
set 'attn_MULT'(value : FLOAT)  { super.$$link(1, value) } 
set 'attn_q_MULT'(value : FLOAT)  { super.$$link(2, value) } 
set 'attn_k_MULT'(value : FLOAT)  { super.$$link(3, value) } 
set 'attn_v_MULT'(value : FLOAT)  { super.$$link(4, value) } 
set 'attn_out_weight_MULT'(value : FLOAT)  { super.$$link(5, value) } 
set 'attn_out_bias_MULT'(value : FLOAT)  { super.$$link(6, value) } 
set 'other_MULT'(value : FLOAT)  { super.$$link(7, value) } 
set 'print_adjustment'(value : BOOLEAN)  { super.$$link(8, value) } 
set 'prev_weight_adjust'(value : WEIGHT_ADJUST)  { super.$$link(9, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(10, value) } 

        //Getters
        get 'WEIGHT_ADJUST'() : WEIGHT_ADJUST { return [this, 'WEIGHT_ADJUST', 0]  as unknown as WEIGHT_ADJUST; }

        constructor(opts:{
            'pe_MULT': FLOAT,'attn_MULT': FLOAT,'attn_q_MULT': FLOAT,'attn_k_MULT': FLOAT,'attn_v_MULT': FLOAT,'attn_out_weight_MULT': FLOAT,'attn_out_bias_MULT': FLOAT,'other_MULT': FLOAT,'print_adjustment': BOOLEAN,'prev_weight_adjust'?: WEIGHT_ADJUST,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['pe_MULT'] = opts['pe_MULT'];
this['attn_MULT'] = opts['attn_MULT'];
this['attn_q_MULT'] = opts['attn_q_MULT'];
this['attn_k_MULT'] = opts['attn_k_MULT'];
this['attn_v_MULT'] = opts['attn_v_MULT'];
this['attn_out_weight_MULT'] = opts['attn_out_weight_MULT'];
this['attn_out_bias_MULT'] = opts['attn_out_bias_MULT'];
this['other_MULT'] = opts['other_MULT'];
this['print_adjustment'] = opts['print_adjustment']
            if(opts['prev_weight_adjust']!==undefined) this['prev_weight_adjust'] = opts['prev_weight_adjust'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'pe_MULT':  1,
'attn_MULT':  1,
'attn_q_MULT':  1,
'attn_k_MULT':  1,
'attn_v_MULT':  1,
'attn_out_weight_MULT':  1,
'attn_out_bias_MULT':  1,
'other_MULT':  1,
'print_adjustment':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_CustomCFGSimple' : class extends Node{
        //Setters
        set 'cfg'(value : FLOAT)  { super.$$link(0, value) } 
set 'cfg_extras'(value : CFG_EXTRAS)  { super.$$link(1, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(2, value) } 

        //Getters
        get 'CUSTOM_CFG'() : CUSTOM_CFG { return [this, 'CUSTOM_CFG', 0]  as unknown as CUSTOM_CFG; }

        constructor(opts:{
            'cfg': FLOAT,'cfg_extras'?: CFG_EXTRAS,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['cfg'] = opts['cfg']
            if(opts['cfg_extras']!==undefined) this['cfg_extras'] = opts['cfg_extras'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'cfg':  8
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_CustomCFG' : class extends Node{
        //Setters
        set 'cfg_multival'(value : MULTIVAL)  { super.$$link(0, value) } 
set 'cfg_extras'(value : CFG_EXTRAS)  { super.$$link(1, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(2, value) } 

        //Getters
        get 'CUSTOM_CFG'() : CUSTOM_CFG { return [this, 'CUSTOM_CFG', 0]  as unknown as CUSTOM_CFG; }

        constructor(opts:{
            'cfg_multival': MULTIVAL,'cfg_extras'?: CFG_EXTRAS,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['cfg_multival'] = opts['cfg_multival']
            if(opts['cfg_extras']!==undefined) this['cfg_extras'] = opts['cfg_extras'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_CustomCFGKeyframeSimple' : class extends Node{
        //Setters
        set 'cfg'(value : FLOAT)  { super.$$link(0, value) } 
set 'start_percent'(value : FLOAT)  { super.$$link(1, value) } 
set 'guarantee_steps'(value : INT)  { super.$$link(2, value) } 
set 'prev_custom_cfg'(value : CUSTOM_CFG)  { super.$$link(3, value) } 
set 'cfg_extras'(value : CFG_EXTRAS)  { super.$$link(4, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(5, value) } 

        //Getters
        get 'CUSTOM_CFG'() : CUSTOM_CFG { return [this, 'CUSTOM_CFG', 0]  as unknown as CUSTOM_CFG; }

        constructor(opts:{
            'cfg': FLOAT,'start_percent': FLOAT,'guarantee_steps': INT,'prev_custom_cfg'?: CUSTOM_CFG,'cfg_extras'?: CFG_EXTRAS,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['cfg'] = opts['cfg'];
this['start_percent'] = opts['start_percent'];
this['guarantee_steps'] = opts['guarantee_steps']
            if(opts['prev_custom_cfg']!==undefined) this['prev_custom_cfg'] = opts['prev_custom_cfg'];
if(opts['cfg_extras']!==undefined) this['cfg_extras'] = opts['cfg_extras'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'cfg':  8,
'start_percent':  0,
'guarantee_steps':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_CustomCFGKeyframe' : class extends Node{
        //Setters
        set 'cfg_multival'(value : MULTIVAL)  { super.$$link(0, value) } 
set 'start_percent'(value : FLOAT)  { super.$$link(1, value) } 
set 'guarantee_steps'(value : INT)  { super.$$link(2, value) } 
set 'prev_custom_cfg'(value : CUSTOM_CFG)  { super.$$link(3, value) } 
set 'cfg_extras'(value : CFG_EXTRAS)  { super.$$link(4, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(5, value) } 

        //Getters
        get 'CUSTOM_CFG'() : CUSTOM_CFG { return [this, 'CUSTOM_CFG', 0]  as unknown as CUSTOM_CFG; }

        constructor(opts:{
            'cfg_multival': MULTIVAL,'start_percent': FLOAT,'guarantee_steps': INT,'prev_custom_cfg'?: CUSTOM_CFG,'cfg_extras'?: CFG_EXTRAS,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['cfg_multival'] = opts['cfg_multival'];
this['start_percent'] = opts['start_percent'];
this['guarantee_steps'] = opts['guarantee_steps']
            if(opts['prev_custom_cfg']!==undefined) this['prev_custom_cfg'] = opts['prev_custom_cfg'];
if(opts['cfg_extras']!==undefined) this['cfg_extras'] = opts['cfg_extras'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'start_percent':  0,
'guarantee_steps':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_CustomCFGKeyframeInterpolation' : class extends Node{
        //Setters
        set 'start_percent'(value : FLOAT)  { super.$$link(0, value) } 
set 'end_percent'(value : FLOAT)  { super.$$link(1, value) } 
set 'cfg_start'(value : FLOAT)  { super.$$link(2, value) } 
set 'cfg_end'(value : FLOAT)  { super.$$link(3, value) } 
set 'interpolation'(value : 'linear'|'ease_in'|'ease_out'|'ease_in_out')  { super.$$link(4, value) } 
set 'intervals'(value : INT)  { super.$$link(5, value) } 
set 'print_keyframes'(value : BOOLEAN)  { super.$$link(6, value) } 
set 'prev_custom_cfg'(value : CUSTOM_CFG)  { super.$$link(7, value) } 
set 'cfg_extras'(value : CFG_EXTRAS)  { super.$$link(8, value) } 

        //Getters
        get 'CUSTOM_CFG'() : CUSTOM_CFG { return [this, 'CUSTOM_CFG', 0]  as unknown as CUSTOM_CFG; }

        constructor(opts:{
            'start_percent': FLOAT,'end_percent': FLOAT,'cfg_start': FLOAT,'cfg_end': FLOAT,'interpolation': 'linear'|'ease_in'|'ease_out'|'ease_in_out','intervals': INT,'print_keyframes': BOOLEAN,'prev_custom_cfg'?: CUSTOM_CFG,'cfg_extras'?: CFG_EXTRAS
        }){
            super(ctx);

            this['start_percent'] = opts['start_percent'];
this['end_percent'] = opts['end_percent'];
this['cfg_start'] = opts['cfg_start'];
this['cfg_end'] = opts['cfg_end'];
this['interpolation'] = opts['interpolation'];
this['intervals'] = opts['intervals'];
this['print_keyframes'] = opts['print_keyframes']
            if(opts['prev_custom_cfg']!==undefined) this['prev_custom_cfg'] = opts['prev_custom_cfg'];
if(opts['cfg_extras']!==undefined) this['cfg_extras'] = opts['cfg_extras']

        }

        static defaults = {
            'start_percent':  0,
'end_percent':  1,
'cfg_start':  8,
'cfg_end':  8,
'intervals':  50,
'print_keyframes':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_CustomCFGKeyframeFromList' : class extends Node{
        //Setters
        set 'cfgs_float'(value : FLOAT)  { super.$$link(0, value) } 
set 'start_percent'(value : FLOAT)  { super.$$link(1, value) } 
set 'end_percent'(value : FLOAT)  { super.$$link(2, value) } 
set 'print_keyframes'(value : BOOLEAN)  { super.$$link(3, value) } 
set 'prev_custom_cfg'(value : CUSTOM_CFG)  { super.$$link(4, value) } 
set 'cfg_extras'(value : CFG_EXTRAS)  { super.$$link(5, value) } 

        //Getters
        get 'CUSTOM_CFG'() : CUSTOM_CFG { return [this, 'CUSTOM_CFG', 0]  as unknown as CUSTOM_CFG; }

        constructor(opts:{
            'cfgs_float': FLOAT,'start_percent': FLOAT,'end_percent': FLOAT,'print_keyframes': BOOLEAN,'prev_custom_cfg'?: CUSTOM_CFG,'cfg_extras'?: CFG_EXTRAS
        }){
            super(ctx);

            this['cfgs_float'] = opts['cfgs_float'];
this['start_percent'] = opts['start_percent'];
this['end_percent'] = opts['end_percent'];
this['print_keyframes'] = opts['print_keyframes']
            if(opts['prev_custom_cfg']!==undefined) this['prev_custom_cfg'] = opts['prev_custom_cfg'];
if(opts['cfg_extras']!==undefined) this['cfg_extras'] = opts['cfg_extras']

        }

        static defaults = {
            'cfgs_float':  -1,
'start_percent':  0,
'end_percent':  1,
'print_keyframes':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_CFGExtrasPAGSimple' : class extends Node{
        //Setters
        set 'scale'(value : FLOAT)  { super.$$link(0, value) } 
set 'prev_extras'(value : CFG_EXTRAS)  { super.$$link(1, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(2, value) } 

        //Getters
        get 'CFG_EXTRAS'() : CFG_EXTRAS { return [this, 'CFG_EXTRAS', 0]  as unknown as CFG_EXTRAS; }

        constructor(opts:{
            'scale': FLOAT,'prev_extras'?: CFG_EXTRAS,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['scale'] = opts['scale']
            if(opts['prev_extras']!==undefined) this['prev_extras'] = opts['prev_extras'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'scale':  3
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_CFGExtrasPAG' : class extends Node{
        //Setters
        set 'scale_multival'(value : MULTIVAL)  { super.$$link(0, value) } 
set 'prev_extras'(value : CFG_EXTRAS)  { super.$$link(1, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(2, value) } 

        //Getters
        get 'CFG_EXTRAS'() : CFG_EXTRAS { return [this, 'CFG_EXTRAS', 0]  as unknown as CFG_EXTRAS; }

        constructor(opts:{
            'scale_multival': MULTIVAL,'prev_extras'?: CFG_EXTRAS,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['scale_multival'] = opts['scale_multival']
            if(opts['prev_extras']!==undefined) this['prev_extras'] = opts['prev_extras'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_CFGExtrasRescaleCFGSimple' : class extends Node{
        //Setters
        set 'multiplier'(value : FLOAT)  { super.$$link(0, value) } 
set 'prev_extras'(value : CFG_EXTRAS)  { super.$$link(1, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(2, value) } 

        //Getters
        get 'CFG_EXTRAS'() : CFG_EXTRAS { return [this, 'CFG_EXTRAS', 0]  as unknown as CFG_EXTRAS; }

        constructor(opts:{
            'multiplier': FLOAT,'prev_extras'?: CFG_EXTRAS,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['multiplier'] = opts['multiplier']
            if(opts['prev_extras']!==undefined) this['prev_extras'] = opts['prev_extras'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'multiplier':  0.7
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_CFGExtrasRescaleCFG' : class extends Node{
        //Setters
        set 'mult_multival'(value : MULTIVAL)  { super.$$link(0, value) } 
set 'prev_extras'(value : CFG_EXTRAS)  { super.$$link(1, value) } 

        //Getters
        get 'CFG_EXTRAS'() : CFG_EXTRAS { return [this, 'CFG_EXTRAS', 0]  as unknown as CFG_EXTRAS; }

        constructor(opts:{
            'mult_multival': MULTIVAL,'prev_extras'?: CFG_EXTRAS
        }){
            super(ctx);

            this['mult_multival'] = opts['mult_multival']
            if(opts['prev_extras']!==undefined) this['prev_extras'] = opts['prev_extras']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_SigmaSchedule' : class extends Node{
        //Setters
        set 'beta_schedule'(value : 'sqrt_linear (AnimateDiff)'|'linear (AnimateDiff-SDXL)'|'linear (HotshotXL/default)'|'avg(sqrt_linear,linear)'|'lcm avg(sqrt_linear,linear)'|'lcm'|'lcm[100_ots]'|'lcm >> sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2')  { super.$$link(0, value) } 

        //Getters
        get 'SIGMA_SCHEDULE'() : SIGMA_SCHEDULE { return [this, 'SIGMA_SCHEDULE', 0]  as unknown as SIGMA_SCHEDULE; }

        constructor(opts:{
            'beta_schedule': 'sqrt_linear (AnimateDiff)'|'linear (AnimateDiff-SDXL)'|'linear (HotshotXL/default)'|'avg(sqrt_linear,linear)'|'lcm avg(sqrt_linear,linear)'|'lcm'|'lcm[100_ots]'|'lcm >> sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2'
        }){
            super(ctx);

            this['beta_schedule'] = opts['beta_schedule']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_RawSigmaSchedule' : class extends Node{
        //Setters
        set 'raw_beta_schedule'(value : 'linear'|'sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2')  { super.$$link(0, value) } 
set 'linear_start'(value : FLOAT)  { super.$$link(1, value) } 
set 'linear_end'(value : FLOAT)  { super.$$link(2, value) } 
set 'sampling'(value : 'eps'|'v_prediction'|'lcm')  { super.$$link(3, value) } 
set 'lcm_original_timesteps'(value : INT)  { super.$$link(4, value) } 
set 'lcm_zsnr'(value : BOOLEAN)  { super.$$link(5, value) } 

        //Getters
        get 'SIGMA_SCHEDULE'() : SIGMA_SCHEDULE { return [this, 'SIGMA_SCHEDULE', 0]  as unknown as SIGMA_SCHEDULE; }

        constructor(opts:{
            'raw_beta_schedule': 'linear'|'sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2','linear_start': FLOAT,'linear_end': FLOAT,'sampling': 'eps'|'v_prediction'|'lcm','lcm_original_timesteps': INT,'lcm_zsnr': BOOLEAN
        }){
            super(ctx);

            this['raw_beta_schedule'] = opts['raw_beta_schedule'];
this['linear_start'] = opts['linear_start'];
this['linear_end'] = opts['linear_end'];
this['sampling'] = opts['sampling'];
this['lcm_original_timesteps'] = opts['lcm_original_timesteps'];
this['lcm_zsnr'] = opts['lcm_zsnr']
            

        }

        static defaults = {
            'linear_start':  0.00085,
'linear_end':  0.012,
'lcm_original_timesteps':  50,
'lcm_zsnr':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_SigmaScheduleWeightedAverage' : class extends Node{
        //Setters
        set 'schedule_A'(value : SIGMA_SCHEDULE)  { super.$$link(0, value) } 
set 'schedule_B'(value : SIGMA_SCHEDULE)  { super.$$link(1, value) } 
set 'weight_A'(value : FLOAT)  { super.$$link(2, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(3, value) } 

        //Getters
        get 'SIGMA_SCHEDULE'() : SIGMA_SCHEDULE { return [this, 'SIGMA_SCHEDULE', 0]  as unknown as SIGMA_SCHEDULE; }

        constructor(opts:{
            'schedule_A': SIGMA_SCHEDULE,'schedule_B': SIGMA_SCHEDULE,'weight_A': FLOAT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['schedule_A'] = opts['schedule_A'];
this['schedule_B'] = opts['schedule_B'];
this['weight_A'] = opts['weight_A']
            if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'weight_A':  0.5
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_SigmaScheduleWeightedAverageInterp' : class extends Node{
        //Setters
        set 'schedule_A'(value : SIGMA_SCHEDULE)  { super.$$link(0, value) } 
set 'schedule_B'(value : SIGMA_SCHEDULE)  { super.$$link(1, value) } 
set 'weight_A_Start'(value : FLOAT)  { super.$$link(2, value) } 
set 'weight_A_End'(value : FLOAT)  { super.$$link(3, value) } 
set 'interpolation'(value : 'linear'|'ease_in'|'ease_out'|'ease_in_out')  { super.$$link(4, value) } 

        //Getters
        get 'SIGMA_SCHEDULE'() : SIGMA_SCHEDULE { return [this, 'SIGMA_SCHEDULE', 0]  as unknown as SIGMA_SCHEDULE; }

        constructor(opts:{
            'schedule_A': SIGMA_SCHEDULE,'schedule_B': SIGMA_SCHEDULE,'weight_A_Start': FLOAT,'weight_A_End': FLOAT,'interpolation': 'linear'|'ease_in'|'ease_out'|'ease_in_out'
        }){
            super(ctx);

            this['schedule_A'] = opts['schedule_A'];
this['schedule_B'] = opts['schedule_B'];
this['weight_A_Start'] = opts['weight_A_Start'];
this['weight_A_End'] = opts['weight_A_End'];
this['interpolation'] = opts['interpolation']
            

        }

        static defaults = {
            'weight_A_Start':  0.5,
'weight_A_End':  0.5
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_SigmaScheduleSplitAndCombine' : class extends Node{
        //Setters
        set 'schedule_Start'(value : SIGMA_SCHEDULE)  { super.$$link(0, value) } 
set 'schedule_End'(value : SIGMA_SCHEDULE)  { super.$$link(1, value) } 
set 'idx_split_percent'(value : FLOAT)  { super.$$link(2, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(3, value) } 

        //Getters
        get 'SIGMA_SCHEDULE'() : SIGMA_SCHEDULE { return [this, 'SIGMA_SCHEDULE', 0]  as unknown as SIGMA_SCHEDULE; }

        constructor(opts:{
            'schedule_Start': SIGMA_SCHEDULE,'schedule_End': SIGMA_SCHEDULE,'idx_split_percent': FLOAT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['schedule_Start'] = opts['schedule_Start'];
this['schedule_End'] = opts['schedule_End'];
this['idx_split_percent'] = opts['idx_split_percent']
            if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'idx_split_percent':  0.5
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_SigmaScheduleToSigmas' : class extends Node{
        //Setters
        set 'sigma_schedule'(value : SIGMA_SCHEDULE)  { super.$$link(0, value) } 
set 'scheduler'(value : 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform')  { super.$$link(1, value) } 
set 'steps'(value : INT)  { super.$$link(2, value) } 
set 'denoise'(value : FLOAT)  { super.$$link(3, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(4, value) } 

        //Getters
        get 'SIGMAS'() : SIGMAS { return [this, 'SIGMAS', 0]  as unknown as SIGMAS; }

        constructor(opts:{
            'sigma_schedule': SIGMA_SCHEDULE,'scheduler': 'normal'|'karras'|'exponential'|'sgm_uniform'|'simple'|'ddim_uniform','steps': INT,'denoise': FLOAT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['sigma_schedule'] = opts['sigma_schedule'];
this['scheduler'] = opts['scheduler'];
this['steps'] = opts['steps'];
this['denoise'] = opts['denoise']
            if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'steps':  20,
'denoise':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_NoisedImageInjection' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'vae'(value : VAE)  { super.$$link(1, value) } 
set 'mask_opt'(value : MASK)  { super.$$link(2, value) } 
set 'invert_mask'(value : BOOLEAN)  { super.$$link(3, value) } 
set 'resize_image'(value : BOOLEAN)  { super.$$link(4, value) } 
set 'start_percent'(value : FLOAT)  { super.$$link(5, value) } 
set 'guarantee_steps'(value : INT)  { super.$$link(6, value) } 
set 'img_inject_opts'(value : IMAGE_INJECT_OPTIONS)  { super.$$link(7, value) } 
set 'strength_multival'(value : MULTIVAL)  { super.$$link(8, value) } 
set 'prev_image_inject'(value : IMAGE_INJECT)  { super.$$link(9, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(10, value) } 

        //Getters
        get 'IMAGE_INJECT'() : IMAGE_INJECT { return [this, 'IMAGE_INJECT', 0]  as unknown as IMAGE_INJECT; }

        constructor(opts:{
            'image': IMAGE,'vae': VAE,'mask_opt'?: MASK,'invert_mask'?: BOOLEAN,'resize_image'?: BOOLEAN,'start_percent'?: FLOAT,'guarantee_steps'?: INT,'img_inject_opts'?: IMAGE_INJECT_OPTIONS,'strength_multival'?: MULTIVAL,'prev_image_inject'?: IMAGE_INJECT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['image'] = opts['image'];
this['vae'] = opts['vae']
            if(opts['mask_opt']!==undefined) this['mask_opt'] = opts['mask_opt'];
if(opts['invert_mask']!==undefined) this['invert_mask'] = opts['invert_mask'];
if(opts['resize_image']!==undefined) this['resize_image'] = opts['resize_image'];
if(opts['start_percent']!==undefined) this['start_percent'] = opts['start_percent'];
if(opts['guarantee_steps']!==undefined) this['guarantee_steps'] = opts['guarantee_steps'];
if(opts['img_inject_opts']!==undefined) this['img_inject_opts'] = opts['img_inject_opts'];
if(opts['strength_multival']!==undefined) this['strength_multival'] = opts['strength_multival'];
if(opts['prev_image_inject']!==undefined) this['prev_image_inject'] = opts['prev_image_inject'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'invert_mask':  false,
'resize_image':  true,
'start_percent':  0,
'guarantee_steps':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_NoisedImageInjectOptions' : class extends Node{
        //Setters
        set 'composite_x'(value : INT)  { super.$$link(0, value) } 
set 'composite_y'(value : INT)  { super.$$link(1, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(2, value) } 

        //Getters
        get 'IMG_INJECT_OPTS'() : IMAGE_INJECT_OPTIONS { return [this, 'IMG_INJECT_OPTS', 0]  as unknown as IMAGE_INJECT_OPTIONS; }

        constructor(opts:{
            'composite_x'?: INT,'composite_y'?: INT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            
            if(opts['composite_x']!==undefined) this['composite_x'] = opts['composite_x'];
if(opts['composite_y']!==undefined) this['composite_y'] = opts['composite_y'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'composite_x':  0,
'composite_y':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_AnimateDiffUnload' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL
        }){
            super(ctx);

            this['model'] = opts['model']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_EmptyLatentImageLarge' : class extends Node{
        //Setters
        set 'width'(value : INT)  { super.$$link(0, value) } 
set 'height'(value : INT)  { super.$$link(1, value) } 
set 'batch_size'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'width': INT,'height': INT,'batch_size': INT
        }){
            super(ctx);

            this['width'] = opts['width'];
this['height'] = opts['height'];
this['batch_size'] = opts['batch_size']
            

        }

        static defaults = {
            'width':  512,
'height':  512,
'batch_size':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'CheckpointLoaderSimpleWithNoiseSelect' : class extends Node{
        //Setters
        set 'ckpt_name'(value : 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors')  { super.$$link(0, value) } 
set 'beta_schedule'(value : 'autoselect'|'use existing'|'sqrt_linear (AnimateDiff)'|'linear (AnimateDiff-SDXL)'|'linear (HotshotXL/default)'|'avg(sqrt_linear,linear)'|'lcm avg(sqrt_linear,linear)'|'lcm'|'lcm[100_ots]'|'lcm >> sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2')  { super.$$link(1, value) } 
set 'use_custom_scale_factor'(value : BOOLEAN)  { super.$$link(2, value) } 
set 'scale_factor'(value : FLOAT)  { super.$$link(3, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'CLIP'() : CLIP { return [this, 'CLIP', 1]  as unknown as CLIP; }
get 'VAE'() : VAE { return [this, 'VAE', 2]  as unknown as VAE; }

        constructor(opts:{
            'ckpt_name': 'Crystal-PR_rc2.safetensors'|'PixArt-XL-2-1024-MS.pth'|'animagineXLV3_v30.safetensors'|'dreamshaper_8.safetensors'|'juggernautXL_version6Rundiffusion.safetensors'|'manmaruMix_v10.safetensors'|'pettankoRouramashin_v10.safetensors'|'ponyrealismV21VAE.kLac.safetensors'|'realisticVisionV51_v51VAE.safetensors'|'sd_xl_base_0.9.safetensors'|'sd_xl_base_1.0_0.9vae.safetensors'|'sd_xl_refiner_0.9.safetensors'|'sd_xl_refiner_1.0_0.9vae.safetensors'|'uncannyafPonyxl_uncannyafPonyxl.safetensors','beta_schedule': 'autoselect'|'use existing'|'sqrt_linear (AnimateDiff)'|'linear (AnimateDiff-SDXL)'|'linear (HotshotXL/default)'|'avg(sqrt_linear,linear)'|'lcm avg(sqrt_linear,linear)'|'lcm'|'lcm[100_ots]'|'lcm >> sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2','use_custom_scale_factor'?: BOOLEAN,'scale_factor'?: FLOAT
        }){
            super(ctx);

            this['ckpt_name'] = opts['ckpt_name'];
this['beta_schedule'] = opts['beta_schedule']
            if(opts['use_custom_scale_factor']!==undefined) this['use_custom_scale_factor'] = opts['use_custom_scale_factor'];
if(opts['scale_factor']!==undefined) this['scale_factor'] = opts['scale_factor']

        }

        static defaults = {
            'beta_schedule':  "use existing",
'use_custom_scale_factor':  false,
'scale_factor':  0.18215
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_PerturbedAttentionGuidanceMultival' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'scale_multival'(value : MULTIVAL)  { super.$$link(1, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'scale_multival': MULTIVAL
        }){
            super(ctx);

            this['model'] = opts['model'];
this['scale_multival'] = opts['scale_multival']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_RescaleCFGMultival' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'mult_multival'(value : MULTIVAL)  { super.$$link(1, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'mult_multival': MULTIVAL
        }){
            super(ctx);

            this['model'] = opts['model'];
this['mult_multival'] = opts['mult_multival']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_AnimateDiffLoaderGen1' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'model_name'(value : 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt')  { super.$$link(1, value) } 
set 'beta_schedule'(value : 'autoselect'|'use existing'|'sqrt_linear (AnimateDiff)'|'linear (AnimateDiff-SDXL)'|'linear (HotshotXL/default)'|'avg(sqrt_linear,linear)'|'lcm avg(sqrt_linear,linear)'|'lcm'|'lcm[100_ots]'|'lcm >> sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2')  { super.$$link(2, value) } 
set 'context_options'(value : CONTEXT_OPTIONS)  { super.$$link(3, value) } 
set 'motion_lora'(value : MOTION_LORA)  { super.$$link(4, value) } 
set 'ad_settings'(value : AD_SETTINGS)  { super.$$link(5, value) } 
set 'ad_keyframes'(value : AD_KEYFRAMES)  { super.$$link(6, value) } 
set 'sample_settings'(value : SAMPLE_SETTINGS)  { super.$$link(7, value) } 
set 'scale_multival'(value : MULTIVAL)  { super.$$link(8, value) } 
set 'effect_multival'(value : MULTIVAL)  { super.$$link(9, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'model_name': 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt','beta_schedule': 'autoselect'|'use existing'|'sqrt_linear (AnimateDiff)'|'linear (AnimateDiff-SDXL)'|'linear (HotshotXL/default)'|'avg(sqrt_linear,linear)'|'lcm avg(sqrt_linear,linear)'|'lcm'|'lcm[100_ots]'|'lcm >> sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2','context_options'?: CONTEXT_OPTIONS,'motion_lora'?: MOTION_LORA,'ad_settings'?: AD_SETTINGS,'ad_keyframes'?: AD_KEYFRAMES,'sample_settings'?: SAMPLE_SETTINGS,'scale_multival'?: MULTIVAL,'effect_multival'?: MULTIVAL
        }){
            super(ctx);

            this['model'] = opts['model'];
this['model_name'] = opts['model_name'];
this['beta_schedule'] = opts['beta_schedule']
            if(opts['context_options']!==undefined) this['context_options'] = opts['context_options'];
if(opts['motion_lora']!==undefined) this['motion_lora'] = opts['motion_lora'];
if(opts['ad_settings']!==undefined) this['ad_settings'] = opts['ad_settings'];
if(opts['ad_keyframes']!==undefined) this['ad_keyframes'] = opts['ad_keyframes'];
if(opts['sample_settings']!==undefined) this['sample_settings'] = opts['sample_settings'];
if(opts['scale_multival']!==undefined) this['scale_multival'] = opts['scale_multival'];
if(opts['effect_multival']!==undefined) this['effect_multival'] = opts['effect_multival']

        }

        static defaults = {
            'beta_schedule':  "autoselect"
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_AnimateDiffLoaderWithContext' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'model_name'(value : 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt')  { super.$$link(1, value) } 
set 'beta_schedule'(value : 'autoselect'|'use existing'|'sqrt_linear (AnimateDiff)'|'linear (AnimateDiff-SDXL)'|'linear (HotshotXL/default)'|'avg(sqrt_linear,linear)'|'lcm avg(sqrt_linear,linear)'|'lcm'|'lcm[100_ots]'|'lcm >> sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2')  { super.$$link(2, value) } 
set 'context_options'(value : CONTEXT_OPTIONS)  { super.$$link(3, value) } 
set 'motion_lora'(value : MOTION_LORA)  { super.$$link(4, value) } 
set 'ad_settings'(value : AD_SETTINGS)  { super.$$link(5, value) } 
set 'sample_settings'(value : SAMPLE_SETTINGS)  { super.$$link(6, value) } 
set 'motion_scale'(value : FLOAT)  { super.$$link(7, value) } 
set 'apply_v2_models_properly'(value : BOOLEAN)  { super.$$link(8, value) } 
set 'ad_keyframes'(value : AD_KEYFRAMES)  { super.$$link(9, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'model_name': 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt','beta_schedule': 'autoselect'|'use existing'|'sqrt_linear (AnimateDiff)'|'linear (AnimateDiff-SDXL)'|'linear (HotshotXL/default)'|'avg(sqrt_linear,linear)'|'lcm avg(sqrt_linear,linear)'|'lcm'|'lcm[100_ots]'|'lcm >> sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2','context_options'?: CONTEXT_OPTIONS,'motion_lora'?: MOTION_LORA,'ad_settings'?: AD_SETTINGS,'sample_settings'?: SAMPLE_SETTINGS,'motion_scale'?: FLOAT,'apply_v2_models_properly'?: BOOLEAN,'ad_keyframes'?: AD_KEYFRAMES
        }){
            super(ctx);

            this['model'] = opts['model'];
this['model_name'] = opts['model_name'];
this['beta_schedule'] = opts['beta_schedule']
            if(opts['context_options']!==undefined) this['context_options'] = opts['context_options'];
if(opts['motion_lora']!==undefined) this['motion_lora'] = opts['motion_lora'];
if(opts['ad_settings']!==undefined) this['ad_settings'] = opts['ad_settings'];
if(opts['sample_settings']!==undefined) this['sample_settings'] = opts['sample_settings'];
if(opts['motion_scale']!==undefined) this['motion_scale'] = opts['motion_scale'];
if(opts['apply_v2_models_properly']!==undefined) this['apply_v2_models_properly'] = opts['apply_v2_models_properly'];
if(opts['ad_keyframes']!==undefined) this['ad_keyframes'] = opts['ad_keyframes']

        }

        static defaults = {
            'beta_schedule':  "autoselect",
'motion_scale':  1,
'apply_v2_models_properly':  true
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_UseEvolvedSampling' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'beta_schedule'(value : 'autoselect'|'use existing'|'sqrt_linear (AnimateDiff)'|'linear (AnimateDiff-SDXL)'|'linear (HotshotXL/default)'|'avg(sqrt_linear,linear)'|'lcm avg(sqrt_linear,linear)'|'lcm'|'lcm[100_ots]'|'lcm >> sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2')  { super.$$link(1, value) } 
set 'm_models'(value : M_MODELS)  { super.$$link(2, value) } 
set 'context_options'(value : CONTEXT_OPTIONS)  { super.$$link(3, value) } 
set 'sample_settings'(value : SAMPLE_SETTINGS)  { super.$$link(4, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'beta_schedule': 'autoselect'|'use existing'|'sqrt_linear (AnimateDiff)'|'linear (AnimateDiff-SDXL)'|'linear (HotshotXL/default)'|'avg(sqrt_linear,linear)'|'lcm avg(sqrt_linear,linear)'|'lcm'|'lcm[100_ots]'|'lcm >> sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2','m_models'?: M_MODELS,'context_options'?: CONTEXT_OPTIONS,'sample_settings'?: SAMPLE_SETTINGS
        }){
            super(ctx);

            this['model'] = opts['model'];
this['beta_schedule'] = opts['beta_schedule']
            if(opts['m_models']!==undefined) this['m_models'] = opts['m_models'];
if(opts['context_options']!==undefined) this['context_options'] = opts['context_options'];
if(opts['sample_settings']!==undefined) this['sample_settings'] = opts['sample_settings']

        }

        static defaults = {
            'beta_schedule':  "autoselect"
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_ApplyAnimateDiffModelSimple' : class extends Node{
        //Setters
        set 'motion_model'(value : MOTION_MODEL_ADE)  { super.$$link(0, value) } 
set 'motion_lora'(value : MOTION_LORA)  { super.$$link(1, value) } 
set 'scale_multival'(value : MULTIVAL)  { super.$$link(2, value) } 
set 'effect_multival'(value : MULTIVAL)  { super.$$link(3, value) } 
set 'ad_keyframes'(value : AD_KEYFRAMES)  { super.$$link(4, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(5, value) } 

        //Getters
        get 'M_MODELS'() : M_MODELS { return [this, 'M_MODELS', 0]  as unknown as M_MODELS; }

        constructor(opts:{
            'motion_model': MOTION_MODEL_ADE,'motion_lora'?: MOTION_LORA,'scale_multival'?: MULTIVAL,'effect_multival'?: MULTIVAL,'ad_keyframes'?: AD_KEYFRAMES,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['motion_model'] = opts['motion_model']
            if(opts['motion_lora']!==undefined) this['motion_lora'] = opts['motion_lora'];
if(opts['scale_multival']!==undefined) this['scale_multival'] = opts['scale_multival'];
if(opts['effect_multival']!==undefined) this['effect_multival'] = opts['effect_multival'];
if(opts['ad_keyframes']!==undefined) this['ad_keyframes'] = opts['ad_keyframes'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_ApplyAnimateDiffModel' : class extends Node{
        //Setters
        set 'motion_model'(value : MOTION_MODEL_ADE)  { super.$$link(0, value) } 
set 'start_percent'(value : FLOAT)  { super.$$link(1, value) } 
set 'end_percent'(value : FLOAT)  { super.$$link(2, value) } 
set 'motion_lora'(value : MOTION_LORA)  { super.$$link(3, value) } 
set 'scale_multival'(value : MULTIVAL)  { super.$$link(4, value) } 
set 'effect_multival'(value : MULTIVAL)  { super.$$link(5, value) } 
set 'ad_keyframes'(value : AD_KEYFRAMES)  { super.$$link(6, value) } 
set 'prev_m_models'(value : M_MODELS)  { super.$$link(7, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(8, value) } 

        //Getters
        get 'M_MODELS'() : M_MODELS { return [this, 'M_MODELS', 0]  as unknown as M_MODELS; }

        constructor(opts:{
            'motion_model': MOTION_MODEL_ADE,'start_percent': FLOAT,'end_percent': FLOAT,'motion_lora'?: MOTION_LORA,'scale_multival'?: MULTIVAL,'effect_multival'?: MULTIVAL,'ad_keyframes'?: AD_KEYFRAMES,'prev_m_models'?: M_MODELS,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['motion_model'] = opts['motion_model'];
this['start_percent'] = opts['start_percent'];
this['end_percent'] = opts['end_percent']
            if(opts['motion_lora']!==undefined) this['motion_lora'] = opts['motion_lora'];
if(opts['scale_multival']!==undefined) this['scale_multival'] = opts['scale_multival'];
if(opts['effect_multival']!==undefined) this['effect_multival'] = opts['effect_multival'];
if(opts['ad_keyframes']!==undefined) this['ad_keyframes'] = opts['ad_keyframes'];
if(opts['prev_m_models']!==undefined) this['prev_m_models'] = opts['prev_m_models'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'start_percent':  0,
'end_percent':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_LoadAnimateDiffModel' : class extends Node{
        //Setters
        set 'model_name'(value : 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt')  { super.$$link(0, value) } 
set 'ad_settings'(value : AD_SETTINGS)  { super.$$link(1, value) } 

        //Getters
        get 'MOTION_MODEL'() : MOTION_MODEL_ADE { return [this, 'MOTION_MODEL', 0]  as unknown as MOTION_MODEL_ADE; }

        constructor(opts:{
            'model_name': 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt','ad_settings'?: AD_SETTINGS
        }){
            super(ctx);

            this['model_name'] = opts['model_name']
            if(opts['ad_settings']!==undefined) this['ad_settings'] = opts['ad_settings']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_ApplyAnimateLCMI2VModel' : class extends Node{
        //Setters
        set 'motion_model'(value : MOTION_MODEL_ADE)  { super.$$link(0, value) } 
set 'ref_latent'(value : LATENT)  { super.$$link(1, value) } 
set 'ref_drift'(value : FLOAT)  { super.$$link(2, value) } 
set 'apply_ref_when_disabled'(value : BOOLEAN)  { super.$$link(3, value) } 
set 'start_percent'(value : FLOAT)  { super.$$link(4, value) } 
set 'end_percent'(value : FLOAT)  { super.$$link(5, value) } 
set 'motion_lora'(value : MOTION_LORA)  { super.$$link(6, value) } 
set 'scale_multival'(value : MULTIVAL)  { super.$$link(7, value) } 
set 'effect_multival'(value : MULTIVAL)  { super.$$link(8, value) } 
set 'ad_keyframes'(value : AD_KEYFRAMES)  { super.$$link(9, value) } 
set 'prev_m_models'(value : M_MODELS)  { super.$$link(10, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(11, value) } 

        //Getters
        get 'M_MODELS'() : M_MODELS { return [this, 'M_MODELS', 0]  as unknown as M_MODELS; }

        constructor(opts:{
            'motion_model': MOTION_MODEL_ADE,'ref_latent': LATENT,'ref_drift': FLOAT,'apply_ref_when_disabled': BOOLEAN,'start_percent': FLOAT,'end_percent': FLOAT,'motion_lora'?: MOTION_LORA,'scale_multival'?: MULTIVAL,'effect_multival'?: MULTIVAL,'ad_keyframes'?: AD_KEYFRAMES,'prev_m_models'?: M_MODELS,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['motion_model'] = opts['motion_model'];
this['ref_latent'] = opts['ref_latent'];
this['ref_drift'] = opts['ref_drift'];
this['apply_ref_when_disabled'] = opts['apply_ref_when_disabled'];
this['start_percent'] = opts['start_percent'];
this['end_percent'] = opts['end_percent']
            if(opts['motion_lora']!==undefined) this['motion_lora'] = opts['motion_lora'];
if(opts['scale_multival']!==undefined) this['scale_multival'] = opts['scale_multival'];
if(opts['effect_multival']!==undefined) this['effect_multival'] = opts['effect_multival'];
if(opts['ad_keyframes']!==undefined) this['ad_keyframes'] = opts['ad_keyframes'];
if(opts['prev_m_models']!==undefined) this['prev_m_models'] = opts['prev_m_models'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'ref_drift':  0,
'apply_ref_when_disabled':  false,
'start_percent':  0,
'end_percent':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_LoadAnimateLCMI2VModel' : class extends Node{
        //Setters
        set 'model_name'(value : 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt')  { super.$$link(0, value) } 
set 'ad_settings'(value : AD_SETTINGS)  { super.$$link(1, value) } 

        //Getters
        get 'MOTION_MODEL'() : MOTION_MODEL_ADE { return [this, 'MOTION_MODEL', 0]  as unknown as MOTION_MODEL_ADE; }
get 'encoder_only'() : MOTION_MODEL_ADE { return [this, 'encoder_only', 1]  as unknown as MOTION_MODEL_ADE; }

        constructor(opts:{
            'model_name': 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt','ad_settings'?: AD_SETTINGS
        }){
            super(ctx);

            this['model_name'] = opts['model_name']
            if(opts['ad_settings']!==undefined) this['ad_settings'] = opts['ad_settings']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_UpscaleAndVAEEncode' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'vae'(value : VAE)  { super.$$link(1, value) } 
set 'latent_size'(value : LATENT)  { super.$$link(2, value) } 
set 'scale_method'(value : 'nearest-exact'|'bilinear'|'area'|'bicubic'|'lanczos')  { super.$$link(3, value) } 
set 'crop'(value : 'disabled'|'center')  { super.$$link(4, value) } 

        //Getters
        get 'LATENT'() : LATENT { return [this, 'LATENT', 0]  as unknown as LATENT; }

        constructor(opts:{
            'image': IMAGE,'vae': VAE,'latent_size': LATENT,'scale_method': 'nearest-exact'|'bilinear'|'area'|'bicubic'|'lanczos','crop': 'disabled'|'center'
        }){
            super(ctx);

            this['image'] = opts['image'];
this['vae'] = opts['vae'];
this['latent_size'] = opts['latent_size'];
this['scale_method'] = opts['scale_method'];
this['crop'] = opts['crop']
            

        }

        static defaults = {
            'crop':  "center"
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_InjectI2VIntoAnimateDiffModel' : class extends Node{
        //Setters
        set 'model_name'(value : 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt')  { super.$$link(0, value) } 
set 'motion_model'(value : MOTION_MODEL_ADE)  { super.$$link(1, value) } 
set 'ad_settings'(value : AD_SETTINGS)  { super.$$link(2, value) } 
set 'deprecation_warning'(value : ADEWARN)  { super.$$link(3, value) } 

        //Getters
        get 'MOTION_MODEL'() : MOTION_MODEL_ADE { return [this, 'MOTION_MODEL', 0]  as unknown as MOTION_MODEL_ADE; }

        constructor(opts:{
            'model_name': 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt','motion_model': MOTION_MODEL_ADE,'ad_settings'?: AD_SETTINGS,'deprecation_warning'?: ADEWARN
        }){
            super(ctx);

            this['model_name'] = opts['model_name'];
this['motion_model'] = opts['motion_model']
            if(opts['ad_settings']!==undefined) this['ad_settings'] = opts['ad_settings'];
if(opts['deprecation_warning']!==undefined) this['deprecation_warning'] = opts['deprecation_warning']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_ApplyAnimateDiffModelWithCameraCtrl' : class extends Node{
        //Setters
        set 'motion_model'(value : MOTION_MODEL_ADE)  { super.$$link(0, value) } 
set 'cameractrl_poses'(value : CAMERACTRL_POSES)  { super.$$link(1, value) } 
set 'start_percent'(value : FLOAT)  { super.$$link(2, value) } 
set 'end_percent'(value : FLOAT)  { super.$$link(3, value) } 
set 'motion_lora'(value : MOTION_LORA)  { super.$$link(4, value) } 
set 'scale_multival'(value : MULTIVAL)  { super.$$link(5, value) } 
set 'effect_multival'(value : MULTIVAL)  { super.$$link(6, value) } 
set 'cameractrl_multival'(value : MULTIVAL)  { super.$$link(7, value) } 
set 'ad_keyframes'(value : AD_KEYFRAMES)  { super.$$link(8, value) } 
set 'prev_m_models'(value : M_MODELS)  { super.$$link(9, value) } 

        //Getters
        get 'M_MODELS'() : M_MODELS { return [this, 'M_MODELS', 0]  as unknown as M_MODELS; }

        constructor(opts:{
            'motion_model': MOTION_MODEL_ADE,'cameractrl_poses': CAMERACTRL_POSES,'start_percent': FLOAT,'end_percent': FLOAT,'motion_lora'?: MOTION_LORA,'scale_multival'?: MULTIVAL,'effect_multival'?: MULTIVAL,'cameractrl_multival'?: MULTIVAL,'ad_keyframes'?: AD_KEYFRAMES,'prev_m_models'?: M_MODELS
        }){
            super(ctx);

            this['motion_model'] = opts['motion_model'];
this['cameractrl_poses'] = opts['cameractrl_poses'];
this['start_percent'] = opts['start_percent'];
this['end_percent'] = opts['end_percent']
            if(opts['motion_lora']!==undefined) this['motion_lora'] = opts['motion_lora'];
if(opts['scale_multival']!==undefined) this['scale_multival'] = opts['scale_multival'];
if(opts['effect_multival']!==undefined) this['effect_multival'] = opts['effect_multival'];
if(opts['cameractrl_multival']!==undefined) this['cameractrl_multival'] = opts['cameractrl_multival'];
if(opts['ad_keyframes']!==undefined) this['ad_keyframes'] = opts['ad_keyframes'];
if(opts['prev_m_models']!==undefined) this['prev_m_models'] = opts['prev_m_models']

        }

        static defaults = {
            'start_percent':  0,
'end_percent':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_LoadAnimateDiffModelWithCameraCtrl' : class extends Node{
        //Setters
        set 'model_name'(value : 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt')  { super.$$link(0, value) } 
set 'camera_ctrl'(value : 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt')  { super.$$link(1, value) } 
set 'ad_settings'(value : AD_SETTINGS)  { super.$$link(2, value) } 

        //Getters
        get 'MOTION_MODEL'() : MOTION_MODEL_ADE { return [this, 'MOTION_MODEL', 0]  as unknown as MOTION_MODEL_ADE; }

        constructor(opts:{
            'model_name': 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt','camera_ctrl': 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt','ad_settings'?: AD_SETTINGS
        }){
            super(ctx);

            this['model_name'] = opts['model_name'];
this['camera_ctrl'] = opts['camera_ctrl']
            if(opts['ad_settings']!==undefined) this['ad_settings'] = opts['ad_settings']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_CameraCtrlAnimateDiffKeyframe' : class extends Node{
        //Setters
        set 'start_percent'(value : FLOAT)  { super.$$link(0, value) } 
set 'prev_ad_keyframes'(value : AD_KEYFRAMES)  { super.$$link(1, value) } 
set 'scale_multival'(value : MULTIVAL)  { super.$$link(2, value) } 
set 'effect_multival'(value : MULTIVAL)  { super.$$link(3, value) } 
set 'cameractrl_multival'(value : MULTIVAL)  { super.$$link(4, value) } 
set 'inherit_missing'(value : BOOLEAN)  { super.$$link(5, value) } 
set 'guarantee_steps'(value : INT)  { super.$$link(6, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(7, value) } 

        //Getters
        get 'AD_KEYFRAMES'() : AD_KEYFRAMES { return [this, 'AD_KEYFRAMES', 0]  as unknown as AD_KEYFRAMES; }

        constructor(opts:{
            'start_percent': FLOAT,'prev_ad_keyframes'?: AD_KEYFRAMES,'scale_multival'?: MULTIVAL,'effect_multival'?: MULTIVAL,'cameractrl_multival'?: MULTIVAL,'inherit_missing'?: BOOLEAN,'guarantee_steps'?: INT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['start_percent'] = opts['start_percent']
            if(opts['prev_ad_keyframes']!==undefined) this['prev_ad_keyframes'] = opts['prev_ad_keyframes'];
if(opts['scale_multival']!==undefined) this['scale_multival'] = opts['scale_multival'];
if(opts['effect_multival']!==undefined) this['effect_multival'] = opts['effect_multival'];
if(opts['cameractrl_multival']!==undefined) this['cameractrl_multival'] = opts['cameractrl_multival'];
if(opts['inherit_missing']!==undefined) this['inherit_missing'] = opts['inherit_missing'];
if(opts['guarantee_steps']!==undefined) this['guarantee_steps'] = opts['guarantee_steps'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'start_percent':  0,
'inherit_missing':  true,
'guarantee_steps':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_LoadCameraPoses' : class extends Node{
        //Setters
        set 'pose_filename'(value : void)  { super.$$link(0, value) } 

        //Getters
        get 'CAMERACTRL_POSES'() : CAMERACTRL_POSES { return [this, 'CAMERACTRL_POSES', 0]  as unknown as CAMERACTRL_POSES; }

        constructor(opts:{
            'pose_filename': void
        }){
            super(ctx);

            this['pose_filename'] = opts['pose_filename']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_LoadCameraPosesFromPath' : class extends Node{
        //Setters
        set 'file_path'(value : STRING)  { super.$$link(0, value) } 

        //Getters
        get 'CAMERACTRL_POSES'() : CAMERACTRL_POSES { return [this, 'CAMERACTRL_POSES', 0]  as unknown as CAMERACTRL_POSES; }

        constructor(opts:{
            'file_path'?: STRING
        }){
            super(ctx);

            
            if(opts['file_path']!==undefined) this['file_path'] = opts['file_path']

        }

        static defaults = {
            'file_path':  "X://path/to/pose_file.txt"
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_CameraPoseBasic' : class extends Node{
        //Setters
        set 'motion_type'(value : 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right')  { super.$$link(0, value) } 
set 'speed'(value : FLOAT)  { super.$$link(1, value) } 
set 'frame_length'(value : INT)  { super.$$link(2, value) } 
set 'prev_poses'(value : CAMERACTRL_POSES)  { super.$$link(3, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(4, value) } 

        //Getters
        get 'CAMERACTRL_POSES'() : CAMERACTRL_POSES { return [this, 'CAMERACTRL_POSES', 0]  as unknown as CAMERACTRL_POSES; }

        constructor(opts:{
            'motion_type': 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right','speed': FLOAT,'frame_length': INT,'prev_poses'?: CAMERACTRL_POSES,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['motion_type'] = opts['motion_type'];
this['speed'] = opts['speed'];
this['frame_length'] = opts['frame_length']
            if(opts['prev_poses']!==undefined) this['prev_poses'] = opts['prev_poses'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'speed':  1,
'frame_length':  16
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_CameraPoseCombo' : class extends Node{
        //Setters
        set 'motion_type1'(value : 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right')  { super.$$link(0, value) } 
set 'motion_type2'(value : 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right')  { super.$$link(1, value) } 
set 'motion_type3'(value : 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right')  { super.$$link(2, value) } 
set 'motion_type4'(value : 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right')  { super.$$link(3, value) } 
set 'motion_type5'(value : 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right')  { super.$$link(4, value) } 
set 'motion_type6'(value : 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right')  { super.$$link(5, value) } 
set 'speed'(value : FLOAT)  { super.$$link(6, value) } 
set 'frame_length'(value : INT)  { super.$$link(7, value) } 
set 'prev_poses'(value : CAMERACTRL_POSES)  { super.$$link(8, value) } 

        //Getters
        get 'CAMERACTRL_POSES'() : CAMERACTRL_POSES { return [this, 'CAMERACTRL_POSES', 0]  as unknown as CAMERACTRL_POSES; }

        constructor(opts:{
            'motion_type1': 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right','motion_type2': 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right','motion_type3': 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right','motion_type4': 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right','motion_type5': 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right','motion_type6': 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right','speed': FLOAT,'frame_length': INT,'prev_poses'?: CAMERACTRL_POSES
        }){
            super(ctx);

            this['motion_type1'] = opts['motion_type1'];
this['motion_type2'] = opts['motion_type2'];
this['motion_type3'] = opts['motion_type3'];
this['motion_type4'] = opts['motion_type4'];
this['motion_type5'] = opts['motion_type5'];
this['motion_type6'] = opts['motion_type6'];
this['speed'] = opts['speed'];
this['frame_length'] = opts['frame_length']
            if(opts['prev_poses']!==undefined) this['prev_poses'] = opts['prev_poses']

        }

        static defaults = {
            'speed':  1,
'frame_length':  16
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_CameraPoseAdvanced' : class extends Node{
        //Setters
        set 'motion_type1'(value : 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right')  { super.$$link(0, value) } 
set 'strength1'(value : FLOAT)  { super.$$link(1, value) } 
set 'motion_type2'(value : 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right')  { super.$$link(2, value) } 
set 'strength2'(value : FLOAT)  { super.$$link(3, value) } 
set 'motion_type3'(value : 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right')  { super.$$link(4, value) } 
set 'strength3'(value : FLOAT)  { super.$$link(5, value) } 
set 'motion_type4'(value : 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right')  { super.$$link(6, value) } 
set 'strength4'(value : FLOAT)  { super.$$link(7, value) } 
set 'motion_type5'(value : 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right')  { super.$$link(8, value) } 
set 'strength5'(value : FLOAT)  { super.$$link(9, value) } 
set 'motion_type6'(value : 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right')  { super.$$link(10, value) } 
set 'strength6'(value : FLOAT)  { super.$$link(11, value) } 
set 'speed'(value : FLOAT)  { super.$$link(12, value) } 
set 'frame_length'(value : INT)  { super.$$link(13, value) } 
set 'prev_poses'(value : CAMERACTRL_POSES)  { super.$$link(14, value) } 

        //Getters
        get 'CAMERACTRL_POSES'() : CAMERACTRL_POSES { return [this, 'CAMERACTRL_POSES', 0]  as unknown as CAMERACTRL_POSES; }

        constructor(opts:{
            'motion_type1': 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right','strength1': FLOAT,'motion_type2': 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right','strength2': FLOAT,'motion_type3': 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right','strength3': FLOAT,'motion_type4': 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right','strength4': FLOAT,'motion_type5': 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right','strength5': FLOAT,'motion_type6': 'Static'|'Pan Up'|'Pan Down'|'Pan Left'|'Pan Right'|'Zoom In'|'Zoom Out'|'Roll Clockwise'|'Roll Anticlockwise'|'Tilt Down'|'Tilt Up'|'Tilt Left'|'Tilt Right','strength6': FLOAT,'speed': FLOAT,'frame_length': INT,'prev_poses'?: CAMERACTRL_POSES
        }){
            super(ctx);

            this['motion_type1'] = opts['motion_type1'];
this['strength1'] = opts['strength1'];
this['motion_type2'] = opts['motion_type2'];
this['strength2'] = opts['strength2'];
this['motion_type3'] = opts['motion_type3'];
this['strength3'] = opts['strength3'];
this['motion_type4'] = opts['motion_type4'];
this['strength4'] = opts['strength4'];
this['motion_type5'] = opts['motion_type5'];
this['strength5'] = opts['strength5'];
this['motion_type6'] = opts['motion_type6'];
this['strength6'] = opts['strength6'];
this['speed'] = opts['speed'];
this['frame_length'] = opts['frame_length']
            if(opts['prev_poses']!==undefined) this['prev_poses'] = opts['prev_poses']

        }

        static defaults = {
            'strength1':  1,
'strength2':  1,
'strength3':  1,
'strength4':  1,
'strength5':  1,
'strength6':  1,
'speed':  1,
'frame_length':  16
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_CameraManualPoseAppend' : class extends Node{
        //Setters
        set 'poses_first'(value : CAMERACTRL_POSES)  { super.$$link(0, value) } 
set 'poses_last'(value : CAMERACTRL_POSES)  { super.$$link(1, value) } 

        //Getters
        get 'CAMERACTRL_POSES'() : CAMERACTRL_POSES { return [this, 'CAMERACTRL_POSES', 0]  as unknown as CAMERACTRL_POSES; }

        constructor(opts:{
            'poses_first': CAMERACTRL_POSES,'poses_last': CAMERACTRL_POSES
        }){
            super(ctx);

            this['poses_first'] = opts['poses_first'];
this['poses_last'] = opts['poses_last']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_ReplaceCameraParameters' : class extends Node{
        //Setters
        set 'poses'(value : CAMERACTRL_POSES)  { super.$$link(0, value) } 
set 'fx'(value : FLOAT)  { super.$$link(1, value) } 
set 'fy'(value : FLOAT)  { super.$$link(2, value) } 
set 'cx'(value : FLOAT)  { super.$$link(3, value) } 
set 'cy'(value : FLOAT)  { super.$$link(4, value) } 

        //Getters
        get 'CAMERACTRL_POSES'() : CAMERACTRL_POSES { return [this, 'CAMERACTRL_POSES', 0]  as unknown as CAMERACTRL_POSES; }

        constructor(opts:{
            'poses': CAMERACTRL_POSES,'fx': FLOAT,'fy': FLOAT,'cx': FLOAT,'cy': FLOAT
        }){
            super(ctx);

            this['poses'] = opts['poses'];
this['fx'] = opts['fx'];
this['fy'] = opts['fy'];
this['cx'] = opts['cx'];
this['cy'] = opts['cy']
            

        }

        static defaults = {
            'fx':  0.474812461,
'fy':  0.844111024,
'cx':  0.5,
'cy':  0.5
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_ReplaceOriginalPoseAspectRatio' : class extends Node{
        //Setters
        set 'poses'(value : CAMERACTRL_POSES)  { super.$$link(0, value) } 
set 'orig_pose_width'(value : INT)  { super.$$link(1, value) } 
set 'orig_pose_height'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'CAMERACTRL_POSES'() : CAMERACTRL_POSES { return [this, 'CAMERACTRL_POSES', 0]  as unknown as CAMERACTRL_POSES; }

        constructor(opts:{
            'poses': CAMERACTRL_POSES,'orig_pose_width': INT,'orig_pose_height': INT
        }){
            super(ctx);

            this['poses'] = opts['poses'];
this['orig_pose_width'] = opts['orig_pose_width'];
this['orig_pose_height'] = opts['orig_pose_height']
            

        }

        static defaults = {
            'orig_pose_width':  1280,
'orig_pose_height':  720
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_ApplyAnimateDiffModelWithPIA' : class extends Node{
        //Setters
        set 'motion_model'(value : MOTION_MODEL_ADE)  { super.$$link(0, value) } 
set 'image'(value : IMAGE)  { super.$$link(1, value) } 
set 'vae'(value : VAE)  { super.$$link(2, value) } 
set 'start_percent'(value : FLOAT)  { super.$$link(3, value) } 
set 'end_percent'(value : FLOAT)  { super.$$link(4, value) } 
set 'pia_input'(value : PIA_INPUT)  { super.$$link(5, value) } 
set 'motion_lora'(value : MOTION_LORA)  { super.$$link(6, value) } 
set 'scale_multival'(value : MULTIVAL)  { super.$$link(7, value) } 
set 'effect_multival'(value : MULTIVAL)  { super.$$link(8, value) } 
set 'ad_keyframes'(value : AD_KEYFRAMES)  { super.$$link(9, value) } 
set 'prev_m_models'(value : M_MODELS)  { super.$$link(10, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(11, value) } 

        //Getters
        get 'M_MODELS'() : M_MODELS { return [this, 'M_MODELS', 0]  as unknown as M_MODELS; }

        constructor(opts:{
            'motion_model': MOTION_MODEL_ADE,'image': IMAGE,'vae': VAE,'start_percent': FLOAT,'end_percent': FLOAT,'pia_input'?: PIA_INPUT,'motion_lora'?: MOTION_LORA,'scale_multival'?: MULTIVAL,'effect_multival'?: MULTIVAL,'ad_keyframes'?: AD_KEYFRAMES,'prev_m_models'?: M_MODELS,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['motion_model'] = opts['motion_model'];
this['image'] = opts['image'];
this['vae'] = opts['vae'];
this['start_percent'] = opts['start_percent'];
this['end_percent'] = opts['end_percent']
            if(opts['pia_input']!==undefined) this['pia_input'] = opts['pia_input'];
if(opts['motion_lora']!==undefined) this['motion_lora'] = opts['motion_lora'];
if(opts['scale_multival']!==undefined) this['scale_multival'] = opts['scale_multival'];
if(opts['effect_multival']!==undefined) this['effect_multival'] = opts['effect_multival'];
if(opts['ad_keyframes']!==undefined) this['ad_keyframes'] = opts['ad_keyframes'];
if(opts['prev_m_models']!==undefined) this['prev_m_models'] = opts['prev_m_models'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'start_percent':  0,
'end_percent':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_InputPIA_Multival' : class extends Node{
        //Setters
        set 'multival'(value : MULTIVAL)  { super.$$link(0, value) } 

        //Getters
        get 'PIA_INPUT'() : PIA_INPUT { return [this, 'PIA_INPUT', 0]  as unknown as PIA_INPUT; }

        constructor(opts:{
            'multival': MULTIVAL
        }){
            super(ctx);

            this['multival'] = opts['multival']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_InputPIA_PaperPresets' : class extends Node{
        //Setters
        set 'preset'(value : 'Animation (Small Motion)'|'Animation (Medium Motion)'|'Animation (Large Motion)'|'Loop (Small Motion)'|'Loop (Medium Motion)'|'Loop (Large Motion)'|'Style Transfer (Small Motion)'|'Style Transfer (Medium Motion)'|'Style Transfer (Large Motion)')  { super.$$link(0, value) } 
set 'batch_index'(value : INT)  { super.$$link(1, value) } 
set 'mult_multival'(value : MULTIVAL)  { super.$$link(2, value) } 
set 'print_values'(value : BOOLEAN)  { super.$$link(3, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(4, value) } 

        //Getters
        get 'PIA_INPUT'() : PIA_INPUT { return [this, 'PIA_INPUT', 0]  as unknown as PIA_INPUT; }

        constructor(opts:{
            'preset': 'Animation (Small Motion)'|'Animation (Medium Motion)'|'Animation (Large Motion)'|'Loop (Small Motion)'|'Loop (Medium Motion)'|'Loop (Large Motion)'|'Style Transfer (Small Motion)'|'Style Transfer (Medium Motion)'|'Style Transfer (Large Motion)','batch_index': INT,'mult_multival'?: MULTIVAL,'print_values'?: BOOLEAN,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['preset'] = opts['preset'];
this['batch_index'] = opts['batch_index']
            if(opts['mult_multival']!==undefined) this['mult_multival'] = opts['mult_multival'];
if(opts['print_values']!==undefined) this['print_values'] = opts['print_values'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'batch_index':  0,
'print_values':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_PIA_AnimateDiffKeyframe' : class extends Node{
        //Setters
        set 'start_percent'(value : FLOAT)  { super.$$link(0, value) } 
set 'prev_ad_keyframes'(value : AD_KEYFRAMES)  { super.$$link(1, value) } 
set 'scale_multival'(value : MULTIVAL)  { super.$$link(2, value) } 
set 'effect_multival'(value : MULTIVAL)  { super.$$link(3, value) } 
set 'pia_input'(value : PIA_INPUT)  { super.$$link(4, value) } 
set 'inherit_missing'(value : BOOLEAN)  { super.$$link(5, value) } 
set 'guarantee_steps'(value : INT)  { super.$$link(6, value) } 
set 'autosize'(value : ADEAUTOSIZE)  { super.$$link(7, value) } 

        //Getters
        get 'AD_KEYFRAMES'() : AD_KEYFRAMES { return [this, 'AD_KEYFRAMES', 0]  as unknown as AD_KEYFRAMES; }

        constructor(opts:{
            'start_percent': FLOAT,'prev_ad_keyframes'?: AD_KEYFRAMES,'scale_multival'?: MULTIVAL,'effect_multival'?: MULTIVAL,'pia_input'?: PIA_INPUT,'inherit_missing'?: BOOLEAN,'guarantee_steps'?: INT,'autosize'?: ADEAUTOSIZE
        }){
            super(ctx);

            this['start_percent'] = opts['start_percent']
            if(opts['prev_ad_keyframes']!==undefined) this['prev_ad_keyframes'] = opts['prev_ad_keyframes'];
if(opts['scale_multival']!==undefined) this['scale_multival'] = opts['scale_multival'];
if(opts['effect_multival']!==undefined) this['effect_multival'] = opts['effect_multival'];
if(opts['pia_input']!==undefined) this['pia_input'] = opts['pia_input'];
if(opts['inherit_missing']!==undefined) this['inherit_missing'] = opts['inherit_missing'];
if(opts['guarantee_steps']!==undefined) this['guarantee_steps'] = opts['guarantee_steps'];
if(opts['autosize']!==undefined) this['autosize'] = opts['autosize']

        }

        static defaults = {
            'start_percent':  0,
'inherit_missing':  true,
'guarantee_steps':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_InjectPIAIntoAnimateDiffModel' : class extends Node{
        //Setters
        set 'model_name'(value : 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt')  { super.$$link(0, value) } 
set 'motion_model'(value : MOTION_MODEL_ADE)  { super.$$link(1, value) } 
set 'ad_settings'(value : AD_SETTINGS)  { super.$$link(2, value) } 
set 'deprecation_warning'(value : ADEWARN)  { super.$$link(3, value) } 

        //Getters
        get 'MOTION_MODEL'() : MOTION_MODEL_ADE { return [this, 'MOTION_MODEL', 0]  as unknown as MOTION_MODEL_ADE; }

        constructor(opts:{
            'model_name': 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt','motion_model': MOTION_MODEL_ADE,'ad_settings'?: AD_SETTINGS,'deprecation_warning'?: ADEWARN
        }){
            super(ctx);

            this['model_name'] = opts['model_name'];
this['motion_model'] = opts['motion_model']
            if(opts['ad_settings']!==undefined) this['ad_settings'] = opts['ad_settings'];
if(opts['deprecation_warning']!==undefined) this['deprecation_warning'] = opts['deprecation_warning']

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'AnimateDiffLoaderV1' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'latents'(value : LATENT)  { super.$$link(1, value) } 
set 'model_name'(value : 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt')  { super.$$link(2, value) } 
set 'unlimited_area_hack'(value : BOOLEAN)  { super.$$link(3, value) } 
set 'beta_schedule'(value : 'sqrt_linear (AnimateDiff)'|'use existing'|'autoselect'|'linear (AnimateDiff-SDXL)'|'linear (HotshotXL/default)'|'avg(sqrt_linear,linear)'|'lcm avg(sqrt_linear,linear)'|'lcm'|'lcm[100_ots]'|'lcm >> sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2')  { super.$$link(4, value) } 
set 'deprecation_warning'(value : ADEWARN)  { super.$$link(5, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'LATENT'() : LATENT { return [this, 'LATENT', 1]  as unknown as LATENT; }

        constructor(opts:{
            'model': MODEL,'latents': LATENT,'model_name': 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt','unlimited_area_hack': BOOLEAN,'beta_schedule': 'sqrt_linear (AnimateDiff)'|'use existing'|'autoselect'|'linear (AnimateDiff-SDXL)'|'linear (HotshotXL/default)'|'avg(sqrt_linear,linear)'|'lcm avg(sqrt_linear,linear)'|'lcm'|'lcm[100_ots]'|'lcm >> sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2','deprecation_warning'?: ADEWARN
        }){
            super(ctx);

            this['model'] = opts['model'];
this['latents'] = opts['latents'];
this['model_name'] = opts['model_name'];
this['unlimited_area_hack'] = opts['unlimited_area_hack'];
this['beta_schedule'] = opts['beta_schedule']
            if(opts['deprecation_warning']!==undefined) this['deprecation_warning'] = opts['deprecation_warning']

        }

        static defaults = {
            'unlimited_area_hack':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_AnimateDiffLoaderV1Advanced' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'latents'(value : LATENT)  { super.$$link(1, value) } 
set 'model_name'(value : 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt')  { super.$$link(2, value) } 
set 'unlimited_area_hack'(value : BOOLEAN)  { super.$$link(3, value) } 
set 'context_length'(value : INT)  { super.$$link(4, value) } 
set 'context_stride'(value : INT)  { super.$$link(5, value) } 
set 'context_overlap'(value : INT)  { super.$$link(6, value) } 
set 'context_schedule'(value : 'uniform')  { super.$$link(7, value) } 
set 'closed_loop'(value : BOOLEAN)  { super.$$link(8, value) } 
set 'beta_schedule'(value : 'sqrt_linear (AnimateDiff)'|'use existing'|'autoselect'|'linear (AnimateDiff-SDXL)'|'linear (HotshotXL/default)'|'avg(sqrt_linear,linear)'|'lcm avg(sqrt_linear,linear)'|'lcm'|'lcm[100_ots]'|'lcm >> sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2')  { super.$$link(9, value) } 
set 'deprecation_warning'(value : ADEWARN)  { super.$$link(10, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }
get 'LATENT'() : LATENT { return [this, 'LATENT', 1]  as unknown as LATENT; }

        constructor(opts:{
            'model': MODEL,'latents': LATENT,'model_name': 'mm-Stabilized_high.pth'|'mm_sd_v14.ckpt'|'mm_sd_v15.ckpt'|'mm_sd_v15_v2.ckpt','unlimited_area_hack': BOOLEAN,'context_length': INT,'context_stride': INT,'context_overlap': INT,'context_schedule': 'uniform','closed_loop': BOOLEAN,'beta_schedule': 'sqrt_linear (AnimateDiff)'|'use existing'|'autoselect'|'linear (AnimateDiff-SDXL)'|'linear (HotshotXL/default)'|'avg(sqrt_linear,linear)'|'lcm avg(sqrt_linear,linear)'|'lcm'|'lcm[100_ots]'|'lcm >> sqrt_linear'|'sqrt'|'cosine'|'squaredcos_cap_v2','deprecation_warning'?: ADEWARN
        }){
            super(ctx);

            this['model'] = opts['model'];
this['latents'] = opts['latents'];
this['model_name'] = opts['model_name'];
this['unlimited_area_hack'] = opts['unlimited_area_hack'];
this['context_length'] = opts['context_length'];
this['context_stride'] = opts['context_stride'];
this['context_overlap'] = opts['context_overlap'];
this['context_schedule'] = opts['context_schedule'];
this['closed_loop'] = opts['closed_loop'];
this['beta_schedule'] = opts['beta_schedule']
            if(opts['deprecation_warning']!==undefined) this['deprecation_warning'] = opts['deprecation_warning']

        }

        static defaults = {
            'unlimited_area_hack':  false,
'context_length':  16,
'context_stride':  1,
'context_overlap':  4,
'closed_loop':  false
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_AnimateDiffCombine' : class extends Node{
        //Setters
        set 'images'(value : IMAGE)  { super.$$link(0, value) } 
set 'frame_rate'(value : INT)  { super.$$link(1, value) } 
set 'loop_count'(value : INT)  { super.$$link(2, value) } 
set 'filename_prefix'(value : STRING)  { super.$$link(3, value) } 
set 'format'(value : 'image/gif'|'image/webp'|'video/av1-webm'|'video/h264-mp4'|'video/h265-mp4'|'video/webm')  { super.$$link(4, value) } 
set 'pingpong'(value : BOOLEAN)  { super.$$link(5, value) } 
set 'save_image'(value : BOOLEAN)  { super.$$link(6, value) } 
set 'deprecation_warning'(value : ADEWARN)  { super.$$link(7, value) } 

        //Getters
        get 'GIF'() : GIF { return [this, 'GIF', 0]  as unknown as GIF; }

        constructor(opts:{
            'images': IMAGE,'frame_rate': INT,'loop_count': INT,'filename_prefix': STRING,'format': 'image/gif'|'image/webp'|'video/av1-webm'|'video/h264-mp4'|'video/h265-mp4'|'video/webm','pingpong': BOOLEAN,'save_image': BOOLEAN,'deprecation_warning'?: ADEWARN
        }){
            super(ctx);

            this['images'] = opts['images'];
this['frame_rate'] = opts['frame_rate'];
this['loop_count'] = opts['loop_count'];
this['filename_prefix'] = opts['filename_prefix'];
this['format'] = opts['format'];
this['pingpong'] = opts['pingpong'];
this['save_image'] = opts['save_image']
            if(opts['deprecation_warning']!==undefined) this['deprecation_warning'] = opts['deprecation_warning']

        }

        static defaults = {
            'frame_rate':  8,
'loop_count':  0,
'filename_prefix':  "AnimateDiff",
'pingpong':  false,
'save_image':  true
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_AnimateDiffModelSettings_Release' : class extends Node{
        //Setters
        set 'min_motion_scale'(value : FLOAT)  { super.$$link(0, value) } 
set 'max_motion_scale'(value : FLOAT)  { super.$$link(1, value) } 
set 'mask_motion_scale'(value : MASK)  { super.$$link(2, value) } 
set 'deprecation_warning'(value : ADEWARN)  { super.$$link(3, value) } 

        //Getters
        get 'AD_SETTINGS'() : AD_SETTINGS { return [this, 'AD_SETTINGS', 0]  as unknown as AD_SETTINGS; }

        constructor(opts:{
            'min_motion_scale': FLOAT,'max_motion_scale': FLOAT,'mask_motion_scale'?: MASK,'deprecation_warning'?: ADEWARN
        }){
            super(ctx);

            this['min_motion_scale'] = opts['min_motion_scale'];
this['max_motion_scale'] = opts['max_motion_scale']
            if(opts['mask_motion_scale']!==undefined) this['mask_motion_scale'] = opts['mask_motion_scale'];
if(opts['deprecation_warning']!==undefined) this['deprecation_warning'] = opts['deprecation_warning']

        }

        static defaults = {
            'min_motion_scale':  1,
'max_motion_scale':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_AnimateDiffModelSettingsSimple' : class extends Node{
        //Setters
        set 'motion_pe_stretch'(value : INT)  { super.$$link(0, value) } 
set 'mask_motion_scale'(value : MASK)  { super.$$link(1, value) } 
set 'min_motion_scale'(value : FLOAT)  { super.$$link(2, value) } 
set 'max_motion_scale'(value : FLOAT)  { super.$$link(3, value) } 
set 'deprecation_warning'(value : ADEWARN)  { super.$$link(4, value) } 

        //Getters
        get 'AD_SETTINGS'() : AD_SETTINGS { return [this, 'AD_SETTINGS', 0]  as unknown as AD_SETTINGS; }

        constructor(opts:{
            'motion_pe_stretch': INT,'mask_motion_scale'?: MASK,'min_motion_scale'?: FLOAT,'max_motion_scale'?: FLOAT,'deprecation_warning'?: ADEWARN
        }){
            super(ctx);

            this['motion_pe_stretch'] = opts['motion_pe_stretch']
            if(opts['mask_motion_scale']!==undefined) this['mask_motion_scale'] = opts['mask_motion_scale'];
if(opts['min_motion_scale']!==undefined) this['min_motion_scale'] = opts['min_motion_scale'];
if(opts['max_motion_scale']!==undefined) this['max_motion_scale'] = opts['max_motion_scale'];
if(opts['deprecation_warning']!==undefined) this['deprecation_warning'] = opts['deprecation_warning']

        }

        static defaults = {
            'motion_pe_stretch':  0,
'min_motion_scale':  1,
'max_motion_scale':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_AnimateDiffModelSettings' : class extends Node{
        //Setters
        set 'pe_strength'(value : FLOAT)  { super.$$link(0, value) } 
set 'attn_strength'(value : FLOAT)  { super.$$link(1, value) } 
set 'other_strength'(value : FLOAT)  { super.$$link(2, value) } 
set 'motion_pe_stretch'(value : INT)  { super.$$link(3, value) } 
set 'cap_initial_pe_length'(value : INT)  { super.$$link(4, value) } 
set 'interpolate_pe_to_length'(value : INT)  { super.$$link(5, value) } 
set 'initial_pe_idx_offset'(value : INT)  { super.$$link(6, value) } 
set 'final_pe_idx_offset'(value : INT)  { super.$$link(7, value) } 
set 'mask_motion_scale'(value : MASK)  { super.$$link(8, value) } 
set 'min_motion_scale'(value : FLOAT)  { super.$$link(9, value) } 
set 'max_motion_scale'(value : FLOAT)  { super.$$link(10, value) } 
set 'deprecation_warning'(value : ADEWARN)  { super.$$link(11, value) } 

        //Getters
        get 'AD_SETTINGS'() : AD_SETTINGS { return [this, 'AD_SETTINGS', 0]  as unknown as AD_SETTINGS; }

        constructor(opts:{
            'pe_strength': FLOAT,'attn_strength': FLOAT,'other_strength': FLOAT,'motion_pe_stretch': INT,'cap_initial_pe_length': INT,'interpolate_pe_to_length': INT,'initial_pe_idx_offset': INT,'final_pe_idx_offset': INT,'mask_motion_scale'?: MASK,'min_motion_scale'?: FLOAT,'max_motion_scale'?: FLOAT,'deprecation_warning'?: ADEWARN
        }){
            super(ctx);

            this['pe_strength'] = opts['pe_strength'];
this['attn_strength'] = opts['attn_strength'];
this['other_strength'] = opts['other_strength'];
this['motion_pe_stretch'] = opts['motion_pe_stretch'];
this['cap_initial_pe_length'] = opts['cap_initial_pe_length'];
this['interpolate_pe_to_length'] = opts['interpolate_pe_to_length'];
this['initial_pe_idx_offset'] = opts['initial_pe_idx_offset'];
this['final_pe_idx_offset'] = opts['final_pe_idx_offset']
            if(opts['mask_motion_scale']!==undefined) this['mask_motion_scale'] = opts['mask_motion_scale'];
if(opts['min_motion_scale']!==undefined) this['min_motion_scale'] = opts['min_motion_scale'];
if(opts['max_motion_scale']!==undefined) this['max_motion_scale'] = opts['max_motion_scale'];
if(opts['deprecation_warning']!==undefined) this['deprecation_warning'] = opts['deprecation_warning']

        }

        static defaults = {
            'pe_strength':  1,
'attn_strength':  1,
'other_strength':  1,
'motion_pe_stretch':  0,
'cap_initial_pe_length':  0,
'interpolate_pe_to_length':  0,
'initial_pe_idx_offset':  0,
'final_pe_idx_offset':  0,
'min_motion_scale':  1,
'max_motion_scale':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'ADE_AnimateDiffModelSettingsAdvancedAttnStrengths' : class extends Node{
        //Setters
        set 'pe_strength'(value : FLOAT)  { super.$$link(0, value) } 
set 'attn_strength'(value : FLOAT)  { super.$$link(1, value) } 
set 'attn_q_strength'(value : FLOAT)  { super.$$link(2, value) } 
set 'attn_k_strength'(value : FLOAT)  { super.$$link(3, value) } 
set 'attn_v_strength'(value : FLOAT)  { super.$$link(4, value) } 
set 'attn_out_weight_strength'(value : FLOAT)  { super.$$link(5, value) } 
set 'attn_out_bias_strength'(value : FLOAT)  { super.$$link(6, value) } 
set 'other_strength'(value : FLOAT)  { super.$$link(7, value) } 
set 'motion_pe_stretch'(value : INT)  { super.$$link(8, value) } 
set 'cap_initial_pe_length'(value : INT)  { super.$$link(9, value) } 
set 'interpolate_pe_to_length'(value : INT)  { super.$$link(10, value) } 
set 'initial_pe_idx_offset'(value : INT)  { super.$$link(11, value) } 
set 'final_pe_idx_offset'(value : INT)  { super.$$link(12, value) } 
set 'mask_motion_scale'(value : MASK)  { super.$$link(13, value) } 
set 'min_motion_scale'(value : FLOAT)  { super.$$link(14, value) } 
set 'max_motion_scale'(value : FLOAT)  { super.$$link(15, value) } 
set 'deprecation_warning'(value : ADEWARN)  { super.$$link(16, value) } 

        //Getters
        get 'AD_SETTINGS'() : AD_SETTINGS { return [this, 'AD_SETTINGS', 0]  as unknown as AD_SETTINGS; }

        constructor(opts:{
            'pe_strength': FLOAT,'attn_strength': FLOAT,'attn_q_strength': FLOAT,'attn_k_strength': FLOAT,'attn_v_strength': FLOAT,'attn_out_weight_strength': FLOAT,'attn_out_bias_strength': FLOAT,'other_strength': FLOAT,'motion_pe_stretch': INT,'cap_initial_pe_length': INT,'interpolate_pe_to_length': INT,'initial_pe_idx_offset': INT,'final_pe_idx_offset': INT,'mask_motion_scale'?: MASK,'min_motion_scale'?: FLOAT,'max_motion_scale'?: FLOAT,'deprecation_warning'?: ADEWARN
        }){
            super(ctx);

            this['pe_strength'] = opts['pe_strength'];
this['attn_strength'] = opts['attn_strength'];
this['attn_q_strength'] = opts['attn_q_strength'];
this['attn_k_strength'] = opts['attn_k_strength'];
this['attn_v_strength'] = opts['attn_v_strength'];
this['attn_out_weight_strength'] = opts['attn_out_weight_strength'];
this['attn_out_bias_strength'] = opts['attn_out_bias_strength'];
this['other_strength'] = opts['other_strength'];
this['motion_pe_stretch'] = opts['motion_pe_stretch'];
this['cap_initial_pe_length'] = opts['cap_initial_pe_length'];
this['interpolate_pe_to_length'] = opts['interpolate_pe_to_length'];
this['initial_pe_idx_offset'] = opts['initial_pe_idx_offset'];
this['final_pe_idx_offset'] = opts['final_pe_idx_offset']
            if(opts['mask_motion_scale']!==undefined) this['mask_motion_scale'] = opts['mask_motion_scale'];
if(opts['min_motion_scale']!==undefined) this['min_motion_scale'] = opts['min_motion_scale'];
if(opts['max_motion_scale']!==undefined) this['max_motion_scale'] = opts['max_motion_scale'];
if(opts['deprecation_warning']!==undefined) this['deprecation_warning'] = opts['deprecation_warning']

        }

        static defaults = {
            'pe_strength':  1,
'attn_strength':  1,
'attn_q_strength':  1,
'attn_k_strength':  1,
'attn_v_strength':  1,
'attn_out_weight_strength':  1,
'attn_out_bias_strength':  1,
'other_strength':  1,
'motion_pe_stretch':  0,
'cap_initial_pe_length':  0,
'interpolate_pe_to_length':  0,
'initial_pe_idx_offset':  0,
'final_pe_idx_offset':  0,
'min_motion_scale':  1,
'max_motion_scale':  1
}
},

    /**
     * TODO Docs based on metadata
     */
    'FaceSwapNode' : class extends Node{
        //Setters
        set 'face'(value : IMAGE)  { super.$$link(0, value) } 
set 'image'(value : IMAGE)  { super.$$link(1, value) } 
set 'source_face_index'(value : INT)  { super.$$link(2, value) } 
set 'target_face_indices'(value : STRING)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'face': IMAGE,'image': IMAGE,'source_face_index': INT,'target_face_indices': STRING
        }){
            super(ctx);

            this['face'] = opts['face'];
this['image'] = opts['image'];
this['source_face_index'] = opts['source_face_index'];
this['target_face_indices'] = opts['target_face_indices']
            

        }

        static defaults = {
            'source_face_index':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'INPAINT_LoadFooocusInpaint' : class extends Node{
        //Setters
        set 'head'(value : 'fooocus_inpaint_head.pth'|'inpaint_v26.fooocus.patch')  { super.$$link(0, value) } 
set 'patch'(value : 'fooocus_inpaint_head.pth'|'inpaint_v26.fooocus.patch')  { super.$$link(1, value) } 

        //Getters
        get 'INPAINT_PATCH'() : INPAINT_PATCH { return [this, 'INPAINT_PATCH', 0]  as unknown as INPAINT_PATCH; }

        constructor(opts:{
            'head': 'fooocus_inpaint_head.pth'|'inpaint_v26.fooocus.patch','patch': 'fooocus_inpaint_head.pth'|'inpaint_v26.fooocus.patch'
        }){
            super(ctx);

            this['head'] = opts['head'];
this['patch'] = opts['patch']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'INPAINT_ApplyFooocusInpaint' : class extends Node{
        //Setters
        set 'model'(value : MODEL)  { super.$$link(0, value) } 
set 'patch'(value : INPAINT_PATCH)  { super.$$link(1, value) } 
set 'latent'(value : LATENT)  { super.$$link(2, value) } 

        //Getters
        get 'MODEL'() : MODEL { return [this, 'MODEL', 0]  as unknown as MODEL; }

        constructor(opts:{
            'model': MODEL,'patch': INPAINT_PATCH,'latent': LATENT
        }){
            super(ctx);

            this['model'] = opts['model'];
this['patch'] = opts['patch'];
this['latent'] = opts['latent']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'INPAINT_VAEEncodeInpaintConditioning' : class extends Node{
        //Setters
        set 'positive'(value : CONDITIONING)  { super.$$link(0, value) } 
set 'negative'(value : CONDITIONING)  { super.$$link(1, value) } 
set 'vae'(value : VAE)  { super.$$link(2, value) } 
set 'pixels'(value : IMAGE)  { super.$$link(3, value) } 
set 'mask'(value : MASK)  { super.$$link(4, value) } 

        //Getters
        get 'positive'() : CONDITIONING { return [this, 'positive', 0]  as unknown as CONDITIONING; }
get 'negative'() : CONDITIONING { return [this, 'negative', 1]  as unknown as CONDITIONING; }
get 'latent_inpaint'() : LATENT { return [this, 'latent_inpaint', 2]  as unknown as LATENT; }
get 'latent_samples'() : LATENT { return [this, 'latent_samples', 3]  as unknown as LATENT; }

        constructor(opts:{
            'positive': CONDITIONING,'negative': CONDITIONING,'vae': VAE,'pixels': IMAGE,'mask': MASK
        }){
            super(ctx);

            this['positive'] = opts['positive'];
this['negative'] = opts['negative'];
this['vae'] = opts['vae'];
this['pixels'] = opts['pixels'];
this['mask'] = opts['mask']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'INPAINT_MaskedFill' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'mask'(value : MASK)  { super.$$link(1, value) } 
set 'fill'(value : 'neutral'|'telea'|'navier-stokes')  { super.$$link(2, value) } 
set 'falloff'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'mask': MASK,'fill': 'neutral'|'telea'|'navier-stokes','falloff': INT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['mask'] = opts['mask'];
this['fill'] = opts['fill'];
this['falloff'] = opts['falloff']
            

        }

        static defaults = {
            'falloff':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'INPAINT_MaskedBlur' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'mask'(value : MASK)  { super.$$link(1, value) } 
set 'blur'(value : INT)  { super.$$link(2, value) } 
set 'falloff'(value : INT)  { super.$$link(3, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'image': IMAGE,'mask': MASK,'blur': INT,'falloff': INT
        }){
            super(ctx);

            this['image'] = opts['image'];
this['mask'] = opts['mask'];
this['blur'] = opts['blur'];
this['falloff'] = opts['falloff']
            

        }

        static defaults = {
            'blur':  255,
'falloff':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'INPAINT_LoadInpaintModel' : class extends Node{
        //Setters
        set 'model_name'(value : 'fooocus_inpaint_head.pth'|'inpaint_v26.fooocus.patch')  { super.$$link(0, value) } 

        //Getters
        get 'INPAINT_MODEL'() : INPAINT_MODEL { return [this, 'INPAINT_MODEL', 0]  as unknown as INPAINT_MODEL; }

        constructor(opts:{
            'model_name': 'fooocus_inpaint_head.pth'|'inpaint_v26.fooocus.patch'
        }){
            super(ctx);

            this['model_name'] = opts['model_name']
            

        }

        static defaults = {
            
}
},

    /**
     * TODO Docs based on metadata
     */
    'INPAINT_InpaintWithModel' : class extends Node{
        //Setters
        set 'inpaint_model'(value : INPAINT_MODEL)  { super.$$link(0, value) } 
set 'image'(value : IMAGE)  { super.$$link(1, value) } 
set 'mask'(value : MASK)  { super.$$link(2, value) } 
set 'seed'(value : INT)  { super.$$link(3, value) } 
set 'optional_upscale_model'(value : UPSCALE_MODEL)  { super.$$link(4, value) } 

        //Getters
        get 'IMAGE'() : IMAGE { return [this, 'IMAGE', 0]  as unknown as IMAGE; }

        constructor(opts:{
            'inpaint_model': INPAINT_MODEL,'image': IMAGE,'mask': MASK,'seed': INT,'optional_upscale_model'?: UPSCALE_MODEL
        }){
            super(ctx);

            this['inpaint_model'] = opts['inpaint_model'];
this['image'] = opts['image'];
this['mask'] = opts['mask'];
this['seed'] = opts['seed']
            if(opts['optional_upscale_model']!==undefined) this['optional_upscale_model'] = opts['optional_upscale_model']

        }

        static defaults = {
            'seed':  0
}
},

    /**
     * TODO Docs based on metadata
     */
    'INPAINT_ExpandMask' : class extends Node{
        //Setters
        set 'mask'(value : MASK)  { super.$$link(0, value) } 
set 'grow'(value : INT)  { super.$$link(1, value) } 
set 'blur'(value : INT)  { super.$$link(2, value) } 

        //Getters
        get 'MASK'() : MASK { return [this, 'MASK', 0]  as unknown as MASK; }

        constructor(opts:{
            'mask': MASK,'grow': INT,'blur': INT
        }){
            super(ctx);

            this['mask'] = opts['mask'];
this['grow'] = opts['grow'];
this['blur'] = opts['blur']
            

        }

        static defaults = {
            'grow':  16,
'blur':  7
}
},

    /**
     * TODO Docs based on metadata
     */
    'INPAINT_DenoiseToCompositingMask' : class extends Node{
        //Setters
        set 'mask'(value : MASK)  { super.$$link(0, value) } 
set 'offset'(value : FLOAT)  { super.$$link(1, value) } 
set 'threshold'(value : FLOAT)  { super.$$link(2, value) } 

        //Getters
        get 'MASK'() : MASK { return [this, 'MASK', 0]  as unknown as MASK; }

        constructor(opts:{
            'mask': MASK,'offset': FLOAT,'threshold': FLOAT
        }){
            super(ctx);

            this['mask'] = opts['mask'];
this['offset'] = opts['offset'];
this['threshold'] = opts['threshold']
            

        }

        static defaults = {
            'offset':  0.1,
'threshold':  0.2
}
},

    /**
     * TODO Docs based on metadata
     */
    'WD14Tagger|pysssss' : class extends Node{
        //Setters
        set 'image'(value : IMAGE)  { super.$$link(0, value) } 
set 'model'(value : 'wd-vit-tagger-v3'|'wd-swinv2-tagger-v3'|'wd-convnext-tagger-v3'|'wd-v1-4-moat-tagger-v2'|'wd-v1-4-convnextv2-tagger-v2'|'wd-v1-4-convnext-tagger-v2'|'wd-v1-4-convnext-tagger'|'wd-v1-4-vit-tagger-v2'|'wd-v1-4-swinv2-tagger-v2'|'wd-v1-4-vit-tagger')  { super.$$link(1, value) } 
set 'threshold'(value : FLOAT)  { super.$$link(2, value) } 
set 'character_threshold'(value : FLOAT)  { super.$$link(3, value) } 
set 'replace_underscore'(value : BOOLEAN)  { super.$$link(4, value) } 
set 'trailing_comma'(value : BOOLEAN)  { super.$$link(5, value) } 
set 'exclude_tags'(value : STRING)  { super.$$link(6, value) } 

        //Getters
        get 'STRING'() : STRING { return [this, 'STRING', 0]  as unknown as STRING; }

        constructor(opts:{
            'image': IMAGE,'model': 'wd-vit-tagger-v3'|'wd-swinv2-tagger-v3'|'wd-convnext-tagger-v3'|'wd-v1-4-moat-tagger-v2'|'wd-v1-4-convnextv2-tagger-v2'|'wd-v1-4-convnext-tagger-v2'|'wd-v1-4-convnext-tagger'|'wd-v1-4-vit-tagger-v2'|'wd-v1-4-swinv2-tagger-v2'|'wd-v1-4-vit-tagger','threshold': FLOAT,'character_threshold': FLOAT,'replace_underscore': BOOLEAN,'trailing_comma': BOOLEAN,'exclude_tags': STRING
        }){
            super(ctx);

            this['image'] = opts['image'];
this['model'] = opts['model'];
this['threshold'] = opts['threshold'];
this['character_threshold'] = opts['character_threshold'];
this['replace_underscore'] = opts['replace_underscore'];
this['trailing_comma'] = opts['trailing_comma'];
this['exclude_tags'] = opts['exclude_tags']
            

        }

        static defaults = {
            'model':  "wd-v1-4-moat-tagger-v2",
'threshold':  0.35,
'character_threshold':  0.85,
'replace_underscore':  false,
'trailing_comma':  false,
'exclude_tags':  ""
}
} 
, $compile : async function (){/*TODO*/} }}